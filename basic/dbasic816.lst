ca65 V2.18 - Ubuntu 2.19-1
Main file   : dbasic816.asm
Current file: dbasic816.asm

000000r 1               .P816
000000r 1               .A8
000000r 1               .I8
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.23
000000r 1               ; THIS WORK IS DERIVED FROM ehBASIC BY LEE DAVIDSON
000000r 1               ;
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixedf
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 1               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 1               ; 2.22	fixed RND() breaking the get byte routine
000000r 1               ; 2.30  CONVERT TO 65816 ADDRESS SPACE
000000r 1               
000000r 1               
000000r 1               
000000r 1                       .SEGMENT "HIGHMEM"
000000r 1               ;.ORG    0FF1000H
000000r 1                       .ORG    1000H
001000  1               BASICORG:
001000  1  4C 03 25             JMP     BASICBEGIN
001003  1               ;____________________________________________________________________________________________
001003  1               ;
001003  1               ; MACROS
001003  1               
001003  1                       .INCLUDE "macros.asm"
001003  2               ;___________________________________________________________________________________________________
001003  2               ;
001003  2               ;	USEFUL 65186 MACROS
001003  2               ;__________________________________________________________________________________________________
001003  2               
001003  2               .macro       STORECONTEXT             ; Store Complete Context at the beginning of a Sub
001003  2                       PHX
001003  2                       phy
001003  2                       pha
001003  2                       php
001003  2               .endmacro
001003  2               
001003  2               .macro       RESTORECONTEXT                 ; Restore Complete Context at the end of a Sub
001003  2                       plp
001003  2                       pla
001003  2                       ply
001003  2                       plx
001003  2               .endmacro
001003  2               
001003  2               .macro       INDEX16                         ; Set 16bit Index Registers
001003  2               		REP #$10 		; 16 bit Index registers
001003  2               		.I16
001003  2               .endmacro
001003  2               .macro       INDEX8                          ; Set 8bit Index Registers
001003  2               		SEP #$10 		; 8 bit Index registers
001003  2               		.I8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR16                  ; Set 16bit Index Registers
001003  2               		REP #$20 		; 16 bit Index registers
001003  2               		.A16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR8                   ; Set 8bit Index Registers
001003  2               		SEP #$20 		; 8 bit Index registers
001003  2               		.A8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX16             ; Set 16bit Index Registers
001003  2               		REP #$30 		; 16 bit Index registers
001003  2               		.A16
001003  2                               .I16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX8              ; Set 8bit Index Registers
001003  2               		SEP #$30 		; 8 bit Index registers
001003  2               		.A8
001003  2                               .I8
001003  2               .endmacro
001003  2               
001003  2               .macro       LDAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               	LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLB
001003  2                   LDA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       STAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   PHA
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLA
001003  2                   PLX
001003  2               	STA	(<PARM1),Y		;
001003  2               	PLB
001003  2                   STA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       SETBANK PARM1
001003  2                   PHX
001003  2               	LDX #PARM1
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               .endmacro
001003  2               
001003  2               
001003  2               .macro       FETCHINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2               .endmacro
001003  2               
001003  2               .macro       CMPINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CMP	<TMPFLG		    ;
001003  2               .endmacro
001003  2               
001003  2               .macro       ADCINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CLC
001003  2                   ADC	<TMPFLG 		;
001003  2               .endmacro
001003  2               
001003  2               .macro       LBEQ PARM1
001003  2                    bne *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBNE PARM1
001003  2                    beq *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCC PARM1
001003  2                    bcc *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCS PARM1
001003  2                    bcs *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  1               
001003  1               ; ZERO PAGE DEFINITIONS
001003  1                       .INCLUDE "zeropage.asm"
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; ZERO PAGE DEFINITIONS
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_WARM        = $00           ; BASIC warm start entry point
001003  2               Wrmjpl          = LAB_WARM+1    ; BASIC warm start vector jump low byte
001003  2               Wrmjph          = LAB_WARM+2    ; BASIC warm start vector jump high byte
001003  2               TMPFLG          = $04
001003  2               VIDEOMODE       = $06
001003  2               LOCALWORK       = $07           ; word (2 bytes)
001003  2               Usrjmp          = $0A           ; USR function JMP address
001003  2               Usrjpl          = <Usrjmp+1     ; USR function JMP vector low byte
001003  2               Usrjph          = <Usrjmp+2     ; USR function JMP vector high byte
001003  2               Nullct          = $0D           ; nulls output after each line
001003  2               TPos            = $0E           ; BASIC terminal position byte
001003  2               TWidth          = $0F           ; BASIC terminal width byte
001003  2               Iclim           = $10           ; input column limit
001003  2               Itempl          = $11           ; temporary integer low byte
001003  2               Itemph          = <Itempl+1     ; temporary integer high byte
001003  2               
001003  2               nums_1          = <Itempl       ; number to bin/hex string convert MSB
001003  2               nums_2          = <nums_1+1     ; number to bin/hex string convert
001003  2               nums_3          = <nums_1+2     ; number to bin/hex string convert LSB
001003  2               
001003  2               Srchc           = $5B           ; search character
001003  2               Temp3           = <Srchc        ; temp byte used in number routines
001003  2               Scnquo          = $5C           ; scan-between-quotes flag
001003  2               Asrch           = <Scnquo       ; alt search character
001003  2               
001003  2               XOAw_l          = <Srchc        ; eXclusive OR, OR and AND word low byte
001003  2               XOAw_h          = <Scnquo       ; eXclusive OR, OR and AND word high byte
001003  2               
001003  2               Ibptr           = $5D           ; input buffer pointer
001003  2               Dimcnt          = <Ibptr        ; # of dimensions
001003  2               Tindx           = <Ibptr        ; token index
001003  2               
001003  2               Defdim          = $5E           ; default DIM flag
001003  2               Dtypef          = $5F           ; data type flag, $FF=string, $00=numeric
001003  2               Oquote          = $60           ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
001003  2               Gclctd          = $60           ; garbage collected flag
001003  2               Sufnxf          = $61           ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
001003  2               Imode           = $62           ; input mode flag, $00=INPUT, $80=READ
001003  2               Cflag           = $63           ; comparison evaluation flag
001003  2               
001003  2               TabSiz          = $64           ; TAB step size (was input flag)
001003  2               
001003  2               next_s          = $65           ; next descriptor stack address
001003  2               ; these two bytes form a word pointer to the item
001003  2               ; currently on top of the descriptor stack
001003  2               last_sl         = $66           ; last descriptor stack address low byte
001003  2               last_sh         = $67           ; last descriptor stack address high byte (always $00)
001003  2               
001003  2               des_sk          = $68           ; descriptor stack start address (temp strings)
001003  2               
001003  2               ;			= $70		; End of descriptor stack
001003  2               
001003  2               ut1_pl          = $71           ; utility pointer 1 low byte
001003  2               ut1_ph          = <ut1_pl+1     ; utility pointer 1 high byte
001003  2               ut2_pl          = $73           ; utility pointer 2 low byte
001003  2               ut2_ph          = <ut2_pl+1     ; utility pointer 2 high byte
001003  2               
001003  2               Temp_2          = <ut1_pl       ; temp byte for block move
001003  2               
001003  2               FACt_1          = $75           ; FAC temp mantissa1
001003  2               FACt_2          = <FACt_1+1     ; FAC temp mantissa2
001003  2               FACt_3          = <FACt_2+1     ; FAC temp mantissa3
001003  2               
001003  2               dims_l          = <FACt_2       ; array dimension size low byte
001003  2               dims_h          = <FACt_3       ; array dimension size high byte
001003  2               
001003  2               TempB           = $78           ; temp page 0 byte
001003  2               
001003  2               Smeml           = $79           ; start of mem low byte		(Start-of-Basic)
001003  2               Smemh           = <Smeml+1      ; start of mem high byte	(Start-of-Basic)
001003  2               Svarl           = $7B           ; start of vars low byte	(Start-of-Variables)
001003  2               Svarh           = <Svarl+1      ; start of vars high byte	(Start-of-Variables)
001003  2               Sarryl          = $7D           ; var mem end low byte		(Start-of-Arrays)
001003  2               Sarryh          = <Sarryl+1     ; var mem end high byte		(Start-of-Arrays)
001003  2               Earryl          = $7F           ; array mem end low byte	(End-of-Arrays)
001003  2               Earryh          = <Earryl+1     ; array mem end high byte	(End-of-Arrays)
001003  2               Sstorl          = $81           ; string storage low byte	(String storage (moving down))
001003  2               Sstorh          = <Sstorl+1     ; string storage high byte	(String storage (moving down))
001003  2               Sutill          = $83           ; string utility ptr low byte
001003  2               Sutilh          = <Sutill+1     ; string utility ptr high byte
001003  2               Ememl           = $85           ; end of mem low byte		(Limit-of-memory)
001003  2               Ememh           = <Ememl+1      ; end of mem high byte		(Limit-of-memory)
001003  2               
001003  2               Clinel          = $87           ; current line low byte		(Basic line number)
001003  2               Clineh          = <Clinel+1     ; current line high byte	(Basic line number)
001003  2               Blinel          = $89           ; break line low byte		(Previous Basic line number)
001003  2               Blineh          = <Blinel+1     ; break line high byte		(Previous Basic line number)
001003  2               
001003  2               Cpntrl          = $8B           ; continue pointer low byte
001003  2               Cpntrh          = <Cpntrl+1     ; continue pointer high byte
001003  2               
001003  2               Dlinel          = $8D           ; current DATA line low byte
001003  2               Dlineh          = <Dlinel+1     ; current DATA line high byte
001003  2               
001003  2               Dptrl           = $8F           ; DATA pointer low byte
001003  2               Dptrh           = <Dptrl+1      ; DATA pointer high byte
001003  2               
001003  2               Rdptrl          = $91           ; read pointer low byte
001003  2               Rdptrh          = <Rdptrl+1     ; read pointer high byte
001003  2               
001003  2               Varnm1          = $93           ; current var name 1st byte
001003  2               Varnm2          = <Varnm1+1     ; current var name 2nd byte
001003  2               
001003  2               Cvaral          = $95           ; current var address low byte
001003  2               Cvarah          = <Cvaral+1     ; current var address high byte
001003  2               
001003  2               Frnxtl          = $97           ; var pointer for FOR/NEXT low byte
001003  2               Frnxth          = <Frnxtl+1     ; var pointer for FOR/NEXT high byte
001003  2               
001003  2               Tidx1           = <Frnxtl       ; temp line index
001003  2               
001003  2               Lvarpl          = <Frnxtl       ; let var pointer low byte
001003  2               Lvarph          = <Frnxth       ; let var pointer high byte
001003  2               
001003  2               prstk           = $99           ; precedence stacked flag
001003  2               
001003  2               comp_f          = $9B           ; compare function flag, bits 0,1 and 2 used
001003  2               ; bit 2 set if >
001003  2               ; bit 1 set if =
001003  2               ; bit 0 set if <
001003  2               
001003  2               func_l          = $9C           ; function pointer low byte
001003  2               func_h          = <func_l+1     ; function pointer high byte
001003  2               
001003  2               garb_l          = <func_l       ; garbage collection working pointer low byte
001003  2               garb_h          = <func_h       ; garbage collection working pointer high byte
001003  2               
001003  2               des_2l          = $9E           ; string descriptor_2 pointer low byte
001003  2               des_2h          = <des_2l+1     ; string descriptor_2 pointer high byte
001003  2               
001003  2               g_step          = $A0           ; garbage collect step size
001003  2               
001003  2               Fnxjmp          = $A1           ; jump vector for functions
001003  2               Fnxjpl          = <Fnxjmp+1     ; functions jump vector low byte
001003  2               Fnxjph          = <Fnxjmp+2     ; functions jump vector high byte
001003  2               
001003  2               g_indx          = <Fnxjpl       ; garbage collect temp index
001003  2               
001003  2               FAC2_r          = $A3           ; FAC2 rounding byte
001003  2               
001003  2               Adatal          = $A4           ; array data pointer low byte
001003  2               Adatah          = <Adatal+1     ; array data pointer high  byte
001003  2               
001003  2               Nbendl          = <Adatal       ; new block end pointer low byte
001003  2               Nbendh          = <Adatah       ; new block end pointer high  byte
001003  2               
001003  2               Obendl          = $A6           ; old block end pointer low byte
001003  2               Obendh          = <Obendl+1     ; old block end pointer high  byte
001003  2               
001003  2               numexp          = $A8           ; string to float number exponent count
001003  2               expcnt          = $A9           ; string to float exponent count
001003  2               
001003  2               numbit          = <numexp       ; bit count for array element calculations
001003  2               
001003  2               numdpf          = $AA           ; string to float decimal point flag
001003  2               expneg          = $AB           ; string to float eval exponent -ve flag
001003  2               
001003  2               Astrtl          = <numdpf       ; array start pointer low byte
001003  2               Astrth          = <expneg       ; array start pointer high  byte
001003  2               
001003  2               Histrl          = <numdpf       ; highest string low byte
001003  2               Histrh          = <expneg       ; highest string high  byte
001003  2               
001003  2               Baslnl          = <numdpf       ; BASIC search line pointer low byte
001003  2               Baslnh          = <expneg       ; BASIC search line pointer high  byte
001003  2               
001003  2               Fvar_l          = <numdpf       ; find/found variable pointer low byte
001003  2               Fvar_h          = <expneg       ; find/found variable pointer high  byte
001003  2               
001003  2               Ostrtl          = <numdpf       ; old block start pointer low byte
001003  2               Ostrth          = <expneg       ; old block start pointer high  byte
001003  2               
001003  2               Vrschl          = <numdpf       ; variable search pointer low byte
001003  2               Vrschh          = <expneg       ; variable search pointer high  byte
001003  2               
001003  2               FAC1_e          = $AC           ; FAC1 exponent
001003  2               FAC1_1          = <FAC1_e+1     ; FAC1 mantissa1
001003  2               FAC1_2          = <FAC1_e+2     ; FAC1 mantissa2
001003  2               FAC1_3          = <FAC1_e+3     ; FAC1 mantissa3
001003  2               FAC1_s          = <FAC1_e+4     ; FAC1 sign (b7)
001003  2               
001003  2               str_ln          = <FAC1_e       ; string length
001003  2               str_pl          = <FAC1_1       ; string pointer low byte
001003  2               str_ph          = <FAC1_2       ; string pointer high byte
001003  2               
001003  2               des_pl          = <FAC1_2       ; string descriptor pointer low byte
001003  2               des_ph          = <FAC1_3       ; string descriptor pointer high byte
001003  2               
001003  2               mids_l          = <FAC1_3       ; MID$ string temp length byte
001003  2               
001003  2               negnum          = $B1           ; string to float eval -ve flag
001003  2               numcon          = $B1           ; series evaluation constant count
001003  2               
001003  2               FAC1_o          = $B2           ; FAC1 overflow byte
001003  2               
001003  2               FAC2_e          = $B3           ; FAC2 exponent
001003  2               FAC2_1          = <FAC2_e+1     ; FAC2 mantissa1
001003  2               FAC2_2          = <FAC2_e+2     ; FAC2 mantissa2
001003  2               FAC2_3          = <FAC2_e+3     ; FAC2 mantissa3
001003  2               FAC2_s          = <FAC2_e+4     ; FAC2 sign (b7)
001003  2               
001003  2               FAC_sc          = $B8           ; FAC sign comparison, Acc#1 vs #2
001003  2               FAC1_r          = $B9           ; FAC1 rounding byte
001003  2               
001003  2               ssptr_l         = <FAC_sc       ; string start pointer low byte
001003  2               ssptr_h         = <FAC1_r       ; string start pointer high byte
001003  2               
001003  2               sdescr          = <FAC_sc       ; string descriptor pointer
001003  2               
001003  2               csidx           = $BA           ; line crunch save index
001003  2               Asptl           = <csidx        ; array size/pointer low byte
001003  2               Aspth           = $BB           ; array size/pointer high byte
001003  2               
001003  2               Btmpl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Btmph           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Cptrl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Cptrh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Sendl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Sendh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               LAB_IGBY        = $BC           ; get next BASIC byte subroutine
001003  2               
001003  2               LAB_GBYT        = $C2           ; get current BASIC byte subroutine
001003  2               Bpntrl          = $C3           ; BASIC execute (get byte) pointer low byte
001003  2               Bpntrh          = <Bpntrl+1     ; BASIC execute (get byte) pointer high byte
001003  2               Bpntrp          = <Bpntrl+2     ; BASIC execute (get byte) pointer PAGE byte
001003  2               
001003  2               ;			= $E0		; end of get BASIC char subroutine
001003  2               
001003  2               Rbyte4          = $E1           ; extra PRNG byte
001003  2               Rbyte1          = <Rbyte4+1     ; most significant PRNG byte
001003  2               Rbyte2          = <Rbyte4+2     ; middle PRNG byte
001003  2               Rbyte3          = <Rbyte4+3     ; least significant PRNG byte
001003  2               
001003  2               NmiBase         = $E5           ; NMI handler enabled/setup/triggered flags
001003  2               ; bit	function
001003  2               ; ===	========
001003  2               ; 7	interrupt enabled
001003  2               ; 6	interrupt setup
001003  2               ; 5	interrupt happened
001003  2               ;			= $E6		; NMI handler addr low byte
001003  2               ;			= $E7		; NMI handler addr high byte
001003  2               IrqBase         = $E8           ; IRQ handler enabled/setup/triggered flags
001003  2               ;			= $E9		; IRQ handler addr low byte
001003  2               ;			= $EA		; IRQ handler addr high byte
001003  2               FCBPTR          = $EB           ; POINTER TO FCB FOR FILE OPS
001003  2               
001003  2               Decss           = $EF           ; number to decimal string start
001003  2               Decssp1         = Decss+1       ; number to decimal string start
001003  2               
001003  2               TEMPW           = $FD
001003  2               ;			= $FF		; decimal string end
001003  2               
001003  2               
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; character get subroutine for zero page
001003  2               
001003  2               ; For a 1.8432MHz 6502 including the JSR and RTS
001003  2               ; fastest (>=":")	=  29 cycles =  15.7uS
001003  2               ; slowest (<":")	=  40 cycles =  21.7uS
001003  2               ; space skip	= +21 cycles = +11.4uS
001003  2               ; inc across page	=  +4 cycles =  +2.2uS
001003  2               
001003  2               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
001003  2               ; block is copied to it's destination, any non zero page address will do at assembly
001003  2               ; time, to assemble a three byte instruction.
001003  2               
001003  2               ; page 0 initialisation table from $BC
001003  2               ; increment and scan memory
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_2CEE:
001003  2  E6 C3                INC     <Bpntrl         ; increment BASIC execute pointer low byte
001005  2  D0 02                BNE     LAB_2CF4        ; branch if no carry
001007  2               ; else
001007  2  E6 C4                INC     <Bpntrh         ; increment BASIC execute pointer high byte
001009  2               
001009  2               ; page 0 initialisation table from $C2
001009  2               ; scan memory
001009  2               LAB_2CF4:
001009  2  AF FF FF FF          LDA     $FFFFFF         ; get byte to scan (addr set by call routine)
00100D  2  C9 BD                CMP     #TK_ELSE        ; compare with the token for ELSE
00100F  2  F0 0E                BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
001011  2               
001011  2  C9 3A                CMP     #':'            ; compare with ":"
001013  2  B0 0A                BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
001015  2               
001015  2  C9 20                CMP     #' '            ; compare with " "
001017  2  F0 EA                BEQ     LAB_2CEE        ; if " " go do next
001019  2               
001019  2  38                   SEC                     ; set carry for SBC
00101A  2  E9 30                SBC     #'0'            ; subtract "0"
00101C  2  38                   SEC                     ; set carry for SBC
00101D  2  E9 D0                SBC     #$D0            ; subtract -"0"
00101F  2               ; clear carry if byte = "0"-"9"
00101F  2               LAB_2D05:
00101F  2  6B                   RTL
001020  2               LAB_2CEE_END:
001020  2               ;____________________________________________________________________________________________
001020  2               ;
001020  2               ; page zero initialisation table $00-$12 inclusive
001020  2               ;____________________________________________________________________________________________
001020  2               
001020  2               StrTab:
001020  2  4C                   .BYTE   $4C             ; JMP opcode
001021  2  23 25                .WORD   LAB_COLD        ; initial warm start vector (cold start)
001023  2               
001023  2  00                   .BYTE   $00             ; these bytes are not used by BASIC
001024  2  00 00                .WORD   $0000           ;
001026  2  00 00                .WORD   $0000           ;
001028  2  00 00                .WORD   $0000           ;
00102A  2               
00102A  2  4C                   .BYTE   $4C             ; JMP opcode
00102B  2  26 36                .WORD   LAB_FCER        ; initial user function vector ("Function call" error)
00102D  2  00                   .BYTE   $00             ; default NULL count
00102E  2  00                   .BYTE   $00             ; clear terminal position
00102F  2  00                   .BYTE   $00             ; default terminal width byte
001030  2  F2                   .BYTE   $F2             ; default limit for TAB = 14
001031  2  00 22                .WORD   Ram_base        ; start of user RAM
001033  2               EndTab:
001033  2               
001033  2               ;  BASIC start-up code
001033  2               
001033  2               PG2_TABS:
001033  2  00                   .BYTE   $00             ; ctrl-c flag		-	$00 = enabled
001034  2  03                   .BYTE   $03             ; ctrl-c byte		-	GET needs this
001035  2  00                   .BYTE   $00             ; ctrl-c byte timeout	-	GET needs this
001036  2  D5 4A                .WORD   CTRLC           ; ctrl c check vector
001038  2               PG2_TABE:
001038  2               
001038  1               
001038  1               ; BASIC TOKENS
001038  1                       .INCLUDE "tokens.asm"
001038  2               ; token values needed for BASIC
001038  2               
001038  2               ; primary command tokens (can start a statement)
001038  2               
001038  2               TK_END          = $80           ; END
001038  2               TK_FOR          = TK_END+1      ; FOR token
001038  2               TK_NEXT         = TK_FOR+1      ; NEXT token
001038  2               TK_DATA         = TK_NEXT+1     ; DATA token
001038  2               TK_DIRECTORY    = TK_DATA+1     ; DISKSTATUS token
001038  2               TK_DISKSTATUS   = TK_DIRECTORY+1; DIRECTORY token
001038  2               TK_INPUT        = TK_DISKSTATUS+1; INPUT token
001038  2               TK_DIM          = TK_INPUT+1    ; DIM token
001038  2               TK_READ         = TK_DIM+1      ; READ token
001038  2               TK_LET          = TK_READ+1     ; LET token
001038  2               TK_DEC          = TK_LET+1      ; DEC token
001038  2               TK_GOTO         = TK_DEC+1      ; GOTO token
001038  2               TK_RUN          = TK_GOTO+1     ; RUN token
001038  2               TK_IF           = TK_RUN+1      ; IF token
001038  2               TK_RESTORE      = TK_IF+1       ; RESTORE token
001038  2               TK_GOSUB        = TK_RESTORE+1  ; GOSUB token
001038  2               TK_RETURN       = TK_GOSUB+1    ; RETURN token
001038  2               TK_REM          = TK_RETURN+1   ; REM token
001038  2               TK_STOP         = TK_REM+1      ; STOP token
001038  2               TK_ON           = TK_STOP+1     ; ON token
001038  2               TK_NULL         = TK_ON+1       ; NULL token
001038  2               TK_INC          = TK_NULL+1     ; INC token
001038  2               TK_WAIT         = TK_INC+1      ; WAIT token
001038  2               TK_LOAD         = TK_WAIT+1     ; LOAD token
001038  2               TK_SAVE         = TK_LOAD+1     ; SAVE token
001038  2               TK_DEF          = TK_SAVE+1     ; DEF token
001038  2               TK_POKE         = TK_DEF+1      ; POKE token
001038  2               TK_CALL         = TK_POKE+1     ; CALL token
001038  2               TK_DO           = TK_CALL+1     ; DO token
001038  2               TK_LOOP         = TK_DO+1       ; LOOP token
001038  2               TK_PRINT        = TK_LOOP+1     ; PRINT token
001038  2               TK_CONT         = TK_PRINT+1    ; CONT token
001038  2               TK_LIST         = TK_CONT+1     ; LIST token
001038  2               TK_CLEAR        = TK_LIST+1     ; CLEAR token
001038  2               TK_NEW          = TK_CLEAR+1    ; NEW token
001038  2               TK_WIDTH        = TK_NEW+1      ; WIDTH token
001038  2               TK_GET          = TK_WIDTH+1    ; GET token
001038  2               TK_SWAP         = TK_GET+1      ; SWAP token
001038  2               TK_BITSET       = TK_SWAP+1     ; BITSET token
001038  2               TK_BITCLR       = TK_BITSET+1   ; BITCLR token
001038  2               TK_MONITOR      = TK_BITCLR+1   ; MONITOR token
001038  2               TK_OPEN         = TK_MONITOR+1  ; OPEN token
001038  2               TK_CLOSE        = TK_OPEN+1     ; CLOSE token
001038  2               TK_IECINPUT     = TK_CLOSE+1    ; IECINPUT token
001038  2               TK_IECOUTPUT    = TK_IECINPUT+1 ; IECOUTPUT token
001038  2               TK_PUTN         = TK_IECOUTPUT+1; PUTN token
001038  2               TK_GETN         = TK_PUTN+1     ; GETN token
001038  2               TK_DISKCMD      = TK_GETN+1     ; DISKCMD token
001038  2               TK_SCNCLR       = TK_DISKCMD+1  ;SCNCLR token
001038  2               TK_LOCATE       = TK_SCNCLR+1   ;LOCATE token
001038  2               TK_COLOR        = TK_LOCATE+1   ;COLOR token
001038  2               TK_SCREEN       = TK_COLOR+1    ;SCREEN token
001038  2               TK_PLOT         = TK_SCREEN+1   ;PLOT token
001038  2               TK_PATTERN      = TK_PLOT+1     ;PATTERN token
001038  2               TK_SYS          = TK_PATTERN+1  ;SYS token
001038  2               TK_SOUND        = TK_SYS+1      ;SOUND token
001038  2               TK_NOISE        = TK_SOUND+1    ;NOISE token
001038  2               TK_TONE         = TK_NOISE+1    ;TONE token
001038  2               TK_VOLUME       = TK_TONE+1     ;VOLUME token
001038  2               TK_VOICE        = TK_VOLUME+1   ;VOICE token
001038  2               
001038  2               ; secondary command tokens, can't start a statement
001038  2               
001038  2               TK_TAB          = TK_VOICE+1    ; TAB token
001038  2               TK_ELSE         = TK_TAB+1      ; ELSE token
001038  2               TK_TO           = TK_ELSE+1     ; TO token
001038  2               TK_FN           = TK_TO+1       ; FN token
001038  2               TK_SPC          = TK_FN+1       ; SPC token
001038  2               TK_THEN         = TK_SPC+1      ; THEN token
001038  2               TK_NOT          = TK_THEN+1     ; NOT token
001038  2               TK_STEP         = TK_NOT+1      ; STEP token
001038  2               TK_UNTIL        = TK_STEP+1     ; UNTIL token
001038  2               TK_WHILE        = TK_UNTIL+1    ; WHILE token
001038  2               TK_OFF          = TK_WHILE+1    ; OFF token
001038  2               
001038  2               ; opperator tokens
001038  2               
001038  2               TK_PLUS         = TK_OFF+1      ; + token
001038  2               TK_MINUS        = TK_PLUS+1     ; - token
001038  2               TK_MUL          = TK_MINUS+1    ; * token
001038  2               TK_DIV          = TK_MUL+1      ; / token
001038  2               TK_POWER        = TK_DIV+1      ; ^ token
001038  2               TK_AND          = TK_POWER+1    ; AND token
001038  2               TK_EOR          = TK_AND+1      ; EOR token
001038  2               TK_OR           = TK_EOR+1      ; OR token
001038  2               TK_RSHIFT       = TK_OR+1       ; RSHIFT token
001038  2               TK_LSHIFT       = TK_RSHIFT+1   ; LSHIFT token
001038  2               TK_GT           = TK_LSHIFT+1   ; > token
001038  2               TK_EQUAL        = TK_GT+1       ; = token
001038  2               TK_LT           = TK_EQUAL+1    ; < token
001038  2               
001038  2               ; functions tokens
001038  2               
001038  2               TK_SGN          = TK_LT+1       ; SGN token
001038  2               TK_INT          = TK_SGN+1      ; INT token
001038  2               TK_ABS          = TK_INT+1      ; ABS token
001038  2               TK_USR          = TK_ABS+1      ; USR token
001038  2               TK_FRE          = TK_USR+1      ; FRE token
001038  2               TK_POS          = TK_FRE+1      ; POS token
001038  2               TK_SQR          = TK_POS+1      ; SQR token
001038  2               TK_RND          = TK_SQR+1      ; RND token
001038  2               TK_LOG          = TK_RND+1      ; LOG token
001038  2               TK_EXP          = TK_LOG+1      ; EXP token
001038  2               TK_COS          = TK_EXP+1      ; COS token
001038  2               TK_SIN          = TK_COS+1      ; SIN token
001038  2               TK_TAN          = TK_SIN+1      ; TAN token
001038  2               TK_ATN          = TK_TAN+1      ; ATN token
001038  2               TK_PEEK         = TK_ATN+1      ; PEEK token
001038  2               TK_SADD         = TK_PEEK+1     ; SADD token
001038  2               TK_LEN          = TK_SADD+1     ; LEN token
001038  2               TK_STRS         = TK_LEN+1      ; STR$ token
001038  2               TK_VAL          = TK_STRS+1     ; VAL token
001038  2               TK_ASC          = TK_VAL+1      ; ASC token
001038  2               TK_UCASES       = TK_ASC+1      ; UCASE$ token
001038  2               TK_LCASES       = TK_UCASES+1   ; LCASE$ token
001038  2               TK_CHRS         = TK_LCASES+1   ; CHR$ token
001038  2               TK_HEXS         = TK_CHRS+1     ; HEX$ token
001038  2               TK_BINS         = TK_HEXS+1     ; BIN$ token
001038  2               TK_BITTST       = TK_BINS+1     ; BITTST token
001038  2               TK_MAX          = TK_BITTST+1   ; MAX token
001038  2               TK_MIN          = TK_MAX+1      ; MIN token
001038  2               TK_PI           = TK_MIN+1      ; PI token
001038  2               TK_IECST        = TK_PI+1       ; IECST token
001038  2               TK_VPTR         = TK_IECST+1    ; VARPTR token
001038  2               TK_LEFTS        = TK_VPTR+1     ; LEFT$ token
001038  2               TK_RIGHTS       = TK_LEFTS+1    ; RIGHT$ token
001038  2               TK_MIDS         = TK_RIGHTS+1   ; MID$ token
001038  2               TK_CON          = TK_MIDS+1     ; CON token
001038  2               
001038  2               
001038  2               
001038  2               
001038  2               LAB_CTBL:
001038  2  81 2A                .WORD   LAB_END-1       ; END
00103A  2  B9 29                .WORD   LAB_FOR-1       ; FOR
00103C  2  0B 31                .WORD   LAB_NEXT-1      ; NEXT
00103E  2  F9 2B                .WORD   LAB_DATA-1      ; DATA
001040  2  1E 1A                .WORD   V_DIR-1         ; DIRECTORY
001042  2  A3 19                .WORD   V_ERR-1         ; DISKSTATUS
001044  2  AB 2F                .WORD   LAB_INPUT-1     ; INPUT
001046  2  51 34                .WORD   LAB_DIM-1       ; DIM
001048  2  C4 2F                .WORD   LAB_READ-1      ; READ
00104A  2  1E 2D                .WORD   LAB_LET-1       ; LET
00104C  2  EE 2C                .WORD   LAB_DEC-1       ; DEC			new command
00104E  2  53 2B                .WORD   LAB_GOTO-1      ; GOTO
001050  2  10 2B                .WORD   LAB_RUN-1       ; RUN
001052  2  27 2C                .WORD   LAB_IF-1        ; IF
001054  2  A8 2A                .WORD   LAB_RESTORE-1   ; RESTORE		modified command
001056  2  35 2B                .WORD   LAB_GOSUB-1     ; GOSUB
001058  2  E4 2B                .WORD   LAB_RETURN-1    ; RETURN
00105A  2  92 2C                .WORD   LAB_REM-1       ; REM
00105C  2  7F 2A                .WORD   LAB_STOP-1      ; STOP
00105E  2  9B 2C                .WORD   LAB_ON-1        ; ON			modified command
001060  2  E6 2A                .WORD   LAB_NULL-1      ; NULL		modified command
001062  2  F1 2C                .WORD   LAB_INC-1       ; INC			new command
001064  2  BB 3F                .WORD   LAB_WAIT-1      ; WAIT
001066  2  11 19                .WORD   V_LOAD-1        ; LOAD
001068  2  7F 18                .WORD   V_SAVE-1        ; SAVE
00106A  2  79 37                .WORD   LAB_DEF-1       ; DEF
00106C  2  0B 3F                .WORD   LAB_POKE-1      ; POKE
00106E  2  A7 3F                .WORD   LAB_CALL-1      ; CALL		new command
001070  2  1A 2B                .WORD   LAB_DO-1        ; DO			new command
001072  2  85 2B                .WORD   LAB_LOOP-1      ; LOOP		new command
001074  2  88 2E                .WORD   LAB_PRINT-1     ; PRINT
001076  2  EC 2A                .WORD   LAB_CONT-1      ; CONT
001078  2  F9 28                .WORD   LAB_LIST-1      ; LIST
00107A  2  F6 28                .WORD   LAB_CLEAR-1     ; CLEAR
00107C  2  A6 28                .WORD   LAB_NEW-1       ; NEW
00107E  2  E9 4B                .WORD   LAB_WDTH-1      ; WIDTH		new command
001080  2  42 2E                .WORD   LAB_GET-1       ; GET			new command
001082  2  2F 3F                .WORD   LAB_SWAP-1      ; SWAP		new command
001084  2  6C 49                .WORD   LAB_BITSET-1    ; BITSET		new command
001086  2  80 49                .WORD   LAB_BITCLR-1    ; BITCLR		new command
001088  2  EE 24                .WORD   LAB_MONITOR-1   ; MONITOR		MONITOR command
00108A  2  B9 1B                .WORD   V_OPEN-1        ; OPEN			OPEN command
00108C  2  3C 1C                .WORD   V_CLOSE-1       ; CLOSE			CLOSE command
00108E  2  4D 1C                .WORD   V_IECINPUT-1    ; IECINPUT		IECINPUT command
001090  2  63 1C                .WORD   V_IECOUTPUT-1   ; IECOUTPUT		IECOUTPUT command
001092  2  79 1C                .WORD   V_PUTN-1        ; PUTN			PUTN command
001094  2  E5 1C                .WORD   V_GETN-1        ; GETN			GETN command
001096  2  F5 1A                .WORD   V_DISKCMD-1     ; DISKCMD		DISKCMD COMMAND
001098  2  32 1D                .WORD   V_SCNCLR-1      ; SCNCLR		SCNCLR COMMAND
00109A  2  3F 1D                .WORD   V_LOCATE-1      ; LOCATE		LOCATE COMMAND
00109C  2  57 1D                .WORD   V_COLOR-1       ; COLOR			COLOR COMMAND
00109E  2  7E 1D                .WORD   V_SCREEN-1      ; SCREEN		SCREEN COMMAND
0010A0  2  EB 1E                .WORD   V_PLOT-1        ; PLOT			PLOT COMMAND
0010A2  2  48 21                .WORD   V_PATTERN-1     ; PATTERN		PATTERN COMMAND
0010A4  2  1C 3F                .WORD   LAB_SYS-1       ; SYS			SYS COMMAND
0010A6  2  65 21                .WORD   V_SOUND-1       ; SOUND			SOUND COMMAND
0010A8  2  BC 21                .WORD   V_NOISE-1       ; NOISE			NOISE COMMAND
0010AA  2  FB 21                .WORD   V_TONE-1        ; TONE			TONE COMMAND
0010AC  2  85 21                .WORD   V_VOLUME-1      ; VOLUME		VOLUME COMMAND
0010AE  2  9A 21                .WORD   V_VOICE-1       ; VOICE			VOICE COMMAND
0010B0  2               ; function pre process routine table
0010B0  2               
0010B0  2               LAB_FTPL:
0010B0  2               LAB_FTPM        = LAB_FTPL+$01
0010B0  2  29 33                .WORD   LAB_PPFN-1      ; SGN(n)	process numeric expression in ()
0010B2  2  29 33                .WORD   LAB_PPFN-1      ; INT(n)		"
0010B4  2  29 33                .WORD   LAB_PPFN-1      ; ABS(n)		"
0010B6  2  A8 31                .WORD   LAB_EVEZ-1      ; USR(x)	process any expression
0010B8  2  AE 32                .WORD   LAB_1BF7-1      ; FRE(x)		"
0010BA  2  AE 32                .WORD   LAB_1BF7-1      ; POS(x)		"
0010BC  2  29 33                .WORD   LAB_PPFN-1      ; SQR(n)	process numeric expression in ()
0010BE  2  29 33                .WORD   LAB_PPFN-1      ; RND(n)		"
0010C0  2  29 33                .WORD   LAB_PPFN-1      ; LOG(n)		"
0010C2  2  29 33                .WORD   LAB_PPFN-1      ; EXP(n)		"
0010C4  2  29 33                .WORD   LAB_PPFN-1      ; COS(n)		"
0010C6  2  29 33                .WORD   LAB_PPFN-1      ; SIN(n)		"
0010C8  2  29 33                .WORD   LAB_PPFN-1      ; TAN(n)		"
0010CA  2  29 33                .WORD   LAB_PPFN-1      ; ATN(n)		"
0010CC  2  29 33                .WORD   LAB_PPFN-1      ; PEEK(n)		"
0010CE  2  00 00                .WORD   $0000           ; SADD()	none
0010D0  2  23 33                .WORD   LAB_PPFS-1      ; LEN($)	process string expression in ()
0010D2  2  29 33                .WORD   LAB_PPFN-1      ; STR$(n)	process numeric expression in ()
0010D4  2  23 33                .WORD   LAB_PPFS-1      ; VAL($)	process string expression in ()
0010D6  2  23 33                .WORD   LAB_PPFS-1      ; ASC($)		"
0010D8  2  23 33                .WORD   LAB_PPFS-1      ; UCASE$($)		"
0010DA  2  23 33                .WORD   LAB_PPFS-1      ; LCASE$($)		"
0010DC  2  29 33                .WORD   LAB_PPFN-1      ; CHR$(n)	process numeric expression in ()
0010DE  2  52 33                .WORD   LAB_BHSS-1      ; HEX$(n)		"
0010E0  2  52 33                .WORD   LAB_BHSS-1      ; BIN$(n)		"
0010E2  2  00 00                .WORD   $0000           ; BITTST()	none
0010E4  2  7C 4B                .WORD   LAB_MMPP-1      ; MAX()	process numeric expression
0010E6  2  7C 4B                .WORD   LAB_MMPP-1      ; MIN()		"
0010E8  2  2F 33                .WORD   LAB_PPBI-1      ; PI		advance pointer
0010EA  2  DE 1C                .WORD   LAB_PIECST-1    ; IECST		"
0010EC  2  00 00                .WORD   $0000           ; VARPTR()	none
0010EE  2  36 33                .WORD   LAB_LRMS-1      ; LEFT$()	process string expression
0010F0  2  36 33                .WORD   LAB_LRMS-1      ; RIGHT$()		"
0010F2  2  36 33                .WORD   LAB_LRMS-1      ; MID$()		"
0010F4  2  29 33                .WORD   LAB_PPFN-1      ; CON()		"
0010F6  2               
0010F6  2               ; action addresses for functions
0010F6  2               
0010F6  2               LAB_FTBL:
0010F6  2               LAB_FTBM        = LAB_FTBL+$01
0010F6  2  34 44                .WORD   LAB_SGN-1       ; SGN()
0010F8  2  22 45                .WORD   LAB_INT-1       ; INT()
0010FA  2  51 44                .WORD   LAB_ABS-1       ; ABS()
0010FC  2  37 49                .WORD   LAB_USR-1       ; USR()
0010FE  2  47 37                .WORD   LAB_FRE-1       ; FRE()
001100  2  66 37                .WORD   LAB_POS-1       ; POS()
001102  2  40 4C                .WORD   LAB_SQR-1       ; SQR()
001104  2  87 48                .WORD   LAB_RND-1       ; RND()		modified function
001106  2  48 41                .WORD   LAB_LOG-1       ; LOG()
001108  2  D5 47                .WORD   LAB_EXP-1       ; EXP()
00110A  2  BB 48                .WORD   LAB_COS-1       ; COS()
00110C  2  C2 48                .WORD   LAB_SIN-1       ; SIN()
00110E  2  0B 49                .WORD   LAB_TAN-1       ; TAN()
001110  2  3D 49                .WORD   LAB_ATN-1       ; ATN()
001112  2  F8 3E                .WORD   LAB_PEEK-1      ; PEEK()
001114  2  C7 3D                .WORD   LAB_SADD-1      ; SADD()		new function
001116  2  09 3E                .WORD   LAB_LENS-1      ; LEN()
001118  2  B8 38                .WORD   LAB_STRS-1      ; STR$()
00111A  2  4D 3E                .WORD   LAB_VAL-1       ; VAL()
00111C  2  14 3E                .WORD   LAB_ASC-1       ; ASC()
00111E  2  7D 3D                .WORD   LAB_UCASE-1     ; UCASE$()		new function
001120  2  31 3D                .WORD   LAB_LCASE-1     ; LCASE$()		new function
001122  2  35 3C                .WORD   LAB_CHRS-1      ; CHR$()
001124  2  39 4A                .WORD   LAB_HEXS-1      ; HEX$()		new function
001126  2  C1 49                .WORD   LAB_BINS-1      ; BIN$()		new function
001128  2  96 49                .WORD   LAB_BTST-1      ; BITTST()		new function
00112A  2  82 4B                .WORD   LAB_MAX-1       ; MAX()		new function
00112C  2  92 4B                .WORD   LAB_MIN-1       ; MIN()		new function
00112E  2  DE 4C                .WORD   LAB_PI-1        ; PI			new function
001130  2  D1 1C                .WORD   LAB_IECST-1     ; IECST		new function
001132  2  CD 4C                .WORD   LAB_VARPTR-1    ; VARPTR()		new function
001134  2  5B 3C                .WORD   LAB_LEFT-1      ; LEFT$()
001136  2  7A 3C                .WORD   LAB_RIGHT-1     ; RIGHT$()
001138  2  D3 3C                .WORD   LAB_MIDS-1      ; MID$()
00113A  2  29 22                .WORD   LAB_CON-1       ; CON()
00113C  2               
00113C  2               ; hierarchy and action addresses for operator
00113C  2               
00113C  2               LAB_OPPT:
00113C  2  79                   .BYTE   $79             ; +
00113D  2  08 40                .WORD   LAB_ADD-1
00113F  2  79                   .BYTE   $79             ; -
001140  2  ED 3F                .WORD   LAB_SUBTRACT-1
001142  2  7B                   .BYTE   $7B             ; *
001143  2  89 41                .WORD   LAB_MULTIPLY-1
001145  2  7B                   .BYTE   $7B             ; /
001146  2  A1 42                .WORD   LAB_DIVIDE-1
001148  2  7F                   .BYTE   $7F             ; ^
001149  2  91 47                .WORD   LAB_POWER-1
00114B  2  50                   .BYTE   $50             ; AND
00114C  2  9D 33                .WORD   LAB_AND-1
00114E  2  46                   .BYTE   $46             ; EOR			new operator
00114F  2  83 33                .WORD   LAB_EOR-1
001151  2  46                   .BYTE   $46             ; OR
001152  2  90 33                .WORD   LAB_OR-1
001154  2  56                   .BYTE   $56             ; >>			new operator
001155  2  74 34                .WORD   LAB_RSHIFT-1
001157  2  56                   .BYTE   $56             ; <<			new operator
001158  2  5C 34                .WORD   LAB_LSHIFT-1
00115A  2  7D                   .BYTE   $7D             ; >
00115B  2  CA 47                .WORD   LAB_GTHAN-1
00115D  2  5A                   .BYTE   $5A             ; =
00115E  2  DB 32                .WORD   LAB_EQUAL-1
001160  2  64                   .BYTE   $64             ; <
001161  2  BE 33                .WORD   LAB_LTHAN-1
001163  2               
001163  2               ; keywords start with ..
001163  2               ; this is the first character table and must be in alphabetic order
001163  2               
001163  2               TAB_1STC:
001163  2  2A                   .BYTE   "*"
001164  2  2B                   .BYTE   "+"
001165  2  2D                   .BYTE   "-"
001166  2  2F                   .BYTE   "/"
001167  2  3C                   .BYTE   "<"
001168  2  3D                   .BYTE   "="
001169  2  3E                   .BYTE   ">"
00116A  2  3F                   .BYTE   "?"
00116B  2  41                   .BYTE   "A"
00116C  2  42                   .BYTE   "B"
00116D  2  43                   .BYTE   "C"
00116E  2  44                   .BYTE   "D"
00116F  2  45                   .BYTE   "E"
001170  2  46                   .BYTE   "F"
001171  2  47                   .BYTE   "G"
001172  2  48                   .BYTE   "H"
001173  2  49                   .BYTE   "I"
001174  2  4B                   .BYTE   "K"
001175  2  4C                   .BYTE   "L"
001176  2  4D                   .BYTE   "M"
001177  2  4E                   .BYTE   "N"
001178  2  4F                   .BYTE   "O"
001179  2  50                   .BYTE   "P"
00117A  2  52                   .BYTE   "R"
00117B  2  53                   .BYTE   "S"
00117C  2  54                   .BYTE   "T"
00117D  2  55                   .BYTE   "U"
00117E  2  56                   .BYTE   "V"
00117F  2  57                   .BYTE   "W"
001180  2  5E                   .BYTE   "^"
001181  2  00                   .BYTE   $00             ; table terminator
001182  2               
001182  2               ; pointers to keyword tables
001182  2               
001182  2               TAB_CHRT:
001182  2  BE 11                .WORD   TAB_STAR        ; table for "*"
001184  2  C0 11                .WORD   TAB_PLUS        ; table for "+"
001186  2  C2 11                .WORD   TAB_MNUS        ; table for "-"
001188  2  C4 11                .WORD   TAB_SLAS        ; table for "/"
00118A  2  C6 11                .WORD   TAB_LESS        ; table for "<"
00118C  2  CA 11                .WORD   TAB_EQUL        ; table for "="
00118E  2  CC 11                .WORD   TAB_MORE        ; table for ">"
001190  2  D0 11                .WORD   TAB_QEST        ; table for "?"
001192  2  D2 11                .WORD   TAB_ASCA        ; table for "A"
001194  2  E2 11                .WORD   TAB_ASCB        ; table for "B"
001196  2  FB 11                .WORD   TAB_ASCC        ; table for "C"
001198  2  20 12                .WORD   TAB_ASCD        ; table for "D"
00119A  2  4A 12                .WORD   TAB_ASCE        ; table for "E"
00119C  2  59 12                .WORD   TAB_ASCF        ; table for "F"
00119E  2  63 12                .WORD   TAB_ASCG        ; table for "G"
0011A0  2  74 12                .WORD   TAB_ASCH        ; table for "H"
0011A2  2  7A 12                .WORD   TAB_ASCI        ; table for "I"
0011A4  2  9F 12                .WORD   TAB_ASCK        ; table for "K"
0011A6  2  9F 12                .WORD   TAB_ASCL        ; table for "L"
0011A8  2  CA 12                .WORD   TAB_ASCM        ; table for "M"
0011AA  2  DF 12                .WORD   TAB_ASCN        ; table for "N"
0011AC  2  F3 12                .WORD   TAB_ASCO        ; table for "O"
0011AE  2  FF 12                .WORD   TAB_ASCP        ; table for "P"
0011B0  2  23 13                .WORD   TAB_ASCR        ; table for "R"
0011B2  2  46 13                .WORD   TAB_ASCS        ; table for "S"
0011B4  2  85 13                .WORD   TAB_ASCT        ; table for "T"
0011B6  2  98 13                .WORD   TAB_ASCU        ; table for "U"
0011B8  2  A9 13                .WORD   TAB_ASCV        ; table for "V"
0011BA  2  C0 13                .WORD   TAB_ASCW        ; table for "W"
0011BC  2  CF 13                .WORD   TAB_POWR        ; table for "^"
0011BE  2               
0011BE  2               ; tables for each start character, note if a longer keyword with the same start
0011BE  2               ; letters as a shorter one exists then it must come first, else the list is in
0011BE  2               ; alphabetical order as follows ..
0011BE  2               
0011BE  2               ; [keyword,token
0011BE  2               ; [keyword,token]]
0011BE  2               ; end marker (#$00)
0011BE  2               
0011BE  2               TAB_STAR:
0011BE  2  C9 00                .BYTE   TK_MUL,$00      ; *
0011C0  2               TAB_PLUS:
0011C0  2  C7 00                .BYTE   TK_PLUS,$00     ; +
0011C2  2               TAB_MNUS:
0011C2  2  C8 00                .BYTE   TK_MINUS,$00    ; -
0011C4  2               TAB_SLAS:
0011C4  2  CA 00                .BYTE   TK_DIV,$00      ; /
0011C6  2               TAB_LESS:
0011C6  2               LBB_LSHIFT:
0011C6  2  3C D0                .BYTE   "<",TK_LSHIFT   ; <<	note - "<<" must come before "<"
0011C8  2  D3                   .BYTE   TK_LT           ; <
0011C9  2  00                   .BYTE   $00
0011CA  2               TAB_EQUL:
0011CA  2  D2 00                .BYTE   TK_EQUAL,$00    ; =
0011CC  2               TAB_MORE:
0011CC  2               LBB_RSHIFT:
0011CC  2  3E CF                .BYTE   ">",TK_RSHIFT   ; >>	note - ">>" must come before ">"
0011CE  2  D1                   .BYTE   TK_GT           ; >
0011CF  2  00                   .BYTE   $00
0011D0  2               TAB_QEST:
0011D0  2  9E 00                .BYTE   TK_PRINT,$00    ; ?
0011D2  2               TAB_ASCA:
0011D2  2               LBB_ABS:
0011D2  2  42 53 28 D6          .BYTE   "BS(",TK_ABS    ; ABS(
0011D6  2               LBB_AND:
0011D6  2  4E 44 CC             .BYTE   "ND",TK_AND     ; AND
0011D9  2               LBB_ASC:
0011D9  2  53 43 28 E7          .BYTE   "SC(",TK_ASC    ; ASC(
0011DD  2               LBB_ATN:
0011DD  2  54 4E 28 E1          .BYTE   "TN(",TK_ATN    ; ATN(
0011E1  2  00                   .BYTE   $00
0011E2  2               TAB_ASCB:
0011E2  2               LBB_BINS:
0011E2  2  49 4E 24 28          .BYTE   "IN$(",TK_BINS  ; BIN$(
0011E6  2  EC           
0011E7  2               LBB_BITCLR:
0011E7  2  49 54 43 4C          .BYTE   "ITCLR",TK_BITCLR; BITCLR
0011EB  2  52 A7        
0011ED  2               LBB_BITSET:
0011ED  2  49 54 53 45          .BYTE   "ITSET",TK_BITSET; BITSET
0011F1  2  54 A6        
0011F3  2               LBB_BITTST:
0011F3  2  49 54 54 53          .BYTE   "ITTST(",TK_BITTST
0011F7  2  54 28 ED     
0011FA  2               ; BITTST(
0011FA  2  00                   .BYTE   $00
0011FB  2               TAB_ASCC:
0011FB  2               LBB_CALL:
0011FB  2  41 4C 4C 9B          .BYTE   "ALL",TK_CALL   ; CALL
0011FF  2               LBB_CHRS:
0011FF  2  48 52 24 28          .BYTE   "HR$(",TK_CHRS  ; CHR$(
001203  2  EA           
001204  2               LBB_CLEAR:
001204  2  4C 45 41 52          .BYTE   "LEAR",TK_CLEAR ; CLEAR
001208  2  A1           
001209  2               LBB_CLOSE:
001209  2  4C 4F 53 45          .BYTE   "LOSE",TK_CLOSE ; CLOSE
00120D  2  AA           
00120E  2               LBB_COLOR:
00120E  2  4F 4C 4F 52          .BYTE   "OLOR",TK_COLOR ; COLOR
001212  2  B2           
001213  2               LBB_CON:
001213  2  4F 4E 28 F6          .BYTE   "ON(",TK_CON    ;CON
001217  2               LBB_CONT:
001217  2  4F 4E 54 9F          .BYTE   "ONT",TK_CONT   ; CONT
00121B  2               LBB_COS:
00121B  2  4F 53 28 DE          .BYTE   "OS(",TK_COS    ; COS(
00121F  2  00                   .BYTE   $00
001220  2               TAB_ASCD:
001220  2               LBB_DATA:
001220  2  41 54 41 83          .BYTE   "ATA",TK_DATA   ; DATA
001224  2               LBB_DEC:
001224  2  45 43 8A             .BYTE   "EC",TK_DEC     ; DEC
001227  2               LBB_DEF:
001227  2  45 46 99             .BYTE   "EF",TK_DEF     ; DEF
00122A  2               LBB_DIM:
00122A  2  49 4D 87             .BYTE   "IM",TK_DIM     ; DIM
00122D  2               LBB_DIRECTORY:
00122D  2  49 52 45 43          .BYTE   "IRECTORY",TK_DIRECTORY; DIRECTORY
001231  2  54 4F 52 59  
001235  2  84           
001236  2               LBB_DISKCMD:
001236  2  49 53 4B 43          .BYTE   "ISKCMD",TK_DISKCMD; DISKCMD
00123A  2  4D 44 AF     
00123D  2               LBB_DISKSTATUS:
00123D  2  49 53 4B 53          .BYTE   "ISKSTATUS",TK_DISKSTATUS; DISKSTATUS
001241  2  54 41 54 55  
001245  2  53 85        
001247  2               LBB_DO:
001247  2  4F 9C                .BYTE   "O",TK_DO       ; DO
001249  2  00                   .BYTE   $00
00124A  2               TAB_ASCE:
00124A  2               LBB_ELSE:
00124A  2  4C 53 45 BD          .BYTE   "LSE",TK_ELSE   ; ELSE
00124E  2               LBB_END:
00124E  2  4E 44 80             .BYTE   "ND",TK_END     ; END
001251  2               LBB_EOR:
001251  2  4F 52 CD             .BYTE   "OR",TK_EOR     ; EOR
001254  2               LBB_EXP:
001254  2  58 50 28 DD          .BYTE   "XP(",TK_EXP    ; EXP(
001258  2  00                   .BYTE   $00
001259  2               TAB_ASCF:
001259  2               LBB_FN:
001259  2  4E BF                .BYTE   "N",TK_FN       ; FN
00125B  2               LBB_FOR:
00125B  2  4F 52 81             .BYTE   "OR",TK_FOR     ; FOR
00125E  2               LBB_FRE:
00125E  2  52 45 28 D8          .BYTE   "RE(",TK_FRE    ; FRE(
001262  2  00                   .BYTE   $00
001263  2               TAB_ASCG:
001263  2               LBB_GETN:
001263  2  45 54 23 AE          .BYTE   "ET#",TK_GETN   ; GETN
001267  2               LBB_GET:
001267  2  45 54 A4             .BYTE   "ET",TK_GET     ; GET
00126A  2               LBB_GOSUB:
00126A  2  4F 53 55 42          .BYTE   "OSUB",TK_GOSUB ; GOSUB
00126E  2  8F           
00126F  2               LBB_GOTO:
00126F  2  4F 54 4F 8B          .BYTE   "OTO",TK_GOTO   ; GOTO
001273  2  00                   .BYTE   $00
001274  2               TAB_ASCH:
001274  2               LBB_HEXS:
001274  2  45 58 24 28          .BYTE   "EX$(",TK_HEXS  ; HEX$(
001278  2  EB           
001279  2  00                   .BYTE   $00
00127A  2               TAB_ASCI:
00127A  2               LBB_IECINPUT:
00127A  2  45 43 49 4E          .BYTE   "ECINPUT",TK_IECINPUT; IECINPUT
00127E  2  50 55 54 AB  
001282  2               LBB_IECOUTPUT:
001282  2  45 43 4F 55          .BYTE   "ECOUTPUT",TK_IECOUTPUT; IECOUTPUT
001286  2  54 50 55 54  
00128A  2  AC           
00128B  2               LBB_IECST:
00128B  2  45 43 53 54          .BYTE   "ECST",TK_IECST ; IECST
00128F  2  F1           
001290  2               LBB_IF:
001290  2  46 8D                .BYTE   "F",TK_IF       ; IF
001292  2               LBB_INC:
001292  2  4E 43 95             .BYTE   "NC",TK_INC     ; INC
001295  2               LBB_INPUT:
001295  2  4E 50 55 54          .BYTE   "NPUT",TK_INPUT ; INPUT
001299  2  86           
00129A  2               LBB_INT:
00129A  2  4E 54 28 D5          .BYTE   "NT(",TK_INT    ; INT(
00129E  2  00                   .BYTE   $00
00129F  2               TAB_ASCK:
00129F  2               TAB_ASCL:
00129F  2               LBB_LCASES:
00129F  2  43 41 53 45          .BYTE   "CASE$(",TK_LCASES
0012A3  2  24 28 E9     
0012A6  2               ; LCASE$(
0012A6  2               LBB_LEFTS:
0012A6  2  45 46 54 24          .BYTE   "EFT$(",TK_LEFTS; LEFT$(
0012AA  2  28 F3        
0012AC  2               LBB_LEN:
0012AC  2  45 4E 28 E4          .BYTE   "EN(",TK_LEN    ; LEN(
0012B0  2               LBB_LET:
0012B0  2  45 54 89             .BYTE   "ET",TK_LET     ; LET
0012B3  2               LBB_LIST:
0012B3  2  49 53 54 A0          .BYTE   "IST",TK_LIST   ; LIST
0012B7  2               LBB_LOAD:
0012B7  2  4F 41 44 97          .BYTE   "OAD",TK_LOAD   ; LOAD
0012BB  2               LBB_LOCATE:
0012BB  2  4F 43 41 54          .BYTE   "OCATE",TK_LOCATE; LOCATE
0012BF  2  45 B1        
0012C1  2               LBB_LOG:
0012C1  2  4F 47 28 DC          .BYTE   "OG(",TK_LOG    ; LOG(
0012C5  2               LBB_LOOP:
0012C5  2  4F 4F 50 9D          .BYTE   "OOP",TK_LOOP   ; LOOP
0012C9  2  00                   .BYTE   $00
0012CA  2               TAB_ASCM:
0012CA  2               LBB_MAX:
0012CA  2  41 58 28 EE          .BYTE   "AX(",TK_MAX    ; MAX(
0012CE  2               LBB_MIDS:
0012CE  2  49 44 24 28          .BYTE   "ID$(",TK_MIDS  ; MID$(
0012D2  2  F5           
0012D3  2               LBB_MIN:
0012D3  2  49 4E 28 EF          .BYTE   "IN(",TK_MIN    ; MIN(
0012D7  2               LBB_MONITOR:
0012D7  2  4F 4E 49 54          .BYTE   "ONITOR",TK_MONITOR; MONITOR(
0012DB  2  4F 52 A8     
0012DE  2  00                   .BYTE   $00
0012DF  2               TAB_ASCN:
0012DF  2               LBB_NEW:
0012DF  2  45 57 A2             .BYTE   "EW",TK_NEW     ; NEW
0012E2  2               LBB_NEXT:
0012E2  2  45 58 54 82          .BYTE   "EXT",TK_NEXT   ; NEXT
0012E6  2               LBB_NOISE:
0012E6  2  4F 49 53 45          .BYTE   "OISE",TK_NOISE ; NOISE
0012EA  2  B8           
0012EB  2               LBB_NOT:
0012EB  2  4F 54 C2             .BYTE   "OT",TK_NOT     ; NOT
0012EE  2               LBB_NULL:
0012EE  2  55 4C 4C 94          .BYTE   "ULL",TK_NULL   ; NULL
0012F2  2  00                   .BYTE   $00
0012F3  2               TAB_ASCO:
0012F3  2               LBB_OFF:
0012F3  2  46 46 C6             .BYTE   "FF",TK_OFF     ; OFF
0012F6  2               LBB_ON:
0012F6  2  4E 93                .BYTE   "N",TK_ON       ; ON
0012F8  2               LBB_OPEN:
0012F8  2  50 45 4E A9          .BYTE   "PEN",TK_OPEN   ; OPEN
0012FC  2               LBB_OR:
0012FC  2  52 CE                .BYTE   "R",TK_OR       ; OR
0012FE  2  00                   .BYTE   $00
0012FF  2               TAB_ASCP:
0012FF  2               LBB_PATTERN:
0012FF  2  41 54 54 45          .BYTE   "ATTERN",TK_PATTERN; PATTERN
001303  2  52 4E B5     
001306  2               LBB_PEEK:
001306  2  45 45 4B 28          .BYTE   "EEK(",TK_PEEK  ; PEEK(
00130A  2  E2           
00130B  2               LBB_PI:
00130B  2  49 F0                .BYTE   "I",TK_PI       ; PI
00130D  2               LBB_PLOT:
00130D  2  4C 4F 54 B4          .BYTE   "LOT",TK_PLOT   ; PLOT
001311  2               LBB_POKE:
001311  2  4F 4B 45 9A          .BYTE   "OKE",TK_POKE   ; POKE
001315  2               LBB_POS:
001315  2  4F 53 28 D9          .BYTE   "OS(",TK_POS    ; POS(
001319  2               LBB_PRINT:
001319  2  52 49 4E 54          .BYTE   "RINT",TK_PRINT ; PRINT
00131D  2  9E           
00131E  2               LBB_PUTN:
00131E  2  55 54 23 AD          .BYTE   "UT#",TK_PUTN   ; PUTN
001322  2  00                   .BYTE   $00
001323  2               TAB_ASCR:
001323  2               LBB_READ:
001323  2  45 41 44 88          .BYTE   "EAD",TK_READ   ; READ
001327  2               LBB_REM:
001327  2  45 4D 91             .BYTE   "EM",TK_REM     ; REM
00132A  2               LBB_RESTORE:
00132A  2  45 53 54 4F          .BYTE   "ESTORE",TK_RESTORE
00132E  2  52 45 8E     
001331  2               ; RESTORE
001331  2               LBB_RETURN:
001331  2  45 54 55 52          .BYTE   "ETURN",TK_RETURN; RETURN
001335  2  4E 90        
001337  2               LBB_RIGHTS:
001337  2  49 47 48 54          .BYTE   "IGHT$(",TK_RIGHTS
00133B  2  24 28 F4     
00133E  2               ; RIGHT$(
00133E  2               LBB_RND:
00133E  2  4E 44 28 DB          .BYTE   "ND(",TK_RND    ; RND(
001342  2               LBB_RUN:
001342  2  55 4E 8C             .BYTE   "UN",TK_RUN     ; RUN
001345  2  00                   .BYTE   $00
001346  2               TAB_ASCS:
001346  2               LBB_SADD:
001346  2  41 44 44 28          .BYTE   "ADD(",TK_SADD  ; SADD(
00134A  2  E3           
00134B  2               LBB_SAVE:
00134B  2  41 56 45 98          .BYTE   "AVE",TK_SAVE   ; SAVE
00134F  2               LBB_SCNCLR:
00134F  2  43 4E 43 4C          .BYTE   "CNCLR",TK_SCNCLR; SCNCLR
001353  2  52 B0        
001355  2               LBB_SCREEN:
001355  2  43 52 45 45          .BYTE   "CREEN",TK_SCREEN; SCREEN
001359  2  4E B3        
00135B  2               LBB_SGN:
00135B  2  47 4E 28 D4          .BYTE   "GN(",TK_SGN    ; SGN(
00135F  2               LBB_SIN:
00135F  2  49 4E 28 DF          .BYTE   "IN(",TK_SIN    ; SIN(
001363  2               LBB_SOUND:
001363  2  4F 55 4E 44          .BYTE   "OUND",TK_SOUND ; SOUND
001367  2  B7           
001368  2               LBB_SPC:
001368  2  50 43 28 C0          .BYTE   "PC(",TK_SPC    ; SPC(
00136C  2               LBB_SQR:
00136C  2  51 52 28 DA          .BYTE   "QR(",TK_SQR    ; SQR(
001370  2               LBB_STEP:
001370  2  54 45 50 C3          .BYTE   "TEP",TK_STEP   ; STEP
001374  2               LBB_STOP:
001374  2  54 4F 50 92          .BYTE   "TOP",TK_STOP   ; STOP
001378  2               LBB_STRS:
001378  2  54 52 24 28          .BYTE   "TR$(",TK_STRS  ; STR$(
00137C  2  E5           
00137D  2               LBB_SWAP:
00137D  2  57 41 50 A5          .BYTE   "WAP",TK_SWAP   ; SWAP
001381  2               LBB_SYS:
001381  2  59 53 B6             .BYTE   "YS",TK_SYS     ; SYS
001384  2  00                   .BYTE   $00
001385  2               TAB_ASCT:
001385  2               LBB_TAB:
001385  2  41 42 28 BC          .BYTE   "AB(",TK_TAB    ; TAB(
001389  2               LBB_TAN:
001389  2  41 4E 28 E0          .BYTE   "AN(",TK_TAN    ; TAN(
00138D  2               LBB_THEN:
00138D  2  48 45 4E C1          .BYTE   "HEN",TK_THEN   ; THEN
001391  2               LBB_TONE:
001391  2  4F 4E 45 B9          .BYTE   "ONE",TK_TONE   ; TONE
001395  2               LBB_TO:
001395  2  4F BE                .BYTE   "O",TK_TO       ; TO
001397  2  00                   .BYTE   $00
001398  2               TAB_ASCU:
001398  2               LBB_UCASES:
001398  2  43 41 53 45          .BYTE   "CASE$(",TK_UCASES
00139C  2  24 28 E8     
00139F  2               ; UCASE$(
00139F  2               LBB_UNTIL:
00139F  2  4E 54 49 4C          .BYTE   "NTIL",TK_UNTIL ; UNTIL
0013A3  2  C4           
0013A4  2               LBB_USR:
0013A4  2  53 52 28 D7          .BYTE   "SR(",TK_USR    ; USR(
0013A8  2  00                   .BYTE   $00
0013A9  2               TAB_ASCV:
0013A9  2               LBB_VAL:
0013A9  2  41 4C 28 E6          .BYTE   "AL(",TK_VAL    ; VAL(
0013AD  2               LBB_VPTR:
0013AD  2  41 52 50 54          .BYTE   "ARPTR(",TK_VPTR; VARPTR(
0013B1  2  52 28 F2     
0013B4  2               LBB_VOICE:
0013B4  2  4F 49 43 45          .BYTE   "OICE",TK_VOICE ; VOICE
0013B8  2  BB           
0013B9  2               LBB_VOLUME:
0013B9  2  4F 4C 55 4D          .BYTE   "OLUME",TK_VOLUME; VOLUME
0013BD  2  45 BA        
0013BF  2               
0013BF  2  00                   .BYTE   $00
0013C0  2               TAB_ASCW:
0013C0  2               LBB_WAIT:
0013C0  2  41 49 54 96          .BYTE   "AIT",TK_WAIT   ; WAIT
0013C4  2               LBB_WHILE:
0013C4  2  48 49 4C 45          .BYTE   "HILE",TK_WHILE ; WHILE
0013C8  2  C5           
0013C9  2               LBB_WIDTH:
0013C9  2  49 44 54 48          .BYTE   "IDTH",TK_WIDTH ; WIDTH
0013CD  2  A3           
0013CE  2  00                   .BYTE   $00
0013CF  2               TAB_POWR:
0013CF  2  CB 00                .BYTE   TK_POWER,$00    ; ^
0013D1  2               
0013D1  2               ; new decode table for LIST
0013D1  2               ; Table is ..
0013D1  2               ; byte - keyword length, keyword first character
0013D1  2               ; word - pointer to rest of keyword from dictionary
0013D1  2               
0013D1  2               ; note if length is 1 then the pointer is ignored
0013D1  2               
0013D1  2               LAB_KEYT:
0013D1  2  03 45                .BYTE   3,'E'
0013D3  2  4E 12                .WORD   LBB_END         ; END
0013D5  2  03 46                .BYTE   3,'F'
0013D7  2  5B 12                .WORD   LBB_FOR         ; FOR
0013D9  2  04 4E                .BYTE   4,'N'
0013DB  2  E2 12                .WORD   LBB_NEXT        ; NEXT
0013DD  2  04 44                .BYTE   4,'D'
0013DF  2  20 12                .WORD   LBB_DATA        ; DATA
0013E1  2  09 44                .BYTE   9,'D'
0013E3  2  2D 12                .WORD   LBB_DIRECTORY   ; DIRECTORY
0013E5  2  0A 44                .BYTE   10,'D'
0013E7  2  3D 12                .WORD   LBB_DISKSTATUS  ; DISKSTATUS
0013E9  2  05 49                .BYTE   5,'I'
0013EB  2  95 12                .WORD   LBB_INPUT       ; INPUT
0013ED  2  03 44                .BYTE   3,'D'
0013EF  2  2A 12                .WORD   LBB_DIM         ; DIM
0013F1  2  04 52                .BYTE   4,'R'
0013F3  2  23 13                .WORD   LBB_READ        ; READ
0013F5  2  03 4C                .BYTE   3,'L'
0013F7  2  B0 12                .WORD   LBB_LET         ; LET
0013F9  2  03 44                .BYTE   3,'D'
0013FB  2  24 12                .WORD   LBB_DEC         ; DEC
0013FD  2  04 47                .BYTE   4,'G'
0013FF  2  6F 12                .WORD   LBB_GOTO        ; GOTO
001401  2  03 52                .BYTE   3,'R'
001403  2  42 13                .WORD   LBB_RUN         ; RUN
001405  2  02 49                .BYTE   2,'I'
001407  2  90 12                .WORD   LBB_IF          ; IF
001409  2  07 52                .BYTE   7,'R'
00140B  2  2A 13                .WORD   LBB_RESTORE     ; RESTORE
00140D  2  05 47                .BYTE   5,'G'
00140F  2  6A 12                .WORD   LBB_GOSUB       ; GOSUB
001411  2  06 52                .BYTE   6,'R'
001413  2  31 13                .WORD   LBB_RETURN      ; RETURN
001415  2  03 52                .BYTE   3,'R'
001417  2  27 13                .WORD   LBB_REM         ; REM
001419  2  04 53                .BYTE   4,'S'
00141B  2  74 13                .WORD   LBB_STOP        ; STOP
00141D  2  02 4F                .BYTE   2,'O'
00141F  2  F6 12                .WORD   LBB_ON          ; ON
001421  2  04 4E                .BYTE   4,'N'
001423  2  EE 12                .WORD   LBB_NULL        ; NULL
001425  2  03 49                .BYTE   3,'I'
001427  2  92 12                .WORD   LBB_INC         ; INC
001429  2  04 57                .BYTE   4,'W'
00142B  2  C0 13                .WORD   LBB_WAIT        ; WAIT
00142D  2  04 4C                .BYTE   4,'L'
00142F  2  B7 12                .WORD   LBB_LOAD        ; LOAD
001431  2  04 53                .BYTE   4,'S'
001433  2  4B 13                .WORD   LBB_SAVE        ; SAVE
001435  2  03 44                .BYTE   3,'D'
001437  2  27 12                .WORD   LBB_DEF         ; DEF
001439  2  04 50                .BYTE   4,'P'
00143B  2  11 13                .WORD   LBB_POKE        ; POKE
00143D  2  04 43                .BYTE   4,'C'
00143F  2  FB 11                .WORD   LBB_CALL        ; CALL
001441  2  02 44                .BYTE   2,'D'
001443  2  47 12                .WORD   LBB_DO          ; DO
001445  2  04 4C                .BYTE   4,'L'
001447  2  C5 12                .WORD   LBB_LOOP        ; LOOP
001449  2  05 50                .BYTE   5,'P'
00144B  2  19 13                .WORD   LBB_PRINT       ; PRINT
00144D  2  04 43                .BYTE   4,'C'
00144F  2  17 12                .WORD   LBB_CONT        ; CONT
001451  2  04 4C                .BYTE   4,'L'
001453  2  B3 12                .WORD   LBB_LIST        ; LIST
001455  2  05 43                .BYTE   5,'C'
001457  2  04 12                .WORD   LBB_CLEAR       ; CLEAR
001459  2  03 4E                .BYTE   3,'N'
00145B  2  DF 12                .WORD   LBB_NEW         ; NEW
00145D  2  05 57                .BYTE   5,'W'
00145F  2  C9 13                .WORD   LBB_WIDTH       ; WIDTH
001461  2  03 47                .BYTE   3,'G'
001463  2  67 12                .WORD   LBB_GET         ; GET
001465  2  04 53                .BYTE   4,'S'
001467  2  7D 13                .WORD   LBB_SWAP        ; SWAP
001469  2  06 42                .BYTE   6,'B'
00146B  2  ED 11                .WORD   LBB_BITSET      ; BITSET
00146D  2  06 42                .BYTE   6,'B'
00146F  2  E7 11                .WORD   LBB_BITCLR      ; BITCLR
001471  2  07 4D                .BYTE   7,'M'
001473  2  D7 12                .WORD   LBB_MONITOR     ; MONITOR
001475  2  04 4F                .BYTE   4,'O'
001477  2  F8 12                .WORD   LBB_OPEN        ; OPEN
001479  2  05 43                .BYTE   5,'C'
00147B  2  09 12                .WORD   LBB_CLOSE       ; CLOSE
00147D  2  08 49                .BYTE   8,'I'
00147F  2  7A 12                .WORD   LBB_IECINPUT    ; IECINPUT
001481  2  09 49                .BYTE   9,'I'
001483  2  82 12                .WORD   LBB_IECOUTPUT   ; IECOUTPUT
001485  2  04 50                .BYTE   4,'P'
001487  2  1E 13                .WORD   LBB_PUTN        ; PUTN
001489  2  04 47                .BYTE   4,'G'
00148B  2  63 12                .WORD   LBB_GETN        ; GETN
00148D  2  07 44                .BYTE   7,'D'
00148F  2  36 12                .WORD   LBB_DISKCMD     ; DISKCMD
001491  2  06 53                .BYTE   6,'S'
001493  2  4F 13                .WORD   LBB_SCNCLR      ; SCNCLR
001495  2  06 4C                .BYTE   6,'L'
001497  2  BB 12                .WORD   LBB_LOCATE      ; LOCATE
001499  2  05 43                .BYTE   5,'C'
00149B  2  0E 12                .WORD   LBB_COLOR       ; COLOR
00149D  2  06 53                .BYTE   6,'S'
00149F  2  55 13                .WORD   LBB_SCREEN      ; SCREEN
0014A1  2  04 50                .BYTE   4,'P'
0014A3  2  0D 13                .WORD   LBB_PLOT        ; PLOT
0014A5  2  07 50                .BYTE   7,'P'
0014A7  2  FF 12                .WORD   LBB_PATTERN     ; PATTERN
0014A9  2  03 53                .BYTE   3,'S'
0014AB  2  81 13                .WORD   LBB_SYS         ; SYS
0014AD  2  05 53                .BYTE   5,'S'
0014AF  2  63 13                .WORD   LBB_SOUND       ; SOUND
0014B1  2  05 4E                .BYTE   5,'N'
0014B3  2  E6 12                .WORD   LBB_NOISE       ; NOISE
0014B5  2  04 54                .BYTE   4,'T'
0014B7  2  91 13                .WORD   LBB_TONE        ; TONE
0014B9  2  06 56                .BYTE   6,'V'
0014BB  2  B9 13                .WORD   LBB_VOLUME      ; VOLUME
0014BD  2  05 56                .BYTE   5,'V'
0014BF  2  B4 13                .WORD   LBB_VOICE       ; VOICE
0014C1  2               
0014C1  2               ; secondary commands (can't start a statement)
0014C1  2               
0014C1  2  04 54                .BYTE   4,'T'
0014C3  2  85 13                .WORD   LBB_TAB         ; TAB
0014C5  2  04 45                .BYTE   4,'E'
0014C7  2  4A 12                .WORD   LBB_ELSE        ; ELSE
0014C9  2  02 54                .BYTE   2,'T'
0014CB  2  95 13                .WORD   LBB_TO          ; TO
0014CD  2  02 46                .BYTE   2,'F'
0014CF  2  59 12                .WORD   LBB_FN          ; FN
0014D1  2  04 53                .BYTE   4,'S'
0014D3  2  68 13                .WORD   LBB_SPC         ; SPC
0014D5  2  04 54                .BYTE   4,'T'
0014D7  2  8D 13                .WORD   LBB_THEN        ; THEN
0014D9  2  03 4E                .BYTE   3,'N'
0014DB  2  EB 12                .WORD   LBB_NOT         ; NOT
0014DD  2  04 53                .BYTE   4,'S'
0014DF  2  70 13                .WORD   LBB_STEP        ; STEP
0014E1  2  05 55                .BYTE   5,'U'
0014E3  2  9F 13                .WORD   LBB_UNTIL       ; UNTIL
0014E5  2  05 57                .BYTE   5,'W'
0014E7  2  C4 13                .WORD   LBB_WHILE       ; WHILE
0014E9  2  03 4F                .BYTE   3,'O'
0014EB  2  F3 12                .WORD   LBB_OFF         ; OFF
0014ED  2               
0014ED  2               ; opperators
0014ED  2               
0014ED  2  01 2B                .BYTE   1,'+'
0014EF  2  00 00                .WORD   $0000           ; +
0014F1  2  01 2D                .BYTE   1,'-'
0014F3  2  00 00                .WORD   $0000           ; -
0014F5  2  01 2A                .BYTE   1,'*'
0014F7  2  00 00                .WORD   $0000           ; *
0014F9  2  01 2F                .BYTE   1,'/'
0014FB  2  00 00                .WORD   $0000           ; /
0014FD  2  01 5E                .BYTE   1,'^'
0014FF  2  00 00                .WORD   $0000           ; ^
001501  2  03 41                .BYTE   3,'A'
001503  2  D6 11                .WORD   LBB_AND         ; AND
001505  2  03 45                .BYTE   3,'E'
001507  2  51 12                .WORD   LBB_EOR         ; EOR
001509  2  02 4F                .BYTE   2,'O'
00150B  2  FC 12                .WORD   LBB_OR          ; OR
00150D  2  02 3E                .BYTE   2,'>'
00150F  2  CC 11                .WORD   LBB_RSHIFT      ; >>
001511  2  02 3C                .BYTE   2,'<'
001513  2  C6 11                .WORD   LBB_LSHIFT      ; <<
001515  2  01 3E                .BYTE   1,'>'
001517  2  00 00                .WORD   $0000           ; >
001519  2  01 3D                .BYTE   1,'='
00151B  2  00 00                .WORD   $0000           ; =
00151D  2  01 3C                .BYTE   1,'<'
00151F  2  00 00                .WORD   $0000           ; <
001521  2               
001521  2               ; functions
001521  2               
001521  2  04 53                .BYTE   4,'S'           ;
001523  2  5B 13                .WORD   LBB_SGN         ; SGN
001525  2  04 49                .BYTE   4,'I'           ;
001527  2  9A 12                .WORD   LBB_INT         ; INT
001529  2  04 41                .BYTE   4,'A'           ;
00152B  2  D2 11                .WORD   LBB_ABS         ; ABS
00152D  2  04 55                .BYTE   4,'U'           ;
00152F  2  A4 13                .WORD   LBB_USR         ; USR
001531  2  04 46                .BYTE   4,'F'           ;
001533  2  5E 12                .WORD   LBB_FRE         ; FRE
001535  2  04 50                .BYTE   4,'P'           ;
001537  2  15 13                .WORD   LBB_POS         ; POS
001539  2  04 53                .BYTE   4,'S'           ;
00153B  2  6C 13                .WORD   LBB_SQR         ; SQR
00153D  2  04 52                .BYTE   4,'R'           ;
00153F  2  3E 13                .WORD   LBB_RND         ; RND
001541  2  04 4C                .BYTE   4,'L'           ;
001543  2  C1 12                .WORD   LBB_LOG         ; LOG
001545  2  04 45                .BYTE   4,'E'           ;
001547  2  54 12                .WORD   LBB_EXP         ; EXP
001549  2  04 43                .BYTE   4,'C'           ;
00154B  2  1B 12                .WORD   LBB_COS         ; COS
00154D  2  04 53                .BYTE   4,'S'           ;
00154F  2  5F 13                .WORD   LBB_SIN         ; SIN
001551  2  04 54                .BYTE   4,'T'           ;
001553  2  89 13                .WORD   LBB_TAN         ; TAN
001555  2  04 41                .BYTE   4,'A'           ;
001557  2  DD 11                .WORD   LBB_ATN         ; ATN
001559  2  05 50                .BYTE   5,'P'           ;
00155B  2  06 13                .WORD   LBB_PEEK        ; PEEK
00155D  2  05 53                .BYTE   5,'S'           ;
00155F  2  46 13                .WORD   LBB_SADD        ; SADD
001561  2  04 4C                .BYTE   4,'L'           ;
001563  2  AC 12                .WORD   LBB_LEN         ; LEN
001565  2  05 53                .BYTE   5,'S'           ;
001567  2  78 13                .WORD   LBB_STRS        ; STR$
001569  2  04 56                .BYTE   4,'V'           ;
00156B  2  A9 13                .WORD   LBB_VAL         ; VAL
00156D  2  04 41                .BYTE   4,'A'           ;
00156F  2  D9 11                .WORD   LBB_ASC         ; ASC
001571  2  07 55                .BYTE   7,'U'           ;
001573  2  98 13                .WORD   LBB_UCASES      ; UCASE$
001575  2  07 4C                .BYTE   7,'L'           ;
001577  2  9F 12                .WORD   LBB_LCASES      ; LCASE$
001579  2  05 43                .BYTE   5,'C'           ;
00157B  2  FF 11                .WORD   LBB_CHRS        ; CHR$
00157D  2  05 48                .BYTE   5,'H'           ;
00157F  2  74 12                .WORD   LBB_HEXS        ; HEX$
001581  2  05 42                .BYTE   5,'B'           ;
001583  2  E2 11                .WORD   LBB_BINS        ; BIN$
001585  2  07 42                .BYTE   7,'B'           ;
001587  2  F3 11                .WORD   LBB_BITTST      ; BITTST
001589  2  04 4D                .BYTE   4,'M'           ;
00158B  2  CA 12                .WORD   LBB_MAX         ; MAX
00158D  2  04 4D                .BYTE   4,'M'           ;
00158F  2  D3 12                .WORD   LBB_MIN         ; MIN
001591  2  02 50                .BYTE   2,'P'           ;
001593  2  0B 13                .WORD   LBB_PI          ; PI
001595  2  05 49                .BYTE   5,'I'           ;
001597  2  8B 12                .WORD   LBB_IECST       ; IECST
001599  2  05 56                .BYTE   5,'V'           ;
00159B  2  AD 13                .WORD   LBB_VPTR        ; VARPTR
00159D  2  06 4C                .BYTE   6,'L'           ;
00159F  2  A6 12                .WORD   LBB_LEFTS       ; LEFT$
0015A1  2  07 52                .BYTE   7,'R'           ;
0015A3  2  37 13                .WORD   LBB_RIGHTS      ; RIGHT$
0015A5  2  05 4D                .BYTE   5,'M'           ;
0015A7  2  CE 12                .WORD   LBB_MIDS        ; MID$
0015A9  2  04 43                .BYTE   4,'C'           ;
0015AB  2  13 12                .WORD   LBB_CON         ; CON
0015AD  2               
0015AD  1               
0015AD  1               ; DEFINITIONS
0015AD  1                       .INCLUDE "definitions.asm"
0015AD  2               PROGRAMBANK     = $FF           ; BANK THAT THE INTREPRETER LIVES IN
0015AD  2               DATABANK        = $02           ; BANK THAT THE DATA LIVES IN
0015AD  2               
0015AD  2               FNBUFFER        = $000F00       ; FILE NAME BUFFER, MUST BE IN ZERO BANK!
0015AD  2               
0015AD  2               
0015AD  2               
0015AD  2               ; offsets from a base of X or Y
0015AD  2               
0015AD  2               PLUS_0          = $00           ; X or Y plus 0
0015AD  2               PLUS_1          = $01           ; X or Y plus 1
0015AD  2               PLUS_2          = $02           ; X or Y plus 2
0015AD  2               PLUS_3          = $03           ; X or Y plus 3
0015AD  2               
0015AD  2               STACK_BOTTOM    = $B000         ; stack bottom, no offset
0015AD  2               STACK           = $BFFF         ; stack top, no offset
0015AD  2               
0015AD  2               ccflag          = $000200       ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
0015AD  2               ccbyte          = ccflag+1      ; BASIC CTRL-C byte
0015AD  2               ccnull          = ccbyte+1      ; BASIC CTRL-C byte timeout
0015AD  2               
0015AD  2               VEC_CC          = ccnull+1      ; ctrl c check vector
0015AD  2               
0015AD  2               
0015AD  2               ; Ibuffs can now be anywhere in RAM AS LONG AS IT IS BEFORE RAM_BASE AND IS NOT PAGE ALIGNED!, ensure that the max length is < $80
0015AD  2               
0015AD  2                       .IF     PROGRAMBANK=DATABANK
0015AD  2               Ibuffs              = (ENDOFBASIC&$FF00)+$181
0015AD  2                       .ELSE
0015AD  2               Ibuffs              = $2000+$181
0015AD  2               LIbuffs             = (DATABANK*$10000)+$2000+$181
0015AD  2                       .ENDIF
0015AD  2               Ibuffe          = Ibuffs+80     ; end of input buffer
0015AD  2               
0015AD  2               Ram_base        = ((Ibuffe+1)&$FF00)+$100; start of user RAM (set as needed, should be page aligned)
0015AD  2               Ram_top         = $FF00         ; end of user RAM+1 (set as needed, should be page aligned)
0015AD  2               
0015AD  1               
0015AD  1               ; MESSAGES
0015AD  1                       .INCLUDE "messages.asm"
0015AD  2               
0015AD  2               LAB_CONMSG:
0015AD  2  80 80 80 83          .BYTE   $80,$80,$80,$83,$84,$85,"  Werner Engineering 816",$0D
0015B1  2  84 85 20 20  
0015B5  2  57 65 72 6E  
0015CC  2  81 81 81 83          .BYTE   $81,$81,$81,$83,$84,$85,"  Enhanced BASIC 65816 2.3",$0D
0015D0  2  84 85 20 20  
0015D4  2  45 6E 68 61  
0015ED  2  82 82 82 83          .BYTE   $82,$82,$82,$83,$84,$85,00
0015F1  2  84 85 00     
0015F4  2               
0015F4  2               LAB_SMSG:
0015F4  2  20 42 79 74          .BYTE   " Bytes free",$00
0015F8  2  65 73 20 66  
0015FC  2  72 65 65 00  
001600  2               LAB_SMSG1:
001600  2  0D 0A 45 6E          .BYTE   $0D,$0A,"Enhanced BASIC 65816 2.3",$00
001604  2  68 61 6E 63  
001608  2  65 64 20 42  
00161B  2  0D 0A 44 45          .BYTE   $0D,$0A,"DERIVED FROM ehBASIC BY LEE DAVIDSON",$00
00161F  2  52 49 56 45  
001623  2  44 20 46 52  
001642  2               
001642  2               ; BASIC messages, mostly error messages
001642  2               
001642  2               LAB_BAER:
001642  2  66 16                .WORD   ERR_NF          ;$00 NEXT without FOR
001644  2  77 16                .WORD   ERR_SN          ;$02 syntax
001646  2  7E 16                .WORD   ERR_RG          ;$04 RETURN without GOSUB
001648  2  93 16                .WORD   ERR_OD          ;$06 out of data
00164A  2  9F 16                .WORD   ERR_FC          ;$08 function call
00164C  2  AD 16                .WORD   ERR_OV          ;$0A overflow
00164E  2  B6 16                .WORD   ERR_OM          ;$0C out of memory
001650  2  C4 16                .WORD   ERR_US          ;$0E undefined statement
001652  2  D8 16                .WORD   ERR_BS          ;$10 array bounds
001654  2  E5 16                .WORD   ERR_DD          ;$12 double dimension array
001656  2  F6 16                .WORD   ERR_D0          ;$14 divide by 0
001658  2  05 17                .WORD   ERR_ID          ;$16 illegal direct
00165A  2  14 17                .WORD   ERR_TM          ;$18 type mismatch
00165C  2  22 17                .WORD   ERR_LS          ;$1A long string
00165E  2  32 17                .WORD   ERR_ST          ;$1C string too complex
001660  2  45 17                .WORD   ERR_CN          ;$1E continue error
001662  2  54 17                .WORD   ERR_UF          ;$20 undefined function
001664  2  67 17                .WORD   ERR_LD          ;$22 LOOP without DO
001666  2               
001666  2               ERR_NF:
001666  2  4E 45 58 54          .BYTE   "NEXT without FOR",$00
00166A  2  20 77 69 74  
00166E  2  68 6F 75 74  
001677  2               ERR_SN:
001677  2  53 79 6E 74          .BYTE   "Syntax",$00
00167B  2  61 78 00     
00167E  2               ERR_RG:
00167E  2  52 45 54 55          .BYTE   "RETURN without GOSUB",$00
001682  2  52 4E 20 77  
001686  2  69 74 68 6F  
001693  2               ERR_OD:
001693  2  4F 75 74 20          .BYTE   "Out of DATA",$00
001697  2  6F 66 20 44  
00169B  2  41 54 41 00  
00169F  2               ERR_FC:
00169F  2  46 75 6E 63          .BYTE   "Function call",$00
0016A3  2  74 69 6F 6E  
0016A7  2  20 63 61 6C  
0016AD  2               ERR_OV:
0016AD  2  4F 76 65 72          .BYTE   "Overflow",$00
0016B1  2  66 6C 6F 77  
0016B5  2  00           
0016B6  2               ERR_OM:
0016B6  2  4F 75 74 20          .BYTE   "Out of memory",$00
0016BA  2  6F 66 20 6D  
0016BE  2  65 6D 6F 72  
0016C4  2               ERR_US:
0016C4  2  55 6E 64 65          .BYTE   "Undefined statement",$00
0016C8  2  66 69 6E 65  
0016CC  2  64 20 73 74  
0016D8  2               ERR_BS:
0016D8  2  41 72 72 61          .BYTE   "Array bounds",$00
0016DC  2  79 20 62 6F  
0016E0  2  75 6E 64 73  
0016E5  2               ERR_DD:
0016E5  2  44 6F 75 62          .BYTE   "Double dimension",$00
0016E9  2  6C 65 20 64  
0016ED  2  69 6D 65 6E  
0016F6  2               ERR_D0:
0016F6  2  44 69 76 69          .BYTE   "Divide by zero",$00
0016FA  2  64 65 20 62  
0016FE  2  79 20 7A 65  
001705  2               ERR_ID:
001705  2  49 6C 6C 65          .BYTE   "Illegal direct",$00
001709  2  67 61 6C 20  
00170D  2  64 69 72 65  
001714  2               ERR_TM:
001714  2  54 79 70 65          .BYTE   "Type mismatch",$00
001718  2  20 6D 69 73  
00171C  2  6D 61 74 63  
001722  2               ERR_LS:
001722  2  53 74 72 69          .BYTE   "String too long",$00
001726  2  6E 67 20 74  
00172A  2  6F 6F 20 6C  
001732  2               ERR_ST:
001732  2  53 74 72 69          .BYTE   "String too complex",$00
001736  2  6E 67 20 74  
00173A  2  6F 6F 20 63  
001745  2               ERR_CN:
001745  2  43 61 6E 27          .BYTE   "Can't continue",$00
001749  2  74 20 63 6F  
00174D  2  6E 74 69 6E  
001754  2               ERR_UF:
001754  2  55 6E 64 65          .BYTE   "Undefined function",$00
001758  2  66 69 6E 65  
00175C  2  64 20 66 75  
001767  2               ERR_LD:
001767  2  4C 4F 4F 50          .BYTE   "LOOP without DO",$00
00176B  2  20 77 69 74  
00176F  2  68 6F 75 74  
001777  2               
001777  2               LAB_BMSG:
001777  2  0D 0A 42 72          .BYTE   $0D,$0A,"Break",$00
00177B  2  65 61 6B 00  
00177F  2               LAB_EMSG:
00177F  2  20 45 72 72          .BYTE   " Error",$00
001783  2  6F 72 00     
001786  2               LAB_LMSG:
001786  2  20 69 6E 20          .BYTE   " in line ",$00
00178A  2  6C 69 6E 65  
00178E  2  20 00        
001790  2               LAB_RMSG:
001790  2  0D 0A 52 65          .BYTE   $0D,$0A,"Ready",$0D,$0A,$00
001794  2  61 64 79 0D  
001798  2  0A 00        
00179A  2               
00179A  2               LAB_IMSG:
00179A  2  20 45 78 74          .BYTE   " Extra ignored",$0D,$0A,$00
00179E  2  72 61 20 69  
0017A2  2  67 6E 6F 72  
0017AB  2               LAB_REDO:
0017AB  2  20 52 65 64          .BYTE   " Redo from start",$0D,$0A,$00
0017AF  2  6F 20 66 72  
0017B3  2  6F 6D 20 73  
0017BE  2               LAB_IOER:
0017BE  2  20 49 2F 4F          .BYTE   " I/O Error",$0D,$0A,$00
0017C2  2  20 45 72 72  
0017C6  2  6F 72 0D 0A  
0017CB  2               
0017CB  1               
0017CB  1               ; NUMERIC CONSTANTS
0017CB  1                       .INCLUDE "numconst.asm"
0017CB  2               ; numeric constants and series
0017CB  2               ; constants and series for LOG(n)
0017CB  2               LAB_25A0:
0017CB  2  02                   .BYTE   $02             ; counter
0017CC  2  80 19 56 62          .BYTE   $80,$19,$56,$62 ; 0.59898
0017D0  2  80 76 22 F3          .BYTE   $80,$76,$22,$F3 ; 0.96147
0017D4  2  82 38 AA 40          .BYTE   $82,$38,$AA,$40 ; 2.88539
0017D8  2               
0017D8  2               LAB_25AD:
0017D8  2  80 35 04 F3          .BYTE   $80,$35,$04,$F3 ; 0.70711	1/root 2
0017DC  2               LAB_25B1:
0017DC  2  81 35 04 F3          .BYTE   $81,$35,$04,$F3 ; 1.41421	root 2
0017E0  2               LAB_25B5:
0017E0  2  80 80 00 00          .BYTE   $80,$80,$00,$00 ; -0.5
0017E4  2               LAB_25B9:
0017E4  2  80 31 72 18          .BYTE   $80,$31,$72,$18 ; 0.69315	LOG(2)
0017E8  2               
0017E8  2               ; numeric PRINT constants
0017E8  2               LAB_2947:
0017E8  2  91 43 4F F8          .BYTE   $91,$43,$4F,$F8 ; 99999.9375 (max value with at least one decimal)
0017EC  2               LAB_294B:
0017EC  2  94 74 23 F7          .BYTE   $94,$74,$23,$F7 ; 999999.4375 (max value before scientific notation)
0017F0  2               LAB_294F:
0017F0  2  94 74 24 00          .BYTE   $94,$74,$24,$00 ; 1000000
0017F4  2               
0017F4  2               ; EXP(n) constants and series
0017F4  2               LAB_2AFA:
0017F4  2  81 38 AA 3B          .BYTE   $81,$38,$AA,$3B ; 1.4427	(1/LOG base 2 e)
0017F8  2               LAB_2AFE:
0017F8  2  06                   .BYTE   $06             ; counter
0017F9  2  74 63 90 8C          .BYTE   $74,$63,$90,$8C ; 2.17023e-4
0017FD  2  77 23 0C AB          .BYTE   $77,$23,$0C,$AB ; 0.00124
001801  2  7A 1E 94 00          .BYTE   $7A,$1E,$94,$00 ; 0.00968
001805  2  7C 63 42 80          .BYTE   $7C,$63,$42,$80 ; 0.05548
001809  2  7E 75 FE D0          .BYTE   $7E,$75,$FE,$D0 ; 0.24023
00180D  2  80 31 72 15          .BYTE   $80,$31,$72,$15 ; 0.69315
001811  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.00000
001815  2               
001815  2               ; trigonometric constants and series
001815  2               LAB_2C78:
001815  2  81 49 0F DB          .BYTE   $81,$49,$0F,$DB ; 1.570796371 (pi/2) as floating #
001819  2               LAB_2C84:
001819  2  04                   .BYTE   $04             ; counter
00181A  2  86 1E D7 FB          .BYTE   $86,$1E,$D7,$FB ; 39.7109
00181E  2  87 99 26 65          .BYTE   $87,$99,$26,$65 ;-76.575
001822  2  87 23 34 58          .BYTE   $87,$23,$34,$58 ; 81.6022
001826  2  86 A5 5D E1          .BYTE   $86,$A5,$5D,$E1 ;-41.3417
00182A  2               LAB_2C7C:
00182A  2  83 49 0F DB          .BYTE   $83,$49,$0F,$DB ; 6.28319 (2*pi) as floating #
00182E  2               
00182E  2               LAB_2CC9:
00182E  2  08                   .BYTE   $08             ; counter
00182F  2  78 3A C5 37          .BYTE   $78,$3A,$C5,$37 ; 0.00285
001833  2  7B 83 A2 5C          .BYTE   $7B,$83,$A2,$5C ;-0.0160686
001837  2  7C 2E DD 4D          .BYTE   $7C,$2E,$DD,$4D ; 0.0426915
00183B  2  7D 99 B0 1E          .BYTE   $7D,$99,$B0,$1E ;-0.0750429
00183F  2  7D 59 ED 24          .BYTE   $7D,$59,$ED,$24 ; 0.106409
001843  2  7E 91 72 00          .BYTE   $7E,$91,$72,$00 ;-0.142036
001847  2  7E 4C B9 73          .BYTE   $7E,$4C,$B9,$73 ; 0.199926
00184B  2  7F AA AA 53          .BYTE   $7F,$AA,$AA,$53 ;-0.333331
00184F  2               
00184F  2               LAB_1D96        = *+1           ; $00,$00 used for undefined variables
00184F  2               LAB_259C:
00184F  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.000000, used for INC
001853  2               LAB_2AFD:
001853  2  81 80 00 00          .BYTE   $81,$80,$00,$00 ; -1.00000, used for DEC. must be on the same page as +1.00
001857  2               
001857  2               ; misc constants
001857  2               LAB_1DF7:
001857  2  90                   .BYTE   $90             ;-32768 (uses first three bytes from 0.5)
001858  2               LAB_2A96:
001858  2  80 00 00 00          .BYTE   $80,$00,$00,$00 ; 0.5
00185C  2               LAB_2C80:
00185C  2  7F 00 00 00          .BYTE   $7F,$00,$00,$00 ; 0.25
001860  2               LAB_26B5:
001860  2  84 20 00 00          .BYTE   $84,$20,$00,$00 ; 10.0000 divide by 10 constant
001864  2               
001864  2               ; This table is used in converting numbers to ASCII.
001864  2               
001864  2               LAB_2A9A:
001864  2               LAB_2A9B        = LAB_2A9A+1
001864  2               LAB_2A9C        = LAB_2A9B+1
001864  2  FE 79 60             .BYTE   $FE,$79,$60     ; -100000
001867  2  00 27 10             .BYTE   $00,$27,$10     ; 10000
00186A  2  FF FC 18             .BYTE   $FF,$FC,$18     ; -1000
00186D  2  00 00 64             .BYTE   $00,$00,$64     ; 100
001870  2  FF FF F6             .BYTE   $FF,$FF,$F6     ; -10
001873  2  00 00 01             .BYTE   $00,$00,$01     ; 1
001876  2               
001876  1               
001876  1               ; I/O VECTORS
001876  1                       .INCLUDE "iovect.asm"
001876  2               ;__________________________________________________________
001876  2               ;
001876  2               ; BIOS JUMP TABLE (NATIVE)
001876  2               ;__________________________________________________________
001876  2               LPRINTVEC       = $00FD00
001876  2               LINPVEC         = $00FD04
001876  2               LINPWVEC        = $00FD08
001876  2               LSetXYVEC       = $00FD0C
001876  2               LCPYVVEC        = $00FD10
001876  2               LSrlUpVEC       = $00FD14
001876  2               LSetColorVEC    = $00FD18
001876  2               LCURSORVEC      = $00FD1C
001876  2               LUNCURSORVEC    = $00FD20
001876  2               LWRITERTC       = $00FD24
001876  2               LREADRTC        = $00FD28
001876  2               LIECIN          = $00FD2C
001876  2               LIECOUT         = $00FD30
001876  2               LUNTALK         = $00FD34
001876  2               LUNLSTN         = $00FD38
001876  2               LLISTEN         = $00FD3C
001876  2               LTALK           = $00FD40
001876  2               LSETLFS         = $00FD44
001876  2               LSETNAM         = $00FD48
001876  2               LLOAD           = $00FD4C
001876  2               LSAVE           = $00FD50
001876  2               LIECINIT        = $00FD54
001876  2               LIECCLCH        = $00FD58       ; close input and output channels
001876  2               LIECOUTC        = $00FD5C       ; open a channel for output
001876  2               LIECINPC        = $00FD60       ; open a channel for input
001876  2               LIECOPNLF       = $00FD64       ; open a logical file
001876  2               LIECCLSLF       = $00FD68       ; close a specified logical file
001876  2               LClearScrVec    = $00FD6C       ; clear the  Screen
001876  2               
001876  2               CSRX            = $0330         ; CURRENT X POSITION
001876  2               CSRY            = $0331         ; CURRENT Y POSITION
001876  2               ConsoleDevice   = $0341         ; Current Console Device
001876  2               CSRCHAR         = $0342         ; Character under the Cursor
001876  2               VIDEOWIDTH      = $0343
001876  2               DEFAULT_COLOR   = $0344         ; DEFAULT COLOR FOR PRINTING
001876  2               TEMP            = $0345
001876  2               TEMPOFFSET      = $0347
001876  2               
001876  2               IECSTW          = $000317
001876  2               IECMSGM         = $00031F       ; message mode flag,
001876  2               ; $C0 = both control and kernal messages,
001876  2               ; $80 = control messages only,
001876  2               ; $40 = kernal messages only,
001876  2               ; $00 = neither control or kernal messages
001876  2               LOADBUFL        = $000322       ; IEC buffer Pointer
001876  2               LOADBUFH        = LOADBUFL+1
001876  2               LOADBANK        = LOADBUFL+2    ; BANK buffer Pointer
001876  2               IECSTRTL        = $00031D       ; IEC Start Address Pointer
001876  2               IECSTRTH        = IECSTRTL+1
001876  2               
001876  2               VideoDisplayPage = $fe31
001876  2               VideoCharGenOffset = $FE32
001876  2               VideoCharGenData = $fe33
001876  2               VideoTextMode   = $fe35
001876  2               VideoLoresMode  = $fe36
001876  2               VideoDoubleLores = $fe37
001876  2               VideoHiresMode  = $fe38
001876  2               VideoDoubleHires = $fe39
001876  2               Video80col      = $fe3A
001876  2               VideoMixedMode  = $fe3b
001876  2               VideoQuadHires  = $fe3c
001876  2               VideoMonoHires  = $fe3d
001876  2               
001876  2               
001876  2               ;__________________________________________________________
001876  2               
001876  2               
001876  2               
001876  2               
001876  2               ;___V_INPT_________________________________________________
001876  2               ;
001876  2               ; MAKE A BIOS CALL TO GET NON-BLOCKING CHARACTER INPUT
001876  2               ; THIS COULD BE SERIAL OR KEYBOARD DEPENDING ON BIOS SETTING
001876  2               ; RETURNS
001876  2               ;   A: CHARACTER
001876  2               ;      CARRY SET IF NO CHARACTER
001876  2               ;
001876  2               ;
001876  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
001876  2               ;__________________________________________________________
001876  2               V_INPT:
001876  2  22 04 FD 00          JSL     LINPVEC         ; INCHAR
00187A  2  60                   RTS
00187B  2               
00187B  2               ;___V_OUTP_________________________________________________
00187B  2               ;
00187B  2               ; MAKE A BIOS CALL TO SEND CHARACTER TO OUTPUT
00187B  2               ; THIS COULD BE SERIAL OR TMS9918 CHARACTER DISPLAY
00187B  2               ;
00187B  2               ;   A: CHARACTER
00187B  2               ;
00187B  2               ;
00187B  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
00187B  2               ;__________________________________________________________
00187B  2               
00187B  2               V_OUTP: ; send byte to output device
00187B  2               ;        PHX
00187B  2               ;        LDX     <VIDEOMODE
00187B  2               ;        CPX     #0
00187B  2               ;        BNE     V_OUTP1
00187B  2  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
00187F  2               ;V_OUTP1:
00187F  2               ;        PLX
00187F  2  60                   RTS
001880  2               
001880  2               
001880  2                       .INCLUDE "diskcmds.asm"
001880  3               .P816
001880  3               ;___V_SAVE_________________________________________________
001880  3               ;
001880  3               ; UTILIZE BIOS TO SAVE BASIC RAM
001880  3               ;
001880  3               ; STORE CONTENTS IN RAM FROM "Smeml/h" TO "Svarl/h"-1 IN BANK "DATABANK"
001880  3               ;
001880  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
001880  3               ; THIS IS NATIVE '816 CODE
001880  3               ;__________________________________________________________
001880  3               V_SAVE: ; save BASIC program
001880  3  20 A1 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001883  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001885  3  D0 08                BNE     V_SAVE_GO       ; YES, CONTINUE ON
001887  3               V_SAVE_ERR:
001887  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001889  3  20 83 26             JSR     LAB_XERR
00188C  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00188F  3               V_SAVE_GO:
00188F  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001893  3  A9 C0                LDA     #$C0
001895  3  8F 1F 03 00          STA     f:IECMSGM
001899  3  A0 00                LDY     #$00
00189B  3               V_SAVE_1:
00189B  3  8B DA A2 01          LDAINDIRECTY ssptr_l
00189F  3  B5 B8 C9 00  
0018A3  3  D0 04 A2 00  
0018B1  3  BB                   TYX
0018B2  3  9F 00 0F 00          STA     F:FNBUFFER,X
0018B6  3  C9 00                CMP     #$00
0018B8  3  F0 07                BEQ     V_SAVE_2
0018BA  3  C9 22                CMP     #'"'
0018BC  3  F0 03                BEQ     V_SAVE_2
0018BE  3  C8                   INY
0018BF  3  D0 DA                BNE     V_SAVE_1
0018C1  3               V_SAVE_2:
0018C1  3  98                   TYA                     ; fn length
0018C2  3  A2 00                LDX     #<FNBUFFER
0018C4  3  A0 0F                LDY     #>FNBUFFER
0018C6  3  8B                   PHB
0018C7  3  DA A2 00 DA          SETBANK 0
0018CB  3  AB FA        
0018CD  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0018D1  3  AB                   PLB
0018D2  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0018D5  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0018D8  3  A0 01                LDY#1                   ; secondary address
0018DA  3  8B                   PHB
0018DB  3  DA A2 00 DA          SETBANK 0
0018DF  3  AB FA        
0018E1  3  22 44 FD 00          JSL     LSETLFS
0018E5  3  A5 7A                LDA     <Smemh
0018E7  3  8F 1E 03 00          STA     F:IECSTRTH
0018EB  3  A5 79                LDA     <Smeml
0018ED  3  8F 1D 03 00          STA     F:IECSTRTL
0018F1  3  A5 7B                LDA     <Svarl
0018F3  3  8F 22 03 00          STA     F:LOADBUFL
0018F7  3  A5 7C                LDA     <Svarh
0018F9  3  8F 23 03 00          STA     F:LOADBUFH
0018FD  3  A9 02                LDA     #DATABANK
0018FF  3  8F 24 03 00          STA     F:LOADBANK
001903  3  22 50 FD 00          JSL     LSAVE
001907  3  AB                   PLB
001908  3  A9 90                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
00190A  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
00190C  3  20 24 2F             JSR     LAB_18C3
00190F  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001912  3               
001912  3               
001912  3               
001912  3               
001912  3               ;___V_LOAD_________________________________________________
001912  3               ;
001912  3               ; UTILIZE BIOS TO LOAD BASIC RAM
001912  3               ;
001912  3               ; LOAD CONTENTS TO RAM "Smeml/h" BANK "DATABANK"
001912  3               ;
001912  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
001912  3               ; THIS IS NATIVE '816 CODE
001912  3               ;__________________________________________________________
001912  3               V_LOAD: ; load BASIC program
001912  3  20 A1 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001915  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001917  3  D0 08                BNE     V_LOAD_GO       ; YES, CONTINUE ON
001919  3               V_LOAD_ERR:
001919  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
00191B  3  20 83 26             JSR     LAB_XERR
00191E  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001921  3               V_LOAD_GO:
001921  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001925  3  A9 C0                LDA     #$C0
001927  3  8F 1F 03 00          STA     f:IECMSGM
00192B  3  A0 00                LDY     #$00
00192D  3               V_LOAD_1:
00192D  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001931  3  B5 B8 C9 00  
001935  3  D0 04 A2 00  
001943  3  BB                   TYX
001944  3  9F 00 0F 00          STA     F:FNBUFFER,X
001948  3  C9 00                CMP     #$00
00194A  3  F0 07                BEQ     V_LOAD_2
00194C  3  C9 22                CMP     #'"'
00194E  3  F0 03                BEQ     V_LOAD_2
001950  3  C8                   INY
001951  3  D0 DA                BNE     V_LOAD_1
001953  3               V_LOAD_2:
001953  3  98                   TYA                     ; fn length
001954  3  A2 00                LDX     #<FNBUFFER
001956  3  A0 0F                LDY     #>FNBUFFER
001958  3  8B                   PHB
001959  3  DA A2 00 DA          SETBANK 0
00195D  3  AB FA        
00195F  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001963  3  AB                   PLB
001964  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001967  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
00196A  3  A0 01                LDY#1                   ; secondary address
00196C  3  8B                   PHB
00196D  3  DA A2 00 DA          SETBANK 0
001971  3  AB FA        
001973  3  22 44 FD 00          JSL     LSETLFS
001977  3  A5 7A                LDA     <Smemh
001979  3  8F 23 03 00          STA     F:LOADBUFH
00197D  3  A5 79                LDA     <Smeml
00197F  3  8F 22 03 00          STA     F:LOADBUFL
001983  3  A9 02                LDA     #DATABANK
001985  3  8F 24 03 00          STA     F:LOADBANK
001989  3  22 4C FD 00          JSL     LLOAD
00198D  3  AF 23 03 00          LDA     F:LOADBUFH
001991  3  85 7C                STA     <Svarh
001993  3  AF 22 03 00          LDA     F:LOADBUFL
001997  3  85 7B                STA     <Svarl
001999  3  AB                   PLB
00199A  3  A9 90                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
00199C  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
00199E  3  20 24 2F             JSR     LAB_18C3
0019A1  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0019A4  3               
0019A4  3               
0019A4  3               ;___V_ERR___________________________________________________
0019A4  3               ;
0019A4  3               ; UTILIZE BIOS TO REPORT IEC IO CHANNEL STATUS
0019A4  3               ;
0019A4  3               ;
0019A4  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
0019A4  3               ; THIS IS NATIVE '816 CODE
0019A4  3               ;__________________________________________________________
0019A4  3               V_ERR:
0019A4  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0019A8  3  A9 C0                LDA     #$C0
0019AA  3  8F 1F 03 00          STA     f:IECMSGM
0019AE  3  A0 00                LDY     #$00
0019B0  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0019B3  3               GETIECSTATUS:
0019B3  3  8B                   PHB
0019B4  3  DA                   PHX
0019B5  3  DA A2 00 DA          SETBANK 0
0019B9  3  AB FA        
0019BB  3  A9 0D                LDA     #13
0019BD  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019C1  3  A9 0A                LDA     #10
0019C3  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019C7  3  A9 00                LDA     #0              ; fn length
0019C9  3  A2 00                LDX     #0
0019CB  3  A0 00                LDY     #0
0019CD  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0019D1  3  FA                   PLX                     ; Device Number
0019D2  3  A0 0F                LDY     #15             ; secondary address
0019D4  3  A9 0F                LDA     #15             ; LFN NUMBER
0019D6  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
0019DA  3  22 64 FD 00          JSL     LIECOPNLF
0019DE  3  B0 1E                BCS     IECERROR
0019E0  3  A2 0F                LDX     #15
0019E2  3  22 60 FD 00          JSL     LIECINPC
0019E6  3  B0 16                BCS     IECERROR
0019E8  3               GETIECSTATUS_1:
0019E8  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
0019EC  3  B0 10                BCS     IECERROR
0019EE  3  C9 0D                CMP     #13
0019F0  3  F0 0C                BEQ     IECERROR
0019F2  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019F6  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
0019FA  3  4A                   LSR                     ; shift time out read ..
0019FB  3  4A                   LSR                     ; .. into carry bit
0019FC  3  90 EA                BCC     GETIECSTATUS_1  ; all ok, do another
0019FE  3               IECERROR:
0019FE  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001A02  3  A9 0F                LDA     #15
001A04  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001A08  3  A9 0D                LDA     #13
001A0A  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A0E  3  A9 0A                LDA     #10
001A10  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A14  3  AB                   PLB
001A15  3  A9 90                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001A17  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001A19  3  20 24 2F             JSR     LAB_18C3
001A1C  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001A1F  3               
001A1F  3               
001A1F  3               
001A1F  3               ;___V_DIR___________________________________________________
001A1F  3               ;
001A1F  3               ; UTILIZE BIOS TO DISPLAY DISK DIRECTORY
001A1F  3               ;
001A1F  3               ;
001A1F  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
001A1F  3               ; THIS IS NATIVE '816 CODE
001A1F  3               ;__________________________________________________________
001A1F  3               V_DIR:
001A1F  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001A23  3  A9 C0                LDA     #$C0
001A25  3  8F 1F 03 00          STA     f:IECMSGM
001A29  3  A0 00                LDY     #$00
001A2B  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001A2E  3  8B                   PHB
001A2F  3  DA                   PHX
001A30  3  A9 24                LDA     #'$'
001A32  3  8F 00 0F 00          STA     f:FNBUFFER
001A36  3  DA A2 00 DA          SETBANK 0
001A3A  3  AB FA        
001A3C  3  A9 0D                LDA     #13
001A3E  3  22 00 FD 00          JSL     LPRINTVEC
001A42  3  A9 0A                LDA     #10
001A44  3  22 00 FD 00          JSL     LPRINTVEC
001A48  3  A9 01                LDA     #1              ; fn length
001A4A  3  A2 00                LDX     #<FNBUFFER
001A4C  3  A0 0F                LDY     #>FNBUFFER
001A4E  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001A52  3  FA                   PLX                     ; Device Number
001A53  3  A0 00                LDY     #0              ; secondary address
001A55  3  A9 0F                LDA     #15             ; LFN NUMBER
001A57  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001A5B  3  22 64 FD 00          JSL     LIECOPNLF
001A5F  3  B0 9D                BCS     IECERROR
001A61  3  A2 0F                LDX     #15
001A63  3  22 60 FD 00          JSL     LIECINPC
001A67  3  B0 95                BCS     IECERROR
001A69  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A6D  3               GETIECDIRECTORY_1:
001A6D  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A71  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A75  3  48                   PHA
001A76  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A7A  3  FA                   PLX
001A7B  3  AB                   PLB
001A7C  3  8B                   PHB
001A7D  3  20 42 46             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
001A80  3  DA A2 00 DA          SETBANK 0
001A84  3  AB FA        
001A86  3  A9 20                LDA     #' '
001A88  3  22 00 FD 00          JSL     LPRINTVEC
001A8C  3  A9 20                LDA     #' '
001A8E  3  22 00 FD 00          JSL     LPRINTVEC
001A92  3  22 2C FD 00          JSL     LIECIN
001A96  3  C9 00                CMP     #$00
001A98  3  F0 04                BEQ     GETIECDIRECTORY_2A
001A9A  3  22 00 FD 00          JSL     LPRINTVEC
001A9E  3               GETIECDIRECTORY_2A:
001A9E  3  22 2C FD 00          JSL     LIECIN
001AA2  3  C9 00                CMP     #$00
001AA4  3  F0 04                BEQ     GETIECDIRECTORY_2
001AA6  3  22 00 FD 00          JSL     LPRINTVEC
001AAA  3               GETIECDIRECTORY_2:
001AAA  3  22 2C FD 00          JSL     LIECIN          ; input ENTRY TEXT byte from the serial bus
001AAE  3  22 00 FD 00          JSL     LPRINTVEC
001AB2  3  C9 00                CMP     #$00
001AB4  3  F0 29                BEQ     GETIECDIRECTORY_3; END ENTRY
001AB6  3               
001AB6  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001ABA  3  4A                   LSR                     ; shift time out read ..
001ABB  3  4A                   LSR                     ; .. into carry bit
001ABC  3  90 EC                BCC     GETIECDIRECTORY_2; all ok, do another
001ABE  3               GETIECDIRECTORY_END:
001ABE  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001AC2  3  A9 0F                LDA     #15
001AC4  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001AC8  3  A9 0D                LDA     #13
001ACA  3  22 00 FD 00          JSL     LPRINTVEC
001ACE  3  A9 0A                LDA     #10
001AD0  3  22 00 FD 00          JSL     LPRINTVEC
001AD4  3  AB                   PLB
001AD5  3  A9 90                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001AD7  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001AD9  3  20 24 2F             JSR     LAB_18C3
001ADC  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001ADF  3               
001ADF  3               GETIECDIRECTORY_3:
001ADF  3  A9 0D                LDA     #13
001AE1  3  22 00 FD 00          JSL     LPRINTVEC
001AE5  3  A9 0A                LDA     #10
001AE7  3  22 00 FD 00          JSL     LPRINTVEC
001AEB  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001AEF  3  C9 01                CMP     #$01
001AF1  3  D0 CB                BNE     GETIECDIRECTORY_END
001AF3  3  4C 6D 1A             JMP     GETIECDIRECTORY_1
001AF6  3               
001AF6  3               
001AF6  3               ;___V_DISKCMD______________________________________________
001AF6  3               ;
001AF6  3               ; UTILIZE BIOS TO SEND A DISK COMMAND
001AF6  3               ;
001AF6  3               ;
001AF6  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (COMMAND) AND ONE NUMERIC VAR (DEVICE)
001AF6  3               ; THIS IS NATIVE '816 CODE
001AF6  3               ;__________________________________________________________
001AF6  3               V_DISKCMD:                      ; save BASIC program
001AF6  3  20 A1 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001AF9  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001AFB  3  D0 08                BNE     V_DISKCMD_GO    ; YES, CONTINUE ON
001AFD  3               V_DISKCMD_ERR:
001AFD  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001AFF  3  20 83 26             JSR     LAB_XERR
001B02  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001B05  3               V_DISKCMD_GO:
001B05  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001B09  3  A9 C0                LDA     #$C0
001B0B  3  8F 1F 03 00          STA     f:IECMSGM
001B0F  3  20 B4 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001B12  3               ; space returns with A = length, X=$71=pointer low byte,
001B12  3               ; Y=$72=pointer high byte
001B12  3  86 B8                STX     <ssptr_l
001B14  3  84 B9                STY     <ssptr_h
001B16  3  AA                   TAX
001B17  3  A0 00                LDY     #$00
001B19  3               V_DISKCMD_1:
001B19  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001B1D  3  B5 B8 C9 00  
001B21  3  D0 04 A2 00  
001B2F  3  DA                   PHX
001B30  3  BB                   TYX
001B31  3  9F 00 0F 00          STA     f:FNBUFFER,X
001B35  3  FA                   PLX
001B36  3  CA                   DEX
001B37  3  E0 00                CPX     #$00
001B39  3  F0 03                BEQ     V_DISKCMD_2
001B3B  3  C8                   INY
001B3C  3  D0 DB                BNE     V_DISKCMD_1
001B3E  3               V_DISKCMD_2:
001B3E  3  BB                   TYX
001B3F  3  A9 00                LDA     #0
001B41  3  9F 01 0F 00          STA     f:FNBUFFER+1,X
001B45  3  8B                   PHB
001B46  3  DA A2 00 DA          SETBANK 0
001B4A  3  AB FA        
001B4C  3  A9 00                LDA     #0              ; fn length
001B4E  3  A2 00                LDX     #0
001B50  3  A0 00                LDY     #0
001B52  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001B56  3  AB                   PLB
001B57  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001B5A  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER (DEVICE NUMBER), RETURN IN X
001B5D  3  8B                   PHB
001B5E  3  DA A2 00 DA          SETBANK 0
001B62  3  AB FA        
001B64  3  A0 0F                LDY     #15             ; secondary address
001B66  3  A9 0F                LDA     #15             ; LFN NUMBER
001B68  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001B6C  3  22 64 FD 00          JSL     LIECOPNLF
001B70  3  B0 27                BCS     V_DISKCMD_ERR1
001B72  3  A2 0F                LDX     #15
001B74  3  22 5C FD 00          JSL     LIECOUTC
001B78  3  A2 00                LDX     #$00
001B7A  3               V_DISKCMD_3:
001B7A  3  BF 00 0F 00          LDA     f:FNBUFFER,X
001B7E  3  C9 00                CMP     #$00
001B80  3  F0 09                BEQ     V_DISKCMD_4
001B82  3  22 30 FD 00          JSL     LIECOUT         ; OUTPUT a byte To the serial bus
001B86  3  B0 11                BCS     V_DISKCMD_ERR1
001B88  3               
001B88  3  E8                   INX
001B89  3  80 EF                BRA     V_DISKCMD_3
001B8B  3               V_DISKCMD_4:
001B8B  3  A9 0F                LDA     #15
001B8D  3  22 38 FD 00          JSL     LUNLSTN
001B91  3  A9 0F                LDA     #15
001B93  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001B97  3  AB                   PLB
001B98  3  60                   RTS
001B99  3               V_DISKCMD_ERR1:
001B99  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001B9D  3  A9 0F                LDA     #15
001B9F  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BA3  3  A9 0D                LDA     #13
001BA5  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001BA9  3  A9 0A                LDA     #10
001BAB  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001BAF  3  AB                   PLB
001BB0  3  A9 90                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001BB2  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001BB4  3  20 24 2F             JSR     LAB_18C3
001BB7  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001BBA  3               
001BBA  3               
001BBA  3               
001BBA  3               ;___V_OPEN__________________________________________________
001BBA  3               ;
001BBA  3               ; UTILIZE BIOS TO OPEN AN IEC IO CHANNEL
001BBA  3               ;
001BBA  3               ;
001BBA  3               ; BASIC COMMAND EXPECTS THREE NUMERIC VARS, AND ONE STRING
001BBA  3               ; VAR
001BBA  3               ; FILE#, DEVICE, SECONDARY ADDRESS, FILENAME
001BBA  3               ; THIS IS NATIVE '816 CODE
001BBA  3               ;__________________________________________________________
001BBA  3               V_OPEN:
001BBA  3  8B                   PHB
001BBB  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001BBF  3  A9 C0                LDA     #$C0
001BC1  3  8F 1F 03 00          STA     f:IECMSGM
001BC5  3  A0 00                LDY     #$00
001BC7  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001BCA  3  DA                   PHX
001BCB  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BCE  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001BD1  3  DA                   PHX
001BD2  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BD5  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (SECONDARY ADDRESS)
001BD8  3  DA                   PHX
001BD9  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BDC  3  20 A1 31             JSR     LAB_EVEX        ; GET THE FOURTH PARAMETER
001BDF  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001BE1  3  D0 08                BNE     V_OPEN_GO       ; YES, CONTINUE ON
001BE3  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001BE5  3  20 83 26             JSR     LAB_XERR
001BE8  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001BEB  3               V_OPEN_GO:
001BEB  3  20 B4 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001BEE  3               ; space returns with A = length, X=$71=pointer low byte,
001BEE  3               ; Y=$72=pointer high byte
001BEE  3  86 B8                STX     <ssptr_l
001BF0  3  84 B9                STY     <ssptr_h
001BF2  3  AA                   TAX
001BF3  3  A0 00                LDY     #$00
001BF5  3               V_OPEN_1:
001BF5  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001BF9  3  B5 B8 C9 00  
001BFD  3  D0 04 A2 00  
001C0B  3  DA                   PHX
001C0C  3  BB                   TYX
001C0D  3  9F 00 0F 00          STA     f:FNBUFFER,X
001C11  3  FA                   PLX
001C12  3  CA                   DEX
001C13  3  E0 00                CPX     #$00
001C15  3  F0 03                BEQ     V_OPEN_2
001C17  3  C8                   INY
001C18  3  D0 DB                BNE     V_OPEN_1
001C1A  3               V_OPEN_2:
001C1A  3  C8                   INY
001C1B  3  98                   TYA                     ; fn length
001C1C  3  A2 00                LDX     #<FNBUFFER
001C1E  3  A0 0F                LDY     #>FNBUFFER
001C20  3  DA A2 00 DA          SETBANK 0
001C24  3  AB FA        
001C26  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001C2A  3  FA                   PLX
001C2B  3  9B                   TXY                     ; secondary address
001C2C  3  FA                   PLX                     ; DEVICE NUMBER
001C2D  3  68                   PLA                     ; LFN NUMBER
001C2E  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001C32  3  22 64 FD 00          JSL     LIECOPNLF
001C36  3  B0 02                BCS     V_OPEN_IECERROR
001C38  3  AB                   PLB
001C39  3  60                   RTS
001C3A  3                       V_OPEN_IECERROR:
001C3A  3  4C FE 19             JMP     IECERROR
001C3D  3               
001C3D  3               ;___V_CLOSE________________________________________________
001C3D  3               ;
001C3D  3               ; UTILIZE BIOS TO CLOSE AN IEC IO CHANNEL
001C3D  3               ;
001C3D  3               ;
001C3D  3               ; THIS IS NATIVE '816 CODE
001C3D  3               ;__________________________________________________________
001C3D  3               V_CLOSE:
001C3D  3  8B                   PHB
001C3E  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C41  3  DA A2 00 DA          SETBANK 0
001C45  3  AB FA        
001C47  3  8A                   TXA
001C48  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001C4C  3  AB                   PLB
001C4D  3  60                   RTS
001C4E  3               
001C4E  3               ;___V_IECINPUT_______________________________________________
001C4E  3               ;
001C4E  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS INPUT
001C4E  3               ;
001C4E  3               ;
001C4E  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001C4E  3               ; THIS IS NATIVE '816 CODE
001C4E  3               ;__________________________________________________________
001C4E  3               V_IECINPUT:
001C4E  3  8B                   PHB
001C4F  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C52  3  DA A2 00 DA          SETBANK 0
001C56  3  AB FA        
001C58  3  22 60 FD 00          JSL     LIECINPC
001C5C  3  B0 02                BCS     V_IECINPUT_IECERROR
001C5E  3  AB                   PLB
001C5F  3  60                   RTS
001C60  3                       V_IECINPUT_IECERROR:
001C60  3  AB                   PLB
001C61  3  4C FE 19             JMP     IECERROR
001C64  3               
001C64  3               ;___V_IECOUTPUT______________________________________________
001C64  3               ;
001C64  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS OUTPUT
001C64  3               ;
001C64  3               ;
001C64  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001C64  3               ; THIS IS NATIVE '816 CODE
001C64  3               ;__________________________________________________________
001C64  3               V_IECOUTPUT:
001C64  3  8B                   PHB
001C65  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C68  3  DA A2 00 DA          SETBANK 0
001C6C  3  AB FA        
001C6E  3  22 5C FD 00          JSL     LIECOUTC
001C72  3  B0 02                BCS     V_IECOUTPUT_IECERROR
001C74  3  AB                   PLB
001C75  3  60                   RTS
001C76  3                       V_IECOUTPUT_IECERROR:
001C76  3  AB                   PLB
001C77  3  4C FE 19             JMP     IECERROR
001C7A  3               
001C7A  3               
001C7A  3               ;___V_PUTN__________________________________________________
001C7A  3               ;
001C7A  3               ; UTILIZE BIOS TO PRINT TO AN IEC IO CHANNEL
001C7A  3               ;
001C7A  3               ; STARTING WITH FILE#, OUTPUT STRING
001C7A  3               ; THIS IS NATIVE '816 CODE
001C7A  3               ;__________________________________________________________
001C7A  3               V_PUTN:
001C7A  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C7D  3  86 04                STX     <TMPFLG
001C7F  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C82  3               
001C82  3  20 A1 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001C85  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001C87  3  D0 08                BNE     V_PUTN_GO       ; YES, CONTINUE ON
001C89  3               V_PUTN_ERR:
001C89  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001C8B  3  20 83 26             JSR     LAB_XERR
001C8E  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001C91  3               V_PUTN_GO:
001C91  3  20 B4 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001C94  3               ; space returns with A = length, X=$71=pointer low byte,
001C94  3               ; Y=$72=pointer high byte
001C94  3  86 B8                STX     <ssptr_l
001C96  3  84 B9                STY     <ssptr_h
001C98  3  AA                   TAX
001C99  3  A0 00                LDY     #$00
001C9B  3               V_PUTN_1:
001C9B  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001C9F  3  B5 B8 C9 00  
001CA3  3  D0 04 A2 00  
001CB1  3  DA                   PHX
001CB2  3  5A                   PHY
001CB3  3  8B                   PHB
001CB4  3  DA A2 00 DA          SETBANK 0
001CB8  3  AB FA        
001CBA  3  A6 04                LDX     <TMPFLG
001CBC  3  48                   PHA
001CBD  3  22 30 FD 00          JSL     LIECOUT
001CC1  3  68                   PLA
001CC2  3  22 00 FD 00          JSL     LPRINTVEC
001CC6  3  AB                   PLB
001CC7  3  7A                   PLY
001CC8  3  FA                   PLX
001CC9  3  CA                   DEX
001CCA  3  E0 00                CPX     #00
001CCC  3  F0 03                BEQ     V_PUTN_2
001CCE  3  C8                   INY
001CCF  3  D0 CA                BNE     V_PUTN_1
001CD1  3               V_PUTN_2:
001CD1  3  60                   RTS
001CD2  3               
001CD2  3               
001CD2  3               
001CD2  3               ;___LAB_IECST_______________________________________________
001CD2  3               ;
001CD2  3               ; RETURN IEC STATUS BYTE
001CD2  3               ;
001CD2  3               ; THIS IS NATIVE '816 CODE
001CD2  3               ;__________________________________________________________
001CD2  3               LAB_IECST:
001CD2  3  48                   PHA
001CD3  3  AF 17 03 00          LDA     f:IECSTW        ; get IECSTW into low byte
001CD7  3  A8                   TAY
001CD8  3  68                   PLA
001CD9  3  A9 00                LDA     #0              ; NO high byte
001CDB  3  20 5C 37             JSR     LAB_AYFC
001CDE  3  60                   RTS
001CDF  3               LAB_PIECST:
001CDF  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
001CE1  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
001CE5  3  60                   RTS
001CE6  3               
001CE6  3               ;___V_GETN_________________________________________________
001CE6  3               ;
001CE6  3               ; UTILIZE BIOS TO INPUT FROM AN IEC IO CHANNEL
001CE6  3               ;
001CE6  3               ; LOTS OF PARAMETERS :)  STARTING WITH FILE#
001CE6  3               ; THIS IS NATIVE '816 CODE
001CE6  3               ;__________________________________________________________
001CE6  3               V_GETN:
001CE6  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001CE9  3  DA                   PHX                     ; STORE DEVICE NUMBER
001CEA  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001CED  3  20 9E 34             JSR     LAB_GVAR        ; get var address
001CF0  3  85 97                STA     <Lvarpl         ; save var address low byte
001CF2  3  84 98                STY     <Lvarph         ; save var address high byte
001CF4  3  FA                   PLX
001CF5  3  8B                   PHB
001CF6  3  DA A2 00 DA          SETBANK 0
001CFA  3  AB FA        
001CFC  3  A6 04                LDX     <TMPFLG
001CFE  3  22 2C FD 00          JSL     LIECIN          ; get input byte
001D02  3  AB                   PLB
001D03  3               
001D03  3  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
001D05  3  30 07                BMI     LAB_GETNS       ; go get string character
001D07  3               ; was numeric get
001D07  3  A8                   TAY                     ; copy character to Y
001D08  3  20 69 37             JSR     LAB_1FD0        ; convert Y to byte in FAC1
001D0B  3  4C 91 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
001D0E  3               LAB_GETNS:
001D0E  3  48                   PHA
001D0F  3  A9 01                LDA     #$01
001D11  3  20 CD 38             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
001D14  3               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
001D14  3  68                   PLA                     ; get character back
001D15  3  A0 00                LDY     #$00            ; clear index
001D17  3  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
001D1B  3  01 B5 AD C9  
001D1F  3  00 D0 04 A2  
001D2D  3  20 30 39             JSR     LAB_RTST        ; check for space on descriptor stack then put address
001D30  3               ; and length on descriptor stack and update stack pointers
001D30  3  4C 3B 2D             JMP     LAB_17D5        ; do string LET and return
001D33  3               
001D33  2                       .INCLUDE "screencmds.asm"
001D33  3               ;___SCNCLR_________________________________________________
001D33  3               ;
001D33  3               ; UTILIZE BIOS TO CLEAR SCREEN
001D33  3               ;
001D33  3               ;
001D33  3               ; THIS IS NATIVE '816 CODE
001D33  3               ;__________________________________________________________
001D33  3               V_SCNCLR:
001D33  3  8B                   PHB
001D34  3  DA A2 00 DA          SETBANK 0
001D38  3  AB FA        
001D3A  3  22 6C FD 00          JSL     LClearScrVec
001D3E  3  AB                   PLB
001D3F  3  60                   RTS
001D40  3               
001D40  3               
001D40  3               ;___LOCATE_________________________________________________
001D40  3               ;
001D40  3               ; UTILIZE BIOS TO LOCATE CURSOR
001D40  3               ;
001D40  3               ;  TAKES TWO PARAMETERS X,Y
001D40  3               ;
001D40  3               ; THIS IS NATIVE '816 CODE
001D40  3               ;__________________________________________________________
001D40  3               V_LOCATE:
001D40  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001D43  3  DA                   PHX
001D44  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D47  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001D4A  3  7A                   PLY
001D4B  3  8B                   PHB
001D4C  3  DA A2 00 DA          SETBANK 0
001D50  3  AB FA        
001D52  3  22 0C FD 00          JSL     LSetXYVEC
001D56  3  AB                   PLB
001D57  3  60                   RTS
001D58  3               
001D58  3               ;___COLOR_________________________________________________
001D58  3               ;
001D58  3               ; UTILIZE BIOS TO SET COLORS
001D58  3               ;
001D58  3               ;  TAKES TWO PARAMETERS BACKGROUND,FOREGROUND
001D58  3               ;
001D58  3               ; THIS IS NATIVE '816 CODE
001D58  3               ;__________________________________________________________
001D58  3               V_COLOR:
001D58  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001D5B  3  8A                   TXA
001D5C  3  29 0F                AND     #$0F
001D5E  3  48                   PHA
001D5F  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D62  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001D65  3  8A                   TXA
001D66  3  29 0F                AND     #$0F
001D68  3  85 04                STA     <TMPFLG
001D6A  3  68                   PLA
001D6B  3  18                   CLC
001D6C  3  0A                   ASL
001D6D  3  0A                   ASL
001D6E  3  0A                   ASL
001D6F  3  0A                   ASL
001D70  3  05 04                ORA     <TMPFLG
001D72  3  8B                   PHB
001D73  3  DA A2 00 DA          SETBANK 0
001D77  3  AB FA        
001D79  3  22 18 FD 00          JSL     LSetColorVEC
001D7D  3  AB                   PLB
001D7E  3  60                   RTS
001D7F  3               
001D7F  3               ;___V_SCREEN_________________________________________________
001D7F  3               ;
001D7F  3               ;  SET SCREEN MODE
001D7F  3               ;
001D7F  3               ;  TAKES UP TO THREE PARAMETERS
001D7F  3               ;  FIRST PARAMETER SCREEN MODE
001D7F  3               ;  0=TEXT MODE
001D7F  3               ;  1=LORES MODE
001D7F  3               ;  2=HIRES MODE
001D7F  3               ;
001D7F  3               ;  TEXT MODE PARAMETERS
001D7F  3               ;  0=40 COLUMNS
001D7F  3               ;  1=80 COLUMNS
001D7F  3               ;
001D7F  3               ;  LORES MODE SECOND PARAMETER
001D7F  3               ;  0=SINGLE LORES
001D7F  3               ;  1=DOUBLE LORES
001D7F  3               ;  LORES MODE THIRD PARAMETER
001D7F  3               ;  0=MIXED MODE
001D7F  3               ;  1=FULL SCREEN MODE
001D7F  3               ;
001D7F  3               ;  HIRES MODE SECOND PARAMETER
001D7F  3               ;  0=SINGLE HIRES
001D7F  3               ;  1=DOUBLE HIRES
001D7F  3               ;  2=QUAD HIRES
001D7F  3               ;  3=MONO HIRES
001D7F  3               ;  HIRES MODE THIRD PARAMETER
001D7F  3               ;  0=MIXED MODE
001D7F  3               ;  1=FULL SCREEN MODE
001D7F  3               ;
001D7F  3               ; THIS IS NATIVE '816 CODE
001D7F  3               ;__________________________________________________________
001D7F  3               V_SCREEN:
001D7F  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (MODE)
001D82  3               V_SCREEN1:
001D82  3  86 06                STX     <VIDEOMODE
001D84  3  E0 00                CPX     #00
001D86  3  D0 03                BNE     *+5
001D88  3  4C A2 1D             JMP     SETUPMODE0
001D8B  3  E0 01                CPX     #01
001D8D  3  D0 03                BNE     *+5
001D8F  3  4C DA 1D             JMP     SETUPMODE1
001D92  3  E0 02                CPX     #02
001D94  3  D0 03                BNE     *+5
001D96  3  4C 40 1E             JMP     SETUPMODE2
001D99  3               
001D99  3  A2 02                LDX     #$02            ; SYNTAX ERROR
001D9B  3  20 83 26             JSR     LAB_XERR
001D9E  3  4C 5C 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001DA1  3  60                   RTS
001DA2  3               
001DA2  3               SETUPMODE0:                     ; TEXT MODE
001DA2  3  A9 01                LDA     #$01
001DA4  3  8F 35 FE 00          STA     F:VideoTextMode
001DA8  3  A9 02                LDA     #$02
001DAA  3  8F 36 FE 00          STA     F:VideoLoresMode
001DAE  3  8F 38 FE 00          STA     F:VideoHiresMode
001DB2  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001DB5  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001DB8  3  E0 00                CPX     #$00
001DBA  3  D0 0E                BNE     SETUPMODE0_80
001DBC  3  A9 02                LDA     #$02
001DBE  3  8F 3A FE 00          STA     F:Video80col
001DC2  3  A9 28                LDA     #40
001DC4  3  8F 43 03 00          STA     F:VIDEOWIDTH
001DC8  3  80 0C                BRA     SETUPMODE0_CLEAR
001DCA  3               SETUPMODE0_80:
001DCA  3  A9 01                LDA     #$01
001DCC  3  8F 3A FE 00          STA     F:Video80col
001DD0  3  A9 50                LDA     #80
001DD2  3  8F 43 03 00          STA     F:VIDEOWIDTH
001DD6  3               SETUPMODE0_CLEAR:
001DD6  3  4C 33 1D             JMP     V_SCNCLR
001DD9  3  60                   RTS
001DDA  3               
001DDA  3               SETUPMODE1:                     ; LORES MODE
001DDA  3  A9 01                LDA     #$01
001DDC  3  8F 36 FE 00          STA     F:VideoLoresMode
001DE0  3  A9 02                LDA     #$02
001DE2  3  8F 35 FE 00          STA     F:VideoTextMode
001DE6  3  8F 38 FE 00          STA     F:VideoHiresMode
001DEA  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001DED  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001DF0  3               
001DF0  3  E0 00                CPX     #$00
001DF2  3  D0 08                BNE     SETUPMODE1_DOUBLE
001DF4  3  A9 02                LDA     #$02
001DF6  3  8F 37 FE 00          STA     F:VideoDoubleLores
001DFA  3  80 0A                BRA     SETUPMODE1_CLEAR
001DFC  3               SETUPMODE1_DOUBLE:
001DFC  3  A9 01                LDA     #$01
001DFE  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E02  3  A9 11                LDA     #$11
001E04  3  85 06                STA     <VIDEOMODE
001E06  3               SETUPMODE1_CLEAR:
001E06  3  08                   PHP                     ; Clear Lores RAM
001E07  3  8B                   PHB
001E08  3  DA A2 00 DA          SETBANK 0
001E0C  3  AB FA        
001E0E  3  C2 10                INDEX16
001E10  3  A9 00                LDA     #$00
001E12  3  A2 00 00             LDX     #$0000
001E15  3               :
001E15  3  9D 00 20             STA     $2000,X
001E18  3  E8                   INX
001E19  3  E0 00 08             CPX     #$0800
001E1C  3  D0 F7                BNE     :-
001E1E  3  E2 10                INDEX8
001E20  3  AB                   PLB
001E21  3  28                   PLP
001E22  3  20 C3 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001E25  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X
001E28  3  E0 00                CPX     #$00
001E2A  3  D0 07                BNE     SETUPMODE1_MIXED
001E2C  3  A9 02                LDA     #$02
001E2E  3  8F 3B FE 00          STA     F:VideoMixedMode
001E32  3  60                   RTS
001E33  3               SETUPMODE1_MIXED:
001E33  3  A9 01                LDA     #$01
001E35  3  8F 3B FE 00          STA     F:VideoMixedMode
001E39  3  A5 06                LDA     <VIDEOMODE
001E3B  3  09 80                ORA     #$80
001E3D  3  85 06                STA     <VIDEOMODE
001E3F  3  60                   RTS
001E40  3               
001E40  3               
001E40  3               SETUPMODE2:                     ; HIRES MODE
001E40  3  A9 01                LDA     #$01
001E42  3  8F 38 FE 00          STA     F:VideoHiresMode
001E46  3  A9 02                LDA     #$02
001E48  3  8F 35 FE 00          STA     F:VideoTextMode
001E4C  3  8F 36 FE 00          STA     F:VideoLoresMode
001E50  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E53  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001E56  3               
001E56  3  E0 00                CPX     #$00
001E58  3  D0 10                BNE     SETUPMODE2_DOUBLE
001E5A  3  A9 02                LDA     #$02
001E5C  3  8F 39 FE 00          STA     F:VideoDoubleHires
001E60  3  8F 3C FE 00          STA     F:VideoQuadHires
001E64  3  8F 3D FE 00          STA     F:VideoMonoHires
001E68  3  80 48                BRA     SETUPMODE2_CLEAR
001E6A  3               SETUPMODE2_DOUBLE:
001E6A  3  E0 01                CPX     #$01
001E6C  3  D0 16                BNE     SETUPMODE2_QUAD
001E6E  3  A9 01                LDA     #$01
001E70  3  8F 39 FE 00          STA     F:VideoDoubleHires
001E74  3  A9 02                LDA     #$02
001E76  3  8F 3C FE 00          STA     F:VideoQuadHires
001E7A  3  8F 3D FE 00          STA     F:VideoMonoHires
001E7E  3  A9 12                LDA     #$12
001E80  3  85 06                STA     <VIDEOMODE
001E82  3  80 2E                BRA     SETUPMODE2_CLEAR
001E84  3               SETUPMODE2_QUAD:
001E84  3  E0 02                CPX     #$02
001E86  3  D0 16                BNE     SETUPMODE2_MONO
001E88  3  A9 01                LDA     #$01
001E8A  3  8F 3C FE 00          STA     F:VideoQuadHires
001E8E  3  A9 02                LDA     #$02
001E90  3  8F 39 FE 00          STA     F:VideoDoubleHires
001E94  3  8F 3D FE 00          STA     F:VideoMonoHires
001E98  3  A9 22                LDA     #$22
001E9A  3  85 06                STA     <VIDEOMODE
001E9C  3  80 14                BRA     SETUPMODE2_CLEAR
001E9E  3               SETUPMODE2_MONO:
001E9E  3  A9 01                LDA     #$01
001EA0  3  8F 3D FE 00          STA     F:VideoMonoHires
001EA4  3  A9 02                LDA     #$02
001EA6  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EAA  3  8F 3C FE 00          STA     F:VideoQuadHires
001EAE  3  A9 32                LDA     #$32
001EB0  3  85 06                STA     <VIDEOMODE
001EB2  3               
001EB2  3               SETUPMODE2_CLEAR:
001EB2  3  08                   PHP                     ; Clear Hires RAM
001EB3  3  8B                   PHB
001EB4  3  DA A2 00 DA          SETBANK 0
001EB8  3  AB FA        
001EBA  3  C2 10                INDEX16
001EBC  3  A9 00                LDA     #$00
001EBE  3  A2 00 00             LDX     #$0000
001EC1  3               :
001EC1  3  9D 00 20             STA     $2000,X
001EC4  3  E8                   INX
001EC5  3  E0 00 80             CPX     #$8000
001EC8  3  D0 F7                BNE     :-
001ECA  3  E2 10                INDEX8
001ECC  3  AB                   PLB
001ECD  3  28                   PLP
001ECE  3  20 C3 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001ED1  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X
001ED4  3  E0 00                CPX     #$00
001ED6  3  D0 07                BNE     SETUPMODE2_MIXED
001ED8  3  A9 02                LDA     #$02
001EDA  3  8F 3B FE 00          STA     F:VideoMixedMode
001EDE  3  60                   RTS
001EDF  3               SETUPMODE2_MIXED:
001EDF  3  A9 01                LDA     #$01
001EE1  3  8F 3B FE 00          STA     F:VideoMixedMode
001EE5  3  A5 06                LDA     <VIDEOMODE
001EE7  3  09 80                ORA     #$80
001EE9  3  85 06                STA     <VIDEOMODE
001EEB  3  60                   RTS
001EEC  3               
001EEC  3               
001EEC  3               ;___V_PLOT__________________________________________________
001EEC  3               ;
001EEC  3               ;  PLOT ON SCREEN
001EEC  3               ;         TAKES THREE PARAMETERS,  X,Y,COLOR
001EEC  3               ;
001EEC  3               ; THIS IS NATIVE '816 CODE
001EEC  3               ;__________________________________________________________
001EEC  3               V_PLOT:
001EEC  3  A5 06                LDA     <VIDEOMODE
001EEE  3  29 0F                AND     #$0F
001EF0  3  C9 01                CMP     #$01
001EF2  3  F0 13                BEQ     V_PLOT_LORES
001EF4  3  A5 06                LDA     <VIDEOMODE
001EF6  3  29 2F                AND     #$2F
001EF8  3  C9 02                CMP     #$02
001EFA  3  D0 03 4C BD          LBEQ    V_PLOT_HIRES_COLOR
001EFE  3  1F           
001EFF  3  C9 22                CMP     #$22
001F01  3  D0 03 4C 84          LBEQ    V_PLOT_HIRES_MONO
001F05  3  20           
001F06  3  60                   RTS
001F07  3                       V_PLOT_LORES:
001F07  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001F0A  3  8A                   TXA
001F0B  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
001F0F  3  A9 00                LDA     #00
001F11  3  8F 48 03 00          STA     F:TEMPOFFSET+1
001F15  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001F18  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001F1B  3                                               ; FIGURE THE BUFFER OFFSET
001F1B  3  8A                   TXA                     ; GET Y COORD
001F1C  3  48                   PHA                     ; STORE FOR LATER
001F1D  3  4A                   LSR     A               ; THERE ARE TWO ROWS PER BYTE
001F1E  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 40 OR 80 (SINGLE OR DOUBLE LORES)
001F20  3  29 FF 00             AND     #$00FF
001F23  3  8F 45 03 00          STA     F:TEMP
001F27  3  18                   CLC
001F28  3  0A                   ASL     A
001F29  3  0A                   ASL     A
001F2A  3  0A                   ASL     A
001F2B  3  0A                   ASL     A
001F2C  3  0A                   ASL     A
001F2D  3  48                   PHA
001F2E  3  AF 45 03 00          LDA     F:TEMP
001F32  3  18                   CLC
001F33  3  0A                   ASL     A
001F34  3  0A                   ASL     A
001F35  3  0A                   ASL     A
001F36  3  8F 45 03 00          STA     F:TEMP
001F3A  3  68                   PLA
001F3B  3  18                   CLC
001F3C  3  6F 45 03 00          ADC     F:TEMP
001F40  3  8F 45 03 00          STA     F:TEMP
001F44  3               ; if double lores columns double it.
001F44  3  E2 20                ACCUMULATOR8
001F46  3  A5 06                LDA     <VIDEOMODE
001F48  3  29 10                AND     #$10
001F4A  3  C9 00                CMP     #00
001F4C  3  F0 0B                BEQ     :+
001F4E  3  C2 20                ACCUMULATOR16
001F50  3  AF 45 03 00          LDA     F:TEMP
001F54  3  0A                   ASL     A
001F55  3  8F 45 03 00          STA     F:TEMP
001F59  3               :
001F59  3  C2 20                ACCUMULATOR16
001F5B  3  AF 47 03 00          LDA     F:TEMPOFFSET
001F5F  3  18                   CLC
001F60  3  6F 45 03 00          ADC     F:TEMP
001F64  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
001F68  3  E2 30                ACCUMULATORINDEX8
001F6A  3  20 C3 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001F6D  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
001F70  3  8A                   TXA
001F71  3  29 0F                AND     #$0F
001F73  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
001F77  3  68                   PLA
001F78  3  4A                   LSR     A               ; TOP OR BOTTOM PIXEL?
001F79  3  90 28                BCC     :+
001F7B  3                                               ; TOP PIXEL
001F7B  3  C2 30                ACCUMULATORINDEX16
001F7D  3  AF 47 03 00          LDA     F:TEMPOFFSET
001F81  3  AA                   TAX
001F82  3  E2 20                ACCUMULATOR8
001F84  3  BF 00 20 00          LDA     F:$2000,X
001F88  3  29 0F                AND     #$0F
001F8A  3  48                   PHA
001F8B  3  AF 45 03 00          LDA     F:TEMP
001F8F  3  0A                   ASL     A
001F90  3  0A                   ASL     A
001F91  3  0A                   ASL     A
001F92  3  0A                   ASL     A
001F93  3  8F 45 03 00          STA     F:TEMP
001F97  3  68                   PLA
001F98  3  0F 45 03 00          ORA     F:TEMP
001F9C  3  9F 00 20 00          STA     F:$2000,X
001FA0  3  E2 30                ACCUMULATORINDEX8
001FA2  3  60                   RTS
001FA3  3               :
001FA3  3               ; BOTTOM PIXEL
001FA3  3  C2 30                ACCUMULATORINDEX16
001FA5  3  AF 47 03 00          LDA     F:TEMPOFFSET
001FA9  3  AA                   TAX
001FAA  3  E2 20                ACCUMULATOR8
001FAC  3  BF 00 20 00          LDA     F:$2000,X
001FB0  3  29 F0                AND     #$F0
001FB2  3  0F 45 03 00          ORA     F:TEMP
001FB6  3  9F 00 20 00          STA     F:$2000,X
001FBA  3  E2 30                ACCUMULATORINDEX8
001FBC  3  60                   RTS
001FBD  3               V_PLOT_HIRES_COLOR:
001FBD  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001FC0  3  8A                   TXA
001FC1  3  48                   PHA
001FC2  3  4A                   LSR     A               ; 2 PIXEL PER BYTE
001FC3  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
001FC7  3  A9 00                LDA     #00
001FC9  3  8F 48 03 00          STA     F:TEMPOFFSET+1
001FCD  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001FD0  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001FD3  3                                               ; FIGURE THE BUFFER OFFSET
001FD3  3  8A                   TXA                     ; GET Y COORD
001FD4  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 70 OR 140 (SINGLE OR DOUBLE HIRES)
001FD6  3  29 FF 00             AND     #$00FF
001FD9  3  8F 45 03 00          STA     F:TEMP
001FDD  3  18                   CLC
001FDE  3  0A                   ASL     A
001FDF  3  0A                   ASL     A
001FE0  3  0A                   ASL     A
001FE1  3  0A                   ASL     A
001FE2  3  0A                   ASL     A
001FE3  3  0A                   ASL     A
001FE4  3  48                   PHA
001FE5  3  AF 45 03 00          LDA     F:TEMP
001FE9  3  18                   CLC
001FEA  3  0A                   ASL     A
001FEB  3  0A                   ASL     A
001FEC  3  48                   PHA
001FED  3  AF 45 03 00          LDA     F:TEMP
001FF1  3  18                   CLC
001FF2  3  0A                   ASL     A
001FF3  3  8F 45 03 00          STA     F:TEMP
001FF7  3  68                   PLA
001FF8  3  18                   CLC
001FF9  3  6F 45 03 00          ADC     F:TEMP
001FFD  3  8F 45 03 00          STA     F:TEMP
002001  3  68                   PLA
002002  3  18                   CLC
002003  3  6F 45 03 00          ADC     F:TEMP
002007  3  8F 45 03 00          STA     F:TEMP
00200B  3               ; if double hires double it.
00200B  3  E2 20                ACCUMULATOR8
00200D  3  A5 06                LDA     <VIDEOMODE
00200F  3  29 10                AND     #$10
002011  3  C9 00                CMP     #00
002013  3  F0 0B                BEQ     :+
002015  3  C2 20                ACCUMULATOR16
002017  3  AF 45 03 00          LDA     F:TEMP
00201B  3  0A                   ASL     A
00201C  3  8F 45 03 00          STA     F:TEMP
002020  3               :
002020  3  C2 20                ACCUMULATOR16
002022  3  AF 47 03 00          LDA     F:TEMPOFFSET
002026  3  18                   CLC
002027  3  6F 45 03 00          ADC     F:TEMP
00202B  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
00202F  3  E2 30                ACCUMULATORINDEX8
002031  3  20 C3 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
002034  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
002037  3  8A                   TXA
002038  3  29 0F                AND     #$0F
00203A  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
00203E  3  68                   PLA
00203F  3  4A                   LSR     A               ; LEFT OR RIGHT PIXEL?
002040  3  90 28                BCC     :+
002042  3                                               ; LEFT PIXEL
002042  3  C2 30                ACCUMULATORINDEX16
002044  3  AF 47 03 00          LDA     F:TEMPOFFSET
002048  3  AA                   TAX
002049  3  E2 20                ACCUMULATOR8
00204B  3  BF 00 20 00          LDA     F:$2000,X
00204F  3  29 0F                AND     #$0F
002051  3  48                   PHA
002052  3  AF 45 03 00          LDA     F:TEMP
002056  3  0A                   ASL     A
002057  3  0A                   ASL     A
002058  3  0A                   ASL     A
002059  3  0A                   ASL     A
00205A  3  8F 45 03 00          STA     F:TEMP
00205E  3  68                   PLA
00205F  3  0F 45 03 00          ORA     F:TEMP
002063  3  9F 00 20 00          STA     F:$2000,X
002067  3  E2 30                ACCUMULATORINDEX8
002069  3  60                   RTS
00206A  3               :
00206A  3               ; RIGHT PIXEL
00206A  3  C2 30                ACCUMULATORINDEX16
00206C  3  AF 47 03 00          LDA     F:TEMPOFFSET
002070  3  AA                   TAX
002071  3  E2 20                ACCUMULATOR8
002073  3  BF 00 20 00          LDA     F:$2000,X
002077  3  29 F0                AND     #$F0
002079  3  0F 45 03 00          ORA     F:TEMP
00207D  3  9F 00 20 00          STA     F:$2000,X
002081  3  E2 30                ACCUMULATORINDEX8
002083  3  60                   RTS
002084  3               
002084  3               V_PLOT_HIRES_MONO:
002084  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
002087  3  8A                   TXA
002088  3  48                   PHA
002089  3  4A                   LSR     A               ; 8 PIXEL PER BYTE
00208A  3  4A                   LSR     A
00208B  3  4A                   LSR     A
00208C  3               
00208C  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
002090  3  A9 00                LDA     #00
002092  3  8F 48 03 00          STA     F:TEMPOFFSET+1
002096  3  20 C3 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
002099  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
00209C  3                                               ; FIGURE THE BUFFER OFFSET
00209C  3  8A                   TXA                     ; GET Y COORD
00209D  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 35 OR 70 (MONO OR QUAD HIRES)
00209F  3  29 FF 00             AND     #$00FF
0020A2  3  8F 45 03 00          STA     F:TEMP
0020A6  3  18                   CLC
0020A7  3  0A                   ASL     A
0020A8  3  0A                   ASL     A
0020A9  3  0A                   ASL     A
0020AA  3  0A                   ASL     A
0020AB  3  0A                   ASL     A
0020AC  3  48                   PHA
0020AD  3  AF 45 03 00          LDA     F:TEMP
0020B1  3  18                   CLC
0020B2  3  0A                   ASL     A
0020B3  3  18                   CLC
0020B4  3  6F 45 03 00          ADC     F:TEMP
0020B8  3  8F 45 03 00          STA     F:TEMP
0020BC  3  68                   PLA
0020BD  3  18                   CLC
0020BE  3  6F 45 03 00          ADC     F:TEMP
0020C2  3  8F 45 03 00          STA     F:TEMP
0020C6  3               ; if quad hires double it.
0020C6  3  E2 20                ACCUMULATOR8
0020C8  3  A5 06                LDA     <VIDEOMODE
0020CA  3  29 10                AND     #$10
0020CC  3  C9 00                CMP     #00
0020CE  3  D0 0B                BNE     :+
0020D0  3  C2 20                ACCUMULATOR16
0020D2  3  AF 45 03 00          LDA     F:TEMP
0020D6  3  0A                   ASL     A
0020D7  3  8F 45 03 00          STA     F:TEMP
0020DB  3               :
0020DB  3  C2 20                ACCUMULATOR16
0020DD  3  AF 47 03 00          LDA     F:TEMPOFFSET
0020E1  3  18                   CLC
0020E2  3  6F 45 03 00          ADC     F:TEMP
0020E6  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
0020EA  3  E2 30                ACCUMULATORINDEX8
0020EC  3  20 C3 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
0020EF  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
0020F2  3  8A                   TXA
0020F3  3  29 01                AND     #$01
0020F5  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
0020F9  3  68                   PLA
0020FA  3  29 07                AND     #$07            ; WHICH BIT?
0020FC  3  AA                   TAX
0020FD  3  AF 45 03 00          LDA     F:TEMP
002101  3  C9 01                CMP     #$01
002103  3  D0 1A                BNE     :+
002105  3  BF 39 21 FF          LDA     F:HIRES_BIT_LOOKUP_SET,X
002109  3  48                   PHA
00210A  3  C2 30                ACCUMULATORINDEX16
00210C  3  AF 47 03 00          LDA     F:TEMPOFFSET
002110  3  AA                   TAX
002111  3  E2 20                ACCUMULATOR8
002113  3  68                   PLA
002114  3  1F 00 20 00          ORA     F:$2000,X
002118  3  9F 00 20 00          STA     F:$2000,X
00211C  3  E2 10                INDEX8
00211E  3  60                   RTS
00211F  3               :
00211F  3  BF 41 21 FF          LDA     F:HIRES_BIT_LOOKUP_RESET,X
002123  3  48                   PHA
002124  3  C2 30                ACCUMULATORINDEX16
002126  3  AF 47 03 00          LDA     F:TEMPOFFSET
00212A  3  AA                   TAX
00212B  3  E2 20                ACCUMULATOR8
00212D  3  68                   PLA
00212E  3  3F 00 20 00          AND     F:$2000,X
002132  3  9F 00 20 00          STA     F:$2000,X
002136  3  E2 10                INDEX8
002138  3  60                   RTS
002139  3               HIRES_BIT_LOOKUP_S:
002139  3  80 40 20 10          .BYTE   %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001
00213D  3  08 04 02 01  
002141  3               HIRES_BIT_LOOKUP_R:
002141  3  7F BF DF EF          .BYTE   %01111111,%10111111,%11011111,%11101111,%11110111,%11111011,%11111101,%11111110
002145  3  F7 FB FD FE  
002149  3               HIRES_BIT_LOOKUP_SET = (PROGRAMBANK*$10000)+HIRES_BIT_LOOKUP_S
002149  3               HIRES_BIT_LOOKUP_RESET =    (PROGRAMBANK*$10000)+HIRES_BIT_LOOKUP_R
002149  3               
002149  3               ;___V_PATTERN________________________________________________
002149  3               ;
002149  3               ;  DEFINE GRAPHICS PATTERN
002149  3               ;
002149  3               ;  TAKES 10 PARAMETERS
002149  3               ;       PATTERN NUM (0-255)
002149  3               ;       PATTERN DATA (8 BYTES)
002149  3               ; THIS IS NATIVE '816 CODE
002149  3               ;__________________________________________________________
002149  3               V_PATTERN:
002149  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
00214C  3  8A                   TXA
00214D  3  8F 32 FE 00          STA     f:VideoCharGenOffset
002151  3  A0 08                LDY     #8
002153  3               :
002153  3  5A                   PHY
002154  3  20 C3 32             JSR     LAB_1C01        ; GET THE NEXT PARAMETER (AFTER ',') OR SYN ERR
002157  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE NEXT PARAMETER, RETURN IN X
00215A  3  7A                   PLY
00215B  3  8A                   TXA
00215C  3  8F 33 FE 00          STA     f:VideoCharGenData
002160  3  88                   DEY
002161  3  C0 00                CPY     #$00
002163  3  D0 EE                BNE     :-
002165  3  60                   RTS
002166  3               
002166  2                       .INCLUDE "ay38910.asm"
002166  3               via1regb        = $FE10         ; Register
002166  3               via1rega        = $FE11         ; Register
002166  3               via1ddrb        = $FE12         ; Register
002166  3               via1ddra        = $FE13         ; Register
002166  3               via1t1cl        = $FE14         ; Register
002166  3               via1t1ch        = $FE15         ; Register
002166  3               via1t1ll        = $FE16         ; Register
002166  3               via1t1lh        = $FE17         ; Register
002166  3               via1t2cl        = $FE18         ; Register
002166  3               via1t2ch        = $FE19         ; Register
002166  3               via1sr          = $FE1A         ; Register
002166  3               via1acr         = $FE1B         ; Register
002166  3               via1pcr         = $FE1C         ; Register
002166  3               via1ifr         = $FE1D         ; Register
002166  3               via1ier         = $FE1E         ; Register
002166  3               via1ora         = $FE1F         ; Register
002166  3               
002166  3               
002166  3               
002166  3               ;___SOUND__________________________________________________
002166  3               ;
002166  3               ; PLAY SOUND
002166  3               ;
002166  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
002166  3               ;
002166  3               ; THIS IS NATIVE '816 CODE
002166  3               ;__________________________________________________________
002166  3               V_SOUND:
002166  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
002169  3  DA                   PHX
00216A  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
00216D  3  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002170  3               ; else do type mismatch
002170  3  20 E1 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
002173  3               
002173  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
002174  3  29 03                AND     #$03
002176  3  18                   CLC
002177  3  0A                   ASL                     ; = *2
002178  3  48                   PHA
002179  3  A4 11                LDY     <Itempl
00217B  3  20 A0 22             JSR     psgwr           ; SET LOW BYTE
00217E  3  68                   PLA
00217F  3  1A                   INC     A
002180  3  A4 12                LDY     <Itemph
002182  3  20 A0 22             JSR     psgwr           ; SET HIGH BYTE
002185  3  60                   RTS
002186  3               
002186  3               ;___VOLUME__________________________________________________
002186  3               ;
002186  3               ; SET VOLUME
002186  3               ;
002186  3               ;  TAKES TWO PARAMETERS CHANNEL,VOLUME
002186  3               ;
002186  3               ; THIS IS NATIVE '816 CODE
002186  3               ;__________________________________________________________
002186  3               V_VOLUME:
002186  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
002189  3  DA                   PHX
00218A  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
00218D  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (VOLUME)
002190  3  9B                   TXY
002191  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
002192  3  29 03                AND     #$03
002194  3               
002194  3  18                   CLC
002195  3  69 08                ADC     #08
002197  3  20 A0 22             JSR     psgwr
00219A  3  60                   RTS
00219B  3               
00219B  3               
00219B  3               ;___VOICE__________________________________________________
00219B  3               ;
00219B  3               ; SET VOICE
00219B  3               ;
00219B  3               ;  TAKES TWO PARAMETERS VOICE, ENVELOPE
00219B  3               ;
00219B  3               ; THIS IS NATIVE '816 CODE
00219B  3               ;__________________________________________________________
00219B  3               V_VOICE:
00219B  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
00219E  3  DA                   PHX
00219F  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021A2  3  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0021A5  3               ; else do type mismatch
0021A5  3  20 E1 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
0021A8  3  7A                   PLY
0021A9  3  A9 0D                LDA     #13
0021AB  3  20 A0 22             JSR     psgwr
0021AE  3               
0021AE  3  A9 0B                LDA     #11
0021B0  3  A4 11                LDY     <Itempl
0021B2  3  20 A0 22             JSR     psgwr           ; SET LOW BYTE
0021B5  3  A9 0C                LDA     #12
0021B7  3  A4 12                LDY     <Itemph         ; SET HIGH BYTE
0021B9  3  20 A0 22             JSR     psgwr
0021BC  3               
0021BC  3  60                   RTS
0021BD  3               
0021BD  3               
0021BD  3               
0021BD  3               
0021BD  3               
0021BD  3               ;___NOISE__________________________________________________
0021BD  3               ;
0021BD  3               ; SELECT NOISE CHANNEL
0021BD  3               ;
0021BD  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
0021BD  3               ;
0021BD  3               ; THIS IS NATIVE '816 CODE
0021BD  3               ;__________________________________________________________
0021BD  3               V_NOISE:
0021BD  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021C0  3  DA                   PHX
0021C1  3  20 C3 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021C4  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (FREQ)
0021C7  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
0021C8  3  DA                   PHX
0021C9  3  AA                   TAX
0021CA  3               
0021CA  3  29 1F                AND     #%00011111
0021CC  3  A8                   TAY
0021CD  3  A9 06                LDA     #$06
0021CF  3  20 A0 22             JSR     psgwr           ; SET NOISE FREQ
0021D2  3               
0021D2  3  A9 07                LDA     #$07
0021D4  3  20 5E 22             JSR     psgrd           ; GET CONFIG
0021D7  3  68                   PLA
0021D8  3  5A                   PHY
0021D9  3  29 03                AND     #$03
0021DB  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
0021DC  3  68                   PLA
0021DD  3  E0 00                CPX     #$00
0021DF  3  D0 06                BNE     NOISE_1
0021E1  3  29 37                AND     #%00110111
0021E3  3  09 01                ORA     #%00000001
0021E5  3  80 0E                BRA     NOISE_3
0021E7  3               NOISE_1:
0021E7  3  E0 01                CPX     #$01
0021E9  3  D0 06                BNE     NOISE_2
0021EB  3  29 2F                AND     #%00101111
0021ED  3  09 02                ORA     #%00000010
0021EF  3  80 04                BRA     NOISE_3
0021F1  3               NOISE_2:
0021F1  3  29 1F                AND     #%00011111
0021F3  3  09 04                ORA     #%00000100
0021F5  3               NOISE_3:
0021F5  3  A8                   TAY
0021F6  3  A9 07                LDA     #$07
0021F8  3  20 A0 22             JSR     psgwr           ; SET LOW BYTE
0021FB  3  60                   RTS
0021FC  3               
0021FC  3               ;___TONE___________________________________________________
0021FC  3               ;
0021FC  3               ; SELECT TONE CHANNEL
0021FC  3               ;
0021FC  3               ;  TAKES ONE PARAMETER CHANNEL
0021FC  3               ;
0021FC  3               ; THIS IS NATIVE '816 CODE
0021FC  3               ;__________________________________________________________
0021FC  3               V_TONE:
0021FC  3  20 3D 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021FF  3  DA                   PHX
002200  3               
002200  3  A9 07                LDA     #$07
002202  3  20 5E 22             JSR     psgrd           ; GET CONFIG
002205  3  68                   PLA
002206  3  5A                   PHY
002207  3  29 03                AND     #$03
002209  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
00220A  3  68                   PLA
00220B  3  E0 00                CPX     #$00
00220D  3  D0 06                BNE     TONE_1
00220F  3  29 3E                AND     #%00111110
002211  3  09 08                ORA     #%00001000
002213  3  80 0E                BRA     TONE_3
002215  3               TONE_1:
002215  3  E0 01                CPX     #$01
002217  3  D0 06                BNE     TONE_2
002219  3  29 3D                AND     #%00111101
00221B  3  09 10                ORA     #%00010000
00221D  3  80 04                BRA     TONE_3
00221F  3               TONE_2:
00221F  3  29 3B                AND     #%00111011
002221  3  09 20                ORA     #%00100000
002223  3               TONE_3:
002223  3  A8                   TAY
002224  3  A9 07                LDA     #$07
002226  3  20 A0 22             JSR     psgwr           ; SET LOW BYTE
002229  3  60                   RTS
00222A  3               
00222A  3               
00222A  3               ;___CONTROLLER_______________________________________________
00222A  3               ;
00222A  3               ; GET JOYTICK STATUS
00222A  3               ;
00222A  3               ;  TAKES ONE PARAMETERS JOYSTICK#, RETURNS STATUS
00222A  3               ;
00222A  3               ; THIS IS NATIVE '816 CODE
00222A  3               ;__________________________________________________________
00222A  3               LAB_CON:
00222A  3  20 E1 3E             JSR     LAB_F2FX        ; GET THE PARAMETER, RETURN IN X (controller#)
00222D  3  A5 11                LDA     <Itempl
00222F  3  29 01                AND     #$01
002231  3  18                   CLC
002232  3  69 0E                ADC     #14
002234  3  20 5E 22             JSR     psgrd           ; return value in y
002237  3  4C 69 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
00223A  3               
00223A  3               
00223A  3               
00223A  3               
00223A  3               ;___utility functions____________________________________________
00223A  3               psginit:
00223A  3  A9 9C                LDA     #%10011100
00223C  3  8F 13 FE 00          STA     f:via1ddra
002240  3  A9 10                LDA     #%00010000
002242  3  8F 11 FE 00          STA     f:via1rega
002246  3  A9 FF                LDA     #$FF
002248  3  8F 12 FE 00          STA     f:via1ddrb
00224C  3  A9 00                LDA     #$00
00224E  3  8F 10 FE 00          STA     f:via1regb
002252  3  60                   RTS
002253  3  20 E2 22             JSR     clrpsg
002256  3               
002256  3  A9 07                LDA     #7
002258  3  A0 3F                LDY     #$3F
00225A  3  20 A0 22             JSR     psgwr
00225D  3  60                   RTS
00225E  3               
00225E  3               psgrd:
00225E  3  8F 10 FE 00          STA     f:via1regb      ; select register
002262  3  A9 1C                LDA     #%00011100      ; latch address
002264  3  8F 11 FE 00          STA     f:via1rega
002268  3               
002268  3  8F 11 FE 00          STA     f:via1rega
00226C  3  8F 11 FE 00          STA     f:via1rega
002270  3               
002270  3  A9 10                LDA     #%00010000      ; inact
002272  3  8F 11 FE 00          STA     f:via1rega
002276  3               
002276  3  8F 11 FE 00          STA     f:via1rega
00227A  3               
00227A  3  A9 00                LDA     #$00
00227C  3  8F 12 FE 00          STA     f:via1ddrb
002280  3  A9 18                LDA     #%00011000      ; latch data
002282  3  8F 11 FE 00          STA     f:via1rega
002286  3               
002286  3  8F 11 FE 00          STA     f:via1rega
00228A  3  8F 11 FE 00          STA     f:via1rega
00228E  3               
00228E  3  AF 10 FE 00          LDA     f:via1regb      ; get data
002292  3  A8                   TAY
002293  3  A9 FF                LDA     #$FF
002295  3  8F 12 FE 00          STA     f:via1ddrb
002299  3  A9 10                LDA     #%00010000      ; inact
00229B  3  8F 11 FE 00          STA     f:via1rega
00229F  3  60                   RTS
0022A0  3               
0022A0  3               
0022A0  3               psgwr:
0022A0  3  8F 10 FE 00          STA     f:via1regb      ; select register
0022A4  3  A9 1C                LDA     #%00011100      ; latch address
0022A6  3  8F 11 FE 00          STA     f:via1rega
0022AA  3               
0022AA  3  8F 11 FE 00          STA     f:via1rega
0022AE  3  8F 11 FE 00          STA     f:via1rega
0022B2  3               
0022B2  3  A9 10                LDA     #%00010000      ; inact
0022B4  3  8F 11 FE 00          STA     f:via1rega
0022B8  3               
0022B8  3  8F 11 FE 00          STA     f:via1rega
0022BC  3  8F 11 FE 00          STA     f:via1rega
0022C0  3  98                   TYA
0022C1  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022C5  3               
0022C5  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022C9  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022CD  3               
0022CD  3  A9 14                LDA     #%00010100      ; latch data
0022CF  3  8F 11 FE 00          STA     f:via1rega
0022D3  3               
0022D3  3  8F 11 FE 00          STA     f:via1rega
0022D7  3  8F 11 FE 00          STA     f:via1rega
0022DB  3               
0022DB  3  A9 10                LDA     #%00010000      ; inact
0022DD  3  8F 11 FE 00          STA     f:via1rega
0022E1  3  60                   RTS
0022E2  3               
0022E2  3               ;
0022E2  3               ; Clear PSG registers to default
0022E2  3               ;
0022E2  3               clrpsg:
0022E2  3  DA 5A 48 08          STORECONTEXT
0022E6  3  E2 30                ACCUMULATORINDEX8
0022E8  3  A2 00                LDX     #00
0022EA  3  A0 00                LDY     #00
0022EC  3               clrpsg1:
0022EC  3  8A                   TXA
0022ED  3  20 A0 22             JSR     psgwr           ; set register X to 0
0022F0  3  E8                   INX
0022F1  3  E0 11                CPX     #17
0022F3  3  D0 F7                BNE     clrpsg1
0022F5  3  28 68 7A FA          RESTORECONTEXT
0022F9  3  60                   RTS
0022FA  3               
0022FA  2               
0022FA  2               
0022FA  2               
0022FA  2               ;___TitleScreen_____________________________________________
0022FA  2               ;
0022FA  2               ; Basic Title Screen
0022FA  2               ;
0022FA  2               ; THIS IS NATIVE '816 CODE
0022FA  2               ;__________________________________________________________
0022FA  2               TitleScreen:
0022FA  2  20 3A 22             JSR     psginit
0022FD  2               
0022FD  2  A9 00                LDA     #0
0022FF  2  85 06                STA     <VIDEOMODE
002301  2               
002301  2  AF 41 03 00          LDA     f:ConsoleDevice
002305  2  C9 00                CMP     #$00
002307  2  D0 08                BNE     TitleScreen_1
002309  2  A9 00                LDA     #<LAB_SMSG1     ; point to sign-on message (low addr)
00230B  2  A0 16                LDY     #>LAB_SMSG1     ; point to sign-on message (high addr)
00230D  2  20 24 2F             JSR     LAB_18C3        ; print null terminated string from memory
002310  2  60                   RTS
002311  2               TitleScreen_1:
002311  2  A9 9E                LDA     #$9E
002313  2  22 18 FD 00          JSL     LSetColorVEC
002317  2  22 6C FD 00          JSL     LClearScrVec
00231B  2  A9 AD                LDA     #<LAB_CONMSG    ; point to sign-on message (low addr)
00231D  2  A0 15                LDY     #>LAB_CONMSG    ; point to sign-on message (high addr)
00231F  2  20 24 2F             JSR     LAB_18C3        ; print null terminated string from memory
002322  2  60                   RTS
002323  2               
002323  2               ;___ScreenEditor____________________________________________
002323  2               ;
002323  2               ; Basic Screen editor code
002323  2               ;
002323  2               ; THIS IS NATIVE '816 CODE
002323  2               ;__________________________________________________________
002323  2               ScreenEditor:
002323  2  48                   PHA
002324  2  DA                   PHX
002325  2  5A                   PHY
002326  2  08                   PHP
002327  2  8B                   PHB
002328  2  E2 30                ACCUMULATORINDEX8
00232A  2               ; allow prepopulate of screen
00232A  2               ploop:
00232A  2  22 1C FD 00          JSL     LCURSORVEC
00232E  2  22 08 FD 00          JSL     LINPWVEC
002332  2  C9 FF                CMP     #$FF
002334  2  F0 F4                BEQ     ploop
002336  2  22 20 FD 00          JSL     LUNCURSORVEC
00233A  2  C9 01                CMP     #01
00233C  2  F0 21                BEQ     crsrup
00233E  2  C9 02                CMP     #02
002340  2  F0 30                BEQ     crsrdn
002342  2  C9 1F                CMP     #$1f
002344  2  F0 53                BEQ     crsrlt
002346  2  C9 04                CMP     #$04
002348  2  D0 03 4C CD          LBEQ    crsrrt
00234C  2  23           
00234D  2  C9 0A                CMP     #$0A
00234F  2  F0 D9                BEQ     ploop
002351  2  C9 0D                CMP     #13
002353  2  D0 03 4C EC          LBEQ    pexit
002357  2  23           
002358  2               
002358  2  22 00 FD 00          JSL     LPRINTVEC
00235C  2  4C 2A 23             JMP     ploop
00235F  2               
00235F  2               crsrup:
00235F  2  AF 31 03 00          LDA     F:CSRY
002363  2  C9 00                CMP     #00
002365  2  F0 C3                BEQ     ploop
002367  2  AF 31 03 00          LDA     F:CSRY
00236B  2  3A                   DEC     A
00236C  2  8F 31 03 00          STA     F:CSRY
002370  2  80 B8                BRA     ploop
002372  2               crsrdn:
002372  2  AF 31 03 00          LDA     F:CSRY
002376  2  C9 17                CMP     #23
002378  2  F0 0B                BEQ     crsrdn_1
00237A  2  AF 31 03 00          LDA     F:CSRY
00237E  2  1A                   INC     A
00237F  2  8F 31 03 00          STA     F:CSRY
002383  2  80 A5                BRA     ploop
002385  2               crsrdn_1:
002385  2  AF 30 03 00          LDA     F:CSRX
002389  2  48                   PHA
00238A  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00238E  2  22 14 FD 00          JSL     LSrlUpVEC
002392  2  68                   PLA
002393  2  8F 30 03 00          STA     F:CSRX
002397  2  80 91                BRA     ploop
002399  2               crsrlt:
002399  2  AF 30 03 00          LDA     F:CSRX
00239D  2  C9 00                CMP     #00
00239F  2  F0 0C                BEQ     crsrlt_1
0023A1  2  AF 30 03 00          LDA     F:CSRX
0023A5  2  3A                   DEC     A
0023A6  2  8F 30 03 00          STA     F:CSRX
0023AA  2  4C 2A 23             JMP     ploop
0023AD  2               crsrlt_1:
0023AD  2  AF 31 03 00          LDA     F:CSRY
0023B1  2  C9 00                CMP     #00
0023B3  2  D0 03 4C 2A          LBEQ    ploop
0023B7  2  23           
0023B8  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0023BC  2  3A                   DEC     A
0023BD  2  8F 30 03 00          STA     F:CSRX
0023C1  2  AF 31 03 00          LDA     F:CSRY
0023C5  2  3A                   DEC     A
0023C6  2  8F 31 03 00          STA     F:CSRY
0023CA  2  4C 2A 23             JMP     ploop
0023CD  2               crsrrt:
0023CD  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0023D1  2  3A                   DEC     A
0023D2  2  CF 30 03 00          CMP     F:CSRX
0023D6  2  F0 0C                BEQ     crsrrt_1
0023D8  2  AF 30 03 00          LDA     F:CSRX
0023DC  2  1A                   INC     A
0023DD  2  8F 30 03 00          STA     F:CSRX
0023E1  2  4C 2A 23             JMP     ploop
0023E4  2               crsrrt_1:
0023E4  2  A9 00                LDA     #00
0023E6  2  8F 30 03 00          STA     F:CSRX
0023EA  2  80 86                BRA     crsrdn
0023EC  2               pexit:
0023EC  2  20 1C 24             JSR     LdKbBuffer
0023EF  2  A2 50                LDX     #80
0023F1  2  A9 00                LDA     #$00
0023F3  2  9F 81 21 02          STA     f:LIbuffs,X
0023F7  2               TERMLOOP:
0023F7  2  CA                   DEX
0023F8  2  BF 81 21 02          LDA     f:LIbuffs,X
0023FC  2  C9 20                CMP     #32
0023FE  2  F0 06                BEQ     TERMLOOP_B
002400  2  C9 00                CMP     #00
002402  2  F0 08                BEQ     TERMLOOP_C
002404  2  80 0A                BRA     TERMLOOP_A
002406  2               TERMLOOP_B:
002406  2  A9 00                LDA     #00
002408  2  9F 81 21 02          STA     f:LIbuffs,X
00240C  2               TERMLOOP_C:
00240C  2  E0 00                CPX     #00
00240E  2  D0 E7                BNE     TERMLOOP
002410  2               TERMLOOP_A:
002410  2  A9 0D                LDA     #13
002412  2  22 00 FD 00          JSL     LPRINTVEC
002416  2  AB                   PLB
002417  2  28                   PLP
002418  2  7A                   PLY
002419  2  FA                   PLX
00241A  2  68                   PLA
00241B  2  60                   RTS
00241C  2               
00241C  2               
00241C  2               LdKbBuffer:
00241C  2               ; clear input buffer
00241C  2  A2 51                LDX     #81
00241E  2               :
00241E  2  A9 00                LDA     #00
002420  2  9F 80 21 02          STA     f:LIbuffs-1,X
002424  2  CA                   DEX
002425  2  D0 F7                BNE     :-
002427  2               
002427  2               ; Let's calculate the screen memory offset and store it
002427  2  20 AD 24             JSR     GetVideoAddressOffset
00242A  2               
00242A  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00242E  2  C9 28                CMP     #40
002430  2  F0 03                BEQ     :+
002432  2  4C 7C 24             JMP     LdKbBuffer_1c
002435  2               :
002435  2               ; are we on the first line?  If so, we know it is not continued from the previous line
002435  2  AF 31 03 00          LDA     F:CSRY
002439  2  A8                   TAY
00243A  2  C0 00                CPY     #$00
00243C  2  F0 27                BEQ     LdKbBuffer_1
00243E  2               ; if prior line linked  set y-1
00243E  2  C2 30                ACCUMULATORINDEX16
002440  2  AF 47 03 00          LDA     f:TEMPOFFSET
002444  2  AA                   TAX
002445  2  E2 20                ACCUMULATOR8
002447  2  BF FF 0F 00          LDA     F:$0FFF,X
00244B  2  E2 10                INDEX8
00244D  2  C9 20                CMP     #$20
00244F  2  F0 14                BEQ     LdKbBuffer_1
002451  2  C2 20                ACCUMULATOR16
002453  2  AF 47 03 00          LDA     f:TEMPOFFSET
002457  2  38                   SEC
002458  2  E9 28 00             SBC     #40
00245B  2  8F 47 03 00          STA     f:TEMPOFFSET
00245F  2  E2 20                ACCUMULATOR8
002461  2  A9 51                LDA     #81             ; get 80 chars
002463  2  80 1D                BRA     LdKbBuffer_1b
002465  2               ; get chars; 40 if last line char=32, 80 if not
002465  2               
002465  2               LdKbBuffer_1:
002465  2               ; is this the last line on the screen?
002465  2  C0 17                CPY     #23
002467  2  F0 17                BEQ     LdKbBuffer_1a
002469  2               ; if current line linked carries to the next set size to 80
002469  2  C2 30                ACCUMULATORINDEX16
00246B  2  AF 47 03 00          LDA     f:TEMPOFFSET
00246F  2  AA                   TAX
002470  2  E2 20                ACCUMULATOR8
002472  2  BF 27 10 00          LDA     F:$1027,X
002476  2  E2 10                INDEX8
002478  2  C9 20                CMP     #$20
00247A  2  F0 04                BEQ     LdKbBuffer_1a
00247C  2               LdKbBuffer_1c:
00247C  2  A9 51                LDA     #81             ; get 80 chars
00247E  2  80 02                BRA     LdKbBuffer_1b
002480  2               LdKbBuffer_1a:
002480  2  A9 29                LDA     #41             ; get 40 chars
002482  2               LdKbBuffer_1b:
002482  2  C2 30                ACCUMULATORINDEX16
002484  2  29 FF 00             AND     #$00FF
002487  2  A8                   TAY
002488  2  AF 47 03 00          LDA     f:TEMPOFFSET
00248C  2  AA                   TAX
00248D  2  A9 00 00             LDA     #$0000
002490  2  85 07                STA     <LOCALWORK
002492  2  E2 20                ACCUMULATOR8
002494  2               LdKbBuffer_2:
002494  2  BF 00 10 00          LDA     f:$1000,X
002498  2  DA                   PHX
002499  2  A6 07                LDX     <LOCALWORK
00249B  2  9F 81 21 02          STA     f:LIbuffs,X
00249F  2  E8                   INX
0024A0  2  86 07                STX     <LOCALWORK
0024A2  2  FA                   PLX
0024A3  2  E8                   INX
0024A4  2  88                   DEY
0024A5  2  C0 00 00             CPY     #0000
0024A8  2  D0 EA                BNE     LdKbBuffer_2
0024AA  2  E2 30                ACCUMULATORINDEX8
0024AC  2  60                   RTS
0024AD  2               
0024AD  2               .I8
0024AD  2               .A8
0024AD  2               GetVideoAddressOffset:
0024AD  2  AF 31 03 00          LDA     F:CSRY
0024B1  2  C2 30                ACCUMULATORINDEX16
0024B3  2  29 FF 00             AND     #$00FF
0024B6  2  8F 45 03 00          STA     F:TEMP
0024BA  2  18                   CLC
0024BB  2  0A                   ASL     A
0024BC  2  0A                   ASL     A
0024BD  2  0A                   ASL     A
0024BE  2  0A                   ASL     A
0024BF  2  0A                   ASL     A
0024C0  2  48                   PHA
0024C1  2  AF 45 03 00          LDA     F:TEMP
0024C5  2  18                   CLC
0024C6  2  0A                   ASL     A
0024C7  2  0A                   ASL     A
0024C8  2  0A                   ASL     A
0024C9  2  8F 45 03 00          STA     F:TEMP
0024CD  2  68                   PLA
0024CE  2  18                   CLC
0024CF  2  6F 45 03 00          ADC     F:TEMP
0024D3  2  8F 47 03 00          STA     F:TEMPOFFSET
0024D7  2               ; if 80 columns double it.
0024D7  2  E2 20                ACCUMULATOR8
0024D9  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0024DD  2  C9 28                CMP     #40
0024DF  2  F0 0B                BEQ     :+
0024E1  2  C2 20                ACCUMULATOR16
0024E3  2  AF 47 03 00          LDA     F:TEMPOFFSET
0024E7  2  0A                   ASL     A
0024E8  2  8F 47 03 00          STA     F:TEMPOFFSET
0024EC  2               :
0024EC  2  E2 30                ACCUMULATORINDEX8
0024EE  2  60                   RTS
0024EF  2               
0024EF  2               
0024EF  2               
0024EF  2               .I8
0024EF  2               .A8
0024EF  2               ;___LAB_MONITOR_____________________________________________
0024EF  2               ;
0024EF  2               ; UTILIZE BIOS TO GO TO MONITOR
0024EF  2               ;
0024EF  2               ;
0024EF  2               ; THIS IS NATIVE '816 CODE
0024EF  2               ;__________________________________________________________
0024EF  2               LAB_MONITOR:
0024EF  2  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
0024F0  2  18                   CLC                     ;
0024F1  2  FB                   XCE                     ; SET NATIVE MODE
0024F2  2  DA A2 00 DA          SETBANK 0
0024F6  2  AB FA        
0024F8  2  C2 30                ACCUMULATORINDEX16
0024FA  2  A9 FF BF             LDA     #STACK          ; get the stack address
0024FD  2  1B                   TCS                     ; and set the stack to it
0024FE  2  5C 00 E0 00          JML     $00E000
002502  2               
002502  1               ;
002502  1               ;____________________________________________________________________________________________
002502  1               
002502  1               
002502  1               ;   ensure CPU Context is in a known state
002502  1  EA                   NOP                     ; FIX A CODE PAGE ALIGNMENT PROBLEM
002503  1               BASICBEGIN:
002503  1               
002503  1  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
002504  1  18                   CLC                     ;
002505  1  FB                   XCE                     ; SET NATIVE MODE
002506  1  C2 30                ACCUMULATORINDEX16
002508  1  A9 FF BF             LDA     #STACK          ; get the stack address
00250B  1  1B                   TCS                     ; and set the stack to it
00250C  1  A9 00 00             LDA     #$0000          ;
00250F  1  48                   PHA                     ; Set Direct Register to 0
002510  1  2B                   PLD                     ;
002511  1               
002511  1                       .IF     PROGRAMBANK=DATABANK
002511  1               
002511  1                       .ELSE
002511  1  A2 00 10                 LDX     #$1000
002514  1  A0 00 10                 LDY     #$1000
002517  1  A9 00 10                 LDA     #$1000
00251A  1  54 02 FF                 MVN     #PROGRAMBANK,#DATABANK; COPY TABLES $1000 THROUGH $2000 PLUS OR MINUS :) TO WORKING BANK
00251D  1                       .ENDIF
00251D  1  E2 30                ACCUMULATORINDEX8
00251F  1  A9 FF                LDA     #PROGRAMBANK    ; SET DATA BANK = TO PROGRAM BANK TO ALLOW FOR INITIALIZATION FROM ROM
002521  1  48                   PHA
002522  1  AB                   PLB                     ;
002523  1               
002523  1               
002523  1               
002523  1               LAB_COLD:
002523  1  A2 04                LDX     #PG2_TABE-PG2_TABS-1
002525  1               ; byte count-1
002525  1               LAB_2D13:
002525  1  BD 33 10             LDA     PG2_TABS,X      ; get byte
002528  1  9F 00 02 00          STA     f:ccflag,X      ; store in page 2
00252C  1  CA                   DEX                     ; decrement count
00252D  1  10 F6                BPL     LAB_2D13        ; loop if not done
00252F  1               
00252F  1  A2 FF                LDX     #$FF            ; set byte
002531  1  86 88                STX     <Clineh         ; set current line high byte (set immediate mode)
002533  1               
002533  1  A9 4C                LDA     #$4C            ; code for JMP
002535  1  85 A1                STA     <Fnxjmp         ; save for jump vector for functions
002537  1               
002537  1               ; copy block from LAB_2CEE to $00BC - $00E0
002537  1               
002537  1  A0 1D                LDY     #LAB_2CEE_END-LAB_2CEE; set byte count
002539  1               LAB_2D4E:
002539  1  BE 02 10             LDX     LAB_2CEE-1,Y    ; get byte from table
00253C  1  96 BB                STX     <LAB_IGBY-1,Y   ; save byte in page zero
00253E  1  88                   DEY                     ; decrement count
00253F  1  D0 F8                BNE     LAB_2D4E        ; loop if not all done
002541  1               
002541  1               ; copy block from StrTab to $0000 - $0012
002541  1               
002541  1               LAB_GMEM:
002541  1  A0 12                LDY     #EndTab-StrTab-1; set byte count-1
002543  1               TabLoop:
002543  1  BE 20 10             LDX     StrTab,Y        ; get byte from table
002546  1  96 00                STX     <PLUS_0,Y       ; save byte in page zero
002548  1  88                   DEY                     ; decrement count
002549  1  10 F8                BPL     TabLoop         ; loop if not all done
00254B  1               
00254B  1               ; set-up start values
00254B  1  A9 02                LDA     #DATABANK       ; SET DATA BANK = TO DATA BANK, ALL PROGRAM DATA IN THIS AREA
00254D  1  85 C5                STA     <Bpntrp         ; SET LAB_GBYT PAGE POINTER TO DATA BANK
00254F  1  48                   PHA
002550  1  AB                   PLB
002551  1               
002551  1  A9 00                LDA     #$00            ; clear A
002553  1  85 E5                STA     <NmiBase        ; clear NMI handler enabled flag
002555  1  85 E8                STA     <IrqBase        ; clear IRQ handler enabled flag
002557  1  85 B2                STA     <FAC1_o         ; clear FAC1 overflow byte
002559  1  85 67                STA     <last_sh        ; clear descriptor stack top item pointer high byte
00255B  1               
00255B  1  A9 0E                LDA     #$0E            ; set default tab size
00255D  1  85 64                STA     <TabSiz         ; save it
00255F  1  A9 03                LDA     #$03            ; set garbage collect step size for descriptor stack
002561  1  85 A0                STA     <g_step         ; save it
002563  1  A2 68                LDX     #<des_sk        ; descriptor stack start
002565  1  86 65                STX     <next_s         ; set descriptor stack pointer
002567  1               
002567  1  A9 00                LDA     #<Ram_top
002569  1  A0 FF                LDY     #>Ram_top
00256B  1  85 85                STA     <Ememl          ; set end of mem low byte
00256D  1  84 86                STY     <Ememh          ; set end of mem high byte
00256F  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
002571  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002573  1               
002573  1  A0 00                LDY     #<Ram_base      ; set start addr low byte
002575  1  A2 22                LDX     #>Ram_base      ; set start addr high byte
002577  1  84 79                STY     <Smeml          ; save start of mem low byte
002579  1  86 7A                STX     <Smemh          ; save start of mem high byte
00257B  1               
00257B  1  98                   TYA                     ; clear A
00257C  1  91 79                STA     (<Smeml),Y      ; clear first byte
00257E  1  E6 79                INC     <Smeml          ; increment start of mem low byte
002580  1               
002580  1               ; DO TITLE SCREEN
002580  1  20 FA 22             JSR     TitleScreen
002583  1  20 DC 2E             JSR     LAB_CRLF        ; print CR/LF
002586  1  20 A9 28             JSR     LAB_1463        ; do "NEW" and "CLEAR"
002589  1  A5 85                LDA     <Ememl          ; get end of mem low byte
00258B  1  38                   SEC                     ; set carry for subtract
00258C  1  E5 79                SBC     <Smeml          ; subtract start of mem low byte
00258E  1  AA                   TAX                     ; copy to X
00258F  1  A5 86                LDA     <Ememh          ; get end of mem high byte
002591  1  E5 7A                SBC     <Smemh          ; subtract start of mem high byte
002593  1  20 42 46             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
002596  1  A9 F4                LDA     #<LAB_SMSG      ; point to sign-on message (low addr)
002598  1  A0 15                LDY     #>LAB_SMSG      ; point to sign-on message (high addr)
00259A  1  20 24 2F             JSR     LAB_18C3        ; print null terminated string from memory
00259D  1  A9 A1                LDA     #<LAB_1274      ; warm start vector low byte
00259F  1  A0 26                LDY     #>LAB_1274      ; warm start vector high byte
0025A1  1  85 01                STA     <Wrmjpl         ; save warm start vector low byte
0025A3  1  84 02                STY     <Wrmjph         ; save warm start vector high byte
0025A5  1  6C 01 00             JMP     (Wrmjpl)        ; go do warm start
0025A8  1               
0025A8  1               ; open up space in memory
0025A8  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
0025A8  1               
0025A8  1               ; <Nbendl,<Nbendh - new block end address (A/Y)
0025A8  1               ; <Obendl,<Obendh - old block end address
0025A8  1               ; <Ostrtl,<Ostrth - old block start address
0025A8  1               
0025A8  1               ; returns with ..
0025A8  1               
0025A8  1               ; <Nbendl,<Nbendh - new block start address (high byte - $100)
0025A8  1               ; <Obendl,<Obendh - old block start address (high byte - $100)
0025A8  1               ; <Ostrtl,<Ostrth - old block start address (unchanged)
0025A8  1               
0025A8  1               LAB_11CF:
0025A8  1  20 52 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
0025AB  1               ; addr to check is in AY (low/high)
0025AB  1  85 7F                STA     <Earryl         ; save new array mem end low byte
0025AD  1  84 80                STY     <Earryh         ; save new array mem end high byte
0025AF  1               
0025AF  1               ; open up space in memory
0025AF  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
0025AF  1               ; don't set array end
0025AF  1               
0025AF  1               LAB_11D6:
0025AF  1  38                   SEC                     ; set carry for subtract
0025B0  1  A5 A6                LDA     <Obendl         ; get block end low byte
0025B2  1  E5 AA                SBC     <Ostrtl         ; subtract block start low byte
0025B4  1  A8                   TAY                     ; copy MOD(block length/$100) byte to Y
0025B5  1  A5 A7                LDA     <Obendh         ; get block end high byte
0025B7  1  E5 AB                SBC     <Ostrth         ; subtract block start high byte
0025B9  1  AA                   TAX                     ; copy block length high byte to X
0025BA  1  E8                   INX                     ; +1 to allow for count=0 exit
0025BB  1  98                   TYA                     ; copy block length low byte to A
0025BC  1  F0 74                BEQ     LAB_120A        ; branch if length low byte=0
0025BE  1               
0025BE  1               ; block is (X-1)*256+Y bytes, do the Y bytes first
0025BE  1               
0025BE  1  38                   SEC                     ; set carry for add + 1, two's complement
0025BF  1  49 FF                EOR     #$FF            ; invert low byte for subtract
0025C1  1  65 A6                ADC     <Obendl         ; add block end low byte
0025C3  1               
0025C3  1  85 A6                STA     <Obendl         ; save corrected old block end low byte
0025C5  1  B0 03                BCS     LAB_11F3        ; branch if no underflow
0025C7  1               
0025C7  1  C6 A7                DEC     <Obendh         ; else decrement block end high byte
0025C9  1  38                   SEC                     ; set carry for add + 1, two's complement
0025CA  1               LAB_11F3:
0025CA  1  98                   TYA                     ; get MOD(block length/$100) byte
0025CB  1  49 FF                EOR     #$FF            ; invert low byte for subtract
0025CD  1  65 A4                ADC     <Nbendl         ; add destination end low byte
0025CF  1  85 A4                STA     <Nbendl         ; save modified new block end low byte
0025D1  1  B0 30                BCS     LAB_1203        ; branch if no underflow
0025D3  1               
0025D3  1  C6 A5                DEC     <Nbendh         ; else decrement block end high byte
0025D5  1  90 2C                BCC     LAB_1203        ; branch always
0025D7  1               
0025D7  1               LAB_11FF:
0025D7  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
0025DB  1  B5 A6 C9 00  
0025DF  1  D0 04 A2 00  
0025ED  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; copy byte to destination
0025F1  1  01 B5 A4 C9  
0025F5  1  00 D0 04 A2  
002603  1               LAB_1203:
002603  1  88                   DEY                     ; decrement index
002604  1  D0 D1                BNE     LAB_11FF        ; loop until Y=0
002606  1               
002606  1               ; now do Y=0 indexed byte
002606  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
00260A  1  B5 A6 C9 00  
00260E  1  D0 04 A2 00  
00261C  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; save byte to destination
002620  1  01 B5 A4 C9  
002624  1  00 D0 04 A2  
002632  1               LAB_120A:
002632  1  C6 A7                DEC     <Obendh         ; decrement source pointer high byte
002634  1  C6 A5                DEC     <Nbendh         ; decrement destination pointer high byte
002636  1  CA                   DEX                     ; decrement block count
002637  1  D0 CA                BNE     LAB_1203        ; loop until count = $0
002639  1               
002639  1  60                   RTS
00263A  1               
00263A  1               ; check room on stack for A bytes
00263A  1               ; stack too deep? do OM error
00263A  1               LAB_1212:
00263A  1  C2 20                ACCUMULATOR16
00263C  1  29 FF 00             AND     #$00FF
00263F  1  18                   CLC
002640  1  69 00 B0             ADC     #STACK_BOTTOM
002643  1  85 FD                STA     <TEMPW
002645  1  3B                   TSC
002646  1  C5 FD                CMP     <TEMPW
002648  1  90 03                BCC     LAB_1213        ; if stack < limit do "Out of memory" error then warm start
00264A  1  E2 20                ACCUMULATOR8
00264C  1  60                   RTS
00264D  1               LAB_1213:
00264D  1  E2 20                ACCUMULATOR8
00264F  1  4C 81 26             JMP     LAB_OMER
002652  1               
002652  1               ; check available memory, "Out of memory" error if no room
002652  1               ; addr to check is in AY (low/high)
002652  1               
002652  1               LAB_121F:
002652  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
002654  1  90 2A                BCC     LAB_124B        ; if less then exit (is ok)
002656  1               
002656  1  D0 04                BNE     LAB_1229        ; skip next test if greater (tested <)
002658  1               
002658  1               ; high byte was =, now do low byte
002658  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
00265A  1  90 24                BCC     LAB_124B        ; if less then exit (is ok)
00265C  1               
00265C  1               ; addr is > string storage ptr (oops!)
00265C  1               LAB_1229:
00265C  1  48                   PHA                     ; push addr low byte
00265D  1  A2 08                LDX     #$08            ; set index to save <Adatal to <expneg inclusive
00265F  1  98                   TYA                     ; copy addr high byte (to push on stack)
002660  1               
002660  1               ; save misc numeric work area
002660  1               LAB_122D:
002660  1  48                   PHA                     ; push byte
002661  1  B5 A3                LDA     <Adatal-1,X     ; get byte from <Adatal to <expneg ( ,$00 not pushed)
002663  1  CA                   DEX                     ; decrement index
002664  1  10 FA                BPL     LAB_122D        ; loop until all done
002666  1               
002666  1  20 8A 39             JSR     LAB_GARB        ; garbage collection routine
002669  1               
002669  1               ; restore misc numeric work area
002669  1  A2 00                LDX     #$00            ; clear the index to restore bytes
00266B  1               LAB_1238:
00266B  1  68                   PLA                     ; pop byte
00266C  1  95 A4                STA     <Adatal,X       ; save byte to <Adatal to <expneg
00266E  1  E8                   INX                     ; increment index
00266F  1  E0 08                CPX     #$08            ; compare with end + 1
002671  1  30 F8                BMI     LAB_1238        ; loop if more to do
002673  1               
002673  1  68                   PLA                     ; pop addr high byte
002674  1  A8                   TAY                     ; copy back to Y
002675  1  68                   PLA                     ; pop addr low byte
002676  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
002678  1  90 06                BCC     LAB_124B        ; if less then exit (is ok)
00267A  1               
00267A  1  D0 05                BNE     LAB_OMER        ; if greater do "Out of memory" error then warm start
00267C  1               
00267C  1               ; high byte was =, now do low byte
00267C  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
00267E  1  B0 01                BCS     LAB_OMER        ; if >= do "Out of memory" error then warm start
002680  1               
002680  1               ; ok exit, carry clear
002680  1               LAB_124B:
002680  1  60                   RTS
002681  1               
002681  1               ; do "Out of memory" error then warm start
002681  1               
002681  1               LAB_OMER:
002681  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
002683  1               
002683  1               ; do error #X, then warm start
002683  1               
002683  1               LAB_XERR:
002683  1  20 DC 2E             JSR     LAB_CRLF        ; print CR/LF
002686  1               
002686  1               ;        LDA     <VIDEOMODE
002686  1               ;        CMP     #2
002686  1               ;        BEQ     LAB_XERRA
002686  1               ;        PHX
002686  1               ;        LDX     #2
002686  1               ;        JSR     V_SCREEN1
002686  1               ;        PLX
002686  1               ;LAB_XERRA:
002686  1  BD 42 16             LDA     LAB_BAER,X      ; get error message pointer low byte
002689  1  BC 43 16             LDY     LAB_BAER+1,X    ; get error message pointer high byte
00268C  1  20 24 2F             JSR     LAB_18C3        ; print null terminated string from memory
00268F  1               
00268F  1  20 E2 28             JSR     LAB_1491        ; flush stack and clear continue flag
002692  1  A9 7F                LDA     #<LAB_EMSG      ; point to " Error" low addr
002694  1  A0 17                LDY     #>LAB_EMSG      ; point to " Error" high addr
002696  1               LAB_1269:
002696  1  20 24 2F             JSR     LAB_18C3        ; print null terminated string from memory
002699  1  A4 88                LDY     <Clineh         ; get current line high byte
00269B  1  C8                   INY                     ; increment it
00269C  1  F0 03                BEQ     LAB_1274        ; go do warm start (was immediate mode)
00269E  1               
00269E  1               ; else print line number
00269E  1  20 37 46             JSR     LAB_2953        ; print " in line [LINE #]"
0026A1  1               
0026A1  1               ; BASIC warm start entry point
0026A1  1               ; wait for Basic command
0026A1  1               
0026A1  1               LAB_1274:
0026A1  1               ;        LDA     <VIDEOMODE
0026A1  1               ;        CMP     #2
0026A1  1               ;        BEQ     LAB_1274a
0026A1  1               ;        LDX     #2
0026A1  1               ;        JSR     V_SCREEN1
0026A1  1               ;LAB_1274a:
0026A1  1               ; clear ON IRQ/NMI bytes
0026A1  1  A9 00                LDA     #$00            ; clear A
0026A3  1  85 E8                STA     <IrqBase        ; clear enabled byte
0026A5  1  85 E5                STA     <NmiBase        ; clear enabled byte
0026A7  1  A9 90                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0026A9  1  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0026AB  1               
0026AB  1  20 24 2F             JSR     LAB_18C3        ; go do print string
0026AE  1               
0026AE  1               ; wait for Basic command (no "Ready")
0026AE  1               
0026AE  1               LAB_127D:
0026AE  1  20 93 27             JSR     LAB_1357        ; call for BASIC input
0026B1  1               LAB_1280:
0026B1  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
0026B3  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
0026B5  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0026B9  1  F0 F3                BEQ     LAB_127D        ; loop while null
0026BB  1               
0026BB  1               ; got to interpret input line now ..
0026BB  1               
0026BB  1  A2 FF                LDX     #$FF            ; current line to null value
0026BD  1  86 88                STX     <Clineh         ; set current line high byte
0026BF  1  90 06                BCC     LAB_1295        ; branch if numeric character (handle new BASIC line)
0026C1  1               
0026C1  1               ; no line number .. immediate mode
0026C1  1  20 D4 27             JSR     LAB_13A6        ; crunch keywords into Basic tokens
0026C4  1  4C 57 2A             JMP     LAB_15F6        ; go scan and interpret code
0026C7  1               
0026C7  1               ; handle new BASIC line
0026C7  1               
0026C7  1               LAB_1295:
0026C7  1               
0026C7  1  20 BD 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
0026CA  1  20 D4 27             JSR     LAB_13A6        ; crunch keywords into Basic tokens
0026CD  1  84 5D                STY     <Ibptr          ; save index pointer to end of crunched line
0026CF  1  20 7D 28             JSR     LAB_SSLN        ; search BASIC for temp integer line number
0026D2  1  90 44                BCC     LAB_12E6        ; branch if not found
0026D4  1               
0026D4  1               ; aroooogah! line # already exists! delete it
0026D4  1  A0 01                LDY     #$01            ; set index to next line pointer high byte
0026D6  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0026D8  1  85 72                STA     <ut1_ph         ; save it
0026DA  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0026DC  1  85 71                STA     <ut1_pl         ; save it
0026DE  1  A5 AB                LDA     <Baslnh         ; get found line pointer high byte
0026E0  1  85 74                STA     <ut2_ph         ; save it
0026E2  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
0026E4  1  88                   DEY                     ; decrement index
0026E5  1  F1 AA                SBC     (<Baslnl),Y     ; subtract next line pointer low byte
0026E7  1  18                   CLC                     ; clear carry for add
0026E8  1  65 7B                ADC     <Svarl          ; add start of vars low byte
0026EA  1  85 7B                STA     <Svarl          ; save new start of vars low byte
0026EC  1  85 73                STA     <ut2_pl         ; save destination pointer low byte
0026EE  1  A5 7C                LDA     <Svarh          ; get start of vars high byte
0026F0  1  69 FF                ADC     #$FF            ; -1 + carry
0026F2  1  85 7C                STA     <Svarh          ; save start of vars high byte
0026F4  1  E5 AB                SBC     <Baslnh         ; subtract found line pointer high byte
0026F6  1  AA                   TAX                     ; copy to block count
0026F7  1  38                   SEC                     ; set carry for subtract
0026F8  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
0026FA  1  E5 7B                SBC     <Svarl          ; subtract start of vars low byte
0026FC  1  A8                   TAY                     ; copy to bytes in first block count
0026FD  1  B0 03                BCS     LAB_12D0        ; branch if overflow
0026FF  1               
0026FF  1  E8                   INX                     ; increment block count (correct for =0 loop exit)
002700  1  C6 74                DEC     <ut2_ph         ; decrement destination high byte
002702  1               LAB_12D0:
002702  1  18                   CLC                     ; clear carry for add
002703  1  65 71                ADC     <ut1_pl         ; add source pointer low byte
002705  1  90 03                BCC     LAB_12D8        ; branch if no overflow
002707  1               
002707  1  C6 72                DEC     <ut1_ph         ; else decrement source pointer high byte
002709  1  18                   CLC                     ; clear carry
00270A  1               
00270A  1               ; close up memory to delete old line
00270A  1               LAB_12D8:
00270A  1  B1 71                LDA     (<ut1_pl),Y     ; get byte from source
00270C  1  91 73                STA     (<ut2_pl),Y     ; copy to destination
00270E  1  C8                   INY                     ; increment index
00270F  1  D0 F9                BNE     LAB_12D8        ; while <> 0 do this block
002711  1               
002711  1  E6 72                INC     <ut1_ph         ; increment source pointer high byte
002713  1  E6 74                INC     <ut2_ph         ; increment destination pointer high byte
002715  1  CA                   DEX                     ; decrement block count
002716  1  D0 F2                BNE     LAB_12D8        ; loop until all done
002718  1               
002718  1               ; got new line in buffer and no existing same #
002718  1               LAB_12E6:
002718  1  AD 81 21             LDA     Ibuffs          ; get byte from start of input buffer
00271B  1  F0 3F                BEQ     LAB_1319        ; if null line just go flush stack/vars and exit
00271D  1               
00271D  1               ; got new line and it isn't empty line
00271D  1  A5 85                LDA     <Ememl          ; get end of mem low byte
00271F  1  A4 86                LDY     <Ememh          ; get end of mem high byte
002721  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
002723  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002725  1  A5 7B                LDA     <Svarl          ; get start of vars low byte	(end of BASIC)
002727  1  85 A6                STA     <Obendl         ; save old block end low byte
002729  1  A4 7C                LDY     <Svarh          ; get start of vars high byte	(end of BASIC)
00272B  1  84 A7                STY     <Obendh         ; save old block end high byte
00272D  1  65 5D                ADC     <Ibptr          ; add input buffer pointer	(also buffer length)
00272F  1  90 01                BCC     LAB_1301        ; branch if no overflow from add
002731  1               
002731  1  C8                   INY                     ; else increment high byte
002732  1               LAB_1301:
002732  1  85 A4                STA     <Nbendl         ; save new block end low byte	(move to, low byte)
002734  1  84 A5                STY     <Nbendh         ; save new block end high byte
002736  1  20 A8 25             JSR     LAB_11CF        ; open up space in memory
002739  1               ; old start pointer <Ostrtl,<Ostrth set by the find line call
002739  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
00273B  1  A4 80                LDY     <Earryh         ; get array mem end high byte
00273D  1  85 7B                STA     <Svarl          ; save start of vars low byte
00273F  1  84 7C                STY     <Svarh          ; save start of vars high byte
002741  1  A4 5D                LDY     <Ibptr          ; get input buffer pointer	(also buffer length)
002743  1  88                   DEY                     ; adjust for loop type
002744  1               LAB_1311:
002744  1  B9 7D 21             LDA     Ibuffs-4,Y      ; get byte from crunched line
002747  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002749  1  88                   DEY                     ; decrement count
00274A  1  C0 03                CPY     #$03            ; compare with first byte-1
00274C  1  D0 F6                BNE     LAB_1311        ; continue while count <> 3
00274E  1               
00274E  1  A5 12                LDA     <Itemph         ; get line # high byte
002750  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002752  1  88                   DEY                     ; decrement count
002753  1  A5 11                LDA     <Itempl         ; get line # low byte
002755  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002757  1  88                   DEY                     ; decrement count
002758  1  A9 FF                LDA     #$FF            ; set byte to allow chain rebuild. if you didn't set this
00275A  1               ; byte then a zero already here would stop the chain rebuild
00275A  1               ; as it would think it was the [EOT] marker.
00275A  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
00275C  1               
00275C  1               LAB_1319:
00275C  1  20 BE 28             JSR     LAB_1477        ; reset execution to start, clear vars and flush stack
00275F  1  A6 79                LDX     <Smeml          ; get start of mem low byte
002761  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002763  1  A0 01                LDY     #$01            ; index to high byte of next line pointer
002765  1               LAB_1325:
002765  1  86 71                STX     <ut1_pl         ; set line start pointer low byte
002767  1  85 72                STA     <ut1_ph         ; set line start pointer high byte
002769  1  B1 71                LDA     (<ut1_pl),Y     ; get it
00276B  1  F0 18                BEQ     LAB_133E        ; exit if end of program
00276D  1               
00276D  1               ; rebuild chaining of Basic lines
00276D  1               
00276D  1  A0 04                LDY     #$04            ; point to first code byte of line
00276F  1               ; there is always 1 byte + [EOL] as null entries are deleted
00276F  1               LAB_1330:
00276F  1  C8                   INY                     ; next code byte
002770  1  B1 71                LDA     (<ut1_pl),Y     ; get byte
002772  1  D0 FB                BNE     LAB_1330        ; loop if not [EOL]
002774  1               
002774  1  38                   SEC                     ; set carry for add + 1
002775  1  98                   TYA                     ; copy end index
002776  1  65 71                ADC     <ut1_pl         ; add to line start pointer low byte
002778  1  AA                   TAX                     ; copy to X
002779  1  A0 00                LDY     #$00            ; clear index, point to this line's next line pointer
00277B  1  91 71                STA     (<ut1_pl),Y     ; set next line pointer low byte
00277D  1  98                   TYA                     ; clear A
00277E  1  65 72                ADC     <ut1_ph         ; add line start pointer high byte + carry
002780  1  C8                   INY                     ; increment index to high byte
002781  1  91 71                STA     (<ut1_pl),Y     ; save next line pointer low byte
002783  1  90 E0                BCC     LAB_1325        ; go do next line, branch always, carry clear
002785  1               
002785  1               
002785  1               LAB_133E:
002785  1  4C AE 26             JMP     LAB_127D        ; else we just wait for Basic command, no "Ready"
002788  1               
002788  1               ; print "? " and get BASIC input
002788  1               
002788  1               LAB_INLN:
002788  1               ;JSR	LAB_18E3		; print "?" character
002788  1  20 4D 2F             JSR     LAB_18E0        ; print " "
00278B  1  D0 18                BNE     SimpleSerialEditor; call for BASIC input and return
00278D  1               
00278D  1               ; receive line from keyboard
00278D  1               
00278D  1               ; $08 as delete key (BACKSPACE on standard keyboard)
00278D  1               LAB_134B:
00278D  1  20 52 2F             JSR     LAB_PRNA        ; go print the character
002790  1  CA                   DEX                     ; decrement the buffer counter (delete)
002791  1  80 14                BRA     LAB_1359
002793  1               
002793  1               ; call for BASIC input (main entry point)
002793  1               LAB_1357:
002793  1  AF 41 03 00          LDA     f:ConsoleDevice
002797  1  C9 00                CMP     #$00
002799  1  F0 0A                BEQ     SimpleSerialEditor
00279B  1               ;	do screen editor
00279B  1  20 23 23             JSR     ScreenEditor
00279E  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
0027A0  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
0027A2  1  A9 00                LDA     #$00
0027A4  1  60                   RTS
0027A5  1               
0027A5  1               SimpleSerialEditor:
0027A5  1  A2 00                LDX     #$00            ; clear BASIC line buffer pointer
0027A7  1               LAB_1359:
0027A7  1  20 76 18             JSR     V_INPT          ; call scan input device
0027AA  1  B0 FB                BCS     LAB_1359        ; loop if no byte
0027AC  1               ;BEQ	LAB_1359		; loop until valid input (ignore NULLs)
0027AC  1               
0027AC  1  C9 07                CMP     #$07            ; compare with [BELL]
0027AE  1  F0 10                BEQ     LAB_1378        ; branch if [BELL]
0027B0  1               
0027B0  1  C9 0D                CMP     #$0D            ; compare with [CR]
0027B2  1  F0 19                BEQ     LAB_1384        ; do CR/LF exit if [CR]
0027B4  1               
0027B4  1  E0 00                CPX     #$00            ; compare pointer with $00
0027B6  1  D0 04                BNE     LAB_1374        ; branch if not empty
0027B8  1               
0027B8  1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
0027B8  1               
0027B8  1  C9 21                CMP     #$21            ; compare with [SP]+1
0027BA  1  90 EB                BCC     LAB_1359        ; if < ignore character
0027BC  1               
0027BC  1               LAB_1374:
0027BC  1  C9 08                CMP     #$08            ; compare with [BACKSPACE] (delete last character)
0027BE  1  F0 CD                BEQ     LAB_134B        ; go delete last character
0027C0  1               
0027C0  1               LAB_1378:
0027C0  1  E0 50                CPX     #Ibuffe-Ibuffs  ; compare character count with max
0027C2  1  B0 0C                BCS     LAB_138E        ; skip store and do [BELL] if buffer full
0027C4  1               
0027C4  1  9D 81 21             STA     Ibuffs,X        ; else store in buffer
0027C7  1  E8                   INX                     ; increment pointer
0027C8  1               LAB_137F:
0027C8  1  20 52 2F             JSR     LAB_PRNA        ; go print the character
0027CB  1  D0 DA                BNE     LAB_1359        ; always loop for next character
0027CD  1               
0027CD  1               LAB_1384:
0027CD  1  4C D3 2E             JMP     LAB_1866        ; do CR/LF exit to BASIC
0027D0  1               
0027D0  1               ; announce buffer full
0027D0  1               
0027D0  1               LAB_138E:
0027D0  1  A9 07                LDA     #$07            ; [BELL] character into A
0027D2  1  D0 F4                BNE     LAB_137F        ; go print the [BELL] but ignore input character
0027D4  1               ; branch always
0027D4  1               
0027D4  1               ; crunch keywords into Basic tokens
0027D4  1               ; position independent buffer version ..
0027D4  1               ; faster, dictionary search version ....
0027D4  1               
0027D4  1               LAB_13A6:
0027D4  1  A0 FF                LDY     #$FF            ; set save index (makes for easy math later)
0027D6  1               
0027D6  1  38                   SEC                     ; set carry for subtract
0027D7  1  A5 C3                LDA     <Bpntrl         ; get basic execute pointer low byte
0027D9  1  E9 81                SBC     #<Ibuffs        ; subtract input buffer start pointer
0027DB  1  AA                   TAX                     ; copy result to X (index past line # if any)
0027DC  1               
0027DC  1  86 60                STX     <Oquote         ; clear open quote/DATA flag
0027DE  1               LAB_13AC:
0027DE  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
0027E1  1  F0 51                BEQ     LAB_13EC        ; if null save byte then exit
0027E3  1               
0027E3  1  C9 5F                CMP     #'_'            ; compare with "_"
0027E5  1  B0 4D                BCS     LAB_13EC        ; if >= go save byte then continue crunching
0027E7  1               
0027E7  1  C9 3C                CMP     #'<'            ; compare with "<"
0027E9  1  B0 0E                BCS     LAB_13CC        ; if >= go crunch now
0027EB  1               
0027EB  1  C9 30                CMP     #'0'            ; compare with "0"
0027ED  1  B0 45                BCS     LAB_13EC        ; if >= go save byte then continue crunching
0027EF  1               
0027EF  1  85 5C                STA     <Scnquo         ; save buffer byte as search character
0027F1  1  C9 22                CMP     #$22            ; is it quote character?
0027F3  1  F0 64                BEQ     LAB_1410        ; branch if so (copy quoted string)
0027F5  1               
0027F5  1  C9 2A                CMP     #'*'            ; compare with "*"
0027F7  1  90 3B                BCC     LAB_13EC        ; if < go save byte then continue crunching
0027F9  1               
0027F9  1               ; else crunch now
0027F9  1               LAB_13CC:
0027F9  1  24 60                BIT     <Oquote         ; get open quote/DATA token flag
0027FB  1  70 37                BVS     LAB_13EC        ; branch if b6 of <Oquote set (was DATA)
0027FD  1               ; go save byte then continue crunching
0027FD  1               
0027FD  1  86 78                STX     <TempB          ; save buffer read index
0027FF  1  84 BA                STY     <csidx          ; copy buffer save index
002801  1  A0 63                LDY     #<TAB_1STC      ; get keyword first character table low address
002803  1  84 73                STY     <ut2_pl         ; save pointer low byte
002805  1  A0 11                LDY     #>TAB_1STC      ; get keyword first character table high address
002807  1  84 74                STY     <ut2_ph         ; save pointer high byte
002809  1  A0 00                LDY     #$00            ; clear table pointer
00280B  1               
00280B  1               LAB_13D0:
00280B  1  D1 73                CMP     (<ut2_pl),Y     ; compare with keyword first character table byte
00280D  1  F0 05                BEQ     LAB_13D1        ; go do word_table_chr if match
00280F  1               
00280F  1  90 21                BCC     LAB_13EA        ; if < keyword first character table byte go restore
002811  1               ; Y and save to crunched
002811  1               
002811  1  C8                   INY                     ; else increment pointer
002812  1  D0 F7                BNE     LAB_13D0        ; and loop (branch always)
002814  1               
002814  1               ; have matched first character of some keyword
002814  1               
002814  1               LAB_13D1:
002814  1  98                   TYA                     ; copy matching index
002815  1  0A                   ASL     A               ; *2 (bytes per pointer)
002816  1  AA                   TAX                     ; copy to new index
002817  1  BD 82 11             LDA     TAB_CHRT,X      ; get keyword table pointer low byte
00281A  1  85 73                STA     <ut2_pl         ; save pointer low byte
00281C  1  BD 83 11             LDA     TAB_CHRT+1,X    ; get keyword table pointer high byte
00281F  1  85 74                STA     <ut2_ph         ; save pointer high byte
002821  1               
002821  1  A0 FF                LDY     #$FF            ; clear table pointer (make -1 for start)
002823  1               
002823  1  A6 78                LDX     <TempB          ; restore buffer read index
002825  1               
002825  1               LAB_13D6:
002825  1  C8                   INY                     ; next table byte
002826  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from table
002828  1               LAB_13D8:
002828  1  30 08                BMI     LAB_13EA        ; all bytes matched so go save token
00282A  1               
00282A  1  E8                   INX                     ; next buffer byte
00282B  1  DD 81 21             CMP     Ibuffs,X        ; compare with byte from input buffer
00282E  1  F0 F5                BEQ     LAB_13D6        ; go compare next if match
002830  1               
002830  1  D0 2E                BNE     LAB_1417        ; branch if >< (not found keyword)
002832  1               
002832  1               LAB_13EA:
002832  1  A4 BA                LDY     <csidx          ; restore save index
002834  1               
002834  1               ; save crunched to output
002834  1               LAB_13EC:
002834  1  E8                   INX                     ; increment buffer index (to next input byte)
002835  1  C8                   INY                     ; increment save index (to next output byte)
002836  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
002839  1  C9 00                CMP     #$00            ; set the flags, set carry
00283B  1  F0 35                BEQ     LAB_142A        ; do exit if was null [EOL]
00283D  1               
00283D  1               ; A holds token or byte here
00283D  1  E9 3A                SBC     #':'            ; subtract ":" (carry set by CMP #00)
00283F  1  F0 04                BEQ     LAB_13FF        ; branch if it was ":" (is now $00)
002841  1               
002841  1               ; A now holds token-$3A
002841  1  C9 49                CMP     #TK_DATA-$3A    ; compare with DATA token - $3A
002843  1  D0 02                BNE     LAB_1401        ; branch if not DATA
002845  1               
002845  1               ; token was : or DATA
002845  1               LAB_13FF:
002845  1  85 60                STA     <Oquote         ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
002847  1               LAB_1401:
002847  1  49 57                EOR     #TK_REM-$3A     ; effectively subtract REM token offset
002849  1  F0 03                BEQ     LAB_1401_A
00284B  1  4C DE 27             JMP     LAB_13AC        ; If wasn't REM then go crunch rest of line
00284E  1               
00284E  1               LAB_1401_A:
00284E  1  85 5C                STA     <Asrch          ; else was REM so set search for [EOL]
002850  1               
002850  1               ; loop for REM, "..." etc.
002850  1               LAB_1408:
002850  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
002853  1  F0 DF                BEQ     LAB_13EC        ; branch if null [EOL]
002855  1               
002855  1  C5 5C                CMP     <Asrch          ; compare with stored character
002857  1  F0 DB                BEQ     LAB_13EC        ; branch if match (end quote)
002859  1               
002859  1               ; entry for copy string in quotes, don't crunch
002859  1               LAB_1410:
002859  1  C8                   INY                     ; increment buffer save index
00285A  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
00285D  1  E8                   INX                     ; increment buffer read index
00285E  1  D0 F0                BNE     LAB_1408        ; loop while <> 0 (should never be 0!)
002860  1               
002860  1               ; not found keyword this go
002860  1               LAB_1417:
002860  1  A6 78                LDX     <TempB          ; compare has failed, restore buffer index (start byte!)
002862  1               
002862  1               ; now find the end of this word in the table
002862  1               LAB_141B:
002862  1  B1 73                LDA     (<ut2_pl),Y     ; get table byte
002864  1  08                   PHP                     ; save status
002865  1  C8                   INY                     ; increment table index
002866  1  28                   PLP                     ; restore byte status
002867  1  10 F9                BPL     LAB_141B        ; if not end of keyword go do next
002869  1               
002869  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from keyword table
00286B  1  D0 BB                BNE     LAB_13D8        ; go test next word if not zero byte (end of table)
00286D  1               
00286D  1               ; reached end of table with no match
00286D  1  BD 81 21             LDA     Ibuffs,X        ; restore byte from input buffer
002870  1  10 C0                BPL     LAB_13EA        ; branch always (all bytes in buffer are $00-$7F)
002872  1               ; go save byte in output and continue crunching
002872  1               
002872  1               ; reached [EOL]
002872  1               LAB_142A:
002872  1  C8                   INY                     ; increment pointer
002873  1  C8                   INY                     ; increment pointer (makes it next line pointer high byte)
002874  1  99 81 21             STA     Ibuffs,Y        ; save [EOL] (marks [EOT] in immediate mode)
002877  1  C8                   INY                     ; adjust for line copy
002878  1  C8                   INY                     ; adjust for line copy
002879  1  C8                   INY                     ; adjust for line copy
00287A  1  C6 C3                DEC     <Bpntrl         ; allow for increment (change if buffer starts at $xxFF)
00287C  1  60                   RTS
00287D  1               
00287D  1               ; search Basic for temp integer line number from start of mem
00287D  1               
00287D  1               LAB_SSLN:
00287D  1  A5 79                LDA     <Smeml          ; get start of mem low byte
00287F  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002881  1               
002881  1               ; search Basic for temp integer line number from AX
002881  1               ; returns carry set if found
002881  1               ; returns <Baslnl/<Baslnh pointer to found or next higher (not found) line
002881  1               
002881  1               ; old 541 new 507
002881  1               
002881  1               LAB_SHLN:
002881  1  A0 01                LDY     #$01            ; set index
002883  1  85 AA                STA     <Baslnl         ; save low byte as current
002885  1  86 AB                STX     <Baslnh         ; save high byte as current
002887  1  B1 AA                LDA     (<Baslnl),Y     ; get pointer high byte from addr
002889  1  F0 1A                BEQ     LAB_145F        ; pointer was zero so we're done, do 'not found' exit
00288B  1               
00288B  1  A0 03                LDY     #$03            ; set index to line # high byte
00288D  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
00288F  1  88                   DEY                     ; decrement index (point to low byte)
002890  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002892  1  D0 04                BNE     LAB_1455        ; if <> skip low byte check
002894  1               
002894  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
002896  1  C5 11                CMP     <Itempl         ; compare with temporary integer low byte
002898  1               LAB_1455:
002898  1  B0 09                BCS     LAB_145E        ; else if temp < this line, exit (passed line#)
00289A  1               
00289A  1               LAB_1456:
00289A  1  88                   DEY                     ; decrement index to next line ptr high byte
00289B  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
00289D  1  AA                   TAX                     ; copy to X
00289E  1  88                   DEY                     ; decrement index to next line ptr low byte
00289F  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
0028A1  1  90 DE                BCC     LAB_SHLN        ; go search for line # in temp (<Itempl/<Itemph) from AX
0028A3  1               ; (carry always clear)
0028A3  1               
0028A3  1               LAB_145E:
0028A3  1  F0 01                BEQ     LAB_1460        ; exit if temp = found line #, carry is set
0028A5  1               
0028A5  1               LAB_145F:
0028A5  1  18                   CLC                     ; clear found flag
0028A6  1               LAB_1460:
0028A6  1  60                   RTS
0028A7  1               
0028A7  1               ; perform NEW
0028A7  1               
0028A7  1               LAB_NEW:
0028A7  1  D0 FD                BNE     LAB_1460        ; exit if not end of statement (to do syntax error)
0028A9  1               
0028A9  1               LAB_1463:
0028A9  1  A9 00                LDA     #$00            ; clear A
0028AB  1  A8                   TAY                     ; clear Y
0028AC  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, low byte
0028AE  1  C8                   INY                     ; increment index
0028AF  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, high byte
0028B1  1  18                   CLC                     ; clear carry
0028B2  1  A5 79                LDA     <Smeml          ; get start of mem low byte
0028B4  1  69 02                ADC     #$02            ; calculate end of BASIC low byte
0028B6  1  85 7B                STA     <Svarl          ; save start of vars low byte
0028B8  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
0028BA  1  69 00                ADC     #$00            ; add any carry
0028BC  1  85 7C                STA     <Svarh          ; save start of vars high byte
0028BE  1               
0028BE  1               ; reset execution to start, clear vars and flush stack
0028BE  1               
0028BE  1               LAB_1477:
0028BE  1  18                   CLC                     ; clear carry
0028BF  1  A5 79                LDA     <Smeml          ; get start of mem low byte
0028C1  1  69 FF                ADC     #$FF            ; -1
0028C3  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0028C5  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
0028C7  1  69 FF                ADC     #$FF            ; -1+carry
0028C9  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
0028CB  1               ; "CLEAR" command gets here
0028CB  1               
0028CB  1               LAB_147A:
0028CB  1  A5 85                LDA     <Ememl          ; get end of mem low byte
0028CD  1  A4 86                LDY     <Ememh          ; get end of mem high byte
0028CF  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
0028D1  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
0028D3  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0028D5  1  A4 7C                LDY     <Svarh          ; get start of vars high byte
0028D7  1  85 7D                STA     <Sarryl         ; save var mem end low byte
0028D9  1  84 7E                STY     <Sarryh         ; save var mem end high byte
0028DB  1  85 7F                STA     <Earryl         ; save array mem end low byte
0028DD  1  84 80                STY     <Earryh         ; save array mem end high byte
0028DF  1  20 AB 2A             JSR     LAB_161A        ; perform RESTORE command
0028E2  1               
0028E2  1               ; flush stack and clear continue flag
0028E2  1               
0028E2  1               LAB_1491:
0028E2  1  A2 68                LDX     #<des_sk        ; set descriptor stack pointer
0028E4  1  86 65                STX     <next_s         ; save descriptor stack pointer
0028E6  1  C2 30                ACCUMULATORINDEX16
0028E8  1  FA                   PLX                     ; pull return address low byte
0028E9  1  A9 FF BF             LDA     #STACK          ; get the stack address
0028EC  1  1B                   TCS                     ; and set the stack to it
0028ED  1  DA                   PHX
0028EE  1  E2 30                ACCUMULATORINDEX8
0028F0  1  A9 00                LDA     #$00            ; clear byte
0028F2  1  85 8C                STA     <Cpntrh         ; clear continue pointer high byte
0028F4  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
0028F6  1               LAB_14A6:
0028F6  1  60                   RTS
0028F7  1               
0028F7  1               ; perform CLEAR
0028F7  1               
0028F7  1               LAB_CLEAR:
0028F7  1  F0 D2                BEQ     LAB_147A        ; if no following token go do "CLEAR"
0028F9  1               
0028F9  1               ; else there was a following token (go do syntax error)
0028F9  1  60                   RTS
0028FA  1               
0028FA  1               ; perform LIST [n][-m]
0028FA  1               ; bigger, faster version (a _lot_ faster)
0028FA  1               
0028FA  1               LAB_LIST:
0028FA  1  90 06                BCC     LAB_14BD        ; branch if next character numeric (LIST n..)
0028FC  1               
0028FC  1  F0 04                BEQ     LAB_14BD        ; branch if next character [NULL] (LIST)
0028FE  1               
0028FE  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
002900  1  D0 F4                BNE     LAB_14A6        ; exit if not - (LIST -m)
002902  1               
002902  1               ; LIST [[n][-m]]
002902  1               ; this bit sets the n , if present, as the start and end
002902  1               LAB_14BD:
002902  1  20 BD 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002905  1  20 7D 28             JSR     LAB_SSLN        ; search BASIC for temp integer line number
002908  1               ; (pointer in <Baslnl/<Baslnh)
002908  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00290C  1  F0 0D                BEQ     LAB_14D4        ; branch if no more characters
00290E  1               
00290E  1               ; this bit checks the - is present
00290E  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
002910  1  D0 61                BNE     LAB_152B        ; return if not "-" (will be Syntax error)
002912  1               
002912  1               ; LIST [n]-m
002912  1               ; the - was there so set m as the end value
002912  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002916  1  20 BD 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002919  1  D0 58                BNE     LAB_152B        ; exit if not ok
00291B  1               
00291B  1               LAB_14D4:
00291B  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
00291D  1  05 12                ORA     <Itemph         ; OR temporary integer high byte
00291F  1  D0 06                BNE     LAB_14E2        ; branch if start set
002921  1               
002921  1  A9 FF                LDA     #$FF            ; set for -1
002923  1  85 11                STA     <Itempl         ; set temporary integer low byte
002925  1  85 12                STA     <Itemph         ; set temporary integer high byte
002927  1               LAB_14E2:
002927  1  A0 01                LDY     #$01            ; set index for line
002929  1  84 60                STY     <Oquote         ; clear open quote flag
00292B  1  20 DC 2E             JSR     LAB_CRLF        ; print CR/LF
00292E  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002930  1               ; pointer initially set by search at LAB_14BD
002930  1  F0 41                BEQ     LAB_152B        ; if null all done so exit
002932  1  20 7B 2A             JSR     LAB_1629        ; do CRTL-C check vector
002935  1               
002935  1  C8                   INY                     ; increment index for line
002936  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
002938  1  AA                   TAX                     ; copy to X
002939  1  C8                   INY                     ; increment index
00293A  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
00293C  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
00293E  1  D0 04                BNE     LAB_14FF        ; branch if no high byte match
002940  1               
002940  1  E4 11                CPX     <Itempl         ; compare with temporary integer low byte
002942  1  F0 02                BEQ     LAB_1501        ; branch if = last line to do (< will pass next branch)
002944  1               
002944  1               LAB_14FF:                       ; else ..
002944  1  B0 2D                BCS     LAB_152B        ; if greater all done so exit
002946  1               
002946  1               LAB_1501:
002946  1  84 97                STY     <Tidx1          ; save index for line
002948  1  20 42 46             JSR     LAB_295E        ; print XA as unsigned integer
00294B  1  A9 20                LDA     #$20            ; space is the next character
00294D  1               LAB_1508:
00294D  1  A4 97                LDY     <Tidx1          ; get index for line
00294F  1  29 7F                AND     #$7F            ; mask top out bit of character
002951  1               LAB_150C:
002951  1  20 52 2F             JSR     LAB_PRNA        ; go print the character
002954  1  C9 22                CMP     #$22            ; was it " character
002956  1  D0 06                BNE     LAB_1519        ; branch if not
002958  1               
002958  1               ; we are either entering or leaving a pair of quotes
002958  1  A5 60                LDA     <Oquote         ; get open quote flag
00295A  1  49 FF                EOR     #$FF            ; toggle it
00295C  1  85 60                STA     <Oquote         ; save it back
00295E  1               LAB_1519:
00295E  1  C8                   INY                     ; increment index
00295F  1  B1 AA                LDA     (<Baslnl),Y     ; get next byte
002961  1  D0 11                BNE     LAB_152E        ; branch if not [EOL] (go print character)
002963  1  A8                   TAY                     ; else clear index
002964  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
002966  1  AA                   TAX                     ; copy to X
002967  1  C8                   INY                     ; increment index
002968  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
00296A  1  86 AA                STX     <Baslnl         ; set pointer to line low byte
00296C  1  85 AB                STA     <Baslnh         ; set pointer to line high byte
00296E  1  F0 03                BEQ     LAB_152B
002970  1  4C 27 29             JMP     LAB_14E2        ; go do next line if not [EOT]
002973  1               
002973  1               ; else ..
002973  1               LAB_152B:
002973  1  60                   RTS
002974  1               
002974  1               LAB_152E:
002974  1  10 DB                BPL     LAB_150C        ; just go print it if not token byte
002976  1               
002976  1               ; else was token byte so uncrunch it (maybe)
002976  1  24 60                BIT     <Oquote         ; test the open quote flag
002978  1  30 D7                BMI     LAB_150C        ; just go print character if open quote set
00297A  1               
00297A  1  A2 13                LDX     #>LAB_KEYT      ; get table address high byte
00297C  1  0A                   ASL     A               ; *2
00297D  1  0A                   ASL     A               ; *4
00297E  1  90 02                BCC     LAB_152F        ; branch if no carry
002980  1               
002980  1  E8                   INX                     ; else increment high byte
002981  1  18                   CLC                     ; clear carry for add
002982  1               LAB_152F:
002982  1  69 D1                ADC     #<LAB_KEYT      ; add low byte
002984  1  90 01                BCC     LAB_1530        ; branch if no carry
002986  1               
002986  1  E8                   INX                     ; else increment high byte
002987  1               LAB_1530:
002987  1  85 73                STA     <ut2_pl         ; save table pointer low byte
002989  1  86 74                STX     <ut2_ph         ; save table pointer high byte
00298B  1  84 97                STY     <Tidx1          ; save index for line
00298D  1  A0 00                LDY     #$00            ; clear index
00298F  1  B1 73                LDA     (<ut2_pl),Y     ; get length
002991  1  AA                   TAX                     ; copy length
002992  1  C8                   INY                     ; increment index
002993  1  B1 73                LDA     (<ut2_pl),Y     ; get 1st character
002995  1  CA                   DEX                     ; decrement length
002996  1  D0 03                BNE     LAB_1508_A
002998  1  4C 4D 29             JMP     LAB_1508        ; if no more characters exit and print
00299B  1               LAB_1508_A:
00299B  1  20 52 2F             JSR     LAB_PRNA        ; go print the character
00299E  1  C8                   INY                     ; increment index
00299F  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address low byte
0029A1  1  48                   PHA                     ; save it for now
0029A2  1  C8                   INY                     ; increment index
0029A3  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address high byte
0029A5  1  A0 00                LDY     #$00
0029A7  1  85 74                STA     <ut2_ph         ; save keyword pointer high byte
0029A9  1  68                   PLA                     ; pull low byte
0029AA  1  85 73                STA     <ut2_pl         ; save keyword pointer low byte
0029AC  1               LAB_1540:
0029AC  1  B1 73                LDA     (<ut2_pl),Y     ; get character
0029AE  1  CA                   DEX                     ; decrement character count
0029AF  1  D0 03                BNE     LAB_1508_B
0029B1  1  4C 4D 29             JMP     LAB_1508        ; if last character exit and print
0029B4  1               LAB_1508_B:
0029B4  1  20 52 2F             JSR     LAB_PRNA        ; go print the character
0029B7  1  C8                   INY                     ; increment index
0029B8  1  D0 F2                BNE     LAB_1540        ; loop for next character
0029BA  1               
0029BA  1               ; perform FOR
0029BA  1               
0029BA  1               LAB_FOR:
0029BA  1  A9 80                LDA     #$80            ; set FNX
0029BC  1  85 61                STA     <Sufnxf         ; set subscript/FNX flag
0029BE  1  20 1F 2D             JSR     LAB_LET         ; go do LET
0029C1  1  68                   PLA                     ; pull return address
0029C2  1  68                   PLA                     ; pull return address
0029C3  1  A9 10                LDA     #$10            ; we need 16d bytes !
0029C5  1  20 3A 26             JSR     LAB_1212        ; check room on stack for A bytes
0029C8  1  20 0B 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
0029CB  1  18                   CLC                     ; clear carry for add
0029CC  1  98                   TYA                     ; copy index to A
0029CD  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
0029CF  1  48                   PHA                     ; push onto stack
0029D0  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0029D2  1  69 00                ADC     #$00            ; add carry
0029D4  1  48                   PHA                     ; push onto stack
0029D5  1  A5 88                LDA     <Clineh         ; get current line high byte
0029D7  1  48                   PHA                     ; push onto stack
0029D8  1  A5 87                LDA     <Clinel         ; get current line low byte
0029DA  1  48                   PHA                     ; push onto stack
0029DB  1  A9 BE                LDA     #TK_TO          ; get "TO" token
0029DD  1  20 B4 32             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
0029E0  1  20 90 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0029E3  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0029E6  1               ; else do type mismatch
0029E6  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0029E8  1  09 7F                ORA     #$7F            ; set all non sign bits
0029EA  1  25 AD                AND     <FAC1_1         ; and FAC1 mantissa1
0029EC  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0029EE  1  A9 F9                LDA     #<LAB_159F      ; set return address low byte
0029F0  1  A0 29                LDY     #>LAB_159F      ; set return address high byte
0029F2  1  85 71                STA     <ut1_pl         ; save return address low byte
0029F4  1  84 72                STY     <ut1_ph         ; save return address high byte
0029F6  1  4C 46 32             JMP     LAB_1B66        ; round FAC1 and put on stack (returns to next instruction)
0029F9  1               
0029F9  1               LAB_159F:
0029F9  1  A9 4F                LDA     #<LAB_259C      ; set 1 pointer low addr (default step size)
0029FB  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high addr
0029FD  1  20 1B 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002A00  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002A04  1  C9 C3                CMP     #TK_STEP        ; compare with STEP token
002A06  1  D0 07                BNE     LAB_15B3        ; jump if not "STEP"
002A08  1               
002A08  1               ;.was step so ..
002A08  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002A0C  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002A0F  1               ; else do type mismatch
002A0F  1               LAB_15B3:
002A0F  1  20 27 44             JSR     LAB_27CA        ; return A=FF,C=1/-ve A=01,C=0/+ve
002A12  1  85 B0                STA     <FAC1_s         ; set FAC1 sign (b7)
002A14  1               ; this is +1 for +ve step and -1 for -ve step, in NEXT we
002A14  1               ; compare the FOR value and the TO value and return +1 if
002A14  1               ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
002A14  1               ; here (+/-1) is then compared to that result and if they
002A14  1               ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
002A14  1               ; the loop is done
002A14  1  20 3B 32             JSR     LAB_1B5B        ; push sign, round FAC1 and put on stack
002A17  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
002A19  1  48                   PHA                     ; push on stack
002A1A  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
002A1C  1  48                   PHA                     ; push on stack
002A1D  1  A9 81                LDA     #TK_FOR         ; get FOR token
002A1F  1  48                   PHA                     ; push on stack
002A20  1               
002A20  1               ; interpreter inner loop
002A20  1               
002A20  1               LAB_15C2:
002A20  1  20 7B 2A             JSR     LAB_1629        ; do CRTL-C check vector
002A23  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002A25  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002A27  1               
002A27  1  A6 88                LDX     <Clineh         ; continue line is $FFxx for immediate mode
002A29  1               ; ($00xx for RUN from immediate mode)
002A29  1  E8                   INX                     ; increment it (now $00 if immediate mode)
002A2A  1  F0 04                BEQ     LAB_15D1        ; branch if null (immediate mode)
002A2C  1               
002A2C  1  85 8B                STA     <Cpntrl         ; save continue pointer low byte
002A2E  1  84 8C                STY     <Cpntrh         ; save continue pointer high byte
002A30  1               LAB_15D1:
002A30  1  A0 00                LDY     #$00            ; clear index
002A32  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
002A34  1  F0 07                BEQ     LAB_15DC        ; branch if null [EOL]
002A36  1               
002A36  1  C9 3A                CMP     #':'            ; compare with ":"
002A38  1  F0 1D                BEQ     LAB_15F6        ; branch if = (statement separator)
002A3A  1               
002A3A  1               LAB_15D9:
002A3A  1  4C C7 32             JMP     LAB_SNER        ; else syntax error then warm start
002A3D  1               
002A3D  1               ; have reached [EOL]
002A3D  1               LAB_15DC:
002A3D  1  A0 02                LDY     #$02            ; set index
002A3F  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
002A41  1  18                   CLC                     ; clear carry for no "BREAK" message
002A42  1  F0 59                BEQ     LAB_1651        ; if null go to immediate mode (was immediate or [EOT]
002A44  1               ; marker)
002A44  1               
002A44  1  C8                   INY                     ; increment index
002A45  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # low byte
002A47  1  85 87                STA     <Clinel         ; save current line low byte
002A49  1  C8                   INY                     ; increment index
002A4A  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # high byte
002A4C  1  85 88                STA     <Clineh         ; save current line high byte
002A4E  1  98                   TYA                     ; A now = 4
002A4F  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002A51  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002A53  1  90 02                BCC     LAB_15F6        ; branch if no overflow
002A55  1               
002A55  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002A57  1               LAB_15F6:
002A57  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002A5B  1               
002A5B  1               
002A5B  1               
002A5B  1               
002A5B  1               LAB_15F9:
002A5B  1  20 61 2A             JSR     LAB_15FF        ; go interpret BASIC code from (<Bpntrl)
002A5E  1               LAB_15FC:
002A5E  1  4C 20 2A             JMP     LAB_15C2        ; loop
002A61  1               
002A61  1               ; interpret BASIC code from (<Bpntrl)
002A61  1               
002A61  1               LAB_15FF:
002A61  1  F0 56                BEQ     LAB_1628        ; exit if zero [EOL]
002A63  1               
002A63  1               LAB_1602:
002A63  1  0A                   ASL     A               ; *2 bytes per vector and normalise token
002A64  1  B0 03                BCS     LAB_1609        ; branch if was token
002A66  1  4C 1F 2D             JMP     LAB_LET         ; else go do implied LET
002A69  1               
002A69  1               LAB_1609:
002A69  1               TK_TABUSE       = (TK_TAB-$80)*2
002A69  1  C9 78                CMP     #TK_TABUSE      ; compare normalised token * 2 with TAB
002A6B  1  B0 CD                BCS     LAB_15D9        ; branch if A>=TAB (do syntax error then warm start)
002A6D  1               ; only tokens before TAB can start a line
002A6D  1  A8                   TAY                     ; copy to index
002A6E  1  B9 39 10             LDA     LAB_CTBL+1,Y    ; get vector high byte
002A71  1  48                   PHA                     ; onto stack
002A72  1  B9 38 10             LDA     LAB_CTBL,Y      ; get vector low byte
002A75  1  48                   PHA                     ; onto stack
002A76  1  22 BC 00 00          JSL     LAB_IGBY        ; jump to increment and scan memory
002A7A  1               ; then "return" to vector
002A7A  1  60                   RTS
002A7B  1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
002A7B  1               ; key press is detected.
002A7B  1               
002A7B  1               LAB_1629:
002A7B  1  6C 03 02             JMP     (VEC_CC)        ; ctrl c check vector
002A7E  1               
002A7E  1               ; if there was a key press it gets back here ..
002A7E  1               
002A7E  1               LAB_1636:
002A7E  1  C9 03                CMP     #$03            ; compare with CTRL-C
002A80  1               
002A80  1               ; perform STOP
002A80  1               
002A80  1               LAB_STOP:
002A80  1  B0 01                BCS     LAB_163B        ; branch if token follows STOP
002A82  1               ; else just END
002A82  1               ; END
002A82  1               
002A82  1               LAB_END:
002A82  1  18                   CLC                     ; clear the carry, indicate a normal program end
002A83  1               LAB_163B:
002A83  1  D0 67                BNE     LAB_167A        ; if wasn't CTRL-C or there is a following byte return
002A85  1               
002A85  1  A5 C4                LDA     <Bpntrh         ; get the BASIC execute pointer high byte
002A87  1  49 21                EOR     #>Ibuffs        ; compare with buffer address high byte (Cb unchanged)
002A89  1  F0 10                BEQ     LAB_164F        ; branch if the BASIC pointer is in the input buffer
002A8B  1               ; (can't continue in immediate mode)
002A8B  1               
002A8B  1               ; else ..
002A8B  1  49 21                EOR     #>Ibuffs        ; correct the bits
002A8D  1  A4 C3                LDY     <Bpntrl         ; get BASIC execute pointer low byte
002A8F  1  84 8B                STY     <Cpntrl         ; save continue pointer low byte
002A91  1  85 8C                STA     <Cpntrh         ; save continue pointer high byte
002A93  1               LAB_1647:
002A93  1  A5 87                LDA     <Clinel         ; get current line low byte
002A95  1  A4 88                LDY     <Clineh         ; get current line high byte
002A97  1  85 89                STA     <Blinel         ; save break line low byte
002A99  1  84 8A                STY     <Blineh         ; save break line high byte
002A9B  1               LAB_164F:
002A9B  1  68                   PLA                     ; pull return address low
002A9C  1  68                   PLA                     ; pull return address high
002A9D  1               LAB_1651:
002A9D  1  90 07                BCC     LAB_165E        ; if was program end just do warm start
002A9F  1               
002A9F  1               ; else ..
002A9F  1               
002A9F  1               ;        LDA     <VIDEOMODE
002A9F  1               ;        CMP     #2
002A9F  1               ;        BEQ     LAB_1651A
002A9F  1               ;        LDX     #2
002A9F  1               ;        JSR     V_SCREEN1
002A9F  1               LAB_1651A:
002A9F  1  A9 77                LDA     #<LAB_BMSG      ; point to "Break" low byte
002AA1  1  A0 17                LDY     #>LAB_BMSG      ; point to "Break" high byte
002AA3  1  4C 96 26             JMP     LAB_1269        ; print "Break" and do warm start
002AA6  1               
002AA6  1               LAB_165E:
002AA6  1  4C A1 26             JMP     LAB_1274        ; go do warm start
002AA9  1               
002AA9  1               ; perform RESTORE
002AA9  1               
002AA9  1               LAB_RESTORE:
002AA9  1  D0 0F                BNE     LAB_RESTOREn    ; branch if next character not null (RESTORE n)
002AAB  1               
002AAB  1               LAB_161A:
002AAB  1  38                   SEC                     ; set carry for subtract
002AAC  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002AAE  1  E9 01                SBC     #$01            ; -1
002AB0  1  A4 7A                LDY     <Smemh          ; get start of mem high byte
002AB2  1  B0 01                BCS     LAB_1624        ; branch if no underflow
002AB4  1               
002AB4  1               LAB_uflow:
002AB4  1  88                   DEY                     ; else decrement high byte
002AB5  1               LAB_1624:
002AB5  1  85 8F                STA     <Dptrl          ; save DATA pointer low byte
002AB7  1  84 90                STY     <Dptrh          ; save DATA pointer high byte
002AB9  1               LAB_1628:
002AB9  1  60                   RTS
002ABA  1               
002ABA  1               ; is RESTORE n
002ABA  1               LAB_RESTOREn:
002ABA  1  20 BD 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002ABD  1  20 0E 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002AC0  1  A5 88                LDA     <Clineh         ; get current line high byte
002AC2  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002AC4  1  B0 0B                BCS     LAB_reset_search; branch if >= (start search from beginning)
002AC6  1               
002AC6  1  98                   TYA                     ; else copy line index to A
002AC7  1  38                   SEC                     ; set carry (+1)
002AC8  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002ACA  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002ACC  1  90 07                BCC     LAB_go_search   ; branch if no overflow to high byte
002ACE  1               
002ACE  1  E8                   INX                     ; increment high byte
002ACF  1  B0 04                BCS     LAB_go_search   ; branch always (can never be carry clear)
002AD1  1               
002AD1  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002AD1  1               
002AD1  1               LAB_reset_search:
002AD1  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002AD3  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002AD5  1               
002AD5  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002AD5  1               
002AD5  1               LAB_go_search:
002AD5  1               
002AD5  1  20 81 28             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002AD8  1  B0 03                BCS     LAB_line_found  ; if carry set go set pointer
002ADA  1               
002ADA  1  4C E0 2B             JMP     LAB_16F7        ; else go do "Undefined statement" error
002ADD  1               
002ADD  1               LAB_line_found:
002ADD  1               ; carry already set for subtract
002ADD  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002ADF  1  E9 01                SBC     #$01            ; -1
002AE1  1  A4 AB                LDY     <Baslnh         ; get pointer high byte
002AE3  1  B0 D0                BCS     LAB_1624        ; branch if no underflow (save DATA pointer and return)
002AE5  1               
002AE5  1  90 CD                BCC     LAB_uflow       ; else decrement high byte then save DATA pointer and
002AE7  1               ; return (branch always)
002AE7  1               
002AE7  1               ; perform NULL
002AE7  1               
002AE7  1               LAB_NULL:
002AE7  1  20 3D 3E             JSR     LAB_GTBY        ; get byte parameter
002AEA  1  86 0D                STX     <Nullct         ; save new NULL count
002AEC  1               LAB_167A:
002AEC  1  60                   RTS
002AED  1               
002AED  1               ; perform CONT
002AED  1               
002AED  1               LAB_CONT:
002AED  1  D0 FD                BNE     LAB_167A        ; if following byte exit to do syntax error
002AEF  1               
002AEF  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002AF1  1  D0 05                BNE     LAB_166C        ; go do continue if we can
002AF3  1               
002AF3  1  A2 1E                LDX     #$1E            ; error code $1E ("Can't continue" error)
002AF5  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
002AF8  1               
002AF8  1               ; we can continue so ..
002AF8  1               LAB_166C:
002AF8  1  A9 93                LDA     #TK_ON          ; set token for ON
002AFA  1  20 57 4B             JSR     LAB_IRQ         ; set IRQ flags
002AFD  1  A9 93                LDA     #TK_ON          ; set token for ON
002AFF  1  20 5A 4B             JSR     LAB_NMI         ; set NMI flags
002B02  1               
002B02  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002B04  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002B06  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002B08  1  A5 89                LDA     <Blinel         ; get break line low byte
002B0A  1  A4 8A                LDY     <Blineh         ; get break line high byte
002B0C  1  85 87                STA     <Clinel         ; set current line low byte
002B0E  1  84 88                STY     <Clineh         ; set current line high byte
002B10  1  60                   RTS
002B11  1               
002B11  1               ; perform RUN
002B11  1               
002B11  1               LAB_RUN:
002B11  1  D0 03                BNE     LAB_1696        ; branch if RUN n
002B13  1  4C BE 28             JMP     LAB_1477        ; reset execution to start, clear variables, flush stack and
002B16  1               ; return
002B16  1               
002B16  1               ; does RUN n
002B16  1               
002B16  1               LAB_1696:
002B16  1  20 CB 28             JSR     LAB_147A        ; go do "CLEAR"
002B19  1  F0 2F                BEQ     LAB_16B0        ; get n and do GOTO n (branch always as CLEAR sets Z=1)
002B1B  1               
002B1B  1               ; perform DO
002B1B  1               
002B1B  1               LAB_DO:
002B1B  1  A9 05                LDA     #$05            ; need 5 bytes for DO
002B1D  1  20 3A 26             JSR     LAB_1212        ; check room on stack for A bytes
002B20  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002B22  1  48                   PHA                     ; push on stack
002B23  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002B25  1  48                   PHA                     ; push on stack
002B26  1  A5 88                LDA     <Clineh         ; get current line high byte
002B28  1  48                   PHA                     ; push on stack
002B29  1  A5 87                LDA     <Clinel         ; get current line low byte
002B2B  1  48                   PHA                     ; push on stack
002B2C  1  A9 9C                LDA     #TK_DO          ; token for DO
002B2E  1  48                   PHA                     ; push on stack
002B2F  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002B33  1  4C 20 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002B36  1               
002B36  1               ; perform GOSUB
002B36  1               
002B36  1               LAB_GOSUB:
002B36  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
002B38  1  20 3A 26             JSR     LAB_1212        ; check room on stack for A bytes
002B3B  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002B3D  1  48                   PHA                     ; push on stack
002B3E  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002B40  1  48                   PHA                     ; push on stack
002B41  1  A5 88                LDA     <Clineh         ; get current line high byte
002B43  1  48                   PHA                     ; push on stack
002B44  1  A5 87                LDA     <Clinel         ; get current line low byte
002B46  1  48                   PHA                     ; push on stack
002B47  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
002B49  1  48                   PHA                     ; push on stack
002B4A  1               LAB_16B0:
002B4A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002B4E  1  20 54 2B             JSR     LAB_GOTO        ; perform GOTO n
002B51  1  4C 20 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002B54  1               ; (can't RTS, we used the stack!)
002B54  1               
002B54  1               ; perform GOTO
002B54  1               
002B54  1               LAB_GOTO:
002B54  1  20 BD 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002B57  1  20 0E 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002B5A  1  A5 88                LDA     <Clineh         ; get current line high byte
002B5C  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002B5E  1  B0 0B                BCS     LAB_16D0        ; branch if >= (start search from beginning)
002B60  1               
002B60  1  98                   TYA                     ; else copy line index to A
002B61  1  38                   SEC                     ; set carry (+1)
002B62  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002B64  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002B66  1  90 07                BCC     LAB_16D4        ; branch if no overflow to high byte
002B68  1               
002B68  1  E8                   INX                     ; increment high byte
002B69  1  B0 04                BCS     LAB_16D4        ; branch always (can never be carry)
002B6B  1               
002B6B  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002B6B  1               
002B6B  1               LAB_16D0:
002B6B  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002B6D  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002B6F  1               
002B6F  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002B6F  1               
002B6F  1               LAB_16D4:
002B6F  1  20 81 28             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002B72  1  90 6C                BCC     LAB_16F7        ; if carry clear go do "Undefined statement" error
002B74  1               ; (unspecified statement)
002B74  1               
002B74  1               ; carry already set for subtract
002B74  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002B76  1  E9 01                SBC     #$01            ; -1
002B78  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002B7A  1  A5 AB                LDA     <Baslnh         ; get pointer high byte
002B7C  1  E9 00                SBC     #$00            ; subtract carry
002B7E  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002B80  1               LAB_16E5:
002B80  1  60                   RTS
002B81  1               
002B81  1               LAB_DONOK:
002B81  1  A2 22                LDX     #$22            ; error code $22 ("LOOP without DO" error)
002B83  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
002B86  1               
002B86  1               ; perform LOOP
002B86  1               
002B86  1               LAB_LOOP:
002B86  1  A8                   TAY                     ; save following token
002B87  1  A3 03                LDA     3,S             ; get token byte from stack
002B89  1  C9 9C                CMP     #TK_DO          ; compare with DO token
002B8B  1  D0 F4                BNE     LAB_DONOK       ; branch if no matching DO
002B8D  1               
002B8D  1               ; FIXUP STACK
002B8D  1  C2 10                INDEX16
002B8F  1  BA                   TSX
002B90  1  E8                   INX                     ; dump calling routine return address
002B91  1  E8                   INX                     ; dump calling routine return address
002B92  1  9A                   TXS                     ; correct stack
002B93  1  E2 10                INDEX8
002B95  1               
002B95  1  98                   TYA                     ; get saved following token back
002B96  1  F0 20                BEQ     LoopAlways      ; if no following token loop forever
002B98  1               ; (stack pointer in X)
002B98  1               
002B98  1  C9 3A                CMP     #':'            ; could be ':'
002B9A  1  F0 1C                BEQ     LoopAlways      ; if :... loop forever
002B9C  1               
002B9C  1  E9 C4                SBC     #TK_UNTIL       ; subtract token for UNTIL, we know carry is set here
002B9E  1  AA                   TAX                     ; copy to X (if it was UNTIL then Y will be correct)
002B9F  1  F0 04                BEQ     DoRest          ; branch if was UNTIL
002BA1  1               
002BA1  1  CA                   DEX                     ; decrement result
002BA2  1  D0 64                BNE     LAB_16FC        ; if not WHILE go do syntax error and warm start
002BA4  1               ; only if the token was WHILE will this fail
002BA4  1               
002BA4  1  CA                   DEX                     ; set invert result byte
002BA5  1               DoRest:
002BA5  1  86 98                STX     <Frnxth         ; save invert result byte
002BA7  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002BAB  1  20 A1 31             JSR     LAB_EVEX        ; evaluate expression
002BAE  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002BB0  1  F0 02                BEQ     DoCmp           ; if =0 go do straight compare
002BB2  1               
002BB2  1  A9 FF                LDA     #$FF            ; else set all bits
002BB4  1               DoCmp:
002BB4  1  45 98                EOR     <Frnxth         ; EOR with invert byte
002BB6  1  D0 17                BNE     LoopDone        ; if <> 0 clear stack and back to interpreter loop
002BB8  1               
002BB8  1               ; loop condition wasn't met so do it again
002BB8  1               LoopAlways:
002BB8  1  A3 02                LDA     2,S             ; get current line low byte
002BBA  1  85 87                STA     <Clinel         ; save current line low byte
002BBC  1  A3 03                LDA     3,S             ; get current line high byte
002BBE  1  85 88                STA     <Clineh         ; save current line high byte
002BC0  1  A3 04                LDA     4,S             ; get BASIC execute pointer low byte
002BC2  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002BC4  1  A3 05                LDA     5,S             ; get BASIC execute pointer high byte
002BC6  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002BC8  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002BCC  1  4C 20 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002BCF  1               
002BCF  1               ; clear stack and back to interpreter loop
002BCF  1               LoopDone:
002BCF  1  C2 10                INDEX16
002BD1  1  BA                   TSX
002BD2  1  E8                   INX                     ; dump DO token
002BD3  1  E8                   INX                     ; dump current line low byte
002BD4  1  E8                   INX                     ; dump current line high byte
002BD5  1  E8                   INX                     ; dump BASIC execute pointer low byte
002BD6  1  E8                   INX                     ; dump BASIC execute pointer high byte
002BD7  1  9A                   TXS                     ; correct stack
002BD8  1  E2 10                INDEX8
002BDA  1  4C FA 2B             JMP     LAB_DATA        ; go perform DATA (find : or [EOL])
002BDD  1               
002BDD  1               ; do the return without gosub error
002BDD  1               
002BDD  1               LAB_16F4:
002BDD  1  A2 04                LDX     #$04            ; error code $04 ("RETURN without GOSUB" error)
002BDF  1  2C                   .BYTE   $2C             ; makes next line BIT LAB_0EA2
002BE0  1               
002BE0  1               LAB_16F7:                       ; do undefined statement error
002BE0  1  A2 0E                LDX     #$0E            ; error code $0E ("Undefined statement" error)
002BE2  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
002BE5  1               
002BE5  1               ; perform RETURN
002BE5  1               
002BE5  1               LAB_RETURN:
002BE5  1  D0 99                BNE     LAB_16E5        ; exit if following token (to allow syntax error)
002BE7  1               
002BE7  1               LAB_16E8:
002BE7  1  68                   PLA                     ; dump calling routine return address
002BE8  1  68                   PLA                     ; dump calling routine return address
002BE9  1  68                   PLA                     ; pull token
002BEA  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002BEC  1  D0 EF                BNE     LAB_16F4        ; branch if no matching GOSUB
002BEE  1               
002BEE  1               LAB_16FF:
002BEE  1  68                   PLA                     ; pull current line low byte
002BEF  1  85 87                STA     <Clinel         ; save current line low byte
002BF1  1  68                   PLA                     ; pull current line high byte
002BF2  1  85 88                STA     <Clineh         ; save current line high byte
002BF4  1  68                   PLA                     ; pull BASIC execute pointer low byte
002BF5  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002BF7  1  68                   PLA                     ; pull BASIC execute pointer high byte
002BF8  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002BFA  1               
002BFA  1               ; now do the DATA statement as we could be returning into
002BFA  1               ; the middle of an ON <var> GOSUB n,m,p,q line
002BFA  1               ; (the return address used by the DATA statement is the one
002BFA  1               ; pushed before the GOSUB was executed!)
002BFA  1               
002BFA  1               ; perform DATA
002BFA  1               
002BFA  1               LAB_DATA:
002BFA  1  20 0B 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002BFD  1               
002BFD  1               ; set BASIC execute pointer
002BFD  1               LAB_170F:
002BFD  1  98                   TYA                     ; copy index to A
002BFE  1  18                   CLC                     ; clear carry for add
002BFF  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002C01  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002C03  1  90 02                BCC     LAB_1719        ; skip next if no carry
002C05  1               
002C05  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002C07  1               LAB_1719:
002C07  1  60                   RTS
002C08  1               
002C08  1               LAB_16FC:
002C08  1  4C C7 32             JMP     LAB_SNER        ; do syntax error then warm start
002C0B  1               
002C0B  1               ; scan for next BASIC statement ([:] or [EOL])
002C0B  1               ; returns Y as index to [:] or [EOL]
002C0B  1               
002C0B  1               LAB_SNBS:
002C0B  1  A2 3A                LDX     #':'            ; set look for character = ":"
002C0D  1  2C                   .BYTE   $2C             ; makes next line BIT $00A2
002C0E  1               
002C0E  1               ; scan for next BASIC line
002C0E  1               ; returns Y as index to [EOL]
002C0E  1               
002C0E  1               LAB_SNBL:
002C0E  1  A2 00                LDX     #$00            ; set alt search character = [EOL]
002C10  1  A0 00                LDY     #$00            ; set search character = [EOL]
002C12  1  84 5C                STY     <Asrch          ; store search character
002C14  1               LAB_1725:
002C14  1  8A                   TXA                     ; get alt search character
002C15  1  45 5C                EOR     <Asrch          ; toggle search character, effectively swap with $00
002C17  1  85 5C                STA     <Asrch          ; save swapped search character
002C19  1               LAB_172D:
002C19  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
002C1B  1  F0 EA                BEQ     LAB_1719        ; exit if null [EOL]
002C1D  1               
002C1D  1  C5 5C                CMP     <Asrch          ; compare with search character
002C1F  1  F0 E6                BEQ     LAB_1719        ; exit if found
002C21  1               
002C21  1  C8                   INY                     ; increment index
002C22  1  C9 22                CMP     #$22            ; compare current character with open quote
002C24  1  D0 F3                BNE     LAB_172D        ; if not open quote go get next character
002C26  1               
002C26  1  F0 EC                BEQ     LAB_1725        ; if found go swap search character for alt search character
002C28  1               
002C28  1               ; perform IF
002C28  1               
002C28  1               LAB_IF:
002C28  1  20 A1 31             JSR     LAB_EVEX        ; evaluate the expression
002C2B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002C2F  1  C9 C1                CMP     #TK_THEN        ; compare with THEN token
002C31  1  F0 12                BEQ     LAB_174B        ; if it was THEN go do IF
002C33  1               
002C33  1               ; wasn't IF .. THEN so must be IF .. GOTO
002C33  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002C35  1  D0 D1                BNE     LAB_16FC        ; if it wasn't GOTO go do syntax error
002C37  1               
002C37  1  A6 C3                LDX     <Bpntrl         ; save the basic pointer low byte
002C39  1  A4 C4                LDY     <Bpntrh         ; save the basic pointer high byte
002C3B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002C3F  1  B0 C7                BCS     LAB_16FC        ; if not numeric go do syntax error
002C41  1               
002C41  1  86 C3                STX     <Bpntrl         ; restore the basic pointer low byte
002C43  1  84 C4                STY     <Bpntrh         ; restore the basic pointer high byte
002C45  1               LAB_174B:
002C45  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002C47  1  F0 1F                BEQ     LAB_174E        ; if the result was zero go look for an ELSE
002C49  1               
002C49  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
002C4D  1  B0 03                BCS     LAB_174D        ; if not numeric go do var or keyword
002C4F  1               
002C4F  1               LAB_174C:
002C4F  1  4C 54 2B             JMP     LAB_GOTO        ; else was numeric so do GOTO n
002C52  1               
002C52  1               ; is var or keyword
002C52  1               LAB_174D:
002C52  1  C9 90                CMP     #TK_RETURN      ; compare the byte with the token for RETURN
002C54  1  D0 03                BNE     LAB_174G        ; if it wasn't RETURN go interpret BASIC code from (<Bpntrl)
002C56  1               ; and return to this code to process any following code
002C56  1               
002C56  1  4C 63 2A             JMP     LAB_1602        ; else it was RETURN so interpret BASIC code from (<Bpntrl)
002C59  1               ; but don't return here
002C59  1               
002C59  1               LAB_174G:
002C59  1  20 61 2A             JSR     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002C5C  1               
002C5C  1               ; the IF was executed and there may be a following ELSE so the code needs to return
002C5C  1               ; here to check and ignore the ELSE if present
002C5C  1               
002C5C  1  A0 00                LDY     #$00            ; clear the index
002C5E  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002C60  1  C9 BD                CMP     #TK_ELSE        ; compare it with the token for ELSE
002C62  1  D0 03                BNE     LAB_DATA_A
002C64  1  4C FA 2B             JMP     LAB_DATA        ; if ELSE ignore the following statement
002C67  1               
002C67  1               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
002C67  1               ; following ELSE will, correctly, cause a syntax error
002C67  1               LAB_DATA_A:
002C67  1  60                   RTS                     ; else return to the interpreter inner loop
002C68  1               
002C68  1               ; perform ELSE after IF
002C68  1               
002C68  1               LAB_174E:
002C68  1  A0 00                LDY     #$00            ; clear the BASIC byte index
002C6A  1  A2 01                LDX     #$01            ; clear the nesting depth
002C6C  1               LAB_1750:
002C6C  1  C8                   INY                     ; increment the BASIC byte index
002C6D  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002C6F  1  F0 0F                BEQ     LAB_1753        ; if EOL go add the pointer and return
002C71  1               
002C71  1  C9 8D                CMP     #TK_IF          ; compare the byte with the token for IF
002C73  1  D0 03                BNE     LAB_1752        ; if not IF token skip the depth increment
002C75  1               
002C75  1  E8                   INX                     ; else increment the nesting depth ..
002C76  1  D0 F4                BNE     LAB_1750        ; .. and continue looking
002C78  1               
002C78  1               LAB_1752:
002C78  1  C9 BD                CMP     #TK_ELSE        ; compare the byte with the token for ELSE
002C7A  1  D0 F0                BNE     LAB_1750        ; if not ELSE token continue looking
002C7C  1               
002C7C  1  CA                   DEX                     ; was ELSE so decrement the nesting depth
002C7D  1  D0 ED                BNE     LAB_1750        ; loop if still nested
002C7F  1               
002C7F  1  C8                   INY                     ; increment the BASIC byte index past the ELSE
002C80  1               
002C80  1               ; found the matching ELSE, now do <{n|statement}>
002C80  1               
002C80  1               LAB_1753:
002C80  1  98                   TYA                     ; else copy line index to A
002C81  1  18                   CLC                     ; clear carry for add
002C82  1  65 C3                ADC     <Bpntrl         ; add the BASIC execute pointer low byte
002C84  1  85 C3                STA     <Bpntrl         ; save the BASIC execute pointer low byte
002C86  1  90 02                BCC     LAB_1754        ; branch if no overflow to high byte
002C88  1               
002C88  1  E6 C4                INC     <Bpntrh         ; else increment the BASIC execute pointer high byte
002C8A  1               LAB_1754:
002C8A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002C8E  1  90 BF                BCC     LAB_174C        ; if numeric do GOTO n
002C90  1               ; the code will return to the interpreter loop at the
002C90  1               ; tail end of the GOTO <n>
002C90  1               
002C90  1  4C 61 2A             JMP     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002C93  1               ; the code will return to the interpreter loop at the
002C93  1               ; tail end of the <statement>
002C93  1               
002C93  1               ; perform REM, skip (rest of) line
002C93  1               
002C93  1               LAB_REM:
002C93  1  20 0E 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002C96  1  4C FD 2B             JMP     LAB_170F        ; go set BASIC execute pointer and return, branch always
002C99  1               
002C99  1               LAB_16FD:
002C99  1  4C C7 32             JMP     LAB_SNER        ; do syntax error then warm start
002C9C  1               
002C9C  1               ; perform ON
002C9C  1               
002C9C  1               LAB_ON:
002C9C  1               LAB_NONM:
002C9C  1  20 3D 3E             JSR     LAB_GTBY        ; get byte parameter
002C9F  1  48                   PHA                     ; push GOTO/GOSUB token
002CA0  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002CA2  1  F0 04                BEQ     LAB_176B        ; branch if GOSUB
002CA4  1               
002CA4  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002CA6  1               LAB_1767:
002CA6  1  D0 F1                BNE     LAB_16FD        ; if not GOTO do syntax error then warm start
002CA8  1               
002CA8  1               
002CA8  1               ; next character was GOTO or GOSUB
002CA8  1               
002CA8  1               LAB_176B:
002CA8  1  C6 AF                DEC     <FAC1_3         ; decrement index (byte value)
002CAA  1  D0 04                BNE     LAB_1773        ; branch if not zero
002CAC  1               
002CAC  1  68                   PLA                     ; pull GOTO/GOSUB token
002CAD  1  4C 63 2A             JMP     LAB_1602        ; go execute it
002CB0  1               
002CB0  1               LAB_1773:
002CB0  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002CB4  1  20 BD 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer (skip this n)
002CB7  1               ; (we could LDX #',' and JSR LAB_SNBL+2, then we
002CB7  1               ; just BNE LAB_176B for the loop. should be quicker ..
002CB7  1               ; no we can't, what if we meet a colon or [EOL]?)
002CB7  1  C9 2C                CMP     #$2C            ; compare next character with ","
002CB9  1  F0 ED                BEQ     LAB_176B        ; loop if ","
002CBB  1               
002CBB  1               LAB_177E:
002CBB  1  68                   PLA                     ; else pull keyword token (run out of options)
002CBC  1               ; also dump +/-1 pointer low byte and exit
002CBC  1               LAB_177F:
002CBC  1  60                   RTS
002CBD  1               
002CBD  1               ; takes n * 106 + 11 cycles where n is the number of digits
002CBD  1               
002CBD  1               ; get fixed-point number into temp integer
002CBD  1               
002CBD  1               LAB_GFPN:
002CBD  1  A2 00                LDX     #$00            ; clear reg
002CBF  1  86 11                STX     <Itempl         ; clear temporary integer low byte
002CC1  1               LAB_1785:
002CC1  1  86 12                STX     <Itemph         ; save temporary integer high byte
002CC3  1  B0 F7                BCS     LAB_177F        ; return if carry set, end of scan, character was
002CC5  1               ; not 0-9
002CC5  1               
002CC5  1  E0 19                CPX     #$19            ; compare high byte with $19
002CC7  1  A8                   TAY                     ; ensure Zb = 0 if the branch is taken
002CC8  1  B0 DC                BCS     LAB_1767        ; branch if >=, makes max line # 63999 because next
002CCA  1               ; bit does *$0A, = 64000, compare at target will fail
002CCA  1               ; and do syntax error
002CCA  1               
002CCA  1  E9 2F                SBC     #'0'-1          ; subtract "0", $2F + carry, from byte
002CCC  1  A8                   TAY                     ; copy binary digit
002CCD  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
002CCF  1  0A                   ASL     A               ; *2 low byte
002CD0  1  26 12                ROL     <Itemph         ; *2 high byte
002CD2  1  0A                   ASL     A               ; *2 low byte
002CD3  1  26 12                ROL     <Itemph         ; *2 high byte, *4
002CD5  1  65 11                ADC     <Itempl         ; + low byte, *5
002CD7  1  85 11                STA     <Itempl         ; save it
002CD9  1  8A                   TXA                     ; get high byte copy to A
002CDA  1  65 12                ADC     <Itemph         ; + high byte, *5
002CDC  1  06 11                ASL     <Itempl         ; *2 low byte, *10d
002CDE  1  2A                   ROL     A               ; *2 high byte, *10d
002CDF  1  AA                   TAX                     ; copy high byte back to X
002CE0  1  98                   TYA                     ; get binary digit back
002CE1  1  65 11                ADC     <Itempl         ; add number low byte
002CE3  1  85 11                STA     <Itempl         ; save number low byte
002CE5  1  90 01                BCC     LAB_17B3        ; if no overflow to high byte get next character
002CE7  1               
002CE7  1  E8                   INX                     ; else increment high byte
002CE8  1               LAB_17B3:
002CE8  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002CEC  1  4C C1 2C             JMP     LAB_1785        ; loop for next character
002CEF  1               
002CEF  1               ; perform DEC
002CEF  1               
002CEF  1               LAB_DEC:
002CEF  1  A9 53                LDA     #<LAB_2AFD      ; set -1 pointer low byte
002CF1  1  2C                   .BYTE   $2C             ; BIT abs to skip the LDA below
002CF2  1               
002CF2  1               ; perform INC
002CF2  1               
002CF2  1               LAB_INC:
002CF2  1  A9 4F                LDA     #<LAB_259C      ; set 1 pointer low byte
002CF4  1               LAB_17B5:
002CF4  1  48                   PHA                     ; save +/-1 pointer low byte
002CF5  1               LAB_17B7:
002CF5  1  20 9E 34             JSR     LAB_GVAR        ; get var address
002CF8  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002CFA  1  30 20                BMI     IncrErr         ; exit if string
002CFC  1               
002CFC  1  85 97                STA     <Lvarpl         ; save var address low byte
002CFE  1  84 98                STY     <Lvarph         ; save var address high byte
002D00  1  20 1B 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002D03  1  68                   PLA                     ; get +/-1 pointer low byte
002D04  1  48                   PHA                     ; save +/-1 pointer low byte
002D05  1  A0 18                LDY     #>LAB_259C      ; set +/-1 pointer high byte (both the same)
002D07  1  20 06 40             JSR     LAB_246C        ; add (AY) to FAC1
002D0A  1  20 91 43             JSR     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl)
002D0D  1               
002D0D  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002D11  1  C9 2C                CMP     #','            ; compare with ","
002D13  1  D0 A6                BNE     LAB_177E        ; exit if not "," (either end or error)
002D15  1               
002D15  1               ; was "," so another INCR variable to do
002D15  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D19  1  4C F5 2C             JMP     LAB_17B7        ; go do next var
002D1C  1               
002D1C  1               IncrErr:
002D1C  1  4C 9C 31             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
002D1F  1               
002D1F  1               ; perform LET
002D1F  1               
002D1F  1               LAB_LET:
002D1F  1  20 9E 34             JSR     LAB_GVAR        ; get var address
002D22  1  85 97                STA     <Lvarpl         ; save var address low byte
002D24  1  84 98                STY     <Lvarph         ; save var address high byte
002D26  1  A9 D2                LDA     #TK_EQUAL       ; get = token
002D28  1  20 B4 32             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002D2B  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002D2D  1  48                   PHA                     ; push data type flag
002D2E  1  20 A1 31             JSR     LAB_EVEX        ; evaluate expression
002D31  1  68                   PLA                     ; pop data type flag
002D32  1  2A                   ROL     A               ; set carry if type = string
002D33  1  20 93 31             JSR     LAB_CKTM        ; type match check, set C for string
002D36  1  D0 03                BNE     LAB_17D5        ; branch if string
002D38  1               
002D38  1  4C 91 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002D3B  1               
002D3B  1               ; string LET
002D3B  1               
002D3B  1               LAB_17D5:
002D3B  1  A0 02                LDY     #$02            ; set index to pointer high byte
002D3D  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string pointer high byte
002D41  1  B5 AE C9 00  
002D45  1  D0 04 A2 00  
002D53  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
002D55  1  90 2B                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002D57  1  D0 1B                BNE     LAB_17E6        ; branch if >
002D59  1               ; else was equal so compare low bytes
002D59  1  88                   DEY                     ; decrement index
002D5A  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get pointer low byte
002D5E  1  B5 AE C9 00  
002D62  1  D0 04 A2 00  
002D70  1  C5 81                CMP     <Sstorl         ; compare bottom of string space low byte
002D72  1  90 0E                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002D74  1               
002D74  1               ; pointer was >= to bottom of string space pointer
002D74  1               LAB_17E6:
002D74  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002D76  1  C4 7C                CPY     <Svarh          ; compare start of vars high byte
002D78  1  90 08                BCC     LAB_17F4        ; branch if less (descriptor is on stack)
002D7A  1               
002D7A  1  D0 0D                BNE     LAB_17FB        ; branch if greater (descriptor is not on stack)
002D7C  1               
002D7C  1               ; else high bytes were equal so ..
002D7C  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002D7E  1  C5 7B                CMP     <Svarl          ; compare start of vars low byte
002D80  1  B0 07                BCS     LAB_17FB        ; branch if >= (descriptor is not on stack)
002D82  1               
002D82  1               LAB_17F4:
002D82  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002D84  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002D86  1  4C B3 2D             JMP     LAB_1811        ; clean stack, copy descriptor to variable and return
002D89  1               
002D89  1               ; make space and copy string
002D89  1               LAB_17FB:
002D89  1               
002D89  1  A0 00                LDY     #$00            ; index to length
002D8B  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string length
002D8F  1  B5 AE C9 00  
002D93  1  D0 04 A2 00  
002DA1  1  20 C5 38             JSR     LAB_209C        ; copy string
002DA4  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
002DA6  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
002DA8  1  85 B8                STA     <ssptr_l        ; save descriptor pointer low byte
002DAA  1  84 B9                STY     <ssptr_h        ; save descriptor pointer high byte
002DAC  1  20 23 3B             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
002DAF  1  A9 AC                LDA     #<FAC1_e        ; set descriptor pointer low byte
002DB1  1  A0 00                LDY     #>FAC1_e        ; get descriptor pointer high byte
002DB3  1               
002DB3  1               ; clean stack and assign value to string variable
002DB3  1               LAB_1811:
002DB3  1  85 9E                STA     <des_2l         ; save descriptor_2 pointer low byte
002DB5  1  84 9F                STY     <des_2h         ; save descriptor_2 pointer high byte
002DB7  1  20 25 3C             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
002DBA  1  A0 00                LDY     #$00            ; index to length
002DBC  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string length
002DC0  1  B5 9E C9 00  
002DC4  1  D0 04 A2 00  
002DD2  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002DD6  1  01 B5 97 C9  
002DDA  1  00 D0 04 A2  
002DE8  1  C8                   INY                     ; index to string pointer low byte
002DE9  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer low byte
002DED  1  B5 9E C9 00  
002DF1  1  D0 04 A2 00  
002DFF  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002E03  1  01 B5 97 C9  
002E07  1  00 D0 04 A2  
002E15  1  C8                   INY                     ; index to string pointer high byte
002E16  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer high byte
002E1A  1  B5 9E C9 00  
002E1E  1  D0 04 A2 00  
002E2C  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002E30  1  01 B5 97 C9  
002E34  1  00 D0 04 A2  
002E42  1  60                   RTS
002E43  1               
002E43  1               ; perform GET
002E43  1               
002E43  1               LAB_GET:
002E43  1  20 9E 34             JSR     LAB_GVAR        ; get var address
002E46  1  85 97                STA     <Lvarpl         ; save var address low byte
002E48  1  84 98                STY     <Lvarph         ; save var address high byte
002E4A  1  20 3C 4B             JSR     INGET           ; get input byte
002E4D  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002E4F  1  30 07                BMI     LAB_GETS        ; go get string character
002E51  1               
002E51  1               ; was numeric get
002E51  1  A8                   TAY                     ; copy character to Y
002E52  1  20 69 37             JSR     LAB_1FD0        ; convert Y to byte in FAC1
002E55  1  4C 91 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002E58  1               
002E58  1               LAB_GETS:
002E58  1  48                   PHA                     ; save character
002E59  1  A9 01                LDA     #$01            ; string is single byte
002E5B  1  B0 01                BCS     LAB_IsByte      ; branch if byte received
002E5D  1               
002E5D  1  68                   PLA                     ; string is null
002E5E  1               LAB_IsByte:
002E5E  1  20 CD 38             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
002E61  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
002E61  1  F0 19                BEQ     LAB_NoSt        ; skip store if null string
002E63  1               
002E63  1  68                   PLA                     ; get character back
002E64  1  A0 00                LDY     #$00            ; clear index
002E66  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
002E6A  1  01 B5 AD C9  
002E6E  1  00 D0 04 A2  
002E7C  1               LAB_NoSt:
002E7C  1  20 30 39             JSR     LAB_RTST        ; check for space on descriptor stack then put address
002E7F  1               ; and length on descriptor stack and update stack pointers
002E7F  1               
002E7F  1  4C 3B 2D             JMP     LAB_17D5        ; do string LET and return
002E82  1               
002E82  1               ; perform PRINT
002E82  1               
002E82  1               LAB_1829:
002E82  1  20 27 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002E85  1               LAB_182C:
002E85  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002E89  1               
002E89  1               ; PRINT
002E89  1               
002E89  1               LAB_PRINT:
002E89  1  F0 51                BEQ     LAB_CRLF        ; if nothing following just print CR/LF
002E8B  1               
002E8B  1               LAB_1831:
002E8B  1  C9 BC                CMP     #TK_TAB         ; compare with TAB( token
002E8D  1  F0 6C                BEQ     LAB_18A2        ; go do TAB/SPC
002E8F  1               
002E8F  1  C9 C0                CMP     #TK_SPC         ; compare with SPC( token
002E91  1  F0 68                BEQ     LAB_18A2        ; go do TAB/SPC
002E93  1               
002E93  1  C9 2C                CMP     #','            ; compare with ","
002E95  1  F0 4E                BEQ     LAB_188B        ; go do move to next TAB mark
002E97  1               
002E97  1  C9 3B                CMP     #$3B            ; compare with ";"
002E99  1  F0 7F                BEQ     LAB_18BD        ; if ";" continue with PRINT processing
002E9B  1               
002E9B  1  20 A1 31             JSR     LAB_EVEX        ; evaluate expression
002E9E  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002EA0  1  30 E0                BMI     LAB_1829        ; branch if string
002EA2  1               
002EA2  1  20 55 46             JSR     LAB_296E        ; convert FAC1 to string
002EA5  1  20 D7 38             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002EA8  1  A0 00                LDY     #$00            ; clear index
002EAA  1               
002EAA  1               ; don't check fit if terminal width byte is zero
002EAA  1               
002EAA  1  A5 0F                LDA     <TWidth         ; get terminal width byte
002EAC  1  F0 20                BEQ     LAB_185E        ; skip check if zero
002EAE  1               
002EAE  1  8B 48 DA A2          FETCHINDIRECTY des_pl
002EB2  1  01 B5 AE C9  
002EB6  1  00 D0 04 A2  
002EC4  1  38                   SEC                     ; set carry for subtract
002EC5  1  E5 0E                SBC     <TPos           ; subtract terminal position
002EC7  1  E5 04                SBC     <TMPFLG         ; subtract string length
002EC9  1  B0 03                BCS     LAB_185E        ; branch if less than terminal width
002ECB  1               
002ECB  1  20 DC 2E             JSR     LAB_CRLF        ; else print CR/LF
002ECE  1               LAB_185E:
002ECE  1  20 27 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002ED1  1  F0 B2                BEQ     LAB_182C        ; always go continue processing line
002ED3  1               
002ED3  1               ; CR/LF return to BASIC from BASIC input handler
002ED3  1               
002ED3  1               LAB_1866:
002ED3  1  A9 00                LDA     #$00            ; clear byte
002ED5  1  9D 81 21             STA     Ibuffs,X        ; null terminate input
002ED8  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
002EDA  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
002EDC  1               ; print CR/LF
002EDC  1               
002EDC  1               LAB_CRLF:
002EDC  1  A9 0D                LDA     #$0D            ; load [CR]
002EDE  1  20 52 2F             JSR     LAB_PRNA        ; go print the character
002EE1  1  A9 0A                LDA     #$0A            ; load [LF]
002EE3  1  D0 6D                BNE     LAB_PRNA        ; go print the character and return, branch always
002EE5  1               LAB_188B:
002EE5  1  A5 0E                LDA     <TPos           ; get terminal position
002EE7  1  C5 10                CMP     <Iclim          ; compare with input column limit
002EE9  1  90 05                BCC     LAB_1897        ; branch if less
002EEB  1               
002EEB  1  20 DC 2E             JSR     LAB_CRLF        ; else print CR/LF (next line)
002EEE  1  D0 2A                BNE     LAB_18BD        ; continue with PRINT processing (branch always)
002EF0  1               
002EF0  1               LAB_1897:
002EF0  1  38                   SEC                     ; set carry for subtract
002EF1  1               LAB_1898:
002EF1  1  E5 64                SBC     <TabSiz         ; subtract TAB size
002EF3  1  B0 FC                BCS     LAB_1898        ; loop if result was +ve
002EF5  1               
002EF5  1  49 FF                EOR     #$FF            ; complement it
002EF7  1  69 01                ADC     #$01            ; +1 (twos complement)
002EF9  1  D0 15                BNE     LAB_18B6        ; always print A spaces (result is never $00)
002EFB  1               
002EFB  1               ; do TAB/SPC
002EFB  1               LAB_18A2:
002EFB  1  48                   PHA                     ; save token
002EFC  1  20 39 3E             JSR     LAB_SGBY        ; scan and get byte parameter
002EFF  1  C9 29                CMP     #$29            ; is next character )
002F01  1  F0 03                BEQ     LAB_18A2aa
002F03  1               ;BNE	LAB_1910		; if not do syntax error then warm start
002F03  1  4C 99 2F             JMP     LAB_1910        ; if not do syntax error then warm start
002F06  1               LAB_18A2aa:
002F06  1  68                   PLA                     ; get token back
002F07  1  C9 BC                CMP     #TK_TAB         ; was it TAB ?
002F09  1  D0 06                BNE     LAB_18B7        ; if not go do SPC
002F0B  1               
002F0B  1               ; calculate TAB offset
002F0B  1  8A                   TXA                     ; copy integer value to A
002F0C  1  E5 0E                SBC     <TPos           ; subtract terminal position
002F0E  1  90 0A                BCC     LAB_18BD        ; branch if result was < 0 (can't TAB backwards)
002F10  1               
002F10  1               ; print A spaces
002F10  1               LAB_18B6:
002F10  1  AA                   TAX                     ; copy result to X
002F11  1               LAB_18B7:
002F11  1  8A                   TXA                     ; set flags on size for SPC
002F12  1  F0 06                BEQ     LAB_18BD        ; branch if result was = $0, already here
002F14  1               
002F14  1               ; print X spaces
002F14  1               LAB_18BA:
002F14  1  20 4D 2F             JSR     LAB_18E0        ; print " "
002F17  1  CA                   DEX                     ; decrement count
002F18  1  D0 FA                BNE     LAB_18BA        ; loop if not all done
002F1A  1               
002F1A  1               ; continue with PRINT processing
002F1A  1               LAB_18BD:
002F1A  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002F1E  1  F0 03                BEQ     LAB_18BDA
002F20  1  4C 8B 2E             JMP     LAB_1831        ; if more to print go do it
002F23  1               LAB_18BDA:
002F23  1  60                   RTS
002F24  1               
002F24  1               ; print null terminated string from memory
002F24  1               
002F24  1               LAB_18C3:
002F24  1  20 D7 38             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002F27  1               
002F27  1               ; print string from <Sutill/<Sutilh
002F27  1               
002F27  1               LAB_18C6:
002F27  1  20 B4 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
002F2A  1               ; space returns with A = length, X=$71=pointer low byte,
002F2A  1               ; Y=$72=pointer high byte
002F2A  1  A0 00                LDY     #$00            ; reset index
002F2C  1  AA                   TAX                     ; copy length to X
002F2D  1  F0 5D                BEQ     LAB_188C        ; exit (RTS) if null string
002F2F  1               LAB_18CD:
002F2F  1               
002F2F  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get next byte
002F33  1  B5 71 C9 00  
002F37  1  D0 04 A2 00  
002F45  1  20 52 2F             JSR     LAB_PRNA        ; go print the character
002F48  1  C8                   INY                     ; increment index
002F49  1  CA                   DEX                     ; decrement count
002F4A  1  D0 E3                BNE     LAB_18CD        ; loop if not done yet
002F4C  1  60                   RTS
002F4D  1               
002F4D  1               ; Print single format character
002F4D  1               ; print " "
002F4D  1               
002F4D  1               LAB_18E0:
002F4D  1  A9 20                LDA     #$20            ; load " "
002F4F  1  2C                   .BYTE   $2C             ; change next line to BIT LAB_3FA9
002F50  1               
002F50  1               ; print "?" character
002F50  1               
002F50  1               LAB_18E3:
002F50  1  A9 3F                LDA     #$3F            ; load "?" character
002F52  1               
002F52  1               ; print character in A
002F52  1               ; now .includes the null handler
002F52  1               ; also .includes infinite line length code
002F52  1               ; note! some routines expect this one to exit with Zb=0
002F52  1               
002F52  1               LAB_PRNA:
002F52  1  C9 20                CMP     #' '            ; compare with " "
002F54  1  90 19                BCC     LAB_18F9        ; branch if less (non printing)
002F56  1               
002F56  1               ; else printable character
002F56  1  48                   PHA                     ; save the character
002F57  1               
002F57  1               ; don't check fit if terminal width byte is zero
002F57  1               
002F57  1  A5 0F                LDA     <TWidth         ; get terminal width
002F59  1  D0 0A                BNE     LAB_18F0        ; branch if not zero (not infinite length)
002F5B  1               
002F5B  1               ; is "infinite line" so check TAB position
002F5B  1               
002F5B  1  A5 0E                LDA     <TPos           ; get position
002F5D  1  E5 64                SBC     <TabSiz         ; subtract TAB size, carry set by CMP #$20 above
002F5F  1  D0 0B                BNE     LAB_18F7        ; skip reset if different
002F61  1               
002F61  1  85 0E                STA     <TPos           ; else reset position
002F63  1  F0 07                BEQ     LAB_18F7        ; go print character
002F65  1               
002F65  1               LAB_18F0:
002F65  1  C5 0E                CMP     <TPos           ; compare with terminal character position
002F67  1  D0 03                BNE     LAB_18F7        ; branch if not at end of line
002F69  1               
002F69  1  20 DC 2E             JSR     LAB_CRLF        ; else print CR/LF
002F6C  1               LAB_18F7:
002F6C  1  E6 0E                INC     <TPos           ; increment terminal position
002F6E  1  68                   PLA                     ; get character back
002F6F  1               LAB_18F9:
002F6F  1  20 7B 18             JSR     V_OUTP          ; output byte via output vector
002F72  1  C9 0D                CMP     #$0D            ; compare with [CR]
002F74  1  D0 14                BNE     LAB_188A        ; branch if not [CR]
002F76  1               
002F76  1               ; else print nullct nulls after the [CR]
002F76  1  86 78                STX     <TempB          ; save buffer index
002F78  1  A6 0D                LDX     <Nullct         ; get null count
002F7A  1  F0 0A                BEQ     LAB_1886        ; branch if no nulls
002F7C  1               
002F7C  1  A9 00                LDA     #$00            ; load [NULL]
002F7E  1               LAB_1880:
002F7E  1  20 52 2F             JSR     LAB_PRNA        ; go print the character
002F81  1  CA                   DEX                     ; decrement count
002F82  1  D0 FA                BNE     LAB_1880        ; loop if not all done
002F84  1               
002F84  1  A9 0D                LDA     #$0D            ; restore the character (and set the flags)
002F86  1               LAB_1886:
002F86  1  86 0E                STX     <TPos           ; clear terminal position (X always = zero when we get here)
002F88  1  A6 78                LDX     <TempB          ; restore buffer index
002F8A  1               LAB_188A:
002F8A  1  29 FF                AND     #$FF            ; set the flags
002F8C  1               LAB_188C:
002F8C  1  60                   RTS
002F8D  1               
002F8D  1               ; handle bad input data
002F8D  1               
002F8D  1               LAB_1904:
002F8D  1  A5 62                LDA     <Imode          ; get input mode flag, $00=INPUT, $00=READ
002F8F  1  10 0B                BPL     LAB_1913        ; branch if INPUT (go do redo)
002F91  1               
002F91  1  A5 8D                LDA     <Dlinel         ; get current DATA line low byte
002F93  1  A4 8E                LDY     <Dlineh         ; get current DATA line high byte
002F95  1  85 87                STA     <Clinel         ; save current line low byte
002F97  1  84 88                STY     <Clineh         ; save current line high byte
002F99  1               LAB_1910:
002F99  1  4C C7 32             JMP     LAB_SNER        ; do syntax error then warm start
002F9C  1               
002F9C  1               ; mode was INPUT
002F9C  1               LAB_1913:
002F9C  1  A9 AB                LDA     #<LAB_REDO      ; point to redo message (low addr)
002F9E  1  A0 17                LDY     #>LAB_REDO      ; point to redo message (high addr)
002FA0  1  20 24 2F             JSR     LAB_18C3        ; print null terminated string from memory
002FA3  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002FA5  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002FA7  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002FA9  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002FAB  1  60                   RTS
002FAC  1               
002FAC  1               ; perform INPUT
002FAC  1               
002FAC  1               LAB_INPUT:
002FAC  1  C9 22                CMP     #$22            ; compare next byte with open quote
002FAE  1  D0 0B                BNE     LAB_1934        ; branch if no prompt string
002FB0  1               
002FB0  1  20 80 32             JSR     LAB_1BC1        ; print "..." string
002FB3  1  A9 3B                LDA     #$3B            ; load A with ";"
002FB5  1  20 B4 32             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002FB8  1  20 27 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002FBB  1               
002FBB  1               ; done with prompt, now get data
002FBB  1               LAB_1934:
002FBB  1  20 6D 37             JSR     LAB_CKRN        ; check not Direct, back here if ok
002FBE  1  20 88 27             JSR     LAB_INLN        ; print "? " and get BASIC input
002FC1  1  A9 00                LDA     #$00            ; set mode = INPUT
002FC3  1               ;CMP	Ibuffs			; test first byte in buffer
002FC3  1  80 06                BRA     LAB_1953        ; branch if not null input
002FC5  1               
002FC5  1               ;CLC				; was null input so clear carry to exit program
002FC5  1               ;JMP	LAB_1647		; go do BREAK exit
002FC5  1               
002FC5  1               ; perform READ
002FC5  1               
002FC5  1               LAB_READ:
002FC5  1  A6 8F                LDX     <Dptrl          ; get DATA pointer low byte
002FC7  1  A4 90                LDY     <Dptrh          ; get DATA pointer high byte
002FC9  1  A9 80                LDA     #$80            ; set mode = READ
002FCB  1               
002FCB  1               LAB_1953:
002FCB  1  85 62                STA     <Imode          ; set input mode flag, $00=INPUT, $80=READ
002FCD  1  86 91                STX     <Rdptrl         ; save READ pointer low byte
002FCF  1  84 92                STY     <Rdptrh         ; save READ pointer high byte
002FD1  1               
002FD1  1               ; READ or INPUT next variable from list
002FD1  1               LAB_195B:
002FD1  1  20 9E 34             JSR     LAB_GVAR        ; get (var) address
002FD4  1  85 97                STA     <Lvarpl         ; save address low byte
002FD6  1  84 98                STY     <Lvarph         ; save address high byte
002FD8  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002FDA  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002FDC  1  85 11                STA     <Itempl         ; save as temporary integer low byte
002FDE  1  84 12                STY     <Itemph         ; save as temporary integer high byte
002FE0  1  A6 91                LDX     <Rdptrl         ; get READ pointer low byte
002FE2  1  A4 92                LDY     <Rdptrh         ; get READ pointer high byte
002FE4  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002FE6  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002FE8  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002FEC  1  D0 0C                BNE     LAB_1988        ; branch if not null
002FEE  1               
002FEE  1               ; pointer was to null entry
002FEE  1  24 62                BIT     <Imode          ; test input mode flag, $00=INPUT, $80=READ
002FF0  1  30 63                BMI     LAB_19DD        ; branch if READ
002FF2  1               
002FF2  1               ; mode was INPUT
002FF2  1               ;JSR	LAB_18E3		; print "?" character (double ? for extended input)
002FF2  1               ;JSR	LAB_INLN		; print "? " and get BASIC input
002FF2  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002FF4  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002FF6  1               LAB_1985:
002FF6  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002FFA  1               LAB_1988:
002FFA  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002FFC  1  10 24                BPL     LAB_19B0        ; branch if numeric
002FFE  1               
002FFE  1               ; else get string
002FFE  1  85 5B                STA     <Srchc          ; save search character
003000  1  C9 22                CMP     #$22            ; was it " ?
003002  1  F0 07                BEQ     LAB_1999        ; branch if so
003004  1               
003004  1  A9 3A                LDA     #':'            ; else search character is ":"
003006  1  85 5B                STA     <Srchc          ; set new search character
003008  1  A9 2C                LDA     #','            ; other search character is ","
00300A  1  18                   CLC                     ; clear carry for add
00300B  1               LAB_1999:
00300B  1  85 5C                STA     <Asrch          ; set second search character
00300D  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
00300F  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003011  1               
003011  1  69 00                ADC     #$00            ; c is =1 if we came via the BEQ LAB_1999, else =0
003013  1  90 01                BCC     LAB_19A4        ; branch if no execute pointer low byte rollover
003015  1               
003015  1  C8                   INY                     ; else increment high byte
003016  1               LAB_19A4:
003016  1  20 DD 38             JSR     LAB_20B4        ; print <Srchc or <Asrch terminated string to <Sutill/<Sutilh
003019  1  20 BF 3E             JSR     LAB_23F3        ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
00301C  1  20 3B 2D             JSR     LAB_17D5        ; go do string LET
00301F  1  4C 28 30             JMP     LAB_19B6        ; go check string terminator
003022  1               
003022  1               ; get numeric INPUT
003022  1               LAB_19B0:
003022  1  20 48 45             JSR     LAB_2887        ; get FAC1 from string
003025  1  20 91 43             JSR     LAB_PFAC        ; pack FAC1 into (<Lvarpl)
003028  1               LAB_19B6:
003028  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00302C  1  F0 0B                BEQ     LAB_19C5        ; branch if null (last entry)
00302E  1               
00302E  1  C9 2C                CMP     #','            ; else compare with ","
003030  1  F0 03                BEQ     LAB_19C2        ; branch if ","
003032  1               
003032  1  4C 8D 2F             JMP     LAB_1904        ; else go handle bad input data
003035  1               
003035  1               ; got good input data
003035  1               LAB_19C2:
003035  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003039  1               LAB_19C5:
003039  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
00303B  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
00303D  1  85 91                STA     <Rdptrl         ; save for now
00303F  1  84 92                STY     <Rdptrh         ; save for now
003041  1  A5 11                LDA     <Itempl         ; get temporary integer low byte (temp BASIC execute ptr)
003043  1  A4 12                LDY     <Itemph         ; get temporary integer high byte (temp BASIC execute ptr)
003045  1  85 C3                STA     <Bpntrl         ; set BASIC execute pointer low byte
003047  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
003049  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00304D  1  F0 30                BEQ     LAB_1A03        ; if null go do extra ignored message
00304F  1               
00304F  1  20 C3 32             JSR     LAB_1C01        ; else scan for "," , else do syntax error then warm start
003052  1  4C D1 2F             JMP     LAB_195B        ; go INPUT next variable from list
003055  1               
003055  1               ; find next DATA statement or do "Out of DATA" error
003055  1               LAB_19DD:
003055  1  20 0B 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
003058  1  C8                   INY                     ; increment index
003059  1  AA                   TAX                     ; copy character ([:] or [EOL])
00305A  1  D0 15                BNE     LAB_19F6        ; branch if [:]
00305C  1               
00305C  1  A2 06                LDX     #$06            ; set for "Out of DATA" error
00305E  1  C8                   INY                     ; increment index, now points to next line pointer high byte
00305F  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
003061  1  D0 03                BNE     LAB_19DE        ; branch if NOT end (eventually does error X)
003063  1  4C 20 31             JMP     LAB_1A54
003066  1               LAB_19DE:
003066  1  C8                   INY                     ; increment index
003067  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # low byte
003069  1  85 8D                STA     <Dlinel         ; save current DATA line low byte
00306B  1  C8                   INY                     ; increment index
00306C  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # high byte
00306E  1  C8                   INY                     ; increment index
00306F  1  85 8E                STA     <Dlineh         ; save current DATA line high byte
003071  1               LAB_19F6:
003071  1  B1 C3                LDA     (<Bpntrl),Y     ; get byte
003073  1  C8                   INY                     ; increment index
003074  1  AA                   TAX                     ; copy to X
003075  1  20 FD 2B             JSR     LAB_170F        ; set BASIC execute pointer
003078  1  E0 83                CPX     #TK_DATA        ; compare with "DATA" token
00307A  1  D0 D9                BNE     LAB_19DD        ; go find next statement if not "DATA"
00307C  1  4C F6 2F             JMP     LAB_1985        ; was "DATA" so go do next READ
00307F  1               
00307F  1               ; end of INPUT/READ routine
00307F  1               
00307F  1               LAB_1A03:
00307F  1  A5 91                LDA     <Rdptrl         ; get temp READ pointer low byte
003081  1  A4 92                LDY     <Rdptrh         ; get temp READ pointer high byte
003083  1  A6 62                LDX     <Imode          ; get input mode flag, $00=INPUT, $80=READ
003085  1  10 03                BPL     LAB_1A0E        ; branch if INPUT
003087  1               
003087  1  4C B5 2A             JMP     LAB_1624        ; save AY as DATA pointer and return
00308A  1               
00308A  1               ; we were getting INPUT
00308A  1               LAB_1A0E:
00308A  1  A0 00                LDY     #$00            ; clear index
00308C  1  8B DA A2 01          LDAINDIRECTY Rdptrl     ; get next byte
003090  1  B5 91 C9 00  
003094  1  D0 04 A2 00  
0030A2  1  D0 01                BNE     LAB_1A1B        ; error if not end of INPUT
0030A4  1               
0030A4  1  60                   RTS
0030A5  1               
0030A5  1               ; user typed too much
0030A5  1               LAB_1A1B:
0030A5  1  A9 9A                LDA     #<LAB_IMSG      ; point to extra ignored message (low addr)
0030A7  1  A0 17                LDY     #>LAB_IMSG      ; point to extra ignored message (high addr)
0030A9  1  4C 24 2F             JMP     LAB_18C3        ; print null terminated string from memory and return
0030AC  1               
0030AC  1               ; search the stack for FOR activity
0030AC  1               ; exit with z=1 if FOR else exit with z=0
0030AC  1               
0030AC  1               LAB_11A1:
0030AC  1  C2 10                INDEX16
0030AE  1  BA                   TSX                     ; copy stack pointer
0030AF  1  E8                   INX                     ; +1 pass return address
0030B0  1  E8                   INX                     ; +2 pass return address
0030B1  1  E8                   INX                     ; +3 pass calling routine return address
0030B2  1  E8                   INX                     ; +4 pass calling routine return address
0030B3  1               LAB_11A6:
0030B3  1  8B                   PHB
0030B4  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
0030B6  1  48                   PHA
0030B7  1  AB                   PLB
0030B8  1  BD 01 00             LDA     a:1,X           ; get token byte from stack
0030BB  1  AB                   PLB
0030BC  1  C9 81                CMP     #TK_FOR         ; is it FOR token
0030BE  1  D0 47                BNE     LAB_11CE        ; exit if not FOR token
0030C0  1               
0030C0  1               ; was FOR token
0030C0  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
0030C2  1  D0 10                BNE     LAB_11BB        ; branch if not null
0030C4  1               
0030C4  1  8B                   PHB
0030C5  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
0030C7  1  48                   PHA
0030C8  1  AB                   PLB
0030C9  1  BD 02 00             LDA     a:2,X           ; get FOR variable pointer low byte
0030CC  1  85 97                STA     <Frnxtl         ; save var pointer for FOR/NEXT low byte
0030CE  1  BD 03 00             LDA     a:3,X           ; get FOR variable pointer high byte
0030D1  1  85 98                STA     <Frnxth         ; save var pointer for FOR/NEXT high byte
0030D3  1  AB                   PLB
0030D4  1               LAB_11BB:
0030D4  1  8B                   PHB
0030D5  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
0030D7  1  48                   PHA
0030D8  1  AB                   PLB
0030D9  1  BD 03 00             LDA     a:3,X
0030DC  1  85 04                STA     <TMPFLG
0030DE  1  AB                   PLB
0030DF  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
0030E1  1  D0 11                BNE     LAB_11C7        ; branch if no match
0030E3  1               
0030E3  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
0030E5  1  8B                   PHB
0030E6  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
0030E8  1  48                   PHA
0030E9  1  AB                   PLB
0030EA  1  BD 02 00             LDA     a:2,X
0030ED  1  85 04                STA     <TMPFLG
0030EF  1  AB                   PLB
0030F0  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
0030F2  1  F0 13                BEQ     LAB_11CE        ; exit if match found
0030F4  1               
0030F4  1               LAB_11C7:
0030F4  1  E8                   INX
0030F5  1  E8                   INX
0030F6  1  E8                   INX
0030F7  1  E8                   INX
0030F8  1  E8                   INX
0030F9  1  E8                   INX
0030FA  1  E8                   INX
0030FB  1  E8                   INX
0030FC  1  E8                   INX
0030FD  1  E8                   INX
0030FE  1  E8                   INX
0030FF  1  E8                   INX
003100  1  E8                   INX
003101  1  E8                   INX
003102  1  E8                   INX
003103  1  E8                   INX
003104  1  9A                   TXS                     ; copy back to index
003105  1  D0 AC                BNE     LAB_11A6        ; loop if not at start of stack
003107  1               LAB_11CE:
003107  1  86 FD                STX     <TEMPW
003109  1  E2 10                INDEX8
00310B  1  60                   RTS
00310C  1               
00310C  1               ; perform NEXT
00310C  1               
00310C  1               LAB_NEXT:
00310C  1  D0 04                BNE     LAB_1A46        ; branch if NEXT var
00310E  1               
00310E  1  A0 00                LDY     #$00            ; else clear Y
003110  1  F0 03                BEQ     LAB_1A49        ; branch always (no variable to search for)
003112  1               
003112  1               ; NEXT var
003112  1               
003112  1               LAB_1A46:
003112  1  20 9E 34             JSR     LAB_GVAR        ; get variable address
003115  1               LAB_1A49:
003115  1  85 97                STA     <Frnxtl         ; store variable pointer low byte
003117  1  84 98                STY     <Frnxth         ; store variable pointer high byte
003119  1               ; (both cleared if no variable defined)
003119  1  20 AC 30             JSR     LAB_11A1        ; search the stack for FOR activity
00311C  1  F0 04                BEQ     LAB_1A56        ; branch if found
00311E  1               
00311E  1  A2 00                LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
003120  1               LAB_1A54:
003120  1  F0 7C                BEQ     LAB_1ABE        ; do error #X, then warm start
003122  1               
003122  1               
003122  1               LAB_1A56:
003122  1  C2 30                ACCUMULATORINDEX16
003124  1  A6 FD                LDX     <TEMPW
003126  1  9A                   TXS                     ; set stack pointer, X set by search, dumps return addresses
003127  1  8A                   TXA                     ; copy stack pointer
003128  1  18                   CLC                     ; CLEAR carry
003129  1               
003129  1  69 09 00             ADC     #$0009          ; point to TO var
00312C  1  85 73                STA     <ut2_pl         ; save pointer to TO var for compare
00312E  1  38                   SEC
00312F  1  E9 05 00             SBC     #$0005          ; point to STEP var
003132  1  85 FD                STA     <TEMPW
003134  1               
003134  1  E2 30                ACCUMULATORINDEX8
003136  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
003138  1               
003138  1  8B                   PHB                     ; ensure UNPACK works in stack bank not data bank
003139  1  DA                   PHX
00313A  1  A2 00                LDX     #$00
00313C  1  DA                   PHX
00313D  1  AB                   PLB
00313E  1  FA                   PLX
00313F  1  20 1B 43             JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
003142  1  AB                   PLB
003143  1               
003143  1  A3 08                LDA     8,S             ; get step sign
003145  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003147  1  A5 97                LDA     <Frnxtl         ; get FOR variable pointer low byte
003149  1  A4 98                LDY     <Frnxth         ; get FOR variable pointer high byte
00314B  1  20 06 40             JSR     LAB_246C        ; add (FOR variable) to FAC1
00314E  1  20 91 43             JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
003151  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
003153  1               
003153  1  8B                   PHB                     ; ensure compare works in stack bank not data bank
003154  1  DA                   PHX
003155  1  A2 00                LDX     #$00
003157  1  DA                   PHX
003158  1  AB                   PLB
003159  1  FA                   PLX
00315A  1               
00315A  1  20 57 44             JSR     LAB_27FA        ; compare FAC1 with (Y,<ut2_pl) (TO value)
00315D  1  AB                   PLB
00315E  1               
00315E  1               
00315E  1  C3 08                CMP     8,S             ; compare step sign
003160  1  F0 13                BEQ     LAB_1A9B        ; branch if = (loop complete)
003162  1               ;
003162  1               ;					; loop back and do it all again
003162  1  A3 0D                LDA     $0D,S           ; get FOR line low byte
003164  1  85 87                STA     <Clinel         ; save current line low byte
003166  1  A3 0E                LDA     $0E,S           ; get FOR line high byte
003168  1  85 88                STA     <Clineh         ; save current line high byte
00316A  1  A3 10                LDA     $10,S           ; get BASIC execute pointer low byte
00316C  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
00316E  1  A3 0F                LDA     $0F,S           ; get BASIC execute pointer high byte
003170  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
003172  1               LAB_1A98:
003172  1  4C 20 2A             JMP     LAB_15C2        ; go do interpreter inner loop
003175  1               ;
003175  1               ;					; loop complete so carry on
003175  1               LAB_1A9B:
003175  1               
003175  1               
003175  1  C2 30                ACCUMULATORINDEX16
003177  1  3B                   TSC                     ; stack copy to A
003178  1               ;;;;;;;;;;;;;;;;;;; THIS MAY NOT BE RIGHT !@#$%^&* TAG
003178  1  69 0F 00             ADC     #$000F          ; add $10 ($0F+carry) to dump FOR structure
00317B  1  1B                   TCS                     ; copy back to index
00317C  1  E2 30                ACCUMULATORINDEX8
00317E  1               
00317E  1               
00317E  1               
00317E  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003182  1  C9 2C                CMP     #','            ; compare with ","
003184  1  D0 EC                BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
003186  1               
003186  1               ; was "," so another NEXT variable to do
003186  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
00318A  1  20 12 31             JSR     LAB_1A46        ; do NEXT (var)
00318D  1               
00318D  1               ; evaluate expression and check is numeric, else do type mismatch
00318D  1               
00318D  1               LAB_EVNM:
00318D  1  20 A1 31             JSR     LAB_EVEX        ; evaluate expression
003190  1               
003190  1               ; check if source is numeric, else do type mismatch
003190  1               
003190  1               LAB_CTNM:
003190  1  18                   CLC                     ; destination is numeric
003191  1  24                   .BYTE   $24             ; makes next line BIT $38
003192  1               
003192  1               ; check if source is string, else do type mismatch
003192  1               
003192  1               LAB_CTST:
003192  1  38                   SEC                     ; required type is string
003193  1               
003193  1               ; type match check, set C for string, clear C for numeric
003193  1               
003193  1               LAB_CKTM:
003193  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
003195  1  30 03                BMI     LAB_1ABA        ; branch if data type is string
003197  1               
003197  1               ; else data type was numeric
003197  1  B0 03                BCS     LAB_1ABC        ; if required type is string do type mismatch error
003199  1               LAB_1AB9:
003199  1  60                   RTS
00319A  1               
00319A  1               ; data type was string, now check required type
00319A  1               LAB_1ABA:
00319A  1  B0 FD                BCS     LAB_1AB9        ; exit if required type is string
00319C  1               
00319C  1               ; else do type mismatch error
00319C  1               LAB_1ABC:
00319C  1  A2 18                LDX     #$18            ; error code $18 ("Type mismatch" error)
00319E  1               LAB_1ABE:
00319E  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
0031A1  1               
0031A1  1               ; evaluate expression
0031A1  1               
0031A1  1               LAB_EVEX:
0031A1  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
0031A3  1  D0 02                BNE     LAB_1AC7        ; skip next if not zero
0031A5  1               
0031A5  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
0031A7  1               LAB_1AC7:
0031A7  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
0031A9  1               
0031A9  1               LAB_EVEZ:
0031A9  1  A9 00                LDA     #$00            ; set null precedence (flag done)
0031AB  1               LAB_1ACC:
0031AB  1  48                   PHA                     ; push precedence byte
0031AC  1  A9 02                LDA     #$02            ; 2 bytes
0031AE  1  20 3A 26             JSR     LAB_1212        ; check room on stack for A bytes
0031B1  1  20 8F 32             JSR     LAB_GVAL        ; get value from line
0031B4  1  A9 00                LDA     #$00            ; clear A
0031B6  1  85 9B                STA     <comp_f         ; clear compare function flag
0031B8  1               LAB_1ADB:
0031B8  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0031BC  1               LAB_1ADE:
0031BC  1  38                   SEC                     ; set carry for subtract
0031BD  1  E9 D1                SBC     #TK_GT          ; subtract token for > (lowest comparison function)
0031BF  1  90 18                BCC     LAB_1AFA        ; branch if < TK_GT
0031C1  1               
0031C1  1  C9 03                CMP     #$03            ; compare with ">" to "<" tokens
0031C3  1  B0 14                BCS     LAB_1AFA        ; branch if >= TK_SGN (highest evaluation function +1)
0031C5  1               
0031C5  1               ; was token for > = or < (A = 0, 1 or 2)
0031C5  1  C9 01                CMP     #$01            ; compare with token for =
0031C7  1  2A                   ROL     A               ; *2, b0 = carry (=1 if token was = or <)
0031C8  1               ; (A = 0, 3 or 5)
0031C8  1  49 01                EOR     #$01            ; toggle b0
0031CA  1               ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
0031CA  1  45 9B                EOR     <comp_f         ; EOR with compare function flag bits
0031CC  1  C5 9B                CMP     <comp_f         ; compare with compare function flag
0031CE  1  90 68                BCC     LAB_1B53        ; if <(<comp_f) do syntax error then warm start
0031D0  1               ; was more than one <, = or >)
0031D0  1               
0031D0  1  85 9B                STA     <comp_f         ; save new compare function flag
0031D2  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0031D6  1  4C BC 31             JMP     LAB_1ADE        ; go do next character
0031D9  1               
0031D9  1               ; token is < ">" or > "<" tokens
0031D9  1               LAB_1AFA:
0031D9  1  A6 9B                LDX     <comp_f         ; get compare function flag
0031DB  1  D0 2C                BNE     LAB_1B2A        ; branch if compare function
0031DD  1               
0031DD  1  B0 79                BCS     LAB_1B78        ; go do functions
0031DF  1               
0031DF  1               ; else was <  TK_GT so is operator or lower
0031DF  1  69 0A                ADC     #TK_GT-TK_PLUS  ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
0031E1  1  90 75                BCC     LAB_1B78        ; branch if < + operator
0031E3  1               
0031E3  1               ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
0031E3  1  D0 07                BNE     LAB_1B0B        ; branch if not + token
0031E5  1               
0031E5  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
0031E7  1  10 03                BPL     LAB_1B0B        ; branch if not string
0031E9  1               
0031E9  1               ; will only be $00 if type is string and token was +
0031E9  1  4C BB 3A             JMP     LAB_224D        ; add strings, string 1 is in descriptor <des_pl, string 2
0031EC  1               ; is in line, and return
0031EC  1               
0031EC  1               LAB_1B0B:
0031EC  1  85 71                STA     <ut1_pl         ; save it
0031EE  1  0A                   ASL     A               ; *2
0031EF  1  65 71                ADC     <ut1_pl         ; *3
0031F1  1  A8                   TAY                     ; copy to index
0031F2  1               LAB_1B13:
0031F2  1  68                   PLA                     ; pull previous precedence
0031F3  1  D9 3C 11             CMP     LAB_OPPT,Y      ; compare with precedence byte
0031F6  1  B0 65                BCS     LAB_1B7D        ; branch if A >=
0031F8  1               
0031F8  1  20 90 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0031FB  1               LAB_1B1C:
0031FB  1  48                   PHA                     ; save precedence
0031FC  1               LAB_1B1D:
0031FC  1  20 24 32             JSR     LAB_1B43        ; get vector, execute function then continue evaluation
0031FF  1  68                   PLA                     ; restore precedence
003200  1  A4 99                LDY     <prstk          ; get precedence stacked flag
003202  1  10 19                BPL     LAB_1B3C        ; branch if stacked values
003204  1               
003204  1  AA                   TAX                     ; copy precedence (set flags)
003205  1  F0 76                BEQ     LAB_1B9D        ; exit if done
003207  1               
003207  1  D0 5D                BNE     LAB_1B86        ; else pop FAC2 and return, branch always
003209  1               
003209  1               LAB_1B2A:
003209  1  26 5F                ROL     <Dtypef         ; shift data type flag into Cb
00320B  1  8A                   TXA                     ; copy compare function flag
00320C  1  85 5F                STA     <Dtypef         ; clear data type flag, X is 0xxx xxxx
00320E  1  2A                   ROL     A               ; shift data type into compare function byte b0
00320F  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
003211  1  D0 02                BNE     LAB_1B34        ; branch if no underflow
003213  1               
003213  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
003215  1               LAB_1B34:
003215  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
003217  1               TK_LT_PLUS      = TK_LT-TK_PLUS
003217  1  A0 24                LDY     #TK_LT_PLUS*3   ; set offset to last operator entry
003219  1  85 9B                STA     <comp_f         ; save new compare function flag
00321B  1  D0 D5                BNE     LAB_1B13        ; branch always
00321D  1               
00321D  1               LAB_1B3C:
00321D  1  D9 3C 11             CMP     LAB_OPPT,Y      ;.compare with stacked function precedence
003220  1  B0 44                BCS     LAB_1B86        ; branch if A >=, pop FAC2 and return
003222  1               
003222  1  90 D7                BCC     LAB_1B1C        ; branch always
003224  1               
003224  1               ;.get vector, execute function then continue evaluation
003224  1               
003224  1               LAB_1B43:
003224  1  B9 3E 11             LDA     LAB_OPPT+2,Y    ; get function vector high byte
003227  1  48                   PHA                     ; onto stack
003228  1  B9 3D 11             LDA     LAB_OPPT+1,Y    ; get function vector low byte
00322B  1  48                   PHA                     ; onto stack
00322C  1               ; now push sign, round FAC1 and put on stack
00322C  1  20 3B 32             JSR     LAB_1B5B        ; function will return here, then the next RTS will call
00322F  1               ; the function
00322F  1  A5 9B                LDA     <comp_f         ; get compare function flag
003231  1  48                   PHA                     ; push compare evaluation byte
003232  1  B9 3C 11             LDA     LAB_OPPT,Y      ; get precedence byte
003235  1  4C AB 31             JMP     LAB_1ACC        ; continue evaluating expression
003238  1               
003238  1               LAB_1B53:
003238  1  4C C7 32             JMP     LAB_SNER        ; do syntax error then warm start
00323B  1               
00323B  1               ; push sign, round FAC1 and put on stack
00323B  1               
00323B  1               LAB_1B5B:
00323B  1  68                   PLA                     ; get return addr low byte
00323C  1  85 71                STA     <ut1_pl         ; save it
00323E  1  E6 71                INC     <ut1_pl         ; increment it (was ret-1 pushed? yes!)
003240  1               ; note! no check is made on the high byte! if the calling
003240  1               ; routine assembles to a page edge then this all goes
003240  1               ; horribly wrong !!!
003240  1  68                   PLA                     ; get return addr high byte
003241  1  85 72                STA     <ut1_ph         ; save it
003243  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003245  1  48                   PHA                     ; push sign
003246  1               
003246  1               ; round FAC1 and put on stack
003246  1               
003246  1               LAB_1B66:
003246  1  20 17 44             JSR     LAB_27BA        ; round FAC1
003249  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00324B  1  48                   PHA                     ; push on stack
00324C  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00324E  1  48                   PHA                     ; push on stack
00324F  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
003251  1  48                   PHA                     ; push on stack
003252  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003254  1  48                   PHA                     ; push on stack
003255  1  6C 71 00             JMP     (ut1_pl)        ; return, sort of
003258  1               
003258  1               ; do functions
003258  1               
003258  1               LAB_1B78:
003258  1  A0 FF                LDY     #$FF            ; flag function
00325A  1  68                   PLA                     ; pull precedence byte
00325B  1               LAB_1B7B:
00325B  1  F0 20                BEQ     LAB_1B9D        ; exit if done
00325D  1               
00325D  1               LAB_1B7D:
00325D  1  C9 64                CMP     #$64            ; compare previous precedence with $64
00325F  1  F0 03                BEQ     LAB_1B84        ; branch if was $64 (< function)
003261  1               
003261  1  20 90 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003264  1               LAB_1B84:
003264  1  84 99                STY     <prstk          ; save precedence stacked flag
003266  1               
003266  1               ; pop FAC2 and return
003266  1               LAB_1B86:
003266  1  68                   PLA                     ; pop byte
003267  1  4A                   LSR     A               ; shift out comparison evaluation lowest bit
003268  1  85 63                STA     <Cflag          ; save comparison evaluation flag
00326A  1  68                   PLA                     ; pop exponent
00326B  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
00326D  1  68                   PLA                     ; pop mantissa1
00326E  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
003270  1  68                   PLA                     ; pop mantissa2
003271  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
003273  1  68                   PLA                     ; pop mantissa3
003274  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
003276  1  68                   PLA                     ; pop sign
003277  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
003279  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
00327B  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00327D  1               LAB_1B9D:
00327D  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00327F  1  60                   RTS
003280  1               
003280  1               ; print "..." string to string util area
003280  1               
003280  1               LAB_1BC1:
003280  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
003282  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003284  1  69 00                ADC     #$00            ; add carry to low byte
003286  1  90 01                BCC     LAB_1BCA        ; branch if no overflow
003288  1               
003288  1  C8                   INY                     ; increment high byte
003289  1               LAB_1BCA:
003289  1  20 D7 38             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
00328C  1  4C BF 3E             JMP     LAB_23F3        ; restore BASIC execute pointer from temp and return
00328F  1               
00328F  1               ; get value from line
00328F  1               
00328F  1               LAB_GVAL:
00328F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003293  1  B0 03                BCS     LAB_1BAC        ; branch if not numeric character
003295  1               
003295  1               ; else numeric string found (e.g. 123)
003295  1               LAB_1BA9:
003295  1  4C 48 45             JMP     LAB_2887        ; get FAC1 from string and return
003298  1               
003298  1               ; get value from line .. continued
003298  1               
003298  1               ; wasn't a number so ..
003298  1               LAB_1BAC:
003298  1  AA                   TAX                     ; set the flags
003299  1  30 31                BMI     LAB_1BD0        ; if -ve go test token values
00329B  1               
00329B  1               ; else it is either a string, number, variable or (<expr>)
00329B  1  C9 24                CMP     #'$'            ; compare with "$"
00329D  1  F0 F6                BEQ     LAB_1BA9        ; branch if "$", hex number
00329F  1               
00329F  1  C9 25                CMP     #'%'            ; else compare with "%"
0032A1  1  F0 F2                BEQ     LAB_1BA9        ; branch if "%", binary number
0032A3  1               
0032A3  1  C9 2E                CMP     #'.'            ; compare with "."
0032A5  1  F0 EE                BEQ     LAB_1BA9        ; if so get FAC1 from string and return (e.g. was .123)
0032A7  1               
0032A7  1               ; it wasn't any sort of number so ..
0032A7  1  C9 22                CMP     #$22            ; compare with "
0032A9  1  F0 D5                BEQ     LAB_1BC1        ; branch if open quote
0032AB  1               
0032AB  1               ; wasn't any sort of number so ..
0032AB  1               
0032AB  1               ; evaluate expression within parentheses
0032AB  1               
0032AB  1  C9 28                CMP     #'('            ; compare with "("
0032AD  1  D0 51                BNE     LAB_1C18        ; if not "(" get (var), return value in FAC1 and $ flag
0032AF  1               
0032AF  1               LAB_1BF7:
0032AF  1  20 A9 31             JSR     LAB_EVEZ        ; evaluate expression, no decrement
0032B2  1               
0032B2  1               ; all the 'scan for' routines return the character after the sought character
0032B2  1               
0032B2  1               ; scan for ")" , else do syntax error then warm start
0032B2  1               
0032B2  1               LAB_1BFB:
0032B2  1  A9 29                LDA     #$29            ; load A with ")"
0032B4  1               
0032B4  1               ; scan for CHR$(A) , else do syntax error then warm start
0032B4  1               
0032B4  1               LAB_SCCA:
0032B4  1  A0 00                LDY     #$00            ; clear index
0032B6  1  D1 C3                CMP     (<Bpntrl),Y     ; check next byte is = A
0032B8  1  D0 0D                BNE     LAB_SNER        ; if not do syntax error then warm start
0032BA  1               
0032BA  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then return
0032BE  1  60                   RTS
0032BF  1               ; scan for "(" , else do syntax error then warm start
0032BF  1               
0032BF  1               LAB_1BFE:
0032BF  1  A9 28                LDA     #$28            ; load A with "("
0032C1  1  D0 F1                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0032C3  1               ; (branch always)
0032C3  1               
0032C3  1               ; scan for "," , else do syntax error then warm start
0032C3  1               
0032C3  1               LAB_1C01:
0032C3  1  A9 2C                LDA     #$2C            ; load A with ","
0032C5  1  D0 ED                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0032C7  1               ; (branch always)
0032C7  1               
0032C7  1               ; syntax error then warm start
0032C7  1               
0032C7  1               LAB_SNER:
0032C7  1  A2 02                LDX     #$02            ; error code $02 ("Syntax" error)
0032C9  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
0032CC  1               
0032CC  1               ; get value from line .. continued
0032CC  1               ; do tokens
0032CC  1               
0032CC  1               LAB_1BD0:
0032CC  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
0032CE  1  F0 29                BEQ     LAB_1C11        ; branch if - token (do set-up for functions)
0032D0  1               
0032D0  1               ; wasn't -n so ..
0032D0  1  C9 C7                CMP     #TK_PLUS        ; compare with token for +
0032D2  1  F0 BB                BEQ     LAB_GVAL        ; branch if + token (+n = n so ignore leading +)
0032D4  1               
0032D4  1  C9 C2                CMP     #TK_NOT         ; compare with token for NOT
0032D6  1  D0 13                BNE     LAB_1BE7        ; branch if not token for NOT
0032D8  1               
0032D8  1               ; was NOT token
0032D8  1               TK_EQUAL_PLUS   = TK_EQUAL-TK_PLUS
0032D8  1  A0 21                LDY     #TK_EQUAL_PLUS*3; offset to NOT function
0032DA  1  D0 1F                BNE     LAB_1C13        ; do set-up for function then execute (branch always)
0032DC  1               
0032DC  1               ; do = compare
0032DC  1               
0032DC  1               LAB_EQUAL:
0032DC  1  20 9F 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0032DF  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0032E1  1  49 FF                EOR     #$FF            ; invert it
0032E3  1  A8                   TAY                     ; copy it
0032E4  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0032E6  1  49 FF                EOR     #$FF            ; invert it
0032E8  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0032EB  1               
0032EB  1               ; get value from line .. continued
0032EB  1               
0032EB  1               ; wasn't +, -, or NOT so ..
0032EB  1               LAB_1BE7:
0032EB  1  C9 BF                CMP     #TK_FN          ; compare with token for FN
0032ED  1  D0 03                BNE     LAB_1BEE        ; branch if not token for FN
0032EF  1               
0032EF  1  4C BA 37             JMP     LAB_201E        ; go evaluate FNx
0032F2  1               
0032F2  1               ; get value from line .. continued
0032F2  1               
0032F2  1               ; wasn't +, -, NOT or FN so ..
0032F2  1               LAB_1BEE:
0032F2  1  E9 D4                SBC     #TK_SGN         ; subtract with token for SGN
0032F4  1  B0 19                BCS     LAB_1C27        ; if a function token go do it
0032F6  1               
0032F6  1  4C C7 32             JMP     LAB_SNER        ; else do syntax error
0032F9  1               
0032F9  1               ; set-up for functions
0032F9  1               
0032F9  1               LAB_1C11:
0032F9  1               TK_GT_PLUS      = TK_GT-TK_PLUS
0032F9  1  A0 1E                LDY     #TK_GT_PLUS*3   ; set offset from base to > operator
0032FB  1               LAB_1C13:
0032FB  1  68                   PLA                     ; dump return address low byte
0032FC  1  68                   PLA                     ; dump return address high byte
0032FD  1  4C FC 31             JMP     LAB_1B1D        ; execute function then continue evaluation
003300  1               
003300  1               ; variable name set-up
003300  1               ; get (var), return value in FAC_1 and $ flag
003300  1               
003300  1               LAB_1C18:
003300  1  20 9E 34             JSR     LAB_GVAR        ; get (var) address
003303  1  85 AE                STA     <FAC1_2         ; save address low byte in FAC1 mantissa2
003305  1  84 AF                STY     <FAC1_3         ; save address high byte in FAC1 mantissa3
003307  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003309  1  30 03                BMI     LAB_1C25        ; if string then return (does RTS)
00330B  1               
00330B  1               LAB_1C24:
00330B  1  4C 1B 43             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1
00330E  1               
00330E  1               LAB_1C25:
00330E  1  60                   RTS
00330F  1               
00330F  1               ; get value from line .. continued
00330F  1               ; only functions left so ..
00330F  1               
00330F  1               ; set up function references
00330F  1               
00330F  1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
00330F  1               ; to process function calls. now the function vector is computed and pushed on the stack
00330F  1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
00330F  1               ; is calculated and the routine called, if not this routine just does RTS. whichever
00330F  1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
00330F  1               ; the function code
00330F  1               
00330F  1               ; this also removes some less than elegant code that was used to bypass type checking
00330F  1               ; for functions that returned strings
00330F  1               
00330F  1               LAB_1C27:
00330F  1  0A                   ASL     A               ; *2 (2 bytes per function address)
003310  1  A8                   TAY                     ; copy to index
003311  1               
003311  1  B9 F7 10             LDA     LAB_FTBM,Y      ; get function jump vector high byte
003314  1  48                   PHA                     ; push functions jump vector high byte
003315  1  B9 F6 10             LDA     LAB_FTBL,Y      ; get function jump vector low byte
003318  1  48                   PHA                     ; push functions jump vector low byte
003319  1               
003319  1  B9 B1 10             LDA     LAB_FTPM,Y      ; get function pre process vector high byte
00331C  1  F0 05                BEQ     LAB_1C56        ; skip pre process if null vector
00331E  1               
00331E  1  48                   PHA                     ; push functions pre process vector high byte
00331F  1  B9 B0 10             LDA     LAB_FTPL,Y      ; get function pre process vector low byte
003322  1  48                   PHA                     ; push functions pre process vector low byte
003323  1               
003323  1               LAB_1C56:
003323  1  60                   RTS                     ; do function, or pre process, call
003324  1               
003324  1               ; process string expression in parenthesis
003324  1               
003324  1               LAB_PPFS:
003324  1  20 AF 32             JSR     LAB_1BF7        ; process expression in parenthesis
003327  1  4C 92 31             JMP     LAB_CTST        ; check if source is string then do function,
00332A  1               ; else do type mismatch
00332A  1               
00332A  1               ; process numeric expression in parenthesis
00332A  1               
00332A  1               LAB_PPFN:
00332A  1  20 AF 32             JSR     LAB_1BF7        ; process expression in parenthesis
00332D  1  4C 90 31             JMP     LAB_CTNM        ; check if source is numeric then do function,
003330  1               ; else do type mismatch
003330  1               
003330  1               ; set numeric data type and increment BASIC execute pointer
003330  1               
003330  1               LAB_PPBI:
003330  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
003332  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
003336  1  60                   RTS
003337  1               ; process string for LEFT$, RIGHT$ or MID$
003337  1               
003337  1               LAB_LRMS:
003337  1  20 A9 31             JSR     LAB_EVEZ        ; evaluate (should be string) expression
00333A  1  20 C3 32             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00333D  1  20 92 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003340  1               
003340  1  68                   PLA                     ; get function jump vector low byte
003341  1  AA                   TAX                     ; save functions jump vector low byte
003342  1  68                   PLA                     ; get function jump vector high byte
003343  1  A8                   TAY                     ; save functions jump vector high byte
003344  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003346  1  48                   PHA                     ; push string pointer high byte
003347  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003349  1  48                   PHA                     ; push string pointer low byte
00334A  1  98                   TYA                     ; get function jump vector high byte back
00334B  1  48                   PHA                     ; save functions jump vector high byte
00334C  1  8A                   TXA                     ; get function jump vector low byte back
00334D  1  48                   PHA                     ; save functions jump vector low byte
00334E  1  20 3D 3E             JSR     LAB_GTBY        ; get byte parameter
003351  1  8A                   TXA                     ; copy byte parameter to A
003352  1  60                   RTS                     ; go do function
003353  1               
003353  1               ; process numeric expression(s) for BIN$ or HEX$
003353  1               
003353  1               LAB_BHSS:
003353  1  20 A9 31             JSR     LAB_EVEZ        ; process expression
003356  1  20 90 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003359  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00335B  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
00335D  1  B0 22                BCS     LAB_BHER        ; branch if n>=2^24 (is too big)
00335F  1               
00335F  1  20 F2 44             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
003362  1  A2 02                LDX     #$02            ; 3 bytes to do
003364  1               LAB_CFAC:
003364  1  B5 AD                LDA     <FAC1_1,X       ; get byte from FAC1
003366  1  95 11                STA     <nums_1,X       ; save byte to temp
003368  1  CA                   DEX                     ; decrement index
003369  1  10 F9                BPL     LAB_CFAC        ; copy FAC1 mantissa to temp
00336B  1               
00336B  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
00336F  1  A2 00                LDX     #$00            ; set default to no leading "0"s
003371  1  C9 29                CMP     #')'            ; compare with close bracket
003373  1  F0 0B                BEQ     LAB_1C54        ; if ")" go do rest of function
003375  1               
003375  1  20 CE 3E             JSR     LAB_SCGB        ; scan for "," and get byte
003378  1  22 C2 00 00          JSL     LAB_GBYT        ; get last byte back
00337C  1  C9 29                CMP     #')'            ; is next character )
00337E  1  D0 01                BNE     LAB_BHER        ; if not ")" go do error
003380  1               
003380  1               LAB_1C54:
003380  1  60                   RTS                     ; else do function
003381  1               
003381  1               LAB_BHER:
003381  1  4C 26 36             JMP     LAB_FCER        ; do function call error then warm start
003384  1               
003384  1               ; perform EOR
003384  1               
003384  1               ; added operator format is the same as AND or OR, precedence is the same as OR
003384  1               
003384  1               ; this bit worked first time but it took a while to sort out the operator table
003384  1               ; pointers and offsets afterwards!
003384  1               
003384  1               LAB_EOR:
003384  1  20 AB 33             JSR     GetFirst        ; get first integer expression (no sign check)
003387  1  45 5B                EOR     <XOAw_l         ; EOR with expression 1 low byte
003389  1  A8                   TAY                     ; save in Y
00338A  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00338C  1  45 5C                EOR     <XOAw_h         ; EOR with expression 1 high byte
00338E  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003391  1               
003391  1               ; perform OR
003391  1               
003391  1               LAB_OR:
003391  1  20 AB 33             JSR     GetFirst        ; get first integer expression (no sign check)
003394  1  05 5B                ORA     <XOAw_l         ; OR with expression 1 low byte
003396  1  A8                   TAY                     ; save in Y
003397  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003399  1  05 5C                ORA     <XOAw_h         ; OR with expression 1 high byte
00339B  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00339E  1               
00339E  1               ; perform AND
00339E  1               
00339E  1               LAB_AND:
00339E  1  20 AB 33             JSR     GetFirst        ; get first integer expression (no sign check)
0033A1  1  25 5B                AND     <XOAw_l         ; AND with expression 1 low byte
0033A3  1  A8                   TAY                     ; save in Y
0033A4  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033A6  1  25 5C                AND     <XOAw_h         ; AND with expression 1 high byte
0033A8  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0033AB  1               
0033AB  1               ; get first value for OR, AND or EOR
0033AB  1               
0033AB  1               GetFirst:
0033AB  1  20 9F 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0033AE  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033B0  1  85 5C                STA     <XOAw_h         ; save it
0033B2  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0033B4  1  85 5B                STA     <XOAw_l         ; save it
0033B6  1  20 0B 40             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
0033B9  1  20 9F 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0033BC  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0033BE  1               LAB_1C95:
0033BE  1  60                   RTS
0033BF  1               
0033BF  1               ; perform comparisons
0033BF  1               
0033BF  1               ; do < compare
0033BF  1               
0033BF  1               LAB_LTHAN:
0033BF  1  20 93 31             JSR     LAB_CKTM        ; type match check, set C for string
0033C2  1  B0 13                BCS     LAB_1CAE        ; branch if string
0033C4  1               
0033C4  1               ; do numeric < compare
0033C4  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0033C6  1  09 7F                ORA     #$7F            ; set all non sign bits
0033C8  1  25 B4                AND     <FAC2_1         ; and FAC2 mantissa1 (AND in sign bit)
0033CA  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
0033CC  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
0033CE  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
0033D0  1  20 55 44             JSR     LAB_27F8        ; compare FAC1 with FAC2 (AY)
0033D3  1  AA                   TAX                     ; copy result
0033D4  1  4C 08 34             JMP     LAB_1CE1        ; go evaluate result
0033D7  1               
0033D7  1               ; do string < compare
0033D7  1               LAB_1CAE:
0033D7  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0033D9  1  C6 9B                DEC     <comp_f         ; clear < bit in compare function flag
0033DB  1  20 B4 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
0033DE  1               ; space returns with A = length, X=pointer low byte,
0033DE  1               ; Y=pointer high byte
0033DE  1  85 AC                STA     <str_ln         ; save length
0033E0  1  86 AD                STX     <str_pl         ; save string pointer low byte
0033E2  1  84 AE                STY     <str_ph         ; save string pointer high byte
0033E4  1  A5 B5                LDA     <FAC2_2         ; get descriptor pointer low byte
0033E6  1  A4 B6                LDY     <FAC2_3         ; get descriptor pointer high byte
0033E8  1  20 B8 3B             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0033EB  1               ; returns with A = length, X=pointer low byte,
0033EB  1               ; Y=pointer high byte
0033EB  1  86 B5                STX     <FAC2_2         ; save string pointer low byte
0033ED  1  84 B6                STY     <FAC2_3         ; save string pointer high byte
0033EF  1  AA                   TAX                     ; copy length
0033F0  1  38                   SEC                     ; set carry for subtract
0033F1  1  E5 AC                SBC     <str_ln         ; subtract string 1 length
0033F3  1  F0 08                BEQ     LAB_1CD6        ; branch if str 1 length = string 2 length
0033F5  1               
0033F5  1  A9 01                LDA     #$01            ; set str 1 length > string 2 length
0033F7  1  90 04                BCC     LAB_1CD6        ; branch if so
0033F9  1               
0033F9  1  A6 AC                LDX     <str_ln         ; get string 1 length
0033FB  1  A9 FF                LDA     #$FF            ; set str 1 length < string 2 length
0033FD  1               LAB_1CD6:
0033FD  1  85 B0                STA     <FAC1_s         ; save length compare
0033FF  1  A0 FF                LDY     #$FF            ; set index
003401  1  E8                   INX                     ; adjust for loop
003402  1               LAB_1CDB:
003402  1  C8                   INY                     ; increment index
003403  1  CA                   DEX                     ; decrement count
003404  1  D0 07                BNE     LAB_1CE6        ; branch if still bytes to do
003406  1               
003406  1  A6 B0                LDX     <FAC1_s         ; get length compare back
003408  1               LAB_1CE1:
003408  1  30 39                BMI     LAB_1CF2        ; branch if str 1 < str 2
00340A  1               
00340A  1  18                   CLC                     ; flag str 1 <= str 2
00340B  1  90 36                BCC     LAB_1CF2        ; go evaluate result
00340D  1               
00340D  1               LAB_1CE6:
00340D  1  8B DA A2 01          LDAINDIRECTY FAC2_2     ; get string 2 byte
003411  1  B5 B5 C9 00  
003415  1  D0 04 A2 00  
003423  1  8B 48 DA A2          CMPINDIRECTY FAC1_1     ; compare with string 1 byte
003427  1  01 B5 AD C9  
00342B  1  00 D0 04 A2  
00343B  1  F0 C5                BEQ     LAB_1CDB        ; loop if bytes =
00343D  1               
00343D  1  A2 FF                LDX     #$FF            ; set str 1 < string 2
00343F  1  B0 02                BCS     LAB_1CF2        ; branch if so
003441  1               
003441  1  A2 01                LDX     #$01            ;  set str 1 > string 2
003443  1               LAB_1CF2:
003443  1  E8                   INX                     ; x = 0, 1 or 2
003444  1  8A                   TXA                     ; copy to A
003445  1  2A                   ROL     A               ; *2 (1, 2 or 4)
003446  1  25 63                AND     <Cflag          ; AND with comparison evaluation flag
003448  1  F0 02                BEQ     LAB_1CFB        ; branch if 0 (compare is false)
00344A  1               
00344A  1  A9 FF                LDA     #$FF            ; else set result true
00344C  1               LAB_1CFB:
00344C  1  4C 38 44             JMP     LAB_27DB        ; save A as integer byte and return
00344F  1               
00344F  1               LAB_1CFE:
00344F  1  20 C3 32             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
003452  1               
003452  1               ; perform DIM
003452  1               
003452  1               LAB_DIM:
003452  1  AA                   TAX                     ; copy "DIM" flag to X
003453  1  20 A4 34             JSR     LAB_1D10        ; search for variable
003456  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00345A  1  D0 F3                BNE     LAB_1CFE        ; scan for "," and loop if not null
00345C  1               
00345C  1  60                   RTS
00345D  1               
00345D  1               ; perform << (left shift)
00345D  1               
00345D  1               LAB_LSHIFT:
00345D  1  20 93 34             JSR     GetPair         ; get integer expression and byte (no sign check)
003460  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
003462  1  A6 78                LDX     <TempB          ; get shift count
003464  1  F0 22                BEQ     NoShift         ; branch if zero
003466  1               
003466  1  E0 10                CPX     #$10            ; compare bit count with 16d
003468  1  B0 23                BCS     TooBig          ; branch if >=
00346A  1               
00346A  1               Ls_loop:
00346A  1  06 AF                ASL     <FAC1_3         ; shift low byte
00346C  1  2A                   ROL     A               ; shift high byte
00346D  1  CA                   DEX                     ; decrement bit count
00346E  1  D0 FA                BNE     Ls_loop         ; loop if shift not complete
003470  1               
003470  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
003472  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003475  1               
003475  1               ; perform >> (right shift)
003475  1               
003475  1               LAB_RSHIFT:
003475  1  20 93 34             JSR     GetPair         ; get integer expression and byte (no sign check)
003478  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
00347A  1  A6 78                LDX     <TempB          ; get shift count
00347C  1  F0 0A                BEQ     NoShift         ; branch if zero
00347E  1               
00347E  1  E0 10                CPX     #$10            ; compare bit count with 16d
003480  1  B0 0B                BCS     TooBig          ; branch if >=
003482  1               
003482  1               Rs_loop:
003482  1  4A                   LSR     A               ; shift high byte
003483  1  66 AF                ROR     <FAC1_3         ; shift low byte
003485  1  CA                   DEX                     ; decrement bit count
003486  1  D0 FA                BNE     Rs_loop         ; loop if shift not complete
003488  1               
003488  1               NoShift:
003488  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
00348A  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00348D  1               
00348D  1               TooBig:
00348D  1  A9 00                LDA     #$00            ; clear high byte
00348F  1  A8                   TAY                     ; copy to low byte
003490  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003493  1               
003493  1               GetPair:
003493  1  20 40 3E             JSR     LAB_EVBY        ; evaluate byte expression, result in X
003496  1  86 78                STX     <TempB          ; save it
003498  1  20 0B 40             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
00349B  1  4C 9F 35             JMP     LAB_EVIR        ; evaluate integer expression (no sign check)
00349E  1               
00349E  1               ; search for variable
00349E  1               
00349E  1               ; return pointer to variable in <Cvaral/<Cvarah
00349E  1               
00349E  1               LAB_GVAR:
00349E  1  A2 00                LDX     #$00            ; set DIM flag = $00
0034A0  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory (1st character)
0034A4  1               LAB_1D10:
0034A4  1  86 5E                STX     <Defdim         ; save DIM flag
0034A6  1               LAB_1D12:
0034A6  1  85 93                STA     <Varnm1         ; save 1st character
0034A8  1  29 7F                AND     #$7F            ; clear FN flag bit
0034AA  1  20 16 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0034AD  1  B0 03                BCS     LAB_1D1F        ; branch if ok
0034AF  1               
0034AF  1  4C C7 32             JMP     LAB_SNER        ; else syntax error then warm start
0034B2  1               
0034B2  1               ; was variable name so ..
0034B2  1               LAB_1D1F:
0034B2  1  A2 00                LDX     #$00            ; clear 2nd character temp
0034B4  1  86 5F                STX     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0034B6  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (2nd character)
0034BA  1  90 05                BCC     LAB_1D2D        ; branch if character = "0"-"9" (ok)
0034BC  1               
0034BC  1               ; 2nd character wasn't "0" to "9" so ..
0034BC  1  20 16 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0034BF  1  90 0C                BCC     LAB_1D38        ; branch if <"A" or >"Z" (go check if string)
0034C1  1               
0034C1  1               LAB_1D2D:
0034C1  1  AA                   TAX                     ; copy 2nd character
0034C2  1               
0034C2  1               ; ignore further (valid) characters in the variable name
0034C2  1               LAB_1D2E:
0034C2  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (3rd character)
0034C6  1  90 FA                BCC     LAB_1D2E        ; loop if character = "0"-"9" (ignore)
0034C8  1               
0034C8  1  20 16 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0034CB  1  B0 F5                BCS     LAB_1D2E        ; loop if character = "A"-"Z" (ignore)
0034CD  1               
0034CD  1               ; check if string variable
0034CD  1               LAB_1D38:
0034CD  1  C9 24                CMP     #'$'            ; compare with "$"
0034CF  1  D0 0C                BNE     LAB_1D47        ; branch if not string
0034D1  1               
0034D1  1               ; to introduce a new variable type (% suffix for integers say) then this branch
0034D1  1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
0034D1  1               
0034D1  1               ; type is string
0034D1  1  A9 FF                LDA     #$FF            ; set data type = string
0034D3  1  85 5F                STA     <Dtypef         ; set data type flag, $FF=string, $00=numeric
0034D5  1  8A                   TXA                     ; get 2nd character back
0034D6  1  09 80                ORA     #$80            ; set top bit (indicate string var)
0034D8  1  AA                   TAX                     ; copy back to 2nd character temp
0034D9  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0034DD  1               
0034DD  1               ; after we have determined the variable type we need to come back here to determine
0034DD  1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
0034DD  1               
0034DD  1               
0034DD  1               LAB_1D47:                       ; gets here with character after var name in A
0034DD  1  86 94                STX     <Varnm2         ; save 2nd character
0034DF  1  05 61                ORA     <Sufnxf         ; or with subscript/FNX flag (or FN name)
0034E1  1  C9 28                CMP     #'('            ; compare with "("
0034E3  1  D0 03                BNE     LAB_1D53        ; branch if not "("
0034E5  1               
0034E5  1  4C B1 35             JMP     LAB_1E17        ; go find, or make, array
0034E8  1               
0034E8  1               ; either find or create var
0034E8  1               ; var name (1st two characters only!) is in <Varnm1,<Varnm2
0034E8  1               
0034E8  1               ; variable name wasn't var(... so look for plain var
0034E8  1               LAB_1D53:
0034E8  1  A9 00                LDA     #$00            ; clear A
0034EA  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
0034EC  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0034EE  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
0034F0  1  A0 00                LDY     #$00            ; clear index
0034F2  1               LAB_1D5D:
0034F2  1  86 AB                STX     <Vrschh         ; save search address high byte
0034F4  1               LAB_1D5F:
0034F4  1  85 AA                STA     <Vrschl         ; save search address low byte
0034F6  1  E4 7E                CPX     <Sarryh         ; compare high address with var space end
0034F8  1  D0 04                BNE     LAB_1D69        ; skip next compare if <>
0034FA  1               
0034FA  1               ; high addresses were = so compare low addresses
0034FA  1  C5 7D                CMP     <Sarryl         ; compare low address with var space end
0034FC  1  F0 2C                BEQ     LAB_1D8B        ; if not found go make new var
0034FE  1               
0034FE  1               LAB_1D69:
0034FE  1  A5 93                LDA     <Varnm1         ; get 1st character of var to find
003500  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 1st character
003502  1  D0 08                BNE     LAB_1D77        ; branch if no match
003504  1               
003504  1               ; 1st characters match so compare 2nd characters
003504  1  A5 94                LDA     <Varnm2         ; get 2nd character of var to find
003506  1  C8                   INY                     ; index to point to variable name 2nd character
003507  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 2nd character
003509  1  F0 69                BEQ     LAB_1DD7        ; branch if match (found var)
00350B  1               
00350B  1  88                   DEY                     ; else decrement index (now = $00)
00350C  1               LAB_1D77:
00350C  1  18                   CLC                     ; clear carry for add
00350D  1  A5 AA                LDA     <Vrschl         ; get search address low byte
00350F  1  69 06                ADC     #$06            ; +6 (offset to next var name)
003511  1  90 E1                BCC     LAB_1D5F        ; loop if no overflow to high byte
003513  1               
003513  1  E8                   INX                     ; else increment high byte
003514  1  D0 DC                BNE     LAB_1D5D        ; loop always (RAM doesn't extend to $FFFF !)
003516  1               
003516  1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
003516  1               
003516  1               LAB_CASC:
003516  1  C9 61                CMP     #'a'            ; compare with "a"
003518  1  B0 0A                BCS     LAB_1D83        ; go check <"z"+1
00351A  1               
00351A  1               ; check byte, return C=0 if<"A" or >"Z"
00351A  1               
00351A  1               LAB_1D82:
00351A  1  C9 41                CMP     #'A'            ; compare with "A"
00351C  1  90 05                BCC     LAB_1D8A        ; exit if less
00351E  1               
00351E  1               ; carry is set
00351E  1  E9 5B                SBC     #$5B            ; subtract "Z"+1
003520  1  38                   SEC                     ; set carry
003521  1  E9 A5                SBC     #$A5            ; subtract $A5 (restore byte)
003523  1               ; carry clear if byte>$5A
003523  1               LAB_1D8A:
003523  1  60                   RTS
003524  1               
003524  1               LAB_1D83:
003524  1  E9 7B                SBC     #$7B            ; subtract "z"+1
003526  1  38                   SEC                     ; set carry
003527  1  E9 85                SBC     #$85            ; subtract $85 (restore byte)
003529  1               ; carry clear if byte>$7A
003529  1  60                   RTS
00352A  1               
00352A  1               ; reached end of variable mem without match
00352A  1               ; .. so create new variable
00352A  1               LAB_1D8B:
00352A  1  68                   PLA                     ; pop return address low byte
00352B  1  48                   PHA                     ; push return address low byte
00352C  1               LAB_1C18p2      = LAB_1C18+2
00352C  1  C9 02                CMP     #<LAB_1C18p2    ; compare with expected calling routine return low byte
00352E  1  D0 05                BNE     LAB_1D98        ; if not get (var) go create new var
003530  1               
003530  1               ; This will only drop through if the call was from LAB_1C18 and is only called
003530  1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
003530  1               ; it prevents the creation of variables not assigned a value.
003530  1               
003530  1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
003530  1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
003530  1               
003530  1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
003530  1               
003530  1               ; this is where you would put the undefined variable error call e.g.
003530  1               
003530  1               ;					; variable doesn't exist so flag error
003530  1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
003530  1               ;	JMP	LAB_XERR		; do error #X then warm start
003530  1               
003530  1               ; the above code has been tested and works a treat! (it replaces the three code lines
003530  1               ; below)
003530  1               
003530  1               ; else return dummy null value
003530  1  A9 50                LDA     #<LAB_1D96      ; low byte point to $00,$00
003532  1               ; (uses part of misc constants table)
003532  1  A0 18                LDY     #>LAB_1D96      ; high byte point to $00,$00
003534  1  60                   RTS
003535  1               
003535  1               ; create new numeric variable
003535  1               LAB_1D98:
003535  1  A5 7D                LDA     <Sarryl         ; get var mem end low byte
003537  1  A4 7E                LDY     <Sarryh         ; get var mem end high byte
003539  1  85 AA                STA     <Ostrtl         ; save old block start low byte
00353B  1  84 AB                STY     <Ostrth         ; save old block start high byte
00353D  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
00353F  1  A4 80                LDY     <Earryh         ; get array mem end high byte
003541  1  85 A6                STA     <Obendl         ; save old block end low byte
003543  1  84 A7                STY     <Obendh         ; save old block end high byte
003545  1  18                   CLC                     ; clear carry for add
003546  1  69 06                ADC     #$06            ; +6 (space for one var)
003548  1  90 01                BCC     LAB_1DAE        ; branch if no overflow to high byte
00354A  1               
00354A  1  C8                   INY                     ; else increment high byte
00354B  1               LAB_1DAE:
00354B  1  85 A4                STA     <Nbendl         ; set new block end low byte
00354D  1  84 A5                STY     <Nbendh         ; set new block end high byte
00354F  1  20 A8 25             JSR     LAB_11CF        ; open up space in memory
003552  1  A5 A4                LDA     <Nbendl         ; get new start low byte
003554  1  A4 A5                LDY     <Nbendh         ; get new start high byte (-$100)
003556  1  C8                   INY                     ; correct high byte
003557  1  85 7D                STA     <Sarryl         ; save new var mem end low byte
003559  1  84 7E                STY     <Sarryh         ; save new var mem end high byte
00355B  1  A0 00                LDY     #$00            ; clear index
00355D  1  A5 93                LDA     <Varnm1         ; get var name 1st character
00355F  1  91 AA                STA     (<Vrschl),Y     ; save var name 1st character
003561  1  C8                   INY                     ; increment index
003562  1  A5 94                LDA     <Varnm2         ; get var name 2nd character
003564  1  91 AA                STA     (<Vrschl),Y     ; save var name 2nd character
003566  1  A9 00                LDA     #$00            ; clear A
003568  1  C8                   INY                     ; increment index
003569  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
00356B  1  C8                   INY                     ; increment index
00356C  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
00356E  1  C8                   INY                     ; increment index
00356F  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
003571  1  C8                   INY                     ; increment index
003572  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
003574  1               
003574  1               ; found a match for var ((<Vrschl) = ptr)
003574  1               LAB_1DD7:
003574  1  A5 AA                LDA     <Vrschl         ; get var address low byte
003576  1  18                   CLC                     ; clear carry for add
003577  1  69 02                ADC     #$02            ; +2 (offset past var name bytes)
003579  1  A4 AB                LDY     <Vrschh         ; get var address high byte
00357B  1  90 01                BCC     LAB_1DE1        ; branch if no overflow from add
00357D  1               
00357D  1  C8                   INY                     ; else increment high byte
00357E  1               LAB_1DE1:
00357E  1  85 95                STA     <Cvaral         ; save current var address low byte
003580  1  84 96                STY     <Cvarah         ; save current var address high byte
003582  1  60                   RTS
003583  1               
003583  1               ; set-up array pointer (<Adatal/h) to first element in array
003583  1               ; set <Adatal,<Adatah to <Astrtl,<Astrth+2*<Dimcnt+#$05
003583  1               
003583  1               LAB_1DE6:
003583  1  A5 5D                LDA     <Dimcnt         ; get # of dimensions (1, 2 or 3)
003585  1  0A                   ASL     A               ; *2 (also clears the carry !)
003586  1  69 05                ADC     #$05            ; +5 (result is 7, 9 or 11 here)
003588  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
00358A  1  A4 AB                LDY     <Astrth         ; get array pointer high byte
00358C  1  90 01                BCC     LAB_1DF2        ; branch if no overflow
00358E  1               
00358E  1  C8                   INY                     ; else increment high byte
00358F  1               LAB_1DF2:
00358F  1  85 A4                STA     <Adatal         ; save array data pointer low byte
003591  1  84 A5                STY     <Adatah         ; save array data pointer high byte
003593  1  60                   RTS
003594  1               
003594  1               ; evaluate integer expression
003594  1               
003594  1               LAB_EVIN:
003594  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003598  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00359B  1               ; else do type mismatch
00359B  1               
00359B  1               ; evaluate integer expression (no check)
00359B  1               
00359B  1               LAB_EVPI:
00359B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00359D  1  30 0D                BMI     LAB_1E12        ; do function call error if -ve
00359F  1               
00359F  1               ; evaluate integer expression (no sign check)
00359F  1               
00359F  1               LAB_EVIR:
00359F  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0035A1  1  C9 90                CMP     #$90            ; compare with exponent = 2^16 (n>2^15)
0035A3  1  90 09                BCC     LAB_1E14        ; branch if n<2^16 (is ok)
0035A5  1               
0035A5  1  A9 57                LDA     #<LAB_1DF7      ; set pointer low byte to -32768
0035A7  1  A0 18                LDY     #>LAB_1DF7      ; set pointer high byte to -32768
0035A9  1  20 55 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0035AC  1               LAB_1E12:
0035AC  1  D0 78                BNE     LAB_FCER        ; if <> do function call error then warm start
0035AE  1               
0035AE  1               LAB_1E14:
0035AE  1  4C F2 44             JMP     LAB_2831        ; convert FAC1 floating-to-fixed and return
0035B1  1               
0035B1  1               ; find or make array
0035B1  1               
0035B1  1               LAB_1E17:
0035B1  1  A5 5E                LDA     <Defdim         ; get DIM flag
0035B3  1  48                   PHA                     ; push it
0035B4  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
0035B6  1  48                   PHA                     ; push it
0035B7  1  A0 00                LDY     #$00            ; clear dimensions count
0035B9  1               
0035B9  1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
0035B9  1               
0035B9  1               LAB_1E1F:
0035B9  1  98                   TYA                     ; copy dimensions count
0035BA  1  48                   PHA                     ; save it
0035BB  1  A5 94                LDA     <Varnm2         ; get array name 2nd byte
0035BD  1  48                   PHA                     ; save it
0035BE  1  A5 93                LDA     <Varnm1         ; get array name 1st byte
0035C0  1  48                   PHA                     ; save it
0035C1  1  20 94 35             JSR     LAB_EVIN        ; evaluate integer expression
0035C4  1  68                   PLA                     ; pull array name 1st byte
0035C5  1  85 93                STA     <Varnm1         ; restore array name 1st byte
0035C7  1  68                   PLA                     ; pull array name 2nd byte
0035C8  1  85 94                STA     <Varnm2         ; restore array name 2nd byte
0035CA  1  68                   PLA                     ; pull dimensions count
0035CB  1  A8                   TAY                     ; restore it
0035CC  1  A3 02                LDA     2,S             ; get DIM flag
0035CE  1  85 FD                STA     <TEMPW          ; push it
0035D0  1  A3 01                LDA     1,S             ; get data type flag
0035D2  1  85 FE                STA     <TEMPW+1        ; push it
0035D4  1  A5 AE                LDA     <FAC1_2         ; get this dimension size high byte
0035D6  1  83 02                STA     2,S             ; stack before flag bytes
0035D8  1  A5 AF                LDA     <FAC1_3         ; get this dimension size low byte
0035DA  1  83 01                STA     1,S             ; stack before flag bytes
0035DC  1  A5 FD                LDA     <TEMPW
0035DE  1  48                   PHA
0035DF  1  A5 FE                LDA     <TEMPW+1
0035E1  1  48                   PHA
0035E2  1  C8                   INY                     ; increment dimensions count
0035E3  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0035E7  1  C9 2C                CMP     #','            ; compare with ","
0035E9  1  F0 CE                BEQ     LAB_1E1F        ; if found go do next dimension
0035EB  1               
0035EB  1  84 5D                STY     <Dimcnt         ; store dimensions count
0035ED  1  20 B2 32             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0035F0  1  68                   PLA                     ; pull data type flag
0035F1  1  85 5F                STA     <Dtypef         ; restore data type flag, $FF=string, $00=numeric
0035F3  1  68                   PLA                     ; pull DIM flag
0035F4  1  85 5E                STA     <Defdim         ; restore DIM flag
0035F6  1  A6 7D                LDX     <Sarryl         ; get array mem start low byte
0035F8  1  A5 7E                LDA     <Sarryh         ; get array mem start high byte
0035FA  1               
0035FA  1               ; now check to see if we are at the end of array memory (we would be if there were
0035FA  1               ; no arrays).
0035FA  1               
0035FA  1               LAB_1E5C:
0035FA  1  86 AA                STX     <Astrtl         ; save as array start pointer low byte
0035FC  1  85 AB                STA     <Astrth         ; save as array start pointer high byte
0035FE  1  C5 80                CMP     <Earryh         ; compare with array mem end high byte
003600  1  D0 04                BNE     LAB_1E68        ; branch if not reached array mem end
003602  1               
003602  1  E4 7F                CPX     <Earryl         ; else compare with array mem end low byte
003604  1  F0 39                BEQ     LAB_1EA1        ; go build array if not found
003606  1               
003606  1               ; search for array
003606  1               LAB_1E68:
003606  1  A0 00                LDY     #$00            ; clear index
003608  1  B1 AA                LDA     (<Astrtl),Y     ; get array name first byte
00360A  1  C8                   INY                     ; increment index to second name byte
00360B  1  C5 93                CMP     <Varnm1         ; compare with this array name first byte
00360D  1  D0 06                BNE     LAB_1E77        ; branch if no match
00360F  1               
00360F  1  A5 94                LDA     <Varnm2         ; else get this array name second byte
003611  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array name second byte
003613  1  F0 16                BEQ     LAB_1E8D        ; array found so branch
003615  1               
003615  1               ; no match
003615  1               LAB_1E77:
003615  1  C8                   INY                     ; increment index
003616  1  B1 AA                LDA     (<Astrtl),Y     ; get array size low byte
003618  1  18                   CLC                     ; clear carry for add
003619  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
00361B  1  AA                   TAX                     ; copy low byte to X
00361C  1  C8                   INY                     ; increment index
00361D  1  B1 AA                LDA     (<Astrtl),Y     ; get array size high byte
00361F  1  65 AB                ADC     <Astrth         ; add array mem pointer high byte
003621  1  90 D7                BCC     LAB_1E5C        ; if no overflow go check next array
003623  1               ; do array bounds error
003623  1               
003623  1               LAB_1E85:
003623  1  A2 10                LDX     #$10            ; error code $10 ("Array bounds" error)
003625  1  2C                   .BYTE   $2C             ; makes next bit BIT LAB_08A2
003626  1               
003626  1               ; do function call error
003626  1               
003626  1               LAB_FCER:
003626  1  A2 08                LDX     #$08            ; error code $08 ("Function call" error)
003628  1               LAB_1E8A:
003628  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
00362B  1               
00362B  1               ; found array, are we trying to dimension it?
00362B  1               LAB_1E8D:
00362B  1  A2 12                LDX     #$12            ; set error $12 ("Double dimension" error)
00362D  1  A5 5E                LDA     <Defdim         ; get DIM flag
00362F  1  D0 F7                BNE     LAB_1E8A        ; if we are trying to dimension it do error #X, then warm
003631  1               ; start
003631  1               
003631  1               ; found the array and we're not dimensioning it so we must find an element in it
003631  1               
003631  1  20 83 35             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
003634  1               ; (<Astrtl,<Astrth points to start of array)
003634  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
003636  1  A0 04                LDY     #$04            ; set index to array's # of dimensions
003638  1  D1 AA                CMP     (<Astrtl),Y     ; compare with no of dimensions
00363A  1  D0 E7                BNE     LAB_1E85        ; if wrong do array bounds error, could do "Wrong
00363C  1               ; dimensions" error here .. if we want a different
00363C  1               ; error message
00363C  1               
00363C  1  4C C2 36             JMP     LAB_1F28        ; found array so go get element
00363F  1               ; (could jump to LAB_1F28 as all LAB_1F24 does is take
00363F  1               ; <Dimcnt and save it at (<Astrtl),Y which is already the
00363F  1               ; same or we would have taken the BNE)
00363F  1               
00363F  1               ; array not found, so build it
00363F  1               LAB_1EA1:
00363F  1  20 83 35             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
003642  1               ; (<Astrtl,<Astrth points to start of array)
003642  1  20 52 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
003645  1               ; addr to check is in AY (low/high)
003645  1  A0 00                LDY     #$00            ; clear Y (don't need to clear A)
003647  1  84 BB                STY     <Aspth          ; clear array data size high byte
003649  1  A5 93                LDA     <Varnm1         ; get variable name 1st byte
00364B  1  91 AA                STA     (<Astrtl),Y     ; save array name 1st byte
00364D  1  C8                   INY                     ; increment index
00364E  1  A5 94                LDA     <Varnm2         ; get variable name 2nd byte
003650  1  91 AA                STA     (<Astrtl),Y     ; save array name 2nd byte
003652  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
003654  1  A0 04                LDY     #$04            ; index to dimension count
003656  1  84 BA                STY     <Asptl          ; set array data size low byte (four bytes per element)
003658  1  91 AA                STA     (<Astrtl),Y     ; set array's dimensions count
00365A  1               
00365A  1               ; now calculate the size of the data space for the array
00365A  1  18                   CLC                     ; clear carry for add (clear on subsequent loops)
00365B  1               LAB_1EC0:
00365B  1  A2 0B                LDX     #$0B            ; set default dimension value low byte
00365D  1  A9 00                LDA     #$00            ; set default dimension value high byte
00365F  1  24 5E                BIT     <Defdim         ; test default DIM flag
003661  1  50 07                BVC     LAB_1ED0        ; branch if b6 of <Defdim is clear
003663  1               
003663  1  68                   PLA                     ; else pull dimension value low byte
003664  1  69 01                ADC     #$01            ; +1 (allow for zeroeth element)
003666  1  AA                   TAX                     ; copy low byte to X
003667  1  68                   PLA                     ; pull dimension value high byte
003668  1  69 00                ADC     #$00            ; add carry from low byte
00366A  1               
00366A  1               LAB_1ED0:
00366A  1  C8                   INY                     ; index to dimension value high byte
00366B  1  91 AA                STA     (<Astrtl),Y     ; save dimension value high byte
00366D  1  C8                   INY                     ; index to dimension value high byte
00366E  1  8A                   TXA                     ; get dimension value low byte
00366F  1  91 AA                STA     (<Astrtl),Y     ; save dimension value low byte
003671  1  20 11 37             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
003674  1  86 BA                STX     <Asptl          ; save array data size low byte
003676  1  85 BB                STA     <Aspth          ; save array data size high byte
003678  1  A4 71                LDY     <ut1_pl         ; restore index (saved by subroutine)
00367A  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
00367C  1  D0 DD                BNE     LAB_1EC0        ; loop while not = 0
00367E  1               
00367E  1  65 A5                ADC     <Adatah         ; add size high byte to first element high byte
003680  1               ; (carry is always clear here)
003680  1  B0 5D                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
003682  1               
003682  1  85 A5                STA     <Adatah         ; save end of array high byte
003684  1  A8                   TAY                     ; copy end high byte to Y
003685  1  8A                   TXA                     ; get array size low byte
003686  1  65 A4                ADC     <Adatal         ; add array start low byte
003688  1  90 03                BCC     LAB_1EF3        ; branch if no carry
00368A  1               
00368A  1  C8                   INY                     ; else increment end of array high byte
00368B  1  F0 52                BEQ     LAB_1F45        ; if overflow go do "Out of memory" error
00368D  1               
00368D  1               ; set-up mostly complete, now zero the array
00368D  1               LAB_1EF3:
00368D  1  20 52 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
003690  1               ; addr to check is in AY (low/high)
003690  1  85 7F                STA     <Earryl         ; save array mem end low byte
003692  1  84 80                STY     <Earryh         ; save array mem end high byte
003694  1  A9 00                LDA     #$00            ; clear byte for array clear
003696  1  E6 BB                INC     <Aspth          ; increment array size high byte (now block count)
003698  1  A4 BA                LDY     <Asptl          ; get array size low byte (now index to block)
00369A  1  F0 05                BEQ     LAB_1F07        ; branch if low byte = $00
00369C  1               
00369C  1               LAB_1F02:
00369C  1  88                   DEY                     ; decrement index (do 0 to n-1)
00369D  1  91 A4                STA     (<Adatal),Y     ; zero byte
00369F  1  D0 FB                BNE     LAB_1F02        ; loop until this block done
0036A1  1               
0036A1  1               LAB_1F07:
0036A1  1  C6 A5                DEC     <Adatah         ; decrement array pointer high byte
0036A3  1  C6 BB                DEC     <Aspth          ; decrement block count high byte
0036A5  1  D0 F5                BNE     LAB_1F02        ; loop until all blocks done
0036A7  1               
0036A7  1  E6 A5                INC     <Adatah         ; correct for last loop
0036A9  1  38                   SEC                     ; set carry for subtract
0036AA  1  A0 02                LDY     #$02            ; index to array size low byte
0036AC  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
0036AE  1  E5 AA                SBC     <Astrtl         ; subtract array start low byte
0036B0  1  91 AA                STA     (<Astrtl),Y     ; save array size low byte
0036B2  1  C8                   INY                     ; index to array size high byte
0036B3  1  A5 80                LDA     <Earryh         ; get array mem end high byte
0036B5  1  E5 AB                SBC     <Astrth         ; subtract array start high byte
0036B7  1  91 AA                STA     (<Astrtl),Y     ; save array size high byte
0036B9  1  A5 5E                LDA     <Defdim         ; get default DIM flag
0036BB  1  D0 53                BNE     LAB_1F7B        ; exit (RET) if this was a DIM command
0036BD  1               ; else, find element
0036BD  1  C8                   INY                     ; index to # of dimensions
0036BE  1               
0036BE  1               LAB_1F24:
0036BE  1  B1 AA                LDA     (<Astrtl),Y     ; get array's dimension count
0036C0  1  85 5D                STA     <Dimcnt         ; save it
0036C2  1               
0036C2  1               ; we have found, or built, the array. now we need to find the element
0036C2  1               
0036C2  1               LAB_1F28:
0036C2  1  A9 00                LDA     #$00            ; clear byte
0036C4  1  85 BA                STA     <Asptl          ; clear array data pointer low byte
0036C6  1               LAB_1F2C:
0036C6  1  85 BB                STA     <Aspth          ; save array data pointer high byte
0036C8  1  C8                   INY                     ; increment index (point to array bound high byte)
0036C9  1  68                   PLA                     ; pull array index low byte
0036CA  1  AA                   TAX                     ; copy to X
0036CB  1  85 AE                STA     <FAC1_2         ; save index low byte to FAC1 mantissa2
0036CD  1  68                   PLA                     ; pull array index high byte
0036CE  1  85 AF                STA     <FAC1_3         ; save index high byte to FAC1 mantissa3
0036D0  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound high byte
0036D2  1  90 0E                BCC     LAB_1F48        ; branch if within bounds
0036D4  1               
0036D4  1  D0 06                BNE     LAB_1F42        ; if outside bounds do array bounds error
0036D6  1               
0036D6  1               ; else high byte was = so test low bytes
0036D6  1  C8                   INY                     ; index to array bound low byte
0036D7  1  8A                   TXA                     ; get array index low byte
0036D8  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound low byte
0036DA  1  90 07                BCC     LAB_1F49        ; branch if within bounds
0036DC  1               
0036DC  1               LAB_1F42:
0036DC  1  4C 23 36             JMP     LAB_1E85        ; else do array bounds error
0036DF  1               
0036DF  1               LAB_1F45:
0036DF  1  4C 81 26             JMP     LAB_OMER        ; do "Out of memory" error then warm start
0036E2  1               
0036E2  1               LAB_1F48:
0036E2  1  C8                   INY                     ; index to array bound low byte
0036E3  1               LAB_1F49:
0036E3  1  A5 BB                LDA     <Aspth          ; get array data pointer high byte
0036E5  1  05 BA                ORA     <Asptl          ; OR with array data pointer low byte
0036E7  1  F0 0A                BEQ     LAB_1F5A        ; branch if array data pointer = null (skip multiply)
0036E9  1               
0036E9  1  20 11 37             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
0036EC  1  8A                   TXA                     ; get result low byte
0036ED  1  65 AE                ADC     <FAC1_2         ; add index low byte from FAC1 mantissa2
0036EF  1  AA                   TAX                     ; save result low byte
0036F0  1  98                   TYA                     ; get result high byte
0036F1  1  A4 71                LDY     <ut1_pl         ; restore index
0036F3  1               LAB_1F5A:
0036F3  1  65 AF                ADC     <FAC1_3         ; add index high byte from FAC1 mantissa3
0036F5  1  86 BA                STX     <Asptl          ; save array data pointer low byte
0036F7  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
0036F9  1  D0 CB                BNE     LAB_1F2C        ; loop if dimensions still to do
0036FB  1               
0036FB  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 2
0036FD  1  2A                   ROL     A               ; array data pointer high byte * 2
0036FE  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 4
003700  1  2A                   ROL     A               ; array data pointer high byte * 4
003701  1  A8                   TAY                     ; copy high byte
003702  1  A5 BA                LDA     <Asptl          ; get low byte
003704  1  65 A4                ADC     <Adatal         ; add array data start pointer low byte
003706  1  85 95                STA     <Cvaral         ; save as current var address low byte
003708  1  98                   TYA                     ; get high byte back
003709  1  65 A5                ADC     <Adatah         ; add array data start pointer high byte
00370B  1  85 96                STA     <Cvarah         ; save as current var address high byte
00370D  1  A8                   TAY                     ; copy high byte to Y
00370E  1  A5 95                LDA     <Cvaral         ; get current var address low byte
003710  1               LAB_1F7B:
003710  1  60                   RTS
003711  1               
003711  1               ; does XY = (<Astrtl),Y * (<Asptl)
003711  1               
003711  1               LAB_1F7C:
003711  1  84 71                STY     <ut1_pl         ; save index
003713  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size low byte
003715  1  85 76                STA     <dims_l         ; save dimension size low byte
003717  1  88                   DEY                     ; decrement index
003718  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size high byte
00371A  1  85 77                STA     <dims_h         ; save dimension size high byte
00371C  1               
00371C  1  A9 10                LDA     #$10            ; count = $10 (16 bit multiply)
00371E  1  85 A8                STA     <numbit         ; save bit count
003720  1  A2 00                LDX     #$00            ; clear result low byte
003722  1  A0 00                LDY     #$00            ; clear result high byte
003724  1               LAB_1F8F:
003724  1  8A                   TXA                     ; get result low byte
003725  1  0A                   ASL     A               ; *2
003726  1  AA                   TAX                     ; save result low byte
003727  1  98                   TYA                     ; get result high byte
003728  1  2A                   ROL     A               ; *2
003729  1  A8                   TAY                     ; save result high byte
00372A  1  B0 B3                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
00372C  1               
00372C  1  06 BA                ASL     <Asptl          ; shift multiplier low byte
00372E  1  26 BB                ROL     <Aspth          ; shift multiplier high byte
003730  1  90 11                BCC     LAB_1FA8        ; skip add if no carry
003732  1               
003732  1  18                   CLC                     ; else clear carry for add
003733  1  8A                   TXA                     ; get result low byte
003734  1  65 76                ADC     <dims_l         ; add dimension size low byte
003736  1  AA                   TAX                     ; save result low byte
003737  1  98                   TYA                     ; get result high byte
003738  1  65 77                ADC     <dims_h         ; add dimension size high byte
00373A  1  A8                   TAY                     ; save result high byte
00373B  1  B0 03                BCS     LAB_1F45_1      ; if overflow go do "Out of memory" error
00373D  1  4C 43 37             JMP     LAB_1FA8
003740  1               LAB_1F45_1:
003740  1  4C DF 36             JMP     LAB_1F45
003743  1               LAB_1FA8:
003743  1  C6 A8                DEC     <numbit         ; decrement bit count
003745  1  D0 DD                BNE     LAB_1F8F        ; loop until all done
003747  1               
003747  1  60                   RTS
003748  1               
003748  1               ; perform FRE()
003748  1               
003748  1               LAB_FRE:
003748  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
00374A  1  10 03                BPL     LAB_1FB4        ; branch if numeric
00374C  1               
00374C  1  20 B4 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
00374F  1               ; space returns with A = length, X=$71=pointer low byte,
00374F  1               ; Y=$72=pointer high byte
00374F  1               
00374F  1               ; FRE(n) was numeric so do this
00374F  1               LAB_1FB4:
00374F  1  20 8A 39             JSR     LAB_GARB        ; go do garbage collection
003752  1  38                   SEC                     ; set carry for subtract
003753  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003755  1  E5 7F                SBC     <Earryl         ; subtract array mem end low byte
003757  1  A8                   TAY                     ; copy result to Y
003758  1  A5 82                LDA     <Sstorh         ; get bottom of string space high byte
00375A  1  E5 80                SBC     <Earryh         ; subtract array mem end high byte
00375C  1               
00375C  1               ; save and convert integer AY to FAC1
00375C  1               
00375C  1               LAB_AYFC:
00375C  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00375E  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003760  1  84 AE                STY     <FAC1_2         ; save FAC1 mantissa2
003762  1  A2 90                LDX     #$90            ; set exponent=2^16 (integer)
003764  1  4C 40 44             JMP     LAB_27E3        ; set exp=X, clear <FAC1_3, normalise and return
003767  1               
003767  1               ; perform POS()
003767  1               
003767  1               LAB_POS:
003767  1  A4 0E                LDY     <TPos           ; get terminal position
003769  1               
003769  1               ; convert Y to byte in FAC1
003769  1               
003769  1               LAB_1FD0:
003769  1  A9 00                LDA     #$00            ; clear high byte
00376B  1  F0 EF                BEQ     LAB_AYFC        ; always save and convert integer AY to FAC1 and return
00376D  1               
00376D  1               ; check not Direct (used by DEF and INPUT)
00376D  1               
00376D  1               LAB_CKRN:
00376D  1  A6 88                LDX     <Clineh         ; get current line high byte
00376F  1  E8                   INX                     ; increment it
003770  1  F0 03                BEQ     LAB_1FD9
003772  1  4C 10 37             JMP     LAB_1F7B        ; return if can continue not direct mode
003775  1               
003775  1               ; else do illegal direct error
003775  1               LAB_1FD9:
003775  1  A2 16                LDX     #$16            ; error code $16 ("Illegal direct" error)
003777  1               LAB_1FDB:
003777  1  4C 83 26             JMP     LAB_XERR        ; go do error #X, then warm start
00377A  1               
00377A  1               ; perform DEF
00377A  1               
00377A  1               LAB_DEF:
00377A  1  20 AB 37             JSR     LAB_200B        ; check FNx syntax
00377D  1  85 9C                STA     <func_l         ; save function pointer low byte
00377F  1  84 9D                STY     <func_h         ; save function pointer high byte
003781  1  20 6D 37             JSR     LAB_CKRN        ; check not Direct (back here if ok)
003784  1  20 BF 32             JSR     LAB_1BFE        ; scan for "(" , else do syntax error then warm start
003787  1  A9 80                LDA     #$80            ; set flag for FNx
003789  1  85 61                STA     <Sufnxf         ; save subscript/FNx flag
00378B  1  20 9E 34             JSR     LAB_GVAR        ; get (var) address
00378E  1  20 90 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003791  1  20 B2 32             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003794  1  A9 D2                LDA     #TK_EQUAL       ; get = token
003796  1  20 B4 32             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003799  1  A5 96                LDA     <Cvarah         ; get current var address high byte
00379B  1  48                   PHA                     ; push it
00379C  1  A5 95                LDA     <Cvaral         ; get current var address low byte
00379E  1  48                   PHA                     ; push it
00379F  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0037A1  1  48                   PHA                     ; push it
0037A2  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0037A4  1  48                   PHA                     ; push it
0037A5  1  20 FA 2B             JSR     LAB_DATA        ; go perform DATA
0037A8  1  4C 57 38             JMP     LAB_207A        ; put execute pointer and variable pointer into function
0037AB  1               ; and return
0037AB  1               
0037AB  1               ; check FNx syntax
0037AB  1               
0037AB  1               LAB_200B:
0037AB  1  A9 BF                LDA     #TK_FN          ; get FN" token
0037AD  1  20 B4 32             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
0037B0  1               ; return character after A
0037B0  1  09 80                ORA     #$80            ; set FN flag bit
0037B2  1  85 61                STA     <Sufnxf         ; save FN flag so array variable test fails
0037B4  1  20 A6 34             JSR     LAB_1D12        ; search for FN variable
0037B7  1  4C 90 31             JMP     LAB_CTNM        ; check if source is numeric and return, else do type
0037BA  1               ; mismatch
0037BA  1               
0037BA  1               ; Evaluate FNx
0037BA  1               LAB_201E:
0037BA  1  20 AB 37             JSR     LAB_200B        ; check FNx syntax
0037BD  1  48                   PHA                     ; push function pointer low byte
0037BE  1  98                   TYA                     ; copy function pointer high byte
0037BF  1  48                   PHA                     ; push function pointer high byte
0037C0  1  20 BF 32             JSR     LAB_1BFE        ; scan for "(", else do syntax error then warm start
0037C3  1  20 A1 31             JSR     LAB_EVEX        ; evaluate expression
0037C6  1  20 B2 32             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
0037C9  1  20 90 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0037CC  1  68                   PLA                     ; pop function pointer high byte
0037CD  1  85 9D                STA     <func_h         ; restore it
0037CF  1  68                   PLA                     ; pop function pointer low byte
0037D0  1  85 9C                STA     <func_l         ; restore it
0037D2  1  A2 20                LDX     #$20            ; error code $20 ("Undefined function" error)
0037D4  1  A0 03                LDY     #$03            ; index to variable pointer high byte
0037D6  1  B1 9C                LDA     (<func_l),Y     ; get variable pointer high byte
0037D8  1  F0 9D                BEQ     LAB_1FDB        ; if zero go do undefined function error
0037DA  1               
0037DA  1  85 96                STA     <Cvarah         ; save variable address high byte
0037DC  1  88                   DEY                     ; index to variable address low byte
0037DD  1  B1 9C                LDA     (<func_l),Y     ; get variable address low byte
0037DF  1  85 95                STA     <Cvaral         ; save variable address low byte
0037E1  1  AA                   TAX                     ; copy address low byte
0037E2  1               
0037E2  1               ; now stack the function variable value before use
0037E2  1  C8                   INY                     ; index to mantissa_3
0037E3  1               LAB_2043:
0037E3  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from variable
0037E7  1  B5 95 C9 00  
0037EB  1  D0 04 A2 00  
0037F9  1  48                   PHA                     ; stack it
0037FA  1  88                   DEY                     ; decrement index
0037FB  1  10 E6                BPL     LAB_2043        ; loop until variable stacked
0037FD  1               
0037FD  1  A4 96                LDY     <Cvarah         ; get variable address high byte
0037FF  1  20 95 43             JSR     LAB_2778        ; pack FAC1 (function expression value) into (XY)
003802  1               ; (function variable), return Y=0, always
003802  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
003804  1  48                   PHA                     ; push it
003805  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
003807  1  48                   PHA                     ; push it
003808  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer low byte
00380C  1  B5 9C C9 00  
003810  1  D0 04 A2 00  
00381E  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
003820  1  C8                   INY                     ; index to high byte
003821  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer high byte
003825  1  B5 9C C9 00  
003829  1  D0 04 A2 00  
003837  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003839  1  A5 96                LDA     <Cvarah         ; get variable address high byte
00383B  1  48                   PHA                     ; push it
00383C  1  A5 95                LDA     <Cvaral         ; get variable address low byte
00383E  1  48                   PHA                     ; push it
00383F  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003842  1               ; else do type mismatch
003842  1  68                   PLA                     ; pull variable address low byte
003843  1  85 9C                STA     <func_l         ; save variable address low byte
003845  1  68                   PLA                     ; pull variable address high byte
003846  1  85 9D                STA     <func_h         ; save variable address high byte
003848  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00384C  1  F0 03                BEQ     LAB_2074        ; branch if null (should be [EOL] marker)
00384E  1               
00384E  1  4C C7 32             JMP     LAB_SNER        ; else syntax error then warm start
003851  1               
003851  1               ; restore <Bpntrl,<Bpntrh and function variable from stack
003851  1               
003851  1               LAB_2074:
003851  1  68                   PLA                     ; pull BASIC execute pointer low byte
003852  1  85 C3                STA     <Bpntrl         ; restore BASIC execute pointer low byte
003854  1  68                   PLA                     ; pull BASIC execute pointer high byte
003855  1  85 C4                STA     <Bpntrh         ; restore BASIC execute pointer high byte
003857  1               
003857  1               ; put execute pointer and variable pointer into function
003857  1               
003857  1               LAB_207A:
003857  1  A0 00                LDY     #$00            ; clear index
003859  1  68                   PLA                     ; pull BASIC execute pointer low byte
00385A  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
00385E  1  01 B5 9C C9  
003862  1  00 D0 04 A2  
003870  1  C8                   INY                     ; increment index
003871  1  68                   PLA                     ; pull BASIC execute pointer high byte
003872  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
003876  1  01 B5 9C C9  
00387A  1  00 D0 04 A2  
003888  1  C8                   INY                     ; increment index
003889  1  68                   PLA                     ; pull current var address low byte
00388A  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
00388E  1  01 B5 9C C9  
003892  1  00 D0 04 A2  
0038A0  1  C8                   INY                     ; increment index
0038A1  1  68                   PLA                     ; pull current var address high byte
0038A2  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0038A6  1  01 B5 9C C9  
0038AA  1  00 D0 04 A2  
0038B8  1  60                   RTS
0038B9  1               
0038B9  1               ; perform STR$()
0038B9  1               
0038B9  1               LAB_STRS:
0038B9  1  20 90 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0038BC  1  20 55 46             JSR     LAB_296E        ; convert FAC1 to string
0038BF  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
0038C1  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
0038C3  1  F0 12                BEQ     LAB_20AE        ; print null terminated string to <Sutill/<Sutilh
0038C5  1               
0038C5  1               ; Do string vector
0038C5  1               ; copy <des_pl/h to <des_2l/h and make string space A bytes long
0038C5  1               
0038C5  1               LAB_209C:
0038C5  1  A6 AE                LDX     <des_pl         ; get descriptor pointer low byte
0038C7  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
0038C9  1  86 9E                STX     <des_2l         ; save descriptor pointer low byte
0038CB  1  84 9F                STY     <des_2h         ; save descriptor pointer high byte
0038CD  1               
0038CD  1               ; make string space A bytes long
0038CD  1               ; A=length, X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
0038CD  1               
0038CD  1               LAB_MSSP:
0038CD  1  20 58 39             JSR     LAB_2115        ; make space in string memory for string A long
0038D0  1               ; return X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
0038D0  1  86 AD                STX     <str_pl         ; save string pointer low byte
0038D2  1  84 AE                STY     <str_ph         ; save string pointer high byte
0038D4  1  85 AC                STA     <str_ln         ; save length
0038D6  1  60                   RTS
0038D7  1               
0038D7  1               ; Scan, set up string
0038D7  1               ; print " terminated string to <Sutill/<Sutilh
0038D7  1               
0038D7  1               LAB_20AE:
0038D7  1  A2 22                LDX     #$22            ; set terminator to "
0038D9  1  86 5B                STX     <Srchc          ; set search character (terminator 1)
0038DB  1  86 5C                STX     <Asrch          ; set terminator 2
0038DD  1               
0038DD  1               ; print [<Srchc] or [<Asrch] terminated string to <Sutill/<Sutilh
0038DD  1               ; source is AY
0038DD  1               
0038DD  1               LAB_20B4:
0038DD  1  85 B8                STA     <ssptr_l        ; store string start low byte
0038DF  1  84 B9                STY     <ssptr_h        ; store string start high byte
0038E1  1  85 AD                STA     <str_pl         ; save string pointer low byte
0038E3  1  84 AE                STY     <str_ph         ; save string pointer high byte
0038E5  1  A0 FF                LDY     #$FF            ; set length to -1
0038E7  1               LAB_20BE:
0038E7  1  C8                   INY                     ; increment length
0038E8  1               
0038E8  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get byte from string
0038EC  1  B5 B8 C9 00  
0038F0  1  D0 04 A2 00  
0038FE  1  C9 00                CMP     #$00
003900  1  F0 0C                BEQ     LAB_20CF        ; exit loop if null byte [EOS]
003902  1               
003902  1  C5 5B                CMP     <Srchc          ; compare with search character (terminator 1)
003904  1  F0 04                BEQ     LAB_20CB        ; branch if terminator
003906  1               
003906  1  C5 5C                CMP     <Asrch          ; compare with terminator 2
003908  1  D0 DD                BNE     LAB_20BE        ; loop if not terminator 2
00390A  1               
00390A  1               LAB_20CB:
00390A  1  C9 22                CMP     #$22            ; compare with "
00390C  1  F0 01                BEQ     LAB_20D0        ; branch if " (carry set if = !)
00390E  1               
00390E  1               LAB_20CF:
00390E  1  18                   CLC                     ; clear carry for add (only if [EOL] terminated string)
00390F  1               LAB_20D0:
00390F  1  84 AC                STY     <str_ln         ; save length in FAC1 exponent
003911  1  98                   TYA                     ; copy length to A
003912  1  65 B8                ADC     <ssptr_l        ; add string start low byte
003914  1  85 BA                STA     <Sendl          ; save string end low byte
003916  1  A6 B9                LDX     <ssptr_h        ; get string start high byte
003918  1  90 01                BCC     LAB_20DC        ; branch if no low byte overflow
00391A  1               
00391A  1  E8                   INX                     ; else increment high byte
00391B  1               LAB_20DC:
00391B  1  86 BB                STX     <Sendh          ; save string end high byte
00391D  1  A5 B9                LDA     <ssptr_h        ; get string start high byte
00391F  1               
00391F  1               
00391F  1               ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
00391F  1               ; *** replace
00391F  1               ;      CMP	#((BASICBEGIN&$FF00)>>8)  ; compare with BASICBEGIN, FORMERLY (>Ram_base) start of program memory
00391F  1               ;      BCS   LAB_RTST          ; branch if not in utility area
00391F  1               ; *** with
00391F  1  F0 04                BEQ     LAB_MVST        ; fix STR$() using page zero via LAB_296E
003921  1  C9 21                CMP     #>Ibuffs        ; compare with location of input buffer page
003923  1  D0 0B                BNE     LAB_RTST        ; branch if not in utility area
003925  1               LAB_MVST:
003925  1               ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
003925  1               
003925  1               
003925  1  98                   TYA                     ; copy length to A
003926  1  20 C5 38             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
003929  1               ; long
003929  1  A6 B8                LDX     <ssptr_l        ; get string start low byte
00392B  1  A4 B9                LDY     <ssptr_h        ; get string start high byte
00392D  1  20 6D 3B             JSR     LAB_2298        ; store string A bytes long from XY to (<Sutill)
003930  1               ; check for space on descriptor stack then ..
003930  1               ; put string address and length on descriptor stack and update stack pointers
003930  1               
003930  1               LAB_RTST:
003930  1  A6 65                LDX     <next_s         ; get string stack pointer
003932  1  E0 71                CPX     #<des_sk+$09    ; compare with max+1
003934  1  D0 05                BNE     LAB_20F8        ; branch if space on string stack
003936  1               
003936  1               ; else do string too complex error
003936  1  A2 1C                LDX     #$1C            ; error code $1C ("String too complex" error)
003938  1               LAB_20F5:
003938  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
00393B  1               
00393B  1               ; put string address and length on descriptor stack and update stack pointers
00393B  1               
00393B  1               LAB_20F8:
00393B  1  A5 AC                LDA     <str_ln         ; get string length
00393D  1  95 00                STA     <PLUS_0,X       ; put on string stack
00393F  1  A5 AD                LDA     <str_pl         ; get string pointer low byte
003941  1  95 01                STA     <PLUS_1,X       ; put on string stack
003943  1  A5 AE                LDA     <str_ph         ; get string pointer high byte
003945  1  95 02                STA     <PLUS_2,X       ; put on string stack
003947  1  A0 00                LDY     #$00            ; clear Y
003949  1  86 AE                STX     <des_pl         ; save string descriptor pointer low byte
00394B  1  84 AF                STY     <des_ph         ; save string descriptor pointer high byte (always $00)
00394D  1  88                   DEY                     ; Y = $FF
00394E  1  84 5F                STY     <Dtypef         ; save data type flag, $FF=string
003950  1  86 66                STX     <last_sl        ; save old stack pointer (current top item)
003952  1  E8                   INX                     ; update stack pointer
003953  1  E8                   INX                     ; update stack pointer
003954  1  E8                   INX                     ; update stack pointer
003955  1  86 65                STX     <next_s         ; save new top item value
003957  1  60                   RTS
003958  1               
003958  1               ; Build descriptor
003958  1               ; make space in string memory for string A long
003958  1               ; return X=<Sutill=ptr low byte, Y=<Sutill=ptr high byte
003958  1               
003958  1               LAB_2115:
003958  1  46 60                LSR     <Gclctd         ; clear garbage collected flag (b7)
00395A  1               
00395A  1               ; make space for string A long
00395A  1               LAB_2117:
00395A  1  48                   PHA                     ; save string length
00395B  1  49 FF                EOR     #$FF            ; complement it
00395D  1  38                   SEC                     ; set carry for subtract (twos comp add)
00395E  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte (subtract length)
003960  1  A4 82                LDY     <Sstorh         ; get bottom of string space high byte
003962  1  B0 01                BCS     LAB_2122        ; skip decrement if no underflow
003964  1               
003964  1  88                   DEY                     ; decrement bottom of string space high byte
003965  1               LAB_2122:
003965  1  C4 80                CPY     <Earryh         ; compare with array mem end high byte
003967  1  90 11                BCC     LAB_2137        ; do out of memory error if less
003969  1               
003969  1  D0 04                BNE     LAB_212C        ; if not = skip next test
00396B  1               
00396B  1  C5 7F                CMP     <Earryl         ; compare with array mem end low byte
00396D  1  90 0B                BCC     LAB_2137        ; do out of memory error if less
00396F  1               
00396F  1               LAB_212C:
00396F  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
003971  1  84 82                STY     <Sstorh         ; save bottom of string space high byte
003973  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003975  1  84 84                STY     <Sutilh         ; save string utility ptr high byte
003977  1  AA                   TAX                     ; copy low byte to X
003978  1  68                   PLA                     ; get string length back
003979  1  60                   RTS
00397A  1               
00397A  1               LAB_2137:
00397A  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
00397C  1  A5 60                LDA     <Gclctd         ; get garbage collected flag
00397E  1  30 B8                BMI     LAB_20F5        ; if set then do error code X
003980  1               
003980  1  20 8A 39             JSR     LAB_GARB        ; else go do garbage collection
003983  1  A9 80                LDA     #$80            ; flag for garbage collected
003985  1  85 60                STA     <Gclctd         ; set garbage collected flag
003987  1  68                   PLA                     ; pull length
003988  1  D0 D0                BNE     LAB_2117        ; go try again (loop always, length should never be = $00)
00398A  1               
00398A  1               ; garbage collection routine
00398A  1               
00398A  1               LAB_GARB:
00398A  1  A6 85                LDX     <Ememl          ; get end of mem low byte
00398C  1  A5 86                LDA     <Ememh          ; get end of mem high byte
00398E  1               
00398E  1               ; re-run routine from last ending
00398E  1               
00398E  1               LAB_214B:
00398E  1  86 81                STX     <Sstorl         ; set string storage low byte
003990  1  85 82                STA     <Sstorh         ; set string storage high byte
003992  1  A0 00                LDY     #$00            ; clear index
003994  1  84 9D                STY     <garb_h         ; clear working pointer high byte (flag no strings to move)
003996  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
003998  1  A6 80                LDX     <Earryh         ; get array mem end high byte
00399A  1  85 AA                STA     <Histrl         ; save as highest string low byte
00399C  1  86 AB                STX     <Histrh         ; save as highest string high byte
00399E  1  A9 68                LDA     #<des_sk        ; set descriptor stack pointer
0039A0  1  85 71                STA     <ut1_pl         ; save descriptor stack pointer low byte
0039A2  1  84 72                STY     <ut1_ph         ; save descriptor stack pointer high byte ($00)
0039A4  1               LAB_2161:
0039A4  1  C5 65                CMP     <next_s         ; compare with descriptor stack pointer
0039A6  1  F0 05                BEQ     LAB_216A        ; branch if =
0039A8  1               
0039A8  1  20 0E 3A             JSR     LAB_21D7        ; go garbage collect descriptor stack
0039AB  1  F0 F7                BEQ     LAB_2161        ; loop always
0039AD  1               
0039AD  1               ; done stacked strings, now do string vars
0039AD  1               LAB_216A:
0039AD  1  06 A0                ASL     <g_step         ; set step size = $06
0039AF  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0039B1  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
0039B3  1  85 71                STA     <ut1_pl         ; save as pointer low byte
0039B5  1  86 72                STX     <ut1_ph         ; save as pointer high byte
0039B7  1               LAB_2176:
0039B7  1  E4 7E                CPX     <Sarryh         ; compare start of arrays high byte
0039B9  1  D0 04                BNE     LAB_217E        ; branch if no high byte match
0039BB  1               
0039BB  1  C5 7D                CMP     <Sarryl         ; else compare start of arrays low byte
0039BD  1  F0 05                BEQ     LAB_2183        ; branch if = var mem end
0039BF  1               
0039BF  1               LAB_217E:
0039BF  1  20 08 3A             JSR     LAB_21D1        ; go garbage collect strings
0039C2  1  F0 F3                BEQ     LAB_2176        ; loop always
0039C4  1               
0039C4  1               ; done string vars, now do string arrays
0039C4  1               LAB_2183:
0039C4  1  85 A4                STA     <Nbendl         ; save start of arrays low byte as working pointer
0039C6  1  86 A5                STX     <Nbendh         ; save start of arrays high byte as working pointer
0039C8  1  A9 04                LDA     #$04            ; set step size
0039CA  1  85 A0                STA     <g_step         ; save step size
0039CC  1               LAB_218B:
0039CC  1  A5 A4                LDA     <Nbendl         ; get pointer low byte
0039CE  1  A6 A5                LDX     <Nbendh         ; get pointer high byte
0039D0  1               LAB_218F:
0039D0  1  E4 80                CPX     <Earryh         ; compare with array mem end high byte
0039D2  1  D0 04                BNE     LAB_219A        ; branch if not at end
0039D4  1               
0039D4  1  C5 7F                CMP     <Earryl         ; else compare with array mem end low byte
0039D6  1  F0 75                BEQ     LAB_2216        ; tidy up and exit if at end
0039D8  1               
0039D8  1               LAB_219A:
0039D8  1  85 71                STA     <ut1_pl         ; save pointer low byte
0039DA  1  86 72                STX     <ut1_ph         ; save pointer high byte
0039DC  1  A0 02                LDY     #$02            ; set index
0039DE  1  B1 71                LDA     (<ut1_pl),Y     ; get array size low byte
0039E0  1  65 A4                ADC     <Nbendl         ; add start of this array low byte
0039E2  1  85 A4                STA     <Nbendl         ; save start of next array low byte
0039E4  1  C8                   INY                     ; increment index
0039E5  1  B1 71                LDA     (<ut1_pl),Y     ; get array size high byte
0039E7  1  65 A5                ADC     <Nbendh         ; add start of this array high byte
0039E9  1  85 A5                STA     <Nbendh         ; save start of next array high byte
0039EB  1  A0 01                LDY     #$01            ; set index
0039ED  1  B1 71                LDA     (<ut1_pl),Y     ; get name second byte
0039EF  1  10 DB                BPL     LAB_218B        ; skip if not string array
0039F1  1               
0039F1  1               ; was string array so ..
0039F1  1               
0039F1  1  A0 04                LDY     #$04            ; set index
0039F3  1  B1 71                LDA     (<ut1_pl),Y     ; get # of dimensions
0039F5  1  0A                   ASL     A               ; *2
0039F6  1  69 05                ADC     #$05            ; +5 (array header size)
0039F8  1  20 40 3A             JSR     LAB_2208        ; go set up for first element
0039FB  1               LAB_21C4:
0039FB  1  E4 A5                CPX     <Nbendh         ; compare with start of next array high byte
0039FD  1  D0 04                BNE     LAB_21CC        ; branch if <> (go do this array)
0039FF  1               
0039FF  1  C5 A4                CMP     <Nbendl         ; else compare element pointer low byte with next array
003A01  1               ; low byte
003A01  1  F0 CD                BEQ     LAB_218F        ; if equal then go do next array
003A03  1               
003A03  1               LAB_21CC:
003A03  1  20 0E 3A             JSR     LAB_21D7        ; go defrag array strings
003A06  1  F0 F3                BEQ     LAB_21C4        ; go do next array string (loop always)
003A08  1               
003A08  1               ; defrag string variables
003A08  1               ; enter with XA = variable pointer
003A08  1               ; return with XA = next variable pointer
003A08  1               
003A08  1               LAB_21D1:
003A08  1  C8                   INY                     ; increment index (Y was $00)
003A09  1  B1 71                LDA     (<ut1_pl),Y     ; get var name byte 2
003A0B  1  10 30                BPL     LAB_2206        ; if not string, step pointer to next var and return
003A0D  1               
003A0D  1  C8                   INY                     ; else increment index
003A0E  1               LAB_21D7:
003A0E  1  B1 71                LDA     (<ut1_pl),Y     ; get string length
003A10  1  F0 2B                BEQ     LAB_2206        ; if null, step pointer to next string and return
003A12  1               
003A12  1  C8                   INY                     ; else increment index
003A13  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer low byte
003A15  1  AA                   TAX                     ; copy to X
003A16  1  C8                   INY                     ; increment index
003A17  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer high byte
003A19  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
003A1B  1  90 06                BCC     LAB_21EC        ; branch if less
003A1D  1               
003A1D  1  D0 1E                BNE     LAB_2206        ; if greater, step pointer to next string and return
003A1F  1               
003A1F  1               ; high bytes were = so compare low bytes
003A1F  1  E4 81                CPX     <Sstorl         ; compare bottom of string space low byte
003A21  1  B0 1A                BCS     LAB_2206        ; if >=, step pointer to next string and return
003A23  1               
003A23  1               ; string pointer is < string storage pointer (pos in mem)
003A23  1               LAB_21EC:
003A23  1  C5 AB                CMP     <Histrh         ; compare to highest string high byte
003A25  1  90 17                BCC     LAB_2207        ; if <, step pointer to next string and return
003A27  1               
003A27  1  D0 04                BNE     LAB_21F6        ; if > update pointers, step to next and return
003A29  1               
003A29  1               ; high bytes were = so compare low bytes
003A29  1  E4 AA                CPX     <Histrl         ; compare to highest string low byte
003A2B  1  90 11                BCC     LAB_2207        ; if <, step pointer to next string and return
003A2D  1               
003A2D  1               ; string is in string memory space
003A2D  1               LAB_21F6:
003A2D  1  86 AA                STX     <Histrl         ; save as new highest string low byte
003A2F  1  85 AB                STA     <Histrh         ; save as new highest string high byte
003A31  1  A5 71                LDA     <ut1_pl         ; get start of vars(descriptors) low byte
003A33  1  A6 72                LDX     <ut1_ph         ; get start of vars(descriptors) high byte
003A35  1  85 9C                STA     <garb_l         ; save as working pointer low byte
003A37  1  86 9D                STX     <garb_h         ; save as working pointer high byte
003A39  1  88                   DEY                     ; decrement index DIFFERS
003A3A  1  88                   DEY                     ; decrement index (should point to descriptor start)
003A3B  1  84 A2                STY     <g_indx         ; save index pointer
003A3D  1               
003A3D  1               ; step pointer to next string
003A3D  1               LAB_2206:
003A3D  1  18                   CLC                     ; clear carry for add
003A3E  1               LAB_2207:
003A3E  1  A5 A0                LDA     <g_step         ; get step size
003A40  1               LAB_2208:
003A40  1  65 71                ADC     <ut1_pl         ; add pointer low byte
003A42  1  85 71                STA     <ut1_pl         ; save pointer low byte
003A44  1  90 02                BCC     LAB_2211        ; branch if no overflow
003A46  1               
003A46  1  E6 72                INC     <ut1_ph         ; else increment high byte
003A48  1               LAB_2211:
003A48  1  A6 72                LDX     <ut1_ph         ; get pointer high byte
003A4A  1  A0 00                LDY     #$00            ; clear Y
003A4C  1  60                   RTS
003A4D  1               
003A4D  1               ; search complete, now either exit or set-up and move string
003A4D  1               
003A4D  1               LAB_2216:
003A4D  1  C6 A0                DEC     <g_step         ; decrement step size (now $03 for descriptor stack)
003A4F  1  A6 9D                LDX     <garb_h         ; get string to move high byte
003A51  1  F0 F5                BEQ     LAB_2211        ; exit if nothing to move
003A53  1               
003A53  1  A4 A2                LDY     <g_indx         ; get index byte back (points to descriptor)
003A55  1  18                   CLC                     ; clear carry for add
003A56  1  8B DA A2 01          LDAINDIRECTY garb_l     ; get string length
003A5A  1  B5 9C C9 00  
003A5E  1  D0 04 A2 00  
003A6C  1  65 AA                ADC     <Histrl         ; add highest string low byte
003A6E  1  85 A6                STA     <Obendl         ; save old block end low pointer
003A70  1  A5 AB                LDA     <Histrh         ; get highest string high byte
003A72  1  69 00                ADC     #$00            ; add any carry
003A74  1  85 A7                STA     <Obendh         ; save old block end high byte
003A76  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003A78  1  A6 82                LDX     <Sstorh         ; get bottom of string space high byte
003A7A  1  85 A4                STA     <Nbendl         ; save new block end low byte
003A7C  1  86 A5                STX     <Nbendh         ; save new block end high byte
003A7E  1  20 AF 25             JSR     LAB_11D6        ; open up space in memory, don't set array end
003A81  1  A4 A2                LDY     <g_indx         ; get index byte
003A83  1  C8                   INY                     ; point to descriptor low byte
003A84  1  A5 A4                LDA     <Nbendl         ; get string pointer low byte
003A86  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer low byte
003A8A  1  01 B5 9C C9  
003A8E  1  00 D0 04 A2  
003A9C  1  AA                   TAX                     ; copy string pointer low byte
003A9D  1  E6 A5                INC     <Nbendh         ; correct high byte (move sets high byte -1)
003A9F  1  A5 A5                LDA     <Nbendh         ; get new string pointer high byte
003AA1  1  C8                   INY                     ; point to descriptor high byte
003AA2  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer high byte
003AA6  1  01 B5 9C C9  
003AAA  1  00 D0 04 A2  
003AB8  1  4C 8E 39             JMP     LAB_214B        ; re-run routine from last ending
003ABB  1               ; (but don't collect this string)
003ABB  1               
003ABB  1               ; concatenate
003ABB  1               ; add strings, string 1 is in descriptor <des_pl, string 2 is in line
003ABB  1               
003ABB  1               LAB_224D:
003ABB  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003ABD  1  48                   PHA                     ; put on stack
003ABE  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003AC0  1  48                   PHA                     ; put on stack
003AC1  1  20 8F 32             JSR     LAB_GVAL        ; get value from line
003AC4  1  20 92 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003AC7  1  68                   PLA                     ; get descriptor pointer low byte back
003AC8  1  85 B8                STA     <ssptr_l        ; set pointer low byte
003ACA  1  68                   PLA                     ; get descriptor pointer high byte back
003ACB  1  85 B9                STA     <ssptr_h        ; set pointer high byte
003ACD  1  A0 00                LDY     #$00            ; clear index
003ACF  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get length_1 from descriptor
003AD3  1  B5 B8 C9 00  
003AD7  1  D0 04 A2 00  
003AE5  1  18                   CLC                     ; clear carry for add
003AE6  1  8B 48 DA A2          ADCINDIRECTY des_pl     ; add length_2
003AEA  1  01 B5 AE C9  
003AEE  1  00 D0 04 A2  
003AFF  1  90 05                BCC     LAB_226D        ; branch if no overflow
003B01  1               
003B01  1  A2 1A                LDX     #$1A            ; else set error code $1A ("String too long" error)
003B03  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
003B06  1               
003B06  1               LAB_226D:
003B06  1  20 C5 38             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
003B09  1               ; long
003B09  1  20 23 3B             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
003B0C  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003B0E  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003B10  1  20 B8 3B             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003B13  1               ; returns with A = length, <ut1_pl = pointer low byte,
003B13  1               ; <ut1_ph = pointer high byte
003B13  1  20 71 3B             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003B16  1  A5 B8                LDA     <ssptr_l        ;.set descriptor pointer low byte
003B18  1  A4 B9                LDY     <ssptr_h        ;.set descriptor pointer high byte
003B1A  1  20 B8 3B             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003B1D  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003B1D  1               ; Y=<ut1_ph=pointer high byte
003B1D  1  20 30 39             JSR     LAB_RTST        ; check for space on descriptor stack then put string
003B20  1               ; address and length on descriptor stack and update stack
003B20  1               ; pointers
003B20  1  4C B8 31             JMP     LAB_1ADB        ;.continue evaluation
003B23  1               
003B23  1               ; copy string from descriptor (<sdescr) to (<Sutill)
003B23  1               
003B23  1               LAB_228A:
003B23  1  A0 00                LDY     #$00            ; clear index
003B25  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get string length
003B29  1  B5 B8 C9 00  
003B2D  1  D0 04 A2 00  
003B3B  1  48                   PHA                     ; save on stack
003B3C  1  C8                   INY                     ; increment index
003B3D  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer low byte
003B41  1  B5 B8 C9 00  
003B45  1  D0 04 A2 00  
003B53  1  AA                   TAX                     ; copy to X
003B54  1  C8                   INY                     ; increment index
003B55  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer high byte
003B59  1  B5 B8 C9 00  
003B5D  1  D0 04 A2 00  
003B6B  1  A8                   TAY                     ; copy to Y
003B6C  1  68                   PLA                     ; get length back
003B6D  1               
003B6D  1               ; store string A bytes long from YX to (<Sutill)
003B6D  1               
003B6D  1               LAB_2298:
003B6D  1  86 71                STX     <ut1_pl         ; save source string pointer low byte
003B6F  1  84 72                STY     <ut1_ph         ; save source string pointer high byte
003B71  1               
003B71  1               ; store string A bytes long from (<ut1_pl) to (<Sutill)
003B71  1               
003B71  1               LAB_229C:
003B71  1  AA                   TAX                     ; copy length to index (don't count with Y)
003B72  1  F0 3C                BEQ     LAB_22B2        ; branch if = $0 (null string) no need to add zero length
003B74  1               
003B74  1  A0 00                LDY     #$00            ; zero pointer (copy forward)
003B76  1               LAB_22A0:
003B76  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get source byte
003B7A  1  B5 71 C9 00  
003B7E  1  D0 04 A2 00  
003B8C  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save destination byte
003B90  1  01 B5 83 C9  
003B94  1  00 D0 04 A2  
003BA2  1               
003BA2  1  C8                   INY                     ; increment index
003BA3  1  CA                   DEX                     ; decrement counter
003BA4  1  D0 D0                BNE     LAB_22A0        ; loop while <> 0
003BA6  1               
003BA6  1  98                   TYA                     ; restore length from Y
003BA7  1               LAB_22A9:
003BA7  1  18                   CLC                     ; clear carry for add
003BA8  1  65 83                ADC     <Sutill         ; add string utility ptr low byte
003BAA  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003BAC  1  90 02                BCC     LAB_22B2        ; branch if no carry
003BAE  1               
003BAE  1  E6 84                INC     <Sutilh         ; else increment string utility ptr high byte
003BB0  1               LAB_22B2:
003BB0  1  60                   RTS
003BB1  1               
003BB1  1               ; evaluate string
003BB1  1               
003BB1  1               LAB_EVST:
003BB1  1  20 92 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003BB4  1               
003BB4  1               ; pop string off descriptor stack, or from top of string space
003BB4  1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
003BB4  1               
003BB4  1               LAB_22B6:
003BB4  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003BB6  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003BB8  1               
003BB8  1               ; pop (YA) descriptor off stack or from top of string space
003BB8  1               ; returns with A = length, X=<ut1_pl=pointer low byte, Y=<ut1_ph=pointer high byte
003BB8  1               
003BB8  1               LAB_22BA:
003BB8  1  85 71                STA     <ut1_pl         ; save descriptor pointer low byte
003BBA  1  84 72                STY     <ut1_ph         ; save descriptor pointer high byte
003BBC  1  20 25 3C             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
003BBF  1  08                   PHP                     ; save status flags
003BC0  1  A0 00                LDY     #$00            ; clear index
003BC2  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get length from string descriptor
003BC6  1  B5 71 C9 00  
003BCA  1  D0 04 A2 00  
003BD8  1  48                   PHA                     ; put on stack
003BD9  1  C8                   INY                     ; increment index
003BDA  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte from descriptor
003BDE  1  B5 71 C9 00  
003BE2  1  D0 04 A2 00  
003BF0  1  AA                   TAX                     ; copy to X
003BF1  1  C8                   INY                     ; increment index
003BF2  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte from descriptor
003BF6  1  B5 71 C9 00  
003BFA  1  D0 04 A2 00  
003C08  1  A8                   TAY                     ; copy to Y
003C09  1  68                   PLA                     ; get string length back
003C0A  1  28                   PLP                     ; restore status
003C0B  1  D0 13                BNE     LAB_22E6        ; branch if pointer <> <last_sl,<last_sh
003C0D  1               
003C0D  1  C4 82                CPY     <Sstorh         ; compare bottom of string space high byte
003C0F  1  D0 0F                BNE     LAB_22E6        ; branch if <>
003C11  1               
003C11  1  E4 81                CPX     <Sstorl         ; else compare bottom of string space low byte
003C13  1  D0 0B                BNE     LAB_22E6        ; branch if <>
003C15  1               
003C15  1  48                   PHA                     ; save string length
003C16  1  18                   CLC                     ; clear carry for add
003C17  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte
003C19  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
003C1B  1  90 02                BCC     LAB_22E5        ; skip increment if no overflow
003C1D  1               
003C1D  1  E6 82                INC     <Sstorh         ; increment bottom of string space high byte
003C1F  1               LAB_22E5:
003C1F  1  68                   PLA                     ; restore string length
003C20  1               LAB_22E6:
003C20  1  86 71                STX     <ut1_pl         ; save string pointer low byte
003C22  1  84 72                STY     <ut1_ph         ; save string pointer high byte
003C24  1  60                   RTS
003C25  1               
003C25  1               ; clean descriptor stack, YA = pointer
003C25  1               ; checks if AY is on the descriptor stack, if so does a stack discard
003C25  1               
003C25  1               LAB_22EB:
003C25  1  C4 67                CPY     <last_sh        ; compare pointer high byte
003C27  1  D0 0C                BNE     LAB_22FB        ; exit if <>
003C29  1               
003C29  1  C5 66                CMP     <last_sl        ; compare pointer low byte
003C2B  1  D0 08                BNE     LAB_22FB        ; exit if <>
003C2D  1               
003C2D  1  85 65                STA     <next_s         ; save descriptor stack pointer
003C2F  1  E9 03                SBC     #$03            ; -3
003C31  1  85 66                STA     <last_sl        ; save low byte -3
003C33  1  A0 00                LDY     #$00            ; clear high byte
003C35  1               LAB_22FB:
003C35  1  60                   RTS
003C36  1               
003C36  1               ; perform CHR$()
003C36  1               
003C36  1               LAB_CHRS:
003C36  1  20 40 3E             JSR     LAB_EVBY        ; evaluate byte expression, result in X
003C39  1  8A                   TXA                     ; copy to A
003C3A  1  48                   PHA                     ; save character
003C3B  1  A9 01                LDA     #$01            ; string is single byte
003C3D  1  20 CD 38             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003C40  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003C40  1  68                   PLA                     ; get character back
003C41  1  A0 00                LDY     #$00            ; clear index
003C43  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
003C47  1  01 B5 AD C9  
003C4B  1  00 D0 04 A2  
003C59  1  4C 30 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003C5C  1               ; address and length on descriptor stack and update stack
003C5C  1               ; pointers
003C5C  1               
003C5C  1               ; perform LEFT$()
003C5C  1               
003C5C  1               LAB_LEFT:
003C5C  1  48                   PHA                     ; push byte parameter
003C5D  1  20 14 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003C60  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003C60  1  8B 48 DA A2          CMPINDIRECTY des_2l     ; compare byte parameter with string length
003C64  1  01 B5 9E C9  
003C68  1  00 D0 04 A2  
003C78  1  98                   TYA                     ; clear A
003C79  1  F0 1F                BEQ     LAB_2316        ; go do string copy (branch always)
003C7B  1               
003C7B  1               ; perform RIGHT$()
003C7B  1               
003C7B  1               LAB_RIGHT:
003C7B  1  48                   PHA                     ; push byte parameter
003C7C  1  20 14 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003C7F  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003C7F  1  8B 48 DA A2          FETCHINDIRECTY des_2l   ; subtract string length
003C83  1  01 B5 9E C9  
003C87  1  00 D0 04 A2  
003C95  1  18                   CLC                     ; clear carry for add-1
003C96  1  E5 04                SBC     <TMPFLG         ; REDO SBC WITH CARRY CLEARED (ARTIFACT FROM 816 CONVERSION)
003C98  1  49 FF                EOR     #$FF            ; invert it (A=LEN(expression$)-l)
003C9A  1               
003C9A  1               LAB_2316:
003C9A  1  90 18                BCC     LAB_231C        ; branch if string length > byte parameter
003C9C  1               
003C9C  1  8B DA A2 01          LDAINDIRECTY des_2l     ; else make parameter = length
003CA0  1  B5 9E C9 00  
003CA4  1  D0 04 A2 00  
003CB2  1  AA                   TAX                     ; copy to byte parameter copy
003CB3  1  98                   TYA                     ; clear string start offset
003CB4  1               LAB_231C:
003CB4  1  48                   PHA                     ; save string start offset
003CB5  1               LAB_231D:
003CB5  1  8A                   TXA                     ; copy byte parameter (or string length if <)
003CB6  1               LAB_231E:
003CB6  1  48                   PHA                     ; save string length
003CB7  1  20 CD 38             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003CBA  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003CBA  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003CBC  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003CBE  1  20 B8 3B             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003CC1  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003CC1  1               ; Y=<ut1_ph=pointer high byte
003CC1  1  68                   PLA                     ; get string length back
003CC2  1  A8                   TAY                     ; copy length to Y
003CC3  1  68                   PLA                     ; get string start offset back
003CC4  1  18                   CLC                     ; clear carry for add
003CC5  1  65 71                ADC     <ut1_pl         ; add start offset to string start pointer low byte
003CC7  1  85 71                STA     <ut1_pl         ; save string start pointer low byte
003CC9  1  90 02                BCC     LAB_2335        ; branch if no overflow
003CCB  1               
003CCB  1  E6 72                INC     <ut1_ph         ; else increment string start pointer high byte
003CCD  1               LAB_2335:
003CCD  1  98                   TYA                     ; copy length to A
003CCE  1  20 71 3B             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003CD1  1  4C 30 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003CD4  1               ; address and length on descriptor stack and update stack
003CD4  1               ; pointers
003CD4  1               
003CD4  1               ; perform MID$()
003CD4  1               
003CD4  1               LAB_MIDS:
003CD4  1  48                   PHA                     ; push byte parameter
003CD5  1  A9 FF                LDA     #$FF            ; set default length = 255
003CD7  1  85 AF                STA     <mids_l         ; save default length
003CD9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003CDD  1  C9 29                CMP     #')'            ; compare with ")"
003CDF  1  F0 06                BEQ     LAB_2358        ; branch if = ")" (skip second byte get)
003CE1  1               
003CE1  1  20 C3 32             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003CE4  1  20 3D 3E             JSR     LAB_GTBY        ; get byte parameter (use copy in <mids_l)
003CE7  1               LAB_2358:
003CE7  1  20 14 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003CEA  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003CEA  1  CA                   DEX                     ; decrement start index
003CEB  1  8A                   TXA                     ; copy to A
003CEC  1  48                   PHA                     ; save string start offset
003CED  1  8B 48 DA A2          FETCHINDIRECTY des_2l
003CF1  1  01 B5 9E C9  
003CF5  1  00 D0 04 A2  
003D03  1  18                   CLC                     ; clear carry for sub-1
003D04  1  A2 00                LDX     #$00            ; clear output string length
003D06  1  E5 04                SBC     <TMPFLG         ; subtract string length
003D08  1  B0 AB                BCS     LAB_231D        ; if start>string length go do null string
003D0A  1               
003D0A  1  49 FF                EOR     #$FF            ; complement -length
003D0C  1  C5 AF                CMP     <mids_l         ; compare byte parameter
003D0E  1  90 A6                BCC     LAB_231E        ; if length>remaining string go do RIGHT$
003D10  1               
003D10  1  A5 AF                LDA     <mids_l         ; get length byte
003D12  1  B0 A2                BCS     LAB_231E        ; go do string copy (branch always)
003D14  1               
003D14  1               ; pull string data and byte parameter from stack
003D14  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003D14  1               
003D14  1               LAB_236F:
003D14  1  20 B2 32             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003D17  1  68                   PLA                     ; pull return address low byte (return address)
003D18  1  85 A2                STA     <Fnxjpl         ; save functions jump vector low byte
003D1A  1  68                   PLA                     ; pull return address high byte (return address)
003D1B  1  85 A3                STA     <Fnxjph         ; save functions jump vector high byte
003D1D  1  68                   PLA                     ; pull byte parameter
003D1E  1  AA                   TAX                     ; copy byte parameter to X
003D1F  1  68                   PLA                     ; pull string pointer low byte
003D20  1  85 9E                STA     <des_2l         ; save it
003D22  1  68                   PLA                     ; pull string pointer high byte
003D23  1  85 9F                STA     <des_2h         ; save it
003D25  1  A0 00                LDY     #$00            ; clear index
003D27  1  8A                   TXA                     ; copy byte parameter
003D28  1  D0 03 4C 36          LBEQ    LAB_23A8        ; if null do function call error then warm start
003D2C  1  3E           
003D2D  1               
003D2D  1  E6 A2                INC     <Fnxjpl         ; increment function jump vector low byte
003D2F  1               ; (JSR pushes return addr-1. this is all very nice
003D2F  1               ; but will go tits up if either call is on a page
003D2F  1               ; boundary!)
003D2F  1  6C A2 00             JMP     (Fnxjpl)        ; in effect, RTS
003D32  1               
003D32  1               ; perform LCASE$()
003D32  1               
003D32  1               LAB_LCASE:
003D32  1  20 B1 3B             JSR     LAB_EVST        ; evaluate string
003D35  1  85 AC                STA     <str_ln         ; set string length
003D37  1  A8                   TAY                     ; copy length to Y
003D38  1  D0 03 4C C5          LBEQ    NoString        ; branch if null string
003D3C  1  3D           
003D3D  1               
003D3D  1  20 CD 38             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003D40  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003D40  1  86 AD                STX     <str_pl         ; save string pointer low byte
003D42  1  84 AE                STY     <str_ph         ; save string pointer high byte
003D44  1  A8                   TAY                     ; get string length back
003D45  1               
003D45  1               LC_loop:
003D45  1  88                   DEY                     ; decrement index
003D46  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003D4A  1  B5 71 C9 00  
003D4E  1  D0 04 A2 00  
003D5C  1  20 1A 35             JSR     LAB_1D82        ; is character "A" to "Z"
003D5F  1  90 02                BCC     NoUcase         ; branch if not upper case alpha
003D61  1               
003D61  1  09 20                ORA     #$20            ; convert upper to lower case
003D63  1               NoUcase:
003D63  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003D67  1  01 B5 83 C9  
003D6B  1  00 D0 04 A2  
003D79  1  98                   TYA                     ; test index
003D7A  1  D0 C9                BNE     LC_loop         ; loop if not all done
003D7C  1               
003D7C  1  F0 47                BEQ     NoString        ; tidy up and exit, branch always
003D7E  1               
003D7E  1               ; perform UCASE$()
003D7E  1               
003D7E  1               LAB_UCASE:
003D7E  1  20 B1 3B             JSR     LAB_EVST        ; evaluate string
003D81  1  85 AC                STA     <str_ln         ; set string length
003D83  1  A8                   TAY                     ; copy length to Y
003D84  1  F0 3F                BEQ     NoString        ; branch if null string
003D86  1               
003D86  1  20 CD 38             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003D89  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003D89  1  86 AD                STX     <str_pl         ; save string pointer low byte
003D8B  1  84 AE                STY     <str_ph         ; save string pointer high byte
003D8D  1  A8                   TAY                     ; get string length back
003D8E  1               
003D8E  1               UC_loop:
003D8E  1  88                   DEY                     ; decrement index
003D8F  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003D93  1  B5 71 C9 00  
003D97  1  D0 04 A2 00  
003DA5  1  20 16 35             JSR     LAB_CASC        ; is character "a" to "z" (or "A" to "Z")
003DA8  1  90 02                BCC     NoLcase         ; branch if not alpha
003DAA  1               
003DAA  1  29 DF                AND     #$DF            ; convert lower to upper case
003DAC  1               NoLcase:
003DAC  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003DB0  1  01 B5 83 C9  
003DB4  1  00 D0 04 A2  
003DC2  1  98                   TYA                     ; test index
003DC3  1  D0 C9                BNE     UC_loop         ; loop if not all done
003DC5  1               
003DC5  1               NoString:
003DC5  1  4C 30 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003DC8  1               ; address and length on descriptor stack and update stack
003DC8  1               ; pointers
003DC8  1               
003DC8  1               ; perform SADD()
003DC8  1               
003DC8  1               LAB_SADD:
003DC8  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003DCC  1  20 9E 34             JSR     LAB_GVAR        ; get var address
003DCF  1               
003DCF  1  20 B2 32             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003DD2  1  20 92 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003DD5  1               
003DD5  1  A0 02                LDY     #$02            ; index to string pointer high byte
003DD7  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer high byte
003DDB  1  B5 95 C9 00  
003DDF  1  D0 04 A2 00  
003DED  1  AA                   TAX                     ; copy string pointer high byte to X
003DEE  1  88                   DEY                     ; index to string pointer low byte
003DEF  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer low byte
003DF3  1  B5 95 C9 00  
003DF7  1  D0 04 A2 00  
003E05  1  A8                   TAY                     ; copy string pointer low byte to Y
003E06  1  8A                   TXA                     ; copy string pointer high byte to A
003E07  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003E0A  1               
003E0A  1               ; perform LEN()
003E0A  1               
003E0A  1               LAB_LENS:
003E0A  1  20 10 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003E0D  1  4C 69 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003E10  1               
003E10  1               ; evaluate string, get length in Y
003E10  1               
003E10  1               LAB_ESGL:
003E10  1  20 B1 3B             JSR     LAB_EVST        ; evaluate string
003E13  1  A8                   TAY                     ; copy length to Y
003E14  1  60                   RTS
003E15  1               
003E15  1               ; perform ASC()
003E15  1               
003E15  1               LAB_ASC:
003E15  1  20 10 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003E18  1  F0 1C                BEQ     LAB_23A8        ; if null do function call error then warm start
003E1A  1               
003E1A  1  A0 00                LDY     #$00            ; set index to first character
003E1C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
003E20  1  B5 71 C9 00  
003E24  1  D0 04 A2 00  
003E32  1  A8                   TAY                     ; copy to Y
003E33  1  4C 69 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003E36  1               
003E36  1               ; do function call error then warm start
003E36  1               
003E36  1               LAB_23A8:
003E36  1  4C 26 36             JMP     LAB_FCER        ; do function call error then warm start
003E39  1               
003E39  1               ; scan and get byte parameter
003E39  1               
003E39  1               LAB_SGBY:
003E39  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003E3D  1               
003E3D  1               ; get byte parameter
003E3D  1               
003E3D  1               LAB_GTBY:
003E3D  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003E40  1               ; else do type mismatch
003E40  1               
003E40  1               ; evaluate byte expression, result in X
003E40  1               
003E40  1               LAB_EVBY:
003E40  1  20 9B 35             JSR     LAB_EVPI        ; evaluate integer expression (no check)
003E43  1               
003E43  1  A4 AE                LDY     <FAC1_2         ; get FAC1 mantissa2
003E45  1  D0 EF                BNE     LAB_23A8        ; if top byte <> 0 do function call error then warm start
003E47  1               
003E47  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
003E49  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003E4D  1  60                   RTS
003E4E  1               
003E4E  1               ; perform VAL()
003E4E  1               
003E4E  1               LAB_VAL:
003E4E  1  20 10 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003E51  1  D0 03                BNE     LAB_23C5        ; branch if not null string
003E53  1               
003E53  1               ; string was null so set result = $00
003E53  1  4C 9E 40             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
003E56  1               
003E56  1               LAB_23C5:
003E56  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
003E58  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003E5A  1  86 BA                STX     <Btmpl          ; save BASIC execute pointer low byte
003E5C  1  84 BB                STY     <Btmph          ; save BASIC execute pointer high byte
003E5E  1  A6 71                LDX     <ut1_pl         ; get string pointer low byte
003E60  1  86 C3                STX     <Bpntrl         ; save as BASIC execute pointer low byte
003E62  1  18                   CLC                     ; clear carry
003E63  1  65 71                ADC     <ut1_pl         ; add string length
003E65  1  85 73                STA     <ut2_pl         ; save string end low byte
003E67  1  A5 72                LDA     <ut1_ph         ; get string pointer high byte
003E69  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003E6B  1  69 00                ADC     #$00            ; add carry to high byte
003E6D  1  85 74                STA     <ut2_ph         ; save string end high byte
003E6F  1  A0 00                LDY     #$00            ; set index to $00
003E71  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get string end +1 byte
003E75  1  B5 73 C9 00  
003E79  1  D0 04 A2 00  
003E87  1  48                   PHA                     ; push it
003E88  1  98                   TYA                     ; clear A
003E89  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; terminate string with $00
003E8D  1  01 B5 73 C9  
003E91  1  00 D0 04 A2  
003E9F  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003EA3  1  20 48 45             JSR     LAB_2887        ; get FAC1 from string
003EA6  1  68                   PLA                     ; restore string end +1 byte
003EA7  1  A0 00                LDY     #$00            ; set index to zero
003EA9  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; put string end byte back
003EAD  1  01 B5 73 C9  
003EB1  1  00 D0 04 A2  
003EBF  1               
003EBF  1               ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
003EBF  1               
003EBF  1               LAB_23F3:
003EBF  1  A6 BA                LDX     <Btmpl          ; get BASIC execute pointer low byte back
003EC1  1  A4 BB                LDY     <Btmph          ; get BASIC execute pointer high byte back
003EC3  1  86 C3                STX     <Bpntrl         ; save BASIC execute pointer low byte
003EC5  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
003EC7  1  60                   RTS
003EC8  1               
003EC8  1               ; get two parameters for POKE or WAIT
003EC8  1               
003EC8  1               LAB_GADB:
003EC8  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003ECB  1               ; else do type mismatch
003ECB  1  20 E1 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003ECE  1               
003ECE  1               ; scan for "," and get byte, else do Syntax error then warm start
003ECE  1               
003ECE  1               LAB_SCGB:
003ECE  1  20 C3 32             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003ED1  1  A5 12                LDA     <Itemph         ; save temporary integer high byte
003ED3  1  48                   PHA                     ; on stack
003ED4  1  A5 11                LDA     <Itempl         ; save temporary integer low byte
003ED6  1  48                   PHA                     ; on stack
003ED7  1  20 3D 3E             JSR     LAB_GTBY        ; get byte parameter
003EDA  1  68                   PLA                     ; pull low byte
003EDB  1  85 11                STA     <Itempl         ; restore temporary integer low byte
003EDD  1  68                   PLA                     ; pull high byte
003EDE  1  85 12                STA     <Itemph         ; restore temporary integer high byte
003EE0  1  60                   RTS
003EE1  1               
003EE1  1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
003EE1  1               ; -ve and converts it into a right truncated integer in <Itempl and <Itemph
003EE1  1               
003EE1  1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
003EE1  1               
003EE1  1               LAB_F2FX:
003EE1  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003EE3  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
003EE5  1  B0 03                BCS     LAB_23A8_1      ; do function call error then warm start
003EE7  1  4C ED 3E             JMP     LAB_F2FU
003EEA  1               LAB_23A8_1:
003EEA  1  4C 36 3E             JMP     LAB_23A8
003EED  1               LAB_F2FU:
003EED  1  20 F2 44             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
003EF0  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003EF2  1  A4 AF                LDY     <FAC1_3         ; get FAC1 mantissa3
003EF4  1  84 11                STY     <Itempl         ; save temporary integer low byte
003EF6  1  85 12                STA     <Itemph         ; save temporary integer high byte
003EF8  1  60                   RTS
003EF9  1               
003EF9  1               ; perform PEEK()
003EF9  1               
003EF9  1               LAB_PEEK:
003EF9  1  20 E1 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003EFC  1  A2 00                LDX     #$00            ; clear index
003EFE  1  8B                   PHB
003EFF  1  DA A2 00 DA          SETBANK 0
003F03  1  AB FA        
003F05  1  A1 11                LDA     (<Itempl,X)     ; get byte via temporary integer (addr)
003F07  1  AB                   PLB
003F08  1  A8                   TAY                     ; copy byte to Y
003F09  1  4C 69 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003F0C  1               
003F0C  1               ; perform POKE
003F0C  1               
003F0C  1               LAB_POKE:
003F0C  1  20 C8 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003F0F  1  8A                   TXA                     ; copy byte argument to A
003F10  1  A2 00                LDX     #$00            ; clear index
003F12  1  8B                   PHB
003F13  1  DA A2 00 DA          SETBANK 0
003F17  1  AB FA        
003F19  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
003F1B  1  AB                   PLB
003F1C  1  60                   RTS
003F1D  1               
003F1D  1               ; perform SYS
003F1D  1               
003F1D  1               LAB_SYS:
003F1D  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003F20  1               ; else do type mismatch
003F20  1  20 E1 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003F23  1               
003F23  1  A5 11                LDA     <Itempl
003F25  1  85 0B                STA     <Usrjpl
003F27  1  A5 12                LDA     <Itemph
003F29  1  85 0C                STA     <Usrjph
003F2B  1  22 0A 00 00          JSL     Usrjmp
003F2F  1  60                   RTS
003F30  1               
003F30  1               ; perform SWAP
003F30  1               
003F30  1               LAB_SWAP:
003F30  1  20 9E 34             JSR     LAB_GVAR        ; get var1 address
003F33  1  85 97                STA     <Lvarpl         ; save var1 address low byte
003F35  1  84 98                STY     <Lvarph         ; save var1 address high byte
003F37  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003F39  1  48                   PHA                     ; save data type flag
003F3A  1               
003F3A  1  20 C3 32             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003F3D  1  20 9E 34             JSR     LAB_GVAR        ; get var2 address (pointer in <Cvaral/h)
003F40  1  68                   PLA                     ; pull var1 data type flag
003F41  1  45 5F                EOR     <Dtypef         ; compare with var2 data type
003F43  1  10 60                BPL     SwapErr         ; exit if not both the same type
003F45  1               
003F45  1  A0 03                LDY     #$03            ; four bytes to swap (either value or descriptor+1)
003F47  1               SwapLp:
003F47  1  8B DA A2 01          LDAINDIRECTY Lvarpl     ; get byte from var1
003F4B  1  B5 97 C9 00  
003F4F  1  D0 04 A2 00  
003F5D  1  AA                   TAX                     ; save var1 byte
003F5E  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from var2
003F62  1  B5 95 C9 00  
003F66  1  D0 04 A2 00  
003F74  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; save byte to var1
003F78  1  01 B5 97 C9  
003F7C  1  00 D0 04 A2  
003F8A  1  8A                   TXA                     ; restore var1 byte
003F8B  1  8B DA 48 A2          STAINDIRECTY Cvaral     ; save byte to var2
003F8F  1  01 B5 95 C9  
003F93  1  00 D0 04 A2  
003FA1  1  88                   DEY                     ; decrement index
003FA2  1  10 A3                BPL     SwapLp          ; loop until done
003FA4  1               
003FA4  1  60                   RTS
003FA5  1               
003FA5  1               SwapErr:
003FA5  1  4C 9C 31             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
003FA8  1               
003FA8  1               ; perform CALL
003FA8  1               
003FA8  1               LAB_CALL:
003FA8  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003FAB  1               ; else do type mismatch
003FAB  1  20 E1 3E             JSR     LAB_F2FX        ; convert floating-to-fixed
003FAE  1  A9 3F                LDA     #>CallExit      ; set return address high byte
003FB0  1  48                   PHA                     ; put on stack
003FB1  1  A9 B6                LDA     #<CallExit-1    ; set return address low byte
003FB3  1  48                   PHA                     ; put on stack
003FB4  1  6C 11 00             JMP     (Itempl)        ; do indirect jump to user routine
003FB7  1               
003FB7  1               ; if the called routine exits correctly then it will return to here. this will then get
003FB7  1               ; the next byte for the interpreter and return
003FB7  1               
003FB7  1               CallExit:
003FB7  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003FBB  1  60                   RTS
003FBC  1               ; perform WAIT
003FBC  1               
003FBC  1               LAB_WAIT:
003FBC  1  20 C8 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003FBF  1  86 97                STX     <Frnxtl         ; save byte
003FC1  1  A2 00                LDX     #$00            ; clear mask
003FC3  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003FC7  1  F0 03                BEQ     LAB_2441        ; skip if no third argument
003FC9  1               
003FC9  1  20 CE 3E             JSR     LAB_SCGB        ; scan for "," and get byte, else SN error then warm start
003FCC  1               LAB_2441:
003FCC  1  86 98                STX     <Frnxth         ; save EOR argument
003FCE  1               LAB_2445:
003FCE  1  8B DA A2 01          LDAINDIRECTY Itempl     ; get byte via temporary integer (addr)
003FD2  1  B5 11 C9 00  
003FD6  1  D0 04 A2 00  
003FE4  1  45 98                EOR     <Frnxth         ; EOR with second argument (mask)
003FE6  1  25 97                AND     <Frnxtl         ; AND with first argument (byte)
003FE8  1  F0 E4                BEQ     LAB_2445        ; loop if result is zero
003FEA  1               
003FEA  1               LAB_244D:
003FEA  1  60                   RTS
003FEB  1               
003FEB  1               ; perform subtraction, FAC1 from (AY)
003FEB  1               
003FEB  1               LAB_2455:
003FEB  1  20 D9 41             JSR     LAB_264D        ; unpack memory (AY) into FAC2
003FEE  1               
003FEE  1               ; perform subtraction, FAC1 from FAC2
003FEE  1               
003FEE  1               LAB_SUBTRACT:
003FEE  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003FF0  1  49 FF                EOR     #$FF            ; complement it
003FF2  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003FF4  1  45 B7                EOR     <FAC2_s         ; EOR with FAC2 sign (b7)
003FF6  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
003FF8  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003FFA  1  4C 09 40             JMP     LAB_ADD         ; go add FAC2 to FAC1
003FFD  1               
003FFD  1               ; perform addition
003FFD  1               
003FFD  1               LAB_2467:
003FFD  1  20 28 41             JSR     LAB_257B        ; shift FACX A times right (>8 shifts)
004000  1  90 4D                BCC     LAB_24A8        ;.go subtract mantissas
004002  1               
004002  1               ; add 0.5 to FAC1
004002  1               
004002  1               LAB_244E:
004002  1  A9 58                LDA     #<LAB_2A96      ; set 0.5 pointer low byte
004004  1  A0 18                LDY     #>LAB_2A96      ; set 0.5 pointer high byte
004006  1               
004006  1               ; add (AY) to FAC1
004006  1               
004006  1               LAB_246C:
004006  1  20 D9 41             JSR     LAB_264D        ; unpack memory (AY) into FAC2
004009  1               
004009  1               ; add FAC2 to FAC1
004009  1               
004009  1               LAB_ADD:
004009  1  D0 10                BNE     LAB_2474        ; branch if FAC1 was not zero
00400B  1               
00400B  1               ; copy FAC2 to FAC1
00400B  1               
00400B  1               LAB_279B:
00400B  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
00400D  1               
00400D  1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
00400D  1               
00400D  1               LAB_279D:
00400D  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
00400F  1  A2 04                LDX     #$04            ; 4 bytes to copy
004011  1               LAB_27A1:
004011  1  B5 B2                LDA     <FAC1_o,X       ; get byte from FAC2,X
004013  1  95 AB                STA     <FAC1_e-1,X     ; save byte at FAC1,X
004015  1  CA                   DEX                     ; decrement count
004016  1  D0 F9                BNE     LAB_27A1        ; loop if not all done
004018  1               
004018  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
00401A  1  60                   RTS
00401B  1               
00401B  1               ; FAC1 is non zero
00401B  1               LAB_2474:
00401B  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
00401D  1  86 A3                STX     <FAC2_r         ; save as FAC2 rounding byte
00401F  1  A2 B3                LDX     #<FAC2_e        ; set index to FAC2 exponent addr
004021  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
004023  1               LAB_247C:
004023  1  A8                   TAY                     ; copy exponent
004024  1  F0 C4                BEQ     LAB_244D        ; exit if zero
004026  1  38                   SEC                     ; set carry for subtract
004027  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
004029  1  F0 24                BEQ     LAB_24A8        ; branch if = (go add mantissa)
00402B  1  90 12                BCC     LAB_2498        ; branch if <
00402D  1               ; FAC2>FAC1
00402D  1  84 AC                STY     <FAC1_e         ; save FAC1 exponent
00402F  1  A4 B7                LDY     <FAC2_s         ; get FAC2 sign (b7)
004031  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
004033  1  49 FF                EOR     #$FF            ; complement A
004035  1  69 00                ADC     #$00            ; +1 (twos complement, carry is set)
004037  1  A0 00                LDY     #$00            ; clear Y
004039  1  84 A3                STY     <FAC2_r         ; clear FAC2 rounding byte
00403B  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1 exponent addr
00403D  1  D0 04                BNE     LAB_249C        ; branch always
00403F  1               LAB_2498:
00403F  1  A0 00                LDY     #$00            ; clear Y
004041  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004043  1               LAB_249C:
004043  1  C9 F9                CMP     #$F9            ; compare exponent diff with $F9
004045  1  30 B6                BMI     LAB_2467        ; branch if range $79-$F8
004047  1  A8                   TAY                     ; copy exponent difference to Y
004048  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
00404A  1  56 01                LSR     <PLUS_1,X       ; shift FAC? mantissa1
00404C  1  20 3F 41             JSR     LAB_2592        ; shift FACX Y times right
00404F  1               ; exponents are equal now do mantissa subtract
00404F  1               LAB_24A8:
00404F  1  24 B8                BIT     <FAC_sc         ; test sign compare (FAC1 EOR FAC2)
004051  1  10 52                BPL     LAB_24F8        ; if = add FAC2 mantissa to FAC1 mantissa and return
004053  1               
004053  1  A0 AC                LDY     #<FAC1_e        ; set index to FAC1 exponent addr
004055  1  E0 B3                CPX     #<FAC2_e        ; compare X to FAC2 exponent addr
004057  1  F0 02                BEQ     LAB_24B4        ; branch if =
004059  1               
004059  1  A0 B3                LDY     #<FAC2_e        ; else set index to FAC2 exponent addr
00405B  1               
00405B  1               ; subtract smaller from bigger (take sign of bigger)
00405B  1               LAB_24B4:
00405B  1  38                   SEC                     ; set carry for subtract
00405C  1  49 FF                EOR     #$FF            ; ones complement A
00405E  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
004060  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
004062  1  DA                   PHX
004063  1  BB                   TYX
004064  1  B5 03                LDA     <PLUS_3,X       ; get FACY mantissa3
004066  1  FA                   PLX
004067  1  F5 03                SBC     <PLUS_3,X       ; subtract FACX mantissa3
004069  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
00406B  1  DA                   PHX
00406C  1  BB                   TYX
00406D  1  B5 02                LDA     <PLUS_2,x       ; get FACY mantissa2
00406F  1  FA                   PLX
004070  1  F5 02                SBC     <PLUS_2,X       ; subtract FACX mantissa2
004072  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004074  1  DA                   PHX
004075  1  BB                   TYX
004076  1  B5 01                LDA     <PLUS_1,x       ; get FACY mantissa1
004078  1  FA                   PLX
004079  1  F5 01                SBC     <PLUS_1,X       ; subtract FACX mantissa1
00407B  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00407D  1               
00407D  1               ; do ABS and normalise FAC1
00407D  1               
00407D  1               LAB_24D0:
00407D  1  B0 03                BCS     LAB_24D5        ; branch if number is +ve
00407F  1               
00407F  1  20 E4 40             JSR     LAB_2537        ; negate FAC1
004082  1               
004082  1               ; normalise FAC1
004082  1               
004082  1               LAB_24D5:
004082  1  A0 00                LDY     #$00            ; clear Y
004084  1  98                   TYA                     ; clear A
004085  1  18                   CLC                     ; clear carry for add
004086  1               LAB_24D9:
004086  1  A6 AD                LDX     <FAC1_1         ; get FAC1 mantissa1
004088  1  D0 3E                BNE     LAB_251B        ; if not zero normalise FAC1
00408A  1               
00408A  1  A6 AE                LDX     <FAC1_2         ; get FAC1 mantissa2
00408C  1  86 AD                STX     <FAC1_1         ; save FAC1 mantissa1
00408E  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
004090  1  86 AE                STX     <FAC1_2         ; save FAC1 mantissa2
004092  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
004094  1  86 AF                STX     <FAC1_3         ; save FAC1 mantissa3
004096  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004098  1  69 08                ADC     #$08            ; add x to exponent offset
00409A  1  C9 18                CMP     #$18            ; compare with $18 (max offset, all bits would be =0)
00409C  1  D0 E8                BNE     LAB_24D9        ; loop if not max
00409E  1               
00409E  1               ; clear FAC1 exponent and sign
00409E  1               
00409E  1               LAB_24F1:
00409E  1  A9 00                LDA     #$00            ; clear A
0040A0  1               LAB_24F3:
0040A0  1  85 AC                STA     <FAC1_e         ; set FAC1 exponent
0040A2  1               
0040A2  1               ; save FAC1 sign
0040A2  1               
0040A2  1               LAB_24F5:
0040A2  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0040A4  1  60                   RTS
0040A5  1               
0040A5  1               ; add FAC2 mantissa to FAC1 mantissa
0040A5  1               
0040A5  1               LAB_24F8:
0040A5  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
0040A7  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
0040A9  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0040AB  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
0040AD  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0040AF  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0040B1  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
0040B3  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0040B5  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0040B7  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
0040B9  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0040BB  1  B0 1A                BCS     LAB_252A        ; if carry then normalise FAC1 for C=1
0040BD  1               
0040BD  1  60                   RTS                     ; else just exit
0040BE  1               
0040BE  1               LAB_2511:
0040BE  1  69 01                ADC     #$01            ; add 1 to exponent offset
0040C0  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
0040C2  1  26 AF                ROL     <FAC1_3         ; shift FAC1 mantissa3
0040C4  1  26 AE                ROL     <FAC1_2         ; shift FAC1 mantissa2
0040C6  1  26 AD                ROL     <FAC1_1         ; shift FAC1 mantissa1
0040C8  1               
0040C8  1               ; normalise FAC1
0040C8  1               
0040C8  1               LAB_251B:
0040C8  1  10 F4                BPL     LAB_2511        ; loop if not normalised
0040CA  1               
0040CA  1  38                   SEC                     ; set carry for subtract
0040CB  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
0040CD  1  B0 CF                BCS     LAB_24F1        ; branch if underflow (set result = $0)
0040CF  1               
0040CF  1  49 FF                EOR     #$FF            ; complement exponent
0040D1  1  69 01                ADC     #$01            ; +1 (twos complement)
0040D3  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0040D5  1               
0040D5  1               ; test and normalise FAC1 for C=0/1
0040D5  1               
0040D5  1               LAB_2528:
0040D5  1  90 0C                BCC     LAB_2536        ; exit if no overflow
0040D7  1               
0040D7  1               ; normalise FAC1 for C=1
0040D7  1               
0040D7  1               LAB_252A:
0040D7  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
0040D9  1  F0 36                BEQ     LAB_2564        ; if zero do overflow error and warm start
0040DB  1               
0040DB  1  66 AD                ROR     <FAC1_1         ; shift FAC1 mantissa1
0040DD  1  66 AE                ROR     <FAC1_2         ; shift FAC1 mantissa2
0040DF  1  66 AF                ROR     <FAC1_3         ; shift FAC1 mantissa3
0040E1  1  66 B9                ROR     <FAC1_r         ; shift FAC1 rounding byte
0040E3  1               LAB_2536:
0040E3  1  60                   RTS
0040E4  1               
0040E4  1               ; negate FAC1
0040E4  1               
0040E4  1               LAB_2537:
0040E4  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0040E6  1  49 FF                EOR     #$FF            ; complement it
0040E8  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0040EA  1               
0040EA  1               ; twos complement FAC1 mantissa
0040EA  1               
0040EA  1               LAB_253D:
0040EA  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0040EC  1  49 FF                EOR     #$FF            ; complement it
0040EE  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0040F0  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0040F2  1  49 FF                EOR     #$FF            ; complement it
0040F4  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0040F6  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0040F8  1  49 FF                EOR     #$FF            ; complement it
0040FA  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0040FC  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
0040FE  1  49 FF                EOR     #$FF            ; complement it
004100  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
004102  1  E6 B9                INC     <FAC1_r         ; increment FAC1 rounding byte
004104  1  D0 0A                BNE     LAB_2563        ; exit if no overflow
004106  1               
004106  1               ; increment FAC1 mantissa
004106  1               
004106  1               LAB_2559:
004106  1  E6 AF                INC     <FAC1_3         ; increment FAC1 mantissa3
004108  1  D0 06                BNE     LAB_2563        ; finished if no rollover
00410A  1               
00410A  1  E6 AE                INC     <FAC1_2         ; increment FAC1 mantissa2
00410C  1  D0 02                BNE     LAB_2563        ; finished if no rollover
00410E  1               
00410E  1  E6 AD                INC     <FAC1_1         ; increment FAC1 mantissa1
004110  1               LAB_2563:
004110  1  60                   RTS
004111  1               
004111  1               ; do overflow error (overflow exit)
004111  1               
004111  1               LAB_2564:
004111  1  A2 0A                LDX     #$0A            ; error code $0A ("Overflow" error)
004113  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
004116  1               
004116  1               ; shift FCAtemp << A+8 times
004116  1               
004116  1               LAB_2569:
004116  1  A2 74                LDX     #<FACt_1-1      ; set offset to FACtemp
004118  1               LAB_256B:
004118  1  B4 03                LDY     <PLUS_3,X       ; get FACX mantissa3
00411A  1  84 B9                STY     <FAC1_r         ; save as FAC1 rounding byte
00411C  1  B4 02                LDY     <PLUS_2,X       ; get FACX mantissa2
00411E  1  94 03                STY     <PLUS_3,X       ; save FACX mantissa3
004120  1  B4 01                LDY     <PLUS_1,X       ; get FACX mantissa1
004122  1  94 02                STY     <PLUS_2,X       ; save FACX mantissa2
004124  1  A4 B2                LDY     <FAC1_o         ; get FAC1 overflow byte
004126  1  94 01                STY     <PLUS_1,X       ; save FACX mantissa1
004128  1               
004128  1               ; shift FACX -A times right (> 8 shifts)
004128  1               
004128  1               LAB_257B:
004128  1  69 08                ADC     #$08            ; add 8 to shift count
00412A  1  30 EC                BMI     LAB_256B        ; go do 8 shift if still -ve
00412C  1               
00412C  1  F0 EA                BEQ     LAB_256B        ; go do 8 shift if zero
00412E  1               
00412E  1  E9 08                SBC     #$08            ; else subtract 8 again
004130  1  A8                   TAY                     ; save count to Y
004131  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004133  1  B0 12                BCS     LAB_259A        ;.
004135  1               
004135  1               LAB_2588:
004135  1  16 01                ASL     <PLUS_1,X       ; shift FACX mantissa1
004137  1  90 02                BCC     LAB_258E        ; branch if +ve
004139  1               
004139  1  F6 01                INC     <PLUS_1,X       ; this sets b7 eventually
00413B  1               LAB_258E:
00413B  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (correct for ASL)
00413D  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (put carry in b7)
00413F  1               
00413F  1               ; shift FACX Y times right
00413F  1               
00413F  1               LAB_2592:
00413F  1  76 02                ROR     <PLUS_2,X       ; shift FACX mantissa2
004141  1  76 03                ROR     <PLUS_3,X       ; shift FACX mantissa3
004143  1  6A                   ROR     A               ; shift FACX rounding byte
004144  1  C8                   INY                     ; increment exponent diff
004145  1  D0 EE                BNE     LAB_2588        ; branch if range adjust not complete
004147  1               
004147  1               LAB_259A:
004147  1  18                   CLC                     ; just clear it
004148  1  60                   RTS
004149  1               
004149  1               ; perform LOG()
004149  1               
004149  1               LAB_LOG:
004149  1  20 27 44             JSR     LAB_27CA        ; test sign and zero
00414C  1  F0 02                BEQ     LAB_25C4        ; if zero do function call error then warm start
00414E  1               
00414E  1  10 03                BPL     LAB_25C7        ; skip error if +ve
004150  1               
004150  1               LAB_25C4:
004150  1  4C 26 36             JMP     LAB_FCER        ; do function call error then warm start (-ve)
004153  1               
004153  1               LAB_25C7:
004153  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004155  1  E9 7F                SBC     #$7F            ; normalise it
004157  1  48                   PHA                     ; save it
004158  1  A9 80                LDA     #$80            ; set exponent to zero
00415A  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
00415C  1  A9 D8                LDA     #<LAB_25AD      ; set 1/root2 pointer low byte
00415E  1  A0 17                LDY     #>LAB_25AD      ; set 1/root2 pointer high byte
004160  1  20 06 40             JSR     LAB_246C        ; add (AY) to FAC1 (1/root2)
004163  1  A9 DC                LDA     #<LAB_25B1      ; set root2 pointer low byte
004165  1  A0 17                LDY     #>LAB_25B1      ; set root2 pointer high byte
004167  1  20 9F 42             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
00416A  1  A9 4F                LDA     #<LAB_259C      ; set 1 pointer low byte
00416C  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
00416E  1  20 EB 3F             JSR     LAB_2455        ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
004171  1  A9 CB                LDA     #<LAB_25A0      ; set pointer low byte to counter
004173  1  A0 17                LDY     #>LAB_25A0      ; set pointer high byte to counter
004175  1  20 28 48             JSR     LAB_2B6E        ; ^2 then series evaluation
004178  1  A9 E0                LDA     #<LAB_25B5      ; set -0.5 pointer low byte
00417A  1  A0 17                LDY     #>LAB_25B5      ; set -0.5 pointer high byte
00417C  1  20 06 40             JSR     LAB_246C        ; add (AY) to FAC1
00417F  1  68                   PLA                     ; restore FAC1 exponent
004180  1  20 EE 45             JSR     LAB_2912        ; evaluate new ASCII digit
004183  1  A9 E4                LDA     #<LAB_25B9      ; set LOG(2) pointer low byte
004185  1  A0 17                LDY     #>LAB_25B9      ; set LOG(2) pointer high byte
004187  1               
004187  1               ; do convert AY, FCA1*(AY)
004187  1               
004187  1               LAB_25FB:
004187  1  20 D9 41             JSR     LAB_264D        ; unpack memory (AY) into FAC2
00418A  1               LAB_MULTIPLY:
00418A  1  F0 4C                BEQ     LAB_264C        ; exit if zero
00418C  1               
00418C  1  20 4F 42             JSR     LAB_2673        ; test and adjust accumulators
00418F  1  A9 00                LDA     #$00            ; clear A
004191  1  85 75                STA     <FACt_1         ; clear temp mantissa1
004193  1  85 76                STA     <FACt_2         ; clear temp mantissa2
004195  1  85 77                STA     <FACt_3         ; clear temp mantissa3
004197  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004199  1  20 AE 41             JSR     LAB_2622        ; go do shift/add FAC2
00419C  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00419E  1  20 AE 41             JSR     LAB_2622        ; go do shift/add FAC2
0041A1  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0041A3  1  20 AE 41             JSR     LAB_2622        ; go do shift/add FAC2
0041A6  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0041A8  1  20 B3 41             JSR     LAB_2627        ; go do shift/add FAC2
0041AB  1  4C 0C 43             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
0041AE  1               
0041AE  1               LAB_2622:
0041AE  1  D0 03                BNE     LAB_2627        ; branch if byte <> zero
0041B0  1               
0041B0  1  4C 16 41             JMP     LAB_2569        ; shift FCAtemp << A+8 times
0041B3  1               
0041B3  1               ; else do shift and add
0041B3  1               LAB_2627:
0041B3  1  4A                   LSR     A               ; shift byte
0041B4  1  09 80                ORA     #$80            ; set top bit (mark for 8 times)
0041B6  1               LAB_262A:
0041B6  1  A8                   TAY                     ; copy result
0041B7  1  90 13                BCC     LAB_2640        ; skip next if bit was zero
0041B9  1               
0041B9  1  18                   CLC                     ; clear carry for add
0041BA  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
0041BC  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
0041BE  1  85 77                STA     <FACt_3         ; save temp mantissa3
0041C0  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
0041C2  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
0041C4  1  85 76                STA     <FACt_2         ; save temp mantissa2
0041C6  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
0041C8  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
0041CA  1  85 75                STA     <FACt_1         ; save temp mantissa1
0041CC  1               LAB_2640:
0041CC  1  66 75                ROR     <FACt_1         ; shift temp mantissa1
0041CE  1  66 76                ROR     <FACt_2         ; shift temp mantissa2
0041D0  1  66 77                ROR     <FACt_3         ; shift temp mantissa3
0041D2  1  66 B9                ROR     <FAC1_r         ; shift temp rounding byte
0041D4  1  98                   TYA                     ; get byte back
0041D5  1  4A                   LSR     A               ; shift byte
0041D6  1  D0 DE                BNE     LAB_262A        ; loop if all bits not done
0041D8  1               
0041D8  1               LAB_264C:
0041D8  1  60                   RTS
0041D9  1               
0041D9  1               ; unpack memory (AY) into FAC2
0041D9  1               
0041D9  1               LAB_264D:
0041D9  1  85 71                STA     <ut1_pl         ; save pointer low byte
0041DB  1  84 72                STY     <ut1_ph         ; save pointer high byte
0041DD  1  A0 03                LDY     #$03            ; 4 bytes to get (0-3)
0041DF  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa3
0041E3  1  B5 71 C9 00  
0041E7  1  D0 04 A2 00  
0041F5  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
0041F7  1  88                   DEY                     ; decrement index
0041F8  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa2
0041FC  1  B5 71 C9 00  
004200  1  D0 04 A2 00  
00420E  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
004210  1  88                   DEY                     ; decrement index
004211  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa1+sign
004215  1  B5 71 C9 00  
004219  1  D0 04 A2 00  
004227  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
004229  1  45 B0                EOR     <FAC1_s         ; EOR with FAC1 sign (b7)
00422B  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00422D  1  A5 B7                LDA     <FAC2_s         ; recover FAC2 sign (b7)
00422F  1  09 80                ORA     #$80            ; set 1xxx xxx (set normal bit)
004231  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004233  1  88                   DEY                     ; decrement index
004234  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get exponent byte
004238  1  B5 71 C9 00  
00423C  1  D0 04 A2 00  
00424A  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
00424C  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00424E  1  60                   RTS
00424F  1               
00424F  1               ; test and adjust accumulators
00424F  1               
00424F  1               LAB_2673:
00424F  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
004251  1               LAB_2675:
004251  1  F0 1D                BEQ     LAB_2696        ; branch if FAC2 = $00 (handle underflow)
004253  1               
004253  1  18                   CLC                     ; clear carry for add
004254  1  65 AC                ADC     <FAC1_e         ; add FAC1 exponent
004256  1  90 04                BCC     LAB_2680        ; branch if sum of exponents <$0100
004258  1               
004258  1  30 31                BMI     LAB_269B        ; do overflow error
00425A  1               
00425A  1  18                   CLC                     ; clear carry for the add
00425B  1  2C                   .BYTE   $2C             ; makes next line BIT $1410
00425C  1               LAB_2680:
00425C  1  10 12                BPL     LAB_2696        ; if +ve go handle underflow
00425E  1               
00425E  1  69 80                ADC     #$80            ; adjust exponent
004260  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004262  1  D0 03                BNE     LAB_268B        ; branch if not zero
004264  1               
004264  1  4C A2 40             JMP     LAB_24F5        ; save FAC1 sign and return
004267  1               
004267  1               LAB_268B:
004267  1  A5 B8                LDA     <FAC_sc         ; get sign compare (FAC1 EOR FAC2)
004269  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
00426B  1               LAB_268F:
00426B  1  60                   RTS
00426C  1               
00426C  1               ; handle overflow and underflow
00426C  1               
00426C  1               LAB_2690:
00426C  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00426E  1  10 1B                BPL     LAB_269B        ; do overflow error
004270  1               
004270  1               ; handle underflow
004270  1               LAB_2696:
004270  1  68                   PLA                     ; pop return address low byte
004271  1  68                   PLA                     ; pop return address high byte
004272  1  4C 9E 40             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
004275  1               
004275  1               ; multiply by 10
004275  1               
004275  1               LAB_269E:
004275  1  20 08 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004278  1  AA                   TAX                     ; copy exponent (set the flags)
004279  1  F0 F0                BEQ     LAB_268F        ; exit if zero
00427B  1  18                   CLC                     ; clear carry for add
00427C  1  69 02                ADC     #$02            ; add two to exponent (*4)
00427E  1  B0 0B                BCS     LAB_269B        ; do overflow error if > $FF
004280  1  A2 00                LDX     #$00            ; clear byte
004282  1  86 B8                STX     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
004284  1  20 23 40             JSR     LAB_247C        ; add FAC2 to FAC1 (*5)
004287  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*10)
004289  1  D0 E0                BNE     LAB_268F        ; if non zero just do RTS
00428B  1               
00428B  1               LAB_269B:
00428B  1  4C 11 41             JMP     LAB_2564        ; do overflow error and warm start
00428E  1               
00428E  1               ; divide by 10
00428E  1               
00428E  1               LAB_26B9:
00428E  1  20 08 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004291  1  A9 60                LDA     #<LAB_26B5      ; set pointer to 10d low addr
004293  1  A0 18                LDY     #>LAB_26B5      ; set pointer to 10d high addr
004295  1  A2 00                LDX     #$00            ; clear sign
004297  1               
004297  1               ; divide by (AY) (X=sign)
004297  1               
004297  1               LAB_26C2:
004297  1  86 B8                STX     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004299  1  20 1B 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
00429C  1  4C A2 42             JMP     LAB_DIVIDE      ; do FAC2/FAC1
00429F  1               
00429F  1               ; Perform divide-by
00429F  1               ; convert AY and do (AY)/FAC1
00429F  1               
00429F  1               LAB_26CA:
00429F  1  20 D9 41             JSR     LAB_264D        ; unpack memory (AY) into FAC2
0042A2  1               
0042A2  1               ; Perform divide-into
0042A2  1               LAB_DIVIDE:
0042A2  1  F0 63                BEQ     LAB_2737        ; if zero go do /0 error
0042A4  1               
0042A4  1  20 17 44             JSR     LAB_27BA        ; round FAC1
0042A7  1  A9 00                LDA     #$00            ; clear A
0042A9  1  38                   SEC                     ; set carry for subtract
0042AA  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent (2s complement)
0042AC  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0042AE  1  20 4F 42             JSR     LAB_2673        ; test and adjust accumulators
0042B1  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
0042B3  1  F0 D6                BEQ     LAB_269B        ; if zero do overflow error
0042B5  1               
0042B5  1  A2 FF                LDX     #$FF            ; set index for pre increment
0042B7  1  A9 01                LDA     #$01            ; set bit to flag byte save
0042B9  1               LAB_26E4:
0042B9  1  A4 B4                LDY     <FAC2_1         ; get FAC2 mantissa1
0042BB  1  C4 AD                CPY     <FAC1_1         ; compare FAC1 mantissa1
0042BD  1  D0 0A                BNE     LAB_26F4        ; branch if <>
0042BF  1               
0042BF  1  A4 B5                LDY     <FAC2_2         ; get FAC2 mantissa2
0042C1  1  C4 AE                CPY     <FAC1_2         ; compare FAC1 mantissa2
0042C3  1  D0 04                BNE     LAB_26F4        ; branch if <>
0042C5  1               
0042C5  1  A4 B6                LDY     <FAC2_3         ; get FAC2 mantissa3
0042C7  1  C4 AF                CPY     <FAC1_3         ; compare FAC1 mantissa3
0042C9  1               LAB_26F4:
0042C9  1  08                   PHP                     ; save FAC2-FAC1 compare status
0042CA  1  2A                   ROL     A               ; shift the result byte
0042CB  1  90 0E                BCC     LAB_2702        ; if no carry skip the byte save
0042CD  1               
0042CD  1  A0 01                LDY     #$01            ; set bit to flag byte save
0042CF  1  E8                   INX                     ; else increment the index to FACt
0042D0  1  E0 02                CPX     #$02            ; compare with the index to <FACt_3
0042D2  1  30 04                BMI     LAB_2701        ; if not last byte just go save it
0042D4  1               
0042D4  1  D0 28                BNE     LAB_272B        ; if all done go save FAC1 rounding byte, normalise and
0042D6  1               ; return
0042D6  1               
0042D6  1  A0 40                LDY     #$40            ; set bit to flag byte save for the rounding byte
0042D8  1               LAB_2701:
0042D8  1  95 75                STA     <FACt_1,X       ; write result byte to <FACt_1 + index
0042DA  1  98                   TYA                     ; copy the next save byte flag
0042DB  1               LAB_2702:
0042DB  1  28                   PLP                     ; restore FAC2-FAC1 compare status
0042DC  1  90 14                BCC     LAB_2704        ; if FAC2 < FAC1 then skip the subtract
0042DE  1               
0042DE  1  A8                   TAY                     ; save FAC2-FAC1 compare status
0042DF  1  A5 B6                LDA     <FAC2_3         ; get FAC2 mantissa3
0042E1  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
0042E3  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
0042E5  1  A5 B5                LDA     <FAC2_2         ; get FAC2 mantissa2
0042E7  1  E5 AE                SBC     <FAC1_2         ; subtract FAC1 mantissa2
0042E9  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
0042EB  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
0042ED  1  E5 AD                SBC     <FAC1_1         ; subtract FAC1 mantissa1
0042EF  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
0042F1  1  98                   TYA                     ; restore FAC2-FAC1 compare status
0042F2  1               
0042F2  1               ; FAC2 = FAC2*2
0042F2  1               LAB_2704:
0042F2  1  06 B6                ASL     <FAC2_3         ; shift FAC2 mantissa3
0042F4  1  26 B5                ROL     <FAC2_2         ; shift FAC2 mantissa2
0042F6  1  26 B4                ROL     <FAC2_1         ; shift FAC2 mantissa1
0042F8  1  B0 CF                BCS     LAB_26F4        ; loop with no compare
0042FA  1               
0042FA  1  30 BD                BMI     LAB_26E4        ; loop with compare
0042FC  1               
0042FC  1  10 CB                BPL     LAB_26F4        ; loop always with no compare
0042FE  1               
0042FE  1               ; do A<<6, save as FAC1 rounding byte, normalise and return
0042FE  1               
0042FE  1               LAB_272B:
0042FE  1  4A                   LSR     A               ; shift b1 - b0 ..
0042FF  1  6A                   ROR     A               ; ..
004300  1  6A                   ROR     A               ; .. to b7 - b6
004301  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
004303  1  28                   PLP                     ; dump FAC2-FAC1 compare status
004304  1  4C 0C 43             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
004307  1               
004307  1               ; do "Divide by zero" error
004307  1               
004307  1               LAB_2737:
004307  1  A2 14                LDX     #$14            ; error code $14 ("Divide by zero" error)
004309  1  4C 83 26             JMP     LAB_XERR        ; do error #X, then warm start
00430C  1               
00430C  1               ; copy temp to FAC1 and normalise
00430C  1               
00430C  1               LAB_273C:
00430C  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
00430E  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004310  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
004312  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004314  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
004316  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004318  1  4C 82 40             JMP     LAB_24D5        ; normalise FAC1 and return
00431B  1               
00431B  1               ; unpack memory (AY) into FAC1
00431B  1               
00431B  1               LAB_UFAC:
00431B  1  85 71                STA     <ut1_pl         ; save pointer low byte
00431D  1  84 72                STY     <ut1_ph         ; save pointer high byte
00431F  1  A0 03                LDY     #$03            ; 4 bytes to do
004321  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last byte
004325  1  B5 71 C9 00  
004329  1  D0 04 A2 00  
004337  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004339  1  88                   DEY                     ; decrement index
00433A  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last-1 byte
00433E  1  B5 71 C9 00  
004342  1  D0 04 A2 00  
004350  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004352  1  88                   DEY                     ; decrement index
004353  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get second byte
004357  1  B5 71 C9 00  
00435B  1  D0 04 A2 00  
004369  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
00436B  1  09 80                ORA     #$80            ; set 1xxx xxxx (add normal bit)
00436D  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00436F  1  88                   DEY                     ; decrement index
004370  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get first byte (exponent)
004374  1  B5 71 C9 00  
004378  1  D0 04 A2 00  
004386  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004388  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
00438A  1  60                   RTS
00438B  1               
00438B  1               ; pack FAC1 into <Adatal
00438B  1               
00438B  1               LAB_276E:
00438B  1  A2 A4                LDX     #<Adatal        ; set pointer low byte
00438D  1               LAB_2770:
00438D  1  A0 00                LDY     #>Adatal        ; set pointer high byte
00438F  1  F0 04                BEQ     LAB_2778        ; pack FAC1 into (XY) and return
004391  1               
004391  1               ; pack FAC1 into (<Lvarpl)
004391  1               
004391  1               LAB_PFAC:
004391  1  A6 97                LDX     <Lvarpl         ; get destination pointer low byte
004393  1  A4 98                LDY     <Lvarph         ; get destination pointer high byte
004395  1               
004395  1               ; pack FAC1 into (XY)
004395  1               
004395  1               LAB_2778:
004395  1  20 17 44             JSR     LAB_27BA        ; round FAC1
004398  1  86 71                STX     <ut1_pl         ; save pointer low byte
00439A  1  84 72                STY     <ut1_ph         ; save pointer high byte
00439C  1  A0 03                LDY     #$03            ; set index
00439E  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0043A0  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0043A4  1  01 B5 71 C9  
0043A8  1  00 D0 04 A2  
0043B6  1  88                   DEY                     ; decrement index
0043B7  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0043B9  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0043BD  1  01 B5 71 C9  
0043C1  1  00 D0 04 A2  
0043CF  1  88                   DEY                     ; decrement index
0043D0  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0043D2  1  09 7F                ORA     #$7F            ; set bits x111 1111
0043D4  1  25 AD                AND     <FAC1_1         ; AND in FAC1 mantissa1
0043D6  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0043DA  1  01 B5 71 C9  
0043DE  1  00 D0 04 A2  
0043EC  1  88                   DEY                     ; decrement index
0043ED  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0043EF  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0043F3  1  01 B5 71 C9  
0043F7  1  00 D0 04 A2  
004405  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004407  1  60                   RTS
004408  1               
004408  1               ; round and copy FAC1 to FAC2
004408  1               
004408  1               LAB_27AB:
004408  1  20 17 44             JSR     LAB_27BA        ; round FAC1
00440B  1               
00440B  1               ; copy FAC1 to FAC2
00440B  1               
00440B  1               LAB_27AE:
00440B  1  A2 05                LDX     #$05            ; 5 bytes to copy
00440D  1               LAB_27B0:
00440D  1  B5 AB                LDA     <FAC1_e-1,X     ; get byte from FAC1,X
00440F  1  95 B2                STA     <FAC1_o,X       ; save byte at FAC2,X
004411  1  CA                   DEX                     ; decrement count
004412  1  D0 F9                BNE     LAB_27B0        ; loop if not all done
004414  1               
004414  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
004416  1               LAB_27B9:
004416  1  60                   RTS
004417  1               
004417  1               ; round FAC1
004417  1               
004417  1               LAB_27BA:
004417  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004419  1  F0 FB                BEQ     LAB_27B9        ; exit if zero
00441B  1               
00441B  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
00441D  1  90 F7                BCC     LAB_27B9        ; exit if no overflow
00441F  1               
00441F  1               ; round FAC1 (no check)
00441F  1               
00441F  1               LAB_27C2:
00441F  1  20 06 41             JSR     LAB_2559        ; increment FAC1 mantissa
004422  1  D0 F2                BNE     LAB_27B9        ; branch if no overflow
004424  1               
004424  1  4C D7 40             JMP     LAB_252A        ; normalise FAC1 for C=1 and return
004427  1               
004427  1               ; get FAC1 sign
004427  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
004427  1               
004427  1               LAB_27CA:
004427  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004429  1  F0 09                BEQ     LAB_27D7        ; exit if zero (already correct SGN(0)=0)
00442B  1               
00442B  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
00442B  1               ; no = 0 check
00442B  1               
00442B  1               LAB_27CE:
00442B  1  A5 B0                LDA     <FAC1_s         ; else get FAC1 sign (b7)
00442D  1               
00442D  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
00442D  1               ; no = 0 check, sign in A
00442D  1               
00442D  1               LAB_27D0:
00442D  1  2A                   ROL     A               ; move sign bit to carry
00442E  1  A9 FF                LDA     #$FF            ; set byte for -ve result
004430  1  B0 02                BCS     LAB_27D7        ; return if sign was set (-ve)
004432  1               
004432  1  A9 01                LDA     #$01            ; else set byte for +ve result
004434  1               LAB_27D7:
004434  1  60                   RTS
004435  1               
004435  1               ; perform SGN()
004435  1               
004435  1               LAB_SGN:
004435  1  20 27 44             JSR     LAB_27CA        ; get FAC1 sign
004438  1               ; return A=$FF/-ve A=$01/+ve
004438  1               ; save A as integer byte
004438  1               
004438  1               LAB_27DB:
004438  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00443A  1  A9 00                LDA     #$00            ; clear A
00443C  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
00443E  1  A2 88                LDX     #$88            ; set exponent
004440  1               
004440  1               ; set exp=X, clearFAC1 mantissa3 and normalise
004440  1               
004440  1               LAB_27E3:
004440  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004442  1  49 FF                EOR     #$FF            ; complement it
004444  1  2A                   ROL     A               ; sign bit into carry
004445  1               
004445  1               ; set exp=X, clearFAC1 mantissa3 and normalise
004445  1               
004445  1               LAB_STFA:
004445  1  A9 00                LDA     #$00            ; clear A
004447  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004449  1  86 AC                STX     <FAC1_e         ; set FAC1 exponent
00444B  1  85 B9                STA     <FAC1_r         ; clear FAC1 rounding byte
00444D  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
00444F  1  4C 7D 40             JMP     LAB_24D0        ; do ABS and normalise FAC1
004452  1               
004452  1               ; perform ABS()
004452  1               
004452  1               LAB_ABS:
004452  1  46 B0                LSR     <FAC1_s         ; clear FAC1 sign (put zero in b7)
004454  1  60                   RTS
004455  1               
004455  1               ; compare FAC1 with (AY)
004455  1               ; returns A=$00 if FAC1 = (AY)
004455  1               ; returns A=$01 if FAC1 > (AY)
004455  1               ; returns A=$FF if FAC1 < (AY)
004455  1               
004455  1               LAB_27F8:
004455  1  85 73                STA     <ut2_pl         ; save pointer low byte
004457  1               LAB_27FA:
004457  1  84 74                STY     <ut2_ph         ; save pointer high byte
004459  1  A0 00                LDY     #$00            ; clear index
00445B  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get exponent
00445F  1  B5 73 C9 00  
004463  1  D0 04 A2 00  
004471  1  C8                   INY                     ; increment index
004472  1  AA                   TAX                     ; copy (AY) exponent to X
004473  1  F0 B2                BEQ     LAB_27CA        ; branch if (AY) exponent=0 and get FAC1 sign
004475  1               ; A=FF,C=1/-ve A=01,C=0/+ve
004475  1               
004475  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
004479  1  B5 73 C9 00  
00447D  1  D0 04 A2 00  
00448B  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
00448D  1  30 9C                BMI     LAB_27CE        ; if signs <> do return A=FF,C=1/-ve
00448F  1               ; A=01,C=0/+ve and return
00448F  1               
00448F  1  E4 AC                CPX     <FAC1_e         ; compare (AY) exponent with FAC1 exponent
004491  1  D0 56                BNE     LAB_2828        ; branch if different
004493  1               
004493  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
004497  1  B5 73 C9 00  
00449B  1  D0 04 A2 00  
0044A9  1  09 80                ORA     #$80            ; normalise top bit
0044AB  1  C5 AD                CMP     <FAC1_1         ; compare with FAC1 mantissa1
0044AD  1  D0 3A                BNE     LAB_2828        ; branch if different
0044AF  1               
0044AF  1  C8                   INY                     ; increment index
0044B0  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa2
0044B4  1  B5 73 C9 00  
0044B8  1  D0 04 A2 00  
0044C6  1  C5 AE                CMP     <FAC1_2         ; compare with FAC1 mantissa2
0044C8  1  D0 1F                BNE     LAB_2828        ; branch if different
0044CA  1               
0044CA  1  C8                   INY                     ; increment index
0044CB  1  A9 7F                LDA     #$7F            ; set for 1/2 value rounding byte
0044CD  1  C5 B9                CMP     <FAC1_r         ; compare with FAC1 rounding byte (set carry)
0044CF  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa3
0044D3  1  B5 73 C9 00  
0044D7  1  D0 04 A2 00  
0044E5  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
0044E7  1  F0 28                BEQ     LAB_2850        ; exit if mantissa3 equal
0044E9  1               
0044E9  1               ; gets here if number <> FAC1
0044E9  1               
0044E9  1               LAB_2828:
0044E9  1               
0044E9  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0044EB  1  90 02                BCC     LAB_282E        ; branch if FAC1 > (AY)
0044ED  1               
0044ED  1  49 FF                EOR     #$FF            ; else toggle FAC1 sign
0044EF  1               LAB_282E:
0044EF  1  4C 2D 44             JMP     LAB_27D0        ; return A=FF,C=1/-ve A=01,C=0/+ve
0044F2  1               
0044F2  1               ; convert FAC1 floating-to-fixed
0044F2  1               
0044F2  1               LAB_2831:
0044F2  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0044F4  1  F0 4A                BEQ     LAB_287F        ; if zero go clear FAC1 and return
0044F6  1               
0044F6  1  38                   SEC                     ; set carry for subtract
0044F7  1  E9 98                SBC     #$98            ; subtract maximum integer range exponent
0044F9  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
0044FB  1  10 09                BPL     LAB_2845        ; branch if FAC1 +ve
0044FD  1               
0044FD  1               ; FAC1 was -ve
0044FD  1  AA                   TAX                     ; copy subtracted exponent
0044FE  1  A9 FF                LDA     #$FF            ; overflow for -ve number
004500  1  85 B2                STA     <FAC1_o         ; set FAC1 overflow byte
004502  1  20 EA 40             JSR     LAB_253D        ; twos complement FAC1 mantissa
004505  1  8A                   TXA                     ; restore subtracted exponent
004506  1               LAB_2845:
004506  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1
004508  1  C9 F9                CMP     #$F9            ; compare exponent result
00450A  1  10 06                BPL     LAB_2851        ; if < 8 shifts shift FAC1 A times right and return
00450C  1               
00450C  1  20 28 41             JSR     LAB_257B        ; shift FAC1 A times right (> 8 shifts)
00450F  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
004511  1               LAB_2850:
004511  1  60                   RTS
004512  1               
004512  1               ; shift FAC1 A times right
004512  1               
004512  1               LAB_2851:
004512  1  A8                   TAY                     ; copy shift count
004513  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004515  1  29 80                AND     #$80            ; mask sign bit only (x000 0000)
004517  1  46 AD                LSR     <FAC1_1         ; shift FAC1 mantissa1
004519  1  05 AD                ORA     <FAC1_1         ; OR sign in b7 FAC1 mantissa1
00451B  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00451D  1  20 3F 41             JSR     LAB_2592        ; shift FAC1 Y times right
004520  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
004522  1  60                   RTS
004523  1               
004523  1               ; perform INT()
004523  1               
004523  1               LAB_INT:
004523  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004525  1  C9 98                CMP     #$98            ; compare with max int
004527  1  B0 1E                BCS     LAB_2886        ; exit if >= (already int, too big for fractional part!)
004529  1               
004529  1  20 F2 44             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
00452C  1  84 B9                STY     <FAC1_r         ; save FAC1 rounding byte
00452E  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004530  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
004532  1  49 80                EOR     #$80            ; toggle FAC1 sign
004534  1  2A                   ROL     A               ; shift into carry
004535  1  A9 98                LDA     #$98            ; set new exponent
004537  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004539  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00453B  1  85 5B                STA     <Temp3          ; save for EXP() function
00453D  1  4C 7D 40             JMP     LAB_24D0        ; do ABS and normalise FAC1
004540  1               
004540  1               ; clear FAC1 and return
004540  1               
004540  1               LAB_287F:
004540  1  85 AD                STA     <FAC1_1         ; clear FAC1 mantissa1
004542  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
004544  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004546  1  A8                   TAY                     ; clear Y
004547  1               LAB_2886:
004547  1  60                   RTS
004548  1               
004548  1               ; get FAC1 from string
004548  1               ; this routine now handles hex and binary values from strings
004548  1               ; starting with "$" and "%" respectively
004548  1               
004548  1               LAB_2887:
004548  1  A0 00                LDY     #$00            ; clear Y
00454A  1  84 5F                STY     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00454C  1  A2 09                LDX     #$09            ; set index
00454E  1               LAB_288B:
00454E  1  94 A8                STY     <numexp,x       ; clear byte
004550  1  CA                   DEX                     ; decrement index
004551  1  10 FB                BPL     LAB_288B        ; loop until <numexp to <negnum (and FAC1) = $00
004553  1               
004553  1  B0 03                BCS     LAB_s28FE       ; branch if 1st NOT character numeric
004555  1  4C DB 45             JMP     LAB_28FE        ; branch if 1st character numeric
004558  1               LAB_s28FE:
004558  1               
004558  1               ; get FAC1 from string .. first character wasn't numeric
004558  1               
004558  1  C9 2D                CMP     #'-'            ; else compare with "-"
00455A  1  D0 04                BNE     LAB_289A        ; branch if not "-"
00455C  1               
00455C  1  86 B1                STX     <negnum         ; set flag for -ve number (X = $FF)
00455E  1  F0 04                BEQ     LAB_289C        ; branch always (go scan and check for hex/bin)
004560  1               
004560  1               ; get FAC1 from string .. first character wasn't numeric or -
004560  1               
004560  1               LAB_289A:
004560  1  C9 2B                CMP     #'+'            ; else compare with "+"
004562  1  D0 06                BNE     LAB_289D        ; branch if not "+" (go check for hex/bin)
004564  1               
004564  1               ; was "+" or "-" to start, so get next character
004564  1               
004564  1               LAB_289C:
004564  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004568  1  90 71                BCC     LAB_28FE        ; branch if numeric character
00456A  1               
00456A  1               ; code here for hex and binary numbers
00456A  1               
00456A  1               LAB_289D:
00456A  1  C9 24                CMP     #'$'            ; else compare with "$"
00456C  1  D0 03                BNE     LAB_NHEX        ; branch if not "$"
00456E  1               
00456E  1  4C 99 4A             JMP     LAB_CHEX        ; branch if "$"
004571  1               
004571  1               LAB_NHEX:
004571  1  C9 25                CMP     #'%'            ; else compare with "%"
004573  1  D0 09                BNE     LAB_28A3        ; branch if not "%" (continue original code)
004575  1               
004575  1  4C C8 4A             JMP     LAB_CBIN        ; branch if "%"
004578  1               
004578  1               LAB_289E:
004578  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (ignore + or get next number)
00457C  1               LAB_28A1:
00457C  1  90 5D                BCC     LAB_28FE        ; branch if numeric character
00457E  1               
00457E  1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
00457E  1               
00457E  1               LAB_28A3:
00457E  1  C9 2E                CMP     #'.'            ; else compare with "."
004580  1  F0 30                BEQ     LAB_28D5        ; branch if "."
004582  1               
004582  1               ; get FAC1 from string .. character wasn't numeric, -, + or .
004582  1               
004582  1  C9 45                CMP     #'E'            ; else compare with "E"
004584  1  D0 32                BNE     LAB_28DB        ; branch if not "E"
004586  1               
004586  1               ; was "E" so evaluate exponential part
004586  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00458A  1  90 18                BCC     LAB_28C7        ; branch if numeric character
00458C  1               
00458C  1  C9 C8                CMP     #TK_MINUS       ; else compare with token for -
00458E  1  F0 0E                BEQ     LAB_28C2        ; branch if token for -
004590  1               
004590  1  C9 2D                CMP     #'-'            ; else compare with "-"
004592  1  F0 0A                BEQ     LAB_28C2        ; branch if "-"
004594  1               
004594  1  C9 C7                CMP     #TK_PLUS        ; else compare with token for +
004596  1  F0 08                BEQ     LAB_28C4        ; branch if token for +
004598  1               
004598  1  C9 2B                CMP     #'+'            ; else compare with "+"
00459A  1  F0 04                BEQ     LAB_28C4        ; branch if "+"
00459C  1               
00459C  1  D0 08                BNE     LAB_28C9        ; branch always
00459E  1               
00459E  1               LAB_28C2:
00459E  1  66 AB                ROR     <expneg         ; set exponent -ve flag (C, which=1, into b7)
0045A0  1               LAB_28C4:
0045A0  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0045A4  1               LAB_28C7:
0045A4  1  90 5B                BCC     LAB_2925        ; branch if numeric character
0045A6  1               
0045A6  1               LAB_28C9:
0045A6  1  24 AB                BIT     <expneg         ; test exponent -ve flag
0045A8  1  10 0E                BPL     LAB_28DB        ; if +ve go evaluate exponent
0045AA  1               
0045AA  1               ; else do exponent = -exponent
0045AA  1  A9 00                LDA     #$00            ; clear result
0045AC  1  38                   SEC                     ; set carry for subtract
0045AD  1  E5 A9                SBC     <expcnt         ; subtract exponent byte
0045AF  1  4C BA 45             JMP     LAB_28DD        ; go evaluate exponent
0045B2  1               
0045B2  1               LAB_28D5:
0045B2  1  66 AA                ROR     <numdpf         ; set decimal point flag
0045B4  1  24 AA                BIT     <numdpf         ; test decimal point flag
0045B6  1  50 C0                BVC     LAB_289E        ; branch if only one decimal point so far
0045B8  1               
0045B8  1               ; evaluate exponent
0045B8  1               LAB_28DB:
0045B8  1  A5 A9                LDA     <expcnt         ; get exponent count byte
0045BA  1               LAB_28DD:
0045BA  1  38                   SEC                     ; set carry for subtract
0045BB  1  E5 A8                SBC     <numexp         ; subtract numerator exponent
0045BD  1  85 A9                STA     <expcnt         ; save exponent count byte
0045BF  1  F0 12                BEQ     LAB_28F6        ; branch if no adjustment
0045C1  1               
0045C1  1  10 09                BPL     LAB_28EF        ; else if +ve go do FAC1*10^<expcnt
0045C3  1               
0045C3  1               ; else go do FAC1/10^(0-<expcnt)
0045C3  1               LAB_28E6:
0045C3  1  20 8E 42             JSR     LAB_26B9        ; divide by 10
0045C6  1  E6 A9                INC     <expcnt         ; increment exponent count byte
0045C8  1  D0 F9                BNE     LAB_28E6        ; loop until all done
0045CA  1               
0045CA  1  F0 07                BEQ     LAB_28F6        ; branch always
0045CC  1               
0045CC  1               LAB_28EF:
0045CC  1  20 75 42             JSR     LAB_269E        ; multiply by 10
0045CF  1  C6 A9                DEC     <expcnt         ; decrement exponent count byte
0045D1  1  D0 F9                BNE     LAB_28EF        ; loop until all done
0045D3  1               
0045D3  1               LAB_28F6:
0045D3  1  A5 B1                LDA     <negnum         ; get -ve flag
0045D5  1  30 01                BMI     LAB_28FB        ; if -ve do - FAC1 and return
0045D7  1               
0045D7  1  60                   RTS
0045D8  1               
0045D8  1               ; do - FAC1 and return
0045D8  1               
0045D8  1               LAB_28FB:
0045D8  1  4C CB 47             JMP     LAB_GTHAN       ; do - FAC1 and return
0045DB  1               
0045DB  1               ; do unsigned FAC1*10+number
0045DB  1               
0045DB  1               LAB_28FE:
0045DB  1  48                   PHA                     ; save character
0045DC  1  24 AA                BIT     <numdpf         ; test decimal point flag
0045DE  1  10 02                BPL     LAB_2905        ; skip exponent increment if not set
0045E0  1               
0045E0  1  E6 A8                INC     <numexp         ; else increment number exponent
0045E2  1               LAB_2905:
0045E2  1  20 75 42             JSR     LAB_269E        ; multiply FAC1 by 10
0045E5  1  68                   PLA                     ; restore character
0045E6  1  29 0F                AND     #$0F            ; convert to binary
0045E8  1  20 EE 45             JSR     LAB_2912        ; evaluate new ASCII digit
0045EB  1  4C 78 45             JMP     LAB_289E        ; go do next character
0045EE  1               
0045EE  1               ; evaluate new ASCII digit
0045EE  1               
0045EE  1               LAB_2912:
0045EE  1  48                   PHA                     ; save digit
0045EF  1  20 08 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0045F2  1  68                   PLA                     ; restore digit
0045F3  1  20 38 44             JSR     LAB_27DB        ; save A as integer byte
0045F6  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0045F8  1  45 B0                EOR     <FAC1_s         ; toggle with FAC1 sign (b7)
0045FA  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
0045FC  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
0045FE  1  4C 09 40             JMP     LAB_ADD         ; add FAC2 to FAC1 and return
004601  1               
004601  1               ; evaluate next character of exponential part of number
004601  1               
004601  1               LAB_2925:
004601  1  A5 A9                LDA     <expcnt         ; get exponent count byte
004603  1  C9 0A                CMP     #$0A            ; compare with 10 decimal
004605  1  90 09                BCC     LAB_2934        ; branch if less
004607  1               
004607  1  A9 64                LDA     #$64            ; make all -ve exponents = -100 decimal (causes underflow)
004609  1  24 AB                BIT     <expneg         ; test exponent -ve flag
00460B  1  30 25                BMI     LAB_2942        ; branch if -ve
00460D  1               
00460D  1  4C 11 41             JMP     LAB_2564        ; else do overflow error
004610  1               
004610  1               LAB_2934:
004610  1  0A                   ASL     A               ; * 2
004611  1  0A                   ASL     A               ; * 4
004612  1  65 A9                ADC     <expcnt         ; * 5
004614  1  0A                   ASL     A               ; * 10
004615  1  A0 00                LDY     #$00            ; set index
004617  1  8B 48 DA A2          ADCINDIRECTY Bpntrl     ; add character (will be $30 too much!)
00461B  1  01 B5 C3 C9  
00461F  1  00 D0 04 A2  
004630  1  E9 2F                SBC     #'0'-1          ; convert character to binary
004632  1               LAB_2942:
004632  1  85 A9                STA     <expcnt         ; save exponent count byte
004634  1  4C A0 45             JMP     LAB_28C4        ; go get next character
004637  1               
004637  1               ; print " in line [LINE #]"
004637  1               
004637  1               LAB_2953:
004637  1  A9 86                LDA     #<LAB_LMSG      ; point to " in line " message low byte
004639  1  A0 17                LDY     #>LAB_LMSG      ; point to " in line " message high byte
00463B  1  20 24 2F             JSR     LAB_18C3        ; print null terminated string from memory
00463E  1               
00463E  1               ; print Basic line #
00463E  1  A5 88                LDA     <Clineh         ; get current line high byte
004640  1  A6 87                LDX     <Clinel         ; get current line low byte
004642  1               
004642  1               ; print XA as unsigned integer
004642  1               
004642  1               LAB_295E:
004642  1  85 AD                STA     <FAC1_1         ; save low byte as FAC1 mantissa1
004644  1  86 AE                STX     <FAC1_2         ; save high byte as FAC1 mantissa2
004646  1  A2 90                LDX     #$90            ; set exponent to 16d bits
004648  1  38                   SEC                     ; set integer is +ve flag
004649  1  20 45 44             JSR     LAB_STFA        ; set exp=X, clearFAC1 mantissa3 and normalise
00464C  1  A0 00                LDY     #$00            ; clear index
00464E  1  98                   TYA                     ; clear A
00464F  1  20 64 46             JSR     LAB_297B        ; convert FAC1 to string, skip sign character save
004652  1  4C 24 2F             JMP     LAB_18C3        ; print null terminated string from memory and return
004655  1               
004655  1               ; convert FAC1 to ASCII string result in (AY)
004655  1               ; not any more, moved scratchpad to page 0
004655  1               
004655  1               LAB_296E:
004655  1  A0 01                LDY     #$01            ; set index = 1
004657  1  A9 20                LDA     #$20            ; character = " " (assume +ve)
004659  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
00465B  1  10 02                BPL     LAB_2978        ; branch if +ve
00465D  1               
00465D  1  A9 2D                LDA     #$2D            ; else character = "-"
00465F  1               LAB_2978:
00465F  1  DA                   PHX
004660  1  BB                   TYX
004661  1  95 EF                STA     <Decss,X        ; save leading character (" " or "-")
004663  1  FA                   PLX
004664  1               LAB_297B:
004664  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
004666  1  84 BA                STY     <Sendl          ; save index
004668  1  C8                   INY                     ; increment index
004669  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
00466B  1  D0 05                BNE     LAB_2989        ; branch if FAC1<>0
00466D  1               
00466D  1               ; exponent was $00 so FAC1 is 0
00466D  1  A9 30                LDA     #'0'            ; set character = "0"
00466F  1  4C 81 47             JMP     LAB_2A89        ; save last character, [EOT] and exit
004672  1               
004672  1               ; FAC1 is some non zero value
004672  1               LAB_2989:
004672  1  A9 00                LDA     #$00            ; clear (number exponent count)
004674  1  E0 81                CPX     #$81            ; compare FAC1 exponent with $81 (>1.00000)
004676  1               
004676  1  B0 09                BCS     LAB_299A        ; branch if FAC1=>1
004678  1               
004678  1               ; FAC1<1
004678  1  A9 F0                LDA     #<LAB_294F      ; set pointer low byte to 1,000,000
00467A  1  A0 17                LDY     #>LAB_294F      ; set pointer high byte to 1,000,000
00467C  1  20 87 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
00467F  1  A9 FA                LDA     #$FA            ; set number exponent count (-6)
004681  1               LAB_299A:
004681  1  85 A8                STA     <numexp         ; save number exponent count
004683  1               LAB_299C:
004683  1  A9 EC                LDA     #<LAB_294B      ; set pointer low byte to 999999.4375 (max before sci note)
004685  1  A0 17                LDY     #>LAB_294B      ; set pointer high byte to 999999.4375
004687  1  20 55 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
00468A  1  F0 1E                BEQ     LAB_29C3        ; exit if FAC1 = (AY)
00468C  1  10 12                BPL     LAB_29B9        ; go do /10 if FAC1 > (AY)
00468E  1               ; FAC1 < (AY)
00468E  1               LAB_29A7:
00468E  1  A9 E8                LDA     #<LAB_2947      ; set pointer low byte to 99999.9375
004690  1  A0 17                LDY     #>LAB_2947      ; set pointer high byte to 99999.9375
004692  1  20 55 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
004695  1  F0 02                BEQ     LAB_29B2        ; branch if FAC1 = (AY) (allow decimal places)
004697  1  10 0E                BPL     LAB_29C0        ; branch if FAC1 > (AY) (no decimal places)
004699  1               ; FAC1 <= (AY)
004699  1               LAB_29B2:
004699  1  20 75 42             JSR     LAB_269E        ; multiply by 10
00469C  1  C6 A8                DEC     <numexp         ; decrement number exponent count
00469E  1  D0 EE                BNE     LAB_29A7        ; go test again (branch always)
0046A0  1               
0046A0  1               LAB_29B9:
0046A0  1  20 8E 42             JSR     LAB_26B9        ; divide by 10
0046A3  1  E6 A8                INC     <numexp         ; increment number exponent count
0046A5  1  D0 DC                BNE     LAB_299C        ; go test again (branch always)
0046A7  1               
0046A7  1               ; now we have just the digits to do
0046A7  1               
0046A7  1               LAB_29C0:
0046A7  1  20 02 40             JSR     LAB_244E        ; add 0.5 to FAC1 (round FAC1)
0046AA  1               LAB_29C3:
0046AA  1  20 F2 44             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0046AD  1  A2 01                LDX     #$01            ; set default digits before dp = 1
0046AF  1  A5 A8                LDA     <numexp         ; get number exponent count
0046B1  1  18                   CLC                     ; clear carry for add
0046B2  1  69 07                ADC     #$07            ; up to 6 digits before point
0046B4  1  30 09                BMI     LAB_29D8        ; if -ve then 1 digit before dp
0046B6  1               
0046B6  1  C9 08                CMP     #$08            ; A>=8 if n>=1E6
0046B8  1  B0 06                BCS     LAB_29D9        ; branch if >= $08
0046BA  1               
0046BA  1               ; carry is clear
0046BA  1  69 FF                ADC     #$FF            ; take 1 from digit count
0046BC  1  AA                   TAX                     ; copy to A
0046BD  1  A9 02                LDA     #$02            ;.set exponent adjust
0046BF  1               LAB_29D8:
0046BF  1  38                   SEC                     ; set carry for subtract
0046C0  1               LAB_29D9:
0046C0  1  E9 02                SBC     #$02            ; -2
0046C2  1  85 A9                STA     <expcnt         ;.save exponent adjust
0046C4  1  86 A8                STX     <numexp         ; save digits before dp count
0046C6  1  8A                   TXA                     ; copy to A
0046C7  1  F0 02                BEQ     LAB_29E4        ; branch if no digits before dp
0046C9  1               
0046C9  1  10 17                BPL     LAB_29F7        ; branch if digits before dp
0046CB  1               
0046CB  1               LAB_29E4:
0046CB  1  A4 BA                LDY     <Sendl          ; get output string index
0046CD  1  A9 2E                LDA     #$2E            ; character "."
0046CF  1  C8                   INY                     ; increment index
0046D0  1  DA                   PHX
0046D1  1  BB                   TYX
0046D2  1  95 EF                STA     <Decss,X        ; save to output string
0046D4  1  FA                   PLX
0046D5  1  8A                   TXA                     ;.
0046D6  1  F0 08                BEQ     LAB_29F5        ;.
0046D8  1               
0046D8  1  A9 30                LDA     #'0'            ; character "0"
0046DA  1  C8                   INY                     ; increment index
0046DB  1  DA                   PHX
0046DC  1  BB                   TYX
0046DD  1  95 EF                STA     <Decss,X        ; save to output string
0046DF  1  FA                   PLX
0046E0  1               LAB_29F5:
0046E0  1  84 BA                STY     <Sendl          ; save output string index
0046E2  1               LAB_29F7:
0046E2  1  A0 00                LDY     #$00            ; clear index (point to 100,000)
0046E4  1  A2 80                LDX     #$80            ;
0046E6  1               LAB_29FB:
0046E6  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0046E8  1  18                   CLC                     ; clear carry for add
0046E9  1  79 66 18             ADC     LAB_2A9C,Y      ; add -ve LSB
0046EC  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0046EE  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0046F0  1  79 65 18             ADC     LAB_2A9B,Y      ; add -ve NMSB
0046F3  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0046F5  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0046F7  1  79 64 18             ADC     LAB_2A9A,Y      ; add -ve MSB
0046FA  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0046FC  1  E8                   INX                     ;
0046FD  1  B0 04                BCS     LAB_2A18        ;
0046FF  1               
0046FF  1  10 E5                BPL     LAB_29FB        ; not -ve so try again
004701  1               
004701  1  30 02                BMI     LAB_2A1A        ;
004703  1               
004703  1               LAB_2A18:
004703  1  30 E1                BMI     LAB_29FB        ;
004705  1               
004705  1               LAB_2A1A:
004705  1  8A                   TXA                     ;
004706  1  90 04                BCC     LAB_2A21        ;
004708  1               
004708  1  49 FF                EOR     #$FF            ;
00470A  1  69 0A                ADC     #$0A            ;
00470C  1               LAB_2A21:
00470C  1  69 2F                ADC     #'0'-1          ; add "0"-1 to result
00470E  1  C8                   INY                     ; increment index ..
00470F  1  C8                   INY                     ; .. to next less ..
004710  1  C8                   INY                     ; .. power of ten
004711  1  84 95                STY     <Cvaral         ; save as current var address low byte
004713  1  A4 BA                LDY     <Sendl          ; get output string index
004715  1  C8                   INY                     ; increment output string index
004716  1  AA                   TAX                     ; copy character to X
004717  1  29 7F                AND     #$7F            ; mask out top bit
004719  1  DA                   PHX
00471A  1  BB                   TYX
00471B  1  95 EF                STA     <Decss,X        ; save to output string
00471D  1  FA                   PLX
00471E  1  C6 A8                DEC     <numexp         ; decrement # of characters before the dp
004720  1  D0 08                BNE     LAB_2A3B        ; branch if still characters to do
004722  1               
004722  1               ; else output the point
004722  1  A9 2E                LDA     #$2E            ; character "."
004724  1  C8                   INY                     ; increment output string index
004725  1  DA                   PHX
004726  1  BB                   TYX
004727  1  95 EF                STA     <Decss,X        ; save to output string
004729  1  FA                   PLX
00472A  1               LAB_2A3B:
00472A  1  84 BA                STY     <Sendl          ; save output string index
00472C  1  A4 95                LDY     <Cvaral         ; get current var address low byte
00472E  1  8A                   TXA                     ; get character back
00472F  1  49 FF                EOR     #$FF            ;
004731  1  29 80                AND     #$80            ;
004733  1  AA                   TAX                     ;
004734  1  C0 12                CPY     #$12            ; compare index with max
004736  1  D0 AE                BNE     LAB_29FB        ; loop if not max
004738  1               
004738  1               ; now remove trailing zeroes
004738  1  A4 BA                LDY     <Sendl          ; get output string index
00473A  1               LAB_2A4B:
00473A  1  DA                   PHX
00473B  1  BB                   TYX
00473C  1  B5 EF                LDA     <Decss,X        ; get character from output string
00473E  1  FA                   PLX
00473F  1  88                   DEY                     ; decrement output string index
004740  1  C9 30                CMP     #'0'            ; compare with "0"
004742  1  F0 F6                BEQ     LAB_2A4B        ; loop until non "0" character found
004744  1               
004744  1  C9 2E                CMP     #'.'            ; compare with "."
004746  1  F0 01                BEQ     LAB_2A58        ; branch if was dp
004748  1               
004748  1               ; restore last character
004748  1  C8                   INY                     ; increment output string index
004749  1               LAB_2A58:
004749  1  A9 2B                LDA     #$2B            ; character "+"
00474B  1  A6 A9                LDX     <expcnt         ; get exponent count
00474D  1  F0 37                BEQ     LAB_2A8C        ; if zero go set null terminator and exit
00474F  1               
00474F  1               ; exponent isn't zero so write exponent
00474F  1  10 08                BPL     LAB_2A68        ; branch if exponent count +ve
004751  1               
004751  1  A9 00                LDA     #$00            ; clear A
004753  1  38                   SEC                     ; set carry for subtract
004754  1  E5 A9                SBC     <expcnt         ; subtract exponent count adjust (convert -ve to +ve)
004756  1  AA                   TAX                     ; copy exponent count to X
004757  1  A9 2D                LDA     #'-'            ; character "-"
004759  1               LAB_2A68:
004759  1  DA                   PHX
00475A  1  BB                   TYX
00475B  1  95 F1                STA     <Decss+2,X      ; save to output string
00475D  1  A9 45                LDA     #$45            ; character "E"
00475F  1  95 F0                STA     <Decss+1,X      ; save exponent sign to output string
004761  1  FA                   PLX
004762  1  8A                   TXA                     ; get exponent count back
004763  1  A2 2F                LDX     #'0'-1          ; one less than "0" character
004765  1  38                   SEC                     ; set carry for subtract
004766  1               LAB_2A74:
004766  1  E8                   INX                     ; increment 10's character
004767  1  E9 0A                SBC     #$0A            ;.subtract 10 from exponent count
004769  1  B0 FB                BCS     LAB_2A74        ; loop while still >= 0
00476B  1               
00476B  1  69 3A                ADC     #':'            ; add character ":" ($30+$0A, result is 10 less that value)
00476D  1  DA                   PHX
00476E  1  BB                   TYX
00476F  1  95 F3                STA     <Decss+4,X      ; save to output string
004771  1  FA                   PLX
004772  1  8A                   TXA                     ; copy 10's character
004773  1  DA                   PHX
004774  1  BB                   TYX
004775  1  95 F2                STA     <Decss+3,X      ; save to output string
004777  1  FA                   PLX
004778  1  A9 00                LDA     #$00            ; set null terminator
00477A  1  DA                   PHX
00477B  1  BB                   TYX
00477C  1  95 F4                STA     <Decss+5,X      ; save to output string
00477E  1  FA                   PLX
00477F  1  F0 0C                BEQ     LAB_2A91        ; go set string pointer (AY) and exit (branch always)
004781  1               
004781  1               ; save last character, [EOT] and exit
004781  1               LAB_2A89:
004781  1  DA                   PHX
004782  1  BB                   TYX
004783  1  95 EF                STA     <Decss,X        ; save last character to output string
004785  1  FA                   PLX
004786  1               ; set null terminator and exit
004786  1               LAB_2A8C:
004786  1  A9 00                LDA     #$00            ; set null terminator
004788  1  DA                   PHX
004789  1  BB                   TYX
00478A  1  95 F0                STA     <Decss+1,X      ; save after last character
00478C  1  FA                   PLX
00478D  1               ; set string pointer (AY) and exit
00478D  1               LAB_2A91:
00478D  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
00478F  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
004791  1  60                   RTS
004792  1               
004792  1               ; perform power function
004792  1               
004792  1               LAB_POWER:
004792  1  F0 42                BEQ     LAB_EXP         ; go do  EXP()
004794  1               
004794  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
004796  1  D0 03                BNE     LAB_2ABF        ; branch if FAC2<>0
004798  1               
004798  1  4C A0 40             JMP     LAB_24F3        ; clear FAC1 exponent and sign and return
00479B  1               
00479B  1               LAB_2ABF:
00479B  1  A2 9C                LDX     #<func_l        ; set destination pointer low byte
00479D  1  A0 00                LDY     #>func_l        ; set destination pointer high byte
00479F  1  20 95 43             JSR     LAB_2778        ; pack FAC1 into (XY)
0047A2  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0047A4  1  10 0F                BPL     LAB_2AD9        ; branch if FAC2>0
0047A6  1               
0047A6  1               ; else FAC2 is -ve and can only be raised to an
0047A6  1               ; integer power which gives an x +j0 result
0047A6  1  20 23 45             JSR     LAB_INT         ; perform INT
0047A9  1  A9 9C                LDA     #<func_l        ; set source pointer low byte
0047AB  1  A0 00                LDY     #>func_l        ; set source pointer high byte
0047AD  1  20 55 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0047B0  1  D0 03                BNE     LAB_2AD9        ; branch if FAC1 <> (AY) to allow Function Call error
0047B2  1               ; this will leave FAC1 -ve and cause a Function Call
0047B2  1               ; error when LOG() is called
0047B2  1               
0047B2  1  98                   TYA                     ; clear sign b7
0047B3  1  A4 5B                LDY     <Temp3          ; save mantissa 3 from INT() function as sign in Y
0047B5  1               ; for possible later negation, b0
0047B5  1               LAB_2AD9:
0047B5  1  20 0D 40             JSR     LAB_279D        ; save FAC1 sign and copy ABS(FAC2) to FAC1
0047B8  1  98                   TYA                     ; copy sign back ..
0047B9  1  48                   PHA                     ; .. and save it
0047BA  1  20 49 41             JSR     LAB_LOG         ; do LOG(n)
0047BD  1  A9 9C                LDA     #<garb_l        ; set pointer low byte
0047BF  1  A0 00                LDY     #>garb_l        ; set pointer high byte
0047C1  1  20 87 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY) (square the value)
0047C4  1  20 D6 47             JSR     LAB_EXP         ; go do EXP(n)
0047C7  1  68                   PLA                     ; pull sign from stack
0047C8  1  4A                   LSR     A               ; b0 is to be tested, shift to Cb
0047C9  1  90 0A                BCC     LAB_2AF9        ; if no bit then exit
0047CB  1               
0047CB  1               ; Perform negation
0047CB  1               ; do - FAC1
0047CB  1               
0047CB  1               LAB_GTHAN:
0047CB  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0047CD  1  F0 06                BEQ     LAB_2AF9        ; exit if <FAC1_e = $00
0047CF  1               
0047CF  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0047D1  1  49 FF                EOR     #$FF            ; complement it
0047D3  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0047D5  1               LAB_2AF9:
0047D5  1  60                   RTS
0047D6  1               
0047D6  1               ; perform EXP()	(x^e)
0047D6  1               
0047D6  1               LAB_EXP:
0047D6  1  A9 F4                LDA     #<LAB_2AFA      ; set 1.443 pointer low byte
0047D8  1  A0 17                LDY     #>LAB_2AFA      ; set 1.443 pointer high byte
0047DA  1  20 87 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0047DD  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
0047DF  1  69 50                ADC     #$50            ; +$50/$100
0047E1  1  90 03                BCC     LAB_2B2B        ; skip rounding if no carry
0047E3  1               
0047E3  1  20 1F 44             JSR     LAB_27C2        ; round FAC1 (no check)
0047E6  1               LAB_2B2B:
0047E6  1  85 A3                STA     <FAC2_r         ; save FAC2 rounding byte
0047E8  1  20 0B 44             JSR     LAB_27AE        ; copy FAC1 to FAC2
0047EB  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0047ED  1  C9 88                CMP     #$88            ; compare with EXP limit (256d)
0047EF  1  90 03                BCC     LAB_2B39        ; branch if less
0047F1  1               
0047F1  1               LAB_2B36:
0047F1  1  20 6C 42             JSR     LAB_2690        ; handle overflow and underflow
0047F4  1               LAB_2B39:
0047F4  1  20 23 45             JSR     LAB_INT         ; perform INT
0047F7  1  A5 5B                LDA     <Temp3          ; get mantissa 3 from INT() function
0047F9  1  18                   CLC                     ; clear carry for add
0047FA  1  69 81                ADC     #$81            ; normalise +1
0047FC  1  F0 F3                BEQ     LAB_2B36        ; if $00 go handle overflow
0047FE  1               
0047FE  1  38                   SEC                     ; set carry for subtract
0047FF  1  E9 01                SBC     #$01            ; now correct for exponent
004801  1  48                   PHA                     ; save FAC2 exponent
004802  1               
004802  1               ; swap FAC1 and FAC2
004802  1  A2 04                LDX     #$04            ; 4 bytes to do
004804  1               LAB_2B49:
004804  1  B5 B3                LDA     <FAC2_e,X       ; get FAC2,X
004806  1  B4 AC                LDY     <FAC1_e,X       ; get FAC1,X
004808  1  95 AC                STA     <FAC1_e,X       ; save FAC1,X
00480A  1  94 B3                STY     <FAC2_e,X       ; save FAC2,X
00480C  1  CA                   DEX                     ; decrement count/index
00480D  1  10 F5                BPL     LAB_2B49        ; loop if not all done
00480F  1               
00480F  1  A5 A3                LDA     <FAC2_r         ; get FAC2 rounding byte
004811  1  85 B9                STA     <FAC1_r         ; save as FAC1 rounding byte
004813  1  20 EE 3F             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
004816  1  20 CB 47             JSR     LAB_GTHAN       ; do - FAC1
004819  1  A9 F8                LDA     #<LAB_2AFE      ; set counter pointer low byte
00481B  1  A0 17                LDY     #>LAB_2AFE      ; set counter pointer high byte
00481D  1  20 3E 48             JSR     LAB_2B84        ; go do series evaluation
004820  1  A9 00                LDA     #$00            ; clear A
004822  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
004824  1  68                   PLA                     ;.get saved FAC2 exponent
004825  1  4C 51 42             JMP     LAB_2675        ; test and adjust accumulators and return
004828  1               
004828  1               ; ^2 then series evaluation
004828  1               
004828  1               LAB_2B6E:
004828  1  85 BA                STA     <Cptrl          ; save count pointer low byte
00482A  1  84 BB                STY     <Cptrh          ; save count pointer high byte
00482C  1  20 8B 43             JSR     LAB_276E        ; pack FAC1 into <Adatal
00482F  1  A9 A4                LDA     #<Adatal        ; set pointer low byte (Y already $00)
004831  1  20 87 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
004834  1  20 42 48             JSR     LAB_2B88        ; go do series evaluation
004837  1  A9 A4                LDA     #<Adatal        ; pointer to original # low byte
004839  1  A0 00                LDY     #>Adatal        ; pointer to original # high byte
00483B  1  4C 87 41             JMP     LAB_25FB        ; do convert AY, FCA1*(AY) and return
00483E  1               
00483E  1               ; series evaluation
00483E  1               
00483E  1               LAB_2B84:
00483E  1  85 BA                STA     <Cptrl          ; save count pointer low byte
004840  1  84 BB                STY     <Cptrh          ; save count pointer high byte
004842  1               LAB_2B88:
004842  1  A2 A8                LDX     #<numexp        ; set pointer low byte
004844  1  20 8D 43             JSR     LAB_2770        ; set pointer high byte and pack FAC1 into <numexp
004847  1  8B DA A2 01          LDAINDIRECTY Cptrl      ; get constants count
00484B  1  B5 BA C9 00  
00484F  1  D0 04 A2 00  
00485D  1  85 B1                STA     <numcon         ; save constants count
00485F  1  A4 BA                LDY     <Cptrl          ; get count pointer low byte
004861  1  C8                   INY                     ; increment it (now constants pointer)
004862  1  98                   TYA                     ; copy it
004863  1  D0 02                BNE     LAB_2B97        ; skip next if no overflow
004865  1               
004865  1  E6 BB                INC     <Cptrh          ; else increment high byte
004867  1               LAB_2B97:
004867  1  85 BA                STA     <Cptrl          ; save low byte
004869  1  A4 BB                LDY     <Cptrh          ; get high byte
00486B  1               LAB_2B9B:
00486B  1  20 87 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
00486E  1  A5 BA                LDA     <Cptrl          ; get constants pointer low byte
004870  1  A4 BB                LDY     <Cptrh          ; get constants pointer high byte
004872  1  18                   CLC                     ; clear carry for add
004873  1  69 04                ADC     #$04            ; +4 to  low pointer (4 bytes per constant)
004875  1  90 01                BCC     LAB_2BA8        ; skip next if no overflow
004877  1               
004877  1  C8                   INY                     ; increment high byte
004878  1               LAB_2BA8:
004878  1  85 BA                STA     <Cptrl          ; save pointer low byte
00487A  1  84 BB                STY     <Cptrh          ; save pointer high byte
00487C  1  20 06 40             JSR     LAB_246C        ; add (AY) to FAC1
00487F  1  A9 A8                LDA     #<numexp        ; set pointer low byte to partial @ <numexp
004881  1  A0 00                LDY     #>numexp        ; set pointer high byte to partial @ <numexp
004883  1  C6 B1                DEC     <numcon         ; decrement constants count
004885  1  D0 E4                BNE     LAB_2B9B        ; loop until all done
004887  1               
004887  1  60                   RTS
004888  1               
004888  1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
004888  1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
004888  1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
004888  1               
004888  1               ; Entropy = 7.997442 bits per byte
004888  1               ; Optimum compression would reduce these 65536 bytes by 0 percent
004888  1               
004888  1               ; Chi square distribution for 65536 samples is 232.01, and
004888  1               ; randomly would exceed this value 75.00 percent of the time
004888  1               
004888  1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
004888  1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
004888  1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
004888  1               
004888  1               LAB_RND:
004888  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00488A  1  F0 07                BEQ     NextPRN         ; do next random # if zero
00488C  1               
00488C  1               ; else get seed into random number store
00488C  1  A2 E1                LDX     #<Rbyte4        ; set PRNG pointer low byte
00488E  1  A0 00                LDY     #$00            ; set PRNG pointer high byte
004890  1  20 95 43             JSR     LAB_2778        ; pack FAC1 into (XY)
004893  1               NextPRN:
004893  1  A2 AF                LDX     #$AF            ; set EOR byte
004895  1  A0 13                LDY     #$13            ; do this nineteen times
004897  1               LoopPRN:
004897  1  06 E2                ASL     <Rbyte1         ; shift PRNG most significant byte
004899  1  26 E3                ROL     <Rbyte2         ; shift PRNG middle byte
00489B  1  26 E4                ROL     <Rbyte3         ; shift PRNG least significant byte
00489D  1  26 E1                ROL     <Rbyte4         ; shift PRNG extra byte
00489F  1  90 05                BCC     Ninc1           ; branch if bit 32 clear
0048A1  1               
0048A1  1  8A                   TXA                     ; set EOR byte
0048A2  1  45 E2                EOR     <Rbyte1         ; EOR PRNG extra byte
0048A4  1  85 E2                STA     <Rbyte1         ; save new PRNG extra byte
0048A6  1               Ninc1:
0048A6  1  88                   DEY                     ; decrement loop count
0048A7  1  D0 EE                BNE     LoopPRN         ; loop if not all done
0048A9  1               
0048A9  1  A2 02                LDX     #$02            ; three bytes to copy
0048AB  1               CopyPRNG:
0048AB  1  B5 E2                LDA     <Rbyte1,X       ; get PRNG byte
0048AD  1  95 AD                STA     <FAC1_1,X       ; save FAC1 byte
0048AF  1  CA                   DEX
0048B0  1  10 F9                BPL     CopyPRNG        ; loop if not complete
0048B2  1               
0048B2  1  A9 80                LDA     #$80            ; set the exponent
0048B4  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0048B6  1               
0048B6  1  0A                   ASL     A               ; clear A
0048B7  1  85 B0                STA     <FAC1_s         ; save FAC1 sign
0048B9  1               
0048B9  1  4C 82 40             JMP     LAB_24D5        ; normalise FAC1 and return
0048BC  1               
0048BC  1               ; perform COS()
0048BC  1               
0048BC  1               LAB_COS:
0048BC  1  A9 15                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
0048BE  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
0048C0  1  20 06 40             JSR     LAB_246C        ; add (AY) to FAC1
0048C3  1               
0048C3  1               ; perform SIN()
0048C3  1               
0048C3  1               LAB_SIN:
0048C3  1  20 08 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0048C6  1  A9 2A                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
0048C8  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
0048CA  1  A6 B7                LDX     <FAC2_s         ; get FAC2 sign (b7)
0048CC  1  20 97 42             JSR     LAB_26C2        ; divide by (AY) (X=sign)
0048CF  1  20 08 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0048D2  1  20 23 45             JSR     LAB_INT         ; perform INT
0048D5  1  A9 00                LDA     #$00            ; clear byte
0048D7  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
0048D9  1  20 EE 3F             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
0048DC  1  A9 5C                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
0048DE  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
0048E0  1  20 EB 3F             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
0048E3  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0048E5  1  48                   PHA                     ; save FAC1 sign
0048E6  1  10 0D                BPL     LAB_2C35        ; branch if +ve
0048E8  1               
0048E8  1               ; FAC1 sign was -ve
0048E8  1  20 02 40             JSR     LAB_244E        ; add 0.5 to FAC1
0048EB  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0048ED  1  30 09                BMI     LAB_2C38        ; branch if -ve
0048EF  1               
0048EF  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
0048F1  1  49 FF                EOR     #$FF            ; toggle flag
0048F3  1  85 63                STA     <Cflag          ; save comparison evaluation flag
0048F5  1               LAB_2C35:
0048F5  1  20 CB 47             JSR     LAB_GTHAN       ; do - FAC1
0048F8  1               LAB_2C38:
0048F8  1  A9 5C                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
0048FA  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
0048FC  1  20 06 40             JSR     LAB_246C        ; add (AY) to FAC1
0048FF  1  68                   PLA                     ; restore FAC1 sign
004900  1  10 03                BPL     LAB_2C45        ; branch if was +ve
004902  1               
004902  1               ; else correct FAC1
004902  1  20 CB 47             JSR     LAB_GTHAN       ; do - FAC1
004905  1               LAB_2C45:
004905  1  A9 19                LDA     #<LAB_2C84      ; set pointer low byte to counter
004907  1  A0 18                LDY     #>LAB_2C84      ; set pointer high byte to counter
004909  1  4C 28 48             JMP     LAB_2B6E        ; ^2 then series evaluation and return
00490C  1               
00490C  1               ; perform TAN()
00490C  1               
00490C  1               LAB_TAN:
00490C  1  20 8B 43             JSR     LAB_276E        ; pack FAC1 into <Adatal
00490F  1  A9 00                LDA     #$00            ; clear byte
004911  1  85 63                STA     <Cflag          ; clear comparison evaluation flag
004913  1  20 C3 48             JSR     LAB_SIN         ; go do SIN(n)
004916  1  A2 9C                LDX     #<func_l        ; set sin(n) pointer low byte
004918  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
00491A  1  20 95 43             JSR     LAB_2778        ; pack FAC1 into (XY)
00491D  1  A9 A4                LDA     #<Adatal        ; set n pointer low addr
00491F  1  A0 00                LDY     #>Adatal        ; set n pointer high addr
004921  1  20 1B 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004924  1  A9 00                LDA     #$00            ; clear byte
004926  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
004928  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
00492A  1  20 34 49             JSR     LAB_2C74        ; save flag and go do series evaluation
00492D  1               
00492D  1  A9 9C                LDA     #<func_l        ; set sin(n) pointer low byte
00492F  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
004931  1  4C 9F 42             JMP     LAB_26CA        ; convert AY and do (AY)/FAC1
004934  1               
004934  1               LAB_2C74:
004934  1  48                   PHA                     ; save comparison evaluation flag
004935  1  4C F5 48             JMP     LAB_2C35        ; go do series evaluation
004938  1               
004938  1               ; perform USR()
004938  1               
004938  1               LAB_USR:
004938  1  20 0A 00             JSR     Usrjmp          ; call user code
00493B  1  4C B2 32             JMP     LAB_1BFB        ; scan for ")", else do syntax error then warm start
00493E  1               
00493E  1               ; perform ATN()
00493E  1               
00493E  1               LAB_ATN:
00493E  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004940  1  48                   PHA                     ; save sign
004941  1  10 03                BPL     LAB_2CA1        ; branch if +ve
004943  1               
004943  1  20 CB 47             JSR     LAB_GTHAN       ; else do - FAC1
004946  1               LAB_2CA1:
004946  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004948  1  48                   PHA                     ; push exponent
004949  1  C9 81                CMP     #$81            ; compare with 1
00494B  1  90 07                BCC     LAB_2CAF        ; branch if FAC1<1
00494D  1               
00494D  1  A9 4F                LDA     #<LAB_259C      ; set 1 pointer low byte
00494F  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
004951  1  20 9F 42             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1
004954  1               LAB_2CAF:
004954  1  A9 2E                LDA     #<LAB_2CC9      ; set pointer low byte to counter
004956  1  A0 18                LDY     #>LAB_2CC9      ; set pointer high byte to counter
004958  1  20 28 48             JSR     LAB_2B6E        ; ^2 then series evaluation
00495B  1  68                   PLA                     ; restore old FAC1 exponent
00495C  1  C9 81                CMP     #$81            ; compare with 1
00495E  1  90 07                BCC     LAB_2CC2        ; branch if FAC1<1
004960  1               
004960  1  A9 15                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
004962  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
004964  1  20 EB 3F             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
004967  1               LAB_2CC2:
004967  1  68                   PLA                     ; restore FAC1 sign
004968  1  10 16                BPL     LAB_2D04        ; exit if was +ve
00496A  1               
00496A  1  4C CB 47             JMP     LAB_GTHAN       ; else do - FAC1 and return
00496D  1               
00496D  1               ; perform BITSET
00496D  1               
00496D  1               LAB_BITSET:
00496D  1  20 C8 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004970  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
004972  1  B0 20                BCS     FCError         ; branch if > 7
004974  1               
004974  1  A9 00                LDA     #$00            ; clear A
004976  1  38                   SEC                     ; set the carry
004977  1               S_Bits:
004977  1  2A                   ROL     A               ; shift bit
004978  1  CA                   DEX                     ; decrement bit number
004979  1  10 FC                BPL     S_Bits          ; loop if still +ve
00497B  1               
00497B  1  E8                   INX                     ; make X = $00
00497C  1  01 11                ORA     (<Itempl,X)     ; or with byte via temporary integer (addr)
00497E  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
004980  1               LAB_2D04:
004980  1  60                   RTS
004981  1               
004981  1               ; perform BITCLR
004981  1               
004981  1               LAB_BITCLR:
004981  1  20 C8 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004984  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
004986  1  B0 0C                BCS     FCError         ; branch if > 7
004988  1               
004988  1  A9 FF                LDA     #$FF            ; set A
00498A  1               S_Bitc:
00498A  1  2A                   ROL     A               ; shift bit
00498B  1  CA                   DEX                     ; decrement bit number
00498C  1  10 FC                BPL     S_Bitc          ; loop if still +ve
00498E  1               
00498E  1  E8                   INX                     ; make X = $00
00498F  1  21 11                AND     (<Itempl,X)     ; and with byte via temporary integer (addr)
004991  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
004993  1  60                   RTS
004994  1               
004994  1               FCError:
004994  1  4C 26 36             JMP     LAB_FCER        ; do function call error then warm start
004997  1               
004997  1               ; perform BITTST()
004997  1               
004997  1               LAB_BTST:
004997  1  22 BC 00 00          JSL     LAB_IGBY        ; increment BASIC pointer
00499B  1  20 C8 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
00499E  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
0049A0  1  B0 F2                BCS     FCError         ; branch if > 7
0049A2  1               
0049A2  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
0049A6  1  C9 29                CMP     #')'            ; is next character ")"
0049A8  1  F0 03                BEQ     TST_OK          ; if ")" go do rest of function
0049AA  1               
0049AA  1  4C C7 32             JMP     LAB_SNER        ; do syntax error then warm start
0049AD  1               
0049AD  1               TST_OK:
0049AD  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
0049B1  1  A9 00                LDA     #$00            ; clear A
0049B3  1  38                   SEC                     ; set the carry
0049B4  1               T_Bits:
0049B4  1  2A                   ROL     A               ; shift bit
0049B5  1  CA                   DEX                     ; decrement bit number
0049B6  1  10 FC                BPL     T_Bits          ; loop if still +ve
0049B8  1               
0049B8  1  E8                   INX                     ; make X = $00
0049B9  1  21 11                AND     (<Itempl,X)     ; AND with byte via temporary integer (addr)
0049BB  1  F0 02                BEQ     LAB_NOTT        ; branch if zero (already correct)
0049BD  1               
0049BD  1  A9 FF                LDA     #$FF            ; set for -1 result
0049BF  1               LAB_NOTT:
0049BF  1  4C 38 44             JMP     LAB_27DB        ; go do SGN tail
0049C2  1               
0049C2  1               ; perform BIN$()
0049C2  1               
0049C2  1               LAB_BINS:
0049C2  1  E0 19                CPX     #$19            ; max + 1
0049C4  1  B0 71                BCS     BinFErr         ; exit if too big ( > or = )
0049C6  1               
0049C6  1  86 78                STX     <TempB          ; save # of characters ($00 = leading zero remove)
0049C8  1  A9 18                LDA     #$18            ; need A byte long space
0049CA  1  20 CD 38             JSR     LAB_MSSP        ; make string space A bytes long
0049CD  1  A0 17                LDY     #$17            ; set index
0049CF  1  A2 18                LDX     #$18            ; character count
0049D1  1               NextB1:
0049D1  1  46 11                LSR     <nums_1         ; shift highest byte
0049D3  1  66 12                ROR     <nums_2         ; shift middle byte
0049D5  1  66 13                ROR     <nums_3         ; shift lowest byte bit 0 to carry
0049D7  1  8A                   TXA                     ; load with "0"/2
0049D8  1  2A                   ROL     A               ; shift in carry
0049D9  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string + index
0049DD  1  01 B5 AD C9  
0049E1  1  00 D0 04 A2  
0049EF  1  88                   DEY                     ; decrement index
0049F0  1  10 DF                BPL     NextB1          ; loop if not done
0049F2  1               
0049F2  1  A5 78                LDA     <TempB          ; get # of characters
0049F4  1  F0 0A                BEQ     EndBHS          ; branch if truncate
0049F6  1               
0049F6  1  AA                   TAX                     ; copy length to X
0049F7  1  38                   SEC                     ; set carry for add !
0049F8  1  49 FF                EOR     #$FF            ; 1's complement
0049FA  1  69 18                ADC     #$18            ; add 24d
0049FC  1  F0 30                BEQ     GoPr2           ; if zero print whole string
0049FE  1               
0049FE  1  D0 23                BNE     GoPr1           ; else go make output string
004A00  1               
004A00  1               ; this is the exit code and is also used by HEX$()
004A00  1               ; truncate string to remove leading "0"s
004A00  1               
004A00  1               EndBHS:
004A00  1  A8                   TAY                     ; clear index (A=0, X=length here)
004A01  1               NextB2:
004A01  1  8B DA A2 01          LDAINDIRECTY str_pl     ; get character from string
004A05  1  B5 AD C9 00  
004A09  1  D0 04 A2 00  
004A17  1  C9 30                CMP     #'0'            ; compare with "0"
004A19  1  D0 07                BNE     GoPr            ; if not "0" then go print string from here
004A1B  1               
004A1B  1  CA                   DEX                     ; decrement character count
004A1C  1  F0 03                BEQ     GoPr3           ; if zero then end of string so go print it
004A1E  1               
004A1E  1  C8                   INY                     ; else increment index
004A1F  1  10 E0                BPL     NextB2          ; loop always
004A21  1               
004A21  1               ; make fixed length output string - ignore overflows!
004A21  1               
004A21  1               GoPr3:
004A21  1  E8                   INX                     ; need at least 1 character
004A22  1               GoPr:
004A22  1  98                   TYA                     ; copy result
004A23  1               GoPr1:
004A23  1  18                   CLC                     ; clear carry for add
004A24  1  65 AD                ADC     <str_pl         ; add low address
004A26  1  85 AD                STA     <str_pl         ; save low address
004A28  1  A9 00                LDA     #$00            ; do high byte
004A2A  1  65 AE                ADC     <str_ph         ; add high address
004A2C  1  85 AE                STA     <str_ph         ; save high address
004A2E  1               GoPr2:
004A2E  1  86 AC                STX     <str_ln         ; X holds string length
004A30  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
004A34  1  4C 30 39             JMP     LAB_RTST        ; check for space on descriptor stack then put address
004A37  1               ; and length on descriptor stack and update stack pointers
004A37  1               
004A37  1               BinFErr:
004A37  1  4C 26 36             JMP     LAB_FCER        ; do function call error then warm start
004A3A  1               
004A3A  1               ; perform HEX$()
004A3A  1               
004A3A  1               LAB_HEXS:
004A3A  1  E0 07                CPX     #$07            ; max + 1
004A3C  1  B0 F9                BCS     BinFErr         ; exit if too big ( > or = )
004A3E  1               
004A3E  1  86 78                STX     <TempB          ; save # of characters
004A40  1               
004A40  1  A9 06                LDA     #$06            ; need 6 bytes for string
004A42  1  20 CD 38             JSR     LAB_MSSP        ; make string space A bytes long
004A45  1  A0 05                LDY     #$05            ; set string index
004A47  1               
004A47  1  F8                   SED                     ; need decimal mode for nibble convert
004A48  1  A5 13                LDA     <nums_3         ; get lowest byte
004A4A  1  20 68 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004A4D  1  A5 12                LDA     <nums_2         ; get middle byte
004A4F  1  20 68 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004A52  1  A5 11                LDA     <nums_1         ; get highest byte
004A54  1  20 68 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004A57  1  D8                   CLD                     ; back to binary
004A58  1               
004A58  1  A2 06                LDX     #$06            ; character count
004A5A  1  A5 78                LDA     <TempB          ; get # of characters
004A5C  1  F0 A2                BEQ     EndBHS          ; branch if truncate
004A5E  1               
004A5E  1  AA                   TAX                     ; copy length to X
004A5F  1  38                   SEC                     ; set carry for add !
004A60  1  49 FF                EOR     #$FF            ; 1's complement
004A62  1  69 06                ADC     #$06            ; add 6d
004A64  1  F0 C8                BEQ     GoPr2           ; if zero print whole string
004A66  1               
004A66  1  D0 BB                BNE     GoPr1           ; else go make output string (branch always)
004A68  1               
004A68  1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
004A68  1               
004A68  1               LAB_A2HX:
004A68  1  AA                   TAX                     ; save byte
004A69  1  29 0F                AND     #$0F            ; mask off top bits
004A6B  1  20 73 4A             JSR     LAB_AL2X        ; convert low nibble to ASCII and output
004A6E  1  8A                   TXA                     ; get byte back
004A6F  1  4A                   LSR     A               ; /2	shift high nibble to low nibble
004A70  1  4A                   LSR     A               ; /4
004A71  1  4A                   LSR     A               ; /8
004A72  1  4A                   LSR     A               ; /16
004A73  1               LAB_AL2X:
004A73  1  C9 0A                CMP     #$0A            ; set carry for +1 if >9
004A75  1  69 30                ADC     #'0'            ; add ASCII "0"
004A77  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string
004A7B  1  01 B5 AD C9  
004A7F  1  00 D0 04 A2  
004A8D  1  88                   DEY                     ; decrement counter
004A8E  1  60                   RTS
004A8F  1               
004A8F  1               LAB_NLTO:
004A8F  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004A91  1  A9 00                LDA     #$00            ; clear sign compare
004A93  1               LAB_MLTE:
004A93  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004A95  1  8A                   TXA                     ; restore character
004A96  1  20 EE 45             JSR     LAB_2912        ; evaluate new ASCII digit
004A99  1               
004A99  1               ; gets here if the first character was "$" for hex
004A99  1               ; get hex number
004A99  1               
004A99  1               LAB_CHEX:
004A99  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004A9D  1  90 0A                BCC     LAB_ISHN        ; branch if numeric character
004A9F  1               
004A9F  1  09 20                ORA     #$20            ; case convert, allow "A" to "F" and "a" to "f"
004AA1  1  E9 61                SBC     #'a'            ; subtract "a" (carry set here)
004AA3  1  C9 06                CMP     #$06            ; compare normalised with $06 (max+1)
004AA5  1  B0 2B                BCS     LAB_EXCH        ; exit if >"f" or <"0"
004AA7  1               
004AA7  1  69 0A                ADC     #$0A            ; convert to nibble
004AA9  1               LAB_ISHN:
004AA9  1  29 0F                AND     #$0F            ; convert to binary
004AAB  1  AA                   TAX                     ; save nibble
004AAC  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004AAE  1  F0 E3                BEQ     LAB_MLTE        ; skip multiply if zero
004AB0  1               
004AB0  1  69 04                ADC     #$04            ; add four to exponent (*16 - carry clear here)
004AB2  1  90 DB                BCC     LAB_NLTO        ; if no overflow do evaluate digit
004AB4  1               
004AB4  1               LAB_MLTO:
004AB4  1  4C 11 41             JMP     LAB_2564        ; do overflow error and warm start
004AB7  1               
004AB7  1               LAB_NXCH:
004AB7  1  AA                   TAX                     ; save bit
004AB8  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004ABA  1  F0 06                BEQ     LAB_MLBT        ; skip multiply if zero
004ABC  1               
004ABC  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*2)
004ABE  1  F0 F4                BEQ     LAB_MLTO        ; do overflow error if = $00
004AC0  1               
004AC0  1  A9 00                LDA     #$00            ; clear sign compare
004AC2  1               LAB_MLBT:
004AC2  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004AC4  1  8A                   TXA                     ; restore bit
004AC5  1  20 EE 45             JSR     LAB_2912        ; evaluate new ASCII digit
004AC8  1               
004AC8  1               ; gets here if the first character was  "%" for binary
004AC8  1               ; get binary number
004AC8  1               
004AC8  1               LAB_CBIN:
004AC8  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004ACC  1  49 30                EOR     #'0'            ; convert "0" to 0 etc.
004ACE  1  C9 02                CMP     #$02            ; compare with max+1
004AD0  1  90 E5                BCC     LAB_NXCH        ; branch exit if < 2
004AD2  1               
004AD2  1               LAB_EXCH:
004AD2  1  4C D3 45             JMP     LAB_28F6        ; evaluate -ve flag and return
004AD5  1               
004AD5  1               ; ctrl-c check routine. .includes limited "life" byte save for INGET routine
004AD5  1               ; now also the code that checks to see if an interrupt has occurred
004AD5  1               
004AD5  1               CTRLC:
004AD5  1  AF 00 02 00          LDA     f:ccflag        ; get [CTRL-C] check flag
004AD9  1  D0 21                BNE     LAB_FBA2        ; exit if inhibited
004ADB  1               
004ADB  1  20 76 18             JSR     V_INPT          ; scan input device
004ADE  1  B0 11                BCS     LAB_FBA0        ; exit if buffer empty
004AE0  1               
004AE0  1  8F 01 02 00          STA     f:ccbyte        ; save received byte
004AE4  1  A9 20                LDA     #$20            ; "life" timer for bytes
004AE6  1  8F 02 02 00          STA     f:ccnull        ; set countdown
004AEA  1  AF 01 02 00          LDA     f:ccbyte
004AEE  1  4C 7E 2A             JMP     LAB_1636        ; return to BASIC
004AF1  1               
004AF1  1               LAB_FBA0:
004AF1  1  AF 02 02 00          LDA     f:ccnull        ; get countdown byte
004AF5  1  F0 05                BEQ     LAB_FBA2        ; exit if finished
004AF7  1  3A                   DEC     A
004AF8  1  8F 02 02 00          STA     f:ccnull        ; else decrement countdown
004AFC  1               LAB_FBA2:
004AFC  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004AFE  1  20 0B 4B             JSR     LAB_CKIN        ; go check interrupt
004B01  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004B03  1  20 0B 4B             JSR     LAB_CKIN        ; go check interrupt
004B06  1  AF 01 02 00          LDA     f:ccbyte
004B0A  1               LAB_CRTS:
004B0A  1  60                   RTS
004B0B  1               
004B0B  1               ; check whichever interrupt is indexed by X
004B0B  1               
004B0B  1               LAB_CKIN:
004B0B  1  B5 00                LDA     <PLUS_0,X       ; get interrupt flag byte
004B0D  1  10 FB                BPL     LAB_CRTS        ; branch if interrupt not enabled
004B0F  1               
004B0F  1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
004B0F  1               ; automatically enable the interrupt when we exit
004B0F  1               
004B0F  1  0A                   ASL     A               ; move happened bit to setup bit
004B10  1  29 40                AND     #$40            ; mask happened bits
004B12  1  F0 F6                BEQ     LAB_CRTS        ; if no interrupt then exit
004B14  1               
004B14  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004B16  1               
004B16  1  8A                   TXA                     ; copy index ..
004B17  1  A8                   TAY                     ; .. to Y
004B18  1               
004B18  1  68                   PLA                     ; dump return address low byte, call from CTRL-C
004B19  1  68                   PLA                     ; dump return address high byte
004B1A  1               
004B1A  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
004B1C  1  20 3A 26             JSR     LAB_1212        ; check room on stack for A bytes
004B1F  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
004B21  1  48                   PHA                     ; push on stack
004B22  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
004B24  1  48                   PHA                     ; push on stack
004B25  1  A5 88                LDA     <Clineh         ; get current line high byte
004B27  1  48                   PHA                     ; push on stack
004B28  1  A5 87                LDA     <Clinel         ; get current line low byte
004B2A  1  48                   PHA                     ; push on stack
004B2B  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
004B2D  1  48                   PHA                     ; push on stack
004B2E  1  DA                   PHX
004B2F  1  BB                   TYX
004B30  1  B5 01                LDA     <PLUS_1,X       ; get interrupt code pointer low byte
004B32  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
004B34  1  B5 02                LDA     <PLUS_2,X       ; get interrupt code pointer high byte
004B36  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
004B38  1  FA                   PLX
004B39  1  4C 20 2A             JMP     LAB_15C2        ; go do interpreter inner loop
004B3C  1               ; can't RTS, we used the stack! the RTS from the ctrl-c
004B3C  1               ; check will be taken when the RETIRQ/RETNMI/RETURN is
004B3C  1               ; executed at the end of the subroutine
004B3C  1               
004B3C  1               ; get byte from input device, no waiting
004B3C  1               ; returns with carry set if byte in A
004B3C  1               
004B3C  1               INGET:
004B3C  1  20 76 18             JSR     V_INPT          ; call scan input device
004B3F  1  90 0B                BCC     LAB_FB95        ; if byte go reset timer
004B41  1               
004B41  1  AF 02 02 00          LDA     f:ccnull        ; get countdown
004B45  1  F0 0F                BEQ     LAB_FB96        ; exit if empty
004B47  1               
004B47  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004B4B  1  38                   SEC                     ; flag we got a byte
004B4C  1               LAB_FB95:
004B4C  1  A9 00                LDA     #$00            ; clear X
004B4E  1  8F 02 02 00          STA     f:ccnull        ; clear timer because we got a byte
004B52  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004B56  1               LAB_FB96:
004B56  1  60                   RTS
004B57  1               
004B57  1               ; these routines only enable the interrupts if the set-up flag is set
004B57  1               ; if not they have no effect
004B57  1               
004B57  1               ; perform IRQ {ON|OFF|CLEAR}
004B57  1               
004B57  1               LAB_IRQ:
004B57  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004B59  1  2C                   .BYTE   $2C             ; make next line BIT abs.
004B5A  1               
004B5A  1               ; perform NMI {ON|OFF|CLEAR}
004B5A  1               
004B5A  1               LAB_NMI:
004B5A  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004B5C  1  C9 93                CMP     #TK_ON          ; compare with token for ON
004B5E  1  F0 11                BEQ     LAB_INON        ; go turn on interrupt
004B60  1               
004B60  1  C9 C6                CMP     #TK_OFF         ; compare with token for OFF
004B62  1  F0 07                BEQ     LAB_IOFF        ; go turn off interrupt
004B64  1               
004B64  1  49 A1                EOR     #TK_CLEAR       ; compare with token for CLEAR, A = $00 if = TK_CLEAR
004B66  1  F0 0E                BEQ     LAB_INEX        ; go clear interrupt flags and return
004B68  1               
004B68  1  4C C7 32             JMP     LAB_SNER        ; do syntax error then warm start
004B6B  1               
004B6B  1               LAB_IOFF:
004B6B  1  A9 7F                LDA     #$7F            ; clear A
004B6D  1  35 00                AND     <PLUS_0,X       ; AND with interrupt setup flag
004B6F  1  10 05                BPL     LAB_INEX        ; go clear interrupt enabled flag and return
004B71  1               
004B71  1               LAB_INON:
004B71  1  B5 00                LDA     <PLUS_0,X       ; get interrupt setup flag
004B73  1  0A                   ASL     A               ; Shift bit to enabled flag
004B74  1  15 00                ORA     <PLUS_0,X       ; OR with flag byte
004B76  1               LAB_INEX:
004B76  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004B78  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer and return
004B7C  1  60                   RTS
004B7D  1               ; these routines set up the pointers and flags for the interrupt routines
004B7D  1               ; note that the interrupts are also enabled by these commands
004B7D  1               
004B7D  1               
004B7D  1               ; MAX() MIN() pre process
004B7D  1               
004B7D  1               LAB_MMPP:
004B7D  1  20 A9 31             JSR     LAB_EVEZ        ; process expression
004B80  1  4C 90 31             JMP     LAB_CTNM        ; check if source is numeric, else do type mismatch
004B83  1               
004B83  1               ; perform MAX()
004B83  1               
004B83  1               LAB_MAX:
004B83  1  20 B3 4B             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004B86  1               ; pull FAC2 and compare with FAC1
004B86  1  10 FB                BPL     LAB_MAX         ; branch if no swap to do
004B88  1               
004B88  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004B8A  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004B8C  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004B8E  1  20 0B 40             JSR     LAB_279B        ; copy FAC2 to FAC1
004B91  1  F0 F0                BEQ     LAB_MAX         ; go do next (branch always)
004B93  1               
004B93  1               ; perform MIN()
004B93  1               
004B93  1               LAB_MIN:
004B93  1  20 B3 4B             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004B96  1               ; pull FAC2 and compare with FAC1
004B96  1  30 FB                BMI     LAB_MIN         ; branch if no swap to do
004B98  1               
004B98  1  F0 F9                BEQ     LAB_MIN         ; branch if no swap to do
004B9A  1               
004B9A  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004B9C  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004B9E  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004BA0  1  20 0B 40             JSR     LAB_279B        ; copy FAC2 to FAC1
004BA3  1  F0 EE                BEQ     LAB_MIN         ; go do next (branch always)
004BA5  1               
004BA5  1               ; exit routine. don't bother returning to the loop code
004BA5  1               ; check for correct exit, else so syntax error
004BA5  1               
004BA5  1               LAB_MMEC:
004BA5  1  C9 29                CMP     #')'            ; is it end of function?
004BA7  1  D0 07                BNE     LAB_MMSE        ; if not do MAX MIN syntax error
004BA9  1               
004BA9  1  68                   PLA                     ; dump return address low byte
004BAA  1  68                   PLA                     ; dump return address high byte
004BAB  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to chr past ")")
004BAF  1  60                   RTS
004BB0  1               LAB_MMSE:
004BB0  1  4C C7 32             JMP     LAB_SNER        ; do syntax error then warm start
004BB3  1               
004BB3  1               ; check for next, evaluate and return or exit
004BB3  1               ; this is the routine that does most of the work
004BB3  1               
004BB3  1               LAB_PHFA:
004BB3  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
004BB7  1  C9 2C                CMP     #','            ; is there more ?
004BB9  1  D0 EA                BNE     LAB_MMEC        ; if not go do end check
004BBB  1               
004BBB  1               ; push FAC1
004BBB  1  20 17 44             JSR     LAB_27BA        ; round FAC1
004BBE  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004BC0  1  09 7F                ORA     #$7F            ; set all non sign bits
004BC2  1  25 AD                AND     <FAC1_1         ; AND FAC1 mantissa1 (AND in sign bit)
004BC4  1  48                   PHA                     ; push on stack
004BC5  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004BC7  1  48                   PHA                     ; push on stack
004BC8  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004BCA  1  48                   PHA                     ; push on stack
004BCB  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004BCD  1  48                   PHA                     ; push on stack
004BCE  1               
004BCE  1  22 BC 00 00          JSL     LAB_IGBY        ; scan and get next BASIC byte (after ",")
004BD2  1  20 8D 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
004BD5  1               ; else do type mismatch
004BD5  1               
004BD5  1               ; pop FAC2 (MAX/MIN expression so far)
004BD5  1  68                   PLA                     ; pop exponent
004BD6  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
004BD8  1  68                   PLA                     ; pop mantissa3
004BD9  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004BDB  1  68                   PLA                     ; pop mantissa1
004BDC  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
004BDE  1  68                   PLA                     ; pop sign/mantissa1
004BDF  1  85 B4                STA     <FAC2_1         ; save FAC2 sign/mantissa1
004BE1  1  85 B7                STA     <FAC2_s         ; save FAC2 sign
004BE3  1               
004BE3  1               ; compare FAC1 with (packed) FAC2
004BE3  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
004BE5  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
004BE7  1  4C 55 44             JMP     LAB_27F8        ; compare FAC1 with FAC2 (AY) and return
004BEA  1               ; returns A=$00 if FAC1 = (AY)
004BEA  1               ; returns A=$01 if FAC1 > (AY)
004BEA  1               ; returns A=$FF if FAC1 < (AY)
004BEA  1               
004BEA  1               ; perform WIDTH
004BEA  1               
004BEA  1               LAB_WDTH:
004BEA  1  C9 2C                CMP     #','            ; is next byte ","
004BEC  1  F0 1C                BEQ     LAB_TBSZ        ; if so do tab size
004BEE  1               
004BEE  1  20 3D 3E             JSR     LAB_GTBY        ; get byte parameter
004BF1  1  8A                   TXA                     ; copy width to A
004BF2  1  F0 0A                BEQ     LAB_NSTT        ; branch if set for infinite line
004BF4  1               
004BF4  1  E0 10                CPX     #$10            ; else make min width = 16d
004BF6  1  90 46                BCC     TabErr          ; if less do function call error and exit
004BF8  1               
004BF8  1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
004BF8  1               ; tab size greater than the line length.
004BF8  1               
004BF8  1  E4 64                CPX     <TabSiz         ; compare with tab size
004BFA  1  B0 02                BCS     LAB_NSTT        ; branch if >= tab size
004BFC  1               
004BFC  1  86 64                STX     <TabSiz         ; else make tab size = terminal width
004BFE  1               LAB_NSTT:
004BFE  1  86 0F                STX     <TWidth         ; set the terminal width
004C00  1  22 C2 00 00          JSL     LAB_GBYT        ; get BASIC byte back
004C04  1  F0 1A                BEQ     WExit           ; exit if no following
004C06  1               
004C06  1  C9 2C                CMP     #','            ; else is it ","
004C08  1  D0 A6                BNE     LAB_MMSE        ; if not do syntax error
004C0A  1               
004C0A  1               LAB_TBSZ:
004C0A  1  20 39 3E             JSR     LAB_SGBY        ; scan and get byte parameter
004C0D  1  8A                   TXA                     ; copy TAB size
004C0E  1  30 2E                BMI     TabErr          ; if >127 do function call error and exit
004C10  1               
004C10  1  E0 01                CPX     #$01            ; compare with min-1
004C12  1  90 2A                BCC     TabErr          ; if <=1 do function call error and exit
004C14  1               
004C14  1  A5 0F                LDA     <TWidth         ; set flags for width
004C16  1  F0 06                BEQ     LAB_SVTB        ; skip check if infinite line
004C18  1               
004C18  1  E4 0F                CPX     <TWidth         ; compare TAB with width
004C1A  1  F0 02                BEQ     LAB_SVTB        ; ok if =
004C1C  1               
004C1C  1  B0 20                BCS     TabErr          ; branch if too big
004C1E  1               
004C1E  1               LAB_SVTB:
004C1E  1  86 64                STX     <TabSiz         ; save TAB size
004C20  1               
004C20  1               ; calculate tab column limit from TAB size. The <Iclim is set to the last tab
004C20  1               ; position on a line that still has at least one whole tab width between it
004C20  1               ; and the end of the line.
004C20  1               
004C20  1               WExit:
004C20  1  A5 0F                LDA     <TWidth         ; get width
004C22  1  F0 06                BEQ     LAB_SULP        ; branch if infinite line
004C24  1               
004C24  1  C5 64                CMP     <TabSiz         ; compare with tab size
004C26  1  B0 03                BCS     LAB_WDLP        ; branch if >= tab size
004C28  1               
004C28  1  85 64                STA     <TabSiz         ; else make tab size = terminal width
004C2A  1               LAB_SULP:
004C2A  1  38                   SEC                     ; set carry for subtract
004C2B  1               LAB_WDLP:
004C2B  1  E5 64                SBC     <TabSiz         ; subtract tab size
004C2D  1  B0 FC                BCS     LAB_WDLP        ; loop while no borrow
004C2F  1               
004C2F  1  65 64                ADC     <TabSiz         ; add tab size back
004C31  1  18                   CLC                     ; clear carry for add
004C32  1  65 64                ADC     <TabSiz         ; add tab size back again
004C34  1  85 10                STA     <Iclim          ; save for now
004C36  1  A5 0F                LDA     <TWidth         ; get width back
004C38  1  38                   SEC                     ; set carry for subtract
004C39  1  E5 10                SBC     <Iclim          ; subtract remainder
004C3B  1  85 10                STA     <Iclim          ; save tab column limit
004C3D  1               LAB_NOSQ:
004C3D  1  60                   RTS
004C3E  1               
004C3E  1               TabErr:
004C3E  1  4C 26 36             JMP     LAB_FCER        ; do function call error then warm start
004C41  1               
004C41  1               ; perform SQR()
004C41  1               
004C41  1               LAB_SQR:
004C41  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004C43  1  30 F9                BMI     TabErr          ; if -ve do function call error
004C45  1               
004C45  1  A5 AC                LDA     <FAC1_e         ; get exponent
004C47  1  F0 F4                BEQ     LAB_NOSQ        ; if zero just return
004C49  1               
004C49  1               ; else do root
004C49  1  20 08 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004C4C  1  A9 00                LDA     #$00            ; clear A
004C4E  1               
004C4E  1  85 77                STA     <FACt_3         ; clear remainder
004C50  1  85 76                STA     <FACt_2         ; ..
004C52  1  85 75                STA     <FACt_1         ; ..
004C54  1  85 78                STA     <TempB          ; ..
004C56  1               
004C56  1  85 AF                STA     <FAC1_3         ; clear root
004C58  1  85 AE                STA     <FAC1_2         ; ..
004C5A  1  85 AD                STA     <FAC1_1         ; ..
004C5C  1               
004C5C  1  A2 18                LDX     #$18            ; 24 pairs of bits to do
004C5E  1  A5 B3                LDA     <FAC2_e         ; get exponent
004C60  1  4A                   LSR     A               ; check odd/even
004C61  1  B0 0E                BCS     LAB_SQE2        ; if odd only 1 shift first time
004C63  1               
004C63  1               LAB_SQE1:
004C63  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004C65  1  26 B5                ROL     <FAC2_2         ; ..
004C67  1  26 B4                ROL     <FAC2_1         ; ..
004C69  1  26 77                ROL     <FACt_3         ; .. into remainder
004C6B  1  26 76                ROL     <FACt_2         ; ..
004C6D  1  26 75                ROL     <FACt_1         ; ..
004C6F  1  26 78                ROL     <TempB          ; .. never overflows
004C71  1               LAB_SQE2:
004C71  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004C73  1  26 B5                ROL     <FAC2_2         ; ..
004C75  1  26 B4                ROL     <FAC2_1         ; ..
004C77  1  26 77                ROL     <FACt_3         ; .. into remainder
004C79  1  26 76                ROL     <FACt_2         ; ..
004C7B  1  26 75                ROL     <FACt_1         ; ..
004C7D  1  26 78                ROL     <TempB          ; .. never overflows
004C7F  1               
004C7F  1  06 AF                ASL     <FAC1_3         ; root = root * 2
004C81  1  26 AE                ROL     <FAC1_2         ; ..
004C83  1  26 AD                ROL     <FAC1_1         ; .. never overflows
004C85  1               
004C85  1  A5 AF                LDA     <FAC1_3         ; get root low byte
004C87  1  2A                   ROL     A               ; *2
004C88  1  85 5B                STA     <Temp3          ; save partial low byte
004C8A  1  A5 AE                LDA     <FAC1_2         ; get root low mid byte
004C8C  1  2A                   ROL     A               ; *2
004C8D  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004C8F  1  A5 AD                LDA     <FAC1_1         ; get root high mid byte
004C91  1  2A                   ROL     A               ; *2
004C92  1  85 5D                STA     <Temp3+2        ; save partial high mid byte
004C94  1  A9 00                LDA     #$00            ; get root high byte (always $00)
004C96  1  2A                   ROL     A               ; *2
004C97  1  85 5E                STA     <Temp3+3        ; save partial high byte
004C99  1               
004C99  1               ; carry clear for subtract +1
004C99  1  A5 77                LDA     <FACt_3         ; get remainder low byte
004C9B  1  E5 5B                SBC     <Temp3          ; subtract partial low byte
004C9D  1  85 5B                STA     <Temp3          ; save partial low byte
004C9F  1               
004C9F  1  A5 76                LDA     <FACt_2         ; get remainder low mid byte
004CA1  1  E5 5C                SBC     <Temp3+1        ; subtract partial low mid byte
004CA3  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004CA5  1               
004CA5  1  A5 75                LDA     <FACt_1         ; get remainder high mid byte
004CA7  1  E5 5D                SBC     <Temp3+2        ; subtract partial high mid byte
004CA9  1  A8                   TAY                     ; copy partial high mid byte
004CAA  1               
004CAA  1  A5 78                LDA     <TempB          ; get remainder high byte
004CAC  1  E5 5E                SBC     <Temp3+3        ; subtract partial high byte
004CAE  1  90 0E                BCC     LAB_SQNS        ; skip sub if remainder smaller
004CB0  1               
004CB0  1  85 78                STA     <TempB          ; save remainder high byte
004CB2  1               
004CB2  1  84 75                STY     <FACt_1         ; save remainder high mid byte
004CB4  1               
004CB4  1  A5 5C                LDA     <Temp3+1        ; get remainder low mid byte
004CB6  1  85 76                STA     <FACt_2         ; save remainder low mid byte
004CB8  1               
004CB8  1  A5 5B                LDA     <Temp3          ; get partial low byte
004CBA  1  85 77                STA     <FACt_3         ; save remainder low byte
004CBC  1               
004CBC  1  E6 AF                INC     <FAC1_3         ; increment root low byte (never any rollover)
004CBE  1               LAB_SQNS:
004CBE  1  CA                   DEX                     ; decrement bit pair count
004CBF  1  D0 A2                BNE     LAB_SQE1        ; loop if not all done
004CC1  1               LAB_SQNSA:
004CC1  1  38                   SEC                     ; set carry for subtract
004CC2  1  A5 B3                LDA     <FAC2_e         ; get exponent
004CC4  1  E9 80                SBC     #$80            ; normalise
004CC6  1  6A                   ROR     A               ; /2 and re-bias to $80
004CC7  1  69 00                ADC     #$00            ; add bit zero back in (allow for half shift)
004CC9  1  85 AC                STA     <FAC1_e         ; save it
004CCB  1  4C 82 40             JMP     LAB_24D5        ; normalise FAC1 and return
004CCE  1               
004CCE  1               ; perform VARPTR()
004CCE  1               
004CCE  1               LAB_VARPTR:
004CCE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004CD2  1  20 9E 34             JSR     LAB_GVAR        ; get var address
004CD5  1  20 B2 32             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
004CD8  1  A4 95                LDY     <Cvaral         ; get var address low byte
004CDA  1  A5 96                LDA     <Cvarah         ; get var address high byte
004CDC  1  4C 5C 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
004CDF  1               
004CDF  1               ; perform PI
004CDF  1               
004CDF  1               LAB_PI:
004CDF  1  A9 2A                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
004CE1  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
004CE3  1  20 1B 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004CE6  1  C6 AC                DEC     <FAC1_e         ; make result = PI
004CE8  1  60                   RTS
004CE9  1               
004CE9  1               
004CE9  1               
004CE9  1               
004CE9  1               
004CE9  1               AA_end_basic:
004CE9  1               ENDOFBASIC:
004CE9  1  44 45 52 49          .BYTE   "DERIVED FROM ehBASIC"
004CED  1  56 45 44 20  
004CF1  1  46 52 4F 4D  
004CFD  1               
004CFD  1               
004CFD  1               
004CFD  1               
004CFD  1                       .END

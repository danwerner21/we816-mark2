ca65 V2.18 - Ubuntu 2.19-1
Main file   : dbasic816.asm
Current file: dbasic816.asm

000000r 1               .P816
000000r 1               .A8
000000r 1               .I8
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.23
000000r 1               ; THIS WORK IS DERIVED FROM ehBASIC BY LEE DAVIDSON
000000r 1               ;
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixedf
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 1               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 1               ; 2.22	fixed RND() breaking the get byte routine
000000r 1               ; 2.30  CONVERT TO 65816 ADDRESS SPACE
000000r 1               
000000r 1               
000000r 1               
000000r 1                       .SEGMENT "HIGHMEM"
000000r 1               ;.ORG    0FF1000H
000000r 1                       .ORG    1000H
001000  1               BASICORG:
001000  1  4C CC 22             JMP     BASICBEGIN
001003  1               ;____________________________________________________________________________________________
001003  1               ;
001003  1               ; MACROS
001003  1               
001003  1                       .INCLUDE "macros.asm"
001003  2               ;___________________________________________________________________________________________________
001003  2               ;
001003  2               ;	USEFUL 65186 MACROS
001003  2               ;__________________________________________________________________________________________________
001003  2               
001003  2               .macro       STORECONTEXT             ; Store Complete Context at the beginning of a Sub
001003  2                       PHX
001003  2                       phy
001003  2                       pha
001003  2                       php
001003  2               .endmacro
001003  2               
001003  2               .macro       RESTORECONTEXT                 ; Restore Complete Context at the end of a Sub
001003  2                       plp
001003  2                       pla
001003  2                       ply
001003  2                       plx
001003  2               .endmacro
001003  2               
001003  2               .macro       INDEX16                         ; Set 16bit Index Registers
001003  2               		REP #$10 		; 16 bit Index registers
001003  2               		.I16
001003  2               .endmacro
001003  2               .macro       INDEX8                          ; Set 8bit Index Registers
001003  2               		SEP #$10 		; 8 bit Index registers
001003  2               		.I8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR16                  ; Set 16bit Index Registers
001003  2               		REP #$20 		; 16 bit Index registers
001003  2               		.A16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR8                   ; Set 8bit Index Registers
001003  2               		SEP #$20 		; 8 bit Index registers
001003  2               		.A8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX16             ; Set 16bit Index Registers
001003  2               		REP #$30 		; 16 bit Index registers
001003  2               		.A16
001003  2                               .I16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX8              ; Set 8bit Index Registers
001003  2               		SEP #$30 		; 8 bit Index registers
001003  2               		.A8
001003  2                               .I8
001003  2               .endmacro
001003  2               
001003  2               .macro       LDAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               	LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLB
001003  2                   LDA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       STAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   PHA
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLA
001003  2                   PLX
001003  2               	STA	(<PARM1),Y		;
001003  2               	PLB
001003  2                   STA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       SETBANK PARM1
001003  2                   PHX
001003  2               	LDX #PARM1
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               .endmacro
001003  2               
001003  2               
001003  2               .macro       FETCHINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2               .endmacro
001003  2               
001003  2               .macro       CMPINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CMP	<TMPFLG		    ;
001003  2               .endmacro
001003  2               
001003  2               .macro       ADCINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CLC
001003  2                   ADC	<TMPFLG 		;
001003  2               .endmacro
001003  2               
001003  2               .macro       LBEQ PARM1
001003  2                    bne *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBNE PARM1
001003  2                    beq *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCC PARM1
001003  2                    bcc *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCS PARM1
001003  2                    bcs *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  1               
001003  1               ; ZERO PAGE DEFINITIONS
001003  1                       .INCLUDE "zeropage.asm"
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; ZERO PAGE DEFINITIONS
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_WARM        = $00           ; BASIC warm start entry point
001003  2               Wrmjpl          = LAB_WARM+1    ; BASIC warm start vector jump low byte
001003  2               Wrmjph          = LAB_WARM+2    ; BASIC warm start vector jump high byte
001003  2               TMPFLG          = $04
001003  2               VIDEOMODE       = $06
001003  2               LOCALWORK       = $07           ; word (2 bytes)
001003  2               Usrjmp          = $0A           ; USR function JMP address
001003  2               Usrjpl          = <Usrjmp+1     ; USR function JMP vector low byte
001003  2               Usrjph          = <Usrjmp+2     ; USR function JMP vector high byte
001003  2               Nullct          = $0D           ; nulls output after each line
001003  2               TPos            = $0E           ; BASIC terminal position byte
001003  2               TWidth          = $0F           ; BASIC terminal width byte
001003  2               Iclim           = $10           ; input column limit
001003  2               Itempl          = $11           ; temporary integer low byte
001003  2               Itemph          = <Itempl+1     ; temporary integer high byte
001003  2               
001003  2               nums_1          = <Itempl       ; number to bin/hex string convert MSB
001003  2               nums_2          = <nums_1+1     ; number to bin/hex string convert
001003  2               nums_3          = <nums_1+2     ; number to bin/hex string convert LSB
001003  2               
001003  2               Srchc           = $5B           ; search character
001003  2               Temp3           = <Srchc        ; temp byte used in number routines
001003  2               Scnquo          = $5C           ; scan-between-quotes flag
001003  2               Asrch           = <Scnquo       ; alt search character
001003  2               
001003  2               XOAw_l          = <Srchc        ; eXclusive OR, OR and AND word low byte
001003  2               XOAw_h          = <Scnquo       ; eXclusive OR, OR and AND word high byte
001003  2               
001003  2               Ibptr           = $5D           ; input buffer pointer
001003  2               Dimcnt          = <Ibptr        ; # of dimensions
001003  2               Tindx           = <Ibptr        ; token index
001003  2               
001003  2               Defdim          = $5E           ; default DIM flag
001003  2               Dtypef          = $5F           ; data type flag, $FF=string, $00=numeric
001003  2               Oquote          = $60           ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
001003  2               Gclctd          = $60           ; garbage collected flag
001003  2               Sufnxf          = $61           ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
001003  2               Imode           = $62           ; input mode flag, $00=INPUT, $80=READ
001003  2               Cflag           = $63           ; comparison evaluation flag
001003  2               
001003  2               TabSiz          = $64           ; TAB step size (was input flag)
001003  2               
001003  2               next_s          = $65           ; next descriptor stack address
001003  2               ; these two bytes form a word pointer to the item
001003  2               ; currently on top of the descriptor stack
001003  2               last_sl         = $66           ; last descriptor stack address low byte
001003  2               last_sh         = $67           ; last descriptor stack address high byte (always $00)
001003  2               
001003  2               des_sk          = $68           ; descriptor stack start address (temp strings)
001003  2               
001003  2               ;			= $70		; End of descriptor stack
001003  2               
001003  2               ut1_pl          = $71           ; utility pointer 1 low byte
001003  2               ut1_ph          = <ut1_pl+1     ; utility pointer 1 high byte
001003  2               ut2_pl          = $73           ; utility pointer 2 low byte
001003  2               ut2_ph          = <ut2_pl+1     ; utility pointer 2 high byte
001003  2               
001003  2               Temp_2          = <ut1_pl       ; temp byte for block move
001003  2               
001003  2               FACt_1          = $75           ; FAC temp mantissa1
001003  2               FACt_2          = <FACt_1+1     ; FAC temp mantissa2
001003  2               FACt_3          = <FACt_2+1     ; FAC temp mantissa3
001003  2               
001003  2               dims_l          = <FACt_2       ; array dimension size low byte
001003  2               dims_h          = <FACt_3       ; array dimension size high byte
001003  2               
001003  2               TempB           = $78           ; temp page 0 byte
001003  2               
001003  2               Smeml           = $79           ; start of mem low byte		(Start-of-Basic)
001003  2               Smemh           = <Smeml+1      ; start of mem high byte	(Start-of-Basic)
001003  2               Svarl           = $7B           ; start of vars low byte	(Start-of-Variables)
001003  2               Svarh           = <Svarl+1      ; start of vars high byte	(Start-of-Variables)
001003  2               Sarryl          = $7D           ; var mem end low byte		(Start-of-Arrays)
001003  2               Sarryh          = <Sarryl+1     ; var mem end high byte		(Start-of-Arrays)
001003  2               Earryl          = $7F           ; array mem end low byte	(End-of-Arrays)
001003  2               Earryh          = <Earryl+1     ; array mem end high byte	(End-of-Arrays)
001003  2               Sstorl          = $81           ; string storage low byte	(String storage (moving down))
001003  2               Sstorh          = <Sstorl+1     ; string storage high byte	(String storage (moving down))
001003  2               Sutill          = $83           ; string utility ptr low byte
001003  2               Sutilh          = <Sutill+1     ; string utility ptr high byte
001003  2               Ememl           = $85           ; end of mem low byte		(Limit-of-memory)
001003  2               Ememh           = <Ememl+1      ; end of mem high byte		(Limit-of-memory)
001003  2               
001003  2               Clinel          = $87           ; current line low byte		(Basic line number)
001003  2               Clineh          = <Clinel+1     ; current line high byte	(Basic line number)
001003  2               Blinel          = $89           ; break line low byte		(Previous Basic line number)
001003  2               Blineh          = <Blinel+1     ; break line high byte		(Previous Basic line number)
001003  2               
001003  2               Cpntrl          = $8B           ; continue pointer low byte
001003  2               Cpntrh          = <Cpntrl+1     ; continue pointer high byte
001003  2               
001003  2               Dlinel          = $8D           ; current DATA line low byte
001003  2               Dlineh          = <Dlinel+1     ; current DATA line high byte
001003  2               
001003  2               Dptrl           = $8F           ; DATA pointer low byte
001003  2               Dptrh           = <Dptrl+1      ; DATA pointer high byte
001003  2               
001003  2               Rdptrl          = $91           ; read pointer low byte
001003  2               Rdptrh          = <Rdptrl+1     ; read pointer high byte
001003  2               
001003  2               Varnm1          = $93           ; current var name 1st byte
001003  2               Varnm2          = <Varnm1+1     ; current var name 2nd byte
001003  2               
001003  2               Cvaral          = $95           ; current var address low byte
001003  2               Cvarah          = <Cvaral+1     ; current var address high byte
001003  2               
001003  2               Frnxtl          = $97           ; var pointer for FOR/NEXT low byte
001003  2               Frnxth          = <Frnxtl+1     ; var pointer for FOR/NEXT high byte
001003  2               
001003  2               Tidx1           = <Frnxtl       ; temp line index
001003  2               
001003  2               Lvarpl          = <Frnxtl       ; let var pointer low byte
001003  2               Lvarph          = <Frnxth       ; let var pointer high byte
001003  2               
001003  2               prstk           = $99           ; precedence stacked flag
001003  2               
001003  2               comp_f          = $9B           ; compare function flag, bits 0,1 and 2 used
001003  2               ; bit 2 set if >
001003  2               ; bit 1 set if =
001003  2               ; bit 0 set if <
001003  2               
001003  2               func_l          = $9C           ; function pointer low byte
001003  2               func_h          = <func_l+1     ; function pointer high byte
001003  2               
001003  2               garb_l          = <func_l       ; garbage collection working pointer low byte
001003  2               garb_h          = <func_h       ; garbage collection working pointer high byte
001003  2               
001003  2               des_2l          = $9E           ; string descriptor_2 pointer low byte
001003  2               des_2h          = <des_2l+1     ; string descriptor_2 pointer high byte
001003  2               
001003  2               g_step          = $A0           ; garbage collect step size
001003  2               
001003  2               Fnxjmp          = $A1           ; jump vector for functions
001003  2               Fnxjpl          = <Fnxjmp+1     ; functions jump vector low byte
001003  2               Fnxjph          = <Fnxjmp+2     ; functions jump vector high byte
001003  2               
001003  2               g_indx          = <Fnxjpl       ; garbage collect temp index
001003  2               
001003  2               FAC2_r          = $A3           ; FAC2 rounding byte
001003  2               
001003  2               Adatal          = $A4           ; array data pointer low byte
001003  2               Adatah          = <Adatal+1     ; array data pointer high  byte
001003  2               
001003  2               Nbendl          = <Adatal       ; new block end pointer low byte
001003  2               Nbendh          = <Adatah       ; new block end pointer high  byte
001003  2               
001003  2               Obendl          = $A6           ; old block end pointer low byte
001003  2               Obendh          = <Obendl+1     ; old block end pointer high  byte
001003  2               
001003  2               numexp          = $A8           ; string to float number exponent count
001003  2               expcnt          = $A9           ; string to float exponent count
001003  2               
001003  2               numbit          = <numexp       ; bit count for array element calculations
001003  2               
001003  2               numdpf          = $AA           ; string to float decimal point flag
001003  2               expneg          = $AB           ; string to float eval exponent -ve flag
001003  2               
001003  2               Astrtl          = <numdpf       ; array start pointer low byte
001003  2               Astrth          = <expneg       ; array start pointer high  byte
001003  2               
001003  2               Histrl          = <numdpf       ; highest string low byte
001003  2               Histrh          = <expneg       ; highest string high  byte
001003  2               
001003  2               Baslnl          = <numdpf       ; BASIC search line pointer low byte
001003  2               Baslnh          = <expneg       ; BASIC search line pointer high  byte
001003  2               
001003  2               Fvar_l          = <numdpf       ; find/found variable pointer low byte
001003  2               Fvar_h          = <expneg       ; find/found variable pointer high  byte
001003  2               
001003  2               Ostrtl          = <numdpf       ; old block start pointer low byte
001003  2               Ostrth          = <expneg       ; old block start pointer high  byte
001003  2               
001003  2               Vrschl          = <numdpf       ; variable search pointer low byte
001003  2               Vrschh          = <expneg       ; variable search pointer high  byte
001003  2               
001003  2               FAC1_e          = $AC           ; FAC1 exponent
001003  2               FAC1_1          = <FAC1_e+1     ; FAC1 mantissa1
001003  2               FAC1_2          = <FAC1_e+2     ; FAC1 mantissa2
001003  2               FAC1_3          = <FAC1_e+3     ; FAC1 mantissa3
001003  2               FAC1_s          = <FAC1_e+4     ; FAC1 sign (b7)
001003  2               
001003  2               str_ln          = <FAC1_e       ; string length
001003  2               str_pl          = <FAC1_1       ; string pointer low byte
001003  2               str_ph          = <FAC1_2       ; string pointer high byte
001003  2               
001003  2               des_pl          = <FAC1_2       ; string descriptor pointer low byte
001003  2               des_ph          = <FAC1_3       ; string descriptor pointer high byte
001003  2               
001003  2               mids_l          = <FAC1_3       ; MID$ string temp length byte
001003  2               
001003  2               negnum          = $B1           ; string to float eval -ve flag
001003  2               numcon          = $B1           ; series evaluation constant count
001003  2               
001003  2               FAC1_o          = $B2           ; FAC1 overflow byte
001003  2               
001003  2               FAC2_e          = $B3           ; FAC2 exponent
001003  2               FAC2_1          = <FAC2_e+1     ; FAC2 mantissa1
001003  2               FAC2_2          = <FAC2_e+2     ; FAC2 mantissa2
001003  2               FAC2_3          = <FAC2_e+3     ; FAC2 mantissa3
001003  2               FAC2_s          = <FAC2_e+4     ; FAC2 sign (b7)
001003  2               
001003  2               FAC_sc          = $B8           ; FAC sign comparison, Acc#1 vs #2
001003  2               FAC1_r          = $B9           ; FAC1 rounding byte
001003  2               
001003  2               ssptr_l         = <FAC_sc       ; string start pointer low byte
001003  2               ssptr_h         = <FAC1_r       ; string start pointer high byte
001003  2               
001003  2               sdescr          = <FAC_sc       ; string descriptor pointer
001003  2               
001003  2               csidx           = $BA           ; line crunch save index
001003  2               Asptl           = <csidx        ; array size/pointer low byte
001003  2               Aspth           = $BB           ; array size/pointer high byte
001003  2               
001003  2               Btmpl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Btmph           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Cptrl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Cptrh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Sendl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Sendh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               LAB_IGBY        = $BC           ; get next BASIC byte subroutine
001003  2               
001003  2               LAB_GBYT        = $C2           ; get current BASIC byte subroutine
001003  2               Bpntrl          = $C3           ; BASIC execute (get byte) pointer low byte
001003  2               Bpntrh          = <Bpntrl+1     ; BASIC execute (get byte) pointer high byte
001003  2               Bpntrp          = <Bpntrl+2     ; BASIC execute (get byte) pointer PAGE byte
001003  2               
001003  2               ;			= $E0		; end of get BASIC char subroutine
001003  2               
001003  2               Rbyte4          = $E1           ; extra PRNG byte
001003  2               Rbyte1          = <Rbyte4+1     ; most significant PRNG byte
001003  2               Rbyte2          = <Rbyte4+2     ; middle PRNG byte
001003  2               Rbyte3          = <Rbyte4+3     ; least significant PRNG byte
001003  2               
001003  2               NmiBase         = $E5           ; NMI handler enabled/setup/triggered flags
001003  2               ; bit	function
001003  2               ; ===	========
001003  2               ; 7	interrupt enabled
001003  2               ; 6	interrupt setup
001003  2               ; 5	interrupt happened
001003  2               ;			= $E6		; NMI handler addr low byte
001003  2               ;			= $E7		; NMI handler addr high byte
001003  2               IrqBase         = $E8           ; IRQ handler enabled/setup/triggered flags
001003  2               ;			= $E9		; IRQ handler addr low byte
001003  2               ;			= $EA		; IRQ handler addr high byte
001003  2               FCBPTR          = $EB           ; POINTER TO FCB FOR FILE OPS
001003  2               
001003  2               Decss           = $EF           ; number to decimal string start
001003  2               Decssp1         = Decss+1       ; number to decimal string start
001003  2               
001003  2               TEMPW           = $FD
001003  2               ;			= $FF		; decimal string end
001003  2               
001003  2               
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; character get subroutine for zero page
001003  2               
001003  2               ; For a 1.8432MHz 6502 including the JSR and RTS
001003  2               ; fastest (>=":")	=  29 cycles =  15.7uS
001003  2               ; slowest (<":")	=  40 cycles =  21.7uS
001003  2               ; space skip	= +21 cycles = +11.4uS
001003  2               ; inc across page	=  +4 cycles =  +2.2uS
001003  2               
001003  2               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
001003  2               ; block is copied to it's destination, any non zero page address will do at assembly
001003  2               ; time, to assemble a three byte instruction.
001003  2               
001003  2               ; page 0 initialisation table from $BC
001003  2               ; increment and scan memory
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_2CEE:
001003  2  E6 C3                INC     <Bpntrl         ; increment BASIC execute pointer low byte
001005  2  D0 02                BNE     LAB_2CF4        ; branch if no carry
001007  2               ; else
001007  2  E6 C4                INC     <Bpntrh         ; increment BASIC execute pointer high byte
001009  2               
001009  2               ; page 0 initialisation table from $C2
001009  2               ; scan memory
001009  2               LAB_2CF4:
001009  2  AF FF FF FF          LDA     $FFFFFF         ; get byte to scan (addr set by call routine)
00100D  2  C9 BE                CMP     #TK_ELSE        ; compare with the token for ELSE
00100F  2  F0 0E                BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
001011  2               
001011  2  C9 3A                CMP     #':'            ; compare with ":"
001013  2  B0 0A                BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
001015  2               
001015  2  C9 20                CMP     #' '            ; compare with " "
001017  2  F0 EA                BEQ     LAB_2CEE        ; if " " go do next
001019  2               
001019  2  38                   SEC                     ; set carry for SBC
00101A  2  E9 30                SBC     #'0'            ; subtract "0"
00101C  2  38                   SEC                     ; set carry for SBC
00101D  2  E9 D0                SBC     #$D0            ; subtract -"0"
00101F  2               ; clear carry if byte = "0"-"9"
00101F  2               LAB_2D05:
00101F  2  6B                   RTL
001020  2               LAB_2CEE_END:
001020  2               ;____________________________________________________________________________________________
001020  2               ;
001020  2               ; page zero initialisation table $00-$12 inclusive
001020  2               ;____________________________________________________________________________________________
001020  2               
001020  2               StrTab:
001020  2  4C                   .BYTE   $4C             ; JMP opcode
001021  2  EC 22                .WORD   LAB_COLD        ; initial warm start vector (cold start)
001023  2               
001023  2  00                   .BYTE   $00             ; these bytes are not used by BASIC
001024  2  00 00                .WORD   $0000           ;
001026  2  00 00                .WORD   $0000           ;
001028  2  00 00                .WORD   $0000           ;
00102A  2               
00102A  2  4C                   .BYTE   $4C             ; JMP opcode
00102B  2  EF 33                .WORD   LAB_FCER        ; initial user function vector ("Function call" error)
00102D  2  00                   .BYTE   $00             ; default NULL count
00102E  2  00                   .BYTE   $00             ; clear terminal position
00102F  2  00                   .BYTE   $00             ; default terminal width byte
001030  2  F2                   .BYTE   $F2             ; default limit for TAB = 14
001031  2  00 22                .WORD   Ram_base        ; start of user RAM
001033  2               EndTab:
001033  2               
001033  2               ;  BASIC start-up code
001033  2               
001033  2               PG2_TABS:
001033  2  00                   .BYTE   $00             ; ctrl-c flag		-	$00 = enabled
001034  2  03                   .BYTE   $03             ; ctrl-c byte		-	GET needs this
001035  2  00                   .BYTE   $00             ; ctrl-c byte timeout	-	GET needs this
001036  2  9E 48                .WORD   CTRLC           ; ctrl c check vector
001038  2               PG2_TABE:
001038  2               
001038  1               
001038  1               ; BASIC TOKENS
001038  1                       .INCLUDE "tokens.asm"
001038  2               ; token values needed for BASIC
001038  2               
001038  2               ; primary command tokens (can start a statement)
001038  2               
001038  2               TK_END          = $80           ; END
001038  2               TK_FOR          = TK_END+1      ; FOR token
001038  2               TK_NEXT         = TK_FOR+1      ; NEXT token
001038  2               TK_DATA         = TK_NEXT+1     ; DATA token
001038  2               TK_DIRECTORY    = TK_DATA+1     ; DISKSTATUS token
001038  2               TK_DISKSTATUS   = TK_DIRECTORY+1; DIRECTORY token
001038  2               TK_INPUT        = TK_DISKSTATUS+1; INPUT token
001038  2               TK_DIM          = TK_INPUT+1    ; DIM token
001038  2               TK_READ         = TK_DIM+1      ; READ token
001038  2               TK_LET          = TK_READ+1     ; LET token
001038  2               TK_DEC          = TK_LET+1      ; DEC token
001038  2               TK_GOTO         = TK_DEC+1      ; GOTO token
001038  2               TK_RUN          = TK_GOTO+1     ; RUN token
001038  2               TK_IF           = TK_RUN+1      ; IF token
001038  2               TK_RESTORE      = TK_IF+1       ; RESTORE token
001038  2               TK_GOSUB        = TK_RESTORE+1  ; GOSUB token
001038  2               TK_RETURN       = TK_GOSUB+1    ; RETURN token
001038  2               TK_REM          = TK_RETURN+1   ; REM token
001038  2               TK_STOP         = TK_REM+1      ; STOP token
001038  2               TK_ON           = TK_STOP+1     ; ON token
001038  2               TK_NULL         = TK_ON+1       ; NULL token
001038  2               TK_INC          = TK_NULL+1     ; INC token
001038  2               TK_WAIT         = TK_INC+1      ; WAIT token
001038  2               TK_LOAD         = TK_WAIT+1     ; LOAD token
001038  2               TK_SAVE         = TK_LOAD+1     ; SAVE token
001038  2               TK_DEF          = TK_SAVE+1     ; DEF token
001038  2               TK_POKE         = TK_DEF+1      ; POKE token
001038  2               TK_CALL         = TK_POKE+1     ; CALL token
001038  2               TK_DO           = TK_CALL+1     ; DO token
001038  2               TK_LOOP         = TK_DO+1       ; LOOP token
001038  2               TK_PRINT        = TK_LOOP+1     ; PRINT token
001038  2               TK_CONT         = TK_PRINT+1    ; CONT token
001038  2               TK_LIST         = TK_CONT+1     ; LIST token
001038  2               TK_CLEAR        = TK_LIST+1     ; CLEAR token
001038  2               TK_NEW          = TK_CLEAR+1    ; NEW token
001038  2               TK_WIDTH        = TK_NEW+1      ; WIDTH token
001038  2               TK_GET          = TK_WIDTH+1    ; GET token
001038  2               TK_SWAP         = TK_GET+1      ; SWAP token
001038  2               TK_BITSET       = TK_SWAP+1     ; BITSET token
001038  2               TK_BITCLR       = TK_BITSET+1   ; BITCLR token
001038  2               TK_MONITOR      = TK_BITCLR+1   ; MONITOR token
001038  2               TK_OPEN         = TK_MONITOR+1  ; OPEN token
001038  2               TK_CLOSE        = TK_OPEN+1     ; CLOSE token
001038  2               TK_IECINPUT     = TK_CLOSE+1    ; IECINPUT token
001038  2               TK_IECOUTPUT    = TK_IECINPUT+1 ; IECOUTPUT token
001038  2               TK_PUTN         = TK_IECOUTPUT+1; PUTN token
001038  2               TK_GETN         = TK_PUTN+1     ; GETN token
001038  2               TK_DISKCMD      = TK_GETN+1     ; DISKCMD token
001038  2               TK_SCNCLR       = TK_DISKCMD+1  ;SCNCLR token
001038  2               TK_LOCATE       = TK_SCNCLR+1   ;LOCATE token
001038  2               TK_COLOR        = TK_LOCATE+1   ;COLOR token
001038  2               TK_SPOKE        = TK_COLOR+1    ;SPOKE token
001038  2               TK_SCREEN       = TK_SPOKE+1    ;SCREEN token
001038  2               TK_PLOT         = TK_SCREEN+1   ;PLOT token
001038  2               TK_PATTERN      = TK_PLOT+1     ;PATTERN token
001038  2               TK_SYS          = TK_PATTERN+1  ;SYS token
001038  2               TK_SOUND        = TK_SYS+1      ;SOUND token
001038  2               TK_NOISE        = TK_SOUND+1    ;NOISE token
001038  2               TK_TONE         = TK_NOISE+1    ;TONE token
001038  2               TK_VOLUME       = TK_TONE+1     ;VOLUME token
001038  2               TK_VOICE        = TK_VOLUME+1   ;VOICE token
001038  2               
001038  2               ; secondary command tokens, can't start a statement
001038  2               
001038  2               TK_TAB          = TK_VOICE+1    ; TAB token
001038  2               TK_ELSE         = TK_TAB+1      ; ELSE token
001038  2               TK_TO           = TK_ELSE+1     ; TO token
001038  2               TK_FN           = TK_TO+1       ; FN token
001038  2               TK_SPC          = TK_FN+1       ; SPC token
001038  2               TK_THEN         = TK_SPC+1      ; THEN token
001038  2               TK_NOT          = TK_THEN+1     ; NOT token
001038  2               TK_STEP         = TK_NOT+1      ; STEP token
001038  2               TK_UNTIL        = TK_STEP+1     ; UNTIL token
001038  2               TK_WHILE        = TK_UNTIL+1    ; WHILE token
001038  2               TK_OFF          = TK_WHILE+1    ; OFF token
001038  2               
001038  2               ; opperator tokens
001038  2               
001038  2               TK_PLUS         = TK_OFF+1      ; + token
001038  2               TK_MINUS        = TK_PLUS+1     ; - token
001038  2               TK_MUL          = TK_MINUS+1    ; * token
001038  2               TK_DIV          = TK_MUL+1      ; / token
001038  2               TK_POWER        = TK_DIV+1      ; ^ token
001038  2               TK_AND          = TK_POWER+1    ; AND token
001038  2               TK_EOR          = TK_AND+1      ; EOR token
001038  2               TK_OR           = TK_EOR+1      ; OR token
001038  2               TK_RSHIFT       = TK_OR+1       ; RSHIFT token
001038  2               TK_LSHIFT       = TK_RSHIFT+1   ; LSHIFT token
001038  2               TK_GT           = TK_LSHIFT+1   ; > token
001038  2               TK_EQUAL        = TK_GT+1       ; = token
001038  2               TK_LT           = TK_EQUAL+1    ; < token
001038  2               
001038  2               ; functions tokens
001038  2               
001038  2               TK_SGN          = TK_LT+1       ; SGN token
001038  2               TK_INT          = TK_SGN+1      ; INT token
001038  2               TK_ABS          = TK_INT+1      ; ABS token
001038  2               TK_USR          = TK_ABS+1      ; USR token
001038  2               TK_FRE          = TK_USR+1      ; FRE token
001038  2               TK_POS          = TK_FRE+1      ; POS token
001038  2               TK_SQR          = TK_POS+1      ; SQR token
001038  2               TK_RND          = TK_SQR+1      ; RND token
001038  2               TK_LOG          = TK_RND+1      ; LOG token
001038  2               TK_EXP          = TK_LOG+1      ; EXP token
001038  2               TK_COS          = TK_EXP+1      ; COS token
001038  2               TK_SIN          = TK_COS+1      ; SIN token
001038  2               TK_TAN          = TK_SIN+1      ; TAN token
001038  2               TK_ATN          = TK_TAN+1      ; ATN token
001038  2               TK_PEEK         = TK_ATN+1      ; PEEK token
001038  2               TK_SPEEK        = TK_PEEK+1     ;SPEEK token
001038  2               TK_SADD         = TK_SPEEK+1    ; SADD token
001038  2               TK_LEN          = TK_SADD+1     ; LEN token
001038  2               TK_STRS         = TK_LEN+1      ; STR$ token
001038  2               TK_VAL          = TK_STRS+1     ; VAL token
001038  2               TK_ASC          = TK_VAL+1      ; ASC token
001038  2               TK_UCASES       = TK_ASC+1      ; UCASE$ token
001038  2               TK_LCASES       = TK_UCASES+1   ; LCASE$ token
001038  2               TK_CHRS         = TK_LCASES+1   ; CHR$ token
001038  2               TK_HEXS         = TK_CHRS+1     ; HEX$ token
001038  2               TK_BINS         = TK_HEXS+1     ; BIN$ token
001038  2               TK_BITTST       = TK_BINS+1     ; BITTST token
001038  2               TK_MAX          = TK_BITTST+1   ; MAX token
001038  2               TK_MIN          = TK_MAX+1      ; MIN token
001038  2               TK_PI           = TK_MIN+1      ; PI token
001038  2               TK_IECST        = TK_PI+1       ; IECST token
001038  2               TK_VPTR         = TK_IECST+1    ; VARPTR token
001038  2               TK_LEFTS        = TK_VPTR+1     ; LEFT$ token
001038  2               TK_RIGHTS       = TK_LEFTS+1    ; RIGHT$ token
001038  2               TK_MIDS         = TK_RIGHTS+1   ; MID$ token
001038  2               TK_CON          = TK_MIDS+1     ; CON token
001038  2               
001038  2               
001038  2               
001038  2               
001038  2               LAB_CTBL:
001038  2  4A 28                .WORD   LAB_END-1       ; END
00103A  2  82 27                .WORD   LAB_FOR-1       ; FOR
00103C  2  D4 2E                .WORD   LAB_NEXT-1      ; NEXT
00103E  2  C2 29                .WORD   LAB_DATA-1      ; DATA
001040  2  37 1A                .WORD   V_DIR-1         ; DIRECTORY
001042  2  BC 19                .WORD   V_ERR-1         ; DISKSTATUS
001044  2  74 2D                .WORD   LAB_INPUT-1     ; INPUT
001046  2  1A 32                .WORD   LAB_DIM-1       ; DIM
001048  2  8D 2D                .WORD   LAB_READ-1      ; READ
00104A  2  E7 2A                .WORD   LAB_LET-1       ; LET
00104C  2  B7 2A                .WORD   LAB_DEC-1       ; DEC			new command
00104E  2  1C 29                .WORD   LAB_GOTO-1      ; GOTO
001050  2  D9 28                .WORD   LAB_RUN-1       ; RUN
001052  2  F0 29                .WORD   LAB_IF-1        ; IF
001054  2  71 28                .WORD   LAB_RESTORE-1   ; RESTORE		modified command
001056  2  FE 28                .WORD   LAB_GOSUB-1     ; GOSUB
001058  2  AD 29                .WORD   LAB_RETURN-1    ; RETURN
00105A  2  5B 2A                .WORD   LAB_REM-1       ; REM
00105C  2  48 28                .WORD   LAB_STOP-1      ; STOP
00105E  2  64 2A                .WORD   LAB_ON-1        ; ON			modified command
001060  2  AF 28                .WORD   LAB_NULL-1      ; NULL		modified command
001062  2  BA 2A                .WORD   LAB_INC-1       ; INC			new command
001064  2  84 3D                .WORD   LAB_WAIT-1      ; WAIT
001066  2  2A 19                .WORD   V_LOAD-1        ; LOAD
001068  2  98 18                .WORD   V_SAVE-1        ; SAVE
00106A  2  42 35                .WORD   LAB_DEF-1       ; DEF
00106C  2  D4 3C                .WORD   LAB_POKE-1      ; POKE
00106E  2  70 3D                .WORD   LAB_CALL-1      ; CALL		new command
001070  2  E3 28                .WORD   LAB_DO-1        ; DO			new command
001072  2  4E 29                .WORD   LAB_LOOP-1      ; LOOP		new command
001074  2  51 2C                .WORD   LAB_PRINT-1     ; PRINT
001076  2  B5 28                .WORD   LAB_CONT-1      ; CONT
001078  2  C2 26                .WORD   LAB_LIST-1      ; LIST
00107A  2  BF 26                .WORD   LAB_CLEAR-1     ; CLEAR
00107C  2  6F 26                .WORD   LAB_NEW-1       ; NEW
00107E  2  B2 49                .WORD   LAB_WDTH-1      ; WIDTH		new command
001080  2  0B 2C                .WORD   LAB_GET-1       ; GET			new command
001082  2  F8 3C                .WORD   LAB_SWAP-1      ; SWAP		new command
001084  2  35 47                .WORD   LAB_BITSET-1    ; BITSET		new command
001086  2  49 47                .WORD   LAB_BITCLR-1    ; BITCLR		new command
001088  2  B7 22                .WORD   LAB_MONITOR-1   ; MONITOR		MONITOR command
00108A  2  D2 1B                .WORD   V_OPEN-1        ; OPEN			OPEN command
00108C  2  55 1C                .WORD   V_CLOSE-1       ; CLOSE			CLOSE command
00108E  2  66 1C                .WORD   V_IECINPUT-1    ; IECINPUT		IECINPUT command
001090  2  7C 1C                .WORD   V_IECOUTPUT-1   ; IECOUTPUT		IECOUTPUT command
001092  2  92 1C                .WORD   V_PUTN-1        ; PUTN			PUTN command
001094  2  FE 1C                .WORD   V_GETN-1        ; GETN			GETN command
001096  2  0E 1B                .WORD   V_DISKCMD-1     ; DISKCMD		DISKCMD COMMAND
001098  2  4B 1D                .WORD   V_SCNCLR-1      ; SCNCLR		SCNCLR COMMAND
00109A  2  58 1D                .WORD   V_LOCATE-1      ; LOCATE		LOCATE COMMAND
00109C  2  70 1D                .WORD   V_COLOR-1       ; COLOR			COLOR COMMAND
00109E  2  A8 1D                .WORD   V_SPOKE-1       ; SPOKE			SPOKE COMMAND
0010A0  2  B7 1D                .WORD   V_SCREEN-1      ; SCREEN		SCREEN COMMAND
0010A2  2  2C 1F                .WORD   V_PLOT-1        ; PLOT			PLOT COMMAND
0010A4  2  2D 1F                .WORD   V_PATTERN-1     ; PATTERN		PATTERN COMMAND
0010A6  2  E5 3C                .WORD   LAB_SYS-1       ; SYS			SYS COMMAND
0010A8  2  2E 1F                .WORD   V_SOUND-1       ; SOUND			SOUND COMMAND
0010AA  2  85 1F                .WORD   V_NOISE-1       ; NOISE			NOISE COMMAND
0010AC  2  C4 1F                .WORD   V_TONE-1        ; TONE			TONE COMMAND
0010AE  2  4E 1F                .WORD   V_VOLUME-1      ; VOLUME		VOLUME COMMAND
0010B0  2  63 1F                .WORD   V_VOICE-1       ; VOICE			VOICE COMMAND
0010B2  2               ; function pre process routine table
0010B2  2               
0010B2  2               LAB_FTPL:
0010B2  2               LAB_FTPM        = LAB_FTPL+$01
0010B2  2  F2 30                .WORD   LAB_PPFN-1      ; SGN(n)	process numeric expression in ()
0010B4  2  F2 30                .WORD   LAB_PPFN-1      ; INT(n)		"
0010B6  2  F2 30                .WORD   LAB_PPFN-1      ; ABS(n)		"
0010B8  2  71 2F                .WORD   LAB_EVEZ-1      ; USR(x)	process any expression
0010BA  2  77 30                .WORD   LAB_1BF7-1      ; FRE(x)		"
0010BC  2  77 30                .WORD   LAB_1BF7-1      ; POS(x)		"
0010BE  2  F2 30                .WORD   LAB_PPFN-1      ; SQR(n)	process numeric expression in ()
0010C0  2  F2 30                .WORD   LAB_PPFN-1      ; RND(n)		"
0010C2  2  F2 30                .WORD   LAB_PPFN-1      ; LOG(n)		"
0010C4  2  F2 30                .WORD   LAB_PPFN-1      ; EXP(n)		"
0010C6  2  F2 30                .WORD   LAB_PPFN-1      ; COS(n)		"
0010C8  2  F2 30                .WORD   LAB_PPFN-1      ; SIN(n)		"
0010CA  2  F2 30                .WORD   LAB_PPFN-1      ; TAN(n)		"
0010CC  2  F2 30                .WORD   LAB_PPFN-1      ; ATN(n)		"
0010CE  2  F2 30                .WORD   LAB_PPFN-1      ; PEEK(n)		"
0010D0  2  F2 30                .WORD   LAB_PPFN-1      ; SPEEK(N)		"
0010D2  2  00 00                .WORD   $0000           ; SADD()	none
0010D4  2  EC 30                .WORD   LAB_PPFS-1      ; LEN($)	process string expression in ()
0010D6  2  F2 30                .WORD   LAB_PPFN-1      ; STR$(n)	process numeric expression in ()
0010D8  2  EC 30                .WORD   LAB_PPFS-1      ; VAL($)	process string expression in ()
0010DA  2  EC 30                .WORD   LAB_PPFS-1      ; ASC($)		"
0010DC  2  EC 30                .WORD   LAB_PPFS-1      ; UCASE$($)		"
0010DE  2  EC 30                .WORD   LAB_PPFS-1      ; LCASE$($)		"
0010E0  2  F2 30                .WORD   LAB_PPFN-1      ; CHR$(n)	process numeric expression in ()
0010E2  2  1B 31                .WORD   LAB_BHSS-1      ; HEX$(n)		"
0010E4  2  1B 31                .WORD   LAB_BHSS-1      ; BIN$(n)		"
0010E6  2  00 00                .WORD   $0000           ; BITTST()	none
0010E8  2  45 49                .WORD   LAB_MMPP-1      ; MAX()	process numeric expression
0010EA  2  45 49                .WORD   LAB_MMPP-1      ; MIN()		"
0010EC  2  F8 30                .WORD   LAB_PPBI-1      ; PI		advance pointer
0010EE  2  F7 1C                .WORD   LAB_PIECST-1    ; IECST		"
0010F0  2  00 00                .WORD   $0000           ; VARPTR()	none
0010F2  2  FF 30                .WORD   LAB_LRMS-1      ; LEFT$()	process string expression
0010F4  2  FF 30                .WORD   LAB_LRMS-1      ; RIGHT$()		"
0010F6  2  FF 30                .WORD   LAB_LRMS-1      ; MID$()		"
0010F8  2  F2 30                .WORD   LAB_PPFN-1      ; CON()		"
0010FA  2               
0010FA  2               ; action addresses for functions
0010FA  2               
0010FA  2               LAB_FTBL:
0010FA  2               LAB_FTBM        = LAB_FTBL+$01
0010FA  2  FD 41                .WORD   LAB_SGN-1       ; SGN()
0010FC  2  EB 42                .WORD   LAB_INT-1       ; INT()
0010FE  2  1A 42                .WORD   LAB_ABS-1       ; ABS()
001100  2  00 47                .WORD   LAB_USR-1       ; USR()
001102  2  10 35                .WORD   LAB_FRE-1       ; FRE()
001104  2  2F 35                .WORD   LAB_POS-1       ; POS()
001106  2  09 4A                .WORD   LAB_SQR-1       ; SQR()
001108  2  50 46                .WORD   LAB_RND-1       ; RND()		modified function
00110A  2  11 3F                .WORD   LAB_LOG-1       ; LOG()
00110C  2  9E 45                .WORD   LAB_EXP-1       ; EXP()
00110E  2  84 46                .WORD   LAB_COS-1       ; COS()
001110  2  8B 46                .WORD   LAB_SIN-1       ; SIN()
001112  2  D4 46                .WORD   LAB_TAN-1       ; TAN()
001114  2  06 47                .WORD   LAB_ATN-1       ; ATN()
001116  2  C1 3C                .WORD   LAB_PEEK-1      ; PEEK()
001118  2  97 1D                .WORD   V_SPEEK-1       ; SPEEK()
00111A  2  90 3B                .WORD   LAB_SADD-1      ; SADD()		new function
00111C  2  D2 3B                .WORD   LAB_LENS-1      ; LEN()
00111E  2  81 36                .WORD   LAB_STRS-1      ; STR$()
001120  2  16 3C                .WORD   LAB_VAL-1       ; VAL()
001122  2  DD 3B                .WORD   LAB_ASC-1       ; ASC()
001124  2  46 3B                .WORD   LAB_UCASE-1     ; UCASE$()		new function
001126  2  FA 3A                .WORD   LAB_LCASE-1     ; LCASE$()		new function
001128  2  FE 39                .WORD   LAB_CHRS-1      ; CHR$()
00112A  2  02 48                .WORD   LAB_HEXS-1      ; HEX$()		new function
00112C  2  8A 47                .WORD   LAB_BINS-1      ; BIN$()		new function
00112E  2  5F 47                .WORD   LAB_BTST-1      ; BITTST()		new function
001130  2  4B 49                .WORD   LAB_MAX-1       ; MAX()		new function
001132  2  5B 49                .WORD   LAB_MIN-1       ; MIN()		new function
001134  2  A7 4A                .WORD   LAB_PI-1        ; PI			new function
001136  2  EA 1C                .WORD   LAB_IECST-1     ; IECST		new function
001138  2  96 4A                .WORD   LAB_VARPTR-1    ; VARPTR()		new function
00113A  2  24 3A                .WORD   LAB_LEFT-1      ; LEFT$()
00113C  2  43 3A                .WORD   LAB_RIGHT-1     ; RIGHT$()
00113E  2  9C 3A                .WORD   LAB_MIDS-1      ; MID$()
001140  2  F2 1F                .WORD   LAB_CON-1       ; CON()
001142  2               
001142  2               ; hierarchy and action addresses for operator
001142  2               
001142  2               LAB_OPPT:
001142  2  79                   .BYTE   $79             ; +
001143  2  D1 3D                .WORD   LAB_ADD-1
001145  2  79                   .BYTE   $79             ; -
001146  2  B6 3D                .WORD   LAB_SUBTRACT-1
001148  2  7B                   .BYTE   $7B             ; *
001149  2  52 3F                .WORD   LAB_MULTIPLY-1
00114B  2  7B                   .BYTE   $7B             ; /
00114C  2  6A 40                .WORD   LAB_DIVIDE-1
00114E  2  7F                   .BYTE   $7F             ; ^
00114F  2  5A 45                .WORD   LAB_POWER-1
001151  2  50                   .BYTE   $50             ; AND
001152  2  66 31                .WORD   LAB_AND-1
001154  2  46                   .BYTE   $46             ; EOR			new operator
001155  2  4C 31                .WORD   LAB_EOR-1
001157  2  46                   .BYTE   $46             ; OR
001158  2  59 31                .WORD   LAB_OR-1
00115A  2  56                   .BYTE   $56             ; >>			new operator
00115B  2  3D 32                .WORD   LAB_RSHIFT-1
00115D  2  56                   .BYTE   $56             ; <<			new operator
00115E  2  25 32                .WORD   LAB_LSHIFT-1
001160  2  7D                   .BYTE   $7D             ; >
001161  2  93 45                .WORD   LAB_GTHAN-1
001163  2  5A                   .BYTE   $5A             ; =
001164  2  A4 30                .WORD   LAB_EQUAL-1
001166  2  64                   .BYTE   $64             ; <
001167  2  87 31                .WORD   LAB_LTHAN-1
001169  2               
001169  2               ; keywords start with ..
001169  2               ; this is the first character table and must be in alphabetic order
001169  2               
001169  2               TAB_1STC:
001169  2  2A                   .BYTE   "*"
00116A  2  2B                   .BYTE   "+"
00116B  2  2D                   .BYTE   "-"
00116C  2  2F                   .BYTE   "/"
00116D  2  3C                   .BYTE   "<"
00116E  2  3D                   .BYTE   "="
00116F  2  3E                   .BYTE   ">"
001170  2  3F                   .BYTE   "?"
001171  2  41                   .BYTE   "A"
001172  2  42                   .BYTE   "B"
001173  2  43                   .BYTE   "C"
001174  2  44                   .BYTE   "D"
001175  2  45                   .BYTE   "E"
001176  2  46                   .BYTE   "F"
001177  2  47                   .BYTE   "G"
001178  2  48                   .BYTE   "H"
001179  2  49                   .BYTE   "I"
00117A  2  4B                   .BYTE   "K"
00117B  2  4C                   .BYTE   "L"
00117C  2  4D                   .BYTE   "M"
00117D  2  4E                   .BYTE   "N"
00117E  2  4F                   .BYTE   "O"
00117F  2  50                   .BYTE   "P"
001180  2  52                   .BYTE   "R"
001181  2  53                   .BYTE   "S"
001182  2  54                   .BYTE   "T"
001183  2  55                   .BYTE   "U"
001184  2  56                   .BYTE   "V"
001185  2  57                   .BYTE   "W"
001186  2  5E                   .BYTE   "^"
001187  2  00                   .BYTE   $00             ; table terminator
001188  2               
001188  2               ; pointers to keyword tables
001188  2               
001188  2               TAB_CHRT:
001188  2  C4 11                .WORD   TAB_STAR        ; table for "*"
00118A  2  C6 11                .WORD   TAB_PLUS        ; table for "+"
00118C  2  C8 11                .WORD   TAB_MNUS        ; table for "-"
00118E  2  CA 11                .WORD   TAB_SLAS        ; table for "/"
001190  2  CC 11                .WORD   TAB_LESS        ; table for "<"
001192  2  D0 11                .WORD   TAB_EQUL        ; table for "="
001194  2  D2 11                .WORD   TAB_MORE        ; table for ">"
001196  2  D6 11                .WORD   TAB_QEST        ; table for "?"
001198  2  D8 11                .WORD   TAB_ASCA        ; table for "A"
00119A  2  E8 11                .WORD   TAB_ASCB        ; table for "B"
00119C  2  01 12                .WORD   TAB_ASCC        ; table for "C"
00119E  2  26 12                .WORD   TAB_ASCD        ; table for "D"
0011A0  2  50 12                .WORD   TAB_ASCE        ; table for "E"
0011A2  2  5F 12                .WORD   TAB_ASCF        ; table for "F"
0011A4  2  69 12                .WORD   TAB_ASCG        ; table for "G"
0011A6  2  7A 12                .WORD   TAB_ASCH        ; table for "H"
0011A8  2  80 12                .WORD   TAB_ASCI        ; table for "I"
0011AA  2  A5 12                .WORD   TAB_ASCK        ; table for "K"
0011AC  2  A5 12                .WORD   TAB_ASCL        ; table for "L"
0011AE  2  D0 12                .WORD   TAB_ASCM        ; table for "M"
0011B0  2  E5 12                .WORD   TAB_ASCN        ; table for "N"
0011B2  2  F9 12                .WORD   TAB_ASCO        ; table for "O"
0011B4  2  05 13                .WORD   TAB_ASCP        ; table for "P"
0011B6  2  29 13                .WORD   TAB_ASCR        ; table for "R"
0011B8  2  4C 13                .WORD   TAB_ASCS        ; table for "S"
0011BA  2  96 13                .WORD   TAB_ASCT        ; table for "T"
0011BC  2  A9 13                .WORD   TAB_ASCU        ; table for "U"
0011BE  2  BA 13                .WORD   TAB_ASCV        ; table for "V"
0011C0  2  D1 13                .WORD   TAB_ASCW        ; table for "W"
0011C2  2  E0 13                .WORD   TAB_POWR        ; table for "^"
0011C4  2               
0011C4  2               ; tables for each start character, note if a longer keyword with the same start
0011C4  2               ; letters as a shorter one exists then it must come first, else the list is in
0011C4  2               ; alphabetical order as follows ..
0011C4  2               
0011C4  2               ; [keyword,token
0011C4  2               ; [keyword,token]]
0011C4  2               ; end marker (#$00)
0011C4  2               
0011C4  2               TAB_STAR:
0011C4  2  CA 00                .BYTE   TK_MUL,$00      ; *
0011C6  2               TAB_PLUS:
0011C6  2  C8 00                .BYTE   TK_PLUS,$00     ; +
0011C8  2               TAB_MNUS:
0011C8  2  C9 00                .BYTE   TK_MINUS,$00    ; -
0011CA  2               TAB_SLAS:
0011CA  2  CB 00                .BYTE   TK_DIV,$00      ; /
0011CC  2               TAB_LESS:
0011CC  2               LBB_LSHIFT:
0011CC  2  3C D1                .BYTE   "<",TK_LSHIFT   ; <<	note - "<<" must come before "<"
0011CE  2  D4                   .BYTE   TK_LT           ; <
0011CF  2  00                   .BYTE   $00
0011D0  2               TAB_EQUL:
0011D0  2  D3 00                .BYTE   TK_EQUAL,$00    ; =
0011D2  2               TAB_MORE:
0011D2  2               LBB_RSHIFT:
0011D2  2  3E D0                .BYTE   ">",TK_RSHIFT   ; >>	note - ">>" must come before ">"
0011D4  2  D2                   .BYTE   TK_GT           ; >
0011D5  2  00                   .BYTE   $00
0011D6  2               TAB_QEST:
0011D6  2  9E 00                .BYTE   TK_PRINT,$00    ; ?
0011D8  2               TAB_ASCA:
0011D8  2               LBB_ABS:
0011D8  2  42 53 28 D7          .BYTE   "BS(",TK_ABS    ; ABS(
0011DC  2               LBB_AND:
0011DC  2  4E 44 CD             .BYTE   "ND",TK_AND     ; AND
0011DF  2               LBB_ASC:
0011DF  2  53 43 28 E9          .BYTE   "SC(",TK_ASC    ; ASC(
0011E3  2               LBB_ATN:
0011E3  2  54 4E 28 E2          .BYTE   "TN(",TK_ATN    ; ATN(
0011E7  2  00                   .BYTE   $00
0011E8  2               TAB_ASCB:
0011E8  2               LBB_BINS:
0011E8  2  49 4E 24 28          .BYTE   "IN$(",TK_BINS  ; BIN$(
0011EC  2  EE           
0011ED  2               LBB_BITCLR:
0011ED  2  49 54 43 4C          .BYTE   "ITCLR",TK_BITCLR; BITCLR
0011F1  2  52 A7        
0011F3  2               LBB_BITSET:
0011F3  2  49 54 53 45          .BYTE   "ITSET",TK_BITSET; BITSET
0011F7  2  54 A6        
0011F9  2               LBB_BITTST:
0011F9  2  49 54 54 53          .BYTE   "ITTST(",TK_BITTST
0011FD  2  54 28 EF     
001200  2               ; BITTST(
001200  2  00                   .BYTE   $00
001201  2               TAB_ASCC:
001201  2               LBB_CALL:
001201  2  41 4C 4C 9B          .BYTE   "ALL",TK_CALL   ; CALL
001205  2               LBB_CHRS:
001205  2  48 52 24 28          .BYTE   "HR$(",TK_CHRS  ; CHR$(
001209  2  EC           
00120A  2               LBB_CLEAR:
00120A  2  4C 45 41 52          .BYTE   "LEAR",TK_CLEAR ; CLEAR
00120E  2  A1           
00120F  2               LBB_CLOSE:
00120F  2  4C 4F 53 45          .BYTE   "LOSE",TK_CLOSE ; CLOSE
001213  2  AA           
001214  2               LBB_COLOR:
001214  2  4F 4C 4F 52          .BYTE   "OLOR",TK_COLOR ; COLOR
001218  2  B2           
001219  2               LBB_CON:
001219  2  4F 4E 28 F8          .BYTE   "ON(",TK_CON    ;CON
00121D  2               LBB_CONT:
00121D  2  4F 4E 54 9F          .BYTE   "ONT",TK_CONT   ; CONT
001221  2               LBB_COS:
001221  2  4F 53 28 DF          .BYTE   "OS(",TK_COS    ; COS(
001225  2  00                   .BYTE   $00
001226  2               TAB_ASCD:
001226  2               LBB_DATA:
001226  2  41 54 41 83          .BYTE   "ATA",TK_DATA   ; DATA
00122A  2               LBB_DEC:
00122A  2  45 43 8A             .BYTE   "EC",TK_DEC     ; DEC
00122D  2               LBB_DEF:
00122D  2  45 46 99             .BYTE   "EF",TK_DEF     ; DEF
001230  2               LBB_DIM:
001230  2  49 4D 87             .BYTE   "IM",TK_DIM     ; DIM
001233  2               LBB_DIRECTORY:
001233  2  49 52 45 43          .BYTE   "IRECTORY",TK_DIRECTORY; DIRECTORY
001237  2  54 4F 52 59  
00123B  2  84           
00123C  2               LBB_DISKCMD:
00123C  2  49 53 4B 43          .BYTE   "ISKCMD",TK_DISKCMD; DISKCMD
001240  2  4D 44 AF     
001243  2               LBB_DISKSTATUS:
001243  2  49 53 4B 53          .BYTE   "ISKSTATUS",TK_DISKSTATUS; DISKSTATUS
001247  2  54 41 54 55  
00124B  2  53 85        
00124D  2               LBB_DO:
00124D  2  4F 9C                .BYTE   "O",TK_DO       ; DO
00124F  2  00                   .BYTE   $00
001250  2               TAB_ASCE:
001250  2               LBB_ELSE:
001250  2  4C 53 45 BE          .BYTE   "LSE",TK_ELSE   ; ELSE
001254  2               LBB_END:
001254  2  4E 44 80             .BYTE   "ND",TK_END     ; END
001257  2               LBB_EOR:
001257  2  4F 52 CE             .BYTE   "OR",TK_EOR     ; EOR
00125A  2               LBB_EXP:
00125A  2  58 50 28 DE          .BYTE   "XP(",TK_EXP    ; EXP(
00125E  2  00                   .BYTE   $00
00125F  2               TAB_ASCF:
00125F  2               LBB_FN:
00125F  2  4E C0                .BYTE   "N",TK_FN       ; FN
001261  2               LBB_FOR:
001261  2  4F 52 81             .BYTE   "OR",TK_FOR     ; FOR
001264  2               LBB_FRE:
001264  2  52 45 28 D9          .BYTE   "RE(",TK_FRE    ; FRE(
001268  2  00                   .BYTE   $00
001269  2               TAB_ASCG:
001269  2               LBB_GETN:
001269  2  45 54 23 AE          .BYTE   "ET#",TK_GETN   ; GETN
00126D  2               LBB_GET:
00126D  2  45 54 A4             .BYTE   "ET",TK_GET     ; GET
001270  2               LBB_GOSUB:
001270  2  4F 53 55 42          .BYTE   "OSUB",TK_GOSUB ; GOSUB
001274  2  8F           
001275  2               LBB_GOTO:
001275  2  4F 54 4F 8B          .BYTE   "OTO",TK_GOTO   ; GOTO
001279  2  00                   .BYTE   $00
00127A  2               TAB_ASCH:
00127A  2               LBB_HEXS:
00127A  2  45 58 24 28          .BYTE   "EX$(",TK_HEXS  ; HEX$(
00127E  2  ED           
00127F  2  00                   .BYTE   $00
001280  2               TAB_ASCI:
001280  2               LBB_IECINPUT:
001280  2  45 43 49 4E          .BYTE   "ECINPUT",TK_IECINPUT; IECINPUT
001284  2  50 55 54 AB  
001288  2               LBB_IECOUTPUT:
001288  2  45 43 4F 55          .BYTE   "ECOUTPUT",TK_IECOUTPUT; IECOUTPUT
00128C  2  54 50 55 54  
001290  2  AC           
001291  2               LBB_IECST:
001291  2  45 43 53 54          .BYTE   "ECST",TK_IECST ; IECST
001295  2  F3           
001296  2               LBB_IF:
001296  2  46 8D                .BYTE   "F",TK_IF       ; IF
001298  2               LBB_INC:
001298  2  4E 43 95             .BYTE   "NC",TK_INC     ; INC
00129B  2               LBB_INPUT:
00129B  2  4E 50 55 54          .BYTE   "NPUT",TK_INPUT ; INPUT
00129F  2  86           
0012A0  2               LBB_INT:
0012A0  2  4E 54 28 D6          .BYTE   "NT(",TK_INT    ; INT(
0012A4  2  00                   .BYTE   $00
0012A5  2               TAB_ASCK:
0012A5  2               TAB_ASCL:
0012A5  2               LBB_LCASES:
0012A5  2  43 41 53 45          .BYTE   "CASE$(",TK_LCASES
0012A9  2  24 28 EB     
0012AC  2               ; LCASE$(
0012AC  2               LBB_LEFTS:
0012AC  2  45 46 54 24          .BYTE   "EFT$(",TK_LEFTS; LEFT$(
0012B0  2  28 F5        
0012B2  2               LBB_LEN:
0012B2  2  45 4E 28 E6          .BYTE   "EN(",TK_LEN    ; LEN(
0012B6  2               LBB_LET:
0012B6  2  45 54 89             .BYTE   "ET",TK_LET     ; LET
0012B9  2               LBB_LIST:
0012B9  2  49 53 54 A0          .BYTE   "IST",TK_LIST   ; LIST
0012BD  2               LBB_LOAD:
0012BD  2  4F 41 44 97          .BYTE   "OAD",TK_LOAD   ; LOAD
0012C1  2               LBB_LOCATE:
0012C1  2  4F 43 41 54          .BYTE   "OCATE",TK_LOCATE; LOCATE
0012C5  2  45 B1        
0012C7  2               LBB_LOG:
0012C7  2  4F 47 28 DD          .BYTE   "OG(",TK_LOG    ; LOG(
0012CB  2               LBB_LOOP:
0012CB  2  4F 4F 50 9D          .BYTE   "OOP",TK_LOOP   ; LOOP
0012CF  2  00                   .BYTE   $00
0012D0  2               TAB_ASCM:
0012D0  2               LBB_MAX:
0012D0  2  41 58 28 F0          .BYTE   "AX(",TK_MAX    ; MAX(
0012D4  2               LBB_MIDS:
0012D4  2  49 44 24 28          .BYTE   "ID$(",TK_MIDS  ; MID$(
0012D8  2  F7           
0012D9  2               LBB_MIN:
0012D9  2  49 4E 28 F1          .BYTE   "IN(",TK_MIN    ; MIN(
0012DD  2               LBB_MONITOR:
0012DD  2  4F 4E 49 54          .BYTE   "ONITOR",TK_MONITOR; MONITOR(
0012E1  2  4F 52 A8     
0012E4  2  00                   .BYTE   $00
0012E5  2               TAB_ASCN:
0012E5  2               LBB_NEW:
0012E5  2  45 57 A2             .BYTE   "EW",TK_NEW     ; NEW
0012E8  2               LBB_NEXT:
0012E8  2  45 58 54 82          .BYTE   "EXT",TK_NEXT   ; NEXT
0012EC  2               LBB_NOISE:
0012EC  2  4F 49 53 45          .BYTE   "OISE",TK_NOISE ; NOISE
0012F0  2  B9           
0012F1  2               LBB_NOT:
0012F1  2  4F 54 C3             .BYTE   "OT",TK_NOT     ; NOT
0012F4  2               LBB_NULL:
0012F4  2  55 4C 4C 94          .BYTE   "ULL",TK_NULL   ; NULL
0012F8  2  00                   .BYTE   $00
0012F9  2               TAB_ASCO:
0012F9  2               LBB_OFF:
0012F9  2  46 46 C7             .BYTE   "FF",TK_OFF     ; OFF
0012FC  2               LBB_ON:
0012FC  2  4E 93                .BYTE   "N",TK_ON       ; ON
0012FE  2               LBB_OPEN:
0012FE  2  50 45 4E A9          .BYTE   "PEN",TK_OPEN   ; OPEN
001302  2               LBB_OR:
001302  2  52 CF                .BYTE   "R",TK_OR       ; OR
001304  2  00                   .BYTE   $00
001305  2               TAB_ASCP:
001305  2               LBB_PATTERN:
001305  2  41 54 54 45          .BYTE   "ATTERN",TK_PATTERN; PATTERN
001309  2  52 4E B6     
00130C  2               LBB_PEEK:
00130C  2  45 45 4B 28          .BYTE   "EEK(",TK_PEEK  ; PEEK(
001310  2  E3           
001311  2               LBB_PI:
001311  2  49 F2                .BYTE   "I",TK_PI       ; PI
001313  2               LBB_PLOT:
001313  2  4C 4F 54 B5          .BYTE   "LOT",TK_PLOT   ; PLOT
001317  2               LBB_POKE:
001317  2  4F 4B 45 9A          .BYTE   "OKE",TK_POKE   ; POKE
00131B  2               LBB_POS:
00131B  2  4F 53 28 DA          .BYTE   "OS(",TK_POS    ; POS(
00131F  2               LBB_PRINT:
00131F  2  52 49 4E 54          .BYTE   "RINT",TK_PRINT ; PRINT
001323  2  9E           
001324  2               LBB_PUTN:
001324  2  55 54 23 AD          .BYTE   "UT#",TK_PUTN   ; PUTN
001328  2  00                   .BYTE   $00
001329  2               TAB_ASCR:
001329  2               LBB_READ:
001329  2  45 41 44 88          .BYTE   "EAD",TK_READ   ; READ
00132D  2               LBB_REM:
00132D  2  45 4D 91             .BYTE   "EM",TK_REM     ; REM
001330  2               LBB_RESTORE:
001330  2  45 53 54 4F          .BYTE   "ESTORE",TK_RESTORE
001334  2  52 45 8E     
001337  2               ; RESTORE
001337  2               LBB_RETURN:
001337  2  45 54 55 52          .BYTE   "ETURN",TK_RETURN; RETURN
00133B  2  4E 90        
00133D  2               LBB_RIGHTS:
00133D  2  49 47 48 54          .BYTE   "IGHT$(",TK_RIGHTS
001341  2  24 28 F6     
001344  2               ; RIGHT$(
001344  2               LBB_RND:
001344  2  4E 44 28 DC          .BYTE   "ND(",TK_RND    ; RND(
001348  2               LBB_RUN:
001348  2  55 4E 8C             .BYTE   "UN",TK_RUN     ; RUN
00134B  2  00                   .BYTE   $00
00134C  2               TAB_ASCS:
00134C  2               LBB_SADD:
00134C  2  41 44 44 28          .BYTE   "ADD(",TK_SADD  ; SADD(
001350  2  E5           
001351  2               LBB_SAVE:
001351  2  41 56 45 98          .BYTE   "AVE",TK_SAVE   ; SAVE
001355  2               LBB_SCNCLR:
001355  2  43 4E 43 4C          .BYTE   "CNCLR",TK_SCNCLR; SCNCLR
001359  2  52 B0        
00135B  2               LBB_SCREEN:
00135B  2  43 52 45 45          .BYTE   "CREEN",TK_SCREEN; SCREEN
00135F  2  4E B4        
001361  2               LBB_SGN:
001361  2  47 4E 28 D5          .BYTE   "GN(",TK_SGN    ; SGN(
001365  2               LBB_SIN:
001365  2  49 4E 28 E0          .BYTE   "IN(",TK_SIN    ; SIN(
001369  2               LBB_SOUND:
001369  2  4F 55 4E 44          .BYTE   "OUND",TK_SOUND ; SOUND
00136D  2  B8           
00136E  2               LBB_SPC:
00136E  2  50 43 28 C1          .BYTE   "PC(",TK_SPC    ; SPC(
001372  2               LBB_SPEEK:
001372  2  50 45 45 4B          .BYTE   "PEEK(",TK_SPEEK; SPEEK
001376  2  28 E4        
001378  2               LBB_SPOKE:
001378  2  50 4F 4B 45          .BYTE   "POKE",TK_SPOKE ; SPOKE
00137C  2  B3           
00137D  2               LBB_SQR:
00137D  2  51 52 28 DB          .BYTE   "QR(",TK_SQR    ; SQR(
001381  2               LBB_STEP:
001381  2  54 45 50 C4          .BYTE   "TEP",TK_STEP   ; STEP
001385  2               LBB_STOP:
001385  2  54 4F 50 92          .BYTE   "TOP",TK_STOP   ; STOP
001389  2               LBB_STRS:
001389  2  54 52 24 28          .BYTE   "TR$(",TK_STRS  ; STR$(
00138D  2  E7           
00138E  2               LBB_SWAP:
00138E  2  57 41 50 A5          .BYTE   "WAP",TK_SWAP   ; SWAP
001392  2               LBB_SYS:
001392  2  59 53 B7             .BYTE   "YS",TK_SYS     ; SYS
001395  2  00                   .BYTE   $00
001396  2               TAB_ASCT:
001396  2               LBB_TAB:
001396  2  41 42 28 BD          .BYTE   "AB(",TK_TAB    ; TAB(
00139A  2               LBB_TAN:
00139A  2  41 4E 28 E1          .BYTE   "AN(",TK_TAN    ; TAN(
00139E  2               LBB_THEN:
00139E  2  48 45 4E C2          .BYTE   "HEN",TK_THEN   ; THEN
0013A2  2               LBB_TONE:
0013A2  2  4F 4E 45 BA          .BYTE   "ONE",TK_TONE   ; TONE
0013A6  2               LBB_TO:
0013A6  2  4F BF                .BYTE   "O",TK_TO       ; TO
0013A8  2  00                   .BYTE   $00
0013A9  2               TAB_ASCU:
0013A9  2               LBB_UCASES:
0013A9  2  43 41 53 45          .BYTE   "CASE$(",TK_UCASES
0013AD  2  24 28 EA     
0013B0  2               ; UCASE$(
0013B0  2               LBB_UNTIL:
0013B0  2  4E 54 49 4C          .BYTE   "NTIL",TK_UNTIL ; UNTIL
0013B4  2  C5           
0013B5  2               LBB_USR:
0013B5  2  53 52 28 D8          .BYTE   "SR(",TK_USR    ; USR(
0013B9  2  00                   .BYTE   $00
0013BA  2               TAB_ASCV:
0013BA  2               LBB_VAL:
0013BA  2  41 4C 28 E8          .BYTE   "AL(",TK_VAL    ; VAL(
0013BE  2               LBB_VPTR:
0013BE  2  41 52 50 54          .BYTE   "ARPTR(",TK_VPTR; VARPTR(
0013C2  2  52 28 F4     
0013C5  2               LBB_VOICE:
0013C5  2  4F 49 43 45          .BYTE   "OICE",TK_VOICE ; VOICE
0013C9  2  BC           
0013CA  2               LBB_VOLUME:
0013CA  2  4F 4C 55 4D          .BYTE   "OLUME",TK_VOLUME; VOLUME
0013CE  2  45 BB        
0013D0  2               
0013D0  2  00                   .BYTE   $00
0013D1  2               TAB_ASCW:
0013D1  2               LBB_WAIT:
0013D1  2  41 49 54 96          .BYTE   "AIT",TK_WAIT   ; WAIT
0013D5  2               LBB_WHILE:
0013D5  2  48 49 4C 45          .BYTE   "HILE",TK_WHILE ; WHILE
0013D9  2  C6           
0013DA  2               LBB_WIDTH:
0013DA  2  49 44 54 48          .BYTE   "IDTH",TK_WIDTH ; WIDTH
0013DE  2  A3           
0013DF  2  00                   .BYTE   $00
0013E0  2               TAB_POWR:
0013E0  2  CC 00                .BYTE   TK_POWER,$00    ; ^
0013E2  2               
0013E2  2               ; new decode table for LIST
0013E2  2               ; Table is ..
0013E2  2               ; byte - keyword length, keyword first character
0013E2  2               ; word - pointer to rest of keyword from dictionary
0013E2  2               
0013E2  2               ; note if length is 1 then the pointer is ignored
0013E2  2               
0013E2  2               LAB_KEYT:
0013E2  2  03 45                .BYTE   3,'E'
0013E4  2  54 12                .WORD   LBB_END         ; END
0013E6  2  03 46                .BYTE   3,'F'
0013E8  2  61 12                .WORD   LBB_FOR         ; FOR
0013EA  2  04 4E                .BYTE   4,'N'
0013EC  2  E8 12                .WORD   LBB_NEXT        ; NEXT
0013EE  2  04 44                .BYTE   4,'D'
0013F0  2  26 12                .WORD   LBB_DATA        ; DATA
0013F2  2  09 44                .BYTE   9,'D'
0013F4  2  33 12                .WORD   LBB_DIRECTORY   ; DIRECTORY
0013F6  2  0A 44                .BYTE   10,'D'
0013F8  2  43 12                .WORD   LBB_DISKSTATUS  ; DISKSTATUS
0013FA  2  05 49                .BYTE   5,'I'
0013FC  2  9B 12                .WORD   LBB_INPUT       ; INPUT
0013FE  2  03 44                .BYTE   3,'D'
001400  2  30 12                .WORD   LBB_DIM         ; DIM
001402  2  04 52                .BYTE   4,'R'
001404  2  29 13                .WORD   LBB_READ        ; READ
001406  2  03 4C                .BYTE   3,'L'
001408  2  B6 12                .WORD   LBB_LET         ; LET
00140A  2  03 44                .BYTE   3,'D'
00140C  2  2A 12                .WORD   LBB_DEC         ; DEC
00140E  2  04 47                .BYTE   4,'G'
001410  2  75 12                .WORD   LBB_GOTO        ; GOTO
001412  2  03 52                .BYTE   3,'R'
001414  2  48 13                .WORD   LBB_RUN         ; RUN
001416  2  02 49                .BYTE   2,'I'
001418  2  96 12                .WORD   LBB_IF          ; IF
00141A  2  07 52                .BYTE   7,'R'
00141C  2  30 13                .WORD   LBB_RESTORE     ; RESTORE
00141E  2  05 47                .BYTE   5,'G'
001420  2  70 12                .WORD   LBB_GOSUB       ; GOSUB
001422  2  06 52                .BYTE   6,'R'
001424  2  37 13                .WORD   LBB_RETURN      ; RETURN
001426  2  03 52                .BYTE   3,'R'
001428  2  2D 13                .WORD   LBB_REM         ; REM
00142A  2  04 53                .BYTE   4,'S'
00142C  2  85 13                .WORD   LBB_STOP        ; STOP
00142E  2  02 4F                .BYTE   2,'O'
001430  2  FC 12                .WORD   LBB_ON          ; ON
001432  2  04 4E                .BYTE   4,'N'
001434  2  F4 12                .WORD   LBB_NULL        ; NULL
001436  2  03 49                .BYTE   3,'I'
001438  2  98 12                .WORD   LBB_INC         ; INC
00143A  2  04 57                .BYTE   4,'W'
00143C  2  D1 13                .WORD   LBB_WAIT        ; WAIT
00143E  2  04 4C                .BYTE   4,'L'
001440  2  BD 12                .WORD   LBB_LOAD        ; LOAD
001442  2  04 53                .BYTE   4,'S'
001444  2  51 13                .WORD   LBB_SAVE        ; SAVE
001446  2  03 44                .BYTE   3,'D'
001448  2  2D 12                .WORD   LBB_DEF         ; DEF
00144A  2  04 50                .BYTE   4,'P'
00144C  2  17 13                .WORD   LBB_POKE        ; POKE
00144E  2  04 43                .BYTE   4,'C'
001450  2  01 12                .WORD   LBB_CALL        ; CALL
001452  2  02 44                .BYTE   2,'D'
001454  2  4D 12                .WORD   LBB_DO          ; DO
001456  2  04 4C                .BYTE   4,'L'
001458  2  CB 12                .WORD   LBB_LOOP        ; LOOP
00145A  2  05 50                .BYTE   5,'P'
00145C  2  1F 13                .WORD   LBB_PRINT       ; PRINT
00145E  2  04 43                .BYTE   4,'C'
001460  2  1D 12                .WORD   LBB_CONT        ; CONT
001462  2  04 4C                .BYTE   4,'L'
001464  2  B9 12                .WORD   LBB_LIST        ; LIST
001466  2  05 43                .BYTE   5,'C'
001468  2  0A 12                .WORD   LBB_CLEAR       ; CLEAR
00146A  2  03 4E                .BYTE   3,'N'
00146C  2  E5 12                .WORD   LBB_NEW         ; NEW
00146E  2  05 57                .BYTE   5,'W'
001470  2  DA 13                .WORD   LBB_WIDTH       ; WIDTH
001472  2  03 47                .BYTE   3,'G'
001474  2  6D 12                .WORD   LBB_GET         ; GET
001476  2  04 53                .BYTE   4,'S'
001478  2  8E 13                .WORD   LBB_SWAP        ; SWAP
00147A  2  06 42                .BYTE   6,'B'
00147C  2  F3 11                .WORD   LBB_BITSET      ; BITSET
00147E  2  06 42                .BYTE   6,'B'
001480  2  ED 11                .WORD   LBB_BITCLR      ; BITCLR
001482  2  07 4D                .BYTE   7,'M'
001484  2  DD 12                .WORD   LBB_MONITOR     ; MONITOR
001486  2  04 4F                .BYTE   4,'O'
001488  2  FE 12                .WORD   LBB_OPEN        ; OPEN
00148A  2  05 43                .BYTE   5,'C'
00148C  2  0F 12                .WORD   LBB_CLOSE       ; CLOSE
00148E  2  08 49                .BYTE   8,'I'
001490  2  80 12                .WORD   LBB_IECINPUT    ; IECINPUT
001492  2  09 49                .BYTE   9,'I'
001494  2  88 12                .WORD   LBB_IECOUTPUT   ; IECOUTPUT
001496  2  04 50                .BYTE   4,'P'
001498  2  24 13                .WORD   LBB_PUTN        ; PUTN
00149A  2  04 47                .BYTE   4,'G'
00149C  2  69 12                .WORD   LBB_GETN        ; GETN
00149E  2  07 44                .BYTE   7,'D'
0014A0  2  3C 12                .WORD   LBB_DISKCMD     ; DISKCMD
0014A2  2  06 53                .BYTE   6,'S'
0014A4  2  55 13                .WORD   LBB_SCNCLR      ; SCNCLR
0014A6  2  06 4C                .BYTE   6,'L'
0014A8  2  C1 12                .WORD   LBB_LOCATE      ; LOCATE
0014AA  2  05 43                .BYTE   5,'C'
0014AC  2  14 12                .WORD   LBB_COLOR       ; COLOR
0014AE  2  05 53                .BYTE   5,'S'
0014B0  2  78 13                .WORD   LBB_SPOKE       ; SPOKE
0014B2  2  06 53                .BYTE   6,'S'
0014B4  2  5B 13                .WORD   LBB_SCREEN      ; SCREEN
0014B6  2  04 50                .BYTE   4,'P'
0014B8  2  13 13                .WORD   LBB_PLOT        ; PLOT
0014BA  2  07 50                .BYTE   7,'P'
0014BC  2  05 13                .WORD   LBB_PATTERN     ; PATTERN
0014BE  2  03 53                .BYTE   3,'S'
0014C0  2  92 13                .WORD   LBB_SYS         ; SYS
0014C2  2  05 53                .BYTE   5,'S'
0014C4  2  69 13                .WORD   LBB_SOUND       ; SOUND
0014C6  2  05 4E                .BYTE   5,'N'
0014C8  2  EC 12                .WORD   LBB_NOISE       ; NOISE
0014CA  2  04 54                .BYTE   4,'T'
0014CC  2  A2 13                .WORD   LBB_TONE        ; TONE
0014CE  2  06 56                .BYTE   6,'V'
0014D0  2  CA 13                .WORD   LBB_VOLUME      ; VOLUME
0014D2  2  05 56                .BYTE   5,'V'
0014D4  2  C5 13                .WORD   LBB_VOICE       ; VOICE
0014D6  2               
0014D6  2               ; secondary commands (can't start a statement)
0014D6  2               
0014D6  2  04 54                .BYTE   4,'T'
0014D8  2  96 13                .WORD   LBB_TAB         ; TAB
0014DA  2  04 45                .BYTE   4,'E'
0014DC  2  50 12                .WORD   LBB_ELSE        ; ELSE
0014DE  2  02 54                .BYTE   2,'T'
0014E0  2  A6 13                .WORD   LBB_TO          ; TO
0014E2  2  02 46                .BYTE   2,'F'
0014E4  2  5F 12                .WORD   LBB_FN          ; FN
0014E6  2  04 53                .BYTE   4,'S'
0014E8  2  6E 13                .WORD   LBB_SPC         ; SPC
0014EA  2  04 54                .BYTE   4,'T'
0014EC  2  9E 13                .WORD   LBB_THEN        ; THEN
0014EE  2  03 4E                .BYTE   3,'N'
0014F0  2  F1 12                .WORD   LBB_NOT         ; NOT
0014F2  2  04 53                .BYTE   4,'S'
0014F4  2  81 13                .WORD   LBB_STEP        ; STEP
0014F6  2  05 55                .BYTE   5,'U'
0014F8  2  B0 13                .WORD   LBB_UNTIL       ; UNTIL
0014FA  2  05 57                .BYTE   5,'W'
0014FC  2  D5 13                .WORD   LBB_WHILE       ; WHILE
0014FE  2  03 4F                .BYTE   3,'O'
001500  2  F9 12                .WORD   LBB_OFF         ; OFF
001502  2               
001502  2               ; opperators
001502  2               
001502  2  01 2B                .BYTE   1,'+'
001504  2  00 00                .WORD   $0000           ; +
001506  2  01 2D                .BYTE   1,'-'
001508  2  00 00                .WORD   $0000           ; -
00150A  2  01 2A                .BYTE   1,'*'
00150C  2  00 00                .WORD   $0000           ; *
00150E  2  01 2F                .BYTE   1,'/'
001510  2  00 00                .WORD   $0000           ; /
001512  2  01 5E                .BYTE   1,'^'
001514  2  00 00                .WORD   $0000           ; ^
001516  2  03 41                .BYTE   3,'A'
001518  2  DC 11                .WORD   LBB_AND         ; AND
00151A  2  03 45                .BYTE   3,'E'
00151C  2  57 12                .WORD   LBB_EOR         ; EOR
00151E  2  02 4F                .BYTE   2,'O'
001520  2  02 13                .WORD   LBB_OR          ; OR
001522  2  02 3E                .BYTE   2,'>'
001524  2  D2 11                .WORD   LBB_RSHIFT      ; >>
001526  2  02 3C                .BYTE   2,'<'
001528  2  CC 11                .WORD   LBB_LSHIFT      ; <<
00152A  2  01 3E                .BYTE   1,'>'
00152C  2  00 00                .WORD   $0000           ; >
00152E  2  01 3D                .BYTE   1,'='
001530  2  00 00                .WORD   $0000           ; =
001532  2  01 3C                .BYTE   1,'<'
001534  2  00 00                .WORD   $0000           ; <
001536  2               
001536  2               ; functions
001536  2               
001536  2  04 53                .BYTE   4,'S'           ;
001538  2  61 13                .WORD   LBB_SGN         ; SGN
00153A  2  04 49                .BYTE   4,'I'           ;
00153C  2  A0 12                .WORD   LBB_INT         ; INT
00153E  2  04 41                .BYTE   4,'A'           ;
001540  2  D8 11                .WORD   LBB_ABS         ; ABS
001542  2  04 55                .BYTE   4,'U'           ;
001544  2  B5 13                .WORD   LBB_USR         ; USR
001546  2  04 46                .BYTE   4,'F'           ;
001548  2  64 12                .WORD   LBB_FRE         ; FRE
00154A  2  04 50                .BYTE   4,'P'           ;
00154C  2  1B 13                .WORD   LBB_POS         ; POS
00154E  2  04 53                .BYTE   4,'S'           ;
001550  2  7D 13                .WORD   LBB_SQR         ; SQR
001552  2  04 52                .BYTE   4,'R'           ;
001554  2  44 13                .WORD   LBB_RND         ; RND
001556  2  04 4C                .BYTE   4,'L'           ;
001558  2  C7 12                .WORD   LBB_LOG         ; LOG
00155A  2  04 45                .BYTE   4,'E'           ;
00155C  2  5A 12                .WORD   LBB_EXP         ; EXP
00155E  2  04 43                .BYTE   4,'C'           ;
001560  2  21 12                .WORD   LBB_COS         ; COS
001562  2  04 53                .BYTE   4,'S'           ;
001564  2  65 13                .WORD   LBB_SIN         ; SIN
001566  2  04 54                .BYTE   4,'T'           ;
001568  2  9A 13                .WORD   LBB_TAN         ; TAN
00156A  2  04 41                .BYTE   4,'A'           ;
00156C  2  E3 11                .WORD   LBB_ATN         ; ATN
00156E  2  05 50                .BYTE   5,'P'           ;
001570  2  0C 13                .WORD   LBB_PEEK        ; PEEK
001572  2  06 53                .BYTE   6,'S'
001574  2  72 13                .WORD   LBB_SPEEK       ; SPEEK
001576  2  05 53                .BYTE   5,'S'           ;
001578  2  4C 13                .WORD   LBB_SADD        ; SADD
00157A  2  04 4C                .BYTE   4,'L'           ;
00157C  2  B2 12                .WORD   LBB_LEN         ; LEN
00157E  2  05 53                .BYTE   5,'S'           ;
001580  2  89 13                .WORD   LBB_STRS        ; STR$
001582  2  04 56                .BYTE   4,'V'           ;
001584  2  BA 13                .WORD   LBB_VAL         ; VAL
001586  2  04 41                .BYTE   4,'A'           ;
001588  2  DF 11                .WORD   LBB_ASC         ; ASC
00158A  2  07 55                .BYTE   7,'U'           ;
00158C  2  A9 13                .WORD   LBB_UCASES      ; UCASE$
00158E  2  07 4C                .BYTE   7,'L'           ;
001590  2  A5 12                .WORD   LBB_LCASES      ; LCASE$
001592  2  05 43                .BYTE   5,'C'           ;
001594  2  05 12                .WORD   LBB_CHRS        ; CHR$
001596  2  05 48                .BYTE   5,'H'           ;
001598  2  7A 12                .WORD   LBB_HEXS        ; HEX$
00159A  2  05 42                .BYTE   5,'B'           ;
00159C  2  E8 11                .WORD   LBB_BINS        ; BIN$
00159E  2  07 42                .BYTE   7,'B'           ;
0015A0  2  F9 11                .WORD   LBB_BITTST      ; BITTST
0015A2  2  04 4D                .BYTE   4,'M'           ;
0015A4  2  D0 12                .WORD   LBB_MAX         ; MAX
0015A6  2  04 4D                .BYTE   4,'M'           ;
0015A8  2  D9 12                .WORD   LBB_MIN         ; MIN
0015AA  2  02 50                .BYTE   2,'P'           ;
0015AC  2  11 13                .WORD   LBB_PI          ; PI
0015AE  2  05 49                .BYTE   5,'I'           ;
0015B0  2  91 12                .WORD   LBB_IECST       ; IECST
0015B2  2  05 56                .BYTE   5,'V'           ;
0015B4  2  BE 13                .WORD   LBB_VPTR        ; VARPTR
0015B6  2  06 4C                .BYTE   6,'L'           ;
0015B8  2  AC 12                .WORD   LBB_LEFTS       ; LEFT$
0015BA  2  07 52                .BYTE   7,'R'           ;
0015BC  2  3D 13                .WORD   LBB_RIGHTS      ; RIGHT$
0015BE  2  05 4D                .BYTE   5,'M'           ;
0015C0  2  D4 12                .WORD   LBB_MIDS        ; MID$
0015C2  2  04 43                .BYTE   4,'C'           ;
0015C4  2  19 12                .WORD   LBB_CON         ; CON
0015C6  2               
0015C6  1               
0015C6  1               ; DEFINITIONS
0015C6  1                       .INCLUDE "definitions.asm"
0015C6  2               PROGRAMBANK     = $FF           ; BANK THAT THE INTREPRETER LIVES IN
0015C6  2               DATABANK        = $02           ; BANK THAT THE DATA LIVES IN
0015C6  2               
0015C6  2               FNBUFFER        = $000F00       ; FILE NAME BUFFER, MUST BE IN ZERO BANK!
0015C6  2               
0015C6  2               
0015C6  2               
0015C6  2               ; offsets from a base of X or Y
0015C6  2               
0015C6  2               PLUS_0          = $00           ; X or Y plus 0
0015C6  2               PLUS_1          = $01           ; X or Y plus 1
0015C6  2               PLUS_2          = $02           ; X or Y plus 2
0015C6  2               PLUS_3          = $03           ; X or Y plus 3
0015C6  2               
0015C6  2               STACK_BOTTOM    = $B000         ; stack bottom, no offset
0015C6  2               STACK           = $BFFF         ; stack top, no offset
0015C6  2               
0015C6  2               ccflag          = $000200       ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
0015C6  2               ccbyte          = ccflag+1      ; BASIC CTRL-C byte
0015C6  2               ccnull          = ccbyte+1      ; BASIC CTRL-C byte timeout
0015C6  2               
0015C6  2               VEC_CC          = ccnull+1      ; ctrl c check vector
0015C6  2               
0015C6  2               
0015C6  2               ; Ibuffs can now be anywhere in RAM AS LONG AS IT IS BEFORE RAM_BASE AND IS NOT PAGE ALIGNED!, ensure that the max length is < $80
0015C6  2               
0015C6  2                       .IF     PROGRAMBANK=DATABANK
0015C6  2               Ibuffs              = (ENDOFBASIC&$FF00)+$181
0015C6  2                       .ELSE
0015C6  2               Ibuffs              = $2000+$181
0015C6  2               LIbuffs             = (DATABANK*$10000)+$2000+$181
0015C6  2                       .ENDIF
0015C6  2               Ibuffe          = Ibuffs+80     ; end of input buffer
0015C6  2               
0015C6  2               Ram_base        = ((Ibuffe+1)&$FF00)+$100; start of user RAM (set as needed, should be page aligned)
0015C6  2               Ram_top         = $FF00         ; end of user RAM+1 (set as needed, should be page aligned)
0015C6  2               
0015C6  1               
0015C6  1               ; MESSAGES
0015C6  1                       .INCLUDE "messages.asm"
0015C6  2               
0015C6  2               LAB_CONMSG:
0015C6  2  80 80 80 83          .BYTE   $80,$80,$80,$83,$84,$85,"  Werner Engineering 816",$0D
0015CA  2  84 85 20 20  
0015CE  2  57 65 72 6E  
0015E5  2  81 81 81 83          .BYTE   $81,$81,$81,$83,$84,$85,"  Enhanced BASIC 65816 2.3",$0D
0015E9  2  84 85 20 20  
0015ED  2  45 6E 68 61  
001606  2  82 82 82 83          .BYTE   $82,$82,$82,$83,$84,$85,00
00160A  2  84 85 00     
00160D  2               
00160D  2               LAB_SMSG:
00160D  2  20 42 79 74          .BYTE   " Bytes free",$00
001611  2  65 73 20 66  
001615  2  72 65 65 00  
001619  2               LAB_SMSG1:
001619  2  0D 0A 45 6E          .BYTE   $0D,$0A,"Enhanced BASIC 65816 2.3",$00
00161D  2  68 61 6E 63  
001621  2  65 64 20 42  
001634  2  0D 0A 44 45          .BYTE   $0D,$0A,"DERIVED FROM ehBASIC BY LEE DAVIDSON",$00
001638  2  52 49 56 45  
00163C  2  44 20 46 52  
00165B  2               
00165B  2               ; BASIC messages, mostly error messages
00165B  2               
00165B  2               LAB_BAER:
00165B  2  7F 16                .WORD   ERR_NF          ;$00 NEXT without FOR
00165D  2  90 16                .WORD   ERR_SN          ;$02 syntax
00165F  2  97 16                .WORD   ERR_RG          ;$04 RETURN without GOSUB
001661  2  AC 16                .WORD   ERR_OD          ;$06 out of data
001663  2  B8 16                .WORD   ERR_FC          ;$08 function call
001665  2  C6 16                .WORD   ERR_OV          ;$0A overflow
001667  2  CF 16                .WORD   ERR_OM          ;$0C out of memory
001669  2  DD 16                .WORD   ERR_US          ;$0E undefined statement
00166B  2  F1 16                .WORD   ERR_BS          ;$10 array bounds
00166D  2  FE 16                .WORD   ERR_DD          ;$12 double dimension array
00166F  2  0F 17                .WORD   ERR_D0          ;$14 divide by 0
001671  2  1E 17                .WORD   ERR_ID          ;$16 illegal direct
001673  2  2D 17                .WORD   ERR_TM          ;$18 type mismatch
001675  2  3B 17                .WORD   ERR_LS          ;$1A long string
001677  2  4B 17                .WORD   ERR_ST          ;$1C string too complex
001679  2  5E 17                .WORD   ERR_CN          ;$1E continue error
00167B  2  6D 17                .WORD   ERR_UF          ;$20 undefined function
00167D  2  80 17                .WORD   ERR_LD          ;$22 LOOP without DO
00167F  2               
00167F  2               ERR_NF:
00167F  2  4E 45 58 54          .BYTE   "NEXT without FOR",$00
001683  2  20 77 69 74  
001687  2  68 6F 75 74  
001690  2               ERR_SN:
001690  2  53 79 6E 74          .BYTE   "Syntax",$00
001694  2  61 78 00     
001697  2               ERR_RG:
001697  2  52 45 54 55          .BYTE   "RETURN without GOSUB",$00
00169B  2  52 4E 20 77  
00169F  2  69 74 68 6F  
0016AC  2               ERR_OD:
0016AC  2  4F 75 74 20          .BYTE   "Out of DATA",$00
0016B0  2  6F 66 20 44  
0016B4  2  41 54 41 00  
0016B8  2               ERR_FC:
0016B8  2  46 75 6E 63          .BYTE   "Function call",$00
0016BC  2  74 69 6F 6E  
0016C0  2  20 63 61 6C  
0016C6  2               ERR_OV:
0016C6  2  4F 76 65 72          .BYTE   "Overflow",$00
0016CA  2  66 6C 6F 77  
0016CE  2  00           
0016CF  2               ERR_OM:
0016CF  2  4F 75 74 20          .BYTE   "Out of memory",$00
0016D3  2  6F 66 20 6D  
0016D7  2  65 6D 6F 72  
0016DD  2               ERR_US:
0016DD  2  55 6E 64 65          .BYTE   "Undefined statement",$00
0016E1  2  66 69 6E 65  
0016E5  2  64 20 73 74  
0016F1  2               ERR_BS:
0016F1  2  41 72 72 61          .BYTE   "Array bounds",$00
0016F5  2  79 20 62 6F  
0016F9  2  75 6E 64 73  
0016FE  2               ERR_DD:
0016FE  2  44 6F 75 62          .BYTE   "Double dimension",$00
001702  2  6C 65 20 64  
001706  2  69 6D 65 6E  
00170F  2               ERR_D0:
00170F  2  44 69 76 69          .BYTE   "Divide by zero",$00
001713  2  64 65 20 62  
001717  2  79 20 7A 65  
00171E  2               ERR_ID:
00171E  2  49 6C 6C 65          .BYTE   "Illegal direct",$00
001722  2  67 61 6C 20  
001726  2  64 69 72 65  
00172D  2               ERR_TM:
00172D  2  54 79 70 65          .BYTE   "Type mismatch",$00
001731  2  20 6D 69 73  
001735  2  6D 61 74 63  
00173B  2               ERR_LS:
00173B  2  53 74 72 69          .BYTE   "String too long",$00
00173F  2  6E 67 20 74  
001743  2  6F 6F 20 6C  
00174B  2               ERR_ST:
00174B  2  53 74 72 69          .BYTE   "String too complex",$00
00174F  2  6E 67 20 74  
001753  2  6F 6F 20 63  
00175E  2               ERR_CN:
00175E  2  43 61 6E 27          .BYTE   "Can't continue",$00
001762  2  74 20 63 6F  
001766  2  6E 74 69 6E  
00176D  2               ERR_UF:
00176D  2  55 6E 64 65          .BYTE   "Undefined function",$00
001771  2  66 69 6E 65  
001775  2  64 20 66 75  
001780  2               ERR_LD:
001780  2  4C 4F 4F 50          .BYTE   "LOOP without DO",$00
001784  2  20 77 69 74  
001788  2  68 6F 75 74  
001790  2               
001790  2               LAB_BMSG:
001790  2  0D 0A 42 72          .BYTE   $0D,$0A,"Break",$00
001794  2  65 61 6B 00  
001798  2               LAB_EMSG:
001798  2  20 45 72 72          .BYTE   " Error",$00
00179C  2  6F 72 00     
00179F  2               LAB_LMSG:
00179F  2  20 69 6E 20          .BYTE   " in line ",$00
0017A3  2  6C 69 6E 65  
0017A7  2  20 00        
0017A9  2               LAB_RMSG:
0017A9  2  0D 0A 52 65          .BYTE   $0D,$0A,"Ready",$0D,$0A,$00
0017AD  2  61 64 79 0D  
0017B1  2  0A 00        
0017B3  2               
0017B3  2               LAB_IMSG:
0017B3  2  20 45 78 74          .BYTE   " Extra ignored",$0D,$0A,$00
0017B7  2  72 61 20 69  
0017BB  2  67 6E 6F 72  
0017C4  2               LAB_REDO:
0017C4  2  20 52 65 64          .BYTE   " Redo from start",$0D,$0A,$00
0017C8  2  6F 20 66 72  
0017CC  2  6F 6D 20 73  
0017D7  2               LAB_IOER:
0017D7  2  20 49 2F 4F          .BYTE   " I/O Error",$0D,$0A,$00
0017DB  2  20 45 72 72  
0017DF  2  6F 72 0D 0A  
0017E4  2               
0017E4  1               
0017E4  1               ; NUMERIC CONSTANTS
0017E4  1                       .INCLUDE "numconst.asm"
0017E4  2               ; numeric constants and series
0017E4  2               ; constants and series for LOG(n)
0017E4  2               LAB_25A0:
0017E4  2  02                   .BYTE   $02             ; counter
0017E5  2  80 19 56 62          .BYTE   $80,$19,$56,$62 ; 0.59898
0017E9  2  80 76 22 F3          .BYTE   $80,$76,$22,$F3 ; 0.96147
0017ED  2  82 38 AA 40          .BYTE   $82,$38,$AA,$40 ; 2.88539
0017F1  2               
0017F1  2               LAB_25AD:
0017F1  2  80 35 04 F3          .BYTE   $80,$35,$04,$F3 ; 0.70711	1/root 2
0017F5  2               LAB_25B1:
0017F5  2  81 35 04 F3          .BYTE   $81,$35,$04,$F3 ; 1.41421	root 2
0017F9  2               LAB_25B5:
0017F9  2  80 80 00 00          .BYTE   $80,$80,$00,$00 ; -0.5
0017FD  2               LAB_25B9:
0017FD  2  80 31 72 18          .BYTE   $80,$31,$72,$18 ; 0.69315	LOG(2)
001801  2               
001801  2               ; numeric PRINT constants
001801  2               LAB_2947:
001801  2  91 43 4F F8          .BYTE   $91,$43,$4F,$F8 ; 99999.9375 (max value with at least one decimal)
001805  2               LAB_294B:
001805  2  94 74 23 F7          .BYTE   $94,$74,$23,$F7 ; 999999.4375 (max value before scientific notation)
001809  2               LAB_294F:
001809  2  94 74 24 00          .BYTE   $94,$74,$24,$00 ; 1000000
00180D  2               
00180D  2               ; EXP(n) constants and series
00180D  2               LAB_2AFA:
00180D  2  81 38 AA 3B          .BYTE   $81,$38,$AA,$3B ; 1.4427	(1/LOG base 2 e)
001811  2               LAB_2AFE:
001811  2  06                   .BYTE   $06             ; counter
001812  2  74 63 90 8C          .BYTE   $74,$63,$90,$8C ; 2.17023e-4
001816  2  77 23 0C AB          .BYTE   $77,$23,$0C,$AB ; 0.00124
00181A  2  7A 1E 94 00          .BYTE   $7A,$1E,$94,$00 ; 0.00968
00181E  2  7C 63 42 80          .BYTE   $7C,$63,$42,$80 ; 0.05548
001822  2  7E 75 FE D0          .BYTE   $7E,$75,$FE,$D0 ; 0.24023
001826  2  80 31 72 15          .BYTE   $80,$31,$72,$15 ; 0.69315
00182A  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.00000
00182E  2               
00182E  2               ; trigonometric constants and series
00182E  2               LAB_2C78:
00182E  2  81 49 0F DB          .BYTE   $81,$49,$0F,$DB ; 1.570796371 (pi/2) as floating #
001832  2               LAB_2C84:
001832  2  04                   .BYTE   $04             ; counter
001833  2  86 1E D7 FB          .BYTE   $86,$1E,$D7,$FB ; 39.7109
001837  2  87 99 26 65          .BYTE   $87,$99,$26,$65 ;-76.575
00183B  2  87 23 34 58          .BYTE   $87,$23,$34,$58 ; 81.6022
00183F  2  86 A5 5D E1          .BYTE   $86,$A5,$5D,$E1 ;-41.3417
001843  2               LAB_2C7C:
001843  2  83 49 0F DB          .BYTE   $83,$49,$0F,$DB ; 6.28319 (2*pi) as floating #
001847  2               
001847  2               LAB_2CC9:
001847  2  08                   .BYTE   $08             ; counter
001848  2  78 3A C5 37          .BYTE   $78,$3A,$C5,$37 ; 0.00285
00184C  2  7B 83 A2 5C          .BYTE   $7B,$83,$A2,$5C ;-0.0160686
001850  2  7C 2E DD 4D          .BYTE   $7C,$2E,$DD,$4D ; 0.0426915
001854  2  7D 99 B0 1E          .BYTE   $7D,$99,$B0,$1E ;-0.0750429
001858  2  7D 59 ED 24          .BYTE   $7D,$59,$ED,$24 ; 0.106409
00185C  2  7E 91 72 00          .BYTE   $7E,$91,$72,$00 ;-0.142036
001860  2  7E 4C B9 73          .BYTE   $7E,$4C,$B9,$73 ; 0.199926
001864  2  7F AA AA 53          .BYTE   $7F,$AA,$AA,$53 ;-0.333331
001868  2               
001868  2               LAB_1D96        = *+1           ; $00,$00 used for undefined variables
001868  2               LAB_259C:
001868  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.000000, used for INC
00186C  2               LAB_2AFD:
00186C  2  81 80 00 00          .BYTE   $81,$80,$00,$00 ; -1.00000, used for DEC. must be on the same page as +1.00
001870  2               
001870  2               ; misc constants
001870  2               LAB_1DF7:
001870  2  90                   .BYTE   $90             ;-32768 (uses first three bytes from 0.5)
001871  2               LAB_2A96:
001871  2  80 00 00 00          .BYTE   $80,$00,$00,$00 ; 0.5
001875  2               LAB_2C80:
001875  2  7F 00 00 00          .BYTE   $7F,$00,$00,$00 ; 0.25
001879  2               LAB_26B5:
001879  2  84 20 00 00          .BYTE   $84,$20,$00,$00 ; 10.0000 divide by 10 constant
00187D  2               
00187D  2               ; This table is used in converting numbers to ASCII.
00187D  2               
00187D  2               LAB_2A9A:
00187D  2               LAB_2A9B        = LAB_2A9A+1
00187D  2               LAB_2A9C        = LAB_2A9B+1
00187D  2  FE 79 60             .BYTE   $FE,$79,$60     ; -100000
001880  2  00 27 10             .BYTE   $00,$27,$10     ; 10000
001883  2  FF FC 18             .BYTE   $FF,$FC,$18     ; -1000
001886  2  00 00 64             .BYTE   $00,$00,$64     ; 100
001889  2  FF FF F6             .BYTE   $FF,$FF,$F6     ; -10
00188C  2  00 00 01             .BYTE   $00,$00,$01     ; 1
00188F  2               
00188F  1               
00188F  1               ; I/O VECTORS
00188F  1                       .INCLUDE "iovect.asm"
00188F  2               ;__________________________________________________________
00188F  2               ;
00188F  2               ; BIOS JUMP TABLE (NATIVE)
00188F  2               ;__________________________________________________________
00188F  2               LPRINTVEC       = $00FD00
00188F  2               LINPVEC         = $00FD04
00188F  2               LINPWVEC        = $00FD08
00188F  2               LSetXYVEC       = $00FD0C
00188F  2               LCPYVVEC        = $00FD10
00188F  2               LSrlUpVEC       = $00FD14
00188F  2               LSetColorVEC    = $00FD18
00188F  2               LCURSORVEC      = $00FD1C
00188F  2               LUNCURSORVEC    = $00FD20
00188F  2               LWRITERTC       = $00FD24
00188F  2               LREADRTC        = $00FD28
00188F  2               LIECIN          = $00FD2C
00188F  2               LIECOUT         = $00FD30
00188F  2               LUNTALK         = $00FD34
00188F  2               LUNLSTN         = $00FD38
00188F  2               LLISTEN         = $00FD3C
00188F  2               LTALK           = $00FD40
00188F  2               LSETLFS         = $00FD44
00188F  2               LSETNAM         = $00FD48
00188F  2               LLOAD           = $00FD4C
00188F  2               LSAVE           = $00FD50
00188F  2               LIECINIT        = $00FD54
00188F  2               LIECCLCH        = $00FD58       ; close input and output channels
00188F  2               LIECOUTC        = $00FD5C       ; open a channel for output
00188F  2               LIECINPC        = $00FD60       ; open a channel for input
00188F  2               LIECOPNLF       = $00FD64       ; open a logical file
00188F  2               LIECCLSLF       = $00FD68       ; close a specified logical file
00188F  2               LClearScrVec    = $00FD6C       ; clear the  Screen
00188F  2               
00188F  2               CSRX            = $0330         ; CURRENT X POSITION
00188F  2               CSRY            = $0331         ; CURRENT Y POSITION
00188F  2               ConsoleDevice   = $0341         ; Current Console Device
00188F  2               CSRCHAR         = $0342         ; Character under the Cursor
00188F  2               VIDEOWIDTH      = $0343
00188F  2               DEFAULT_COLOR   = $0344         ; DEFAULT COLOR FOR PRINTING
00188F  2               TEMP            = $0345
00188F  2               TEMPOFFSET      = $0347
00188F  2               
00188F  2               IECSTW          = $000317
00188F  2               IECMSGM         = $00031F       ; message mode flag,
00188F  2               ; $C0 = both control and kernal messages,
00188F  2               ; $80 = control messages only,
00188F  2               ; $40 = kernal messages only,
00188F  2               ; $00 = neither control or kernal messages
00188F  2               LOADBUFL        = $000322       ; IEC buffer Pointer
00188F  2               LOADBUFH        = LOADBUFL+1
00188F  2               LOADBANK        = LOADBUFL+2    ; BANK buffer Pointer
00188F  2               IECSTRTL        = $00031D       ; IEC Start Address Pointer
00188F  2               IECSTRTH        = IECSTRTL+1
00188F  2               
00188F  2               VideoDisplayPage = $fe31
00188F  2               VideoTextMode   = $fe35
00188F  2               VideoLoresMode  = $fe36
00188F  2               VideoDoubleLores = $fe37
00188F  2               VideoHiresMode  = $fe38
00188F  2               VideoDoubleHires = $fe39
00188F  2               Video80col      = $fe3A
00188F  2               VideoMixedMode  = $fe3b
00188F  2               VideoQuadHires  = $fe3c
00188F  2               VideoMonoHires  = $fe3d
00188F  2               
00188F  2               
00188F  2               ;__________________________________________________________
00188F  2               
00188F  2               
00188F  2               
00188F  2               
00188F  2               ;___V_INPT_________________________________________________
00188F  2               ;
00188F  2               ; MAKE A BIOS CALL TO GET NON-BLOCKING CHARACTER INPUT
00188F  2               ; THIS COULD BE SERIAL OR KEYBOARD DEPENDING ON BIOS SETTING
00188F  2               ; RETURNS
00188F  2               ;   A: CHARACTER
00188F  2               ;      CARRY SET IF NO CHARACTER
00188F  2               ;
00188F  2               ;
00188F  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
00188F  2               ;__________________________________________________________
00188F  2               V_INPT:
00188F  2  22 04 FD 00          JSL     LINPVEC         ; INCHAR
001893  2  60                   RTS
001894  2               
001894  2               ;___V_OUTP_________________________________________________
001894  2               ;
001894  2               ; MAKE A BIOS CALL TO SEND CHARACTER TO OUTPUT
001894  2               ; THIS COULD BE SERIAL OR TMS9918 CHARACTER DISPLAY
001894  2               ;
001894  2               ;   A: CHARACTER
001894  2               ;
001894  2               ;
001894  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
001894  2               ;__________________________________________________________
001894  2               
001894  2               V_OUTP: ; send byte to output device
001894  2               ;        PHX
001894  2               ;        LDX     <VIDEOMODE
001894  2               ;        CPX     #0
001894  2               ;        BNE     V_OUTP1
001894  2  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001898  2               ;V_OUTP1:
001898  2               ;        PLX
001898  2  60                   RTS
001899  2               
001899  2               
001899  2                       .INCLUDE "diskcmds.asm"
001899  3               .P816
001899  3               ;___V_SAVE_________________________________________________
001899  3               ;
001899  3               ; UTILIZE BIOS TO SAVE BASIC RAM
001899  3               ;
001899  3               ; STORE CONTENTS IN RAM FROM "Smeml/h" TO "Svarl/h"-1 IN BANK "DATABANK"
001899  3               ;
001899  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
001899  3               ; THIS IS NATIVE '816 CODE
001899  3               ;__________________________________________________________
001899  3               V_SAVE: ; save BASIC program
001899  3  20 6A 2F             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
00189C  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
00189E  3  D0 08                BNE     V_SAVE_GO       ; YES, CONTINUE ON
0018A0  3               V_SAVE_ERR:
0018A0  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
0018A2  3  20 4C 24             JSR     LAB_XERR
0018A5  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0018A8  3               V_SAVE_GO:
0018A8  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0018AC  3  A9 C0                LDA     #$C0
0018AE  3  8F 1F 03 00          STA     f:IECMSGM
0018B2  3  A0 00                LDY     #$00
0018B4  3               V_SAVE_1:
0018B4  3  8B DA A2 01          LDAINDIRECTY ssptr_l
0018B8  3  B5 B8 C9 00  
0018BC  3  D0 04 A2 00  
0018CA  3  BB                   TYX
0018CB  3  9F 00 0F 00          STA     F:FNBUFFER,X
0018CF  3  C9 00                CMP     #$00
0018D1  3  F0 07                BEQ     V_SAVE_2
0018D3  3  C9 22                CMP     #'"'
0018D5  3  F0 03                BEQ     V_SAVE_2
0018D7  3  C8                   INY
0018D8  3  D0 DA                BNE     V_SAVE_1
0018DA  3               V_SAVE_2:
0018DA  3  98                   TYA                     ; fn length
0018DB  3  A2 00                LDX     #<FNBUFFER
0018DD  3  A0 0F                LDY     #>FNBUFFER
0018DF  3  8B                   PHB
0018E0  3  DA A2 00 DA          SETBANK 0
0018E4  3  AB FA        
0018E6  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0018EA  3  AB                   PLB
0018EB  3  20 8C 30             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0018EE  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0018F1  3  A0 01                LDY#1                   ; secondary address
0018F3  3  8B                   PHB
0018F4  3  DA A2 00 DA          SETBANK 0
0018F8  3  AB FA        
0018FA  3  22 44 FD 00          JSL     LSETLFS
0018FE  3  A5 7A                LDA     <Smemh
001900  3  8F 1E 03 00          STA     F:IECSTRTH
001904  3  A5 79                LDA     <Smeml
001906  3  8F 1D 03 00          STA     F:IECSTRTL
00190A  3  A5 7B                LDA     <Svarl
00190C  3  8F 22 03 00          STA     F:LOADBUFL
001910  3  A5 7C                LDA     <Svarh
001912  3  8F 23 03 00          STA     F:LOADBUFH
001916  3  A9 02                LDA     #DATABANK
001918  3  8F 24 03 00          STA     F:LOADBANK
00191C  3  22 50 FD 00          JSL     LSAVE
001920  3  AB                   PLB
001921  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001923  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001925  3  20 ED 2C             JSR     LAB_18C3
001928  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00192B  3               
00192B  3               
00192B  3               
00192B  3               
00192B  3               ;___V_LOAD_________________________________________________
00192B  3               ;
00192B  3               ; UTILIZE BIOS TO LOAD BASIC RAM
00192B  3               ;
00192B  3               ; LOAD CONTENTS TO RAM "Smeml/h" BANK "DATABANK"
00192B  3               ;
00192B  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
00192B  3               ; THIS IS NATIVE '816 CODE
00192B  3               ;__________________________________________________________
00192B  3               V_LOAD: ; load BASIC program
00192B  3  20 6A 2F             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
00192E  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001930  3  D0 08                BNE     V_LOAD_GO       ; YES, CONTINUE ON
001932  3               V_LOAD_ERR:
001932  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001934  3  20 4C 24             JSR     LAB_XERR
001937  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00193A  3               V_LOAD_GO:
00193A  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
00193E  3  A9 C0                LDA     #$C0
001940  3  8F 1F 03 00          STA     f:IECMSGM
001944  3  A0 00                LDY     #$00
001946  3               V_LOAD_1:
001946  3  8B DA A2 01          LDAINDIRECTY ssptr_l
00194A  3  B5 B8 C9 00  
00194E  3  D0 04 A2 00  
00195C  3  BB                   TYX
00195D  3  9F 00 0F 00          STA     F:FNBUFFER,X
001961  3  C9 00                CMP     #$00
001963  3  F0 07                BEQ     V_LOAD_2
001965  3  C9 22                CMP     #'"'
001967  3  F0 03                BEQ     V_LOAD_2
001969  3  C8                   INY
00196A  3  D0 DA                BNE     V_LOAD_1
00196C  3               V_LOAD_2:
00196C  3  98                   TYA                     ; fn length
00196D  3  A2 00                LDX     #<FNBUFFER
00196F  3  A0 0F                LDY     #>FNBUFFER
001971  3  8B                   PHB
001972  3  DA A2 00 DA          SETBANK 0
001976  3  AB FA        
001978  3  22 48 FD 00          JSL     LSETNAM         ; setnam
00197C  3  AB                   PLB
00197D  3  20 8C 30             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001980  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001983  3  A0 01                LDY#1                   ; secondary address
001985  3  8B                   PHB
001986  3  DA A2 00 DA          SETBANK 0
00198A  3  AB FA        
00198C  3  22 44 FD 00          JSL     LSETLFS
001990  3  A5 7A                LDA     <Smemh
001992  3  8F 23 03 00          STA     F:LOADBUFH
001996  3  A5 79                LDA     <Smeml
001998  3  8F 22 03 00          STA     F:LOADBUFL
00199C  3  A9 02                LDA     #DATABANK
00199E  3  8F 24 03 00          STA     F:LOADBANK
0019A2  3  22 4C FD 00          JSL     LLOAD
0019A6  3  AF 23 03 00          LDA     F:LOADBUFH
0019AA  3  85 7C                STA     <Svarh
0019AC  3  AF 22 03 00          LDA     F:LOADBUFL
0019B0  3  85 7B                STA     <Svarl
0019B2  3  AB                   PLB
0019B3  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0019B5  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0019B7  3  20 ED 2C             JSR     LAB_18C3
0019BA  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0019BD  3               
0019BD  3               
0019BD  3               ;___V_ERR___________________________________________________
0019BD  3               ;
0019BD  3               ; UTILIZE BIOS TO REPORT IEC IO CHANNEL STATUS
0019BD  3               ;
0019BD  3               ;
0019BD  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
0019BD  3               ; THIS IS NATIVE '816 CODE
0019BD  3               ;__________________________________________________________
0019BD  3               V_ERR:
0019BD  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0019C1  3  A9 C0                LDA     #$C0
0019C3  3  8F 1F 03 00          STA     f:IECMSGM
0019C7  3  A0 00                LDY     #$00
0019C9  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0019CC  3               GETIECSTATUS:
0019CC  3  8B                   PHB
0019CD  3  DA                   PHX
0019CE  3  DA A2 00 DA          SETBANK 0
0019D2  3  AB FA        
0019D4  3  A9 0D                LDA     #13
0019D6  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019DA  3  A9 0A                LDA     #10
0019DC  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019E0  3  A9 00                LDA     #0              ; fn length
0019E2  3  A2 00                LDX     #0
0019E4  3  A0 00                LDY     #0
0019E6  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0019EA  3  FA                   PLX                     ; Device Number
0019EB  3  A0 0F                LDY     #15             ; secondary address
0019ED  3  A9 0F                LDA     #15             ; LFN NUMBER
0019EF  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
0019F3  3  22 64 FD 00          JSL     LIECOPNLF
0019F7  3  B0 1E                BCS     IECERROR
0019F9  3  A2 0F                LDX     #15
0019FB  3  22 60 FD 00          JSL     LIECINPC
0019FF  3  B0 16                BCS     IECERROR
001A01  3               GETIECSTATUS_1:
001A01  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A05  3  B0 10                BCS     IECERROR
001A07  3  C9 0D                CMP     #13
001A09  3  F0 0C                BEQ     IECERROR
001A0B  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A0F  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001A13  3  4A                   LSR                     ; shift time out read ..
001A14  3  4A                   LSR                     ; .. into carry bit
001A15  3  90 EA                BCC     GETIECSTATUS_1  ; all ok, do another
001A17  3               IECERROR:
001A17  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001A1B  3  A9 0F                LDA     #15
001A1D  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001A21  3  A9 0D                LDA     #13
001A23  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A27  3  A9 0A                LDA     #10
001A29  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A2D  3  AB                   PLB
001A2E  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001A30  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001A32  3  20 ED 2C             JSR     LAB_18C3
001A35  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001A38  3               
001A38  3               
001A38  3               
001A38  3               ;___V_DIR___________________________________________________
001A38  3               ;
001A38  3               ; UTILIZE BIOS TO DISPLAY DISK DIRECTORY
001A38  3               ;
001A38  3               ;
001A38  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
001A38  3               ; THIS IS NATIVE '816 CODE
001A38  3               ;__________________________________________________________
001A38  3               V_DIR:
001A38  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001A3C  3  A9 C0                LDA     #$C0
001A3E  3  8F 1F 03 00          STA     f:IECMSGM
001A42  3  A0 00                LDY     #$00
001A44  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001A47  3  8B                   PHB
001A48  3  DA                   PHX
001A49  3  A9 24                LDA     #'$'
001A4B  3  8F 00 0F 00          STA     f:FNBUFFER
001A4F  3  DA A2 00 DA          SETBANK 0
001A53  3  AB FA        
001A55  3  A9 0D                LDA     #13
001A57  3  22 00 FD 00          JSL     LPRINTVEC
001A5B  3  A9 0A                LDA     #10
001A5D  3  22 00 FD 00          JSL     LPRINTVEC
001A61  3  A9 01                LDA     #1              ; fn length
001A63  3  A2 00                LDX     #<FNBUFFER
001A65  3  A0 0F                LDY     #>FNBUFFER
001A67  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001A6B  3  FA                   PLX                     ; Device Number
001A6C  3  A0 00                LDY     #0              ; secondary address
001A6E  3  A9 0F                LDA     #15             ; LFN NUMBER
001A70  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001A74  3  22 64 FD 00          JSL     LIECOPNLF
001A78  3  B0 9D                BCS     IECERROR
001A7A  3  A2 0F                LDX     #15
001A7C  3  22 60 FD 00          JSL     LIECINPC
001A80  3  B0 95                BCS     IECERROR
001A82  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A86  3               GETIECDIRECTORY_1:
001A86  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A8A  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A8E  3  48                   PHA
001A8F  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A93  3  FA                   PLX
001A94  3  AB                   PLB
001A95  3  8B                   PHB
001A96  3  20 0B 44             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
001A99  3  DA A2 00 DA          SETBANK 0
001A9D  3  AB FA        
001A9F  3  A9 20                LDA     #' '
001AA1  3  22 00 FD 00          JSL     LPRINTVEC
001AA5  3  A9 20                LDA     #' '
001AA7  3  22 00 FD 00          JSL     LPRINTVEC
001AAB  3  22 2C FD 00          JSL     LIECIN
001AAF  3  C9 00                CMP     #$00
001AB1  3  F0 04                BEQ     GETIECDIRECTORY_2A
001AB3  3  22 00 FD 00          JSL     LPRINTVEC
001AB7  3               GETIECDIRECTORY_2A:
001AB7  3  22 2C FD 00          JSL     LIECIN
001ABB  3  C9 00                CMP     #$00
001ABD  3  F0 04                BEQ     GETIECDIRECTORY_2
001ABF  3  22 00 FD 00          JSL     LPRINTVEC
001AC3  3               GETIECDIRECTORY_2:
001AC3  3  22 2C FD 00          JSL     LIECIN          ; input ENTRY TEXT byte from the serial bus
001AC7  3  22 00 FD 00          JSL     LPRINTVEC
001ACB  3  C9 00                CMP     #$00
001ACD  3  F0 29                BEQ     GETIECDIRECTORY_3; END ENTRY
001ACF  3               
001ACF  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001AD3  3  4A                   LSR                     ; shift time out read ..
001AD4  3  4A                   LSR                     ; .. into carry bit
001AD5  3  90 EC                BCC     GETIECDIRECTORY_2; all ok, do another
001AD7  3               GETIECDIRECTORY_END:
001AD7  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001ADB  3  A9 0F                LDA     #15
001ADD  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001AE1  3  A9 0D                LDA     #13
001AE3  3  22 00 FD 00          JSL     LPRINTVEC
001AE7  3  A9 0A                LDA     #10
001AE9  3  22 00 FD 00          JSL     LPRINTVEC
001AED  3  AB                   PLB
001AEE  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001AF0  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001AF2  3  20 ED 2C             JSR     LAB_18C3
001AF5  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001AF8  3               
001AF8  3               GETIECDIRECTORY_3:
001AF8  3  A9 0D                LDA     #13
001AFA  3  22 00 FD 00          JSL     LPRINTVEC
001AFE  3  A9 0A                LDA     #10
001B00  3  22 00 FD 00          JSL     LPRINTVEC
001B04  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001B08  3  C9 01                CMP     #$01
001B0A  3  D0 CB                BNE     GETIECDIRECTORY_END
001B0C  3  4C 86 1A             JMP     GETIECDIRECTORY_1
001B0F  3               
001B0F  3               
001B0F  3               ;___V_DISKCMD______________________________________________
001B0F  3               ;
001B0F  3               ; UTILIZE BIOS TO SEND A DISK COMMAND
001B0F  3               ;
001B0F  3               ;
001B0F  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (COMMAND) AND ONE NUMERIC VAR (DEVICE)
001B0F  3               ; THIS IS NATIVE '816 CODE
001B0F  3               ;__________________________________________________________
001B0F  3               V_DISKCMD:                      ; save BASIC program
001B0F  3  20 6A 2F             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001B12  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001B14  3  D0 08                BNE     V_DISKCMD_GO    ; YES, CONTINUE ON
001B16  3               V_DISKCMD_ERR:
001B16  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001B18  3  20 4C 24             JSR     LAB_XERR
001B1B  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001B1E  3               V_DISKCMD_GO:
001B1E  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001B22  3  A9 C0                LDA     #$C0
001B24  3  8F 1F 03 00          STA     f:IECMSGM
001B28  3  20 7D 39             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001B2B  3               ; space returns with A = length, X=$71=pointer low byte,
001B2B  3               ; Y=$72=pointer high byte
001B2B  3  86 B8                STX     <ssptr_l
001B2D  3  84 B9                STY     <ssptr_h
001B2F  3  AA                   TAX
001B30  3  A0 00                LDY     #$00
001B32  3               V_DISKCMD_1:
001B32  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001B36  3  B5 B8 C9 00  
001B3A  3  D0 04 A2 00  
001B48  3  DA                   PHX
001B49  3  BB                   TYX
001B4A  3  9F 00 0F 00          STA     f:FNBUFFER,X
001B4E  3  FA                   PLX
001B4F  3  CA                   DEX
001B50  3  E0 00                CPX     #$00
001B52  3  F0 03                BEQ     V_DISKCMD_2
001B54  3  C8                   INY
001B55  3  D0 DB                BNE     V_DISKCMD_1
001B57  3               V_DISKCMD_2:
001B57  3  BB                   TYX
001B58  3  A9 00                LDA     #0
001B5A  3  9F 01 0F 00          STA     f:FNBUFFER+1,X
001B5E  3  8B                   PHB
001B5F  3  DA A2 00 DA          SETBANK 0
001B63  3  AB FA        
001B65  3  A9 00                LDA     #0              ; fn length
001B67  3  A2 00                LDX     #0
001B69  3  A0 00                LDY     #0
001B6B  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001B6F  3  AB                   PLB
001B70  3  20 8C 30             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001B73  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER (DEVICE NUMBER), RETURN IN X
001B76  3  8B                   PHB
001B77  3  DA A2 00 DA          SETBANK 0
001B7B  3  AB FA        
001B7D  3  A0 0F                LDY     #15             ; secondary address
001B7F  3  A9 0F                LDA     #15             ; LFN NUMBER
001B81  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001B85  3  22 64 FD 00          JSL     LIECOPNLF
001B89  3  B0 27                BCS     V_DISKCMD_ERR1
001B8B  3  A2 0F                LDX     #15
001B8D  3  22 5C FD 00          JSL     LIECOUTC
001B91  3  A2 00                LDX     #$00
001B93  3               V_DISKCMD_3:
001B93  3  BF 00 0F 00          LDA     f:FNBUFFER,X
001B97  3  C9 00                CMP     #$00
001B99  3  F0 09                BEQ     V_DISKCMD_4
001B9B  3  22 30 FD 00          JSL     LIECOUT         ; OUTPUT a byte To the serial bus
001B9F  3  B0 11                BCS     V_DISKCMD_ERR1
001BA1  3               
001BA1  3  E8                   INX
001BA2  3  80 EF                BRA     V_DISKCMD_3
001BA4  3               V_DISKCMD_4:
001BA4  3  A9 0F                LDA     #15
001BA6  3  22 38 FD 00          JSL     LUNLSTN
001BAA  3  A9 0F                LDA     #15
001BAC  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BB0  3  AB                   PLB
001BB1  3  60                   RTS
001BB2  3               V_DISKCMD_ERR1:
001BB2  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001BB6  3  A9 0F                LDA     #15
001BB8  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BBC  3  A9 0D                LDA     #13
001BBE  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001BC2  3  A9 0A                LDA     #10
001BC4  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001BC8  3  AB                   PLB
001BC9  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001BCB  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001BCD  3  20 ED 2C             JSR     LAB_18C3
001BD0  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001BD3  3               
001BD3  3               
001BD3  3               
001BD3  3               ;___V_OPEN__________________________________________________
001BD3  3               ;
001BD3  3               ; UTILIZE BIOS TO OPEN AN IEC IO CHANNEL
001BD3  3               ;
001BD3  3               ;
001BD3  3               ; BASIC COMMAND EXPECTS THREE NUMERIC VARS, AND ONE STRING
001BD3  3               ; VAR
001BD3  3               ; FILE#, DEVICE, SECONDARY ADDRESS, FILENAME
001BD3  3               ; THIS IS NATIVE '816 CODE
001BD3  3               ;__________________________________________________________
001BD3  3               V_OPEN:
001BD3  3  8B                   PHB
001BD4  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001BD8  3  A9 C0                LDA     #$C0
001BDA  3  8F 1F 03 00          STA     f:IECMSGM
001BDE  3  A0 00                LDY     #$00
001BE0  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001BE3  3  DA                   PHX
001BE4  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BE7  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001BEA  3  DA                   PHX
001BEB  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BEE  3  20 06 3C             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (SECONDARY ADDRESS)
001BF1  3  DA                   PHX
001BF2  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BF5  3  20 6A 2F             JSR     LAB_EVEX        ; GET THE FOURTH PARAMETER
001BF8  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001BFA  3  D0 08                BNE     V_OPEN_GO       ; YES, CONTINUE ON
001BFC  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001BFE  3  20 4C 24             JSR     LAB_XERR
001C01  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001C04  3               V_OPEN_GO:
001C04  3  20 7D 39             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001C07  3               ; space returns with A = length, X=$71=pointer low byte,
001C07  3               ; Y=$72=pointer high byte
001C07  3  86 B8                STX     <ssptr_l
001C09  3  84 B9                STY     <ssptr_h
001C0B  3  AA                   TAX
001C0C  3  A0 00                LDY     #$00
001C0E  3               V_OPEN_1:
001C0E  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001C12  3  B5 B8 C9 00  
001C16  3  D0 04 A2 00  
001C24  3  DA                   PHX
001C25  3  BB                   TYX
001C26  3  9F 00 0F 00          STA     f:FNBUFFER,X
001C2A  3  FA                   PLX
001C2B  3  CA                   DEX
001C2C  3  E0 00                CPX     #$00
001C2E  3  F0 03                BEQ     V_OPEN_2
001C30  3  C8                   INY
001C31  3  D0 DB                BNE     V_OPEN_1
001C33  3               V_OPEN_2:
001C33  3  C8                   INY
001C34  3  98                   TYA                     ; fn length
001C35  3  A2 00                LDX     #<FNBUFFER
001C37  3  A0 0F                LDY     #>FNBUFFER
001C39  3  DA A2 00 DA          SETBANK 0
001C3D  3  AB FA        
001C3F  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001C43  3  FA                   PLX
001C44  3  9B                   TXY                     ; secondary address
001C45  3  FA                   PLX                     ; DEVICE NUMBER
001C46  3  68                   PLA                     ; LFN NUMBER
001C47  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001C4B  3  22 64 FD 00          JSL     LIECOPNLF
001C4F  3  B0 02                BCS     V_OPEN_IECERROR
001C51  3  AB                   PLB
001C52  3  60                   RTS
001C53  3                       V_OPEN_IECERROR:
001C53  3  4C 17 1A             JMP     IECERROR
001C56  3               
001C56  3               ;___V_CLOSE________________________________________________
001C56  3               ;
001C56  3               ; UTILIZE BIOS TO CLOSE AN IEC IO CHANNEL
001C56  3               ;
001C56  3               ;
001C56  3               ; THIS IS NATIVE '816 CODE
001C56  3               ;__________________________________________________________
001C56  3               V_CLOSE:
001C56  3  8B                   PHB
001C57  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C5A  3  DA A2 00 DA          SETBANK 0
001C5E  3  AB FA        
001C60  3  8A                   TXA
001C61  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001C65  3  AB                   PLB
001C66  3  60                   RTS
001C67  3               
001C67  3               ;___V_IECINPUT_______________________________________________
001C67  3               ;
001C67  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS INPUT
001C67  3               ;
001C67  3               ;
001C67  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001C67  3               ; THIS IS NATIVE '816 CODE
001C67  3               ;__________________________________________________________
001C67  3               V_IECINPUT:
001C67  3  8B                   PHB
001C68  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C6B  3  DA A2 00 DA          SETBANK 0
001C6F  3  AB FA        
001C71  3  22 60 FD 00          JSL     LIECINPC
001C75  3  B0 02                BCS     V_IECINPUT_IECERROR
001C77  3  AB                   PLB
001C78  3  60                   RTS
001C79  3                       V_IECINPUT_IECERROR:
001C79  3  AB                   PLB
001C7A  3  4C 17 1A             JMP     IECERROR
001C7D  3               
001C7D  3               ;___V_IECOUTPUT______________________________________________
001C7D  3               ;
001C7D  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS OUTPUT
001C7D  3               ;
001C7D  3               ;
001C7D  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001C7D  3               ; THIS IS NATIVE '816 CODE
001C7D  3               ;__________________________________________________________
001C7D  3               V_IECOUTPUT:
001C7D  3  8B                   PHB
001C7E  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C81  3  DA A2 00 DA          SETBANK 0
001C85  3  AB FA        
001C87  3  22 5C FD 00          JSL     LIECOUTC
001C8B  3  B0 02                BCS     V_IECOUTPUT_IECERROR
001C8D  3  AB                   PLB
001C8E  3  60                   RTS
001C8F  3                       V_IECOUTPUT_IECERROR:
001C8F  3  AB                   PLB
001C90  3  4C 17 1A             JMP     IECERROR
001C93  3               
001C93  3               
001C93  3               ;___V_PUTN__________________________________________________
001C93  3               ;
001C93  3               ; UTILIZE BIOS TO PRINT TO AN IEC IO CHANNEL
001C93  3               ;
001C93  3               ; STARTING WITH FILE#, OUTPUT STRING
001C93  3               ; THIS IS NATIVE '816 CODE
001C93  3               ;__________________________________________________________
001C93  3               V_PUTN:
001C93  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C96  3  86 04                STX     <TMPFLG
001C98  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C9B  3               
001C9B  3  20 6A 2F             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001C9E  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001CA0  3  D0 08                BNE     V_PUTN_GO       ; YES, CONTINUE ON
001CA2  3               V_PUTN_ERR:
001CA2  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001CA4  3  20 4C 24             JSR     LAB_XERR
001CA7  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001CAA  3               V_PUTN_GO:
001CAA  3  20 7D 39             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001CAD  3               ; space returns with A = length, X=$71=pointer low byte,
001CAD  3               ; Y=$72=pointer high byte
001CAD  3  86 B8                STX     <ssptr_l
001CAF  3  84 B9                STY     <ssptr_h
001CB1  3  AA                   TAX
001CB2  3  A0 00                LDY     #$00
001CB4  3               V_PUTN_1:
001CB4  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001CB8  3  B5 B8 C9 00  
001CBC  3  D0 04 A2 00  
001CCA  3  DA                   PHX
001CCB  3  5A                   PHY
001CCC  3  8B                   PHB
001CCD  3  DA A2 00 DA          SETBANK 0
001CD1  3  AB FA        
001CD3  3  A6 04                LDX     <TMPFLG
001CD5  3  48                   PHA
001CD6  3  22 30 FD 00          JSL     LIECOUT
001CDA  3  68                   PLA
001CDB  3  22 00 FD 00          JSL     LPRINTVEC
001CDF  3  AB                   PLB
001CE0  3  7A                   PLY
001CE1  3  FA                   PLX
001CE2  3  CA                   DEX
001CE3  3  E0 00                CPX     #00
001CE5  3  F0 03                BEQ     V_PUTN_2
001CE7  3  C8                   INY
001CE8  3  D0 CA                BNE     V_PUTN_1
001CEA  3               V_PUTN_2:
001CEA  3  60                   RTS
001CEB  3               
001CEB  3               
001CEB  3               
001CEB  3               ;___LAB_IECST_______________________________________________
001CEB  3               ;
001CEB  3               ; RETURN IEC STATUS BYTE
001CEB  3               ;
001CEB  3               ; THIS IS NATIVE '816 CODE
001CEB  3               ;__________________________________________________________
001CEB  3               LAB_IECST:
001CEB  3  48                   PHA
001CEC  3  AF 17 03 00          LDA     f:IECSTW        ; get IECSTW into low byte
001CF0  3  A8                   TAY
001CF1  3  68                   PLA
001CF2  3  A9 00                LDA     #0              ; NO high byte
001CF4  3  20 25 35             JSR     LAB_AYFC
001CF7  3  60                   RTS
001CF8  3               LAB_PIECST:
001CF8  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
001CFA  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
001CFE  3  60                   RTS
001CFF  3               
001CFF  3               ;___V_GETN_________________________________________________
001CFF  3               ;
001CFF  3               ; UTILIZE BIOS TO INPUT FROM AN IEC IO CHANNEL
001CFF  3               ;
001CFF  3               ; LOTS OF PARAMETERS :)  STARTING WITH FILE#
001CFF  3               ; THIS IS NATIVE '816 CODE
001CFF  3               ;__________________________________________________________
001CFF  3               V_GETN:
001CFF  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001D02  3  DA                   PHX                     ; STORE DEVICE NUMBER
001D03  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D06  3  20 67 32             JSR     LAB_GVAR        ; get var address
001D09  3  85 97                STA     <Lvarpl         ; save var address low byte
001D0B  3  84 98                STY     <Lvarph         ; save var address high byte
001D0D  3  FA                   PLX
001D0E  3  8B                   PHB
001D0F  3  DA A2 00 DA          SETBANK 0
001D13  3  AB FA        
001D15  3  A6 04                LDX     <TMPFLG
001D17  3  22 2C FD 00          JSL     LIECIN          ; get input byte
001D1B  3  AB                   PLB
001D1C  3               
001D1C  3  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
001D1E  3  30 07                BMI     LAB_GETNS       ; go get string character
001D20  3               ; was numeric get
001D20  3  A8                   TAY                     ; copy character to Y
001D21  3  20 32 35             JSR     LAB_1FD0        ; convert Y to byte in FAC1
001D24  3  4C 5A 41             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
001D27  3               LAB_GETNS:
001D27  3  48                   PHA
001D28  3  A9 01                LDA     #$01
001D2A  3  20 96 36             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
001D2D  3               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
001D2D  3  68                   PLA                     ; get character back
001D2E  3  A0 00                LDY     #$00            ; clear index
001D30  3  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
001D34  3  01 B5 AD C9  
001D38  3  00 D0 04 A2  
001D46  3  20 F9 36             JSR     LAB_RTST        ; check for space on descriptor stack then put address
001D49  3               ; and length on descriptor stack and update stack pointers
001D49  3  4C 04 2B             JMP     LAB_17D5        ; do string LET and return
001D4C  3               
001D4C  2                       .INCLUDE "screencmds.asm"
001D4C  3               ;___SCNCLR_________________________________________________
001D4C  3               ;
001D4C  3               ; UTILIZE BIOS TO CLEAR SCREEN
001D4C  3               ;
001D4C  3               ;
001D4C  3               ; THIS IS NATIVE '816 CODE
001D4C  3               ;__________________________________________________________
001D4C  3               V_SCNCLR:
001D4C  3  8B                   PHB
001D4D  3  DA A2 00 DA          SETBANK 0
001D51  3  AB FA        
001D53  3  22 6C FD 00          JSL     LClearScrVec
001D57  3  AB                   PLB
001D58  3  60                   RTS
001D59  3               
001D59  3               
001D59  3               ;___LOCATE_________________________________________________
001D59  3               ;
001D59  3               ; UTILIZE BIOS TO LOCATE CURSOR
001D59  3               ;
001D59  3               ;  TAKES TWO PARAMETERS X,Y
001D59  3               ;
001D59  3               ; THIS IS NATIVE '816 CODE
001D59  3               ;__________________________________________________________
001D59  3               V_LOCATE:
001D59  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001D5C  3  DA                   PHX
001D5D  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D60  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001D63  3  7A                   PLY
001D64  3  8B                   PHB
001D65  3  DA A2 00 DA          SETBANK 0
001D69  3  AB FA        
001D6B  3  22 0C FD 00          JSL     LSetXYVEC
001D6F  3  AB                   PLB
001D70  3  60                   RTS
001D71  3               
001D71  3               ;___COLOR_________________________________________________
001D71  3               ;
001D71  3               ; UTILIZE BIOS TO SET COLORS
001D71  3               ;
001D71  3               ;  TAKES TWO PARAMETERS BACKGROUND,FOREGROUND
001D71  3               ;
001D71  3               ; THIS IS NATIVE '816 CODE
001D71  3               ;__________________________________________________________
001D71  3               V_COLOR:
001D71  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001D74  3  8A                   TXA
001D75  3  29 0F                AND     #$0F
001D77  3  48                   PHA
001D78  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D7B  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001D7E  3  8A                   TXA
001D7F  3  29 0F                AND     #$0F
001D81  3  85 04                STA     <TMPFLG
001D83  3  68                   PLA
001D84  3  18                   CLC
001D85  3  0A                   ASL
001D86  3  0A                   ASL
001D87  3  0A                   ASL
001D88  3  0A                   ASL
001D89  3  05 04                ORA     <TMPFLG
001D8B  3  8B                   PHB
001D8C  3  DA A2 00 DA          SETBANK 0
001D90  3  AB FA        
001D92  3  22 18 FD 00          JSL     LSetColorVEC
001D96  3  AB                   PLB
001D97  3  60                   RTS
001D98  3               
001D98  3               ;___V_SPEEK()______________________________________________
001D98  3               ;
001D98  3               ; GET VALUE FROM SCREEN MEMORY
001D98  3               ;
001D98  3               ;  TAKES ONE PARAMETER (ADDRESS), RETURNS VALUE
001D98  3               ;
001D98  3               ; THIS IS NATIVE '816 CODE
001D98  3               ;__________________________________________________________
001D98  3               V_SPEEK:
001D98  3  20 AA 3C             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
001D9B  3               
001D9B  3  8B                   PHB
001D9C  3  DA A2 00 DA          SETBANK 0
001DA0  3  AB FA        
001DA2  3  B2 11                LDA     (Itempl)
001DA4  3  AB                   PLB
001DA5  3  A8                   TAY                     ; copy byte to Y
001DA6  3  4C 32 35             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
001DA9  3               
001DA9  3               
001DA9  3               ;___V_SPOKE_________________________________________________
001DA9  3               ;
001DA9  3               ; PUT VALUE IN SCREEN MEMORY
001DA9  3               ;
001DA9  3               ;  TAKES TWO PARAMETERS ADDRESS,VALUE
001DA9  3               ;
001DA9  3               ; THIS IS NATIVE '816 CODE
001DA9  3               ;__________________________________________________________
001DA9  3               V_SPOKE:
001DA9  3  20 91 3C             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
001DAC  3  8B                   PHB
001DAD  3  DA A2 00 DA          SETBANK 0
001DB1  3  AB FA        
001DB3  3  8A                   TXA
001DB4  3  92 11                STA     (Itempl)
001DB6  3  AB                   PLB
001DB7  3  60                   RTS
001DB8  3               
001DB8  3               ;___V_SCREEN_________________________________________________
001DB8  3               ;
001DB8  3               ;  SET SCREEN MODE
001DB8  3               ;
001DB8  3               ;  TAKES UP TO THREE PARAMETERS
001DB8  3               ;  FIRST PARAMETER SCREEN MODE
001DB8  3               ;  0=TEXT MODE
001DB8  3               ;  1=LORES MODE
001DB8  3               ;  2=HIRES MODE
001DB8  3               ;
001DB8  3               ;  TEXT MODE PARAMETERS
001DB8  3               ;  0=40 COLUMNS
001DB8  3               ;  1=80 COLUMNS
001DB8  3               ;
001DB8  3               ;  LORES MODE SECOND PARAMETER
001DB8  3               ;  0=SINGLE LORES
001DB8  3               ;  1=DOUBLE LORES
001DB8  3               ;  LORES MODE THIRD PARAMETER
001DB8  3               ;  0=MIXED MODE
001DB8  3               ;  1=FULL SCREEN MODE
001DB8  3               ;
001DB8  3               ;  HIRES MODE SECOND PARAMETER
001DB8  3               ;  0=SINGLE HIRES
001DB8  3               ;  1=DOUBLE HIRES
001DB8  3               ;  2=QUAD HIRES
001DB8  3               ;  3=MONO HIRES
001DB8  3               ;  HIRES MODE THIRD PARAMETER
001DB8  3               ;  0=MIXED MODE
001DB8  3               ;  1=FULL SCREEN MODE
001DB8  3               ;
001DB8  3               ; THIS IS NATIVE '816 CODE
001DB8  3               ;__________________________________________________________
001DB8  3               V_SCREEN:
001DB8  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (MODE)
001DBB  3               V_SCREEN1:
001DBB  3  86 06                STX     <VIDEOMODE
001DBD  3  E0 00                CPX     #00
001DBF  3  D0 03                BNE     *+5
001DC1  3  4C DB 1D             JMP     SETUPMODE0
001DC4  3  E0 01                CPX     #01
001DC6  3  D0 03                BNE     *+5
001DC8  3  4C 13 1E             JMP     SETUPMODE1
001DCB  3  E0 02                CPX     #02
001DCD  3  D0 03                BNE     *+5
001DCF  3  4C 7C 1E             JMP     SETUPMODE2
001DD2  3               
001DD2  3  A2 02                LDX     #$02            ; SYNTAX ERROR
001DD4  3  20 4C 24             JSR     LAB_XERR
001DD7  3  4C 25 25             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001DDA  3  60                   RTS
001DDB  3               
001DDB  3               SETUPMODE0:                     ; TEXT MODE
001DDB  3  A9 01                LDA     #$01
001DDD  3  8F 35 FE 00          STA     F:VideoTextMode
001DE1  3  A9 02                LDA     #$02
001DE3  3  8F 36 FE 00          STA     F:VideoLoresMode
001DE7  3  8F 38 FE 00          STA     F:VideoHiresMode
001DEB  3  20 8C 30             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001DEE  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (PATTERN)
001DF1  3  E0 00                CPX     #$00
001DF3  3  D0 0E                BNE     SETUPMODE0_80
001DF5  3  A9 02                LDA     #$02
001DF7  3  8F 3A FE 00          STA     F:Video80col
001DFB  3  A9 28                LDA     #40
001DFD  3  8F 43 03 00          STA     F:VIDEOWIDTH
001E01  3  80 0C                BRA     SETUPMODE0_CLEAR
001E03  3               SETUPMODE0_80:
001E03  3  A9 01                LDA     #$01
001E05  3  8F 3A FE 00          STA     F:Video80col
001E09  3  A9 50                LDA     #80
001E0B  3  8F 43 03 00          STA     F:VIDEOWIDTH
001E0F  3               SETUPMODE0_CLEAR:
001E0F  3  4C 4C 1D             JMP     V_SCNCLR
001E12  3  60                   RTS
001E13  3               
001E13  3               SETUPMODE1:                     ; LORES MODE
001E13  3  A9 01                LDA     #$01
001E15  3  8F 36 FE 00          STA     F:VideoLoresMode
001E19  3  A9 02                LDA     #$02
001E1B  3  8F 35 FE 00          STA     F:VideoTextMode
001E1F  3  8F 38 FE 00          STA     F:VideoHiresMode
001E23  3  20 8C 30             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E26  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (PATTERN)
001E29  3               
001E29  3  E0 00                CPX     #$00
001E2B  3  D0 08                BNE     SETUPMODE1_DOUBLE
001E2D  3  A9 02                LDA     #$02
001E2F  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E33  3  80 0A                BRA     SETUPMODE1_CLEAR
001E35  3               SETUPMODE1_DOUBLE:
001E35  3  A9 01                LDA     #$01
001E37  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E3B  3  A9 11                LDA     #$11
001E3D  3  85 06                STA     <VIDEOMODE
001E3F  3               SETUPMODE1_CLEAR:
001E3F  3  08                   PHP                     ; Clear Lores RAM
001E40  3  8B                   PHB
001E41  3  DA A2 00 DA          SETBANK 0
001E45  3  AB FA        
001E47  3  C2 10                INDEX16
001E49  3  A9 00                LDA     #$00
001E4B  3  A2 00 00             LDX     #$0000
001E4E  3               :
001E4E  3  9D 00 10             STA     $1000,X
001E51  3  E8                   INX
001E52  3  E0 00 18             CPX     #$1800
001E55  3  D0 F7                BNE     :-
001E57  3  E2 10                INDEX8
001E59  3  AB                   PLB
001E5A  3  28                   PLP
001E5B  3  20 8C 30             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001E5E  3  20 06 3C             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
001E61  3  E0 00                CPX     #$00
001E63  3  D0 0A                BNE     SETUPMODE1_MIXED
001E65  3  20 36 35             JSR     LAB_CKRN        ; check not Direct, back here if ok
001E68  3  A9 02                LDA     #$02
001E6A  3  8F 3B FE 00          STA     F:VideoMixedMode
001E6E  3  60                   RTS
001E6F  3               SETUPMODE1_MIXED:
001E6F  3  A9 01                LDA     #$01
001E71  3  8F 3B FE 00          STA     F:VideoMixedMode
001E75  3  A5 06                LDA     <VIDEOMODE
001E77  3  09 80                ORA     #$80
001E79  3  85 06                STA     <VIDEOMODE
001E7B  3  60                   RTS
001E7C  3               
001E7C  3               
001E7C  3               SETUPMODE2:               ; HIRES MODE
001E7C  3  A9 01                LDA     #$01
001E7E  3  8F 38 FE 00          STA     F:VideoHiresMode
001E82  3  A9 02                LDA     #$02
001E84  3  8F 35 FE 00          STA     F:VideoTextMode
001E88  3  8F 36 FE 00          STA     F:VideoLoresMode
001E8C  3  20 8C 30             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E8F  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (PATTERN)
001E92  3               
001E92  3  E0 00                CPX     #$00
001E94  3  D0 10                BNE     SETUPMODE2_DOUBLE
001E96  3  A9 02                LDA     #$02
001E98  3  8F 39 FE 00          STA     F:VideoDoubleHires
001E9C  3  8F 3C FE 00          STA     F:VideoQuadHires
001EA0  3  8F 3D FE 00          STA     F:VideoMonoHires
001EA4  3  80 4A                BRA     SETUPMODE2_CLEAR
001EA6  3               SETUPMODE2_DOUBLE:
001EA6  3  E0 01                CPX     #$01
001EA8  3  D0 16                BNE     SETUPMODE2_QUAD
001EAA  3  A9 01                LDA     #$01
001EAC  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EB0  3  A9 02                LDA     #$02
001EB2  3  8F 3C FE 00          STA     F:VideoQuadHires
001EB6  3  8F 3D FE 00          STA     F:VideoMonoHires
001EBA  3  80 34                BRA     SETUPMODE2_CLEAR
001EBC  3  A9 12                LDA     #$12
001EBE  3  85 06                STA     <VIDEOMODE
001EC0  3               SETUPMODE2_QUAD:
001EC0  3  E0 02                CPX     #$02
001EC2  3  D0 16                BNE     SETUPMODE2_MONO
001EC4  3  A9 01                LDA     #$01
001EC6  3  8F 3C FE 00          STA     F:VideoQuadHires
001ECA  3  A9 02                LDA     #$02
001ECC  3  8F 39 FE 00          STA     F:VideoDoubleHires
001ED0  3  8F 3D FE 00          STA     F:VideoMonoHires
001ED4  3  80 1A                BRA     SETUPMODE2_CLEAR
001ED6  3  A9 22                LDA     #$22
001ED8  3  85 06                STA     <VIDEOMODE
001EDA  3               SETUPMODE2_MONO:
001EDA  3  A9 01                LDA     #$01
001EDC  3  8F 3D FE 00          STA     F:VideoMonoHires
001EE0  3  A9 02                LDA     #$02
001EE2  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EE6  3  8F 3C FE 00          STA     F:VideoQuadHires
001EEA  3  80 04                BRA     SETUPMODE2_CLEAR
001EEC  3  A9 32                LDA     #$32
001EEE  3  85 06                STA     <VIDEOMODE
001EF0  3               
001EF0  3               SETUPMODE2_CLEAR:
001EF0  3  08                   PHP                     ; Clear Hires RAM
001EF1  3  8B                   PHB
001EF2  3  DA A2 00 DA          SETBANK 0
001EF6  3  AB FA        
001EF8  3  C2 10                INDEX16
001EFA  3  A9 00                LDA     #$00
001EFC  3  A2 00 00             LDX     #$0000
001EFF  3               :
001EFF  3  9D 00 20             STA     $2000,X
001F02  3  E8                   INX
001F03  3  E0 00 80             CPX     #$8000
001F06  3  D0 F7                BNE     :-
001F08  3  E2 10                INDEX8
001F0A  3  AB                   PLB
001F0B  3  28                   PLP
001F0C  3  20 8C 30             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001F0F  3  20 06 3C             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
001F12  3  E0 00                CPX     #$00
001F14  3  D0 0A                BNE     SETUPMODE2_MIXED
001F16  3  20 36 35             JSR     LAB_CKRN        ; check not Direct, back here if ok
001F19  3  A9 02                LDA     #$02
001F1B  3  8F 3B FE 00          STA     F:VideoMixedMode
001F1F  3  60                   RTS
001F20  3               SETUPMODE2_MIXED:
001F20  3  A9 01                LDA     #$01
001F22  3  8F 3B FE 00          STA     F:VideoMixedMode
001F26  3  A5 06                LDA     <VIDEOMODE
001F28  3  09 80                ORA     #$80
001F2A  3  85 06                STA     <VIDEOMODE
001F2C  3  60                   RTS
001F2D  3               
001F2D  3               
001F2D  3               ;___V_PLOT__________________________________________________
001F2D  3               ;
001F2D  3               ;  PLOT ON SCREEN
001F2D  3               ;         TAKES THREE PARAMETERS,  X,Y,COLOR
001F2D  3               ;
001F2D  3               ; THIS IS NATIVE '816 CODE
001F2D  3               ;__________________________________________________________
001F2D  3               V_PLOT:
001F2D  3  60                   RTS
001F2E  3               
001F2E  3               
001F2E  3               ;___V_PATTERN________________________________________________
001F2E  3               ;
001F2E  3               ;  DEFINE GRAPHICS PATTERN
001F2E  3               ;
001F2E  3               ;  TAKES 10 PARAMETERS
001F2E  3               ;       PATTERN NUM (0-255)
001F2E  3               ;       COLOR NUM (0-255)
001F2E  3               ;       PATTERN DATA (8 BYTES)
001F2E  3               ; THIS IS NATIVE '816 CODE
001F2E  3               ;__________________________________________________________
001F2E  3               V_PATTERN:
001F2E  3  60                   RTS
001F2F  3               
001F2F  2                       .INCLUDE "ay38910.asm"
001F2F  3               via1regb        = $FE10         ; Register
001F2F  3               via1rega        = $FE11         ; Register
001F2F  3               via1ddrb        = $FE12         ; Register
001F2F  3               via1ddra        = $FE13         ; Register
001F2F  3               via1t1cl        = $FE14         ; Register
001F2F  3               via1t1ch        = $FE15         ; Register
001F2F  3               via1t1ll        = $FE16         ; Register
001F2F  3               via1t1lh        = $FE17         ; Register
001F2F  3               via1t2cl        = $FE18         ; Register
001F2F  3               via1t2ch        = $FE19         ; Register
001F2F  3               via1sr          = $FE1A         ; Register
001F2F  3               via1acr         = $FE1B         ; Register
001F2F  3               via1pcr         = $FE1C         ; Register
001F2F  3               via1ifr         = $FE1D         ; Register
001F2F  3               via1ier         = $FE1E         ; Register
001F2F  3               via1ora         = $FE1F         ; Register
001F2F  3               
001F2F  3               
001F2F  3               
001F2F  3               ;___SOUND__________________________________________________
001F2F  3               ;
001F2F  3               ; PLAY SOUND
001F2F  3               ;
001F2F  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
001F2F  3               ;
001F2F  3               ; THIS IS NATIVE '816 CODE
001F2F  3               ;__________________________________________________________
001F2F  3               V_SOUND:
001F2F  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001F32  3  DA                   PHX
001F33  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001F36  3  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
001F39  3               ; else do type mismatch
001F39  3  20 AA 3C             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
001F3C  3               
001F3C  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
001F3D  3  29 03                AND     #$03
001F3F  3  18                   CLC
001F40  3  0A                   ASL                     ; = *2
001F41  3  48                   PHA
001F42  3  A4 11                LDY     <Itempl
001F44  3  20 69 20             JSR     psgwr           ; SET LOW BYTE
001F47  3  68                   PLA
001F48  3  1A                   INC     A
001F49  3  A4 12                LDY     <Itemph
001F4B  3  20 69 20             JSR     psgwr           ; SET HIGH BYTE
001F4E  3  60                   RTS
001F4F  3               
001F4F  3               ;___VOLUME__________________________________________________
001F4F  3               ;
001F4F  3               ; SET VOLUME
001F4F  3               ;
001F4F  3               ;  TAKES TWO PARAMETERS CHANNEL,VOLUME
001F4F  3               ;
001F4F  3               ; THIS IS NATIVE '816 CODE
001F4F  3               ;__________________________________________________________
001F4F  3               V_VOLUME:
001F4F  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001F52  3  DA                   PHX
001F53  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001F56  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (VOLUME)
001F59  3  9B                   TXY
001F5A  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
001F5B  3  29 03                AND     #$03
001F5D  3               
001F5D  3  18                   CLC
001F5E  3  69 08                ADC     #08
001F60  3  20 69 20             JSR     psgwr
001F63  3  60                   RTS
001F64  3               
001F64  3               
001F64  3               ;___VOICE__________________________________________________
001F64  3               ;
001F64  3               ; SET VOICE
001F64  3               ;
001F64  3               ;  TAKES TWO PARAMETERS VOICE, ENVELOPE
001F64  3               ;
001F64  3               ; THIS IS NATIVE '816 CODE
001F64  3               ;__________________________________________________________
001F64  3               V_VOICE:
001F64  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001F67  3  DA                   PHX
001F68  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001F6B  3  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
001F6E  3               ; else do type mismatch
001F6E  3  20 AA 3C             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
001F71  3  7A                   PLY
001F72  3  A9 0D                LDA     #13
001F74  3  20 69 20             JSR     psgwr
001F77  3               
001F77  3  A9 0B                LDA     #11
001F79  3  A4 11                LDY     <Itempl
001F7B  3  20 69 20             JSR     psgwr           ; SET LOW BYTE
001F7E  3  A9 0C                LDA     #12
001F80  3  A4 12                LDY     <Itemph         ; SET HIGH BYTE
001F82  3  20 69 20             JSR     psgwr
001F85  3               
001F85  3  60                   RTS
001F86  3               
001F86  3               
001F86  3               
001F86  3               
001F86  3               
001F86  3               ;___NOISE__________________________________________________
001F86  3               ;
001F86  3               ; SELECT NOISE CHANNEL
001F86  3               ;
001F86  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
001F86  3               ;
001F86  3               ; THIS IS NATIVE '816 CODE
001F86  3               ;__________________________________________________________
001F86  3               V_NOISE:
001F86  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001F89  3  DA                   PHX
001F8A  3  20 8C 30             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001F8D  3  20 06 3C             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (FREQ)
001F90  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
001F91  3  DA                   PHX
001F92  3  AA                   TAX
001F93  3               
001F93  3  29 1F                AND     #%00011111
001F95  3  A8                   TAY
001F96  3  A9 06                LDA     #$06
001F98  3  20 69 20             JSR     psgwr           ; SET NOISE FREQ
001F9B  3               
001F9B  3  A9 07                LDA     #$07
001F9D  3  20 27 20             JSR     psgrd           ; GET CONFIG
001FA0  3  68                   PLA
001FA1  3  5A                   PHY
001FA2  3  29 03                AND     #$03
001FA4  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
001FA5  3  68                   PLA
001FA6  3  E0 00                CPX     #$00
001FA8  3  D0 06                BNE     NOISE_1
001FAA  3  29 37                AND     #%00110111
001FAC  3  09 01                ORA     #%00000001
001FAE  3  80 0E                BRA     NOISE_3
001FB0  3               NOISE_1:
001FB0  3  E0 01                CPX     #$01
001FB2  3  D0 06                BNE     NOISE_2
001FB4  3  29 2F                AND     #%00101111
001FB6  3  09 02                ORA     #%00000010
001FB8  3  80 04                BRA     NOISE_3
001FBA  3               NOISE_2:
001FBA  3  29 1F                AND     #%00011111
001FBC  3  09 04                ORA     #%00000100
001FBE  3               NOISE_3:
001FBE  3  A8                   TAY
001FBF  3  A9 07                LDA     #$07
001FC1  3  20 69 20             JSR     psgwr           ; SET LOW BYTE
001FC4  3  60                   RTS
001FC5  3               
001FC5  3               ;___TONE___________________________________________________
001FC5  3               ;
001FC5  3               ; SELECT TONE CHANNEL
001FC5  3               ;
001FC5  3               ;  TAKES ONE PARAMETER CHANNEL
001FC5  3               ;
001FC5  3               ; THIS IS NATIVE '816 CODE
001FC5  3               ;__________________________________________________________
001FC5  3               V_TONE:
001FC5  3  20 06 3C             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001FC8  3  DA                   PHX
001FC9  3               
001FC9  3  A9 07                LDA     #$07
001FCB  3  20 27 20             JSR     psgrd           ; GET CONFIG
001FCE  3  68                   PLA
001FCF  3  5A                   PHY
001FD0  3  29 03                AND     #$03
001FD2  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
001FD3  3  68                   PLA
001FD4  3  E0 00                CPX     #$00
001FD6  3  D0 06                BNE     TONE_1
001FD8  3  29 3E                AND     #%00111110
001FDA  3  09 08                ORA     #%00001000
001FDC  3  80 0E                BRA     TONE_3
001FDE  3               TONE_1:
001FDE  3  E0 01                CPX     #$01
001FE0  3  D0 06                BNE     TONE_2
001FE2  3  29 3D                AND     #%00111101
001FE4  3  09 10                ORA     #%00010000
001FE6  3  80 04                BRA     TONE_3
001FE8  3               TONE_2:
001FE8  3  29 3B                AND     #%00111011
001FEA  3  09 20                ORA     #%00100000
001FEC  3               TONE_3:
001FEC  3  A8                   TAY
001FED  3  A9 07                LDA     #$07
001FEF  3  20 69 20             JSR     psgwr           ; SET LOW BYTE
001FF2  3  60                   RTS
001FF3  3               
001FF3  3               
001FF3  3               ;___CONTROLLER_______________________________________________
001FF3  3               ;
001FF3  3               ; GET JOYTICK STATUS
001FF3  3               ;
001FF3  3               ;  TAKES ONE PARAMETERS JOYSTICK#, RETURNS STATUS
001FF3  3               ;
001FF3  3               ; THIS IS NATIVE '816 CODE
001FF3  3               ;__________________________________________________________
001FF3  3               LAB_CON:
001FF3  3  20 AA 3C             JSR     LAB_F2FX        ; GET THE PARAMETER, RETURN IN X (controller#)
001FF6  3  A5 11                LDA     <Itempl
001FF8  3  29 01                AND     #$01
001FFA  3  18                   CLC
001FFB  3  69 0E                ADC     #14
001FFD  3  20 27 20             JSR     psgrd           ; return value in y
002000  3  4C 32 35             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
002003  3               
002003  3               
002003  3               
002003  3               
002003  3               ;___utility functions____________________________________________
002003  3               psginit:
002003  3  A9 9C                LDA     #%10011100
002005  3  8F 13 FE 00          STA     f:via1ddra
002009  3  A9 10                LDA     #%00010000
00200B  3  8F 11 FE 00          STA     f:via1rega
00200F  3  A9 FF                LDA     #$FF
002011  3  8F 12 FE 00          STA     f:via1ddrb
002015  3  A9 00                LDA     #$00
002017  3  8F 10 FE 00          STA     f:via1regb
00201B  3  60                   RTS
00201C  3  20 AB 20             JSR     clrpsg
00201F  3               
00201F  3  A9 07                LDA     #7
002021  3  A0 3F                LDY     #$3F
002023  3  20 69 20             JSR     psgwr
002026  3  60                   RTS
002027  3               
002027  3               psgrd:
002027  3  8F 10 FE 00          STA     f:via1regb      ; select register
00202B  3  A9 1C                LDA     #%00011100      ; latch address
00202D  3  8F 11 FE 00          STA     f:via1rega
002031  3               
002031  3  8F 11 FE 00          STA     f:via1rega
002035  3  8F 11 FE 00          STA     f:via1rega
002039  3               
002039  3  A9 10                LDA     #%00010000      ; inact
00203B  3  8F 11 FE 00          STA     f:via1rega
00203F  3               
00203F  3  8F 11 FE 00          STA     f:via1rega
002043  3               
002043  3  A9 00                LDA     #$00
002045  3  8F 12 FE 00          STA     f:via1ddrb
002049  3  A9 18                LDA     #%00011000      ; latch data
00204B  3  8F 11 FE 00          STA     f:via1rega
00204F  3               
00204F  3  8F 11 FE 00          STA     f:via1rega
002053  3  8F 11 FE 00          STA     f:via1rega
002057  3               
002057  3  AF 10 FE 00          LDA     f:via1regb      ; get data
00205B  3  A8                   TAY
00205C  3  A9 FF                LDA     #$FF
00205E  3  8F 12 FE 00          STA     f:via1ddrb
002062  3  A9 10                LDA     #%00010000      ; inact
002064  3  8F 11 FE 00          STA     f:via1rega
002068  3  60                   RTS
002069  3               
002069  3               
002069  3               psgwr:
002069  3  8F 10 FE 00          STA     f:via1regb      ; select register
00206D  3  A9 1C                LDA     #%00011100      ; latch address
00206F  3  8F 11 FE 00          STA     f:via1rega
002073  3               
002073  3  8F 11 FE 00          STA     f:via1rega
002077  3  8F 11 FE 00          STA     f:via1rega
00207B  3               
00207B  3  A9 10                LDA     #%00010000      ; inact
00207D  3  8F 11 FE 00          STA     f:via1rega
002081  3               
002081  3  8F 11 FE 00          STA     f:via1rega
002085  3  8F 11 FE 00          STA     f:via1rega
002089  3  98                   TYA
00208A  3  8F 10 FE 00          STA     f:via1regb      ; store data
00208E  3               
00208E  3  8F 10 FE 00          STA     f:via1regb      ; store data
002092  3  8F 10 FE 00          STA     f:via1regb      ; store data
002096  3               
002096  3  A9 14                LDA     #%00010100      ; latch data
002098  3  8F 11 FE 00          STA     f:via1rega
00209C  3               
00209C  3  8F 11 FE 00          STA     f:via1rega
0020A0  3  8F 11 FE 00          STA     f:via1rega
0020A4  3               
0020A4  3  A9 10                LDA     #%00010000      ; inact
0020A6  3  8F 11 FE 00          STA     f:via1rega
0020AA  3  60                   RTS
0020AB  3               
0020AB  3               ;
0020AB  3               ; Clear PSG registers to default
0020AB  3               ;
0020AB  3               clrpsg:
0020AB  3  DA 5A 48 08          STORECONTEXT
0020AF  3  E2 30                ACCUMULATORINDEX8
0020B1  3  A2 00                LDX     #00
0020B3  3  A0 00                LDY     #00
0020B5  3               clrpsg1:
0020B5  3  8A                   TXA
0020B6  3  20 69 20             JSR     psgwr           ; set register X to 0
0020B9  3  E8                   INX
0020BA  3  E0 11                CPX     #17
0020BC  3  D0 F7                BNE     clrpsg1
0020BE  3  28 68 7A FA          RESTORECONTEXT
0020C2  3  60                   RTS
0020C3  3               
0020C3  2               
0020C3  2               
0020C3  2               
0020C3  2               ;___TitleScreen_____________________________________________
0020C3  2               ;
0020C3  2               ; Basic Title Screen
0020C3  2               ;
0020C3  2               ; THIS IS NATIVE '816 CODE
0020C3  2               ;__________________________________________________________
0020C3  2               TitleScreen:
0020C3  2  20 03 20             JSR     psginit
0020C6  2               
0020C6  2  A9 00                LDA     #0
0020C8  2  85 06                STA     <VIDEOMODE
0020CA  2               
0020CA  2  AF 41 03 00          LDA     f:ConsoleDevice
0020CE  2  C9 00                CMP     #$00
0020D0  2  D0 08                BNE     TitleScreen_1
0020D2  2  A9 19                LDA     #<LAB_SMSG1     ; point to sign-on message (low addr)
0020D4  2  A0 16                LDY     #>LAB_SMSG1     ; point to sign-on message (high addr)
0020D6  2  20 ED 2C             JSR     LAB_18C3        ; print null terminated string from memory
0020D9  2  60                   RTS
0020DA  2               TitleScreen_1:
0020DA  2  A9 9E                LDA     #$9E
0020DC  2  22 18 FD 00          JSL     LSetColorVEC
0020E0  2  22 6C FD 00          JSL     LClearScrVec
0020E4  2  A9 C6                LDA     #<LAB_CONMSG    ; point to sign-on message (low addr)
0020E6  2  A0 15                LDY     #>LAB_CONMSG    ; point to sign-on message (high addr)
0020E8  2  20 ED 2C             JSR     LAB_18C3        ; print null terminated string from memory
0020EB  2  60                   RTS
0020EC  2               
0020EC  2               ;___ScreenEditor____________________________________________
0020EC  2               ;
0020EC  2               ; Basic Screen editor code
0020EC  2               ;
0020EC  2               ; THIS IS NATIVE '816 CODE
0020EC  2               ;__________________________________________________________
0020EC  2               ScreenEditor:
0020EC  2  48                   PHA
0020ED  2  DA                   PHX
0020EE  2  5A                   PHY
0020EF  2  08                   PHP
0020F0  2  8B                   PHB
0020F1  2  E2 30                ACCUMULATORINDEX8
0020F3  2               ; allow prepopulate of screen
0020F3  2               ploop:
0020F3  2  22 1C FD 00          JSL     LCURSORVEC
0020F7  2  22 08 FD 00          JSL     LINPWVEC
0020FB  2  C9 FF                CMP     #$FF
0020FD  2  F0 F4                BEQ     ploop
0020FF  2  22 20 FD 00          JSL     LUNCURSORVEC
002103  2  C9 01                CMP     #01
002105  2  F0 21                BEQ     crsrup
002107  2  C9 02                CMP     #02
002109  2  F0 30                BEQ     crsrdn
00210B  2  C9 1F                CMP     #$1f
00210D  2  F0 53                BEQ     crsrlt
00210F  2  C9 04                CMP     #$04
002111  2  D0 03 4C 96          LBEQ    crsrrt
002115  2  21           
002116  2  C9 0A                CMP     #$0A
002118  2  F0 D9                BEQ     ploop
00211A  2  C9 0D                CMP     #13
00211C  2  D0 03 4C B5          LBEQ    pexit
002120  2  21           
002121  2               
002121  2  22 00 FD 00          JSL     LPRINTVEC
002125  2  4C F3 20             JMP     ploop
002128  2               
002128  2               crsrup:
002128  2  AF 31 03 00          LDA     F:CSRY
00212C  2  C9 00                CMP     #00
00212E  2  F0 C3                BEQ     ploop
002130  2  AF 31 03 00          LDA     F:CSRY
002134  2  3A                   DEC     A
002135  2  8F 31 03 00          STA     F:CSRY
002139  2  80 B8                BRA     ploop
00213B  2               crsrdn:
00213B  2  AF 31 03 00          LDA     F:CSRY
00213F  2  C9 17                CMP     #23
002141  2  F0 0B                BEQ     crsrdn_1
002143  2  AF 31 03 00          LDA     F:CSRY
002147  2  1A                   INC     A
002148  2  8F 31 03 00          STA     F:CSRY
00214C  2  80 A5                BRA     ploop
00214E  2               crsrdn_1:
00214E  2  AF 30 03 00          LDA     F:CSRX
002152  2  48                   PHA
002153  2  AF 43 03 00          LDA     F:VIDEOWIDTH
002157  2  22 14 FD 00          JSL     LSrlUpVEC
00215B  2  68                   PLA
00215C  2  8F 30 03 00          STA     F:CSRX
002160  2  80 91                BRA     ploop
002162  2               crsrlt:
002162  2  AF 30 03 00          LDA     F:CSRX
002166  2  C9 00                CMP     #00
002168  2  F0 0C                BEQ     crsrlt_1
00216A  2  AF 30 03 00          LDA     F:CSRX
00216E  2  3A                   DEC     A
00216F  2  8F 30 03 00          STA     F:CSRX
002173  2  4C F3 20             JMP     ploop
002176  2               crsrlt_1:
002176  2  AF 31 03 00          LDA     F:CSRY
00217A  2  C9 00                CMP     #00
00217C  2  D0 03 4C F3          LBEQ    ploop
002180  2  20           
002181  2  AF 43 03 00          LDA     F:VIDEOWIDTH
002185  2  3A                   dec     A
002186  2  8F 30 03 00          STA     F:CSRX
00218A  2  AF 31 03 00          LDA     F:CSRY
00218E  2  3A                   DEC     A
00218F  2  8F 31 03 00          STA     F:CSRY
002193  2  4C F3 20             JMP     ploop
002196  2               crsrrt:
002196  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00219A  2  3A                   dec     A
00219B  2  CF 30 03 00          CMP     F:CSRX
00219F  2  F0 0C                BEQ     crsrrt_1
0021A1  2  AF 30 03 00          LDA     F:CSRX
0021A5  2  1A                   INC     A
0021A6  2  8F 30 03 00          STA     F:CSRX
0021AA  2  4C F3 20             JMP     ploop
0021AD  2               crsrrt_1:
0021AD  2  A9 00                LDA     #00
0021AF  2  8F 30 03 00          STA     F:CSRX
0021B3  2  80 86                BRA     crsrdn
0021B5  2               pexit:
0021B5  2  20 E5 21             JSR     LdKbBuffer
0021B8  2  A2 50                LDX     #80
0021BA  2  A9 00                LDA     #$00
0021BC  2  9F 81 21 02          STA     f:LIbuffs,X
0021C0  2               TERMLOOP:
0021C0  2  CA                   DEX
0021C1  2  BF 81 21 02          LDA     f:LIbuffs,X
0021C5  2  C9 20                CMP     #32
0021C7  2  F0 06                BEQ     TERMLOOP_B
0021C9  2  C9 00                CMP     #00
0021CB  2  F0 08                BEQ     TERMLOOP_C
0021CD  2  80 0A                BRA     TERMLOOP_A
0021CF  2               TERMLOOP_B:
0021CF  2  A9 00                LDA     #00
0021D1  2  9F 81 21 02          STA     f:LIbuffs,X
0021D5  2               TERMLOOP_C:
0021D5  2  E0 00                CPX     #00
0021D7  2  D0 E7                BNE     TERMLOOP
0021D9  2               TERMLOOP_A:
0021D9  2  A9 0D                lda     #13
0021DB  2  22 00 FD 00          JSL     LPRINTVEC
0021DF  2  AB                   PLB
0021E0  2  28                   PLP
0021E1  2  7A                   PLY
0021E2  2  FA                   PLX
0021E3  2  68                   PLA
0021E4  2  60                   RTS
0021E5  2               
0021E5  2               
0021E5  2               LdKbBuffer:
0021E5  2               ; clear input buffer
0021E5  2  A2 51                LDX     #81
0021E7  2               :
0021E7  2  A9 00                LDA     #00
0021E9  2  9F 80 21 02          STA     f:LIbuffs-1,X
0021ED  2  CA                   DEX
0021EE  2  D0 F7                BNE     :-
0021F0  2               
0021F0  2               ; Let's calculate the screen memory offset and store it
0021F0  2  20 76 22             JSR     GetVideoAddressOffset
0021F3  2               
0021F3  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0021F7  2  C9 28                CMP     #40
0021F9  2  F0 03                BEQ     :+
0021FB  2  4C 45 22             jmp    LdKbBuffer_1c
0021FE  2               :
0021FE  2               ; are we on the first line?  If so, we know it is not continued from the previous line
0021FE  2  AF 31 03 00          LDA     F:CSRY
002202  2  A8                   TAY
002203  2  C0 00                CPY     #$00
002205  2  F0 27                BEQ     LdKbBuffer_1
002207  2               ; if prior line linked  set y-1
002207  2  C2 30                ACCUMULATORINDEX16
002209  2  AF 47 03 00          LDA     f:TEMPOFFSET
00220D  2  AA                   TAX
00220E  2  E2 20                ACCUMULATOR8
002210  2  BF FF 0F 00          LDA     F:$0FFF,X
002214  2  E2 10                INDEX8
002216  2  C9 20                CMP     #$20
002218  2  F0 14                BEQ     LdKbBuffer_1
00221A  2  C2 20                ACCUMULATOR16
00221C  2  AF 47 03 00          LDA     f:TEMPOFFSET
002220  2  38                   SEC
002221  2  E9 28 00             SBC     #40
002224  2  8F 47 03 00          STA     f:TEMPOFFSET
002228  2  E2 20                ACCUMULATOR8
00222A  2  A9 51                LDA     #81             ; get 80 chars
00222C  2  80 1D                BRA     LdKbBuffer_1b
00222E  2               ; get chars; 40 if last line char=32, 80 if not
00222E  2               
00222E  2               LdKbBuffer_1:
00222E  2               ; is this the last line on the screen?
00222E  2  C0 17                CPY     #23
002230  2  F0 17                BEQ     LdKbBuffer_1a
002232  2               ; if current line linked carries to the next set size to 80
002232  2  C2 30                ACCUMULATORINDEX16
002234  2  AF 47 03 00          LDA     f:TEMPOFFSET
002238  2  AA                   TAX
002239  2  E2 20                ACCUMULATOR8
00223B  2  BF 27 10 00          LDA     F:$1027,X
00223F  2  E2 10                INDEX8
002241  2  C9 20                CMP     #$20
002243  2  F0 04                BEQ     LdKbBuffer_1a
002245  2               LdKbBuffer_1c:
002245  2  A9 51                LDA     #81             ; get 80 chars
002247  2  80 02                BRA     LdKbBuffer_1b
002249  2               LdKbBuffer_1a:
002249  2  A9 29                LDA     #41             ; get 40 chars
00224B  2               LdKbBuffer_1b:
00224B  2  C2 30                ACCUMULATORINDEX16
00224D  2  29 FF 00             AND     #$00FF
002250  2  A8                   TAY
002251  2  AF 47 03 00          LDA     f:TEMPOFFSET
002255  2  AA                   TAX
002256  2  A9 00 00             LDA     #$0000
002259  2  85 07                STA     <LOCALWORK
00225B  2  E2 20                ACCUMULATOR8
00225D  2               LdKbBuffer_2:
00225D  2  BF 00 10 00          LDA     f:$1000,X
002261  2  DA                   PHX
002262  2  A6 07                LDX     <LOCALWORK
002264  2  9F 81 21 02          STA     f:LIbuffs,X
002268  2  E8                   INX
002269  2  86 07                STX     <LOCALWORK
00226B  2  FA                   PLX
00226C  2  E8                   INX
00226D  2  88                   DEY
00226E  2  C0 00 00             CPY     #0000
002271  2  D0 EA                BNE     LdKbBuffer_2
002273  2  E2 30                ACCUMULATORINDEX8
002275  2  60                   RTS
002276  2               
002276  2               .I8
002276  2               .A8
002276  2               GetVideoAddressOffset:
002276  2  AF 31 03 00          LDA     F:CSRY
00227A  2  C2 30                ACCUMULATORINDEX16
00227C  2  29 FF 00             AND     #$00FF
00227F  2  8F 45 03 00          STA     F:TEMP
002283  2  18                   CLC
002284  2  0A                   ASL     A
002285  2  0A                   ASL     A
002286  2  0A                   ASL     A
002287  2  0A                   ASL     A
002288  2  0A                   ASL     A
002289  2  48                   PHA
00228A  2  AF 45 03 00          LDA     F:TEMP
00228E  2  18                   CLC
00228F  2  0A                   ASL     A
002290  2  0A                   ASL     A
002291  2  0A                   ASL     A
002292  2  8F 45 03 00          STA     F:TEMP
002296  2  68                   PLA
002297  2  18                   CLC
002298  2  6F 45 03 00          ADC     F:TEMP
00229C  2  8F 47 03 00          STA     F:TEMPOFFSET
0022A0  2               ; if 80 columns double it.
0022A0  2  E2 20                ACCUMULATOR8
0022A2  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0022A6  2  C9 28                CMP     #40
0022A8  2  F0 0B                BEQ     :+
0022AA  2  C2 20                ACCUMULATOR16
0022AC  2  AF 47 03 00          LDA     F:TEMPOFFSET
0022B0  2  0A                   ASL     A
0022B1  2  8F 47 03 00          STA     F:TEMPOFFSET
0022B5  2               :
0022B5  2  E2 30                ACCUMULATORINDEX8
0022B7  2  60                   RTS
0022B8  2               
0022B8  2               
0022B8  2               
0022B8  2               .I8
0022B8  2               .A8
0022B8  2               ;___LAB_MONITOR_____________________________________________
0022B8  2               ;
0022B8  2               ; UTILIZE BIOS TO GO TO MONITOR
0022B8  2               ;
0022B8  2               ;
0022B8  2               ; THIS IS NATIVE '816 CODE
0022B8  2               ;__________________________________________________________
0022B8  2               LAB_MONITOR:
0022B8  2  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
0022B9  2  18                   CLC                     ;
0022BA  2  FB                   XCE                     ; SET NATIVE MODE
0022BB  2  DA A2 00 DA          SETBANK 0
0022BF  2  AB FA        
0022C1  2  C2 30                ACCUMULATORINDEX16
0022C3  2  A9 FF BF             LDA     #STACK          ; get the stack address
0022C6  2  1B                   TCS                     ; and set the stack to it
0022C7  2  5C 00 E0 00          JML     $00E000
0022CB  2               
0022CB  1               ;
0022CB  1               ;____________________________________________________________________________________________
0022CB  1               
0022CB  1               
0022CB  1               ;   ensure CPU Context is in a known state
0022CB  1  EA                   NOP                     ; FIX A CODE PAGE ALIGNMENT PROBLEM
0022CC  1               BASICBEGIN:
0022CC  1               
0022CC  1  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
0022CD  1  18                   CLC                     ;
0022CE  1  FB                   XCE                     ; SET NATIVE MODE
0022CF  1  C2 30                ACCUMULATORINDEX16
0022D1  1  A9 FF BF             LDA     #STACK          ; get the stack address
0022D4  1  1B                   TCS                     ; and set the stack to it
0022D5  1  A9 00 00             LDA     #$0000          ;
0022D8  1  48                   PHA                     ; Set Direct Register to 0
0022D9  1  2B                   PLD                     ;
0022DA  1               
0022DA  1                       .IF     PROGRAMBANK=DATABANK
0022DA  1               
0022DA  1                       .ELSE
0022DA  1  A2 00 10                 LDX     #$1000
0022DD  1  A0 00 10                 LDY     #$1000
0022E0  1  A9 00 10                 LDA     #$1000
0022E3  1  54 02 FF                 MVN     #PROGRAMBANK,#DATABANK; COPY TABLES $1000 THROUGH $2000 PLUS OR MINUS :) TO WORKING BANK
0022E6  1                       .ENDIF
0022E6  1  E2 30                ACCUMULATORINDEX8
0022E8  1  A9 FF                LDA     #PROGRAMBANK    ; SET DATA BANK = TO PROGRAM BANK TO ALLOW FOR INITIALIZATION FROM ROM
0022EA  1  48                   PHA
0022EB  1  AB                   PLB                     ;
0022EC  1               
0022EC  1               
0022EC  1               
0022EC  1               LAB_COLD:
0022EC  1  A2 04                LDX     #PG2_TABE-PG2_TABS-1
0022EE  1               ; byte count-1
0022EE  1               LAB_2D13:
0022EE  1  BD 33 10             LDA     PG2_TABS,X      ; get byte
0022F1  1  9F 00 02 00          STA     f:ccflag,X      ; store in page 2
0022F5  1  CA                   DEX                     ; decrement count
0022F6  1  10 F6                BPL     LAB_2D13        ; loop if not done
0022F8  1               
0022F8  1  A2 FF                LDX     #$FF            ; set byte
0022FA  1  86 88                STX     <Clineh         ; set current line high byte (set immediate mode)
0022FC  1               
0022FC  1  A9 4C                LDA     #$4C            ; code for JMP
0022FE  1  85 A1                STA     <Fnxjmp         ; save for jump vector for functions
002300  1               
002300  1               ; copy block from LAB_2CEE to $00BC - $00E0
002300  1               
002300  1  A0 1D                LDY     #LAB_2CEE_END-LAB_2CEE; set byte count
002302  1               LAB_2D4E:
002302  1  BE 02 10             LDX     LAB_2CEE-1,Y    ; get byte from table
002305  1  96 BB                STX     <LAB_IGBY-1,Y   ; save byte in page zero
002307  1  88                   DEY                     ; decrement count
002308  1  D0 F8                BNE     LAB_2D4E        ; loop if not all done
00230A  1               
00230A  1               ; copy block from StrTab to $0000 - $0012
00230A  1               
00230A  1               LAB_GMEM:
00230A  1  A0 12                LDY     #EndTab-StrTab-1; set byte count-1
00230C  1               TabLoop:
00230C  1  BE 20 10             LDX     StrTab,Y        ; get byte from table
00230F  1  96 00                STX     <PLUS_0,Y       ; save byte in page zero
002311  1  88                   DEY                     ; decrement count
002312  1  10 F8                BPL     TabLoop         ; loop if not all done
002314  1               
002314  1               ; set-up start values
002314  1  A9 02                LDA     #DATABANK       ; SET DATA BANK = TO DATA BANK, ALL PROGRAM DATA IN THIS AREA
002316  1  85 C5                STA     <Bpntrp         ; SET LAB_GBYT PAGE POINTER TO DATA BANK
002318  1  48                   PHA
002319  1  AB                   PLB
00231A  1               
00231A  1  A9 00                LDA     #$00            ; clear A
00231C  1  85 E5                STA     <NmiBase        ; clear NMI handler enabled flag
00231E  1  85 E8                STA     <IrqBase        ; clear IRQ handler enabled flag
002320  1  85 B2                STA     <FAC1_o         ; clear FAC1 overflow byte
002322  1  85 67                STA     <last_sh        ; clear descriptor stack top item pointer high byte
002324  1               
002324  1  A9 0E                LDA     #$0E            ; set default tab size
002326  1  85 64                STA     <TabSiz         ; save it
002328  1  A9 03                LDA     #$03            ; set garbage collect step size for descriptor stack
00232A  1  85 A0                STA     <g_step         ; save it
00232C  1  A2 68                LDX     #<des_sk        ; descriptor stack start
00232E  1  86 65                STX     <next_s         ; set descriptor stack pointer
002330  1               
002330  1  A9 00                LDA     #<Ram_top
002332  1  A0 FF                LDY     #>Ram_top
002334  1  85 85                STA     <Ememl          ; set end of mem low byte
002336  1  84 86                STY     <Ememh          ; set end of mem high byte
002338  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
00233A  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
00233C  1               
00233C  1  A0 00                LDY     #<Ram_base      ; set start addr low byte
00233E  1  A2 22                LDX     #>Ram_base      ; set start addr high byte
002340  1  84 79                STY     <Smeml          ; save start of mem low byte
002342  1  86 7A                STX     <Smemh          ; save start of mem high byte
002344  1               
002344  1  98                   TYA                     ; clear A
002345  1  91 79                STA     (<Smeml),Y      ; clear first byte
002347  1  E6 79                INC     <Smeml          ; increment start of mem low byte
002349  1               
002349  1               ; DO TITLE SCREEN
002349  1  20 C3 20             JSR     TitleScreen
00234C  1  20 A5 2C             JSR     LAB_CRLF        ; print CR/LF
00234F  1  20 72 26             JSR     LAB_1463        ; do "NEW" and "CLEAR"
002352  1  A5 85                LDA     <Ememl          ; get end of mem low byte
002354  1  38                   SEC                     ; set carry for subtract
002355  1  E5 79                SBC     <Smeml          ; subtract start of mem low byte
002357  1  AA                   TAX                     ; copy to X
002358  1  A5 86                LDA     <Ememh          ; get end of mem high byte
00235A  1  E5 7A                SBC     <Smemh          ; subtract start of mem high byte
00235C  1  20 0B 44             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
00235F  1  A9 0D                LDA     #<LAB_SMSG      ; point to sign-on message (low addr)
002361  1  A0 16                LDY     #>LAB_SMSG      ; point to sign-on message (high addr)
002363  1  20 ED 2C             JSR     LAB_18C3        ; print null terminated string from memory
002366  1  A9 6A                LDA     #<LAB_1274      ; warm start vector low byte
002368  1  A0 24                LDY     #>LAB_1274      ; warm start vector high byte
00236A  1  85 01                STA     <Wrmjpl         ; save warm start vector low byte
00236C  1  84 02                STY     <Wrmjph         ; save warm start vector high byte
00236E  1  6C 01 00             JMP     (Wrmjpl)        ; go do warm start
002371  1               
002371  1               ; open up space in memory
002371  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
002371  1               
002371  1               ; <Nbendl,<Nbendh - new block end address (A/Y)
002371  1               ; <Obendl,<Obendh - old block end address
002371  1               ; <Ostrtl,<Ostrth - old block start address
002371  1               
002371  1               ; returns with ..
002371  1               
002371  1               ; <Nbendl,<Nbendh - new block start address (high byte - $100)
002371  1               ; <Obendl,<Obendh - old block start address (high byte - $100)
002371  1               ; <Ostrtl,<Ostrth - old block start address (unchanged)
002371  1               
002371  1               LAB_11CF:
002371  1  20 1B 24             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
002374  1               ; addr to check is in AY (low/high)
002374  1  85 7F                STA     <Earryl         ; save new array mem end low byte
002376  1  84 80                STY     <Earryh         ; save new array mem end high byte
002378  1               
002378  1               ; open up space in memory
002378  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
002378  1               ; don't set array end
002378  1               
002378  1               LAB_11D6:
002378  1  38                   SEC                     ; set carry for subtract
002379  1  A5 A6                LDA     <Obendl         ; get block end low byte
00237B  1  E5 AA                SBC     <Ostrtl         ; subtract block start low byte
00237D  1  A8                   TAY                     ; copy MOD(block length/$100) byte to Y
00237E  1  A5 A7                LDA     <Obendh         ; get block end high byte
002380  1  E5 AB                SBC     <Ostrth         ; subtract block start high byte
002382  1  AA                   TAX                     ; copy block length high byte to X
002383  1  E8                   INX                     ; +1 to allow for count=0 exit
002384  1  98                   TYA                     ; copy block length low byte to A
002385  1  F0 74                BEQ     LAB_120A        ; branch if length low byte=0
002387  1               
002387  1               ; block is (X-1)*256+Y bytes, do the Y bytes first
002387  1               
002387  1  38                   SEC                     ; set carry for add + 1, two's complement
002388  1  49 FF                EOR     #$FF            ; invert low byte for subtract
00238A  1  65 A6                ADC     <Obendl         ; add block end low byte
00238C  1               
00238C  1  85 A6                STA     <Obendl         ; save corrected old block end low byte
00238E  1  B0 03                BCS     LAB_11F3        ; branch if no underflow
002390  1               
002390  1  C6 A7                DEC     <Obendh         ; else decrement block end high byte
002392  1  38                   SEC                     ; set carry for add + 1, two's complement
002393  1               LAB_11F3:
002393  1  98                   TYA                     ; get MOD(block length/$100) byte
002394  1  49 FF                EOR     #$FF            ; invert low byte for subtract
002396  1  65 A4                ADC     <Nbendl         ; add destination end low byte
002398  1  85 A4                STA     <Nbendl         ; save modified new block end low byte
00239A  1  B0 30                BCS     LAB_1203        ; branch if no underflow
00239C  1               
00239C  1  C6 A5                DEC     <Nbendh         ; else decrement block end high byte
00239E  1  90 2C                BCC     LAB_1203        ; branch always
0023A0  1               
0023A0  1               LAB_11FF:
0023A0  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
0023A4  1  B5 A6 C9 00  
0023A8  1  D0 04 A2 00  
0023B6  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; copy byte to destination
0023BA  1  01 B5 A4 C9  
0023BE  1  00 D0 04 A2  
0023CC  1               LAB_1203:
0023CC  1  88                   DEY                     ; decrement index
0023CD  1  D0 D1                BNE     LAB_11FF        ; loop until Y=0
0023CF  1               
0023CF  1               ; now do Y=0 indexed byte
0023CF  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
0023D3  1  B5 A6 C9 00  
0023D7  1  D0 04 A2 00  
0023E5  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; save byte to destination
0023E9  1  01 B5 A4 C9  
0023ED  1  00 D0 04 A2  
0023FB  1               LAB_120A:
0023FB  1  C6 A7                DEC     <Obendh         ; decrement source pointer high byte
0023FD  1  C6 A5                DEC     <Nbendh         ; decrement destination pointer high byte
0023FF  1  CA                   DEX                     ; decrement block count
002400  1  D0 CA                BNE     LAB_1203        ; loop until count = $0
002402  1               
002402  1  60                   RTS
002403  1               
002403  1               ; check room on stack for A bytes
002403  1               ; stack too deep? do OM error
002403  1               LAB_1212:
002403  1  C2 20                ACCUMULATOR16
002405  1  29 FF 00             AND     #$00FF
002408  1  18                   CLC
002409  1  69 00 B0             ADC     #STACK_BOTTOM
00240C  1  85 FD                STA     <TEMPW
00240E  1  3B                   TSC
00240F  1  C5 FD                CMP     <TEMPW
002411  1  90 03                BCC     LAB_1213        ; if stack < limit do "Out of memory" error then warm start
002413  1  E2 20                ACCUMULATOR8
002415  1  60                   RTS
002416  1               LAB_1213:
002416  1  E2 20                ACCUMULATOR8
002418  1  4C 4A 24             JMP     LAB_OMER
00241B  1               
00241B  1               ; check available memory, "Out of memory" error if no room
00241B  1               ; addr to check is in AY (low/high)
00241B  1               
00241B  1               LAB_121F:
00241B  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
00241D  1  90 2A                BCC     LAB_124B        ; if less then exit (is ok)
00241F  1               
00241F  1  D0 04                BNE     LAB_1229        ; skip next test if greater (tested <)
002421  1               
002421  1               ; high byte was =, now do low byte
002421  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
002423  1  90 24                BCC     LAB_124B        ; if less then exit (is ok)
002425  1               
002425  1               ; addr is > string storage ptr (oops!)
002425  1               LAB_1229:
002425  1  48                   PHA                     ; push addr low byte
002426  1  A2 08                LDX     #$08            ; set index to save <Adatal to <expneg inclusive
002428  1  98                   TYA                     ; copy addr high byte (to push on stack)
002429  1               
002429  1               ; save misc numeric work area
002429  1               LAB_122D:
002429  1  48                   PHA                     ; push byte
00242A  1  B5 A3                LDA     <Adatal-1,X     ; get byte from <Adatal to <expneg ( ,$00 not pushed)
00242C  1  CA                   DEX                     ; decrement index
00242D  1  10 FA                BPL     LAB_122D        ; loop until all done
00242F  1               
00242F  1  20 53 37             JSR     LAB_GARB        ; garbage collection routine
002432  1               
002432  1               ; restore misc numeric work area
002432  1  A2 00                LDX     #$00            ; clear the index to restore bytes
002434  1               LAB_1238:
002434  1  68                   PLA                     ; pop byte
002435  1  95 A4                STA     <Adatal,X       ; save byte to <Adatal to <expneg
002437  1  E8                   INX                     ; increment index
002438  1  E0 08                CPX     #$08            ; compare with end + 1
00243A  1  30 F8                BMI     LAB_1238        ; loop if more to do
00243C  1               
00243C  1  68                   PLA                     ; pop addr high byte
00243D  1  A8                   TAY                     ; copy back to Y
00243E  1  68                   PLA                     ; pop addr low byte
00243F  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
002441  1  90 06                BCC     LAB_124B        ; if less then exit (is ok)
002443  1               
002443  1  D0 05                BNE     LAB_OMER        ; if greater do "Out of memory" error then warm start
002445  1               
002445  1               ; high byte was =, now do low byte
002445  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
002447  1  B0 01                BCS     LAB_OMER        ; if >= do "Out of memory" error then warm start
002449  1               
002449  1               ; ok exit, carry clear
002449  1               LAB_124B:
002449  1  60                   RTS
00244A  1               
00244A  1               ; do "Out of memory" error then warm start
00244A  1               
00244A  1               LAB_OMER:
00244A  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
00244C  1               
00244C  1               ; do error #X, then warm start
00244C  1               
00244C  1               LAB_XERR:
00244C  1  20 A5 2C             JSR     LAB_CRLF        ; print CR/LF
00244F  1               
00244F  1               ;        LDA     <VIDEOMODE
00244F  1               ;        CMP     #2
00244F  1               ;        BEQ     LAB_XERRA
00244F  1               ;        PHX
00244F  1               ;        LDX     #2
00244F  1               ;        JSR     V_SCREEN1
00244F  1               ;        PLX
00244F  1               ;LAB_XERRA:
00244F  1  BD 5B 16             LDA     LAB_BAER,X      ; get error message pointer low byte
002452  1  BC 5C 16             LDY     LAB_BAER+1,X    ; get error message pointer high byte
002455  1  20 ED 2C             JSR     LAB_18C3        ; print null terminated string from memory
002458  1               
002458  1  20 AB 26             JSR     LAB_1491        ; flush stack and clear continue flag
00245B  1  A9 98                LDA     #<LAB_EMSG      ; point to " Error" low addr
00245D  1  A0 17                LDY     #>LAB_EMSG      ; point to " Error" high addr
00245F  1               LAB_1269:
00245F  1  20 ED 2C             JSR     LAB_18C3        ; print null terminated string from memory
002462  1  A4 88                LDY     <Clineh         ; get current line high byte
002464  1  C8                   INY                     ; increment it
002465  1  F0 03                BEQ     LAB_1274        ; go do warm start (was immediate mode)
002467  1               
002467  1               ; else print line number
002467  1  20 00 44             JSR     LAB_2953        ; print " in line [LINE #]"
00246A  1               
00246A  1               ; BASIC warm start entry point
00246A  1               ; wait for Basic command
00246A  1               
00246A  1               LAB_1274:
00246A  1               ;        LDA     <VIDEOMODE
00246A  1               ;        CMP     #2
00246A  1               ;        BEQ     LAB_1274a
00246A  1               ;        LDX     #2
00246A  1               ;        JSR     V_SCREEN1
00246A  1               ;LAB_1274a:
00246A  1               ; clear ON IRQ/NMI bytes
00246A  1  A9 00                LDA     #$00            ; clear A
00246C  1  85 E8                STA     <IrqBase        ; clear enabled byte
00246E  1  85 E5                STA     <NmiBase        ; clear enabled byte
002470  1  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
002472  1  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
002474  1               
002474  1  20 ED 2C             JSR     LAB_18C3        ; go do print string
002477  1               
002477  1               ; wait for Basic command (no "Ready")
002477  1               
002477  1               LAB_127D:
002477  1  20 5C 25             JSR     LAB_1357        ; call for BASIC input
00247A  1               LAB_1280:
00247A  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
00247C  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
00247E  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002482  1  F0 F3                BEQ     LAB_127D        ; loop while null
002484  1               
002484  1               ; got to interpret input line now ..
002484  1               
002484  1  A2 FF                LDX     #$FF            ; current line to null value
002486  1  86 88                STX     <Clineh         ; set current line high byte
002488  1  90 06                BCC     LAB_1295        ; branch if numeric character (handle new BASIC line)
00248A  1               
00248A  1               ; no line number .. immediate mode
00248A  1  20 9D 25             JSR     LAB_13A6        ; crunch keywords into Basic tokens
00248D  1  4C 20 28             JMP     LAB_15F6        ; go scan and interpret code
002490  1               
002490  1               ; handle new BASIC line
002490  1               
002490  1               LAB_1295:
002490  1               
002490  1  20 86 2A             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002493  1  20 9D 25             JSR     LAB_13A6        ; crunch keywords into Basic tokens
002496  1  84 5D                STY     <Ibptr          ; save index pointer to end of crunched line
002498  1  20 46 26             JSR     LAB_SSLN        ; search BASIC for temp integer line number
00249B  1  90 44                BCC     LAB_12E6        ; branch if not found
00249D  1               
00249D  1               ; aroooogah! line # already exists! delete it
00249D  1  A0 01                LDY     #$01            ; set index to next line pointer high byte
00249F  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0024A1  1  85 72                STA     <ut1_ph         ; save it
0024A3  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0024A5  1  85 71                STA     <ut1_pl         ; save it
0024A7  1  A5 AB                LDA     <Baslnh         ; get found line pointer high byte
0024A9  1  85 74                STA     <ut2_ph         ; save it
0024AB  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
0024AD  1  88                   DEY                     ; decrement index
0024AE  1  F1 AA                SBC     (<Baslnl),Y     ; subtract next line pointer low byte
0024B0  1  18                   CLC                     ; clear carry for add
0024B1  1  65 7B                ADC     <Svarl          ; add start of vars low byte
0024B3  1  85 7B                STA     <Svarl          ; save new start of vars low byte
0024B5  1  85 73                STA     <ut2_pl         ; save destination pointer low byte
0024B7  1  A5 7C                LDA     <Svarh          ; get start of vars high byte
0024B9  1  69 FF                ADC     #$FF            ; -1 + carry
0024BB  1  85 7C                STA     <Svarh          ; save start of vars high byte
0024BD  1  E5 AB                SBC     <Baslnh         ; subtract found line pointer high byte
0024BF  1  AA                   TAX                     ; copy to block count
0024C0  1  38                   SEC                     ; set carry for subtract
0024C1  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
0024C3  1  E5 7B                SBC     <Svarl          ; subtract start of vars low byte
0024C5  1  A8                   TAY                     ; copy to bytes in first block count
0024C6  1  B0 03                BCS     LAB_12D0        ; branch if overflow
0024C8  1               
0024C8  1  E8                   INX                     ; increment block count (correct for =0 loop exit)
0024C9  1  C6 74                DEC     <ut2_ph         ; decrement destination high byte
0024CB  1               LAB_12D0:
0024CB  1  18                   CLC                     ; clear carry for add
0024CC  1  65 71                ADC     <ut1_pl         ; add source pointer low byte
0024CE  1  90 03                BCC     LAB_12D8        ; branch if no overflow
0024D0  1               
0024D0  1  C6 72                DEC     <ut1_ph         ; else decrement source pointer high byte
0024D2  1  18                   CLC                     ; clear carry
0024D3  1               
0024D3  1               ; close up memory to delete old line
0024D3  1               LAB_12D8:
0024D3  1  B1 71                LDA     (<ut1_pl),Y     ; get byte from source
0024D5  1  91 73                STA     (<ut2_pl),Y     ; copy to destination
0024D7  1  C8                   INY                     ; increment index
0024D8  1  D0 F9                BNE     LAB_12D8        ; while <> 0 do this block
0024DA  1               
0024DA  1  E6 72                INC     <ut1_ph         ; increment source pointer high byte
0024DC  1  E6 74                INC     <ut2_ph         ; increment destination pointer high byte
0024DE  1  CA                   DEX                     ; decrement block count
0024DF  1  D0 F2                BNE     LAB_12D8        ; loop until all done
0024E1  1               
0024E1  1               ; got new line in buffer and no existing same #
0024E1  1               LAB_12E6:
0024E1  1  AD 81 21             LDA     Ibuffs          ; get byte from start of input buffer
0024E4  1  F0 3F                BEQ     LAB_1319        ; if null line just go flush stack/vars and exit
0024E6  1               
0024E6  1               ; got new line and it isn't empty line
0024E6  1  A5 85                LDA     <Ememl          ; get end of mem low byte
0024E8  1  A4 86                LDY     <Ememh          ; get end of mem high byte
0024EA  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
0024EC  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
0024EE  1  A5 7B                LDA     <Svarl          ; get start of vars low byte	(end of BASIC)
0024F0  1  85 A6                STA     <Obendl         ; save old block end low byte
0024F2  1  A4 7C                LDY     <Svarh          ; get start of vars high byte	(end of BASIC)
0024F4  1  84 A7                STY     <Obendh         ; save old block end high byte
0024F6  1  65 5D                ADC     <Ibptr          ; add input buffer pointer	(also buffer length)
0024F8  1  90 01                BCC     LAB_1301        ; branch if no overflow from add
0024FA  1               
0024FA  1  C8                   INY                     ; else increment high byte
0024FB  1               LAB_1301:
0024FB  1  85 A4                STA     <Nbendl         ; save new block end low byte	(move to, low byte)
0024FD  1  84 A5                STY     <Nbendh         ; save new block end high byte
0024FF  1  20 71 23             JSR     LAB_11CF        ; open up space in memory
002502  1               ; old start pointer <Ostrtl,<Ostrth set by the find line call
002502  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
002504  1  A4 80                LDY     <Earryh         ; get array mem end high byte
002506  1  85 7B                STA     <Svarl          ; save start of vars low byte
002508  1  84 7C                STY     <Svarh          ; save start of vars high byte
00250A  1  A4 5D                LDY     <Ibptr          ; get input buffer pointer	(also buffer length)
00250C  1  88                   DEY                     ; adjust for loop type
00250D  1               LAB_1311:
00250D  1  B9 7D 21             LDA     Ibuffs-4,Y      ; get byte from crunched line
002510  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002512  1  88                   DEY                     ; decrement count
002513  1  C0 03                CPY     #$03            ; compare with first byte-1
002515  1  D0 F6                BNE     LAB_1311        ; continue while count <> 3
002517  1               
002517  1  A5 12                LDA     <Itemph         ; get line # high byte
002519  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
00251B  1  88                   DEY                     ; decrement count
00251C  1  A5 11                LDA     <Itempl         ; get line # low byte
00251E  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002520  1  88                   DEY                     ; decrement count
002521  1  A9 FF                LDA     #$FF            ; set byte to allow chain rebuild. if you didn't set this
002523  1               ; byte then a zero already here would stop the chain rebuild
002523  1               ; as it would think it was the [EOT] marker.
002523  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002525  1               
002525  1               LAB_1319:
002525  1  20 87 26             JSR     LAB_1477        ; reset execution to start, clear vars and flush stack
002528  1  A6 79                LDX     <Smeml          ; get start of mem low byte
00252A  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
00252C  1  A0 01                LDY     #$01            ; index to high byte of next line pointer
00252E  1               LAB_1325:
00252E  1  86 71                STX     <ut1_pl         ; set line start pointer low byte
002530  1  85 72                STA     <ut1_ph         ; set line start pointer high byte
002532  1  B1 71                LDA     (<ut1_pl),Y     ; get it
002534  1  F0 18                BEQ     LAB_133E        ; exit if end of program
002536  1               
002536  1               ; rebuild chaining of Basic lines
002536  1               
002536  1  A0 04                LDY     #$04            ; point to first code byte of line
002538  1               ; there is always 1 byte + [EOL] as null entries are deleted
002538  1               LAB_1330:
002538  1  C8                   INY                     ; next code byte
002539  1  B1 71                LDA     (<ut1_pl),Y     ; get byte
00253B  1  D0 FB                BNE     LAB_1330        ; loop if not [EOL]
00253D  1               
00253D  1  38                   SEC                     ; set carry for add + 1
00253E  1  98                   TYA                     ; copy end index
00253F  1  65 71                ADC     <ut1_pl         ; add to line start pointer low byte
002541  1  AA                   TAX                     ; copy to X
002542  1  A0 00                LDY     #$00            ; clear index, point to this line's next line pointer
002544  1  91 71                STA     (<ut1_pl),Y     ; set next line pointer low byte
002546  1  98                   TYA                     ; clear A
002547  1  65 72                ADC     <ut1_ph         ; add line start pointer high byte + carry
002549  1  C8                   INY                     ; increment index to high byte
00254A  1  91 71                STA     (<ut1_pl),Y     ; save next line pointer low byte
00254C  1  90 E0                BCC     LAB_1325        ; go do next line, branch always, carry clear
00254E  1               
00254E  1               
00254E  1               LAB_133E:
00254E  1  4C 77 24             JMP     LAB_127D        ; else we just wait for Basic command, no "Ready"
002551  1               
002551  1               ; print "? " and get BASIC input
002551  1               
002551  1               LAB_INLN:
002551  1               ;JSR	LAB_18E3		; print "?" character
002551  1  20 16 2D             JSR     LAB_18E0        ; print " "
002554  1  D0 18                BNE     SimpleSerialEditor; call for BASIC input and return
002556  1               
002556  1               ; receive line from keyboard
002556  1               
002556  1               ; $08 as delete key (BACKSPACE on standard keyboard)
002556  1               LAB_134B:
002556  1  20 1B 2D             JSR     LAB_PRNA        ; go print the character
002559  1  CA                   DEX                     ; decrement the buffer counter (delete)
00255A  1  80 14                BRA     LAB_1359
00255C  1               
00255C  1               ; call for BASIC input (main entry point)
00255C  1               LAB_1357:
00255C  1  AF 41 03 00          LDA     f:ConsoleDevice
002560  1  C9 00                CMP     #$00
002562  1  F0 0A                BEQ     SimpleSerialEditor
002564  1               ;	do screen editor
002564  1  20 EC 20             JSR     ScreenEditor
002567  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
002569  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
00256B  1  A9 00                LDA     #$00
00256D  1  60                   RTS
00256E  1               
00256E  1               SimpleSerialEditor:
00256E  1  A2 00                LDX     #$00            ; clear BASIC line buffer pointer
002570  1               LAB_1359:
002570  1  20 8F 18             JSR     V_INPT          ; call scan input device
002573  1  B0 FB                BCS     LAB_1359        ; loop if no byte
002575  1               ;BEQ	LAB_1359		; loop until valid input (ignore NULLs)
002575  1               
002575  1  C9 07                CMP     #$07            ; compare with [BELL]
002577  1  F0 10                BEQ     LAB_1378        ; branch if [BELL]
002579  1               
002579  1  C9 0D                CMP     #$0D            ; compare with [CR]
00257B  1  F0 19                BEQ     LAB_1384        ; do CR/LF exit if [CR]
00257D  1               
00257D  1  E0 00                CPX     #$00            ; compare pointer with $00
00257F  1  D0 04                BNE     LAB_1374        ; branch if not empty
002581  1               
002581  1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
002581  1               
002581  1  C9 21                CMP     #$21            ; compare with [SP]+1
002583  1  90 EB                BCC     LAB_1359        ; if < ignore character
002585  1               
002585  1               LAB_1374:
002585  1  C9 08                CMP     #$08            ; compare with [BACKSPACE] (delete last character)
002587  1  F0 CD                BEQ     LAB_134B        ; go delete last character
002589  1               
002589  1               LAB_1378:
002589  1  E0 50                CPX     #Ibuffe-Ibuffs  ; compare character count with max
00258B  1  B0 0C                BCS     LAB_138E        ; skip store and do [BELL] if buffer full
00258D  1               
00258D  1  9D 81 21             STA     Ibuffs,X        ; else store in buffer
002590  1  E8                   INX                     ; increment pointer
002591  1               LAB_137F:
002591  1  20 1B 2D             JSR     LAB_PRNA        ; go print the character
002594  1  D0 DA                BNE     LAB_1359        ; always loop for next character
002596  1               
002596  1               LAB_1384:
002596  1  4C 9C 2C             JMP     LAB_1866        ; do CR/LF exit to BASIC
002599  1               
002599  1               ; announce buffer full
002599  1               
002599  1               LAB_138E:
002599  1  A9 07                LDA     #$07            ; [BELL] character into A
00259B  1  D0 F4                BNE     LAB_137F        ; go print the [BELL] but ignore input character
00259D  1               ; branch always
00259D  1               
00259D  1               ; crunch keywords into Basic tokens
00259D  1               ; position independent buffer version ..
00259D  1               ; faster, dictionary search version ....
00259D  1               
00259D  1               LAB_13A6:
00259D  1  A0 FF                LDY     #$FF            ; set save index (makes for easy math later)
00259F  1               
00259F  1  38                   SEC                     ; set carry for subtract
0025A0  1  A5 C3                LDA     <Bpntrl         ; get basic execute pointer low byte
0025A2  1  E9 81                SBC     #<Ibuffs        ; subtract input buffer start pointer
0025A4  1  AA                   TAX                     ; copy result to X (index past line # if any)
0025A5  1               
0025A5  1  86 60                STX     <Oquote         ; clear open quote/DATA flag
0025A7  1               LAB_13AC:
0025A7  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
0025AA  1  F0 51                BEQ     LAB_13EC        ; if null save byte then exit
0025AC  1               
0025AC  1  C9 5F                CMP     #'_'            ; compare with "_"
0025AE  1  B0 4D                BCS     LAB_13EC        ; if >= go save byte then continue crunching
0025B0  1               
0025B0  1  C9 3C                CMP     #'<'            ; compare with "<"
0025B2  1  B0 0E                BCS     LAB_13CC        ; if >= go crunch now
0025B4  1               
0025B4  1  C9 30                CMP     #'0'            ; compare with "0"
0025B6  1  B0 45                BCS     LAB_13EC        ; if >= go save byte then continue crunching
0025B8  1               
0025B8  1  85 5C                STA     <Scnquo         ; save buffer byte as search character
0025BA  1  C9 22                CMP     #$22            ; is it quote character?
0025BC  1  F0 64                BEQ     LAB_1410        ; branch if so (copy quoted string)
0025BE  1               
0025BE  1  C9 2A                CMP     #'*'            ; compare with "*"
0025C0  1  90 3B                BCC     LAB_13EC        ; if < go save byte then continue crunching
0025C2  1               
0025C2  1               ; else crunch now
0025C2  1               LAB_13CC:
0025C2  1  24 60                BIT     <Oquote         ; get open quote/DATA token flag
0025C4  1  70 37                BVS     LAB_13EC        ; branch if b6 of <Oquote set (was DATA)
0025C6  1               ; go save byte then continue crunching
0025C6  1               
0025C6  1  86 78                STX     <TempB          ; save buffer read index
0025C8  1  84 BA                STY     <csidx          ; copy buffer save index
0025CA  1  A0 69                LDY     #<TAB_1STC      ; get keyword first character table low address
0025CC  1  84 73                STY     <ut2_pl         ; save pointer low byte
0025CE  1  A0 11                LDY     #>TAB_1STC      ; get keyword first character table high address
0025D0  1  84 74                STY     <ut2_ph         ; save pointer high byte
0025D2  1  A0 00                LDY     #$00            ; clear table pointer
0025D4  1               
0025D4  1               LAB_13D0:
0025D4  1  D1 73                CMP     (<ut2_pl),Y     ; compare with keyword first character table byte
0025D6  1  F0 05                BEQ     LAB_13D1        ; go do word_table_chr if match
0025D8  1               
0025D8  1  90 21                BCC     LAB_13EA        ; if < keyword first character table byte go restore
0025DA  1               ; Y and save to crunched
0025DA  1               
0025DA  1  C8                   INY                     ; else increment pointer
0025DB  1  D0 F7                BNE     LAB_13D0        ; and loop (branch always)
0025DD  1               
0025DD  1               ; have matched first character of some keyword
0025DD  1               
0025DD  1               LAB_13D1:
0025DD  1  98                   TYA                     ; copy matching index
0025DE  1  0A                   ASL     A               ; *2 (bytes per pointer)
0025DF  1  AA                   TAX                     ; copy to new index
0025E0  1  BD 88 11             LDA     TAB_CHRT,X      ; get keyword table pointer low byte
0025E3  1  85 73                STA     <ut2_pl         ; save pointer low byte
0025E5  1  BD 89 11             LDA     TAB_CHRT+1,X    ; get keyword table pointer high byte
0025E8  1  85 74                STA     <ut2_ph         ; save pointer high byte
0025EA  1               
0025EA  1  A0 FF                LDY     #$FF            ; clear table pointer (make -1 for start)
0025EC  1               
0025EC  1  A6 78                LDX     <TempB          ; restore buffer read index
0025EE  1               
0025EE  1               LAB_13D6:
0025EE  1  C8                   INY                     ; next table byte
0025EF  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from table
0025F1  1               LAB_13D8:
0025F1  1  30 08                BMI     LAB_13EA        ; all bytes matched so go save token
0025F3  1               
0025F3  1  E8                   INX                     ; next buffer byte
0025F4  1  DD 81 21             CMP     Ibuffs,X        ; compare with byte from input buffer
0025F7  1  F0 F5                BEQ     LAB_13D6        ; go compare next if match
0025F9  1               
0025F9  1  D0 2E                BNE     LAB_1417        ; branch if >< (not found keyword)
0025FB  1               
0025FB  1               LAB_13EA:
0025FB  1  A4 BA                LDY     <csidx          ; restore save index
0025FD  1               
0025FD  1               ; save crunched to output
0025FD  1               LAB_13EC:
0025FD  1  E8                   INX                     ; increment buffer index (to next input byte)
0025FE  1  C8                   INY                     ; increment save index (to next output byte)
0025FF  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
002602  1  C9 00                CMP     #$00            ; set the flags, set carry
002604  1  F0 35                BEQ     LAB_142A        ; do exit if was null [EOL]
002606  1               
002606  1               ; A holds token or byte here
002606  1  E9 3A                SBC     #':'            ; subtract ":" (carry set by CMP #00)
002608  1  F0 04                BEQ     LAB_13FF        ; branch if it was ":" (is now $00)
00260A  1               
00260A  1               ; A now holds token-$3A
00260A  1  C9 49                CMP     #TK_DATA-$3A    ; compare with DATA token - $3A
00260C  1  D0 02                BNE     LAB_1401        ; branch if not DATA
00260E  1               
00260E  1               ; token was : or DATA
00260E  1               LAB_13FF:
00260E  1  85 60                STA     <Oquote         ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
002610  1               LAB_1401:
002610  1  49 57                EOR     #TK_REM-$3A     ; effectively subtract REM token offset
002612  1  F0 03                BEQ     LAB_1401_A
002614  1  4C A7 25             JMP     LAB_13AC        ; If wasn't REM then go crunch rest of line
002617  1               
002617  1               LAB_1401_A:
002617  1  85 5C                STA     <Asrch          ; else was REM so set search for [EOL]
002619  1               
002619  1               ; loop for REM, "..." etc.
002619  1               LAB_1408:
002619  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
00261C  1  F0 DF                BEQ     LAB_13EC        ; branch if null [EOL]
00261E  1               
00261E  1  C5 5C                CMP     <Asrch          ; compare with stored character
002620  1  F0 DB                BEQ     LAB_13EC        ; branch if match (end quote)
002622  1               
002622  1               ; entry for copy string in quotes, don't crunch
002622  1               LAB_1410:
002622  1  C8                   INY                     ; increment buffer save index
002623  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
002626  1  E8                   INX                     ; increment buffer read index
002627  1  D0 F0                BNE     LAB_1408        ; loop while <> 0 (should never be 0!)
002629  1               
002629  1               ; not found keyword this go
002629  1               LAB_1417:
002629  1  A6 78                LDX     <TempB          ; compare has failed, restore buffer index (start byte!)
00262B  1               
00262B  1               ; now find the end of this word in the table
00262B  1               LAB_141B:
00262B  1  B1 73                LDA     (<ut2_pl),Y     ; get table byte
00262D  1  08                   PHP                     ; save status
00262E  1  C8                   INY                     ; increment table index
00262F  1  28                   PLP                     ; restore byte status
002630  1  10 F9                BPL     LAB_141B        ; if not end of keyword go do next
002632  1               
002632  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from keyword table
002634  1  D0 BB                BNE     LAB_13D8        ; go test next word if not zero byte (end of table)
002636  1               
002636  1               ; reached end of table with no match
002636  1  BD 81 21             LDA     Ibuffs,X        ; restore byte from input buffer
002639  1  10 C0                BPL     LAB_13EA        ; branch always (all bytes in buffer are $00-$7F)
00263B  1               ; go save byte in output and continue crunching
00263B  1               
00263B  1               ; reached [EOL]
00263B  1               LAB_142A:
00263B  1  C8                   INY                     ; increment pointer
00263C  1  C8                   INY                     ; increment pointer (makes it next line pointer high byte)
00263D  1  99 81 21             STA     Ibuffs,Y        ; save [EOL] (marks [EOT] in immediate mode)
002640  1  C8                   INY                     ; adjust for line copy
002641  1  C8                   INY                     ; adjust for line copy
002642  1  C8                   INY                     ; adjust for line copy
002643  1  C6 C3                DEC     <Bpntrl         ; allow for increment (change if buffer starts at $xxFF)
002645  1  60                   RTS
002646  1               
002646  1               ; search Basic for temp integer line number from start of mem
002646  1               
002646  1               LAB_SSLN:
002646  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002648  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
00264A  1               
00264A  1               ; search Basic for temp integer line number from AX
00264A  1               ; returns carry set if found
00264A  1               ; returns <Baslnl/<Baslnh pointer to found or next higher (not found) line
00264A  1               
00264A  1               ; old 541 new 507
00264A  1               
00264A  1               LAB_SHLN:
00264A  1  A0 01                LDY     #$01            ; set index
00264C  1  85 AA                STA     <Baslnl         ; save low byte as current
00264E  1  86 AB                STX     <Baslnh         ; save high byte as current
002650  1  B1 AA                LDA     (<Baslnl),Y     ; get pointer high byte from addr
002652  1  F0 1A                BEQ     LAB_145F        ; pointer was zero so we're done, do 'not found' exit
002654  1               
002654  1  A0 03                LDY     #$03            ; set index to line # high byte
002656  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
002658  1  88                   DEY                     ; decrement index (point to low byte)
002659  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
00265B  1  D0 04                BNE     LAB_1455        ; if <> skip low byte check
00265D  1               
00265D  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
00265F  1  C5 11                CMP     <Itempl         ; compare with temporary integer low byte
002661  1               LAB_1455:
002661  1  B0 09                BCS     LAB_145E        ; else if temp < this line, exit (passed line#)
002663  1               
002663  1               LAB_1456:
002663  1  88                   DEY                     ; decrement index to next line ptr high byte
002664  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002666  1  AA                   TAX                     ; copy to X
002667  1  88                   DEY                     ; decrement index to next line ptr low byte
002668  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
00266A  1  90 DE                BCC     LAB_SHLN        ; go search for line # in temp (<Itempl/<Itemph) from AX
00266C  1               ; (carry always clear)
00266C  1               
00266C  1               LAB_145E:
00266C  1  F0 01                BEQ     LAB_1460        ; exit if temp = found line #, carry is set
00266E  1               
00266E  1               LAB_145F:
00266E  1  18                   CLC                     ; clear found flag
00266F  1               LAB_1460:
00266F  1  60                   RTS
002670  1               
002670  1               ; perform NEW
002670  1               
002670  1               LAB_NEW:
002670  1  D0 FD                BNE     LAB_1460        ; exit if not end of statement (to do syntax error)
002672  1               
002672  1               LAB_1463:
002672  1  A9 00                LDA     #$00            ; clear A
002674  1  A8                   TAY                     ; clear Y
002675  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, low byte
002677  1  C8                   INY                     ; increment index
002678  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, high byte
00267A  1  18                   CLC                     ; clear carry
00267B  1  A5 79                LDA     <Smeml          ; get start of mem low byte
00267D  1  69 02                ADC     #$02            ; calculate end of BASIC low byte
00267F  1  85 7B                STA     <Svarl          ; save start of vars low byte
002681  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002683  1  69 00                ADC     #$00            ; add any carry
002685  1  85 7C                STA     <Svarh          ; save start of vars high byte
002687  1               
002687  1               ; reset execution to start, clear vars and flush stack
002687  1               
002687  1               LAB_1477:
002687  1  18                   CLC                     ; clear carry
002688  1  A5 79                LDA     <Smeml          ; get start of mem low byte
00268A  1  69 FF                ADC     #$FF            ; -1
00268C  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
00268E  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002690  1  69 FF                ADC     #$FF            ; -1+carry
002692  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002694  1               ; "CLEAR" command gets here
002694  1               
002694  1               LAB_147A:
002694  1  A5 85                LDA     <Ememl          ; get end of mem low byte
002696  1  A4 86                LDY     <Ememh          ; get end of mem high byte
002698  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
00269A  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
00269C  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
00269E  1  A4 7C                LDY     <Svarh          ; get start of vars high byte
0026A0  1  85 7D                STA     <Sarryl         ; save var mem end low byte
0026A2  1  84 7E                STY     <Sarryh         ; save var mem end high byte
0026A4  1  85 7F                STA     <Earryl         ; save array mem end low byte
0026A6  1  84 80                STY     <Earryh         ; save array mem end high byte
0026A8  1  20 74 28             JSR     LAB_161A        ; perform RESTORE command
0026AB  1               
0026AB  1               ; flush stack and clear continue flag
0026AB  1               
0026AB  1               LAB_1491:
0026AB  1  A2 68                LDX     #<des_sk        ; set descriptor stack pointer
0026AD  1  86 65                STX     <next_s         ; save descriptor stack pointer
0026AF  1  C2 30                ACCUMULATORINDEX16
0026B1  1  FA                   PLX                     ; pull return address low byte
0026B2  1  A9 FF BF             LDA     #STACK          ; get the stack address
0026B5  1  1B                   TCS                     ; and set the stack to it
0026B6  1  DA                   PHX
0026B7  1  E2 30                ACCUMULATORINDEX8
0026B9  1  A9 00                LDA     #$00            ; clear byte
0026BB  1  85 8C                STA     <Cpntrh         ; clear continue pointer high byte
0026BD  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
0026BF  1               LAB_14A6:
0026BF  1  60                   RTS
0026C0  1               
0026C0  1               ; perform CLEAR
0026C0  1               
0026C0  1               LAB_CLEAR:
0026C0  1  F0 D2                BEQ     LAB_147A        ; if no following token go do "CLEAR"
0026C2  1               
0026C2  1               ; else there was a following token (go do syntax error)
0026C2  1  60                   RTS
0026C3  1               
0026C3  1               ; perform LIST [n][-m]
0026C3  1               ; bigger, faster version (a _lot_ faster)
0026C3  1               
0026C3  1               LAB_LIST:
0026C3  1  90 06                BCC     LAB_14BD        ; branch if next character numeric (LIST n..)
0026C5  1               
0026C5  1  F0 04                BEQ     LAB_14BD        ; branch if next character [NULL] (LIST)
0026C7  1               
0026C7  1  C9 C9                CMP     #TK_MINUS       ; compare with token for -
0026C9  1  D0 F4                BNE     LAB_14A6        ; exit if not - (LIST -m)
0026CB  1               
0026CB  1               ; LIST [[n][-m]]
0026CB  1               ; this bit sets the n , if present, as the start and end
0026CB  1               LAB_14BD:
0026CB  1  20 86 2A             JSR     LAB_GFPN        ; get fixed-point number into temp integer
0026CE  1  20 46 26             JSR     LAB_SSLN        ; search BASIC for temp integer line number
0026D1  1               ; (pointer in <Baslnl/<Baslnh)
0026D1  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0026D5  1  F0 0D                BEQ     LAB_14D4        ; branch if no more characters
0026D7  1               
0026D7  1               ; this bit checks the - is present
0026D7  1  C9 C9                CMP     #TK_MINUS       ; compare with token for -
0026D9  1  D0 61                BNE     LAB_152B        ; return if not "-" (will be Syntax error)
0026DB  1               
0026DB  1               ; LIST [n]-m
0026DB  1               ; the - was there so set m as the end value
0026DB  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0026DF  1  20 86 2A             JSR     LAB_GFPN        ; get fixed-point number into temp integer
0026E2  1  D0 58                BNE     LAB_152B        ; exit if not ok
0026E4  1               
0026E4  1               LAB_14D4:
0026E4  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
0026E6  1  05 12                ORA     <Itemph         ; OR temporary integer high byte
0026E8  1  D0 06                BNE     LAB_14E2        ; branch if start set
0026EA  1               
0026EA  1  A9 FF                LDA     #$FF            ; set for -1
0026EC  1  85 11                STA     <Itempl         ; set temporary integer low byte
0026EE  1  85 12                STA     <Itemph         ; set temporary integer high byte
0026F0  1               LAB_14E2:
0026F0  1  A0 01                LDY     #$01            ; set index for line
0026F2  1  84 60                STY     <Oquote         ; clear open quote flag
0026F4  1  20 A5 2C             JSR     LAB_CRLF        ; print CR/LF
0026F7  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0026F9  1               ; pointer initially set by search at LAB_14BD
0026F9  1  F0 41                BEQ     LAB_152B        ; if null all done so exit
0026FB  1  20 44 28             JSR     LAB_1629        ; do CRTL-C check vector
0026FE  1               
0026FE  1  C8                   INY                     ; increment index for line
0026FF  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
002701  1  AA                   TAX                     ; copy to X
002702  1  C8                   INY                     ; increment index
002703  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
002705  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002707  1  D0 04                BNE     LAB_14FF        ; branch if no high byte match
002709  1               
002709  1  E4 11                CPX     <Itempl         ; compare with temporary integer low byte
00270B  1  F0 02                BEQ     LAB_1501        ; branch if = last line to do (< will pass next branch)
00270D  1               
00270D  1               LAB_14FF:                       ; else ..
00270D  1  B0 2D                BCS     LAB_152B        ; if greater all done so exit
00270F  1               
00270F  1               LAB_1501:
00270F  1  84 97                STY     <Tidx1          ; save index for line
002711  1  20 0B 44             JSR     LAB_295E        ; print XA as unsigned integer
002714  1  A9 20                LDA     #$20            ; space is the next character
002716  1               LAB_1508:
002716  1  A4 97                LDY     <Tidx1          ; get index for line
002718  1  29 7F                AND     #$7F            ; mask top out bit of character
00271A  1               LAB_150C:
00271A  1  20 1B 2D             JSR     LAB_PRNA        ; go print the character
00271D  1  C9 22                CMP     #$22            ; was it " character
00271F  1  D0 06                BNE     LAB_1519        ; branch if not
002721  1               
002721  1               ; we are either entering or leaving a pair of quotes
002721  1  A5 60                LDA     <Oquote         ; get open quote flag
002723  1  49 FF                EOR     #$FF            ; toggle it
002725  1  85 60                STA     <Oquote         ; save it back
002727  1               LAB_1519:
002727  1  C8                   INY                     ; increment index
002728  1  B1 AA                LDA     (<Baslnl),Y     ; get next byte
00272A  1  D0 11                BNE     LAB_152E        ; branch if not [EOL] (go print character)
00272C  1  A8                   TAY                     ; else clear index
00272D  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
00272F  1  AA                   TAX                     ; copy to X
002730  1  C8                   INY                     ; increment index
002731  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002733  1  86 AA                STX     <Baslnl         ; set pointer to line low byte
002735  1  85 AB                STA     <Baslnh         ; set pointer to line high byte
002737  1  F0 03                BEQ     LAB_152B
002739  1  4C F0 26             JMP     LAB_14E2        ; go do next line if not [EOT]
00273C  1               
00273C  1               ; else ..
00273C  1               LAB_152B:
00273C  1  60                   RTS
00273D  1               
00273D  1               LAB_152E:
00273D  1  10 DB                BPL     LAB_150C        ; just go print it if not token byte
00273F  1               
00273F  1               ; else was token byte so uncrunch it (maybe)
00273F  1  24 60                BIT     <Oquote         ; test the open quote flag
002741  1  30 D7                BMI     LAB_150C        ; just go print character if open quote set
002743  1               
002743  1  A2 13                LDX     #>LAB_KEYT      ; get table address high byte
002745  1  0A                   ASL     A               ; *2
002746  1  0A                   ASL     A               ; *4
002747  1  90 02                BCC     LAB_152F        ; branch if no carry
002749  1               
002749  1  E8                   INX                     ; else increment high byte
00274A  1  18                   CLC                     ; clear carry for add
00274B  1               LAB_152F:
00274B  1  69 E2                ADC     #<LAB_KEYT      ; add low byte
00274D  1  90 01                BCC     LAB_1530        ; branch if no carry
00274F  1               
00274F  1  E8                   INX                     ; else increment high byte
002750  1               LAB_1530:
002750  1  85 73                STA     <ut2_pl         ; save table pointer low byte
002752  1  86 74                STX     <ut2_ph         ; save table pointer high byte
002754  1  84 97                STY     <Tidx1          ; save index for line
002756  1  A0 00                LDY     #$00            ; clear index
002758  1  B1 73                LDA     (<ut2_pl),Y     ; get length
00275A  1  AA                   TAX                     ; copy length
00275B  1  C8                   INY                     ; increment index
00275C  1  B1 73                LDA     (<ut2_pl),Y     ; get 1st character
00275E  1  CA                   DEX                     ; decrement length
00275F  1  D0 03                BNE     LAB_1508_A
002761  1  4C 16 27             JMP     LAB_1508        ; if no more characters exit and print
002764  1               LAB_1508_A:
002764  1  20 1B 2D             JSR     LAB_PRNA        ; go print the character
002767  1  C8                   INY                     ; increment index
002768  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address low byte
00276A  1  48                   PHA                     ; save it for now
00276B  1  C8                   INY                     ; increment index
00276C  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address high byte
00276E  1  A0 00                LDY     #$00
002770  1  85 74                STA     <ut2_ph         ; save keyword pointer high byte
002772  1  68                   PLA                     ; pull low byte
002773  1  85 73                STA     <ut2_pl         ; save keyword pointer low byte
002775  1               LAB_1540:
002775  1  B1 73                LDA     (<ut2_pl),Y     ; get character
002777  1  CA                   DEX                     ; decrement character count
002778  1  D0 03                BNE     LAB_1508_B
00277A  1  4C 16 27             JMP     LAB_1508        ; if last character exit and print
00277D  1               LAB_1508_B:
00277D  1  20 1B 2D             JSR     LAB_PRNA        ; go print the character
002780  1  C8                   INY                     ; increment index
002781  1  D0 F2                BNE     LAB_1540        ; loop for next character
002783  1               
002783  1               ; perform FOR
002783  1               
002783  1               LAB_FOR:
002783  1  A9 80                LDA     #$80            ; set FNX
002785  1  85 61                STA     <Sufnxf         ; set subscript/FNX flag
002787  1  20 E8 2A             JSR     LAB_LET         ; go do LET
00278A  1  68                   PLA                     ; pull return address
00278B  1  68                   PLA                     ; pull return address
00278C  1  A9 10                LDA     #$10            ; we need 16d bytes !
00278E  1  20 03 24             JSR     LAB_1212        ; check room on stack for A bytes
002791  1  20 D4 29             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002794  1  18                   CLC                     ; clear carry for add
002795  1  98                   TYA                     ; copy index to A
002796  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002798  1  48                   PHA                     ; push onto stack
002799  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
00279B  1  69 00                ADC     #$00            ; add carry
00279D  1  48                   PHA                     ; push onto stack
00279E  1  A5 88                LDA     <Clineh         ; get current line high byte
0027A0  1  48                   PHA                     ; push onto stack
0027A1  1  A5 87                LDA     <Clinel         ; get current line low byte
0027A3  1  48                   PHA                     ; push onto stack
0027A4  1  A9 BF                LDA     #TK_TO          ; get "TO" token
0027A6  1  20 7D 30             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
0027A9  1  20 59 2F             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0027AC  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0027AF  1               ; else do type mismatch
0027AF  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0027B1  1  09 7F                ORA     #$7F            ; set all non sign bits
0027B3  1  25 AD                AND     <FAC1_1         ; and FAC1 mantissa1
0027B5  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0027B7  1  A9 C2                LDA     #<LAB_159F      ; set return address low byte
0027B9  1  A0 27                LDY     #>LAB_159F      ; set return address high byte
0027BB  1  85 71                STA     <ut1_pl         ; save return address low byte
0027BD  1  84 72                STY     <ut1_ph         ; save return address high byte
0027BF  1  4C 0F 30             JMP     LAB_1B66        ; round FAC1 and put on stack (returns to next instruction)
0027C2  1               
0027C2  1               LAB_159F:
0027C2  1  A9 68                LDA     #<LAB_259C      ; set 1 pointer low addr (default step size)
0027C4  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high addr
0027C6  1  20 E4 40             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0027C9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0027CD  1  C9 C4                CMP     #TK_STEP        ; compare with STEP token
0027CF  1  D0 07                BNE     LAB_15B3        ; jump if not "STEP"
0027D1  1               
0027D1  1               ;.was step so ..
0027D1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0027D5  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0027D8  1               ; else do type mismatch
0027D8  1               LAB_15B3:
0027D8  1  20 F0 41             JSR     LAB_27CA        ; return A=FF,C=1/-ve A=01,C=0/+ve
0027DB  1  85 B0                STA     <FAC1_s         ; set FAC1 sign (b7)
0027DD  1               ; this is +1 for +ve step and -1 for -ve step, in NEXT we
0027DD  1               ; compare the FOR value and the TO value and return +1 if
0027DD  1               ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
0027DD  1               ; here (+/-1) is then compared to that result and if they
0027DD  1               ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
0027DD  1               ; the loop is done
0027DD  1  20 04 30             JSR     LAB_1B5B        ; push sign, round FAC1 and put on stack
0027E0  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
0027E2  1  48                   PHA                     ; push on stack
0027E3  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
0027E5  1  48                   PHA                     ; push on stack
0027E6  1  A9 81                LDA     #TK_FOR         ; get FOR token
0027E8  1  48                   PHA                     ; push on stack
0027E9  1               
0027E9  1               ; interpreter inner loop
0027E9  1               
0027E9  1               LAB_15C2:
0027E9  1  20 44 28             JSR     LAB_1629        ; do CRTL-C check vector
0027EC  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0027EE  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
0027F0  1               
0027F0  1  A6 88                LDX     <Clineh         ; continue line is $FFxx for immediate mode
0027F2  1               ; ($00xx for RUN from immediate mode)
0027F2  1  E8                   INX                     ; increment it (now $00 if immediate mode)
0027F3  1  F0 04                BEQ     LAB_15D1        ; branch if null (immediate mode)
0027F5  1               
0027F5  1  85 8B                STA     <Cpntrl         ; save continue pointer low byte
0027F7  1  84 8C                STY     <Cpntrh         ; save continue pointer high byte
0027F9  1               LAB_15D1:
0027F9  1  A0 00                LDY     #$00            ; clear index
0027FB  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
0027FD  1  F0 07                BEQ     LAB_15DC        ; branch if null [EOL]
0027FF  1               
0027FF  1  C9 3A                CMP     #':'            ; compare with ":"
002801  1  F0 1D                BEQ     LAB_15F6        ; branch if = (statement separator)
002803  1               
002803  1               LAB_15D9:
002803  1  4C 90 30             JMP     LAB_SNER        ; else syntax error then warm start
002806  1               
002806  1               ; have reached [EOL]
002806  1               LAB_15DC:
002806  1  A0 02                LDY     #$02            ; set index
002808  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
00280A  1  18                   CLC                     ; clear carry for no "BREAK" message
00280B  1  F0 59                BEQ     LAB_1651        ; if null go to immediate mode (was immediate or [EOT]
00280D  1               ; marker)
00280D  1               
00280D  1  C8                   INY                     ; increment index
00280E  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # low byte
002810  1  85 87                STA     <Clinel         ; save current line low byte
002812  1  C8                   INY                     ; increment index
002813  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # high byte
002815  1  85 88                STA     <Clineh         ; save current line high byte
002817  1  98                   TYA                     ; A now = 4
002818  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
00281A  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
00281C  1  90 02                BCC     LAB_15F6        ; branch if no overflow
00281E  1               
00281E  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002820  1               LAB_15F6:
002820  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002824  1               
002824  1               
002824  1               
002824  1               
002824  1               LAB_15F9:
002824  1  20 2A 28             JSR     LAB_15FF        ; go interpret BASIC code from (<Bpntrl)
002827  1               LAB_15FC:
002827  1  4C E9 27             JMP     LAB_15C2        ; loop
00282A  1               
00282A  1               ; interpret BASIC code from (<Bpntrl)
00282A  1               
00282A  1               LAB_15FF:
00282A  1  F0 56                BEQ     LAB_1628        ; exit if zero [EOL]
00282C  1               
00282C  1               LAB_1602:
00282C  1  0A                   ASL     A               ; *2 bytes per vector and normalise token
00282D  1  B0 03                BCS     LAB_1609        ; branch if was token
00282F  1  4C E8 2A             JMP     LAB_LET         ; else go do implied LET
002832  1               
002832  1               LAB_1609:
002832  1               TK_TABUSE       = (TK_TAB-$80)*2
002832  1  C9 7A                CMP     #TK_TABUSE      ; compare normalised token * 2 with TAB
002834  1  B0 CD                BCS     LAB_15D9        ; branch if A>=TAB (do syntax error then warm start)
002836  1               ; only tokens before TAB can start a line
002836  1  A8                   TAY                     ; copy to index
002837  1  B9 39 10             LDA     LAB_CTBL+1,Y    ; get vector high byte
00283A  1  48                   PHA                     ; onto stack
00283B  1  B9 38 10             LDA     LAB_CTBL,Y      ; get vector low byte
00283E  1  48                   PHA                     ; onto stack
00283F  1  22 BC 00 00          JSL     LAB_IGBY        ; jump to increment and scan memory
002843  1               ; then "return" to vector
002843  1  60                   RTS
002844  1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
002844  1               ; key press is detected.
002844  1               
002844  1               LAB_1629:
002844  1  6C 03 02             JMP     (VEC_CC)        ; ctrl c check vector
002847  1               
002847  1               ; if there was a key press it gets back here ..
002847  1               
002847  1               LAB_1636:
002847  1  C9 03                CMP     #$03            ; compare with CTRL-C
002849  1               
002849  1               ; perform STOP
002849  1               
002849  1               LAB_STOP:
002849  1  B0 01                BCS     LAB_163B        ; branch if token follows STOP
00284B  1               ; else just END
00284B  1               ; END
00284B  1               
00284B  1               LAB_END:
00284B  1  18                   CLC                     ; clear the carry, indicate a normal program end
00284C  1               LAB_163B:
00284C  1  D0 67                BNE     LAB_167A        ; if wasn't CTRL-C or there is a following byte return
00284E  1               
00284E  1  A5 C4                LDA     <Bpntrh         ; get the BASIC execute pointer high byte
002850  1  49 21                EOR     #>Ibuffs        ; compare with buffer address high byte (Cb unchanged)
002852  1  F0 10                BEQ     LAB_164F        ; branch if the BASIC pointer is in the input buffer
002854  1               ; (can't continue in immediate mode)
002854  1               
002854  1               ; else ..
002854  1  49 21                EOR     #>Ibuffs        ; correct the bits
002856  1  A4 C3                LDY     <Bpntrl         ; get BASIC execute pointer low byte
002858  1  84 8B                STY     <Cpntrl         ; save continue pointer low byte
00285A  1  85 8C                STA     <Cpntrh         ; save continue pointer high byte
00285C  1               LAB_1647:
00285C  1  A5 87                LDA     <Clinel         ; get current line low byte
00285E  1  A4 88                LDY     <Clineh         ; get current line high byte
002860  1  85 89                STA     <Blinel         ; save break line low byte
002862  1  84 8A                STY     <Blineh         ; save break line high byte
002864  1               LAB_164F:
002864  1  68                   PLA                     ; pull return address low
002865  1  68                   PLA                     ; pull return address high
002866  1               LAB_1651:
002866  1  90 07                BCC     LAB_165E        ; if was program end just do warm start
002868  1               
002868  1               ; else ..
002868  1               
002868  1               ;        LDA     <VIDEOMODE
002868  1               ;        CMP     #2
002868  1               ;        BEQ     LAB_1651A
002868  1               ;        LDX     #2
002868  1               ;        JSR     V_SCREEN1
002868  1               LAB_1651A:
002868  1  A9 90                LDA     #<LAB_BMSG      ; point to "Break" low byte
00286A  1  A0 17                LDY     #>LAB_BMSG      ; point to "Break" high byte
00286C  1  4C 5F 24             JMP     LAB_1269        ; print "Break" and do warm start
00286F  1               
00286F  1               LAB_165E:
00286F  1  4C 6A 24             JMP     LAB_1274        ; go do warm start
002872  1               
002872  1               ; perform RESTORE
002872  1               
002872  1               LAB_RESTORE:
002872  1  D0 0F                BNE     LAB_RESTOREn    ; branch if next character not null (RESTORE n)
002874  1               
002874  1               LAB_161A:
002874  1  38                   SEC                     ; set carry for subtract
002875  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002877  1  E9 01                SBC     #$01            ; -1
002879  1  A4 7A                LDY     <Smemh          ; get start of mem high byte
00287B  1  B0 01                BCS     LAB_1624        ; branch if no underflow
00287D  1               
00287D  1               LAB_uflow:
00287D  1  88                   DEY                     ; else decrement high byte
00287E  1               LAB_1624:
00287E  1  85 8F                STA     <Dptrl          ; save DATA pointer low byte
002880  1  84 90                STY     <Dptrh          ; save DATA pointer high byte
002882  1               LAB_1628:
002882  1  60                   RTS
002883  1               
002883  1               ; is RESTORE n
002883  1               LAB_RESTOREn:
002883  1  20 86 2A             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002886  1  20 D7 29             JSR     LAB_SNBL        ; scan for next BASIC line
002889  1  A5 88                LDA     <Clineh         ; get current line high byte
00288B  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
00288D  1  B0 0B                BCS     LAB_reset_search; branch if >= (start search from beginning)
00288F  1               
00288F  1  98                   TYA                     ; else copy line index to A
002890  1  38                   SEC                     ; set carry (+1)
002891  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002893  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002895  1  90 07                BCC     LAB_go_search   ; branch if no overflow to high byte
002897  1               
002897  1  E8                   INX                     ; increment high byte
002898  1  B0 04                BCS     LAB_go_search   ; branch always (can never be carry clear)
00289A  1               
00289A  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
00289A  1               
00289A  1               LAB_reset_search:
00289A  1  A5 79                LDA     <Smeml          ; get start of mem low byte
00289C  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
00289E  1               
00289E  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
00289E  1               
00289E  1               LAB_go_search:
00289E  1               
00289E  1  20 4A 26             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
0028A1  1  B0 03                BCS     LAB_line_found  ; if carry set go set pointer
0028A3  1               
0028A3  1  4C A9 29             JMP     LAB_16F7        ; else go do "Undefined statement" error
0028A6  1               
0028A6  1               LAB_line_found:
0028A6  1               ; carry already set for subtract
0028A6  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
0028A8  1  E9 01                SBC     #$01            ; -1
0028AA  1  A4 AB                LDY     <Baslnh         ; get pointer high byte
0028AC  1  B0 D0                BCS     LAB_1624        ; branch if no underflow (save DATA pointer and return)
0028AE  1               
0028AE  1  90 CD                BCC     LAB_uflow       ; else decrement high byte then save DATA pointer and
0028B0  1               ; return (branch always)
0028B0  1               
0028B0  1               ; perform NULL
0028B0  1               
0028B0  1               LAB_NULL:
0028B0  1  20 06 3C             JSR     LAB_GTBY        ; get byte parameter
0028B3  1  86 0D                STX     <Nullct         ; save new NULL count
0028B5  1               LAB_167A:
0028B5  1  60                   RTS
0028B6  1               
0028B6  1               ; perform CONT
0028B6  1               
0028B6  1               LAB_CONT:
0028B6  1  D0 FD                BNE     LAB_167A        ; if following byte exit to do syntax error
0028B8  1               
0028B8  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
0028BA  1  D0 05                BNE     LAB_166C        ; go do continue if we can
0028BC  1               
0028BC  1  A2 1E                LDX     #$1E            ; error code $1E ("Can't continue" error)
0028BE  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
0028C1  1               
0028C1  1               ; we can continue so ..
0028C1  1               LAB_166C:
0028C1  1  A9 93                LDA     #TK_ON          ; set token for ON
0028C3  1  20 20 49             JSR     LAB_IRQ         ; set IRQ flags
0028C6  1  A9 93                LDA     #TK_ON          ; set token for ON
0028C8  1  20 23 49             JSR     LAB_NMI         ; set NMI flags
0028CB  1               
0028CB  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
0028CD  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
0028CF  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0028D1  1  A5 89                LDA     <Blinel         ; get break line low byte
0028D3  1  A4 8A                LDY     <Blineh         ; get break line high byte
0028D5  1  85 87                STA     <Clinel         ; set current line low byte
0028D7  1  84 88                STY     <Clineh         ; set current line high byte
0028D9  1  60                   RTS
0028DA  1               
0028DA  1               ; perform RUN
0028DA  1               
0028DA  1               LAB_RUN:
0028DA  1  D0 03                BNE     LAB_1696        ; branch if RUN n
0028DC  1  4C 87 26             JMP     LAB_1477        ; reset execution to start, clear variables, flush stack and
0028DF  1               ; return
0028DF  1               
0028DF  1               ; does RUN n
0028DF  1               
0028DF  1               LAB_1696:
0028DF  1  20 94 26             JSR     LAB_147A        ; go do "CLEAR"
0028E2  1  F0 2F                BEQ     LAB_16B0        ; get n and do GOTO n (branch always as CLEAR sets Z=1)
0028E4  1               
0028E4  1               ; perform DO
0028E4  1               
0028E4  1               LAB_DO:
0028E4  1  A9 05                LDA     #$05            ; need 5 bytes for DO
0028E6  1  20 03 24             JSR     LAB_1212        ; check room on stack for A bytes
0028E9  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0028EB  1  48                   PHA                     ; push on stack
0028EC  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0028EE  1  48                   PHA                     ; push on stack
0028EF  1  A5 88                LDA     <Clineh         ; get current line high byte
0028F1  1  48                   PHA                     ; push on stack
0028F2  1  A5 87                LDA     <Clinel         ; get current line low byte
0028F4  1  48                   PHA                     ; push on stack
0028F5  1  A9 9C                LDA     #TK_DO          ; token for DO
0028F7  1  48                   PHA                     ; push on stack
0028F8  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0028FC  1  4C E9 27             JMP     LAB_15C2        ; go do interpreter inner loop
0028FF  1               
0028FF  1               ; perform GOSUB
0028FF  1               
0028FF  1               LAB_GOSUB:
0028FF  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
002901  1  20 03 24             JSR     LAB_1212        ; check room on stack for A bytes
002904  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002906  1  48                   PHA                     ; push on stack
002907  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002909  1  48                   PHA                     ; push on stack
00290A  1  A5 88                LDA     <Clineh         ; get current line high byte
00290C  1  48                   PHA                     ; push on stack
00290D  1  A5 87                LDA     <Clinel         ; get current line low byte
00290F  1  48                   PHA                     ; push on stack
002910  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
002912  1  48                   PHA                     ; push on stack
002913  1               LAB_16B0:
002913  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002917  1  20 1D 29             JSR     LAB_GOTO        ; perform GOTO n
00291A  1  4C E9 27             JMP     LAB_15C2        ; go do interpreter inner loop
00291D  1               ; (can't RTS, we used the stack!)
00291D  1               
00291D  1               ; perform GOTO
00291D  1               
00291D  1               LAB_GOTO:
00291D  1  20 86 2A             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002920  1  20 D7 29             JSR     LAB_SNBL        ; scan for next BASIC line
002923  1  A5 88                LDA     <Clineh         ; get current line high byte
002925  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002927  1  B0 0B                BCS     LAB_16D0        ; branch if >= (start search from beginning)
002929  1               
002929  1  98                   TYA                     ; else copy line index to A
00292A  1  38                   SEC                     ; set carry (+1)
00292B  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
00292D  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
00292F  1  90 07                BCC     LAB_16D4        ; branch if no overflow to high byte
002931  1               
002931  1  E8                   INX                     ; increment high byte
002932  1  B0 04                BCS     LAB_16D4        ; branch always (can never be carry)
002934  1               
002934  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002934  1               
002934  1               LAB_16D0:
002934  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002936  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002938  1               
002938  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002938  1               
002938  1               LAB_16D4:
002938  1  20 4A 26             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
00293B  1  90 6C                BCC     LAB_16F7        ; if carry clear go do "Undefined statement" error
00293D  1               ; (unspecified statement)
00293D  1               
00293D  1               ; carry already set for subtract
00293D  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
00293F  1  E9 01                SBC     #$01            ; -1
002941  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002943  1  A5 AB                LDA     <Baslnh         ; get pointer high byte
002945  1  E9 00                SBC     #$00            ; subtract carry
002947  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002949  1               LAB_16E5:
002949  1  60                   RTS
00294A  1               
00294A  1               LAB_DONOK:
00294A  1  A2 22                LDX     #$22            ; error code $22 ("LOOP without DO" error)
00294C  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
00294F  1               
00294F  1               ; perform LOOP
00294F  1               
00294F  1               LAB_LOOP:
00294F  1  A8                   TAY                     ; save following token
002950  1  A3 03                LDA     3,S             ; get token byte from stack
002952  1  C9 9C                CMP     #TK_DO          ; compare with DO token
002954  1  D0 F4                BNE     LAB_DONOK       ; branch if no matching DO
002956  1               
002956  1               ; FIXUP STACK
002956  1  C2 10                INDEX16
002958  1  BA                   TSX
002959  1  E8                   INX                     ; dump calling routine return address
00295A  1  E8                   INX                     ; dump calling routine return address
00295B  1  9A                   TXS                     ; correct stack
00295C  1  E2 10                INDEX8
00295E  1               
00295E  1  98                   TYA                     ; get saved following token back
00295F  1  F0 20                BEQ     LoopAlways      ; if no following token loop forever
002961  1               ; (stack pointer in X)
002961  1               
002961  1  C9 3A                CMP     #':'            ; could be ':'
002963  1  F0 1C                BEQ     LoopAlways      ; if :... loop forever
002965  1               
002965  1  E9 C5                SBC     #TK_UNTIL       ; subtract token for UNTIL, we know carry is set here
002967  1  AA                   TAX                     ; copy to X (if it was UNTIL then Y will be correct)
002968  1  F0 04                BEQ     DoRest          ; branch if was UNTIL
00296A  1               
00296A  1  CA                   DEX                     ; decrement result
00296B  1  D0 64                BNE     LAB_16FC        ; if not WHILE go do syntax error and warm start
00296D  1               ; only if the token was WHILE will this fail
00296D  1               
00296D  1  CA                   DEX                     ; set invert result byte
00296E  1               DoRest:
00296E  1  86 98                STX     <Frnxth         ; save invert result byte
002970  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002974  1  20 6A 2F             JSR     LAB_EVEX        ; evaluate expression
002977  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002979  1  F0 02                BEQ     DoCmp           ; if =0 go do straight compare
00297B  1               
00297B  1  A9 FF                LDA     #$FF            ; else set all bits
00297D  1               DoCmp:
00297D  1  45 98                EOR     <Frnxth         ; EOR with invert byte
00297F  1  D0 17                BNE     LoopDone        ; if <> 0 clear stack and back to interpreter loop
002981  1               
002981  1               ; loop condition wasn't met so do it again
002981  1               LoopAlways:
002981  1  A3 02                LDA     2,S             ; get current line low byte
002983  1  85 87                STA     <Clinel         ; save current line low byte
002985  1  A3 03                LDA     3,S             ; get current line high byte
002987  1  85 88                STA     <Clineh         ; save current line high byte
002989  1  A3 04                LDA     4,S             ; get BASIC execute pointer low byte
00298B  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
00298D  1  A3 05                LDA     5,S             ; get BASIC execute pointer high byte
00298F  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002991  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002995  1  4C E9 27             JMP     LAB_15C2        ; go do interpreter inner loop
002998  1               
002998  1               ; clear stack and back to interpreter loop
002998  1               LoopDone:
002998  1  C2 10                INDEX16
00299A  1  BA                   TSX
00299B  1  E8                   INX                     ; dump DO token
00299C  1  E8                   INX                     ; dump current line low byte
00299D  1  E8                   INX                     ; dump current line high byte
00299E  1  E8                   INX                     ; dump BASIC execute pointer low byte
00299F  1  E8                   INX                     ; dump BASIC execute pointer high byte
0029A0  1  9A                   TXS                     ; correct stack
0029A1  1  E2 10                INDEX8
0029A3  1  4C C3 29             JMP     LAB_DATA        ; go perform DATA (find : or [EOL])
0029A6  1               
0029A6  1               ; do the return without gosub error
0029A6  1               
0029A6  1               LAB_16F4:
0029A6  1  A2 04                LDX     #$04            ; error code $04 ("RETURN without GOSUB" error)
0029A8  1  2C                   .BYTE   $2C             ; makes next line BIT LAB_0EA2
0029A9  1               
0029A9  1               LAB_16F7:                       ; do undefined statement error
0029A9  1  A2 0E                LDX     #$0E            ; error code $0E ("Undefined statement" error)
0029AB  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
0029AE  1               
0029AE  1               ; perform RETURN
0029AE  1               
0029AE  1               LAB_RETURN:
0029AE  1  D0 99                BNE     LAB_16E5        ; exit if following token (to allow syntax error)
0029B0  1               
0029B0  1               LAB_16E8:
0029B0  1  68                   PLA                     ; dump calling routine return address
0029B1  1  68                   PLA                     ; dump calling routine return address
0029B2  1  68                   PLA                     ; pull token
0029B3  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
0029B5  1  D0 EF                BNE     LAB_16F4        ; branch if no matching GOSUB
0029B7  1               
0029B7  1               LAB_16FF:
0029B7  1  68                   PLA                     ; pull current line low byte
0029B8  1  85 87                STA     <Clinel         ; save current line low byte
0029BA  1  68                   PLA                     ; pull current line high byte
0029BB  1  85 88                STA     <Clineh         ; save current line high byte
0029BD  1  68                   PLA                     ; pull BASIC execute pointer low byte
0029BE  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0029C0  1  68                   PLA                     ; pull BASIC execute pointer high byte
0029C1  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
0029C3  1               
0029C3  1               ; now do the DATA statement as we could be returning into
0029C3  1               ; the middle of an ON <var> GOSUB n,m,p,q line
0029C3  1               ; (the return address used by the DATA statement is the one
0029C3  1               ; pushed before the GOSUB was executed!)
0029C3  1               
0029C3  1               ; perform DATA
0029C3  1               
0029C3  1               LAB_DATA:
0029C3  1  20 D4 29             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
0029C6  1               
0029C6  1               ; set BASIC execute pointer
0029C6  1               LAB_170F:
0029C6  1  98                   TYA                     ; copy index to A
0029C7  1  18                   CLC                     ; clear carry for add
0029C8  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
0029CA  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0029CC  1  90 02                BCC     LAB_1719        ; skip next if no carry
0029CE  1               
0029CE  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
0029D0  1               LAB_1719:
0029D0  1  60                   RTS
0029D1  1               
0029D1  1               LAB_16FC:
0029D1  1  4C 90 30             JMP     LAB_SNER        ; do syntax error then warm start
0029D4  1               
0029D4  1               ; scan for next BASIC statement ([:] or [EOL])
0029D4  1               ; returns Y as index to [:] or [EOL]
0029D4  1               
0029D4  1               LAB_SNBS:
0029D4  1  A2 3A                LDX     #':'            ; set look for character = ":"
0029D6  1  2C                   .BYTE   $2C             ; makes next line BIT $00A2
0029D7  1               
0029D7  1               ; scan for next BASIC line
0029D7  1               ; returns Y as index to [EOL]
0029D7  1               
0029D7  1               LAB_SNBL:
0029D7  1  A2 00                LDX     #$00            ; set alt search character = [EOL]
0029D9  1  A0 00                LDY     #$00            ; set search character = [EOL]
0029DB  1  84 5C                STY     <Asrch          ; store search character
0029DD  1               LAB_1725:
0029DD  1  8A                   TXA                     ; get alt search character
0029DE  1  45 5C                EOR     <Asrch          ; toggle search character, effectively swap with $00
0029E0  1  85 5C                STA     <Asrch          ; save swapped search character
0029E2  1               LAB_172D:
0029E2  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
0029E4  1  F0 EA                BEQ     LAB_1719        ; exit if null [EOL]
0029E6  1               
0029E6  1  C5 5C                CMP     <Asrch          ; compare with search character
0029E8  1  F0 E6                BEQ     LAB_1719        ; exit if found
0029EA  1               
0029EA  1  C8                   INY                     ; increment index
0029EB  1  C9 22                CMP     #$22            ; compare current character with open quote
0029ED  1  D0 F3                BNE     LAB_172D        ; if not open quote go get next character
0029EF  1               
0029EF  1  F0 EC                BEQ     LAB_1725        ; if found go swap search character for alt search character
0029F1  1               
0029F1  1               ; perform IF
0029F1  1               
0029F1  1               LAB_IF:
0029F1  1  20 6A 2F             JSR     LAB_EVEX        ; evaluate the expression
0029F4  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0029F8  1  C9 C2                CMP     #TK_THEN        ; compare with THEN token
0029FA  1  F0 12                BEQ     LAB_174B        ; if it was THEN go do IF
0029FC  1               
0029FC  1               ; wasn't IF .. THEN so must be IF .. GOTO
0029FC  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
0029FE  1  D0 D1                BNE     LAB_16FC        ; if it wasn't GOTO go do syntax error
002A00  1               
002A00  1  A6 C3                LDX     <Bpntrl         ; save the basic pointer low byte
002A02  1  A4 C4                LDY     <Bpntrh         ; save the basic pointer high byte
002A04  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002A08  1  B0 C7                BCS     LAB_16FC        ; if not numeric go do syntax error
002A0A  1               
002A0A  1  86 C3                STX     <Bpntrl         ; restore the basic pointer low byte
002A0C  1  84 C4                STY     <Bpntrh         ; restore the basic pointer high byte
002A0E  1               LAB_174B:
002A0E  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002A10  1  F0 1F                BEQ     LAB_174E        ; if the result was zero go look for an ELSE
002A12  1               
002A12  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
002A16  1  B0 03                BCS     LAB_174D        ; if not numeric go do var or keyword
002A18  1               
002A18  1               LAB_174C:
002A18  1  4C 1D 29             JMP     LAB_GOTO        ; else was numeric so do GOTO n
002A1B  1               
002A1B  1               ; is var or keyword
002A1B  1               LAB_174D:
002A1B  1  C9 90                CMP     #TK_RETURN      ; compare the byte with the token for RETURN
002A1D  1  D0 03                BNE     LAB_174G        ; if it wasn't RETURN go interpret BASIC code from (<Bpntrl)
002A1F  1               ; and return to this code to process any following code
002A1F  1               
002A1F  1  4C 2C 28             JMP     LAB_1602        ; else it was RETURN so interpret BASIC code from (<Bpntrl)
002A22  1               ; but don't return here
002A22  1               
002A22  1               LAB_174G:
002A22  1  20 2A 28             JSR     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002A25  1               
002A25  1               ; the IF was executed and there may be a following ELSE so the code needs to return
002A25  1               ; here to check and ignore the ELSE if present
002A25  1               
002A25  1  A0 00                LDY     #$00            ; clear the index
002A27  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002A29  1  C9 BE                CMP     #TK_ELSE        ; compare it with the token for ELSE
002A2B  1  D0 03                BNE     LAB_DATA_A
002A2D  1  4C C3 29             JMP     LAB_DATA        ; if ELSE ignore the following statement
002A30  1               
002A30  1               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
002A30  1               ; following ELSE will, correctly, cause a syntax error
002A30  1               LAB_DATA_A:
002A30  1  60                   RTS                     ; else return to the interpreter inner loop
002A31  1               
002A31  1               ; perform ELSE after IF
002A31  1               
002A31  1               LAB_174E:
002A31  1  A0 00                LDY     #$00            ; clear the BASIC byte index
002A33  1  A2 01                LDX     #$01            ; clear the nesting depth
002A35  1               LAB_1750:
002A35  1  C8                   INY                     ; increment the BASIC byte index
002A36  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002A38  1  F0 0F                BEQ     LAB_1753        ; if EOL go add the pointer and return
002A3A  1               
002A3A  1  C9 8D                CMP     #TK_IF          ; compare the byte with the token for IF
002A3C  1  D0 03                BNE     LAB_1752        ; if not IF token skip the depth increment
002A3E  1               
002A3E  1  E8                   INX                     ; else increment the nesting depth ..
002A3F  1  D0 F4                BNE     LAB_1750        ; .. and continue looking
002A41  1               
002A41  1               LAB_1752:
002A41  1  C9 BE                CMP     #TK_ELSE        ; compare the byte with the token for ELSE
002A43  1  D0 F0                BNE     LAB_1750        ; if not ELSE token continue looking
002A45  1               
002A45  1  CA                   DEX                     ; was ELSE so decrement the nesting depth
002A46  1  D0 ED                BNE     LAB_1750        ; loop if still nested
002A48  1               
002A48  1  C8                   INY                     ; increment the BASIC byte index past the ELSE
002A49  1               
002A49  1               ; found the matching ELSE, now do <{n|statement}>
002A49  1               
002A49  1               LAB_1753:
002A49  1  98                   TYA                     ; else copy line index to A
002A4A  1  18                   CLC                     ; clear carry for add
002A4B  1  65 C3                ADC     <Bpntrl         ; add the BASIC execute pointer low byte
002A4D  1  85 C3                STA     <Bpntrl         ; save the BASIC execute pointer low byte
002A4F  1  90 02                BCC     LAB_1754        ; branch if no overflow to high byte
002A51  1               
002A51  1  E6 C4                INC     <Bpntrh         ; else increment the BASIC execute pointer high byte
002A53  1               LAB_1754:
002A53  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002A57  1  90 BF                BCC     LAB_174C        ; if numeric do GOTO n
002A59  1               ; the code will return to the interpreter loop at the
002A59  1               ; tail end of the GOTO <n>
002A59  1               
002A59  1  4C 2A 28             JMP     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002A5C  1               ; the code will return to the interpreter loop at the
002A5C  1               ; tail end of the <statement>
002A5C  1               
002A5C  1               ; perform REM, skip (rest of) line
002A5C  1               
002A5C  1               LAB_REM:
002A5C  1  20 D7 29             JSR     LAB_SNBL        ; scan for next BASIC line
002A5F  1  4C C6 29             JMP     LAB_170F        ; go set BASIC execute pointer and return, branch always
002A62  1               
002A62  1               LAB_16FD:
002A62  1  4C 90 30             JMP     LAB_SNER        ; do syntax error then warm start
002A65  1               
002A65  1               ; perform ON
002A65  1               
002A65  1               LAB_ON:
002A65  1               LAB_NONM:
002A65  1  20 06 3C             JSR     LAB_GTBY        ; get byte parameter
002A68  1  48                   PHA                     ; push GOTO/GOSUB token
002A69  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002A6B  1  F0 04                BEQ     LAB_176B        ; branch if GOSUB
002A6D  1               
002A6D  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002A6F  1               LAB_1767:
002A6F  1  D0 F1                BNE     LAB_16FD        ; if not GOTO do syntax error then warm start
002A71  1               
002A71  1               
002A71  1               ; next character was GOTO or GOSUB
002A71  1               
002A71  1               LAB_176B:
002A71  1  C6 AF                DEC     <FAC1_3         ; decrement index (byte value)
002A73  1  D0 04                BNE     LAB_1773        ; branch if not zero
002A75  1               
002A75  1  68                   PLA                     ; pull GOTO/GOSUB token
002A76  1  4C 2C 28             JMP     LAB_1602        ; go execute it
002A79  1               
002A79  1               LAB_1773:
002A79  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002A7D  1  20 86 2A             JSR     LAB_GFPN        ; get fixed-point number into temp integer (skip this n)
002A80  1               ; (we could LDX #',' and JSR LAB_SNBL+2, then we
002A80  1               ; just BNE LAB_176B for the loop. should be quicker ..
002A80  1               ; no we can't, what if we meet a colon or [EOL]?)
002A80  1  C9 2C                CMP     #$2C            ; compare next character with ","
002A82  1  F0 ED                BEQ     LAB_176B        ; loop if ","
002A84  1               
002A84  1               LAB_177E:
002A84  1  68                   PLA                     ; else pull keyword token (run out of options)
002A85  1               ; also dump +/-1 pointer low byte and exit
002A85  1               LAB_177F:
002A85  1  60                   RTS
002A86  1               
002A86  1               ; takes n * 106 + 11 cycles where n is the number of digits
002A86  1               
002A86  1               ; get fixed-point number into temp integer
002A86  1               
002A86  1               LAB_GFPN:
002A86  1  A2 00                LDX     #$00            ; clear reg
002A88  1  86 11                STX     <Itempl         ; clear temporary integer low byte
002A8A  1               LAB_1785:
002A8A  1  86 12                STX     <Itemph         ; save temporary integer high byte
002A8C  1  B0 F7                BCS     LAB_177F        ; return if carry set, end of scan, character was
002A8E  1               ; not 0-9
002A8E  1               
002A8E  1  E0 19                CPX     #$19            ; compare high byte with $19
002A90  1  A8                   TAY                     ; ensure Zb = 0 if the branch is taken
002A91  1  B0 DC                BCS     LAB_1767        ; branch if >=, makes max line # 63999 because next
002A93  1               ; bit does *$0A, = 64000, compare at target will fail
002A93  1               ; and do syntax error
002A93  1               
002A93  1  E9 2F                SBC     #'0'-1          ; subtract "0", $2F + carry, from byte
002A95  1  A8                   TAY                     ; copy binary digit
002A96  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
002A98  1  0A                   ASL     A               ; *2 low byte
002A99  1  26 12                ROL     <Itemph         ; *2 high byte
002A9B  1  0A                   ASL     A               ; *2 low byte
002A9C  1  26 12                ROL     <Itemph         ; *2 high byte, *4
002A9E  1  65 11                ADC     <Itempl         ; + low byte, *5
002AA0  1  85 11                STA     <Itempl         ; save it
002AA2  1  8A                   TXA                     ; get high byte copy to A
002AA3  1  65 12                ADC     <Itemph         ; + high byte, *5
002AA5  1  06 11                ASL     <Itempl         ; *2 low byte, *10d
002AA7  1  2A                   ROL     A               ; *2 high byte, *10d
002AA8  1  AA                   TAX                     ; copy high byte back to X
002AA9  1  98                   TYA                     ; get binary digit back
002AAA  1  65 11                ADC     <Itempl         ; add number low byte
002AAC  1  85 11                STA     <Itempl         ; save number low byte
002AAE  1  90 01                BCC     LAB_17B3        ; if no overflow to high byte get next character
002AB0  1               
002AB0  1  E8                   INX                     ; else increment high byte
002AB1  1               LAB_17B3:
002AB1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002AB5  1  4C 8A 2A             JMP     LAB_1785        ; loop for next character
002AB8  1               
002AB8  1               ; perform DEC
002AB8  1               
002AB8  1               LAB_DEC:
002AB8  1  A9 6C                LDA     #<LAB_2AFD      ; set -1 pointer low byte
002ABA  1  2C                   .BYTE   $2C             ; BIT abs to skip the LDA below
002ABB  1               
002ABB  1               ; perform INC
002ABB  1               
002ABB  1               LAB_INC:
002ABB  1  A9 68                LDA     #<LAB_259C      ; set 1 pointer low byte
002ABD  1               LAB_17B5:
002ABD  1  48                   PHA                     ; save +/-1 pointer low byte
002ABE  1               LAB_17B7:
002ABE  1  20 67 32             JSR     LAB_GVAR        ; get var address
002AC1  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002AC3  1  30 20                BMI     IncrErr         ; exit if string
002AC5  1               
002AC5  1  85 97                STA     <Lvarpl         ; save var address low byte
002AC7  1  84 98                STY     <Lvarph         ; save var address high byte
002AC9  1  20 E4 40             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002ACC  1  68                   PLA                     ; get +/-1 pointer low byte
002ACD  1  48                   PHA                     ; save +/-1 pointer low byte
002ACE  1  A0 18                LDY     #>LAB_259C      ; set +/-1 pointer high byte (both the same)
002AD0  1  20 CF 3D             JSR     LAB_246C        ; add (AY) to FAC1
002AD3  1  20 5A 41             JSR     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl)
002AD6  1               
002AD6  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002ADA  1  C9 2C                CMP     #','            ; compare with ","
002ADC  1  D0 A6                BNE     LAB_177E        ; exit if not "," (either end or error)
002ADE  1               
002ADE  1               ; was "," so another INCR variable to do
002ADE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002AE2  1  4C BE 2A             JMP     LAB_17B7        ; go do next var
002AE5  1               
002AE5  1               IncrErr:
002AE5  1  4C 65 2F             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
002AE8  1               
002AE8  1               ; perform LET
002AE8  1               
002AE8  1               LAB_LET:
002AE8  1  20 67 32             JSR     LAB_GVAR        ; get var address
002AEB  1  85 97                STA     <Lvarpl         ; save var address low byte
002AED  1  84 98                STY     <Lvarph         ; save var address high byte
002AEF  1  A9 D3                LDA     #TK_EQUAL       ; get = token
002AF1  1  20 7D 30             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002AF4  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002AF6  1  48                   PHA                     ; push data type flag
002AF7  1  20 6A 2F             JSR     LAB_EVEX        ; evaluate expression
002AFA  1  68                   PLA                     ; pop data type flag
002AFB  1  2A                   ROL     A               ; set carry if type = string
002AFC  1  20 5C 2F             JSR     LAB_CKTM        ; type match check, set C for string
002AFF  1  D0 03                BNE     LAB_17D5        ; branch if string
002B01  1               
002B01  1  4C 5A 41             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002B04  1               
002B04  1               ; string LET
002B04  1               
002B04  1               LAB_17D5:
002B04  1  A0 02                LDY     #$02            ; set index to pointer high byte
002B06  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string pointer high byte
002B0A  1  B5 AE C9 00  
002B0E  1  D0 04 A2 00  
002B1C  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
002B1E  1  90 2B                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002B20  1  D0 1B                BNE     LAB_17E6        ; branch if >
002B22  1               ; else was equal so compare low bytes
002B22  1  88                   DEY                     ; decrement index
002B23  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get pointer low byte
002B27  1  B5 AE C9 00  
002B2B  1  D0 04 A2 00  
002B39  1  C5 81                CMP     <Sstorl         ; compare bottom of string space low byte
002B3B  1  90 0E                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002B3D  1               
002B3D  1               ; pointer was >= to bottom of string space pointer
002B3D  1               LAB_17E6:
002B3D  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002B3F  1  C4 7C                CPY     <Svarh          ; compare start of vars high byte
002B41  1  90 08                BCC     LAB_17F4        ; branch if less (descriptor is on stack)
002B43  1               
002B43  1  D0 0D                BNE     LAB_17FB        ; branch if greater (descriptor is not on stack)
002B45  1               
002B45  1               ; else high bytes were equal so ..
002B45  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002B47  1  C5 7B                CMP     <Svarl          ; compare start of vars low byte
002B49  1  B0 07                BCS     LAB_17FB        ; branch if >= (descriptor is not on stack)
002B4B  1               
002B4B  1               LAB_17F4:
002B4B  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002B4D  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002B4F  1  4C 7C 2B             JMP     LAB_1811        ; clean stack, copy descriptor to variable and return
002B52  1               
002B52  1               ; make space and copy string
002B52  1               LAB_17FB:
002B52  1               
002B52  1  A0 00                LDY     #$00            ; index to length
002B54  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string length
002B58  1  B5 AE C9 00  
002B5C  1  D0 04 A2 00  
002B6A  1  20 8E 36             JSR     LAB_209C        ; copy string
002B6D  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
002B6F  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
002B71  1  85 B8                STA     <ssptr_l        ; save descriptor pointer low byte
002B73  1  84 B9                STY     <ssptr_h        ; save descriptor pointer high byte
002B75  1  20 EC 38             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
002B78  1  A9 AC                LDA     #<FAC1_e        ; set descriptor pointer low byte
002B7A  1  A0 00                LDY     #>FAC1_e        ; get descriptor pointer high byte
002B7C  1               
002B7C  1               ; clean stack and assign value to string variable
002B7C  1               LAB_1811:
002B7C  1  85 9E                STA     <des_2l         ; save descriptor_2 pointer low byte
002B7E  1  84 9F                STY     <des_2h         ; save descriptor_2 pointer high byte
002B80  1  20 EE 39             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
002B83  1  A0 00                LDY     #$00            ; index to length
002B85  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string length
002B89  1  B5 9E C9 00  
002B8D  1  D0 04 A2 00  
002B9B  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002B9F  1  01 B5 97 C9  
002BA3  1  00 D0 04 A2  
002BB1  1  C8                   INY                     ; index to string pointer low byte
002BB2  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer low byte
002BB6  1  B5 9E C9 00  
002BBA  1  D0 04 A2 00  
002BC8  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002BCC  1  01 B5 97 C9  
002BD0  1  00 D0 04 A2  
002BDE  1  C8                   INY                     ; index to string pointer high byte
002BDF  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer high byte
002BE3  1  B5 9E C9 00  
002BE7  1  D0 04 A2 00  
002BF5  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002BF9  1  01 B5 97 C9  
002BFD  1  00 D0 04 A2  
002C0B  1  60                   RTS
002C0C  1               
002C0C  1               ; perform GET
002C0C  1               
002C0C  1               LAB_GET:
002C0C  1  20 67 32             JSR     LAB_GVAR        ; get var address
002C0F  1  85 97                STA     <Lvarpl         ; save var address low byte
002C11  1  84 98                STY     <Lvarph         ; save var address high byte
002C13  1  20 05 49             JSR     INGET           ; get input byte
002C16  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002C18  1  30 07                BMI     LAB_GETS        ; go get string character
002C1A  1               
002C1A  1               ; was numeric get
002C1A  1  A8                   TAY                     ; copy character to Y
002C1B  1  20 32 35             JSR     LAB_1FD0        ; convert Y to byte in FAC1
002C1E  1  4C 5A 41             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002C21  1               
002C21  1               LAB_GETS:
002C21  1  48                   PHA                     ; save character
002C22  1  A9 01                LDA     #$01            ; string is single byte
002C24  1  B0 01                BCS     LAB_IsByte      ; branch if byte received
002C26  1               
002C26  1  68                   PLA                     ; string is null
002C27  1               LAB_IsByte:
002C27  1  20 96 36             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
002C2A  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
002C2A  1  F0 19                BEQ     LAB_NoSt        ; skip store if null string
002C2C  1               
002C2C  1  68                   PLA                     ; get character back
002C2D  1  A0 00                LDY     #$00            ; clear index
002C2F  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
002C33  1  01 B5 AD C9  
002C37  1  00 D0 04 A2  
002C45  1               LAB_NoSt:
002C45  1  20 F9 36             JSR     LAB_RTST        ; check for space on descriptor stack then put address
002C48  1               ; and length on descriptor stack and update stack pointers
002C48  1               
002C48  1  4C 04 2B             JMP     LAB_17D5        ; do string LET and return
002C4B  1               
002C4B  1               ; perform PRINT
002C4B  1               
002C4B  1               LAB_1829:
002C4B  1  20 F0 2C             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002C4E  1               LAB_182C:
002C4E  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002C52  1               
002C52  1               ; PRINT
002C52  1               
002C52  1               LAB_PRINT:
002C52  1  F0 51                BEQ     LAB_CRLF        ; if nothing following just print CR/LF
002C54  1               
002C54  1               LAB_1831:
002C54  1  C9 BD                CMP     #TK_TAB         ; compare with TAB( token
002C56  1  F0 6C                BEQ     LAB_18A2        ; go do TAB/SPC
002C58  1               
002C58  1  C9 C1                CMP     #TK_SPC         ; compare with SPC( token
002C5A  1  F0 68                BEQ     LAB_18A2        ; go do TAB/SPC
002C5C  1               
002C5C  1  C9 2C                CMP     #','            ; compare with ","
002C5E  1  F0 4E                BEQ     LAB_188B        ; go do move to next TAB mark
002C60  1               
002C60  1  C9 3B                CMP     #$3B            ; compare with ";"
002C62  1  F0 7F                BEQ     LAB_18BD        ; if ";" continue with PRINT processing
002C64  1               
002C64  1  20 6A 2F             JSR     LAB_EVEX        ; evaluate expression
002C67  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002C69  1  30 E0                BMI     LAB_1829        ; branch if string
002C6B  1               
002C6B  1  20 1E 44             JSR     LAB_296E        ; convert FAC1 to string
002C6E  1  20 A0 36             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002C71  1  A0 00                LDY     #$00            ; clear index
002C73  1               
002C73  1               ; don't check fit if terminal width byte is zero
002C73  1               
002C73  1  A5 0F                LDA     <TWidth         ; get terminal width byte
002C75  1  F0 20                BEQ     LAB_185E        ; skip check if zero
002C77  1               
002C77  1  8B 48 DA A2          FETCHINDIRECTY des_pl
002C7B  1  01 B5 AE C9  
002C7F  1  00 D0 04 A2  
002C8D  1  38                   SEC                     ; set carry for subtract
002C8E  1  E5 0E                SBC     <TPos           ; subtract terminal position
002C90  1  E5 04                SBC     <TMPFLG         ; subtract string length
002C92  1  B0 03                BCS     LAB_185E        ; branch if less than terminal width
002C94  1               
002C94  1  20 A5 2C             JSR     LAB_CRLF        ; else print CR/LF
002C97  1               LAB_185E:
002C97  1  20 F0 2C             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002C9A  1  F0 B2                BEQ     LAB_182C        ; always go continue processing line
002C9C  1               
002C9C  1               ; CR/LF return to BASIC from BASIC input handler
002C9C  1               
002C9C  1               LAB_1866:
002C9C  1  A9 00                LDA     #$00            ; clear byte
002C9E  1  9D 81 21             STA     Ibuffs,X        ; null terminate input
002CA1  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
002CA3  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
002CA5  1               ; print CR/LF
002CA5  1               
002CA5  1               LAB_CRLF:
002CA5  1  A9 0D                LDA     #$0D            ; load [CR]
002CA7  1  20 1B 2D             JSR     LAB_PRNA        ; go print the character
002CAA  1  A9 0A                LDA     #$0A            ; load [LF]
002CAC  1  D0 6D                BNE     LAB_PRNA        ; go print the character and return, branch always
002CAE  1               LAB_188B:
002CAE  1  A5 0E                LDA     <TPos           ; get terminal position
002CB0  1  C5 10                CMP     <Iclim          ; compare with input column limit
002CB2  1  90 05                BCC     LAB_1897        ; branch if less
002CB4  1               
002CB4  1  20 A5 2C             JSR     LAB_CRLF        ; else print CR/LF (next line)
002CB7  1  D0 2A                BNE     LAB_18BD        ; continue with PRINT processing (branch always)
002CB9  1               
002CB9  1               LAB_1897:
002CB9  1  38                   SEC                     ; set carry for subtract
002CBA  1               LAB_1898:
002CBA  1  E5 64                SBC     <TabSiz         ; subtract TAB size
002CBC  1  B0 FC                BCS     LAB_1898        ; loop if result was +ve
002CBE  1               
002CBE  1  49 FF                EOR     #$FF            ; complement it
002CC0  1  69 01                ADC     #$01            ; +1 (twos complement)
002CC2  1  D0 15                BNE     LAB_18B6        ; always print A spaces (result is never $00)
002CC4  1               
002CC4  1               ; do TAB/SPC
002CC4  1               LAB_18A2:
002CC4  1  48                   PHA                     ; save token
002CC5  1  20 02 3C             JSR     LAB_SGBY        ; scan and get byte parameter
002CC8  1  C9 29                CMP     #$29            ; is next character )
002CCA  1  F0 03                BEQ     LAB_18A2aa
002CCC  1               ;BNE	LAB_1910		; if not do syntax error then warm start
002CCC  1  4C 62 2D             JMP     LAB_1910        ; if not do syntax error then warm start
002CCF  1               LAB_18A2aa:
002CCF  1  68                   PLA                     ; get token back
002CD0  1  C9 BD                CMP     #TK_TAB         ; was it TAB ?
002CD2  1  D0 06                BNE     LAB_18B7        ; if not go do SPC
002CD4  1               
002CD4  1               ; calculate TAB offset
002CD4  1  8A                   TXA                     ; copy integer value to A
002CD5  1  E5 0E                SBC     <TPos           ; subtract terminal position
002CD7  1  90 0A                BCC     LAB_18BD        ; branch if result was < 0 (can't TAB backwards)
002CD9  1               
002CD9  1               ; print A spaces
002CD9  1               LAB_18B6:
002CD9  1  AA                   TAX                     ; copy result to X
002CDA  1               LAB_18B7:
002CDA  1  8A                   TXA                     ; set flags on size for SPC
002CDB  1  F0 06                BEQ     LAB_18BD        ; branch if result was = $0, already here
002CDD  1               
002CDD  1               ; print X spaces
002CDD  1               LAB_18BA:
002CDD  1  20 16 2D             JSR     LAB_18E0        ; print " "
002CE0  1  CA                   DEX                     ; decrement count
002CE1  1  D0 FA                BNE     LAB_18BA        ; loop if not all done
002CE3  1               
002CE3  1               ; continue with PRINT processing
002CE3  1               LAB_18BD:
002CE3  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002CE7  1  F0 03                BEQ     LAB_18BDA
002CE9  1  4C 54 2C             JMP     LAB_1831        ; if more to print go do it
002CEC  1               LAB_18BDA:
002CEC  1  60                   RTS
002CED  1               
002CED  1               ; print null terminated string from memory
002CED  1               
002CED  1               LAB_18C3:
002CED  1  20 A0 36             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002CF0  1               
002CF0  1               ; print string from <Sutill/<Sutilh
002CF0  1               
002CF0  1               LAB_18C6:
002CF0  1  20 7D 39             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
002CF3  1               ; space returns with A = length, X=$71=pointer low byte,
002CF3  1               ; Y=$72=pointer high byte
002CF3  1  A0 00                LDY     #$00            ; reset index
002CF5  1  AA                   TAX                     ; copy length to X
002CF6  1  F0 5D                BEQ     LAB_188C        ; exit (RTS) if null string
002CF8  1               LAB_18CD:
002CF8  1               
002CF8  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get next byte
002CFC  1  B5 71 C9 00  
002D00  1  D0 04 A2 00  
002D0E  1  20 1B 2D             JSR     LAB_PRNA        ; go print the character
002D11  1  C8                   INY                     ; increment index
002D12  1  CA                   DEX                     ; decrement count
002D13  1  D0 E3                BNE     LAB_18CD        ; loop if not done yet
002D15  1  60                   RTS
002D16  1               
002D16  1               ; Print single format character
002D16  1               ; print " "
002D16  1               
002D16  1               LAB_18E0:
002D16  1  A9 20                LDA     #$20            ; load " "
002D18  1  2C                   .BYTE   $2C             ; change next line to BIT LAB_3FA9
002D19  1               
002D19  1               ; print "?" character
002D19  1               
002D19  1               LAB_18E3:
002D19  1  A9 3F                LDA     #$3F            ; load "?" character
002D1B  1               
002D1B  1               ; print character in A
002D1B  1               ; now .includes the null handler
002D1B  1               ; also .includes infinite line length code
002D1B  1               ; note! some routines expect this one to exit with Zb=0
002D1B  1               
002D1B  1               LAB_PRNA:
002D1B  1  C9 20                CMP     #' '            ; compare with " "
002D1D  1  90 19                BCC     LAB_18F9        ; branch if less (non printing)
002D1F  1               
002D1F  1               ; else printable character
002D1F  1  48                   PHA                     ; save the character
002D20  1               
002D20  1               ; don't check fit if terminal width byte is zero
002D20  1               
002D20  1  A5 0F                LDA     <TWidth         ; get terminal width
002D22  1  D0 0A                BNE     LAB_18F0        ; branch if not zero (not infinite length)
002D24  1               
002D24  1               ; is "infinite line" so check TAB position
002D24  1               
002D24  1  A5 0E                LDA     <TPos           ; get position
002D26  1  E5 64                SBC     <TabSiz         ; subtract TAB size, carry set by CMP #$20 above
002D28  1  D0 0B                BNE     LAB_18F7        ; skip reset if different
002D2A  1               
002D2A  1  85 0E                STA     <TPos           ; else reset position
002D2C  1  F0 07                BEQ     LAB_18F7        ; go print character
002D2E  1               
002D2E  1               LAB_18F0:
002D2E  1  C5 0E                CMP     <TPos           ; compare with terminal character position
002D30  1  D0 03                BNE     LAB_18F7        ; branch if not at end of line
002D32  1               
002D32  1  20 A5 2C             JSR     LAB_CRLF        ; else print CR/LF
002D35  1               LAB_18F7:
002D35  1  E6 0E                INC     <TPos           ; increment terminal position
002D37  1  68                   PLA                     ; get character back
002D38  1               LAB_18F9:
002D38  1  20 94 18             JSR     V_OUTP          ; output byte via output vector
002D3B  1  C9 0D                CMP     #$0D            ; compare with [CR]
002D3D  1  D0 14                BNE     LAB_188A        ; branch if not [CR]
002D3F  1               
002D3F  1               ; else print nullct nulls after the [CR]
002D3F  1  86 78                STX     <TempB          ; save buffer index
002D41  1  A6 0D                LDX     <Nullct         ; get null count
002D43  1  F0 0A                BEQ     LAB_1886        ; branch if no nulls
002D45  1               
002D45  1  A9 00                LDA     #$00            ; load [NULL]
002D47  1               LAB_1880:
002D47  1  20 1B 2D             JSR     LAB_PRNA        ; go print the character
002D4A  1  CA                   DEX                     ; decrement count
002D4B  1  D0 FA                BNE     LAB_1880        ; loop if not all done
002D4D  1               
002D4D  1  A9 0D                LDA     #$0D            ; restore the character (and set the flags)
002D4F  1               LAB_1886:
002D4F  1  86 0E                STX     <TPos           ; clear terminal position (X always = zero when we get here)
002D51  1  A6 78                LDX     <TempB          ; restore buffer index
002D53  1               LAB_188A:
002D53  1  29 FF                AND     #$FF            ; set the flags
002D55  1               LAB_188C:
002D55  1  60                   RTS
002D56  1               
002D56  1               ; handle bad input data
002D56  1               
002D56  1               LAB_1904:
002D56  1  A5 62                LDA     <Imode          ; get input mode flag, $00=INPUT, $00=READ
002D58  1  10 0B                BPL     LAB_1913        ; branch if INPUT (go do redo)
002D5A  1               
002D5A  1  A5 8D                LDA     <Dlinel         ; get current DATA line low byte
002D5C  1  A4 8E                LDY     <Dlineh         ; get current DATA line high byte
002D5E  1  85 87                STA     <Clinel         ; save current line low byte
002D60  1  84 88                STY     <Clineh         ; save current line high byte
002D62  1               LAB_1910:
002D62  1  4C 90 30             JMP     LAB_SNER        ; do syntax error then warm start
002D65  1               
002D65  1               ; mode was INPUT
002D65  1               LAB_1913:
002D65  1  A9 C4                LDA     #<LAB_REDO      ; point to redo message (low addr)
002D67  1  A0 17                LDY     #>LAB_REDO      ; point to redo message (high addr)
002D69  1  20 ED 2C             JSR     LAB_18C3        ; print null terminated string from memory
002D6C  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002D6E  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002D70  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002D72  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002D74  1  60                   RTS
002D75  1               
002D75  1               ; perform INPUT
002D75  1               
002D75  1               LAB_INPUT:
002D75  1  C9 22                CMP     #$22            ; compare next byte with open quote
002D77  1  D0 0B                BNE     LAB_1934        ; branch if no prompt string
002D79  1               
002D79  1  20 49 30             JSR     LAB_1BC1        ; print "..." string
002D7C  1  A9 3B                LDA     #$3B            ; load A with ";"
002D7E  1  20 7D 30             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002D81  1  20 F0 2C             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002D84  1               
002D84  1               ; done with prompt, now get data
002D84  1               LAB_1934:
002D84  1  20 36 35             JSR     LAB_CKRN        ; check not Direct, back here if ok
002D87  1  20 51 25             JSR     LAB_INLN        ; print "? " and get BASIC input
002D8A  1  A9 00                LDA     #$00            ; set mode = INPUT
002D8C  1               ;CMP	Ibuffs			; test first byte in buffer
002D8C  1  80 06                BRA     LAB_1953        ; branch if not null input
002D8E  1               
002D8E  1               ;CLC				; was null input so clear carry to exit program
002D8E  1               ;JMP	LAB_1647		; go do BREAK exit
002D8E  1               
002D8E  1               ; perform READ
002D8E  1               
002D8E  1               LAB_READ:
002D8E  1  A6 8F                LDX     <Dptrl          ; get DATA pointer low byte
002D90  1  A4 90                LDY     <Dptrh          ; get DATA pointer high byte
002D92  1  A9 80                LDA     #$80            ; set mode = READ
002D94  1               
002D94  1               LAB_1953:
002D94  1  85 62                STA     <Imode          ; set input mode flag, $00=INPUT, $80=READ
002D96  1  86 91                STX     <Rdptrl         ; save READ pointer low byte
002D98  1  84 92                STY     <Rdptrh         ; save READ pointer high byte
002D9A  1               
002D9A  1               ; READ or INPUT next variable from list
002D9A  1               LAB_195B:
002D9A  1  20 67 32             JSR     LAB_GVAR        ; get (var) address
002D9D  1  85 97                STA     <Lvarpl         ; save address low byte
002D9F  1  84 98                STY     <Lvarph         ; save address high byte
002DA1  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002DA3  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002DA5  1  85 11                STA     <Itempl         ; save as temporary integer low byte
002DA7  1  84 12                STY     <Itemph         ; save as temporary integer high byte
002DA9  1  A6 91                LDX     <Rdptrl         ; get READ pointer low byte
002DAB  1  A4 92                LDY     <Rdptrh         ; get READ pointer high byte
002DAD  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002DAF  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002DB1  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002DB5  1  D0 0C                BNE     LAB_1988        ; branch if not null
002DB7  1               
002DB7  1               ; pointer was to null entry
002DB7  1  24 62                BIT     <Imode          ; test input mode flag, $00=INPUT, $80=READ
002DB9  1  30 63                BMI     LAB_19DD        ; branch if READ
002DBB  1               
002DBB  1               ; mode was INPUT
002DBB  1               ;JSR	LAB_18E3		; print "?" character (double ? for extended input)
002DBB  1               ;JSR	LAB_INLN		; print "? " and get BASIC input
002DBB  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002DBD  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002DBF  1               LAB_1985:
002DBF  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002DC3  1               LAB_1988:
002DC3  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002DC5  1  10 24                BPL     LAB_19B0        ; branch if numeric
002DC7  1               
002DC7  1               ; else get string
002DC7  1  85 5B                STA     <Srchc          ; save search character
002DC9  1  C9 22                CMP     #$22            ; was it " ?
002DCB  1  F0 07                BEQ     LAB_1999        ; branch if so
002DCD  1               
002DCD  1  A9 3A                LDA     #':'            ; else search character is ":"
002DCF  1  85 5B                STA     <Srchc          ; set new search character
002DD1  1  A9 2C                LDA     #','            ; other search character is ","
002DD3  1  18                   CLC                     ; clear carry for add
002DD4  1               LAB_1999:
002DD4  1  85 5C                STA     <Asrch          ; set second search character
002DD6  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002DD8  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002DDA  1               
002DDA  1  69 00                ADC     #$00            ; c is =1 if we came via the BEQ LAB_1999, else =0
002DDC  1  90 01                BCC     LAB_19A4        ; branch if no execute pointer low byte rollover
002DDE  1               
002DDE  1  C8                   INY                     ; else increment high byte
002DDF  1               LAB_19A4:
002DDF  1  20 A6 36             JSR     LAB_20B4        ; print <Srchc or <Asrch terminated string to <Sutill/<Sutilh
002DE2  1  20 88 3C             JSR     LAB_23F3        ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
002DE5  1  20 04 2B             JSR     LAB_17D5        ; go do string LET
002DE8  1  4C F1 2D             JMP     LAB_19B6        ; go check string terminator
002DEB  1               
002DEB  1               ; get numeric INPUT
002DEB  1               LAB_19B0:
002DEB  1  20 11 43             JSR     LAB_2887        ; get FAC1 from string
002DEE  1  20 5A 41             JSR     LAB_PFAC        ; pack FAC1 into (<Lvarpl)
002DF1  1               LAB_19B6:
002DF1  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002DF5  1  F0 0B                BEQ     LAB_19C5        ; branch if null (last entry)
002DF7  1               
002DF7  1  C9 2C                CMP     #','            ; else compare with ","
002DF9  1  F0 03                BEQ     LAB_19C2        ; branch if ","
002DFB  1               
002DFB  1  4C 56 2D             JMP     LAB_1904        ; else go handle bad input data
002DFE  1               
002DFE  1               ; got good input data
002DFE  1               LAB_19C2:
002DFE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002E02  1               LAB_19C5:
002E02  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
002E04  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
002E06  1  85 91                STA     <Rdptrl         ; save for now
002E08  1  84 92                STY     <Rdptrh         ; save for now
002E0A  1  A5 11                LDA     <Itempl         ; get temporary integer low byte (temp BASIC execute ptr)
002E0C  1  A4 12                LDY     <Itemph         ; get temporary integer high byte (temp BASIC execute ptr)
002E0E  1  85 C3                STA     <Bpntrl         ; set BASIC execute pointer low byte
002E10  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002E12  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002E16  1  F0 30                BEQ     LAB_1A03        ; if null go do extra ignored message
002E18  1               
002E18  1  20 8C 30             JSR     LAB_1C01        ; else scan for "," , else do syntax error then warm start
002E1B  1  4C 9A 2D             JMP     LAB_195B        ; go INPUT next variable from list
002E1E  1               
002E1E  1               ; find next DATA statement or do "Out of DATA" error
002E1E  1               LAB_19DD:
002E1E  1  20 D4 29             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002E21  1  C8                   INY                     ; increment index
002E22  1  AA                   TAX                     ; copy character ([:] or [EOL])
002E23  1  D0 15                BNE     LAB_19F6        ; branch if [:]
002E25  1               
002E25  1  A2 06                LDX     #$06            ; set for "Out of DATA" error
002E27  1  C8                   INY                     ; increment index, now points to next line pointer high byte
002E28  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
002E2A  1  D0 03                BNE     LAB_19DE        ; branch if NOT end (eventually does error X)
002E2C  1  4C E9 2E             JMP     LAB_1A54
002E2F  1               LAB_19DE:
002E2F  1  C8                   INY                     ; increment index
002E30  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # low byte
002E32  1  85 8D                STA     <Dlinel         ; save current DATA line low byte
002E34  1  C8                   INY                     ; increment index
002E35  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # high byte
002E37  1  C8                   INY                     ; increment index
002E38  1  85 8E                STA     <Dlineh         ; save current DATA line high byte
002E3A  1               LAB_19F6:
002E3A  1  B1 C3                LDA     (<Bpntrl),Y     ; get byte
002E3C  1  C8                   INY                     ; increment index
002E3D  1  AA                   TAX                     ; copy to X
002E3E  1  20 C6 29             JSR     LAB_170F        ; set BASIC execute pointer
002E41  1  E0 83                CPX     #TK_DATA        ; compare with "DATA" token
002E43  1  D0 D9                BNE     LAB_19DD        ; go find next statement if not "DATA"
002E45  1  4C BF 2D             JMP     LAB_1985        ; was "DATA" so go do next READ
002E48  1               
002E48  1               ; end of INPUT/READ routine
002E48  1               
002E48  1               LAB_1A03:
002E48  1  A5 91                LDA     <Rdptrl         ; get temp READ pointer low byte
002E4A  1  A4 92                LDY     <Rdptrh         ; get temp READ pointer high byte
002E4C  1  A6 62                LDX     <Imode          ; get input mode flag, $00=INPUT, $80=READ
002E4E  1  10 03                BPL     LAB_1A0E        ; branch if INPUT
002E50  1               
002E50  1  4C 7E 28             JMP     LAB_1624        ; save AY as DATA pointer and return
002E53  1               
002E53  1               ; we were getting INPUT
002E53  1               LAB_1A0E:
002E53  1  A0 00                LDY     #$00            ; clear index
002E55  1  8B DA A2 01          LDAINDIRECTY Rdptrl     ; get next byte
002E59  1  B5 91 C9 00  
002E5D  1  D0 04 A2 00  
002E6B  1  D0 01                BNE     LAB_1A1B        ; error if not end of INPUT
002E6D  1               
002E6D  1  60                   RTS
002E6E  1               
002E6E  1               ; user typed too much
002E6E  1               LAB_1A1B:
002E6E  1  A9 B3                LDA     #<LAB_IMSG      ; point to extra ignored message (low addr)
002E70  1  A0 17                LDY     #>LAB_IMSG      ; point to extra ignored message (high addr)
002E72  1  4C ED 2C             JMP     LAB_18C3        ; print null terminated string from memory and return
002E75  1               
002E75  1               ; search the stack for FOR activity
002E75  1               ; exit with z=1 if FOR else exit with z=0
002E75  1               
002E75  1               LAB_11A1:
002E75  1  C2 10                INDEX16
002E77  1  BA                   TSX                     ; copy stack pointer
002E78  1  E8                   INX                     ; +1 pass return address
002E79  1  E8                   INX                     ; +2 pass return address
002E7A  1  E8                   INX                     ; +3 pass calling routine return address
002E7B  1  E8                   INX                     ; +4 pass calling routine return address
002E7C  1               LAB_11A6:
002E7C  1  8B                   PHB
002E7D  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
002E7F  1  48                   PHA
002E80  1  AB                   PLB
002E81  1  BD 01 00             LDA     a:1,X           ; get token byte from stack
002E84  1  AB                   PLB
002E85  1  C9 81                CMP     #TK_FOR         ; is it FOR token
002E87  1  D0 47                BNE     LAB_11CE        ; exit if not FOR token
002E89  1               
002E89  1               ; was FOR token
002E89  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
002E8B  1  D0 10                BNE     LAB_11BB        ; branch if not null
002E8D  1               
002E8D  1  8B                   PHB
002E8E  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
002E90  1  48                   PHA
002E91  1  AB                   PLB
002E92  1  BD 02 00             LDA     a:2,X           ; get FOR variable pointer low byte
002E95  1  85 97                STA     <Frnxtl         ; save var pointer for FOR/NEXT low byte
002E97  1  BD 03 00             LDA     a:3,X           ; get FOR variable pointer high byte
002E9A  1  85 98                STA     <Frnxth         ; save var pointer for FOR/NEXT high byte
002E9C  1  AB                   PLB
002E9D  1               LAB_11BB:
002E9D  1  8B                   PHB
002E9E  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
002EA0  1  48                   PHA
002EA1  1  AB                   PLB
002EA2  1  BD 03 00             LDA     a:3,X
002EA5  1  85 04                STA     <TMPFLG
002EA7  1  AB                   PLB
002EA8  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
002EAA  1  D0 11                BNE     LAB_11C7        ; branch if no match
002EAC  1               
002EAC  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
002EAE  1  8B                   PHB
002EAF  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
002EB1  1  48                   PHA
002EB2  1  AB                   PLB
002EB3  1  BD 02 00             LDA     a:2,X
002EB6  1  85 04                STA     <TMPFLG
002EB8  1  AB                   PLB
002EB9  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
002EBB  1  F0 13                BEQ     LAB_11CE        ; exit if match found
002EBD  1               
002EBD  1               LAB_11C7:
002EBD  1  E8                   INX
002EBE  1  E8                   INX
002EBF  1  E8                   INX
002EC0  1  E8                   INX
002EC1  1  E8                   INX
002EC2  1  E8                   INX
002EC3  1  E8                   INX
002EC4  1  E8                   INX
002EC5  1  E8                   INX
002EC6  1  E8                   INX
002EC7  1  E8                   INX
002EC8  1  E8                   INX
002EC9  1  E8                   INX
002ECA  1  E8                   INX
002ECB  1  E8                   INX
002ECC  1  E8                   INX
002ECD  1  9A                   TXS                     ; copy back to index
002ECE  1  D0 AC                BNE     LAB_11A6        ; loop if not at start of stack
002ED0  1               LAB_11CE:
002ED0  1  86 FD                STX     <TEMPW
002ED2  1  E2 10                INDEX8
002ED4  1  60                   RTS
002ED5  1               
002ED5  1               ; perform NEXT
002ED5  1               
002ED5  1               LAB_NEXT:
002ED5  1  D0 04                BNE     LAB_1A46        ; branch if NEXT var
002ED7  1               
002ED7  1  A0 00                LDY     #$00            ; else clear Y
002ED9  1  F0 03                BEQ     LAB_1A49        ; branch always (no variable to search for)
002EDB  1               
002EDB  1               ; NEXT var
002EDB  1               
002EDB  1               LAB_1A46:
002EDB  1  20 67 32             JSR     LAB_GVAR        ; get variable address
002EDE  1               LAB_1A49:
002EDE  1  85 97                STA     <Frnxtl         ; store variable pointer low byte
002EE0  1  84 98                STY     <Frnxth         ; store variable pointer high byte
002EE2  1               ; (both cleared if no variable defined)
002EE2  1  20 75 2E             JSR     LAB_11A1        ; search the stack for FOR activity
002EE5  1  F0 04                BEQ     LAB_1A56        ; branch if found
002EE7  1               
002EE7  1  A2 00                LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
002EE9  1               LAB_1A54:
002EE9  1  F0 7C                BEQ     LAB_1ABE        ; do error #X, then warm start
002EEB  1               
002EEB  1               
002EEB  1               LAB_1A56:
002EEB  1  C2 30                ACCUMULATORINDEX16
002EED  1  A6 FD                LDX     <TEMPW
002EEF  1  9A                   TXS                     ; set stack pointer, X set by search, dumps return addresses
002EF0  1  8A                   TXA                     ; copy stack pointer
002EF1  1  18                   CLC                     ; CLEAR carry
002EF2  1               
002EF2  1  69 09 00             ADC     #$0009          ; point to TO var
002EF5  1  85 73                STA     <ut2_pl         ; save pointer to TO var for compare
002EF7  1  38                   SEC
002EF8  1  E9 05 00             SBC     #$0005          ; point to STEP var
002EFB  1  85 FD                STA     <TEMPW
002EFD  1               
002EFD  1  E2 30                ACCUMULATORINDEX8
002EFF  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
002F01  1               
002F01  1  8B                   PHB                     ; ensure UNPACK works in stack bank not data bank
002F02  1  DA                   PHX
002F03  1  A2 00                LDX     #$00
002F05  1  DA                   PHX
002F06  1  AB                   PLB
002F07  1  FA                   PLX
002F08  1  20 E4 40             JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
002F0B  1  AB                   PLB
002F0C  1               
002F0C  1  A3 08                LDA     8,S             ; get step sign
002F0E  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
002F10  1  A5 97                LDA     <Frnxtl         ; get FOR variable pointer low byte
002F12  1  A4 98                LDY     <Frnxth         ; get FOR variable pointer high byte
002F14  1  20 CF 3D             JSR     LAB_246C        ; add (FOR variable) to FAC1
002F17  1  20 5A 41             JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
002F1A  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
002F1C  1               
002F1C  1  8B                   PHB                     ; ensure compare works in stack bank not data bank
002F1D  1  DA                   PHX
002F1E  1  A2 00                LDX     #$00
002F20  1  DA                   PHX
002F21  1  AB                   PLB
002F22  1  FA                   PLX
002F23  1               
002F23  1  20 20 42             JSR     LAB_27FA        ; compare FAC1 with (Y,<ut2_pl) (TO value)
002F26  1  AB                   PLB
002F27  1               
002F27  1               
002F27  1  C3 08                CMP     8,S             ; compare step sign
002F29  1  F0 13                BEQ     LAB_1A9B        ; branch if = (loop complete)
002F2B  1               ;
002F2B  1               ;					; loop back and do it all again
002F2B  1  A3 0D                LDA     $0D,S           ; get FOR line low byte
002F2D  1  85 87                STA     <Clinel         ; save current line low byte
002F2F  1  A3 0E                LDA     $0E,S           ; get FOR line high byte
002F31  1  85 88                STA     <Clineh         ; save current line high byte
002F33  1  A3 10                LDA     $10,S           ; get BASIC execute pointer low byte
002F35  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002F37  1  A3 0F                LDA     $0F,S           ; get BASIC execute pointer high byte
002F39  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002F3B  1               LAB_1A98:
002F3B  1  4C E9 27             JMP     LAB_15C2        ; go do interpreter inner loop
002F3E  1               ;
002F3E  1               ;					; loop complete so carry on
002F3E  1               LAB_1A9B:
002F3E  1               
002F3E  1               
002F3E  1  C2 30                ACCUMULATORINDEX16
002F40  1  3B                   TSC                     ; stack copy to A
002F41  1               ;;;;;;;;;;;;;;;;;;; THIS MAY NOT BE RIGHT !@#$%^&* TAG
002F41  1  69 0F 00             ADC     #$000F          ; add $10 ($0F+carry) to dump FOR structure
002F44  1  1B                   TCS                     ; copy back to index
002F45  1  E2 30                ACCUMULATORINDEX8
002F47  1               
002F47  1               
002F47  1               
002F47  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002F4B  1  C9 2C                CMP     #','            ; compare with ","
002F4D  1  D0 EC                BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
002F4F  1               
002F4F  1               ; was "," so another NEXT variable to do
002F4F  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
002F53  1  20 DB 2E             JSR     LAB_1A46        ; do NEXT (var)
002F56  1               
002F56  1               ; evaluate expression and check is numeric, else do type mismatch
002F56  1               
002F56  1               LAB_EVNM:
002F56  1  20 6A 2F             JSR     LAB_EVEX        ; evaluate expression
002F59  1               
002F59  1               ; check if source is numeric, else do type mismatch
002F59  1               
002F59  1               LAB_CTNM:
002F59  1  18                   CLC                     ; destination is numeric
002F5A  1  24                   .BYTE   $24             ; makes next line BIT $38
002F5B  1               
002F5B  1               ; check if source is string, else do type mismatch
002F5B  1               
002F5B  1               LAB_CTST:
002F5B  1  38                   SEC                     ; required type is string
002F5C  1               
002F5C  1               ; type match check, set C for string, clear C for numeric
002F5C  1               
002F5C  1               LAB_CKTM:
002F5C  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002F5E  1  30 03                BMI     LAB_1ABA        ; branch if data type is string
002F60  1               
002F60  1               ; else data type was numeric
002F60  1  B0 03                BCS     LAB_1ABC        ; if required type is string do type mismatch error
002F62  1               LAB_1AB9:
002F62  1  60                   RTS
002F63  1               
002F63  1               ; data type was string, now check required type
002F63  1               LAB_1ABA:
002F63  1  B0 FD                BCS     LAB_1AB9        ; exit if required type is string
002F65  1               
002F65  1               ; else do type mismatch error
002F65  1               LAB_1ABC:
002F65  1  A2 18                LDX     #$18            ; error code $18 ("Type mismatch" error)
002F67  1               LAB_1ABE:
002F67  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
002F6A  1               
002F6A  1               ; evaluate expression
002F6A  1               
002F6A  1               LAB_EVEX:
002F6A  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
002F6C  1  D0 02                BNE     LAB_1AC7        ; skip next if not zero
002F6E  1               
002F6E  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
002F70  1               LAB_1AC7:
002F70  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
002F72  1               
002F72  1               LAB_EVEZ:
002F72  1  A9 00                LDA     #$00            ; set null precedence (flag done)
002F74  1               LAB_1ACC:
002F74  1  48                   PHA                     ; push precedence byte
002F75  1  A9 02                LDA     #$02            ; 2 bytes
002F77  1  20 03 24             JSR     LAB_1212        ; check room on stack for A bytes
002F7A  1  20 58 30             JSR     LAB_GVAL        ; get value from line
002F7D  1  A9 00                LDA     #$00            ; clear A
002F7F  1  85 9B                STA     <comp_f         ; clear compare function flag
002F81  1               LAB_1ADB:
002F81  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002F85  1               LAB_1ADE:
002F85  1  38                   SEC                     ; set carry for subtract
002F86  1  E9 D2                SBC     #TK_GT          ; subtract token for > (lowest comparison function)
002F88  1  90 18                BCC     LAB_1AFA        ; branch if < TK_GT
002F8A  1               
002F8A  1  C9 03                CMP     #$03            ; compare with ">" to "<" tokens
002F8C  1  B0 14                BCS     LAB_1AFA        ; branch if >= TK_SGN (highest evaluation function +1)
002F8E  1               
002F8E  1               ; was token for > = or < (A = 0, 1 or 2)
002F8E  1  C9 01                CMP     #$01            ; compare with token for =
002F90  1  2A                   ROL     A               ; *2, b0 = carry (=1 if token was = or <)
002F91  1               ; (A = 0, 3 or 5)
002F91  1  49 01                EOR     #$01            ; toggle b0
002F93  1               ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
002F93  1  45 9B                EOR     <comp_f         ; EOR with compare function flag bits
002F95  1  C5 9B                CMP     <comp_f         ; compare with compare function flag
002F97  1  90 68                BCC     LAB_1B53        ; if <(<comp_f) do syntax error then warm start
002F99  1               ; was more than one <, = or >)
002F99  1               
002F99  1  85 9B                STA     <comp_f         ; save new compare function flag
002F9B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002F9F  1  4C 85 2F             JMP     LAB_1ADE        ; go do next character
002FA2  1               
002FA2  1               ; token is < ">" or > "<" tokens
002FA2  1               LAB_1AFA:
002FA2  1  A6 9B                LDX     <comp_f         ; get compare function flag
002FA4  1  D0 2C                BNE     LAB_1B2A        ; branch if compare function
002FA6  1               
002FA6  1  B0 79                BCS     LAB_1B78        ; go do functions
002FA8  1               
002FA8  1               ; else was <  TK_GT so is operator or lower
002FA8  1  69 0A                ADC     #TK_GT-TK_PLUS  ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
002FAA  1  90 75                BCC     LAB_1B78        ; branch if < + operator
002FAC  1               
002FAC  1               ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
002FAC  1  D0 07                BNE     LAB_1B0B        ; branch if not + token
002FAE  1               
002FAE  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002FB0  1  10 03                BPL     LAB_1B0B        ; branch if not string
002FB2  1               
002FB2  1               ; will only be $00 if type is string and token was +
002FB2  1  4C 84 38             JMP     LAB_224D        ; add strings, string 1 is in descriptor <des_pl, string 2
002FB5  1               ; is in line, and return
002FB5  1               
002FB5  1               LAB_1B0B:
002FB5  1  85 71                STA     <ut1_pl         ; save it
002FB7  1  0A                   ASL     A               ; *2
002FB8  1  65 71                ADC     <ut1_pl         ; *3
002FBA  1  A8                   TAY                     ; copy to index
002FBB  1               LAB_1B13:
002FBB  1  68                   PLA                     ; pull previous precedence
002FBC  1  D9 42 11             CMP     LAB_OPPT,Y      ; compare with precedence byte
002FBF  1  B0 65                BCS     LAB_1B7D        ; branch if A >=
002FC1  1               
002FC1  1  20 59 2F             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
002FC4  1               LAB_1B1C:
002FC4  1  48                   PHA                     ; save precedence
002FC5  1               LAB_1B1D:
002FC5  1  20 ED 2F             JSR     LAB_1B43        ; get vector, execute function then continue evaluation
002FC8  1  68                   PLA                     ; restore precedence
002FC9  1  A4 99                LDY     <prstk          ; get precedence stacked flag
002FCB  1  10 19                BPL     LAB_1B3C        ; branch if stacked values
002FCD  1               
002FCD  1  AA                   TAX                     ; copy precedence (set flags)
002FCE  1  F0 76                BEQ     LAB_1B9D        ; exit if done
002FD0  1               
002FD0  1  D0 5D                BNE     LAB_1B86        ; else pop FAC2 and return, branch always
002FD2  1               
002FD2  1               LAB_1B2A:
002FD2  1  26 5F                ROL     <Dtypef         ; shift data type flag into Cb
002FD4  1  8A                   TXA                     ; copy compare function flag
002FD5  1  85 5F                STA     <Dtypef         ; clear data type flag, X is 0xxx xxxx
002FD7  1  2A                   ROL     A               ; shift data type into compare function byte b0
002FD8  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
002FDA  1  D0 02                BNE     LAB_1B34        ; branch if no underflow
002FDC  1               
002FDC  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
002FDE  1               LAB_1B34:
002FDE  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
002FE0  1               TK_LT_PLUS      = TK_LT-TK_PLUS
002FE0  1  A0 24                LDY     #TK_LT_PLUS*3   ; set offset to last operator entry
002FE2  1  85 9B                STA     <comp_f         ; save new compare function flag
002FE4  1  D0 D5                BNE     LAB_1B13        ; branch always
002FE6  1               
002FE6  1               LAB_1B3C:
002FE6  1  D9 42 11             CMP     LAB_OPPT,Y      ;.compare with stacked function precedence
002FE9  1  B0 44                BCS     LAB_1B86        ; branch if A >=, pop FAC2 and return
002FEB  1               
002FEB  1  90 D7                BCC     LAB_1B1C        ; branch always
002FED  1               
002FED  1               ;.get vector, execute function then continue evaluation
002FED  1               
002FED  1               LAB_1B43:
002FED  1  B9 44 11             LDA     LAB_OPPT+2,Y    ; get function vector high byte
002FF0  1  48                   PHA                     ; onto stack
002FF1  1  B9 43 11             LDA     LAB_OPPT+1,Y    ; get function vector low byte
002FF4  1  48                   PHA                     ; onto stack
002FF5  1               ; now push sign, round FAC1 and put on stack
002FF5  1  20 04 30             JSR     LAB_1B5B        ; function will return here, then the next RTS will call
002FF8  1               ; the function
002FF8  1  A5 9B                LDA     <comp_f         ; get compare function flag
002FFA  1  48                   PHA                     ; push compare evaluation byte
002FFB  1  B9 42 11             LDA     LAB_OPPT,Y      ; get precedence byte
002FFE  1  4C 74 2F             JMP     LAB_1ACC        ; continue evaluating expression
003001  1               
003001  1               LAB_1B53:
003001  1  4C 90 30             JMP     LAB_SNER        ; do syntax error then warm start
003004  1               
003004  1               ; push sign, round FAC1 and put on stack
003004  1               
003004  1               LAB_1B5B:
003004  1  68                   PLA                     ; get return addr low byte
003005  1  85 71                STA     <ut1_pl         ; save it
003007  1  E6 71                INC     <ut1_pl         ; increment it (was ret-1 pushed? yes!)
003009  1               ; note! no check is made on the high byte! if the calling
003009  1               ; routine assembles to a page edge then this all goes
003009  1               ; horribly wrong !!!
003009  1  68                   PLA                     ; get return addr high byte
00300A  1  85 72                STA     <ut1_ph         ; save it
00300C  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00300E  1  48                   PHA                     ; push sign
00300F  1               
00300F  1               ; round FAC1 and put on stack
00300F  1               
00300F  1               LAB_1B66:
00300F  1  20 E0 41             JSR     LAB_27BA        ; round FAC1
003012  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003014  1  48                   PHA                     ; push on stack
003015  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003017  1  48                   PHA                     ; push on stack
003018  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
00301A  1  48                   PHA                     ; push on stack
00301B  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00301D  1  48                   PHA                     ; push on stack
00301E  1  6C 71 00             JMP     (ut1_pl)        ; return, sort of
003021  1               
003021  1               ; do functions
003021  1               
003021  1               LAB_1B78:
003021  1  A0 FF                LDY     #$FF            ; flag function
003023  1  68                   PLA                     ; pull precedence byte
003024  1               LAB_1B7B:
003024  1  F0 20                BEQ     LAB_1B9D        ; exit if done
003026  1               
003026  1               LAB_1B7D:
003026  1  C9 64                CMP     #$64            ; compare previous precedence with $64
003028  1  F0 03                BEQ     LAB_1B84        ; branch if was $64 (< function)
00302A  1               
00302A  1  20 59 2F             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
00302D  1               LAB_1B84:
00302D  1  84 99                STY     <prstk          ; save precedence stacked flag
00302F  1               
00302F  1               ; pop FAC2 and return
00302F  1               LAB_1B86:
00302F  1  68                   PLA                     ; pop byte
003030  1  4A                   LSR     A               ; shift out comparison evaluation lowest bit
003031  1  85 63                STA     <Cflag          ; save comparison evaluation flag
003033  1  68                   PLA                     ; pop exponent
003034  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
003036  1  68                   PLA                     ; pop mantissa1
003037  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
003039  1  68                   PLA                     ; pop mantissa2
00303A  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
00303C  1  68                   PLA                     ; pop mantissa3
00303D  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
00303F  1  68                   PLA                     ; pop sign
003040  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
003042  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
003044  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
003046  1               LAB_1B9D:
003046  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003048  1  60                   RTS
003049  1               
003049  1               ; print "..." string to string util area
003049  1               
003049  1               LAB_1BC1:
003049  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
00304B  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
00304D  1  69 00                ADC     #$00            ; add carry to low byte
00304F  1  90 01                BCC     LAB_1BCA        ; branch if no overflow
003051  1               
003051  1  C8                   INY                     ; increment high byte
003052  1               LAB_1BCA:
003052  1  20 A0 36             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
003055  1  4C 88 3C             JMP     LAB_23F3        ; restore BASIC execute pointer from temp and return
003058  1               
003058  1               ; get value from line
003058  1               
003058  1               LAB_GVAL:
003058  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00305C  1  B0 03                BCS     LAB_1BAC        ; branch if not numeric character
00305E  1               
00305E  1               ; else numeric string found (e.g. 123)
00305E  1               LAB_1BA9:
00305E  1  4C 11 43             JMP     LAB_2887        ; get FAC1 from string and return
003061  1               
003061  1               ; get value from line .. continued
003061  1               
003061  1               ; wasn't a number so ..
003061  1               LAB_1BAC:
003061  1  AA                   TAX                     ; set the flags
003062  1  30 31                BMI     LAB_1BD0        ; if -ve go test token values
003064  1               
003064  1               ; else it is either a string, number, variable or (<expr>)
003064  1  C9 24                CMP     #'$'            ; compare with "$"
003066  1  F0 F6                BEQ     LAB_1BA9        ; branch if "$", hex number
003068  1               
003068  1  C9 25                CMP     #'%'            ; else compare with "%"
00306A  1  F0 F2                BEQ     LAB_1BA9        ; branch if "%", binary number
00306C  1               
00306C  1  C9 2E                CMP     #'.'            ; compare with "."
00306E  1  F0 EE                BEQ     LAB_1BA9        ; if so get FAC1 from string and return (e.g. was .123)
003070  1               
003070  1               ; it wasn't any sort of number so ..
003070  1  C9 22                CMP     #$22            ; compare with "
003072  1  F0 D5                BEQ     LAB_1BC1        ; branch if open quote
003074  1               
003074  1               ; wasn't any sort of number so ..
003074  1               
003074  1               ; evaluate expression within parentheses
003074  1               
003074  1  C9 28                CMP     #'('            ; compare with "("
003076  1  D0 51                BNE     LAB_1C18        ; if not "(" get (var), return value in FAC1 and $ flag
003078  1               
003078  1               LAB_1BF7:
003078  1  20 72 2F             JSR     LAB_EVEZ        ; evaluate expression, no decrement
00307B  1               
00307B  1               ; all the 'scan for' routines return the character after the sought character
00307B  1               
00307B  1               ; scan for ")" , else do syntax error then warm start
00307B  1               
00307B  1               LAB_1BFB:
00307B  1  A9 29                LDA     #$29            ; load A with ")"
00307D  1               
00307D  1               ; scan for CHR$(A) , else do syntax error then warm start
00307D  1               
00307D  1               LAB_SCCA:
00307D  1  A0 00                LDY     #$00            ; clear index
00307F  1  D1 C3                CMP     (<Bpntrl),Y     ; check next byte is = A
003081  1  D0 0D                BNE     LAB_SNER        ; if not do syntax error then warm start
003083  1               
003083  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then return
003087  1  60                   RTS
003088  1               ; scan for "(" , else do syntax error then warm start
003088  1               
003088  1               LAB_1BFE:
003088  1  A9 28                LDA     #$28            ; load A with "("
00308A  1  D0 F1                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
00308C  1               ; (branch always)
00308C  1               
00308C  1               ; scan for "," , else do syntax error then warm start
00308C  1               
00308C  1               LAB_1C01:
00308C  1  A9 2C                LDA     #$2C            ; load A with ","
00308E  1  D0 ED                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003090  1               ; (branch always)
003090  1               
003090  1               ; syntax error then warm start
003090  1               
003090  1               LAB_SNER:
003090  1  A2 02                LDX     #$02            ; error code $02 ("Syntax" error)
003092  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
003095  1               
003095  1               ; get value from line .. continued
003095  1               ; do tokens
003095  1               
003095  1               LAB_1BD0:
003095  1  C9 C9                CMP     #TK_MINUS       ; compare with token for -
003097  1  F0 29                BEQ     LAB_1C11        ; branch if - token (do set-up for functions)
003099  1               
003099  1               ; wasn't -n so ..
003099  1  C9 C8                CMP     #TK_PLUS        ; compare with token for +
00309B  1  F0 BB                BEQ     LAB_GVAL        ; branch if + token (+n = n so ignore leading +)
00309D  1               
00309D  1  C9 C3                CMP     #TK_NOT         ; compare with token for NOT
00309F  1  D0 13                BNE     LAB_1BE7        ; branch if not token for NOT
0030A1  1               
0030A1  1               ; was NOT token
0030A1  1               TK_EQUAL_PLUS   = TK_EQUAL-TK_PLUS
0030A1  1  A0 21                LDY     #TK_EQUAL_PLUS*3; offset to NOT function
0030A3  1  D0 1F                BNE     LAB_1C13        ; do set-up for function then execute (branch always)
0030A5  1               
0030A5  1               ; do = compare
0030A5  1               
0030A5  1               LAB_EQUAL:
0030A5  1  20 68 33             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0030A8  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0030AA  1  49 FF                EOR     #$FF            ; invert it
0030AC  1  A8                   TAY                     ; copy it
0030AD  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0030AF  1  49 FF                EOR     #$FF            ; invert it
0030B1  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0030B4  1               
0030B4  1               ; get value from line .. continued
0030B4  1               
0030B4  1               ; wasn't +, -, or NOT so ..
0030B4  1               LAB_1BE7:
0030B4  1  C9 C0                CMP     #TK_FN          ; compare with token for FN
0030B6  1  D0 03                BNE     LAB_1BEE        ; branch if not token for FN
0030B8  1               
0030B8  1  4C 83 35             JMP     LAB_201E        ; go evaluate FNx
0030BB  1               
0030BB  1               ; get value from line .. continued
0030BB  1               
0030BB  1               ; wasn't +, -, NOT or FN so ..
0030BB  1               LAB_1BEE:
0030BB  1  E9 D5                SBC     #TK_SGN         ; subtract with token for SGN
0030BD  1  B0 19                BCS     LAB_1C27        ; if a function token go do it
0030BF  1               
0030BF  1  4C 90 30             JMP     LAB_SNER        ; else do syntax error
0030C2  1               
0030C2  1               ; set-up for functions
0030C2  1               
0030C2  1               LAB_1C11:
0030C2  1               TK_GT_PLUS      = TK_GT-TK_PLUS
0030C2  1  A0 1E                LDY     #TK_GT_PLUS*3   ; set offset from base to > operator
0030C4  1               LAB_1C13:
0030C4  1  68                   PLA                     ; dump return address low byte
0030C5  1  68                   PLA                     ; dump return address high byte
0030C6  1  4C C5 2F             JMP     LAB_1B1D        ; execute function then continue evaluation
0030C9  1               
0030C9  1               ; variable name set-up
0030C9  1               ; get (var), return value in FAC_1 and $ flag
0030C9  1               
0030C9  1               LAB_1C18:
0030C9  1  20 67 32             JSR     LAB_GVAR        ; get (var) address
0030CC  1  85 AE                STA     <FAC1_2         ; save address low byte in FAC1 mantissa2
0030CE  1  84 AF                STY     <FAC1_3         ; save address high byte in FAC1 mantissa3
0030D0  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
0030D2  1  30 03                BMI     LAB_1C25        ; if string then return (does RTS)
0030D4  1               
0030D4  1               LAB_1C24:
0030D4  1  4C E4 40             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1
0030D7  1               
0030D7  1               LAB_1C25:
0030D7  1  60                   RTS
0030D8  1               
0030D8  1               ; get value from line .. continued
0030D8  1               ; only functions left so ..
0030D8  1               
0030D8  1               ; set up function references
0030D8  1               
0030D8  1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
0030D8  1               ; to process function calls. now the function vector is computed and pushed on the stack
0030D8  1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
0030D8  1               ; is calculated and the routine called, if not this routine just does RTS. whichever
0030D8  1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
0030D8  1               ; the function code
0030D8  1               
0030D8  1               ; this also removes some less than elegant code that was used to bypass type checking
0030D8  1               ; for functions that returned strings
0030D8  1               
0030D8  1               LAB_1C27:
0030D8  1  0A                   ASL     A               ; *2 (2 bytes per function address)
0030D9  1  A8                   TAY                     ; copy to index
0030DA  1               
0030DA  1  B9 FB 10             LDA     LAB_FTBM,Y      ; get function jump vector high byte
0030DD  1  48                   PHA                     ; push functions jump vector high byte
0030DE  1  B9 FA 10             LDA     LAB_FTBL,Y      ; get function jump vector low byte
0030E1  1  48                   PHA                     ; push functions jump vector low byte
0030E2  1               
0030E2  1  B9 B3 10             LDA     LAB_FTPM,Y      ; get function pre process vector high byte
0030E5  1  F0 05                BEQ     LAB_1C56        ; skip pre process if null vector
0030E7  1               
0030E7  1  48                   PHA                     ; push functions pre process vector high byte
0030E8  1  B9 B2 10             LDA     LAB_FTPL,Y      ; get function pre process vector low byte
0030EB  1  48                   PHA                     ; push functions pre process vector low byte
0030EC  1               
0030EC  1               LAB_1C56:
0030EC  1  60                   RTS                     ; do function, or pre process, call
0030ED  1               
0030ED  1               ; process string expression in parenthesis
0030ED  1               
0030ED  1               LAB_PPFS:
0030ED  1  20 78 30             JSR     LAB_1BF7        ; process expression in parenthesis
0030F0  1  4C 5B 2F             JMP     LAB_CTST        ; check if source is string then do function,
0030F3  1               ; else do type mismatch
0030F3  1               
0030F3  1               ; process numeric expression in parenthesis
0030F3  1               
0030F3  1               LAB_PPFN:
0030F3  1  20 78 30             JSR     LAB_1BF7        ; process expression in parenthesis
0030F6  1  4C 59 2F             JMP     LAB_CTNM        ; check if source is numeric then do function,
0030F9  1               ; else do type mismatch
0030F9  1               
0030F9  1               ; set numeric data type and increment BASIC execute pointer
0030F9  1               
0030F9  1               LAB_PPBI:
0030F9  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0030FB  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
0030FF  1  60                   RTS
003100  1               ; process string for LEFT$, RIGHT$ or MID$
003100  1               
003100  1               LAB_LRMS:
003100  1  20 72 2F             JSR     LAB_EVEZ        ; evaluate (should be string) expression
003103  1  20 8C 30             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
003106  1  20 5B 2F             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003109  1               
003109  1  68                   PLA                     ; get function jump vector low byte
00310A  1  AA                   TAX                     ; save functions jump vector low byte
00310B  1  68                   PLA                     ; get function jump vector high byte
00310C  1  A8                   TAY                     ; save functions jump vector high byte
00310D  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
00310F  1  48                   PHA                     ; push string pointer high byte
003110  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003112  1  48                   PHA                     ; push string pointer low byte
003113  1  98                   TYA                     ; get function jump vector high byte back
003114  1  48                   PHA                     ; save functions jump vector high byte
003115  1  8A                   TXA                     ; get function jump vector low byte back
003116  1  48                   PHA                     ; save functions jump vector low byte
003117  1  20 06 3C             JSR     LAB_GTBY        ; get byte parameter
00311A  1  8A                   TXA                     ; copy byte parameter to A
00311B  1  60                   RTS                     ; go do function
00311C  1               
00311C  1               ; process numeric expression(s) for BIN$ or HEX$
00311C  1               
00311C  1               LAB_BHSS:
00311C  1  20 72 2F             JSR     LAB_EVEZ        ; process expression
00311F  1  20 59 2F             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003122  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003124  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
003126  1  B0 22                BCS     LAB_BHER        ; branch if n>=2^24 (is too big)
003128  1               
003128  1  20 BB 42             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
00312B  1  A2 02                LDX     #$02            ; 3 bytes to do
00312D  1               LAB_CFAC:
00312D  1  B5 AD                LDA     <FAC1_1,X       ; get byte from FAC1
00312F  1  95 11                STA     <nums_1,X       ; save byte to temp
003131  1  CA                   DEX                     ; decrement index
003132  1  10 F9                BPL     LAB_CFAC        ; copy FAC1 mantissa to temp
003134  1               
003134  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
003138  1  A2 00                LDX     #$00            ; set default to no leading "0"s
00313A  1  C9 29                CMP     #')'            ; compare with close bracket
00313C  1  F0 0B                BEQ     LAB_1C54        ; if ")" go do rest of function
00313E  1               
00313E  1  20 97 3C             JSR     LAB_SCGB        ; scan for "," and get byte
003141  1  22 C2 00 00          JSL     LAB_GBYT        ; get last byte back
003145  1  C9 29                CMP     #')'            ; is next character )
003147  1  D0 01                BNE     LAB_BHER        ; if not ")" go do error
003149  1               
003149  1               LAB_1C54:
003149  1  60                   RTS                     ; else do function
00314A  1               
00314A  1               LAB_BHER:
00314A  1  4C EF 33             JMP     LAB_FCER        ; do function call error then warm start
00314D  1               
00314D  1               ; perform EOR
00314D  1               
00314D  1               ; added operator format is the same as AND or OR, precedence is the same as OR
00314D  1               
00314D  1               ; this bit worked first time but it took a while to sort out the operator table
00314D  1               ; pointers and offsets afterwards!
00314D  1               
00314D  1               LAB_EOR:
00314D  1  20 74 31             JSR     GetFirst        ; get first integer expression (no sign check)
003150  1  45 5B                EOR     <XOAw_l         ; EOR with expression 1 low byte
003152  1  A8                   TAY                     ; save in Y
003153  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003155  1  45 5C                EOR     <XOAw_h         ; EOR with expression 1 high byte
003157  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00315A  1               
00315A  1               ; perform OR
00315A  1               
00315A  1               LAB_OR:
00315A  1  20 74 31             JSR     GetFirst        ; get first integer expression (no sign check)
00315D  1  05 5B                ORA     <XOAw_l         ; OR with expression 1 low byte
00315F  1  A8                   TAY                     ; save in Y
003160  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003162  1  05 5C                ORA     <XOAw_h         ; OR with expression 1 high byte
003164  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003167  1               
003167  1               ; perform AND
003167  1               
003167  1               LAB_AND:
003167  1  20 74 31             JSR     GetFirst        ; get first integer expression (no sign check)
00316A  1  25 5B                AND     <XOAw_l         ; AND with expression 1 low byte
00316C  1  A8                   TAY                     ; save in Y
00316D  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00316F  1  25 5C                AND     <XOAw_h         ; AND with expression 1 high byte
003171  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003174  1               
003174  1               ; get first value for OR, AND or EOR
003174  1               
003174  1               GetFirst:
003174  1  20 68 33             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
003177  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003179  1  85 5C                STA     <XOAw_h         ; save it
00317B  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00317D  1  85 5B                STA     <XOAw_l         ; save it
00317F  1  20 D4 3D             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
003182  1  20 68 33             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
003185  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003187  1               LAB_1C95:
003187  1  60                   RTS
003188  1               
003188  1               ; perform comparisons
003188  1               
003188  1               ; do < compare
003188  1               
003188  1               LAB_LTHAN:
003188  1  20 5C 2F             JSR     LAB_CKTM        ; type match check, set C for string
00318B  1  B0 13                BCS     LAB_1CAE        ; branch if string
00318D  1               
00318D  1               ; do numeric < compare
00318D  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
00318F  1  09 7F                ORA     #$7F            ; set all non sign bits
003191  1  25 B4                AND     <FAC2_1         ; and FAC2 mantissa1 (AND in sign bit)
003193  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
003195  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
003197  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
003199  1  20 1E 42             JSR     LAB_27F8        ; compare FAC1 with FAC2 (AY)
00319C  1  AA                   TAX                     ; copy result
00319D  1  4C D1 31             JMP     LAB_1CE1        ; go evaluate result
0031A0  1               
0031A0  1               ; do string < compare
0031A0  1               LAB_1CAE:
0031A0  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0031A2  1  C6 9B                DEC     <comp_f         ; clear < bit in compare function flag
0031A4  1  20 7D 39             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
0031A7  1               ; space returns with A = length, X=pointer low byte,
0031A7  1               ; Y=pointer high byte
0031A7  1  85 AC                STA     <str_ln         ; save length
0031A9  1  86 AD                STX     <str_pl         ; save string pointer low byte
0031AB  1  84 AE                STY     <str_ph         ; save string pointer high byte
0031AD  1  A5 B5                LDA     <FAC2_2         ; get descriptor pointer low byte
0031AF  1  A4 B6                LDY     <FAC2_3         ; get descriptor pointer high byte
0031B1  1  20 81 39             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0031B4  1               ; returns with A = length, X=pointer low byte,
0031B4  1               ; Y=pointer high byte
0031B4  1  86 B5                STX     <FAC2_2         ; save string pointer low byte
0031B6  1  84 B6                STY     <FAC2_3         ; save string pointer high byte
0031B8  1  AA                   TAX                     ; copy length
0031B9  1  38                   SEC                     ; set carry for subtract
0031BA  1  E5 AC                SBC     <str_ln         ; subtract string 1 length
0031BC  1  F0 08                BEQ     LAB_1CD6        ; branch if str 1 length = string 2 length
0031BE  1               
0031BE  1  A9 01                LDA     #$01            ; set str 1 length > string 2 length
0031C0  1  90 04                BCC     LAB_1CD6        ; branch if so
0031C2  1               
0031C2  1  A6 AC                LDX     <str_ln         ; get string 1 length
0031C4  1  A9 FF                LDA     #$FF            ; set str 1 length < string 2 length
0031C6  1               LAB_1CD6:
0031C6  1  85 B0                STA     <FAC1_s         ; save length compare
0031C8  1  A0 FF                LDY     #$FF            ; set index
0031CA  1  E8                   INX                     ; adjust for loop
0031CB  1               LAB_1CDB:
0031CB  1  C8                   INY                     ; increment index
0031CC  1  CA                   DEX                     ; decrement count
0031CD  1  D0 07                BNE     LAB_1CE6        ; branch if still bytes to do
0031CF  1               
0031CF  1  A6 B0                LDX     <FAC1_s         ; get length compare back
0031D1  1               LAB_1CE1:
0031D1  1  30 39                BMI     LAB_1CF2        ; branch if str 1 < str 2
0031D3  1               
0031D3  1  18                   CLC                     ; flag str 1 <= str 2
0031D4  1  90 36                BCC     LAB_1CF2        ; go evaluate result
0031D6  1               
0031D6  1               LAB_1CE6:
0031D6  1  8B DA A2 01          LDAINDIRECTY FAC2_2     ; get string 2 byte
0031DA  1  B5 B5 C9 00  
0031DE  1  D0 04 A2 00  
0031EC  1  8B 48 DA A2          CMPINDIRECTY FAC1_1     ; compare with string 1 byte
0031F0  1  01 B5 AD C9  
0031F4  1  00 D0 04 A2  
003204  1  F0 C5                BEQ     LAB_1CDB        ; loop if bytes =
003206  1               
003206  1  A2 FF                LDX     #$FF            ; set str 1 < string 2
003208  1  B0 02                BCS     LAB_1CF2        ; branch if so
00320A  1               
00320A  1  A2 01                LDX     #$01            ;  set str 1 > string 2
00320C  1               LAB_1CF2:
00320C  1  E8                   INX                     ; x = 0, 1 or 2
00320D  1  8A                   TXA                     ; copy to A
00320E  1  2A                   ROL     A               ; *2 (1, 2 or 4)
00320F  1  25 63                AND     <Cflag          ; AND with comparison evaluation flag
003211  1  F0 02                BEQ     LAB_1CFB        ; branch if 0 (compare is false)
003213  1               
003213  1  A9 FF                LDA     #$FF            ; else set result true
003215  1               LAB_1CFB:
003215  1  4C 01 42             JMP     LAB_27DB        ; save A as integer byte and return
003218  1               
003218  1               LAB_1CFE:
003218  1  20 8C 30             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00321B  1               
00321B  1               ; perform DIM
00321B  1               
00321B  1               LAB_DIM:
00321B  1  AA                   TAX                     ; copy "DIM" flag to X
00321C  1  20 6D 32             JSR     LAB_1D10        ; search for variable
00321F  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003223  1  D0 F3                BNE     LAB_1CFE        ; scan for "," and loop if not null
003225  1               
003225  1  60                   RTS
003226  1               
003226  1               ; perform << (left shift)
003226  1               
003226  1               LAB_LSHIFT:
003226  1  20 5C 32             JSR     GetPair         ; get integer expression and byte (no sign check)
003229  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
00322B  1  A6 78                LDX     <TempB          ; get shift count
00322D  1  F0 22                BEQ     NoShift         ; branch if zero
00322F  1               
00322F  1  E0 10                CPX     #$10            ; compare bit count with 16d
003231  1  B0 23                BCS     TooBig          ; branch if >=
003233  1               
003233  1               Ls_loop:
003233  1  06 AF                ASL     <FAC1_3         ; shift low byte
003235  1  2A                   ROL     A               ; shift high byte
003236  1  CA                   DEX                     ; decrement bit count
003237  1  D0 FA                BNE     Ls_loop         ; loop if shift not complete
003239  1               
003239  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
00323B  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00323E  1               
00323E  1               ; perform >> (right shift)
00323E  1               
00323E  1               LAB_RSHIFT:
00323E  1  20 5C 32             JSR     GetPair         ; get integer expression and byte (no sign check)
003241  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
003243  1  A6 78                LDX     <TempB          ; get shift count
003245  1  F0 0A                BEQ     NoShift         ; branch if zero
003247  1               
003247  1  E0 10                CPX     #$10            ; compare bit count with 16d
003249  1  B0 0B                BCS     TooBig          ; branch if >=
00324B  1               
00324B  1               Rs_loop:
00324B  1  4A                   LSR     A               ; shift high byte
00324C  1  66 AF                ROR     <FAC1_3         ; shift low byte
00324E  1  CA                   DEX                     ; decrement bit count
00324F  1  D0 FA                BNE     Rs_loop         ; loop if shift not complete
003251  1               
003251  1               NoShift:
003251  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
003253  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003256  1               
003256  1               TooBig:
003256  1  A9 00                LDA     #$00            ; clear high byte
003258  1  A8                   TAY                     ; copy to low byte
003259  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00325C  1               
00325C  1               GetPair:
00325C  1  20 09 3C             JSR     LAB_EVBY        ; evaluate byte expression, result in X
00325F  1  86 78                STX     <TempB          ; save it
003261  1  20 D4 3D             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
003264  1  4C 68 33             JMP     LAB_EVIR        ; evaluate integer expression (no sign check)
003267  1               
003267  1               ; search for variable
003267  1               
003267  1               ; return pointer to variable in <Cvaral/<Cvarah
003267  1               
003267  1               LAB_GVAR:
003267  1  A2 00                LDX     #$00            ; set DIM flag = $00
003269  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory (1st character)
00326D  1               LAB_1D10:
00326D  1  86 5E                STX     <Defdim         ; save DIM flag
00326F  1               LAB_1D12:
00326F  1  85 93                STA     <Varnm1         ; save 1st character
003271  1  29 7F                AND     #$7F            ; clear FN flag bit
003273  1  20 DF 32             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
003276  1  B0 03                BCS     LAB_1D1F        ; branch if ok
003278  1               
003278  1  4C 90 30             JMP     LAB_SNER        ; else syntax error then warm start
00327B  1               
00327B  1               ; was variable name so ..
00327B  1               LAB_1D1F:
00327B  1  A2 00                LDX     #$00            ; clear 2nd character temp
00327D  1  86 5F                STX     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00327F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (2nd character)
003283  1  90 05                BCC     LAB_1D2D        ; branch if character = "0"-"9" (ok)
003285  1               
003285  1               ; 2nd character wasn't "0" to "9" so ..
003285  1  20 DF 32             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
003288  1  90 0C                BCC     LAB_1D38        ; branch if <"A" or >"Z" (go check if string)
00328A  1               
00328A  1               LAB_1D2D:
00328A  1  AA                   TAX                     ; copy 2nd character
00328B  1               
00328B  1               ; ignore further (valid) characters in the variable name
00328B  1               LAB_1D2E:
00328B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (3rd character)
00328F  1  90 FA                BCC     LAB_1D2E        ; loop if character = "0"-"9" (ignore)
003291  1               
003291  1  20 DF 32             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
003294  1  B0 F5                BCS     LAB_1D2E        ; loop if character = "A"-"Z" (ignore)
003296  1               
003296  1               ; check if string variable
003296  1               LAB_1D38:
003296  1  C9 24                CMP     #'$'            ; compare with "$"
003298  1  D0 0C                BNE     LAB_1D47        ; branch if not string
00329A  1               
00329A  1               ; to introduce a new variable type (% suffix for integers say) then this branch
00329A  1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
00329A  1               
00329A  1               ; type is string
00329A  1  A9 FF                LDA     #$FF            ; set data type = string
00329C  1  85 5F                STA     <Dtypef         ; set data type flag, $FF=string, $00=numeric
00329E  1  8A                   TXA                     ; get 2nd character back
00329F  1  09 80                ORA     #$80            ; set top bit (indicate string var)
0032A1  1  AA                   TAX                     ; copy back to 2nd character temp
0032A2  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0032A6  1               
0032A6  1               ; after we have determined the variable type we need to come back here to determine
0032A6  1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
0032A6  1               
0032A6  1               
0032A6  1               LAB_1D47:                       ; gets here with character after var name in A
0032A6  1  86 94                STX     <Varnm2         ; save 2nd character
0032A8  1  05 61                ORA     <Sufnxf         ; or with subscript/FNX flag (or FN name)
0032AA  1  C9 28                CMP     #'('            ; compare with "("
0032AC  1  D0 03                BNE     LAB_1D53        ; branch if not "("
0032AE  1               
0032AE  1  4C 7A 33             JMP     LAB_1E17        ; go find, or make, array
0032B1  1               
0032B1  1               ; either find or create var
0032B1  1               ; var name (1st two characters only!) is in <Varnm1,<Varnm2
0032B1  1               
0032B1  1               ; variable name wasn't var(... so look for plain var
0032B1  1               LAB_1D53:
0032B1  1  A9 00                LDA     #$00            ; clear A
0032B3  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
0032B5  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0032B7  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
0032B9  1  A0 00                LDY     #$00            ; clear index
0032BB  1               LAB_1D5D:
0032BB  1  86 AB                STX     <Vrschh         ; save search address high byte
0032BD  1               LAB_1D5F:
0032BD  1  85 AA                STA     <Vrschl         ; save search address low byte
0032BF  1  E4 7E                CPX     <Sarryh         ; compare high address with var space end
0032C1  1  D0 04                BNE     LAB_1D69        ; skip next compare if <>
0032C3  1               
0032C3  1               ; high addresses were = so compare low addresses
0032C3  1  C5 7D                CMP     <Sarryl         ; compare low address with var space end
0032C5  1  F0 2C                BEQ     LAB_1D8B        ; if not found go make new var
0032C7  1               
0032C7  1               LAB_1D69:
0032C7  1  A5 93                LDA     <Varnm1         ; get 1st character of var to find
0032C9  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 1st character
0032CB  1  D0 08                BNE     LAB_1D77        ; branch if no match
0032CD  1               
0032CD  1               ; 1st characters match so compare 2nd characters
0032CD  1  A5 94                LDA     <Varnm2         ; get 2nd character of var to find
0032CF  1  C8                   INY                     ; index to point to variable name 2nd character
0032D0  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 2nd character
0032D2  1  F0 69                BEQ     LAB_1DD7        ; branch if match (found var)
0032D4  1               
0032D4  1  88                   DEY                     ; else decrement index (now = $00)
0032D5  1               LAB_1D77:
0032D5  1  18                   CLC                     ; clear carry for add
0032D6  1  A5 AA                LDA     <Vrschl         ; get search address low byte
0032D8  1  69 06                ADC     #$06            ; +6 (offset to next var name)
0032DA  1  90 E1                BCC     LAB_1D5F        ; loop if no overflow to high byte
0032DC  1               
0032DC  1  E8                   INX                     ; else increment high byte
0032DD  1  D0 DC                BNE     LAB_1D5D        ; loop always (RAM doesn't extend to $FFFF !)
0032DF  1               
0032DF  1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
0032DF  1               
0032DF  1               LAB_CASC:
0032DF  1  C9 61                CMP     #'a'            ; compare with "a"
0032E1  1  B0 0A                BCS     LAB_1D83        ; go check <"z"+1
0032E3  1               
0032E3  1               ; check byte, return C=0 if<"A" or >"Z"
0032E3  1               
0032E3  1               LAB_1D82:
0032E3  1  C9 41                CMP     #'A'            ; compare with "A"
0032E5  1  90 05                BCC     LAB_1D8A        ; exit if less
0032E7  1               
0032E7  1               ; carry is set
0032E7  1  E9 5B                SBC     #$5B            ; subtract "Z"+1
0032E9  1  38                   SEC                     ; set carry
0032EA  1  E9 A5                SBC     #$A5            ; subtract $A5 (restore byte)
0032EC  1               ; carry clear if byte>$5A
0032EC  1               LAB_1D8A:
0032EC  1  60                   RTS
0032ED  1               
0032ED  1               LAB_1D83:
0032ED  1  E9 7B                SBC     #$7B            ; subtract "z"+1
0032EF  1  38                   SEC                     ; set carry
0032F0  1  E9 85                SBC     #$85            ; subtract $85 (restore byte)
0032F2  1               ; carry clear if byte>$7A
0032F2  1  60                   RTS
0032F3  1               
0032F3  1               ; reached end of variable mem without match
0032F3  1               ; .. so create new variable
0032F3  1               LAB_1D8B:
0032F3  1  68                   PLA                     ; pop return address low byte
0032F4  1  48                   PHA                     ; push return address low byte
0032F5  1               LAB_1C18p2      = LAB_1C18+2
0032F5  1  C9 CB                CMP     #<LAB_1C18p2    ; compare with expected calling routine return low byte
0032F7  1  D0 05                BNE     LAB_1D98        ; if not get (var) go create new var
0032F9  1               
0032F9  1               ; This will only drop through if the call was from LAB_1C18 and is only called
0032F9  1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
0032F9  1               ; it prevents the creation of variables not assigned a value.
0032F9  1               
0032F9  1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
0032F9  1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
0032F9  1               
0032F9  1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
0032F9  1               
0032F9  1               ; this is where you would put the undefined variable error call e.g.
0032F9  1               
0032F9  1               ;					; variable doesn't exist so flag error
0032F9  1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
0032F9  1               ;	JMP	LAB_XERR		; do error #X then warm start
0032F9  1               
0032F9  1               ; the above code has been tested and works a treat! (it replaces the three code lines
0032F9  1               ; below)
0032F9  1               
0032F9  1               ; else return dummy null value
0032F9  1  A9 69                LDA     #<LAB_1D96      ; low byte point to $00,$00
0032FB  1               ; (uses part of misc constants table)
0032FB  1  A0 18                LDY     #>LAB_1D96      ; high byte point to $00,$00
0032FD  1  60                   RTS
0032FE  1               
0032FE  1               ; create new numeric variable
0032FE  1               LAB_1D98:
0032FE  1  A5 7D                LDA     <Sarryl         ; get var mem end low byte
003300  1  A4 7E                LDY     <Sarryh         ; get var mem end high byte
003302  1  85 AA                STA     <Ostrtl         ; save old block start low byte
003304  1  84 AB                STY     <Ostrth         ; save old block start high byte
003306  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
003308  1  A4 80                LDY     <Earryh         ; get array mem end high byte
00330A  1  85 A6                STA     <Obendl         ; save old block end low byte
00330C  1  84 A7                STY     <Obendh         ; save old block end high byte
00330E  1  18                   CLC                     ; clear carry for add
00330F  1  69 06                ADC     #$06            ; +6 (space for one var)
003311  1  90 01                BCC     LAB_1DAE        ; branch if no overflow to high byte
003313  1               
003313  1  C8                   INY                     ; else increment high byte
003314  1               LAB_1DAE:
003314  1  85 A4                STA     <Nbendl         ; set new block end low byte
003316  1  84 A5                STY     <Nbendh         ; set new block end high byte
003318  1  20 71 23             JSR     LAB_11CF        ; open up space in memory
00331B  1  A5 A4                LDA     <Nbendl         ; get new start low byte
00331D  1  A4 A5                LDY     <Nbendh         ; get new start high byte (-$100)
00331F  1  C8                   INY                     ; correct high byte
003320  1  85 7D                STA     <Sarryl         ; save new var mem end low byte
003322  1  84 7E                STY     <Sarryh         ; save new var mem end high byte
003324  1  A0 00                LDY     #$00            ; clear index
003326  1  A5 93                LDA     <Varnm1         ; get var name 1st character
003328  1  91 AA                STA     (<Vrschl),Y     ; save var name 1st character
00332A  1  C8                   INY                     ; increment index
00332B  1  A5 94                LDA     <Varnm2         ; get var name 2nd character
00332D  1  91 AA                STA     (<Vrschl),Y     ; save var name 2nd character
00332F  1  A9 00                LDA     #$00            ; clear A
003331  1  C8                   INY                     ; increment index
003332  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
003334  1  C8                   INY                     ; increment index
003335  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
003337  1  C8                   INY                     ; increment index
003338  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
00333A  1  C8                   INY                     ; increment index
00333B  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
00333D  1               
00333D  1               ; found a match for var ((<Vrschl) = ptr)
00333D  1               LAB_1DD7:
00333D  1  A5 AA                LDA     <Vrschl         ; get var address low byte
00333F  1  18                   CLC                     ; clear carry for add
003340  1  69 02                ADC     #$02            ; +2 (offset past var name bytes)
003342  1  A4 AB                LDY     <Vrschh         ; get var address high byte
003344  1  90 01                BCC     LAB_1DE1        ; branch if no overflow from add
003346  1               
003346  1  C8                   INY                     ; else increment high byte
003347  1               LAB_1DE1:
003347  1  85 95                STA     <Cvaral         ; save current var address low byte
003349  1  84 96                STY     <Cvarah         ; save current var address high byte
00334B  1  60                   RTS
00334C  1               
00334C  1               ; set-up array pointer (<Adatal/h) to first element in array
00334C  1               ; set <Adatal,<Adatah to <Astrtl,<Astrth+2*<Dimcnt+#$05
00334C  1               
00334C  1               LAB_1DE6:
00334C  1  A5 5D                LDA     <Dimcnt         ; get # of dimensions (1, 2 or 3)
00334E  1  0A                   ASL     A               ; *2 (also clears the carry !)
00334F  1  69 05                ADC     #$05            ; +5 (result is 7, 9 or 11 here)
003351  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
003353  1  A4 AB                LDY     <Astrth         ; get array pointer high byte
003355  1  90 01                BCC     LAB_1DF2        ; branch if no overflow
003357  1               
003357  1  C8                   INY                     ; else increment high byte
003358  1               LAB_1DF2:
003358  1  85 A4                STA     <Adatal         ; save array data pointer low byte
00335A  1  84 A5                STY     <Adatah         ; save array data pointer high byte
00335C  1  60                   RTS
00335D  1               
00335D  1               ; evaluate integer expression
00335D  1               
00335D  1               LAB_EVIN:
00335D  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003361  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003364  1               ; else do type mismatch
003364  1               
003364  1               ; evaluate integer expression (no check)
003364  1               
003364  1               LAB_EVPI:
003364  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003366  1  30 0D                BMI     LAB_1E12        ; do function call error if -ve
003368  1               
003368  1               ; evaluate integer expression (no sign check)
003368  1               
003368  1               LAB_EVIR:
003368  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00336A  1  C9 90                CMP     #$90            ; compare with exponent = 2^16 (n>2^15)
00336C  1  90 09                BCC     LAB_1E14        ; branch if n<2^16 (is ok)
00336E  1               
00336E  1  A9 70                LDA     #<LAB_1DF7      ; set pointer low byte to -32768
003370  1  A0 18                LDY     #>LAB_1DF7      ; set pointer high byte to -32768
003372  1  20 1E 42             JSR     LAB_27F8        ; compare FAC1 with (AY)
003375  1               LAB_1E12:
003375  1  D0 78                BNE     LAB_FCER        ; if <> do function call error then warm start
003377  1               
003377  1               LAB_1E14:
003377  1  4C BB 42             JMP     LAB_2831        ; convert FAC1 floating-to-fixed and return
00337A  1               
00337A  1               ; find or make array
00337A  1               
00337A  1               LAB_1E17:
00337A  1  A5 5E                LDA     <Defdim         ; get DIM flag
00337C  1  48                   PHA                     ; push it
00337D  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
00337F  1  48                   PHA                     ; push it
003380  1  A0 00                LDY     #$00            ; clear dimensions count
003382  1               
003382  1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
003382  1               
003382  1               LAB_1E1F:
003382  1  98                   TYA                     ; copy dimensions count
003383  1  48                   PHA                     ; save it
003384  1  A5 94                LDA     <Varnm2         ; get array name 2nd byte
003386  1  48                   PHA                     ; save it
003387  1  A5 93                LDA     <Varnm1         ; get array name 1st byte
003389  1  48                   PHA                     ; save it
00338A  1  20 5D 33             JSR     LAB_EVIN        ; evaluate integer expression
00338D  1  68                   PLA                     ; pull array name 1st byte
00338E  1  85 93                STA     <Varnm1         ; restore array name 1st byte
003390  1  68                   PLA                     ; pull array name 2nd byte
003391  1  85 94                STA     <Varnm2         ; restore array name 2nd byte
003393  1  68                   PLA                     ; pull dimensions count
003394  1  A8                   TAY                     ; restore it
003395  1  A3 02                LDA     2,S             ; get DIM flag
003397  1  85 FD                STA     <TEMPW          ; push it
003399  1  A3 01                LDA     1,S             ; get data type flag
00339B  1  85 FE                STA     <TEMPW+1        ; push it
00339D  1  A5 AE                LDA     <FAC1_2         ; get this dimension size high byte
00339F  1  83 02                STA     2,S             ; stack before flag bytes
0033A1  1  A5 AF                LDA     <FAC1_3         ; get this dimension size low byte
0033A3  1  83 01                STA     1,S             ; stack before flag bytes
0033A5  1  A5 FD                LDA     <TEMPW
0033A7  1  48                   PHA
0033A8  1  A5 FE                LDA     <TEMPW+1
0033AA  1  48                   PHA
0033AB  1  C8                   INY                     ; increment dimensions count
0033AC  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0033B0  1  C9 2C                CMP     #','            ; compare with ","
0033B2  1  F0 CE                BEQ     LAB_1E1F        ; if found go do next dimension
0033B4  1               
0033B4  1  84 5D                STY     <Dimcnt         ; store dimensions count
0033B6  1  20 7B 30             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0033B9  1  68                   PLA                     ; pull data type flag
0033BA  1  85 5F                STA     <Dtypef         ; restore data type flag, $FF=string, $00=numeric
0033BC  1  68                   PLA                     ; pull DIM flag
0033BD  1  85 5E                STA     <Defdim         ; restore DIM flag
0033BF  1  A6 7D                LDX     <Sarryl         ; get array mem start low byte
0033C1  1  A5 7E                LDA     <Sarryh         ; get array mem start high byte
0033C3  1               
0033C3  1               ; now check to see if we are at the end of array memory (we would be if there were
0033C3  1               ; no arrays).
0033C3  1               
0033C3  1               LAB_1E5C:
0033C3  1  86 AA                STX     <Astrtl         ; save as array start pointer low byte
0033C5  1  85 AB                STA     <Astrth         ; save as array start pointer high byte
0033C7  1  C5 80                CMP     <Earryh         ; compare with array mem end high byte
0033C9  1  D0 04                BNE     LAB_1E68        ; branch if not reached array mem end
0033CB  1               
0033CB  1  E4 7F                CPX     <Earryl         ; else compare with array mem end low byte
0033CD  1  F0 39                BEQ     LAB_1EA1        ; go build array if not found
0033CF  1               
0033CF  1               ; search for array
0033CF  1               LAB_1E68:
0033CF  1  A0 00                LDY     #$00            ; clear index
0033D1  1  B1 AA                LDA     (<Astrtl),Y     ; get array name first byte
0033D3  1  C8                   INY                     ; increment index to second name byte
0033D4  1  C5 93                CMP     <Varnm1         ; compare with this array name first byte
0033D6  1  D0 06                BNE     LAB_1E77        ; branch if no match
0033D8  1               
0033D8  1  A5 94                LDA     <Varnm2         ; else get this array name second byte
0033DA  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array name second byte
0033DC  1  F0 16                BEQ     LAB_1E8D        ; array found so branch
0033DE  1               
0033DE  1               ; no match
0033DE  1               LAB_1E77:
0033DE  1  C8                   INY                     ; increment index
0033DF  1  B1 AA                LDA     (<Astrtl),Y     ; get array size low byte
0033E1  1  18                   CLC                     ; clear carry for add
0033E2  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
0033E4  1  AA                   TAX                     ; copy low byte to X
0033E5  1  C8                   INY                     ; increment index
0033E6  1  B1 AA                LDA     (<Astrtl),Y     ; get array size high byte
0033E8  1  65 AB                ADC     <Astrth         ; add array mem pointer high byte
0033EA  1  90 D7                BCC     LAB_1E5C        ; if no overflow go check next array
0033EC  1               ; do array bounds error
0033EC  1               
0033EC  1               LAB_1E85:
0033EC  1  A2 10                LDX     #$10            ; error code $10 ("Array bounds" error)
0033EE  1  2C                   .BYTE   $2C             ; makes next bit BIT LAB_08A2
0033EF  1               
0033EF  1               ; do function call error
0033EF  1               
0033EF  1               LAB_FCER:
0033EF  1  A2 08                LDX     #$08            ; error code $08 ("Function call" error)
0033F1  1               LAB_1E8A:
0033F1  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
0033F4  1               
0033F4  1               ; found array, are we trying to dimension it?
0033F4  1               LAB_1E8D:
0033F4  1  A2 12                LDX     #$12            ; set error $12 ("Double dimension" error)
0033F6  1  A5 5E                LDA     <Defdim         ; get DIM flag
0033F8  1  D0 F7                BNE     LAB_1E8A        ; if we are trying to dimension it do error #X, then warm
0033FA  1               ; start
0033FA  1               
0033FA  1               ; found the array and we're not dimensioning it so we must find an element in it
0033FA  1               
0033FA  1  20 4C 33             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
0033FD  1               ; (<Astrtl,<Astrth points to start of array)
0033FD  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
0033FF  1  A0 04                LDY     #$04            ; set index to array's # of dimensions
003401  1  D1 AA                CMP     (<Astrtl),Y     ; compare with no of dimensions
003403  1  D0 E7                BNE     LAB_1E85        ; if wrong do array bounds error, could do "Wrong
003405  1               ; dimensions" error here .. if we want a different
003405  1               ; error message
003405  1               
003405  1  4C 8B 34             JMP     LAB_1F28        ; found array so go get element
003408  1               ; (could jump to LAB_1F28 as all LAB_1F24 does is take
003408  1               ; <Dimcnt and save it at (<Astrtl),Y which is already the
003408  1               ; same or we would have taken the BNE)
003408  1               
003408  1               ; array not found, so build it
003408  1               LAB_1EA1:
003408  1  20 4C 33             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
00340B  1               ; (<Astrtl,<Astrth points to start of array)
00340B  1  20 1B 24             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
00340E  1               ; addr to check is in AY (low/high)
00340E  1  A0 00                LDY     #$00            ; clear Y (don't need to clear A)
003410  1  84 BB                STY     <Aspth          ; clear array data size high byte
003412  1  A5 93                LDA     <Varnm1         ; get variable name 1st byte
003414  1  91 AA                STA     (<Astrtl),Y     ; save array name 1st byte
003416  1  C8                   INY                     ; increment index
003417  1  A5 94                LDA     <Varnm2         ; get variable name 2nd byte
003419  1  91 AA                STA     (<Astrtl),Y     ; save array name 2nd byte
00341B  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
00341D  1  A0 04                LDY     #$04            ; index to dimension count
00341F  1  84 BA                STY     <Asptl          ; set array data size low byte (four bytes per element)
003421  1  91 AA                STA     (<Astrtl),Y     ; set array's dimensions count
003423  1               
003423  1               ; now calculate the size of the data space for the array
003423  1  18                   CLC                     ; clear carry for add (clear on subsequent loops)
003424  1               LAB_1EC0:
003424  1  A2 0B                LDX     #$0B            ; set default dimension value low byte
003426  1  A9 00                LDA     #$00            ; set default dimension value high byte
003428  1  24 5E                BIT     <Defdim         ; test default DIM flag
00342A  1  50 07                BVC     LAB_1ED0        ; branch if b6 of <Defdim is clear
00342C  1               
00342C  1  68                   PLA                     ; else pull dimension value low byte
00342D  1  69 01                ADC     #$01            ; +1 (allow for zeroeth element)
00342F  1  AA                   TAX                     ; copy low byte to X
003430  1  68                   PLA                     ; pull dimension value high byte
003431  1  69 00                ADC     #$00            ; add carry from low byte
003433  1               
003433  1               LAB_1ED0:
003433  1  C8                   INY                     ; index to dimension value high byte
003434  1  91 AA                STA     (<Astrtl),Y     ; save dimension value high byte
003436  1  C8                   INY                     ; index to dimension value high byte
003437  1  8A                   TXA                     ; get dimension value low byte
003438  1  91 AA                STA     (<Astrtl),Y     ; save dimension value low byte
00343A  1  20 DA 34             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
00343D  1  86 BA                STX     <Asptl          ; save array data size low byte
00343F  1  85 BB                STA     <Aspth          ; save array data size high byte
003441  1  A4 71                LDY     <ut1_pl         ; restore index (saved by subroutine)
003443  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
003445  1  D0 DD                BNE     LAB_1EC0        ; loop while not = 0
003447  1               
003447  1  65 A5                ADC     <Adatah         ; add size high byte to first element high byte
003449  1               ; (carry is always clear here)
003449  1  B0 5D                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
00344B  1               
00344B  1  85 A5                STA     <Adatah         ; save end of array high byte
00344D  1  A8                   TAY                     ; copy end high byte to Y
00344E  1  8A                   TXA                     ; get array size low byte
00344F  1  65 A4                ADC     <Adatal         ; add array start low byte
003451  1  90 03                BCC     LAB_1EF3        ; branch if no carry
003453  1               
003453  1  C8                   INY                     ; else increment end of array high byte
003454  1  F0 52                BEQ     LAB_1F45        ; if overflow go do "Out of memory" error
003456  1               
003456  1               ; set-up mostly complete, now zero the array
003456  1               LAB_1EF3:
003456  1  20 1B 24             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
003459  1               ; addr to check is in AY (low/high)
003459  1  85 7F                STA     <Earryl         ; save array mem end low byte
00345B  1  84 80                STY     <Earryh         ; save array mem end high byte
00345D  1  A9 00                LDA     #$00            ; clear byte for array clear
00345F  1  E6 BB                INC     <Aspth          ; increment array size high byte (now block count)
003461  1  A4 BA                LDY     <Asptl          ; get array size low byte (now index to block)
003463  1  F0 05                BEQ     LAB_1F07        ; branch if low byte = $00
003465  1               
003465  1               LAB_1F02:
003465  1  88                   DEY                     ; decrement index (do 0 to n-1)
003466  1  91 A4                STA     (<Adatal),Y     ; zero byte
003468  1  D0 FB                BNE     LAB_1F02        ; loop until this block done
00346A  1               
00346A  1               LAB_1F07:
00346A  1  C6 A5                DEC     <Adatah         ; decrement array pointer high byte
00346C  1  C6 BB                DEC     <Aspth          ; decrement block count high byte
00346E  1  D0 F5                BNE     LAB_1F02        ; loop until all blocks done
003470  1               
003470  1  E6 A5                INC     <Adatah         ; correct for last loop
003472  1  38                   SEC                     ; set carry for subtract
003473  1  A0 02                LDY     #$02            ; index to array size low byte
003475  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
003477  1  E5 AA                SBC     <Astrtl         ; subtract array start low byte
003479  1  91 AA                STA     (<Astrtl),Y     ; save array size low byte
00347B  1  C8                   INY                     ; index to array size high byte
00347C  1  A5 80                LDA     <Earryh         ; get array mem end high byte
00347E  1  E5 AB                SBC     <Astrth         ; subtract array start high byte
003480  1  91 AA                STA     (<Astrtl),Y     ; save array size high byte
003482  1  A5 5E                LDA     <Defdim         ; get default DIM flag
003484  1  D0 53                BNE     LAB_1F7B        ; exit (RET) if this was a DIM command
003486  1               ; else, find element
003486  1  C8                   INY                     ; index to # of dimensions
003487  1               
003487  1               LAB_1F24:
003487  1  B1 AA                LDA     (<Astrtl),Y     ; get array's dimension count
003489  1  85 5D                STA     <Dimcnt         ; save it
00348B  1               
00348B  1               ; we have found, or built, the array. now we need to find the element
00348B  1               
00348B  1               LAB_1F28:
00348B  1  A9 00                LDA     #$00            ; clear byte
00348D  1  85 BA                STA     <Asptl          ; clear array data pointer low byte
00348F  1               LAB_1F2C:
00348F  1  85 BB                STA     <Aspth          ; save array data pointer high byte
003491  1  C8                   INY                     ; increment index (point to array bound high byte)
003492  1  68                   PLA                     ; pull array index low byte
003493  1  AA                   TAX                     ; copy to X
003494  1  85 AE                STA     <FAC1_2         ; save index low byte to FAC1 mantissa2
003496  1  68                   PLA                     ; pull array index high byte
003497  1  85 AF                STA     <FAC1_3         ; save index high byte to FAC1 mantissa3
003499  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound high byte
00349B  1  90 0E                BCC     LAB_1F48        ; branch if within bounds
00349D  1               
00349D  1  D0 06                BNE     LAB_1F42        ; if outside bounds do array bounds error
00349F  1               
00349F  1               ; else high byte was = so test low bytes
00349F  1  C8                   INY                     ; index to array bound low byte
0034A0  1  8A                   TXA                     ; get array index low byte
0034A1  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound low byte
0034A3  1  90 07                BCC     LAB_1F49        ; branch if within bounds
0034A5  1               
0034A5  1               LAB_1F42:
0034A5  1  4C EC 33             JMP     LAB_1E85        ; else do array bounds error
0034A8  1               
0034A8  1               LAB_1F45:
0034A8  1  4C 4A 24             JMP     LAB_OMER        ; do "Out of memory" error then warm start
0034AB  1               
0034AB  1               LAB_1F48:
0034AB  1  C8                   INY                     ; index to array bound low byte
0034AC  1               LAB_1F49:
0034AC  1  A5 BB                LDA     <Aspth          ; get array data pointer high byte
0034AE  1  05 BA                ORA     <Asptl          ; OR with array data pointer low byte
0034B0  1  F0 0A                BEQ     LAB_1F5A        ; branch if array data pointer = null (skip multiply)
0034B2  1               
0034B2  1  20 DA 34             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
0034B5  1  8A                   TXA                     ; get result low byte
0034B6  1  65 AE                ADC     <FAC1_2         ; add index low byte from FAC1 mantissa2
0034B8  1  AA                   TAX                     ; save result low byte
0034B9  1  98                   TYA                     ; get result high byte
0034BA  1  A4 71                LDY     <ut1_pl         ; restore index
0034BC  1               LAB_1F5A:
0034BC  1  65 AF                ADC     <FAC1_3         ; add index high byte from FAC1 mantissa3
0034BE  1  86 BA                STX     <Asptl          ; save array data pointer low byte
0034C0  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
0034C2  1  D0 CB                BNE     LAB_1F2C        ; loop if dimensions still to do
0034C4  1               
0034C4  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 2
0034C6  1  2A                   ROL     A               ; array data pointer high byte * 2
0034C7  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 4
0034C9  1  2A                   ROL     A               ; array data pointer high byte * 4
0034CA  1  A8                   TAY                     ; copy high byte
0034CB  1  A5 BA                LDA     <Asptl          ; get low byte
0034CD  1  65 A4                ADC     <Adatal         ; add array data start pointer low byte
0034CF  1  85 95                STA     <Cvaral         ; save as current var address low byte
0034D1  1  98                   TYA                     ; get high byte back
0034D2  1  65 A5                ADC     <Adatah         ; add array data start pointer high byte
0034D4  1  85 96                STA     <Cvarah         ; save as current var address high byte
0034D6  1  A8                   TAY                     ; copy high byte to Y
0034D7  1  A5 95                LDA     <Cvaral         ; get current var address low byte
0034D9  1               LAB_1F7B:
0034D9  1  60                   RTS
0034DA  1               
0034DA  1               ; does XY = (<Astrtl),Y * (<Asptl)
0034DA  1               
0034DA  1               LAB_1F7C:
0034DA  1  84 71                STY     <ut1_pl         ; save index
0034DC  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size low byte
0034DE  1  85 76                STA     <dims_l         ; save dimension size low byte
0034E0  1  88                   DEY                     ; decrement index
0034E1  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size high byte
0034E3  1  85 77                STA     <dims_h         ; save dimension size high byte
0034E5  1               
0034E5  1  A9 10                LDA     #$10            ; count = $10 (16 bit multiply)
0034E7  1  85 A8                STA     <numbit         ; save bit count
0034E9  1  A2 00                LDX     #$00            ; clear result low byte
0034EB  1  A0 00                LDY     #$00            ; clear result high byte
0034ED  1               LAB_1F8F:
0034ED  1  8A                   TXA                     ; get result low byte
0034EE  1  0A                   ASL     A               ; *2
0034EF  1  AA                   TAX                     ; save result low byte
0034F0  1  98                   TYA                     ; get result high byte
0034F1  1  2A                   ROL     A               ; *2
0034F2  1  A8                   TAY                     ; save result high byte
0034F3  1  B0 B3                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
0034F5  1               
0034F5  1  06 BA                ASL     <Asptl          ; shift multiplier low byte
0034F7  1  26 BB                ROL     <Aspth          ; shift multiplier high byte
0034F9  1  90 11                BCC     LAB_1FA8        ; skip add if no carry
0034FB  1               
0034FB  1  18                   CLC                     ; else clear carry for add
0034FC  1  8A                   TXA                     ; get result low byte
0034FD  1  65 76                ADC     <dims_l         ; add dimension size low byte
0034FF  1  AA                   TAX                     ; save result low byte
003500  1  98                   TYA                     ; get result high byte
003501  1  65 77                ADC     <dims_h         ; add dimension size high byte
003503  1  A8                   TAY                     ; save result high byte
003504  1  B0 03                BCS     LAB_1F45_1      ; if overflow go do "Out of memory" error
003506  1  4C 0C 35             JMP     LAB_1FA8
003509  1               LAB_1F45_1:
003509  1  4C A8 34             JMP     LAB_1F45
00350C  1               LAB_1FA8:
00350C  1  C6 A8                DEC     <numbit         ; decrement bit count
00350E  1  D0 DD                BNE     LAB_1F8F        ; loop until all done
003510  1               
003510  1  60                   RTS
003511  1               
003511  1               ; perform FRE()
003511  1               
003511  1               LAB_FRE:
003511  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003513  1  10 03                BPL     LAB_1FB4        ; branch if numeric
003515  1               
003515  1  20 7D 39             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
003518  1               ; space returns with A = length, X=$71=pointer low byte,
003518  1               ; Y=$72=pointer high byte
003518  1               
003518  1               ; FRE(n) was numeric so do this
003518  1               LAB_1FB4:
003518  1  20 53 37             JSR     LAB_GARB        ; go do garbage collection
00351B  1  38                   SEC                     ; set carry for subtract
00351C  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
00351E  1  E5 7F                SBC     <Earryl         ; subtract array mem end low byte
003520  1  A8                   TAY                     ; copy result to Y
003521  1  A5 82                LDA     <Sstorh         ; get bottom of string space high byte
003523  1  E5 80                SBC     <Earryh         ; subtract array mem end high byte
003525  1               
003525  1               ; save and convert integer AY to FAC1
003525  1               
003525  1               LAB_AYFC:
003525  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
003527  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003529  1  84 AE                STY     <FAC1_2         ; save FAC1 mantissa2
00352B  1  A2 90                LDX     #$90            ; set exponent=2^16 (integer)
00352D  1  4C 09 42             JMP     LAB_27E3        ; set exp=X, clear <FAC1_3, normalise and return
003530  1               
003530  1               ; perform POS()
003530  1               
003530  1               LAB_POS:
003530  1  A4 0E                LDY     <TPos           ; get terminal position
003532  1               
003532  1               ; convert Y to byte in FAC1
003532  1               
003532  1               LAB_1FD0:
003532  1  A9 00                LDA     #$00            ; clear high byte
003534  1  F0 EF                BEQ     LAB_AYFC        ; always save and convert integer AY to FAC1 and return
003536  1               
003536  1               ; check not Direct (used by DEF and INPUT)
003536  1               
003536  1               LAB_CKRN:
003536  1  A6 88                LDX     <Clineh         ; get current line high byte
003538  1  E8                   INX                     ; increment it
003539  1  F0 03                BEQ     LAB_1FD9
00353B  1  4C D9 34             JMP     LAB_1F7B        ; return if can continue not direct mode
00353E  1               
00353E  1               ; else do illegal direct error
00353E  1               LAB_1FD9:
00353E  1  A2 16                LDX     #$16            ; error code $16 ("Illegal direct" error)
003540  1               LAB_1FDB:
003540  1  4C 4C 24             JMP     LAB_XERR        ; go do error #X, then warm start
003543  1               
003543  1               ; perform DEF
003543  1               
003543  1               LAB_DEF:
003543  1  20 74 35             JSR     LAB_200B        ; check FNx syntax
003546  1  85 9C                STA     <func_l         ; save function pointer low byte
003548  1  84 9D                STY     <func_h         ; save function pointer high byte
00354A  1  20 36 35             JSR     LAB_CKRN        ; check not Direct (back here if ok)
00354D  1  20 88 30             JSR     LAB_1BFE        ; scan for "(" , else do syntax error then warm start
003550  1  A9 80                LDA     #$80            ; set flag for FNx
003552  1  85 61                STA     <Sufnxf         ; save subscript/FNx flag
003554  1  20 67 32             JSR     LAB_GVAR        ; get (var) address
003557  1  20 59 2F             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
00355A  1  20 7B 30             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
00355D  1  A9 D3                LDA     #TK_EQUAL       ; get = token
00355F  1  20 7D 30             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003562  1  A5 96                LDA     <Cvarah         ; get current var address high byte
003564  1  48                   PHA                     ; push it
003565  1  A5 95                LDA     <Cvaral         ; get current var address low byte
003567  1  48                   PHA                     ; push it
003568  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
00356A  1  48                   PHA                     ; push it
00356B  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
00356D  1  48                   PHA                     ; push it
00356E  1  20 C3 29             JSR     LAB_DATA        ; go perform DATA
003571  1  4C 20 36             JMP     LAB_207A        ; put execute pointer and variable pointer into function
003574  1               ; and return
003574  1               
003574  1               ; check FNx syntax
003574  1               
003574  1               LAB_200B:
003574  1  A9 C0                LDA     #TK_FN          ; get FN" token
003576  1  20 7D 30             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
003579  1               ; return character after A
003579  1  09 80                ORA     #$80            ; set FN flag bit
00357B  1  85 61                STA     <Sufnxf         ; save FN flag so array variable test fails
00357D  1  20 6F 32             JSR     LAB_1D12        ; search for FN variable
003580  1  4C 59 2F             JMP     LAB_CTNM        ; check if source is numeric and return, else do type
003583  1               ; mismatch
003583  1               
003583  1               ; Evaluate FNx
003583  1               LAB_201E:
003583  1  20 74 35             JSR     LAB_200B        ; check FNx syntax
003586  1  48                   PHA                     ; push function pointer low byte
003587  1  98                   TYA                     ; copy function pointer high byte
003588  1  48                   PHA                     ; push function pointer high byte
003589  1  20 88 30             JSR     LAB_1BFE        ; scan for "(", else do syntax error then warm start
00358C  1  20 6A 2F             JSR     LAB_EVEX        ; evaluate expression
00358F  1  20 7B 30             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003592  1  20 59 2F             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003595  1  68                   PLA                     ; pop function pointer high byte
003596  1  85 9D                STA     <func_h         ; restore it
003598  1  68                   PLA                     ; pop function pointer low byte
003599  1  85 9C                STA     <func_l         ; restore it
00359B  1  A2 20                LDX     #$20            ; error code $20 ("Undefined function" error)
00359D  1  A0 03                LDY     #$03            ; index to variable pointer high byte
00359F  1  B1 9C                LDA     (<func_l),Y     ; get variable pointer high byte
0035A1  1  F0 9D                BEQ     LAB_1FDB        ; if zero go do undefined function error
0035A3  1               
0035A3  1  85 96                STA     <Cvarah         ; save variable address high byte
0035A5  1  88                   DEY                     ; index to variable address low byte
0035A6  1  B1 9C                LDA     (<func_l),Y     ; get variable address low byte
0035A8  1  85 95                STA     <Cvaral         ; save variable address low byte
0035AA  1  AA                   TAX                     ; copy address low byte
0035AB  1               
0035AB  1               ; now stack the function variable value before use
0035AB  1  C8                   INY                     ; index to mantissa_3
0035AC  1               LAB_2043:
0035AC  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from variable
0035B0  1  B5 95 C9 00  
0035B4  1  D0 04 A2 00  
0035C2  1  48                   PHA                     ; stack it
0035C3  1  88                   DEY                     ; decrement index
0035C4  1  10 E6                BPL     LAB_2043        ; loop until variable stacked
0035C6  1               
0035C6  1  A4 96                LDY     <Cvarah         ; get variable address high byte
0035C8  1  20 5E 41             JSR     LAB_2778        ; pack FAC1 (function expression value) into (XY)
0035CB  1               ; (function variable), return Y=0, always
0035CB  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0035CD  1  48                   PHA                     ; push it
0035CE  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0035D0  1  48                   PHA                     ; push it
0035D1  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer low byte
0035D5  1  B5 9C C9 00  
0035D9  1  D0 04 A2 00  
0035E7  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
0035E9  1  C8                   INY                     ; index to high byte
0035EA  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer high byte
0035EE  1  B5 9C C9 00  
0035F2  1  D0 04 A2 00  
003600  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003602  1  A5 96                LDA     <Cvarah         ; get variable address high byte
003604  1  48                   PHA                     ; push it
003605  1  A5 95                LDA     <Cvaral         ; get variable address low byte
003607  1  48                   PHA                     ; push it
003608  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00360B  1               ; else do type mismatch
00360B  1  68                   PLA                     ; pull variable address low byte
00360C  1  85 9C                STA     <func_l         ; save variable address low byte
00360E  1  68                   PLA                     ; pull variable address high byte
00360F  1  85 9D                STA     <func_h         ; save variable address high byte
003611  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003615  1  F0 03                BEQ     LAB_2074        ; branch if null (should be [EOL] marker)
003617  1               
003617  1  4C 90 30             JMP     LAB_SNER        ; else syntax error then warm start
00361A  1               
00361A  1               ; restore <Bpntrl,<Bpntrh and function variable from stack
00361A  1               
00361A  1               LAB_2074:
00361A  1  68                   PLA                     ; pull BASIC execute pointer low byte
00361B  1  85 C3                STA     <Bpntrl         ; restore BASIC execute pointer low byte
00361D  1  68                   PLA                     ; pull BASIC execute pointer high byte
00361E  1  85 C4                STA     <Bpntrh         ; restore BASIC execute pointer high byte
003620  1               
003620  1               ; put execute pointer and variable pointer into function
003620  1               
003620  1               LAB_207A:
003620  1  A0 00                LDY     #$00            ; clear index
003622  1  68                   PLA                     ; pull BASIC execute pointer low byte
003623  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
003627  1  01 B5 9C C9  
00362B  1  00 D0 04 A2  
003639  1  C8                   INY                     ; increment index
00363A  1  68                   PLA                     ; pull BASIC execute pointer high byte
00363B  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
00363F  1  01 B5 9C C9  
003643  1  00 D0 04 A2  
003651  1  C8                   INY                     ; increment index
003652  1  68                   PLA                     ; pull current var address low byte
003653  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
003657  1  01 B5 9C C9  
00365B  1  00 D0 04 A2  
003669  1  C8                   INY                     ; increment index
00366A  1  68                   PLA                     ; pull current var address high byte
00366B  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
00366F  1  01 B5 9C C9  
003673  1  00 D0 04 A2  
003681  1  60                   RTS
003682  1               
003682  1               ; perform STR$()
003682  1               
003682  1               LAB_STRS:
003682  1  20 59 2F             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003685  1  20 1E 44             JSR     LAB_296E        ; convert FAC1 to string
003688  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
00368A  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
00368C  1  F0 12                BEQ     LAB_20AE        ; print null terminated string to <Sutill/<Sutilh
00368E  1               
00368E  1               ; Do string vector
00368E  1               ; copy <des_pl/h to <des_2l/h and make string space A bytes long
00368E  1               
00368E  1               LAB_209C:
00368E  1  A6 AE                LDX     <des_pl         ; get descriptor pointer low byte
003690  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003692  1  86 9E                STX     <des_2l         ; save descriptor pointer low byte
003694  1  84 9F                STY     <des_2h         ; save descriptor pointer high byte
003696  1               
003696  1               ; make string space A bytes long
003696  1               ; A=length, X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003696  1               
003696  1               LAB_MSSP:
003696  1  20 21 37             JSR     LAB_2115        ; make space in string memory for string A long
003699  1               ; return X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003699  1  86 AD                STX     <str_pl         ; save string pointer low byte
00369B  1  84 AE                STY     <str_ph         ; save string pointer high byte
00369D  1  85 AC                STA     <str_ln         ; save length
00369F  1  60                   RTS
0036A0  1               
0036A0  1               ; Scan, set up string
0036A0  1               ; print " terminated string to <Sutill/<Sutilh
0036A0  1               
0036A0  1               LAB_20AE:
0036A0  1  A2 22                LDX     #$22            ; set terminator to "
0036A2  1  86 5B                STX     <Srchc          ; set search character (terminator 1)
0036A4  1  86 5C                STX     <Asrch          ; set terminator 2
0036A6  1               
0036A6  1               ; print [<Srchc] or [<Asrch] terminated string to <Sutill/<Sutilh
0036A6  1               ; source is AY
0036A6  1               
0036A6  1               LAB_20B4:
0036A6  1  85 B8                STA     <ssptr_l        ; store string start low byte
0036A8  1  84 B9                STY     <ssptr_h        ; store string start high byte
0036AA  1  85 AD                STA     <str_pl         ; save string pointer low byte
0036AC  1  84 AE                STY     <str_ph         ; save string pointer high byte
0036AE  1  A0 FF                LDY     #$FF            ; set length to -1
0036B0  1               LAB_20BE:
0036B0  1  C8                   INY                     ; increment length
0036B1  1               
0036B1  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get byte from string
0036B5  1  B5 B8 C9 00  
0036B9  1  D0 04 A2 00  
0036C7  1  C9 00                CMP     #$00
0036C9  1  F0 0C                BEQ     LAB_20CF        ; exit loop if null byte [EOS]
0036CB  1               
0036CB  1  C5 5B                CMP     <Srchc          ; compare with search character (terminator 1)
0036CD  1  F0 04                BEQ     LAB_20CB        ; branch if terminator
0036CF  1               
0036CF  1  C5 5C                CMP     <Asrch          ; compare with terminator 2
0036D1  1  D0 DD                BNE     LAB_20BE        ; loop if not terminator 2
0036D3  1               
0036D3  1               LAB_20CB:
0036D3  1  C9 22                CMP     #$22            ; compare with "
0036D5  1  F0 01                BEQ     LAB_20D0        ; branch if " (carry set if = !)
0036D7  1               
0036D7  1               LAB_20CF:
0036D7  1  18                   CLC                     ; clear carry for add (only if [EOL] terminated string)
0036D8  1               LAB_20D0:
0036D8  1  84 AC                STY     <str_ln         ; save length in FAC1 exponent
0036DA  1  98                   TYA                     ; copy length to A
0036DB  1  65 B8                ADC     <ssptr_l        ; add string start low byte
0036DD  1  85 BA                STA     <Sendl          ; save string end low byte
0036DF  1  A6 B9                LDX     <ssptr_h        ; get string start high byte
0036E1  1  90 01                BCC     LAB_20DC        ; branch if no low byte overflow
0036E3  1               
0036E3  1  E8                   INX                     ; else increment high byte
0036E4  1               LAB_20DC:
0036E4  1  86 BB                STX     <Sendh          ; save string end high byte
0036E6  1  A5 B9                LDA     <ssptr_h        ; get string start high byte
0036E8  1               
0036E8  1               
0036E8  1               ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
0036E8  1               ; *** replace
0036E8  1               ;      CMP	#((BASICBEGIN&$FF00)>>8)  ; compare with BASICBEGIN, FORMERLY (>Ram_base) start of program memory
0036E8  1               ;      BCS   LAB_RTST          ; branch if not in utility area
0036E8  1               ; *** with
0036E8  1  F0 04                BEQ     LAB_MVST        ; fix STR$() using page zero via LAB_296E
0036EA  1  C9 21                CMP     #>Ibuffs        ; compare with location of input buffer page
0036EC  1  D0 0B                BNE     LAB_RTST        ; branch if not in utility area
0036EE  1               LAB_MVST:
0036EE  1               ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
0036EE  1               
0036EE  1               
0036EE  1  98                   TYA                     ; copy length to A
0036EF  1  20 8E 36             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
0036F2  1               ; long
0036F2  1  A6 B8                LDX     <ssptr_l        ; get string start low byte
0036F4  1  A4 B9                LDY     <ssptr_h        ; get string start high byte
0036F6  1  20 36 39             JSR     LAB_2298        ; store string A bytes long from XY to (<Sutill)
0036F9  1               ; check for space on descriptor stack then ..
0036F9  1               ; put string address and length on descriptor stack and update stack pointers
0036F9  1               
0036F9  1               LAB_RTST:
0036F9  1  A6 65                LDX     <next_s         ; get string stack pointer
0036FB  1  E0 71                CPX     #<des_sk+$09    ; compare with max+1
0036FD  1  D0 05                BNE     LAB_20F8        ; branch if space on string stack
0036FF  1               
0036FF  1               ; else do string too complex error
0036FF  1  A2 1C                LDX     #$1C            ; error code $1C ("String too complex" error)
003701  1               LAB_20F5:
003701  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
003704  1               
003704  1               ; put string address and length on descriptor stack and update stack pointers
003704  1               
003704  1               LAB_20F8:
003704  1  A5 AC                LDA     <str_ln         ; get string length
003706  1  95 00                STA     <PLUS_0,X       ; put on string stack
003708  1  A5 AD                LDA     <str_pl         ; get string pointer low byte
00370A  1  95 01                STA     <PLUS_1,X       ; put on string stack
00370C  1  A5 AE                LDA     <str_ph         ; get string pointer high byte
00370E  1  95 02                STA     <PLUS_2,X       ; put on string stack
003710  1  A0 00                LDY     #$00            ; clear Y
003712  1  86 AE                STX     <des_pl         ; save string descriptor pointer low byte
003714  1  84 AF                STY     <des_ph         ; save string descriptor pointer high byte (always $00)
003716  1  88                   DEY                     ; Y = $FF
003717  1  84 5F                STY     <Dtypef         ; save data type flag, $FF=string
003719  1  86 66                STX     <last_sl        ; save old stack pointer (current top item)
00371B  1  E8                   INX                     ; update stack pointer
00371C  1  E8                   INX                     ; update stack pointer
00371D  1  E8                   INX                     ; update stack pointer
00371E  1  86 65                STX     <next_s         ; save new top item value
003720  1  60                   RTS
003721  1               
003721  1               ; Build descriptor
003721  1               ; make space in string memory for string A long
003721  1               ; return X=<Sutill=ptr low byte, Y=<Sutill=ptr high byte
003721  1               
003721  1               LAB_2115:
003721  1  46 60                LSR     <Gclctd         ; clear garbage collected flag (b7)
003723  1               
003723  1               ; make space for string A long
003723  1               LAB_2117:
003723  1  48                   PHA                     ; save string length
003724  1  49 FF                EOR     #$FF            ; complement it
003726  1  38                   SEC                     ; set carry for subtract (twos comp add)
003727  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte (subtract length)
003729  1  A4 82                LDY     <Sstorh         ; get bottom of string space high byte
00372B  1  B0 01                BCS     LAB_2122        ; skip decrement if no underflow
00372D  1               
00372D  1  88                   DEY                     ; decrement bottom of string space high byte
00372E  1               LAB_2122:
00372E  1  C4 80                CPY     <Earryh         ; compare with array mem end high byte
003730  1  90 11                BCC     LAB_2137        ; do out of memory error if less
003732  1               
003732  1  D0 04                BNE     LAB_212C        ; if not = skip next test
003734  1               
003734  1  C5 7F                CMP     <Earryl         ; compare with array mem end low byte
003736  1  90 0B                BCC     LAB_2137        ; do out of memory error if less
003738  1               
003738  1               LAB_212C:
003738  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
00373A  1  84 82                STY     <Sstorh         ; save bottom of string space high byte
00373C  1  85 83                STA     <Sutill         ; save string utility ptr low byte
00373E  1  84 84                STY     <Sutilh         ; save string utility ptr high byte
003740  1  AA                   TAX                     ; copy low byte to X
003741  1  68                   PLA                     ; get string length back
003742  1  60                   RTS
003743  1               
003743  1               LAB_2137:
003743  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
003745  1  A5 60                LDA     <Gclctd         ; get garbage collected flag
003747  1  30 B8                BMI     LAB_20F5        ; if set then do error code X
003749  1               
003749  1  20 53 37             JSR     LAB_GARB        ; else go do garbage collection
00374C  1  A9 80                LDA     #$80            ; flag for garbage collected
00374E  1  85 60                STA     <Gclctd         ; set garbage collected flag
003750  1  68                   PLA                     ; pull length
003751  1  D0 D0                BNE     LAB_2117        ; go try again (loop always, length should never be = $00)
003753  1               
003753  1               ; garbage collection routine
003753  1               
003753  1               LAB_GARB:
003753  1  A6 85                LDX     <Ememl          ; get end of mem low byte
003755  1  A5 86                LDA     <Ememh          ; get end of mem high byte
003757  1               
003757  1               ; re-run routine from last ending
003757  1               
003757  1               LAB_214B:
003757  1  86 81                STX     <Sstorl         ; set string storage low byte
003759  1  85 82                STA     <Sstorh         ; set string storage high byte
00375B  1  A0 00                LDY     #$00            ; clear index
00375D  1  84 9D                STY     <garb_h         ; clear working pointer high byte (flag no strings to move)
00375F  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
003761  1  A6 80                LDX     <Earryh         ; get array mem end high byte
003763  1  85 AA                STA     <Histrl         ; save as highest string low byte
003765  1  86 AB                STX     <Histrh         ; save as highest string high byte
003767  1  A9 68                LDA     #<des_sk        ; set descriptor stack pointer
003769  1  85 71                STA     <ut1_pl         ; save descriptor stack pointer low byte
00376B  1  84 72                STY     <ut1_ph         ; save descriptor stack pointer high byte ($00)
00376D  1               LAB_2161:
00376D  1  C5 65                CMP     <next_s         ; compare with descriptor stack pointer
00376F  1  F0 05                BEQ     LAB_216A        ; branch if =
003771  1               
003771  1  20 D7 37             JSR     LAB_21D7        ; go garbage collect descriptor stack
003774  1  F0 F7                BEQ     LAB_2161        ; loop always
003776  1               
003776  1               ; done stacked strings, now do string vars
003776  1               LAB_216A:
003776  1  06 A0                ASL     <g_step         ; set step size = $06
003778  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
00377A  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
00377C  1  85 71                STA     <ut1_pl         ; save as pointer low byte
00377E  1  86 72                STX     <ut1_ph         ; save as pointer high byte
003780  1               LAB_2176:
003780  1  E4 7E                CPX     <Sarryh         ; compare start of arrays high byte
003782  1  D0 04                BNE     LAB_217E        ; branch if no high byte match
003784  1               
003784  1  C5 7D                CMP     <Sarryl         ; else compare start of arrays low byte
003786  1  F0 05                BEQ     LAB_2183        ; branch if = var mem end
003788  1               
003788  1               LAB_217E:
003788  1  20 D1 37             JSR     LAB_21D1        ; go garbage collect strings
00378B  1  F0 F3                BEQ     LAB_2176        ; loop always
00378D  1               
00378D  1               ; done string vars, now do string arrays
00378D  1               LAB_2183:
00378D  1  85 A4                STA     <Nbendl         ; save start of arrays low byte as working pointer
00378F  1  86 A5                STX     <Nbendh         ; save start of arrays high byte as working pointer
003791  1  A9 04                LDA     #$04            ; set step size
003793  1  85 A0                STA     <g_step         ; save step size
003795  1               LAB_218B:
003795  1  A5 A4                LDA     <Nbendl         ; get pointer low byte
003797  1  A6 A5                LDX     <Nbendh         ; get pointer high byte
003799  1               LAB_218F:
003799  1  E4 80                CPX     <Earryh         ; compare with array mem end high byte
00379B  1  D0 04                BNE     LAB_219A        ; branch if not at end
00379D  1               
00379D  1  C5 7F                CMP     <Earryl         ; else compare with array mem end low byte
00379F  1  F0 75                BEQ     LAB_2216        ; tidy up and exit if at end
0037A1  1               
0037A1  1               LAB_219A:
0037A1  1  85 71                STA     <ut1_pl         ; save pointer low byte
0037A3  1  86 72                STX     <ut1_ph         ; save pointer high byte
0037A5  1  A0 02                LDY     #$02            ; set index
0037A7  1  B1 71                LDA     (<ut1_pl),Y     ; get array size low byte
0037A9  1  65 A4                ADC     <Nbendl         ; add start of this array low byte
0037AB  1  85 A4                STA     <Nbendl         ; save start of next array low byte
0037AD  1  C8                   INY                     ; increment index
0037AE  1  B1 71                LDA     (<ut1_pl),Y     ; get array size high byte
0037B0  1  65 A5                ADC     <Nbendh         ; add start of this array high byte
0037B2  1  85 A5                STA     <Nbendh         ; save start of next array high byte
0037B4  1  A0 01                LDY     #$01            ; set index
0037B6  1  B1 71                LDA     (<ut1_pl),Y     ; get name second byte
0037B8  1  10 DB                BPL     LAB_218B        ; skip if not string array
0037BA  1               
0037BA  1               ; was string array so ..
0037BA  1               
0037BA  1  A0 04                LDY     #$04            ; set index
0037BC  1  B1 71                LDA     (<ut1_pl),Y     ; get # of dimensions
0037BE  1  0A                   ASL     A               ; *2
0037BF  1  69 05                ADC     #$05            ; +5 (array header size)
0037C1  1  20 09 38             JSR     LAB_2208        ; go set up for first element
0037C4  1               LAB_21C4:
0037C4  1  E4 A5                CPX     <Nbendh         ; compare with start of next array high byte
0037C6  1  D0 04                BNE     LAB_21CC        ; branch if <> (go do this array)
0037C8  1               
0037C8  1  C5 A4                CMP     <Nbendl         ; else compare element pointer low byte with next array
0037CA  1               ; low byte
0037CA  1  F0 CD                BEQ     LAB_218F        ; if equal then go do next array
0037CC  1               
0037CC  1               LAB_21CC:
0037CC  1  20 D7 37             JSR     LAB_21D7        ; go defrag array strings
0037CF  1  F0 F3                BEQ     LAB_21C4        ; go do next array string (loop always)
0037D1  1               
0037D1  1               ; defrag string variables
0037D1  1               ; enter with XA = variable pointer
0037D1  1               ; return with XA = next variable pointer
0037D1  1               
0037D1  1               LAB_21D1:
0037D1  1  C8                   INY                     ; increment index (Y was $00)
0037D2  1  B1 71                LDA     (<ut1_pl),Y     ; get var name byte 2
0037D4  1  10 30                BPL     LAB_2206        ; if not string, step pointer to next var and return
0037D6  1               
0037D6  1  C8                   INY                     ; else increment index
0037D7  1               LAB_21D7:
0037D7  1  B1 71                LDA     (<ut1_pl),Y     ; get string length
0037D9  1  F0 2B                BEQ     LAB_2206        ; if null, step pointer to next string and return
0037DB  1               
0037DB  1  C8                   INY                     ; else increment index
0037DC  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer low byte
0037DE  1  AA                   TAX                     ; copy to X
0037DF  1  C8                   INY                     ; increment index
0037E0  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer high byte
0037E2  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
0037E4  1  90 06                BCC     LAB_21EC        ; branch if less
0037E6  1               
0037E6  1  D0 1E                BNE     LAB_2206        ; if greater, step pointer to next string and return
0037E8  1               
0037E8  1               ; high bytes were = so compare low bytes
0037E8  1  E4 81                CPX     <Sstorl         ; compare bottom of string space low byte
0037EA  1  B0 1A                BCS     LAB_2206        ; if >=, step pointer to next string and return
0037EC  1               
0037EC  1               ; string pointer is < string storage pointer (pos in mem)
0037EC  1               LAB_21EC:
0037EC  1  C5 AB                CMP     <Histrh         ; compare to highest string high byte
0037EE  1  90 17                BCC     LAB_2207        ; if <, step pointer to next string and return
0037F0  1               
0037F0  1  D0 04                BNE     LAB_21F6        ; if > update pointers, step to next and return
0037F2  1               
0037F2  1               ; high bytes were = so compare low bytes
0037F2  1  E4 AA                CPX     <Histrl         ; compare to highest string low byte
0037F4  1  90 11                BCC     LAB_2207        ; if <, step pointer to next string and return
0037F6  1               
0037F6  1               ; string is in string memory space
0037F6  1               LAB_21F6:
0037F6  1  86 AA                STX     <Histrl         ; save as new highest string low byte
0037F8  1  85 AB                STA     <Histrh         ; save as new highest string high byte
0037FA  1  A5 71                LDA     <ut1_pl         ; get start of vars(descriptors) low byte
0037FC  1  A6 72                LDX     <ut1_ph         ; get start of vars(descriptors) high byte
0037FE  1  85 9C                STA     <garb_l         ; save as working pointer low byte
003800  1  86 9D                STX     <garb_h         ; save as working pointer high byte
003802  1  88                   DEY                     ; decrement index DIFFERS
003803  1  88                   DEY                     ; decrement index (should point to descriptor start)
003804  1  84 A2                STY     <g_indx         ; save index pointer
003806  1               
003806  1               ; step pointer to next string
003806  1               LAB_2206:
003806  1  18                   CLC                     ; clear carry for add
003807  1               LAB_2207:
003807  1  A5 A0                LDA     <g_step         ; get step size
003809  1               LAB_2208:
003809  1  65 71                ADC     <ut1_pl         ; add pointer low byte
00380B  1  85 71                STA     <ut1_pl         ; save pointer low byte
00380D  1  90 02                BCC     LAB_2211        ; branch if no overflow
00380F  1               
00380F  1  E6 72                INC     <ut1_ph         ; else increment high byte
003811  1               LAB_2211:
003811  1  A6 72                LDX     <ut1_ph         ; get pointer high byte
003813  1  A0 00                LDY     #$00            ; clear Y
003815  1  60                   RTS
003816  1               
003816  1               ; search complete, now either exit or set-up and move string
003816  1               
003816  1               LAB_2216:
003816  1  C6 A0                DEC     <g_step         ; decrement step size (now $03 for descriptor stack)
003818  1  A6 9D                LDX     <garb_h         ; get string to move high byte
00381A  1  F0 F5                BEQ     LAB_2211        ; exit if nothing to move
00381C  1               
00381C  1  A4 A2                LDY     <g_indx         ; get index byte back (points to descriptor)
00381E  1  18                   CLC                     ; clear carry for add
00381F  1  8B DA A2 01          LDAINDIRECTY garb_l     ; get string length
003823  1  B5 9C C9 00  
003827  1  D0 04 A2 00  
003835  1  65 AA                ADC     <Histrl         ; add highest string low byte
003837  1  85 A6                STA     <Obendl         ; save old block end low pointer
003839  1  A5 AB                LDA     <Histrh         ; get highest string high byte
00383B  1  69 00                ADC     #$00            ; add any carry
00383D  1  85 A7                STA     <Obendh         ; save old block end high byte
00383F  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003841  1  A6 82                LDX     <Sstorh         ; get bottom of string space high byte
003843  1  85 A4                STA     <Nbendl         ; save new block end low byte
003845  1  86 A5                STX     <Nbendh         ; save new block end high byte
003847  1  20 78 23             JSR     LAB_11D6        ; open up space in memory, don't set array end
00384A  1  A4 A2                LDY     <g_indx         ; get index byte
00384C  1  C8                   INY                     ; point to descriptor low byte
00384D  1  A5 A4                LDA     <Nbendl         ; get string pointer low byte
00384F  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer low byte
003853  1  01 B5 9C C9  
003857  1  00 D0 04 A2  
003865  1  AA                   TAX                     ; copy string pointer low byte
003866  1  E6 A5                INC     <Nbendh         ; correct high byte (move sets high byte -1)
003868  1  A5 A5                LDA     <Nbendh         ; get new string pointer high byte
00386A  1  C8                   INY                     ; point to descriptor high byte
00386B  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer high byte
00386F  1  01 B5 9C C9  
003873  1  00 D0 04 A2  
003881  1  4C 57 37             JMP     LAB_214B        ; re-run routine from last ending
003884  1               ; (but don't collect this string)
003884  1               
003884  1               ; concatenate
003884  1               ; add strings, string 1 is in descriptor <des_pl, string 2 is in line
003884  1               
003884  1               LAB_224D:
003884  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003886  1  48                   PHA                     ; put on stack
003887  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003889  1  48                   PHA                     ; put on stack
00388A  1  20 58 30             JSR     LAB_GVAL        ; get value from line
00388D  1  20 5B 2F             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003890  1  68                   PLA                     ; get descriptor pointer low byte back
003891  1  85 B8                STA     <ssptr_l        ; set pointer low byte
003893  1  68                   PLA                     ; get descriptor pointer high byte back
003894  1  85 B9                STA     <ssptr_h        ; set pointer high byte
003896  1  A0 00                LDY     #$00            ; clear index
003898  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get length_1 from descriptor
00389C  1  B5 B8 C9 00  
0038A0  1  D0 04 A2 00  
0038AE  1  18                   CLC                     ; clear carry for add
0038AF  1  8B 48 DA A2          ADCINDIRECTY des_pl     ; add length_2
0038B3  1  01 B5 AE C9  
0038B7  1  00 D0 04 A2  
0038C8  1  90 05                BCC     LAB_226D        ; branch if no overflow
0038CA  1               
0038CA  1  A2 1A                LDX     #$1A            ; else set error code $1A ("String too long" error)
0038CC  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
0038CF  1               
0038CF  1               LAB_226D:
0038CF  1  20 8E 36             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
0038D2  1               ; long
0038D2  1  20 EC 38             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
0038D5  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
0038D7  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
0038D9  1  20 81 39             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0038DC  1               ; returns with A = length, <ut1_pl = pointer low byte,
0038DC  1               ; <ut1_ph = pointer high byte
0038DC  1  20 3A 39             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
0038DF  1  A5 B8                LDA     <ssptr_l        ;.set descriptor pointer low byte
0038E1  1  A4 B9                LDY     <ssptr_h        ;.set descriptor pointer high byte
0038E3  1  20 81 39             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0038E6  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
0038E6  1               ; Y=<ut1_ph=pointer high byte
0038E6  1  20 F9 36             JSR     LAB_RTST        ; check for space on descriptor stack then put string
0038E9  1               ; address and length on descriptor stack and update stack
0038E9  1               ; pointers
0038E9  1  4C 81 2F             JMP     LAB_1ADB        ;.continue evaluation
0038EC  1               
0038EC  1               ; copy string from descriptor (<sdescr) to (<Sutill)
0038EC  1               
0038EC  1               LAB_228A:
0038EC  1  A0 00                LDY     #$00            ; clear index
0038EE  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get string length
0038F2  1  B5 B8 C9 00  
0038F6  1  D0 04 A2 00  
003904  1  48                   PHA                     ; save on stack
003905  1  C8                   INY                     ; increment index
003906  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer low byte
00390A  1  B5 B8 C9 00  
00390E  1  D0 04 A2 00  
00391C  1  AA                   TAX                     ; copy to X
00391D  1  C8                   INY                     ; increment index
00391E  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer high byte
003922  1  B5 B8 C9 00  
003926  1  D0 04 A2 00  
003934  1  A8                   TAY                     ; copy to Y
003935  1  68                   PLA                     ; get length back
003936  1               
003936  1               ; store string A bytes long from YX to (<Sutill)
003936  1               
003936  1               LAB_2298:
003936  1  86 71                STX     <ut1_pl         ; save source string pointer low byte
003938  1  84 72                STY     <ut1_ph         ; save source string pointer high byte
00393A  1               
00393A  1               ; store string A bytes long from (<ut1_pl) to (<Sutill)
00393A  1               
00393A  1               LAB_229C:
00393A  1  AA                   TAX                     ; copy length to index (don't count with Y)
00393B  1  F0 3C                BEQ     LAB_22B2        ; branch if = $0 (null string) no need to add zero length
00393D  1               
00393D  1  A0 00                LDY     #$00            ; zero pointer (copy forward)
00393F  1               LAB_22A0:
00393F  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get source byte
003943  1  B5 71 C9 00  
003947  1  D0 04 A2 00  
003955  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save destination byte
003959  1  01 B5 83 C9  
00395D  1  00 D0 04 A2  
00396B  1               
00396B  1  C8                   INY                     ; increment index
00396C  1  CA                   DEX                     ; decrement counter
00396D  1  D0 D0                BNE     LAB_22A0        ; loop while <> 0
00396F  1               
00396F  1  98                   TYA                     ; restore length from Y
003970  1               LAB_22A9:
003970  1  18                   CLC                     ; clear carry for add
003971  1  65 83                ADC     <Sutill         ; add string utility ptr low byte
003973  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003975  1  90 02                BCC     LAB_22B2        ; branch if no carry
003977  1               
003977  1  E6 84                INC     <Sutilh         ; else increment string utility ptr high byte
003979  1               LAB_22B2:
003979  1  60                   RTS
00397A  1               
00397A  1               ; evaluate string
00397A  1               
00397A  1               LAB_EVST:
00397A  1  20 5B 2F             JSR     LAB_CTST        ; check if source is string, else do type mismatch
00397D  1               
00397D  1               ; pop string off descriptor stack, or from top of string space
00397D  1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
00397D  1               
00397D  1               LAB_22B6:
00397D  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
00397F  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003981  1               
003981  1               ; pop (YA) descriptor off stack or from top of string space
003981  1               ; returns with A = length, X=<ut1_pl=pointer low byte, Y=<ut1_ph=pointer high byte
003981  1               
003981  1               LAB_22BA:
003981  1  85 71                STA     <ut1_pl         ; save descriptor pointer low byte
003983  1  84 72                STY     <ut1_ph         ; save descriptor pointer high byte
003985  1  20 EE 39             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
003988  1  08                   PHP                     ; save status flags
003989  1  A0 00                LDY     #$00            ; clear index
00398B  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get length from string descriptor
00398F  1  B5 71 C9 00  
003993  1  D0 04 A2 00  
0039A1  1  48                   PHA                     ; put on stack
0039A2  1  C8                   INY                     ; increment index
0039A3  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte from descriptor
0039A7  1  B5 71 C9 00  
0039AB  1  D0 04 A2 00  
0039B9  1  AA                   TAX                     ; copy to X
0039BA  1  C8                   INY                     ; increment index
0039BB  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte from descriptor
0039BF  1  B5 71 C9 00  
0039C3  1  D0 04 A2 00  
0039D1  1  A8                   TAY                     ; copy to Y
0039D2  1  68                   PLA                     ; get string length back
0039D3  1  28                   PLP                     ; restore status
0039D4  1  D0 13                BNE     LAB_22E6        ; branch if pointer <> <last_sl,<last_sh
0039D6  1               
0039D6  1  C4 82                CPY     <Sstorh         ; compare bottom of string space high byte
0039D8  1  D0 0F                BNE     LAB_22E6        ; branch if <>
0039DA  1               
0039DA  1  E4 81                CPX     <Sstorl         ; else compare bottom of string space low byte
0039DC  1  D0 0B                BNE     LAB_22E6        ; branch if <>
0039DE  1               
0039DE  1  48                   PHA                     ; save string length
0039DF  1  18                   CLC                     ; clear carry for add
0039E0  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte
0039E2  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
0039E4  1  90 02                BCC     LAB_22E5        ; skip increment if no overflow
0039E6  1               
0039E6  1  E6 82                INC     <Sstorh         ; increment bottom of string space high byte
0039E8  1               LAB_22E5:
0039E8  1  68                   PLA                     ; restore string length
0039E9  1               LAB_22E6:
0039E9  1  86 71                STX     <ut1_pl         ; save string pointer low byte
0039EB  1  84 72                STY     <ut1_ph         ; save string pointer high byte
0039ED  1  60                   RTS
0039EE  1               
0039EE  1               ; clean descriptor stack, YA = pointer
0039EE  1               ; checks if AY is on the descriptor stack, if so does a stack discard
0039EE  1               
0039EE  1               LAB_22EB:
0039EE  1  C4 67                CPY     <last_sh        ; compare pointer high byte
0039F0  1  D0 0C                BNE     LAB_22FB        ; exit if <>
0039F2  1               
0039F2  1  C5 66                CMP     <last_sl        ; compare pointer low byte
0039F4  1  D0 08                BNE     LAB_22FB        ; exit if <>
0039F6  1               
0039F6  1  85 65                STA     <next_s         ; save descriptor stack pointer
0039F8  1  E9 03                SBC     #$03            ; -3
0039FA  1  85 66                STA     <last_sl        ; save low byte -3
0039FC  1  A0 00                LDY     #$00            ; clear high byte
0039FE  1               LAB_22FB:
0039FE  1  60                   RTS
0039FF  1               
0039FF  1               ; perform CHR$()
0039FF  1               
0039FF  1               LAB_CHRS:
0039FF  1  20 09 3C             JSR     LAB_EVBY        ; evaluate byte expression, result in X
003A02  1  8A                   TXA                     ; copy to A
003A03  1  48                   PHA                     ; save character
003A04  1  A9 01                LDA     #$01            ; string is single byte
003A06  1  20 96 36             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003A09  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003A09  1  68                   PLA                     ; get character back
003A0A  1  A0 00                LDY     #$00            ; clear index
003A0C  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
003A10  1  01 B5 AD C9  
003A14  1  00 D0 04 A2  
003A22  1  4C F9 36             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003A25  1               ; address and length on descriptor stack and update stack
003A25  1               ; pointers
003A25  1               
003A25  1               ; perform LEFT$()
003A25  1               
003A25  1               LAB_LEFT:
003A25  1  48                   PHA                     ; push byte parameter
003A26  1  20 DD 3A             JSR     LAB_236F        ; pull string data and byte parameter from stack
003A29  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003A29  1  8B 48 DA A2          CMPINDIRECTY des_2l     ; compare byte parameter with string length
003A2D  1  01 B5 9E C9  
003A31  1  00 D0 04 A2  
003A41  1  98                   TYA                     ; clear A
003A42  1  F0 1F                BEQ     LAB_2316        ; go do string copy (branch always)
003A44  1               
003A44  1               ; perform RIGHT$()
003A44  1               
003A44  1               LAB_RIGHT:
003A44  1  48                   PHA                     ; push byte parameter
003A45  1  20 DD 3A             JSR     LAB_236F        ; pull string data and byte parameter from stack
003A48  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003A48  1  8B 48 DA A2          FETCHINDIRECTY des_2l   ; subtract string length
003A4C  1  01 B5 9E C9  
003A50  1  00 D0 04 A2  
003A5E  1  18                   CLC                     ; clear carry for add-1
003A5F  1  E5 04                SBC     <TMPFLG         ; REDO SBC WITH CARRY CLEARED (ARTIFACT FROM 816 CONVERSION)
003A61  1  49 FF                EOR     #$FF            ; invert it (A=LEN(expression$)-l)
003A63  1               
003A63  1               LAB_2316:
003A63  1  90 18                BCC     LAB_231C        ; branch if string length > byte parameter
003A65  1               
003A65  1  8B DA A2 01          LDAINDIRECTY des_2l     ; else make parameter = length
003A69  1  B5 9E C9 00  
003A6D  1  D0 04 A2 00  
003A7B  1  AA                   TAX                     ; copy to byte parameter copy
003A7C  1  98                   TYA                     ; clear string start offset
003A7D  1               LAB_231C:
003A7D  1  48                   PHA                     ; save string start offset
003A7E  1               LAB_231D:
003A7E  1  8A                   TXA                     ; copy byte parameter (or string length if <)
003A7F  1               LAB_231E:
003A7F  1  48                   PHA                     ; save string length
003A80  1  20 96 36             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003A83  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003A83  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003A85  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003A87  1  20 81 39             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003A8A  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003A8A  1               ; Y=<ut1_ph=pointer high byte
003A8A  1  68                   PLA                     ; get string length back
003A8B  1  A8                   TAY                     ; copy length to Y
003A8C  1  68                   PLA                     ; get string start offset back
003A8D  1  18                   CLC                     ; clear carry for add
003A8E  1  65 71                ADC     <ut1_pl         ; add start offset to string start pointer low byte
003A90  1  85 71                STA     <ut1_pl         ; save string start pointer low byte
003A92  1  90 02                BCC     LAB_2335        ; branch if no overflow
003A94  1               
003A94  1  E6 72                INC     <ut1_ph         ; else increment string start pointer high byte
003A96  1               LAB_2335:
003A96  1  98                   TYA                     ; copy length to A
003A97  1  20 3A 39             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003A9A  1  4C F9 36             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003A9D  1               ; address and length on descriptor stack and update stack
003A9D  1               ; pointers
003A9D  1               
003A9D  1               ; perform MID$()
003A9D  1               
003A9D  1               LAB_MIDS:
003A9D  1  48                   PHA                     ; push byte parameter
003A9E  1  A9 FF                LDA     #$FF            ; set default length = 255
003AA0  1  85 AF                STA     <mids_l         ; save default length
003AA2  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003AA6  1  C9 29                CMP     #')'            ; compare with ")"
003AA8  1  F0 06                BEQ     LAB_2358        ; branch if = ")" (skip second byte get)
003AAA  1               
003AAA  1  20 8C 30             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003AAD  1  20 06 3C             JSR     LAB_GTBY        ; get byte parameter (use copy in <mids_l)
003AB0  1               LAB_2358:
003AB0  1  20 DD 3A             JSR     LAB_236F        ; pull string data and byte parameter from stack
003AB3  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003AB3  1  CA                   DEX                     ; decrement start index
003AB4  1  8A                   TXA                     ; copy to A
003AB5  1  48                   PHA                     ; save string start offset
003AB6  1  8B 48 DA A2          FETCHINDIRECTY des_2l
003ABA  1  01 B5 9E C9  
003ABE  1  00 D0 04 A2  
003ACC  1  18                   CLC                     ; clear carry for sub-1
003ACD  1  A2 00                LDX     #$00            ; clear output string length
003ACF  1  E5 04                SBC     <TMPFLG         ; subtract string length
003AD1  1  B0 AB                BCS     LAB_231D        ; if start>string length go do null string
003AD3  1               
003AD3  1  49 FF                EOR     #$FF            ; complement -length
003AD5  1  C5 AF                CMP     <mids_l         ; compare byte parameter
003AD7  1  90 A6                BCC     LAB_231E        ; if length>remaining string go do RIGHT$
003AD9  1               
003AD9  1  A5 AF                LDA     <mids_l         ; get length byte
003ADB  1  B0 A2                BCS     LAB_231E        ; go do string copy (branch always)
003ADD  1               
003ADD  1               ; pull string data and byte parameter from stack
003ADD  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003ADD  1               
003ADD  1               LAB_236F:
003ADD  1  20 7B 30             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003AE0  1  68                   PLA                     ; pull return address low byte (return address)
003AE1  1  85 A2                STA     <Fnxjpl         ; save functions jump vector low byte
003AE3  1  68                   PLA                     ; pull return address high byte (return address)
003AE4  1  85 A3                STA     <Fnxjph         ; save functions jump vector high byte
003AE6  1  68                   PLA                     ; pull byte parameter
003AE7  1  AA                   TAX                     ; copy byte parameter to X
003AE8  1  68                   PLA                     ; pull string pointer low byte
003AE9  1  85 9E                STA     <des_2l         ; save it
003AEB  1  68                   PLA                     ; pull string pointer high byte
003AEC  1  85 9F                STA     <des_2h         ; save it
003AEE  1  A0 00                LDY     #$00            ; clear index
003AF0  1  8A                   TXA                     ; copy byte parameter
003AF1  1  D0 03 4C FF          LBEQ    LAB_23A8        ; if null do function call error then warm start
003AF5  1  3B           
003AF6  1               
003AF6  1  E6 A2                INC     <Fnxjpl         ; increment function jump vector low byte
003AF8  1               ; (JSR pushes return addr-1. this is all very nice
003AF8  1               ; but will go tits up if either call is on a page
003AF8  1               ; boundary!)
003AF8  1  6C A2 00             JMP     (Fnxjpl)        ; in effect, RTS
003AFB  1               
003AFB  1               ; perform LCASE$()
003AFB  1               
003AFB  1               LAB_LCASE:
003AFB  1  20 7A 39             JSR     LAB_EVST        ; evaluate string
003AFE  1  85 AC                STA     <str_ln         ; set string length
003B00  1  A8                   TAY                     ; copy length to Y
003B01  1  D0 03 4C 8E          LBEQ    NoString        ; branch if null string
003B05  1  3B           
003B06  1               
003B06  1  20 96 36             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003B09  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003B09  1  86 AD                STX     <str_pl         ; save string pointer low byte
003B0B  1  84 AE                STY     <str_ph         ; save string pointer high byte
003B0D  1  A8                   TAY                     ; get string length back
003B0E  1               
003B0E  1               LC_loop:
003B0E  1  88                   DEY                     ; decrement index
003B0F  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003B13  1  B5 71 C9 00  
003B17  1  D0 04 A2 00  
003B25  1  20 E3 32             JSR     LAB_1D82        ; is character "A" to "Z"
003B28  1  90 02                BCC     NoUcase         ; branch if not upper case alpha
003B2A  1               
003B2A  1  09 20                ORA     #$20            ; convert upper to lower case
003B2C  1               NoUcase:
003B2C  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003B30  1  01 B5 83 C9  
003B34  1  00 D0 04 A2  
003B42  1  98                   TYA                     ; test index
003B43  1  D0 C9                BNE     LC_loop         ; loop if not all done
003B45  1               
003B45  1  F0 47                BEQ     NoString        ; tidy up and exit, branch always
003B47  1               
003B47  1               ; perform UCASE$()
003B47  1               
003B47  1               LAB_UCASE:
003B47  1  20 7A 39             JSR     LAB_EVST        ; evaluate string
003B4A  1  85 AC                STA     <str_ln         ; set string length
003B4C  1  A8                   TAY                     ; copy length to Y
003B4D  1  F0 3F                BEQ     NoString        ; branch if null string
003B4F  1               
003B4F  1  20 96 36             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003B52  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003B52  1  86 AD                STX     <str_pl         ; save string pointer low byte
003B54  1  84 AE                STY     <str_ph         ; save string pointer high byte
003B56  1  A8                   TAY                     ; get string length back
003B57  1               
003B57  1               UC_loop:
003B57  1  88                   DEY                     ; decrement index
003B58  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003B5C  1  B5 71 C9 00  
003B60  1  D0 04 A2 00  
003B6E  1  20 DF 32             JSR     LAB_CASC        ; is character "a" to "z" (or "A" to "Z")
003B71  1  90 02                BCC     NoLcase         ; branch if not alpha
003B73  1               
003B73  1  29 DF                AND     #$DF            ; convert lower to upper case
003B75  1               NoLcase:
003B75  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003B79  1  01 B5 83 C9  
003B7D  1  00 D0 04 A2  
003B8B  1  98                   TYA                     ; test index
003B8C  1  D0 C9                BNE     UC_loop         ; loop if not all done
003B8E  1               
003B8E  1               NoString:
003B8E  1  4C F9 36             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003B91  1               ; address and length on descriptor stack and update stack
003B91  1               ; pointers
003B91  1               
003B91  1               ; perform SADD()
003B91  1               
003B91  1               LAB_SADD:
003B91  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003B95  1  20 67 32             JSR     LAB_GVAR        ; get var address
003B98  1               
003B98  1  20 7B 30             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003B9B  1  20 5B 2F             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003B9E  1               
003B9E  1  A0 02                LDY     #$02            ; index to string pointer high byte
003BA0  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer high byte
003BA4  1  B5 95 C9 00  
003BA8  1  D0 04 A2 00  
003BB6  1  AA                   TAX                     ; copy string pointer high byte to X
003BB7  1  88                   DEY                     ; index to string pointer low byte
003BB8  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer low byte
003BBC  1  B5 95 C9 00  
003BC0  1  D0 04 A2 00  
003BCE  1  A8                   TAY                     ; copy string pointer low byte to Y
003BCF  1  8A                   TXA                     ; copy string pointer high byte to A
003BD0  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003BD3  1               
003BD3  1               ; perform LEN()
003BD3  1               
003BD3  1               LAB_LENS:
003BD3  1  20 D9 3B             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003BD6  1  4C 32 35             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003BD9  1               
003BD9  1               ; evaluate string, get length in Y
003BD9  1               
003BD9  1               LAB_ESGL:
003BD9  1  20 7A 39             JSR     LAB_EVST        ; evaluate string
003BDC  1  A8                   TAY                     ; copy length to Y
003BDD  1  60                   RTS
003BDE  1               
003BDE  1               ; perform ASC()
003BDE  1               
003BDE  1               LAB_ASC:
003BDE  1  20 D9 3B             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003BE1  1  F0 1C                BEQ     LAB_23A8        ; if null do function call error then warm start
003BE3  1               
003BE3  1  A0 00                LDY     #$00            ; set index to first character
003BE5  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
003BE9  1  B5 71 C9 00  
003BED  1  D0 04 A2 00  
003BFB  1  A8                   TAY                     ; copy to Y
003BFC  1  4C 32 35             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003BFF  1               
003BFF  1               ; do function call error then warm start
003BFF  1               
003BFF  1               LAB_23A8:
003BFF  1  4C EF 33             JMP     LAB_FCER        ; do function call error then warm start
003C02  1               
003C02  1               ; scan and get byte parameter
003C02  1               
003C02  1               LAB_SGBY:
003C02  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003C06  1               
003C06  1               ; get byte parameter
003C06  1               
003C06  1               LAB_GTBY:
003C06  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003C09  1               ; else do type mismatch
003C09  1               
003C09  1               ; evaluate byte expression, result in X
003C09  1               
003C09  1               LAB_EVBY:
003C09  1  20 64 33             JSR     LAB_EVPI        ; evaluate integer expression (no check)
003C0C  1               
003C0C  1  A4 AE                LDY     <FAC1_2         ; get FAC1 mantissa2
003C0E  1  D0 EF                BNE     LAB_23A8        ; if top byte <> 0 do function call error then warm start
003C10  1               
003C10  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
003C12  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003C16  1  60                   RTS
003C17  1               
003C17  1               ; perform VAL()
003C17  1               
003C17  1               LAB_VAL:
003C17  1  20 D9 3B             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003C1A  1  D0 03                BNE     LAB_23C5        ; branch if not null string
003C1C  1               
003C1C  1               ; string was null so set result = $00
003C1C  1  4C 67 3E             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
003C1F  1               
003C1F  1               LAB_23C5:
003C1F  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
003C21  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003C23  1  86 BA                STX     <Btmpl          ; save BASIC execute pointer low byte
003C25  1  84 BB                STY     <Btmph          ; save BASIC execute pointer high byte
003C27  1  A6 71                LDX     <ut1_pl         ; get string pointer low byte
003C29  1  86 C3                STX     <Bpntrl         ; save as BASIC execute pointer low byte
003C2B  1  18                   CLC                     ; clear carry
003C2C  1  65 71                ADC     <ut1_pl         ; add string length
003C2E  1  85 73                STA     <ut2_pl         ; save string end low byte
003C30  1  A5 72                LDA     <ut1_ph         ; get string pointer high byte
003C32  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003C34  1  69 00                ADC     #$00            ; add carry to high byte
003C36  1  85 74                STA     <ut2_ph         ; save string end high byte
003C38  1  A0 00                LDY     #$00            ; set index to $00
003C3A  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get string end +1 byte
003C3E  1  B5 73 C9 00  
003C42  1  D0 04 A2 00  
003C50  1  48                   PHA                     ; push it
003C51  1  98                   TYA                     ; clear A
003C52  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; terminate string with $00
003C56  1  01 B5 73 C9  
003C5A  1  00 D0 04 A2  
003C68  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003C6C  1  20 11 43             JSR     LAB_2887        ; get FAC1 from string
003C6F  1  68                   PLA                     ; restore string end +1 byte
003C70  1  A0 00                LDY     #$00            ; set index to zero
003C72  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; put string end byte back
003C76  1  01 B5 73 C9  
003C7A  1  00 D0 04 A2  
003C88  1               
003C88  1               ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
003C88  1               
003C88  1               LAB_23F3:
003C88  1  A6 BA                LDX     <Btmpl          ; get BASIC execute pointer low byte back
003C8A  1  A4 BB                LDY     <Btmph          ; get BASIC execute pointer high byte back
003C8C  1  86 C3                STX     <Bpntrl         ; save BASIC execute pointer low byte
003C8E  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
003C90  1  60                   RTS
003C91  1               
003C91  1               ; get two parameters for POKE or WAIT
003C91  1               
003C91  1               LAB_GADB:
003C91  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003C94  1               ; else do type mismatch
003C94  1  20 AA 3C             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003C97  1               
003C97  1               ; scan for "," and get byte, else do Syntax error then warm start
003C97  1               
003C97  1               LAB_SCGB:
003C97  1  20 8C 30             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003C9A  1  A5 12                LDA     <Itemph         ; save temporary integer high byte
003C9C  1  48                   PHA                     ; on stack
003C9D  1  A5 11                LDA     <Itempl         ; save temporary integer low byte
003C9F  1  48                   PHA                     ; on stack
003CA0  1  20 06 3C             JSR     LAB_GTBY        ; get byte parameter
003CA3  1  68                   PLA                     ; pull low byte
003CA4  1  85 11                STA     <Itempl         ; restore temporary integer low byte
003CA6  1  68                   PLA                     ; pull high byte
003CA7  1  85 12                STA     <Itemph         ; restore temporary integer high byte
003CA9  1  60                   RTS
003CAA  1               
003CAA  1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
003CAA  1               ; -ve and converts it into a right truncated integer in <Itempl and <Itemph
003CAA  1               
003CAA  1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
003CAA  1               
003CAA  1               LAB_F2FX:
003CAA  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003CAC  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
003CAE  1  B0 03                BCS     LAB_23A8_1      ; do function call error then warm start
003CB0  1  4C B6 3C             JMP     LAB_F2FU
003CB3  1               LAB_23A8_1:
003CB3  1  4C FF 3B             JMP     LAB_23A8
003CB6  1               LAB_F2FU:
003CB6  1  20 BB 42             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
003CB9  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003CBB  1  A4 AF                LDY     <FAC1_3         ; get FAC1 mantissa3
003CBD  1  84 11                STY     <Itempl         ; save temporary integer low byte
003CBF  1  85 12                STA     <Itemph         ; save temporary integer high byte
003CC1  1  60                   RTS
003CC2  1               
003CC2  1               ; perform PEEK()
003CC2  1               
003CC2  1               LAB_PEEK:
003CC2  1  20 AA 3C             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003CC5  1  A2 00                LDX     #$00            ; clear index
003CC7  1  8B                   PHB
003CC8  1  DA A2 00 DA          SETBANK 0
003CCC  1  AB FA        
003CCE  1  A1 11                LDA     (<Itempl,X)     ; get byte via temporary integer (addr)
003CD0  1  AB                   PLB
003CD1  1  A8                   TAY                     ; copy byte to Y
003CD2  1  4C 32 35             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003CD5  1               
003CD5  1               ; perform POKE
003CD5  1               
003CD5  1               LAB_POKE:
003CD5  1  20 91 3C             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003CD8  1  8A                   TXA                     ; copy byte argument to A
003CD9  1  A2 00                LDX     #$00            ; clear index
003CDB  1  8B                   PHB
003CDC  1  DA A2 00 DA          SETBANK 0
003CE0  1  AB FA        
003CE2  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
003CE4  1  AB                   PLB
003CE5  1  60                   RTS
003CE6  1               
003CE6  1               ; perform SYS
003CE6  1               
003CE6  1               LAB_SYS:
003CE6  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003CE9  1               ; else do type mismatch
003CE9  1  20 AA 3C             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003CEC  1               
003CEC  1  A5 11                LDA     <Itempl
003CEE  1  85 0B                STA     <Usrjpl
003CF0  1  A5 12                LDA     <Itemph
003CF2  1  85 0C                STA     <Usrjph
003CF4  1  22 0A 00 00          JSL     Usrjmp
003CF8  1  60                   RTS
003CF9  1               
003CF9  1               ; perform SWAP
003CF9  1               
003CF9  1               LAB_SWAP:
003CF9  1  20 67 32             JSR     LAB_GVAR        ; get var1 address
003CFC  1  85 97                STA     <Lvarpl         ; save var1 address low byte
003CFE  1  84 98                STY     <Lvarph         ; save var1 address high byte
003D00  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003D02  1  48                   PHA                     ; save data type flag
003D03  1               
003D03  1  20 8C 30             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003D06  1  20 67 32             JSR     LAB_GVAR        ; get var2 address (pointer in <Cvaral/h)
003D09  1  68                   PLA                     ; pull var1 data type flag
003D0A  1  45 5F                EOR     <Dtypef         ; compare with var2 data type
003D0C  1  10 60                BPL     SwapErr         ; exit if not both the same type
003D0E  1               
003D0E  1  A0 03                LDY     #$03            ; four bytes to swap (either value or descriptor+1)
003D10  1               SwapLp:
003D10  1  8B DA A2 01          LDAINDIRECTY Lvarpl     ; get byte from var1
003D14  1  B5 97 C9 00  
003D18  1  D0 04 A2 00  
003D26  1  AA                   TAX                     ; save var1 byte
003D27  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from var2
003D2B  1  B5 95 C9 00  
003D2F  1  D0 04 A2 00  
003D3D  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; save byte to var1
003D41  1  01 B5 97 C9  
003D45  1  00 D0 04 A2  
003D53  1  8A                   TXA                     ; restore var1 byte
003D54  1  8B DA 48 A2          STAINDIRECTY Cvaral     ; save byte to var2
003D58  1  01 B5 95 C9  
003D5C  1  00 D0 04 A2  
003D6A  1  88                   DEY                     ; decrement index
003D6B  1  10 A3                BPL     SwapLp          ; loop until done
003D6D  1               
003D6D  1  60                   RTS
003D6E  1               
003D6E  1               SwapErr:
003D6E  1  4C 65 2F             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
003D71  1               
003D71  1               ; perform CALL
003D71  1               
003D71  1               LAB_CALL:
003D71  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003D74  1               ; else do type mismatch
003D74  1  20 AA 3C             JSR     LAB_F2FX        ; convert floating-to-fixed
003D77  1  A9 3D                LDA     #>CallExit      ; set return address high byte
003D79  1  48                   PHA                     ; put on stack
003D7A  1  A9 7F                LDA     #<CallExit-1    ; set return address low byte
003D7C  1  48                   PHA                     ; put on stack
003D7D  1  6C 11 00             JMP     (Itempl)        ; do indirect jump to user routine
003D80  1               
003D80  1               ; if the called routine exits correctly then it will return to here. this will then get
003D80  1               ; the next byte for the interpreter and return
003D80  1               
003D80  1               CallExit:
003D80  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003D84  1  60                   RTS
003D85  1               ; perform WAIT
003D85  1               
003D85  1               LAB_WAIT:
003D85  1  20 91 3C             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003D88  1  86 97                STX     <Frnxtl         ; save byte
003D8A  1  A2 00                LDX     #$00            ; clear mask
003D8C  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003D90  1  F0 03                BEQ     LAB_2441        ; skip if no third argument
003D92  1               
003D92  1  20 97 3C             JSR     LAB_SCGB        ; scan for "," and get byte, else SN error then warm start
003D95  1               LAB_2441:
003D95  1  86 98                STX     <Frnxth         ; save EOR argument
003D97  1               LAB_2445:
003D97  1  8B DA A2 01          LDAINDIRECTY Itempl     ; get byte via temporary integer (addr)
003D9B  1  B5 11 C9 00  
003D9F  1  D0 04 A2 00  
003DAD  1  45 98                EOR     <Frnxth         ; EOR with second argument (mask)
003DAF  1  25 97                AND     <Frnxtl         ; AND with first argument (byte)
003DB1  1  F0 E4                BEQ     LAB_2445        ; loop if result is zero
003DB3  1               
003DB3  1               LAB_244D:
003DB3  1  60                   RTS
003DB4  1               
003DB4  1               ; perform subtraction, FAC1 from (AY)
003DB4  1               
003DB4  1               LAB_2455:
003DB4  1  20 A2 3F             JSR     LAB_264D        ; unpack memory (AY) into FAC2
003DB7  1               
003DB7  1               ; perform subtraction, FAC1 from FAC2
003DB7  1               
003DB7  1               LAB_SUBTRACT:
003DB7  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003DB9  1  49 FF                EOR     #$FF            ; complement it
003DBB  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003DBD  1  45 B7                EOR     <FAC2_s         ; EOR with FAC2 sign (b7)
003DBF  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
003DC1  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003DC3  1  4C D2 3D             JMP     LAB_ADD         ; go add FAC2 to FAC1
003DC6  1               
003DC6  1               ; perform addition
003DC6  1               
003DC6  1               LAB_2467:
003DC6  1  20 F1 3E             JSR     LAB_257B        ; shift FACX A times right (>8 shifts)
003DC9  1  90 4D                BCC     LAB_24A8        ;.go subtract mantissas
003DCB  1               
003DCB  1               ; add 0.5 to FAC1
003DCB  1               
003DCB  1               LAB_244E:
003DCB  1  A9 71                LDA     #<LAB_2A96      ; set 0.5 pointer low byte
003DCD  1  A0 18                LDY     #>LAB_2A96      ; set 0.5 pointer high byte
003DCF  1               
003DCF  1               ; add (AY) to FAC1
003DCF  1               
003DCF  1               LAB_246C:
003DCF  1  20 A2 3F             JSR     LAB_264D        ; unpack memory (AY) into FAC2
003DD2  1               
003DD2  1               ; add FAC2 to FAC1
003DD2  1               
003DD2  1               LAB_ADD:
003DD2  1  D0 10                BNE     LAB_2474        ; branch if FAC1 was not zero
003DD4  1               
003DD4  1               ; copy FAC2 to FAC1
003DD4  1               
003DD4  1               LAB_279B:
003DD4  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
003DD6  1               
003DD6  1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
003DD6  1               
003DD6  1               LAB_279D:
003DD6  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003DD8  1  A2 04                LDX     #$04            ; 4 bytes to copy
003DDA  1               LAB_27A1:
003DDA  1  B5 B2                LDA     <FAC1_o,X       ; get byte from FAC2,X
003DDC  1  95 AB                STA     <FAC1_e-1,X     ; save byte at FAC1,X
003DDE  1  CA                   DEX                     ; decrement count
003DDF  1  D0 F9                BNE     LAB_27A1        ; loop if not all done
003DE1  1               
003DE1  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
003DE3  1  60                   RTS
003DE4  1               
003DE4  1               ; FAC1 is non zero
003DE4  1               LAB_2474:
003DE4  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
003DE6  1  86 A3                STX     <FAC2_r         ; save as FAC2 rounding byte
003DE8  1  A2 B3                LDX     #<FAC2_e        ; set index to FAC2 exponent addr
003DEA  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
003DEC  1               LAB_247C:
003DEC  1  A8                   TAY                     ; copy exponent
003DED  1  F0 C4                BEQ     LAB_244D        ; exit if zero
003DEF  1  38                   SEC                     ; set carry for subtract
003DF0  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
003DF2  1  F0 24                BEQ     LAB_24A8        ; branch if = (go add mantissa)
003DF4  1  90 12                BCC     LAB_2498        ; branch if <
003DF6  1               ; FAC2>FAC1
003DF6  1  84 AC                STY     <FAC1_e         ; save FAC1 exponent
003DF8  1  A4 B7                LDY     <FAC2_s         ; get FAC2 sign (b7)
003DFA  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
003DFC  1  49 FF                EOR     #$FF            ; complement A
003DFE  1  69 00                ADC     #$00            ; +1 (twos complement, carry is set)
003E00  1  A0 00                LDY     #$00            ; clear Y
003E02  1  84 A3                STY     <FAC2_r         ; clear FAC2 rounding byte
003E04  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1 exponent addr
003E06  1  D0 04                BNE     LAB_249C        ; branch always
003E08  1               LAB_2498:
003E08  1  A0 00                LDY     #$00            ; clear Y
003E0A  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
003E0C  1               LAB_249C:
003E0C  1  C9 F9                CMP     #$F9            ; compare exponent diff with $F9
003E0E  1  30 B6                BMI     LAB_2467        ; branch if range $79-$F8
003E10  1  A8                   TAY                     ; copy exponent difference to Y
003E11  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
003E13  1  56 01                LSR     <PLUS_1,X       ; shift FAC? mantissa1
003E15  1  20 08 3F             JSR     LAB_2592        ; shift FACX Y times right
003E18  1               ; exponents are equal now do mantissa subtract
003E18  1               LAB_24A8:
003E18  1  24 B8                BIT     <FAC_sc         ; test sign compare (FAC1 EOR FAC2)
003E1A  1  10 52                BPL     LAB_24F8        ; if = add FAC2 mantissa to FAC1 mantissa and return
003E1C  1               
003E1C  1  A0 AC                LDY     #<FAC1_e        ; set index to FAC1 exponent addr
003E1E  1  E0 B3                CPX     #<FAC2_e        ; compare X to FAC2 exponent addr
003E20  1  F0 02                BEQ     LAB_24B4        ; branch if =
003E22  1               
003E22  1  A0 B3                LDY     #<FAC2_e        ; else set index to FAC2 exponent addr
003E24  1               
003E24  1               ; subtract smaller from bigger (take sign of bigger)
003E24  1               LAB_24B4:
003E24  1  38                   SEC                     ; set carry for subtract
003E25  1  49 FF                EOR     #$FF            ; ones complement A
003E27  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
003E29  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
003E2B  1  DA                   PHX
003E2C  1  BB                   TYX
003E2D  1  B5 03                LDA     <PLUS_3,X       ; get FACY mantissa3
003E2F  1  FA                   PLX
003E30  1  F5 03                SBC     <PLUS_3,X       ; subtract FACX mantissa3
003E32  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
003E34  1  DA                   PHX
003E35  1  BB                   TYX
003E36  1  B5 02                LDA     <PLUS_2,x       ; get FACY mantissa2
003E38  1  FA                   PLX
003E39  1  F5 02                SBC     <PLUS_2,X       ; subtract FACX mantissa2
003E3B  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
003E3D  1  DA                   PHX
003E3E  1  BB                   TYX
003E3F  1  B5 01                LDA     <PLUS_1,x       ; get FACY mantissa1
003E41  1  FA                   PLX
003E42  1  F5 01                SBC     <PLUS_1,X       ; subtract FACX mantissa1
003E44  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003E46  1               
003E46  1               ; do ABS and normalise FAC1
003E46  1               
003E46  1               LAB_24D0:
003E46  1  B0 03                BCS     LAB_24D5        ; branch if number is +ve
003E48  1               
003E48  1  20 AD 3E             JSR     LAB_2537        ; negate FAC1
003E4B  1               
003E4B  1               ; normalise FAC1
003E4B  1               
003E4B  1               LAB_24D5:
003E4B  1  A0 00                LDY     #$00            ; clear Y
003E4D  1  98                   TYA                     ; clear A
003E4E  1  18                   CLC                     ; clear carry for add
003E4F  1               LAB_24D9:
003E4F  1  A6 AD                LDX     <FAC1_1         ; get FAC1 mantissa1
003E51  1  D0 3E                BNE     LAB_251B        ; if not zero normalise FAC1
003E53  1               
003E53  1  A6 AE                LDX     <FAC1_2         ; get FAC1 mantissa2
003E55  1  86 AD                STX     <FAC1_1         ; save FAC1 mantissa1
003E57  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
003E59  1  86 AE                STX     <FAC1_2         ; save FAC1 mantissa2
003E5B  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
003E5D  1  86 AF                STX     <FAC1_3         ; save FAC1 mantissa3
003E5F  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
003E61  1  69 08                ADC     #$08            ; add x to exponent offset
003E63  1  C9 18                CMP     #$18            ; compare with $18 (max offset, all bits would be =0)
003E65  1  D0 E8                BNE     LAB_24D9        ; loop if not max
003E67  1               
003E67  1               ; clear FAC1 exponent and sign
003E67  1               
003E67  1               LAB_24F1:
003E67  1  A9 00                LDA     #$00            ; clear A
003E69  1               LAB_24F3:
003E69  1  85 AC                STA     <FAC1_e         ; set FAC1 exponent
003E6B  1               
003E6B  1               ; save FAC1 sign
003E6B  1               
003E6B  1               LAB_24F5:
003E6B  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003E6D  1  60                   RTS
003E6E  1               
003E6E  1               ; add FAC2 mantissa to FAC1 mantissa
003E6E  1               
003E6E  1               LAB_24F8:
003E6E  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
003E70  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
003E72  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003E74  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
003E76  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
003E78  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003E7A  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
003E7C  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
003E7E  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
003E80  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
003E82  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003E84  1  B0 1A                BCS     LAB_252A        ; if carry then normalise FAC1 for C=1
003E86  1               
003E86  1  60                   RTS                     ; else just exit
003E87  1               
003E87  1               LAB_2511:
003E87  1  69 01                ADC     #$01            ; add 1 to exponent offset
003E89  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
003E8B  1  26 AF                ROL     <FAC1_3         ; shift FAC1 mantissa3
003E8D  1  26 AE                ROL     <FAC1_2         ; shift FAC1 mantissa2
003E8F  1  26 AD                ROL     <FAC1_1         ; shift FAC1 mantissa1
003E91  1               
003E91  1               ; normalise FAC1
003E91  1               
003E91  1               LAB_251B:
003E91  1  10 F4                BPL     LAB_2511        ; loop if not normalised
003E93  1               
003E93  1  38                   SEC                     ; set carry for subtract
003E94  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
003E96  1  B0 CF                BCS     LAB_24F1        ; branch if underflow (set result = $0)
003E98  1               
003E98  1  49 FF                EOR     #$FF            ; complement exponent
003E9A  1  69 01                ADC     #$01            ; +1 (twos complement)
003E9C  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
003E9E  1               
003E9E  1               ; test and normalise FAC1 for C=0/1
003E9E  1               
003E9E  1               LAB_2528:
003E9E  1  90 0C                BCC     LAB_2536        ; exit if no overflow
003EA0  1               
003EA0  1               ; normalise FAC1 for C=1
003EA0  1               
003EA0  1               LAB_252A:
003EA0  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
003EA2  1  F0 36                BEQ     LAB_2564        ; if zero do overflow error and warm start
003EA4  1               
003EA4  1  66 AD                ROR     <FAC1_1         ; shift FAC1 mantissa1
003EA6  1  66 AE                ROR     <FAC1_2         ; shift FAC1 mantissa2
003EA8  1  66 AF                ROR     <FAC1_3         ; shift FAC1 mantissa3
003EAA  1  66 B9                ROR     <FAC1_r         ; shift FAC1 rounding byte
003EAC  1               LAB_2536:
003EAC  1  60                   RTS
003EAD  1               
003EAD  1               ; negate FAC1
003EAD  1               
003EAD  1               LAB_2537:
003EAD  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003EAF  1  49 FF                EOR     #$FF            ; complement it
003EB1  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003EB3  1               
003EB3  1               ; twos complement FAC1 mantissa
003EB3  1               
003EB3  1               LAB_253D:
003EB3  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
003EB5  1  49 FF                EOR     #$FF            ; complement it
003EB7  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003EB9  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003EBB  1  49 FF                EOR     #$FF            ; complement it
003EBD  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
003EBF  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003EC1  1  49 FF                EOR     #$FF            ; complement it
003EC3  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
003EC5  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
003EC7  1  49 FF                EOR     #$FF            ; complement it
003EC9  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
003ECB  1  E6 B9                INC     <FAC1_r         ; increment FAC1 rounding byte
003ECD  1  D0 0A                BNE     LAB_2563        ; exit if no overflow
003ECF  1               
003ECF  1               ; increment FAC1 mantissa
003ECF  1               
003ECF  1               LAB_2559:
003ECF  1  E6 AF                INC     <FAC1_3         ; increment FAC1 mantissa3
003ED1  1  D0 06                BNE     LAB_2563        ; finished if no rollover
003ED3  1               
003ED3  1  E6 AE                INC     <FAC1_2         ; increment FAC1 mantissa2
003ED5  1  D0 02                BNE     LAB_2563        ; finished if no rollover
003ED7  1               
003ED7  1  E6 AD                INC     <FAC1_1         ; increment FAC1 mantissa1
003ED9  1               LAB_2563:
003ED9  1  60                   RTS
003EDA  1               
003EDA  1               ; do overflow error (overflow exit)
003EDA  1               
003EDA  1               LAB_2564:
003EDA  1  A2 0A                LDX     #$0A            ; error code $0A ("Overflow" error)
003EDC  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
003EDF  1               
003EDF  1               ; shift FCAtemp << A+8 times
003EDF  1               
003EDF  1               LAB_2569:
003EDF  1  A2 74                LDX     #<FACt_1-1      ; set offset to FACtemp
003EE1  1               LAB_256B:
003EE1  1  B4 03                LDY     <PLUS_3,X       ; get FACX mantissa3
003EE3  1  84 B9                STY     <FAC1_r         ; save as FAC1 rounding byte
003EE5  1  B4 02                LDY     <PLUS_2,X       ; get FACX mantissa2
003EE7  1  94 03                STY     <PLUS_3,X       ; save FACX mantissa3
003EE9  1  B4 01                LDY     <PLUS_1,X       ; get FACX mantissa1
003EEB  1  94 02                STY     <PLUS_2,X       ; save FACX mantissa2
003EED  1  A4 B2                LDY     <FAC1_o         ; get FAC1 overflow byte
003EEF  1  94 01                STY     <PLUS_1,X       ; save FACX mantissa1
003EF1  1               
003EF1  1               ; shift FACX -A times right (> 8 shifts)
003EF1  1               
003EF1  1               LAB_257B:
003EF1  1  69 08                ADC     #$08            ; add 8 to shift count
003EF3  1  30 EC                BMI     LAB_256B        ; go do 8 shift if still -ve
003EF5  1               
003EF5  1  F0 EA                BEQ     LAB_256B        ; go do 8 shift if zero
003EF7  1               
003EF7  1  E9 08                SBC     #$08            ; else subtract 8 again
003EF9  1  A8                   TAY                     ; save count to Y
003EFA  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
003EFC  1  B0 12                BCS     LAB_259A        ;.
003EFE  1               
003EFE  1               LAB_2588:
003EFE  1  16 01                ASL     <PLUS_1,X       ; shift FACX mantissa1
003F00  1  90 02                BCC     LAB_258E        ; branch if +ve
003F02  1               
003F02  1  F6 01                INC     <PLUS_1,X       ; this sets b7 eventually
003F04  1               LAB_258E:
003F04  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (correct for ASL)
003F06  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (put carry in b7)
003F08  1               
003F08  1               ; shift FACX Y times right
003F08  1               
003F08  1               LAB_2592:
003F08  1  76 02                ROR     <PLUS_2,X       ; shift FACX mantissa2
003F0A  1  76 03                ROR     <PLUS_3,X       ; shift FACX mantissa3
003F0C  1  6A                   ROR     A               ; shift FACX rounding byte
003F0D  1  C8                   INY                     ; increment exponent diff
003F0E  1  D0 EE                BNE     LAB_2588        ; branch if range adjust not complete
003F10  1               
003F10  1               LAB_259A:
003F10  1  18                   CLC                     ; just clear it
003F11  1  60                   RTS
003F12  1               
003F12  1               ; perform LOG()
003F12  1               
003F12  1               LAB_LOG:
003F12  1  20 F0 41             JSR     LAB_27CA        ; test sign and zero
003F15  1  F0 02                BEQ     LAB_25C4        ; if zero do function call error then warm start
003F17  1               
003F17  1  10 03                BPL     LAB_25C7        ; skip error if +ve
003F19  1               
003F19  1               LAB_25C4:
003F19  1  4C EF 33             JMP     LAB_FCER        ; do function call error then warm start (-ve)
003F1C  1               
003F1C  1               LAB_25C7:
003F1C  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003F1E  1  E9 7F                SBC     #$7F            ; normalise it
003F20  1  48                   PHA                     ; save it
003F21  1  A9 80                LDA     #$80            ; set exponent to zero
003F23  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
003F25  1  A9 F1                LDA     #<LAB_25AD      ; set 1/root2 pointer low byte
003F27  1  A0 17                LDY     #>LAB_25AD      ; set 1/root2 pointer high byte
003F29  1  20 CF 3D             JSR     LAB_246C        ; add (AY) to FAC1 (1/root2)
003F2C  1  A9 F5                LDA     #<LAB_25B1      ; set root2 pointer low byte
003F2E  1  A0 17                LDY     #>LAB_25B1      ; set root2 pointer high byte
003F30  1  20 68 40             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
003F33  1  A9 68                LDA     #<LAB_259C      ; set 1 pointer low byte
003F35  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
003F37  1  20 B4 3D             JSR     LAB_2455        ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
003F3A  1  A9 E4                LDA     #<LAB_25A0      ; set pointer low byte to counter
003F3C  1  A0 17                LDY     #>LAB_25A0      ; set pointer high byte to counter
003F3E  1  20 F1 45             JSR     LAB_2B6E        ; ^2 then series evaluation
003F41  1  A9 F9                LDA     #<LAB_25B5      ; set -0.5 pointer low byte
003F43  1  A0 17                LDY     #>LAB_25B5      ; set -0.5 pointer high byte
003F45  1  20 CF 3D             JSR     LAB_246C        ; add (AY) to FAC1
003F48  1  68                   PLA                     ; restore FAC1 exponent
003F49  1  20 B7 43             JSR     LAB_2912        ; evaluate new ASCII digit
003F4C  1  A9 FD                LDA     #<LAB_25B9      ; set LOG(2) pointer low byte
003F4E  1  A0 17                LDY     #>LAB_25B9      ; set LOG(2) pointer high byte
003F50  1               
003F50  1               ; do convert AY, FCA1*(AY)
003F50  1               
003F50  1               LAB_25FB:
003F50  1  20 A2 3F             JSR     LAB_264D        ; unpack memory (AY) into FAC2
003F53  1               LAB_MULTIPLY:
003F53  1  F0 4C                BEQ     LAB_264C        ; exit if zero
003F55  1               
003F55  1  20 18 40             JSR     LAB_2673        ; test and adjust accumulators
003F58  1  A9 00                LDA     #$00            ; clear A
003F5A  1  85 75                STA     <FACt_1         ; clear temp mantissa1
003F5C  1  85 76                STA     <FACt_2         ; clear temp mantissa2
003F5E  1  85 77                STA     <FACt_3         ; clear temp mantissa3
003F60  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
003F62  1  20 77 3F             JSR     LAB_2622        ; go do shift/add FAC2
003F65  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003F67  1  20 77 3F             JSR     LAB_2622        ; go do shift/add FAC2
003F6A  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003F6C  1  20 77 3F             JSR     LAB_2622        ; go do shift/add FAC2
003F6F  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
003F71  1  20 7C 3F             JSR     LAB_2627        ; go do shift/add FAC2
003F74  1  4C D5 40             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
003F77  1               
003F77  1               LAB_2622:
003F77  1  D0 03                BNE     LAB_2627        ; branch if byte <> zero
003F79  1               
003F79  1  4C DF 3E             JMP     LAB_2569        ; shift FCAtemp << A+8 times
003F7C  1               
003F7C  1               ; else do shift and add
003F7C  1               LAB_2627:
003F7C  1  4A                   LSR     A               ; shift byte
003F7D  1  09 80                ORA     #$80            ; set top bit (mark for 8 times)
003F7F  1               LAB_262A:
003F7F  1  A8                   TAY                     ; copy result
003F80  1  90 13                BCC     LAB_2640        ; skip next if bit was zero
003F82  1               
003F82  1  18                   CLC                     ; clear carry for add
003F83  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
003F85  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
003F87  1  85 77                STA     <FACt_3         ; save temp mantissa3
003F89  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
003F8B  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
003F8D  1  85 76                STA     <FACt_2         ; save temp mantissa2
003F8F  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
003F91  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
003F93  1  85 75                STA     <FACt_1         ; save temp mantissa1
003F95  1               LAB_2640:
003F95  1  66 75                ROR     <FACt_1         ; shift temp mantissa1
003F97  1  66 76                ROR     <FACt_2         ; shift temp mantissa2
003F99  1  66 77                ROR     <FACt_3         ; shift temp mantissa3
003F9B  1  66 B9                ROR     <FAC1_r         ; shift temp rounding byte
003F9D  1  98                   TYA                     ; get byte back
003F9E  1  4A                   LSR     A               ; shift byte
003F9F  1  D0 DE                BNE     LAB_262A        ; loop if all bits not done
003FA1  1               
003FA1  1               LAB_264C:
003FA1  1  60                   RTS
003FA2  1               
003FA2  1               ; unpack memory (AY) into FAC2
003FA2  1               
003FA2  1               LAB_264D:
003FA2  1  85 71                STA     <ut1_pl         ; save pointer low byte
003FA4  1  84 72                STY     <ut1_ph         ; save pointer high byte
003FA6  1  A0 03                LDY     #$03            ; 4 bytes to get (0-3)
003FA8  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa3
003FAC  1  B5 71 C9 00  
003FB0  1  D0 04 A2 00  
003FBE  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
003FC0  1  88                   DEY                     ; decrement index
003FC1  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa2
003FC5  1  B5 71 C9 00  
003FC9  1  D0 04 A2 00  
003FD7  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
003FD9  1  88                   DEY                     ; decrement index
003FDA  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa1+sign
003FDE  1  B5 71 C9 00  
003FE2  1  D0 04 A2 00  
003FF0  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
003FF2  1  45 B0                EOR     <FAC1_s         ; EOR with FAC1 sign (b7)
003FF4  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
003FF6  1  A5 B7                LDA     <FAC2_s         ; recover FAC2 sign (b7)
003FF8  1  09 80                ORA     #$80            ; set 1xxx xxx (set normal bit)
003FFA  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
003FFC  1  88                   DEY                     ; decrement index
003FFD  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get exponent byte
004001  1  B5 71 C9 00  
004005  1  D0 04 A2 00  
004013  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
004015  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004017  1  60                   RTS
004018  1               
004018  1               ; test and adjust accumulators
004018  1               
004018  1               LAB_2673:
004018  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
00401A  1               LAB_2675:
00401A  1  F0 1D                BEQ     LAB_2696        ; branch if FAC2 = $00 (handle underflow)
00401C  1               
00401C  1  18                   CLC                     ; clear carry for add
00401D  1  65 AC                ADC     <FAC1_e         ; add FAC1 exponent
00401F  1  90 04                BCC     LAB_2680        ; branch if sum of exponents <$0100
004021  1               
004021  1  30 31                BMI     LAB_269B        ; do overflow error
004023  1               
004023  1  18                   CLC                     ; clear carry for the add
004024  1  2C                   .BYTE   $2C             ; makes next line BIT $1410
004025  1               LAB_2680:
004025  1  10 12                BPL     LAB_2696        ; if +ve go handle underflow
004027  1               
004027  1  69 80                ADC     #$80            ; adjust exponent
004029  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
00402B  1  D0 03                BNE     LAB_268B        ; branch if not zero
00402D  1               
00402D  1  4C 6B 3E             JMP     LAB_24F5        ; save FAC1 sign and return
004030  1               
004030  1               LAB_268B:
004030  1  A5 B8                LDA     <FAC_sc         ; get sign compare (FAC1 EOR FAC2)
004032  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004034  1               LAB_268F:
004034  1  60                   RTS
004035  1               
004035  1               ; handle overflow and underflow
004035  1               
004035  1               LAB_2690:
004035  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004037  1  10 1B                BPL     LAB_269B        ; do overflow error
004039  1               
004039  1               ; handle underflow
004039  1               LAB_2696:
004039  1  68                   PLA                     ; pop return address low byte
00403A  1  68                   PLA                     ; pop return address high byte
00403B  1  4C 67 3E             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
00403E  1               
00403E  1               ; multiply by 10
00403E  1               
00403E  1               LAB_269E:
00403E  1  20 D1 41             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004041  1  AA                   TAX                     ; copy exponent (set the flags)
004042  1  F0 F0                BEQ     LAB_268F        ; exit if zero
004044  1  18                   CLC                     ; clear carry for add
004045  1  69 02                ADC     #$02            ; add two to exponent (*4)
004047  1  B0 0B                BCS     LAB_269B        ; do overflow error if > $FF
004049  1  A2 00                LDX     #$00            ; clear byte
00404B  1  86 B8                STX     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
00404D  1  20 EC 3D             JSR     LAB_247C        ; add FAC2 to FAC1 (*5)
004050  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*10)
004052  1  D0 E0                BNE     LAB_268F        ; if non zero just do RTS
004054  1               
004054  1               LAB_269B:
004054  1  4C DA 3E             JMP     LAB_2564        ; do overflow error and warm start
004057  1               
004057  1               ; divide by 10
004057  1               
004057  1               LAB_26B9:
004057  1  20 D1 41             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00405A  1  A9 79                LDA     #<LAB_26B5      ; set pointer to 10d low addr
00405C  1  A0 18                LDY     #>LAB_26B5      ; set pointer to 10d high addr
00405E  1  A2 00                LDX     #$00            ; clear sign
004060  1               
004060  1               ; divide by (AY) (X=sign)
004060  1               
004060  1               LAB_26C2:
004060  1  86 B8                STX     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004062  1  20 E4 40             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004065  1  4C 6B 40             JMP     LAB_DIVIDE      ; do FAC2/FAC1
004068  1               
004068  1               ; Perform divide-by
004068  1               ; convert AY and do (AY)/FAC1
004068  1               
004068  1               LAB_26CA:
004068  1  20 A2 3F             JSR     LAB_264D        ; unpack memory (AY) into FAC2
00406B  1               
00406B  1               ; Perform divide-into
00406B  1               LAB_DIVIDE:
00406B  1  F0 63                BEQ     LAB_2737        ; if zero go do /0 error
00406D  1               
00406D  1  20 E0 41             JSR     LAB_27BA        ; round FAC1
004070  1  A9 00                LDA     #$00            ; clear A
004072  1  38                   SEC                     ; set carry for subtract
004073  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent (2s complement)
004075  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004077  1  20 18 40             JSR     LAB_2673        ; test and adjust accumulators
00407A  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
00407C  1  F0 D6                BEQ     LAB_269B        ; if zero do overflow error
00407E  1               
00407E  1  A2 FF                LDX     #$FF            ; set index for pre increment
004080  1  A9 01                LDA     #$01            ; set bit to flag byte save
004082  1               LAB_26E4:
004082  1  A4 B4                LDY     <FAC2_1         ; get FAC2 mantissa1
004084  1  C4 AD                CPY     <FAC1_1         ; compare FAC1 mantissa1
004086  1  D0 0A                BNE     LAB_26F4        ; branch if <>
004088  1               
004088  1  A4 B5                LDY     <FAC2_2         ; get FAC2 mantissa2
00408A  1  C4 AE                CPY     <FAC1_2         ; compare FAC1 mantissa2
00408C  1  D0 04                BNE     LAB_26F4        ; branch if <>
00408E  1               
00408E  1  A4 B6                LDY     <FAC2_3         ; get FAC2 mantissa3
004090  1  C4 AF                CPY     <FAC1_3         ; compare FAC1 mantissa3
004092  1               LAB_26F4:
004092  1  08                   PHP                     ; save FAC2-FAC1 compare status
004093  1  2A                   ROL     A               ; shift the result byte
004094  1  90 0E                BCC     LAB_2702        ; if no carry skip the byte save
004096  1               
004096  1  A0 01                LDY     #$01            ; set bit to flag byte save
004098  1  E8                   INX                     ; else increment the index to FACt
004099  1  E0 02                CPX     #$02            ; compare with the index to <FACt_3
00409B  1  30 04                BMI     LAB_2701        ; if not last byte just go save it
00409D  1               
00409D  1  D0 28                BNE     LAB_272B        ; if all done go save FAC1 rounding byte, normalise and
00409F  1               ; return
00409F  1               
00409F  1  A0 40                LDY     #$40            ; set bit to flag byte save for the rounding byte
0040A1  1               LAB_2701:
0040A1  1  95 75                STA     <FACt_1,X       ; write result byte to <FACt_1 + index
0040A3  1  98                   TYA                     ; copy the next save byte flag
0040A4  1               LAB_2702:
0040A4  1  28                   PLP                     ; restore FAC2-FAC1 compare status
0040A5  1  90 14                BCC     LAB_2704        ; if FAC2 < FAC1 then skip the subtract
0040A7  1               
0040A7  1  A8                   TAY                     ; save FAC2-FAC1 compare status
0040A8  1  A5 B6                LDA     <FAC2_3         ; get FAC2 mantissa3
0040AA  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
0040AC  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
0040AE  1  A5 B5                LDA     <FAC2_2         ; get FAC2 mantissa2
0040B0  1  E5 AE                SBC     <FAC1_2         ; subtract FAC1 mantissa2
0040B2  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
0040B4  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
0040B6  1  E5 AD                SBC     <FAC1_1         ; subtract FAC1 mantissa1
0040B8  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
0040BA  1  98                   TYA                     ; restore FAC2-FAC1 compare status
0040BB  1               
0040BB  1               ; FAC2 = FAC2*2
0040BB  1               LAB_2704:
0040BB  1  06 B6                ASL     <FAC2_3         ; shift FAC2 mantissa3
0040BD  1  26 B5                ROL     <FAC2_2         ; shift FAC2 mantissa2
0040BF  1  26 B4                ROL     <FAC2_1         ; shift FAC2 mantissa1
0040C1  1  B0 CF                BCS     LAB_26F4        ; loop with no compare
0040C3  1               
0040C3  1  30 BD                BMI     LAB_26E4        ; loop with compare
0040C5  1               
0040C5  1  10 CB                BPL     LAB_26F4        ; loop always with no compare
0040C7  1               
0040C7  1               ; do A<<6, save as FAC1 rounding byte, normalise and return
0040C7  1               
0040C7  1               LAB_272B:
0040C7  1  4A                   LSR     A               ; shift b1 - b0 ..
0040C8  1  6A                   ROR     A               ; ..
0040C9  1  6A                   ROR     A               ; .. to b7 - b6
0040CA  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
0040CC  1  28                   PLP                     ; dump FAC2-FAC1 compare status
0040CD  1  4C D5 40             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
0040D0  1               
0040D0  1               ; do "Divide by zero" error
0040D0  1               
0040D0  1               LAB_2737:
0040D0  1  A2 14                LDX     #$14            ; error code $14 ("Divide by zero" error)
0040D2  1  4C 4C 24             JMP     LAB_XERR        ; do error #X, then warm start
0040D5  1               
0040D5  1               ; copy temp to FAC1 and normalise
0040D5  1               
0040D5  1               LAB_273C:
0040D5  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
0040D7  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0040D9  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
0040DB  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0040DD  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
0040DF  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0040E1  1  4C 4B 3E             JMP     LAB_24D5        ; normalise FAC1 and return
0040E4  1               
0040E4  1               ; unpack memory (AY) into FAC1
0040E4  1               
0040E4  1               LAB_UFAC:
0040E4  1  85 71                STA     <ut1_pl         ; save pointer low byte
0040E6  1  84 72                STY     <ut1_ph         ; save pointer high byte
0040E8  1  A0 03                LDY     #$03            ; 4 bytes to do
0040EA  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last byte
0040EE  1  B5 71 C9 00  
0040F2  1  D0 04 A2 00  
004100  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004102  1  88                   DEY                     ; decrement index
004103  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last-1 byte
004107  1  B5 71 C9 00  
00410B  1  D0 04 A2 00  
004119  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
00411B  1  88                   DEY                     ; decrement index
00411C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get second byte
004120  1  B5 71 C9 00  
004124  1  D0 04 A2 00  
004132  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004134  1  09 80                ORA     #$80            ; set 1xxx xxxx (add normal bit)
004136  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004138  1  88                   DEY                     ; decrement index
004139  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get first byte (exponent)
00413D  1  B5 71 C9 00  
004141  1  D0 04 A2 00  
00414F  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004151  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004153  1  60                   RTS
004154  1               
004154  1               ; pack FAC1 into <Adatal
004154  1               
004154  1               LAB_276E:
004154  1  A2 A4                LDX     #<Adatal        ; set pointer low byte
004156  1               LAB_2770:
004156  1  A0 00                LDY     #>Adatal        ; set pointer high byte
004158  1  F0 04                BEQ     LAB_2778        ; pack FAC1 into (XY) and return
00415A  1               
00415A  1               ; pack FAC1 into (<Lvarpl)
00415A  1               
00415A  1               LAB_PFAC:
00415A  1  A6 97                LDX     <Lvarpl         ; get destination pointer low byte
00415C  1  A4 98                LDY     <Lvarph         ; get destination pointer high byte
00415E  1               
00415E  1               ; pack FAC1 into (XY)
00415E  1               
00415E  1               LAB_2778:
00415E  1  20 E0 41             JSR     LAB_27BA        ; round FAC1
004161  1  86 71                STX     <ut1_pl         ; save pointer low byte
004163  1  84 72                STY     <ut1_ph         ; save pointer high byte
004165  1  A0 03                LDY     #$03            ; set index
004167  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004169  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
00416D  1  01 B5 71 C9  
004171  1  00 D0 04 A2  
00417F  1  88                   DEY                     ; decrement index
004180  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004182  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
004186  1  01 B5 71 C9  
00418A  1  00 D0 04 A2  
004198  1  88                   DEY                     ; decrement index
004199  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00419B  1  09 7F                ORA     #$7F            ; set bits x111 1111
00419D  1  25 AD                AND     <FAC1_1         ; AND in FAC1 mantissa1
00419F  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0041A3  1  01 B5 71 C9  
0041A7  1  00 D0 04 A2  
0041B5  1  88                   DEY                     ; decrement index
0041B6  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0041B8  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0041BC  1  01 B5 71 C9  
0041C0  1  00 D0 04 A2  
0041CE  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
0041D0  1  60                   RTS
0041D1  1               
0041D1  1               ; round and copy FAC1 to FAC2
0041D1  1               
0041D1  1               LAB_27AB:
0041D1  1  20 E0 41             JSR     LAB_27BA        ; round FAC1
0041D4  1               
0041D4  1               ; copy FAC1 to FAC2
0041D4  1               
0041D4  1               LAB_27AE:
0041D4  1  A2 05                LDX     #$05            ; 5 bytes to copy
0041D6  1               LAB_27B0:
0041D6  1  B5 AB                LDA     <FAC1_e-1,X     ; get byte from FAC1,X
0041D8  1  95 B2                STA     <FAC1_o,X       ; save byte at FAC2,X
0041DA  1  CA                   DEX                     ; decrement count
0041DB  1  D0 F9                BNE     LAB_27B0        ; loop if not all done
0041DD  1               
0041DD  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
0041DF  1               LAB_27B9:
0041DF  1  60                   RTS
0041E0  1               
0041E0  1               ; round FAC1
0041E0  1               
0041E0  1               LAB_27BA:
0041E0  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0041E2  1  F0 FB                BEQ     LAB_27B9        ; exit if zero
0041E4  1               
0041E4  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
0041E6  1  90 F7                BCC     LAB_27B9        ; exit if no overflow
0041E8  1               
0041E8  1               ; round FAC1 (no check)
0041E8  1               
0041E8  1               LAB_27C2:
0041E8  1  20 CF 3E             JSR     LAB_2559        ; increment FAC1 mantissa
0041EB  1  D0 F2                BNE     LAB_27B9        ; branch if no overflow
0041ED  1               
0041ED  1  4C A0 3E             JMP     LAB_252A        ; normalise FAC1 for C=1 and return
0041F0  1               
0041F0  1               ; get FAC1 sign
0041F0  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0041F0  1               
0041F0  1               LAB_27CA:
0041F0  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0041F2  1  F0 09                BEQ     LAB_27D7        ; exit if zero (already correct SGN(0)=0)
0041F4  1               
0041F4  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0041F4  1               ; no = 0 check
0041F4  1               
0041F4  1               LAB_27CE:
0041F4  1  A5 B0                LDA     <FAC1_s         ; else get FAC1 sign (b7)
0041F6  1               
0041F6  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0041F6  1               ; no = 0 check, sign in A
0041F6  1               
0041F6  1               LAB_27D0:
0041F6  1  2A                   ROL     A               ; move sign bit to carry
0041F7  1  A9 FF                LDA     #$FF            ; set byte for -ve result
0041F9  1  B0 02                BCS     LAB_27D7        ; return if sign was set (-ve)
0041FB  1               
0041FB  1  A9 01                LDA     #$01            ; else set byte for +ve result
0041FD  1               LAB_27D7:
0041FD  1  60                   RTS
0041FE  1               
0041FE  1               ; perform SGN()
0041FE  1               
0041FE  1               LAB_SGN:
0041FE  1  20 F0 41             JSR     LAB_27CA        ; get FAC1 sign
004201  1               ; return A=$FF/-ve A=$01/+ve
004201  1               ; save A as integer byte
004201  1               
004201  1               LAB_27DB:
004201  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004203  1  A9 00                LDA     #$00            ; clear A
004205  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
004207  1  A2 88                LDX     #$88            ; set exponent
004209  1               
004209  1               ; set exp=X, clearFAC1 mantissa3 and normalise
004209  1               
004209  1               LAB_27E3:
004209  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
00420B  1  49 FF                EOR     #$FF            ; complement it
00420D  1  2A                   ROL     A               ; sign bit into carry
00420E  1               
00420E  1               ; set exp=X, clearFAC1 mantissa3 and normalise
00420E  1               
00420E  1               LAB_STFA:
00420E  1  A9 00                LDA     #$00            ; clear A
004210  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004212  1  86 AC                STX     <FAC1_e         ; set FAC1 exponent
004214  1  85 B9                STA     <FAC1_r         ; clear FAC1 rounding byte
004216  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
004218  1  4C 46 3E             JMP     LAB_24D0        ; do ABS and normalise FAC1
00421B  1               
00421B  1               ; perform ABS()
00421B  1               
00421B  1               LAB_ABS:
00421B  1  46 B0                LSR     <FAC1_s         ; clear FAC1 sign (put zero in b7)
00421D  1  60                   RTS
00421E  1               
00421E  1               ; compare FAC1 with (AY)
00421E  1               ; returns A=$00 if FAC1 = (AY)
00421E  1               ; returns A=$01 if FAC1 > (AY)
00421E  1               ; returns A=$FF if FAC1 < (AY)
00421E  1               
00421E  1               LAB_27F8:
00421E  1  85 73                STA     <ut2_pl         ; save pointer low byte
004220  1               LAB_27FA:
004220  1  84 74                STY     <ut2_ph         ; save pointer high byte
004222  1  A0 00                LDY     #$00            ; clear index
004224  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get exponent
004228  1  B5 73 C9 00  
00422C  1  D0 04 A2 00  
00423A  1  C8                   INY                     ; increment index
00423B  1  AA                   TAX                     ; copy (AY) exponent to X
00423C  1  F0 B2                BEQ     LAB_27CA        ; branch if (AY) exponent=0 and get FAC1 sign
00423E  1               ; A=FF,C=1/-ve A=01,C=0/+ve
00423E  1               
00423E  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
004242  1  B5 73 C9 00  
004246  1  D0 04 A2 00  
004254  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
004256  1  30 9C                BMI     LAB_27CE        ; if signs <> do return A=FF,C=1/-ve
004258  1               ; A=01,C=0/+ve and return
004258  1               
004258  1  E4 AC                CPX     <FAC1_e         ; compare (AY) exponent with FAC1 exponent
00425A  1  D0 56                BNE     LAB_2828        ; branch if different
00425C  1               
00425C  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
004260  1  B5 73 C9 00  
004264  1  D0 04 A2 00  
004272  1  09 80                ORA     #$80            ; normalise top bit
004274  1  C5 AD                CMP     <FAC1_1         ; compare with FAC1 mantissa1
004276  1  D0 3A                BNE     LAB_2828        ; branch if different
004278  1               
004278  1  C8                   INY                     ; increment index
004279  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa2
00427D  1  B5 73 C9 00  
004281  1  D0 04 A2 00  
00428F  1  C5 AE                CMP     <FAC1_2         ; compare with FAC1 mantissa2
004291  1  D0 1F                BNE     LAB_2828        ; branch if different
004293  1               
004293  1  C8                   INY                     ; increment index
004294  1  A9 7F                LDA     #$7F            ; set for 1/2 value rounding byte
004296  1  C5 B9                CMP     <FAC1_r         ; compare with FAC1 rounding byte (set carry)
004298  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa3
00429C  1  B5 73 C9 00  
0042A0  1  D0 04 A2 00  
0042AE  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
0042B0  1  F0 28                BEQ     LAB_2850        ; exit if mantissa3 equal
0042B2  1               
0042B2  1               ; gets here if number <> FAC1
0042B2  1               
0042B2  1               LAB_2828:
0042B2  1               
0042B2  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0042B4  1  90 02                BCC     LAB_282E        ; branch if FAC1 > (AY)
0042B6  1               
0042B6  1  49 FF                EOR     #$FF            ; else toggle FAC1 sign
0042B8  1               LAB_282E:
0042B8  1  4C F6 41             JMP     LAB_27D0        ; return A=FF,C=1/-ve A=01,C=0/+ve
0042BB  1               
0042BB  1               ; convert FAC1 floating-to-fixed
0042BB  1               
0042BB  1               LAB_2831:
0042BB  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0042BD  1  F0 4A                BEQ     LAB_287F        ; if zero go clear FAC1 and return
0042BF  1               
0042BF  1  38                   SEC                     ; set carry for subtract
0042C0  1  E9 98                SBC     #$98            ; subtract maximum integer range exponent
0042C2  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
0042C4  1  10 09                BPL     LAB_2845        ; branch if FAC1 +ve
0042C6  1               
0042C6  1               ; FAC1 was -ve
0042C6  1  AA                   TAX                     ; copy subtracted exponent
0042C7  1  A9 FF                LDA     #$FF            ; overflow for -ve number
0042C9  1  85 B2                STA     <FAC1_o         ; set FAC1 overflow byte
0042CB  1  20 B3 3E             JSR     LAB_253D        ; twos complement FAC1 mantissa
0042CE  1  8A                   TXA                     ; restore subtracted exponent
0042CF  1               LAB_2845:
0042CF  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1
0042D1  1  C9 F9                CMP     #$F9            ; compare exponent result
0042D3  1  10 06                BPL     LAB_2851        ; if < 8 shifts shift FAC1 A times right and return
0042D5  1               
0042D5  1  20 F1 3E             JSR     LAB_257B        ; shift FAC1 A times right (> 8 shifts)
0042D8  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
0042DA  1               LAB_2850:
0042DA  1  60                   RTS
0042DB  1               
0042DB  1               ; shift FAC1 A times right
0042DB  1               
0042DB  1               LAB_2851:
0042DB  1  A8                   TAY                     ; copy shift count
0042DC  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0042DE  1  29 80                AND     #$80            ; mask sign bit only (x000 0000)
0042E0  1  46 AD                LSR     <FAC1_1         ; shift FAC1 mantissa1
0042E2  1  05 AD                ORA     <FAC1_1         ; OR sign in b7 FAC1 mantissa1
0042E4  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0042E6  1  20 08 3F             JSR     LAB_2592        ; shift FAC1 Y times right
0042E9  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
0042EB  1  60                   RTS
0042EC  1               
0042EC  1               ; perform INT()
0042EC  1               
0042EC  1               LAB_INT:
0042EC  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0042EE  1  C9 98                CMP     #$98            ; compare with max int
0042F0  1  B0 1E                BCS     LAB_2886        ; exit if >= (already int, too big for fractional part!)
0042F2  1               
0042F2  1  20 BB 42             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0042F5  1  84 B9                STY     <FAC1_r         ; save FAC1 rounding byte
0042F7  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0042F9  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
0042FB  1  49 80                EOR     #$80            ; toggle FAC1 sign
0042FD  1  2A                   ROL     A               ; shift into carry
0042FE  1  A9 98                LDA     #$98            ; set new exponent
004300  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004302  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004304  1  85 5B                STA     <Temp3          ; save for EXP() function
004306  1  4C 46 3E             JMP     LAB_24D0        ; do ABS and normalise FAC1
004309  1               
004309  1               ; clear FAC1 and return
004309  1               
004309  1               LAB_287F:
004309  1  85 AD                STA     <FAC1_1         ; clear FAC1 mantissa1
00430B  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
00430D  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
00430F  1  A8                   TAY                     ; clear Y
004310  1               LAB_2886:
004310  1  60                   RTS
004311  1               
004311  1               ; get FAC1 from string
004311  1               ; this routine now handles hex and binary values from strings
004311  1               ; starting with "$" and "%" respectively
004311  1               
004311  1               LAB_2887:
004311  1  A0 00                LDY     #$00            ; clear Y
004313  1  84 5F                STY     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
004315  1  A2 09                LDX     #$09            ; set index
004317  1               LAB_288B:
004317  1  94 A8                STY     <numexp,x       ; clear byte
004319  1  CA                   DEX                     ; decrement index
00431A  1  10 FB                BPL     LAB_288B        ; loop until <numexp to <negnum (and FAC1) = $00
00431C  1               
00431C  1  B0 03                BCS     LAB_s28FE       ; branch if 1st NOT character numeric
00431E  1  4C A4 43             JMP     LAB_28FE        ; branch if 1st character numeric
004321  1               LAB_s28FE:
004321  1               
004321  1               ; get FAC1 from string .. first character wasn't numeric
004321  1               
004321  1  C9 2D                CMP     #'-'            ; else compare with "-"
004323  1  D0 04                BNE     LAB_289A        ; branch if not "-"
004325  1               
004325  1  86 B1                STX     <negnum         ; set flag for -ve number (X = $FF)
004327  1  F0 04                BEQ     LAB_289C        ; branch always (go scan and check for hex/bin)
004329  1               
004329  1               ; get FAC1 from string .. first character wasn't numeric or -
004329  1               
004329  1               LAB_289A:
004329  1  C9 2B                CMP     #'+'            ; else compare with "+"
00432B  1  D0 06                BNE     LAB_289D        ; branch if not "+" (go check for hex/bin)
00432D  1               
00432D  1               ; was "+" or "-" to start, so get next character
00432D  1               
00432D  1               LAB_289C:
00432D  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004331  1  90 71                BCC     LAB_28FE        ; branch if numeric character
004333  1               
004333  1               ; code here for hex and binary numbers
004333  1               
004333  1               LAB_289D:
004333  1  C9 24                CMP     #'$'            ; else compare with "$"
004335  1  D0 03                BNE     LAB_NHEX        ; branch if not "$"
004337  1               
004337  1  4C 62 48             JMP     LAB_CHEX        ; branch if "$"
00433A  1               
00433A  1               LAB_NHEX:
00433A  1  C9 25                CMP     #'%'            ; else compare with "%"
00433C  1  D0 09                BNE     LAB_28A3        ; branch if not "%" (continue original code)
00433E  1               
00433E  1  4C 91 48             JMP     LAB_CBIN        ; branch if "%"
004341  1               
004341  1               LAB_289E:
004341  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (ignore + or get next number)
004345  1               LAB_28A1:
004345  1  90 5D                BCC     LAB_28FE        ; branch if numeric character
004347  1               
004347  1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
004347  1               
004347  1               LAB_28A3:
004347  1  C9 2E                CMP     #'.'            ; else compare with "."
004349  1  F0 30                BEQ     LAB_28D5        ; branch if "."
00434B  1               
00434B  1               ; get FAC1 from string .. character wasn't numeric, -, + or .
00434B  1               
00434B  1  C9 45                CMP     #'E'            ; else compare with "E"
00434D  1  D0 32                BNE     LAB_28DB        ; branch if not "E"
00434F  1               
00434F  1               ; was "E" so evaluate exponential part
00434F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004353  1  90 18                BCC     LAB_28C7        ; branch if numeric character
004355  1               
004355  1  C9 C9                CMP     #TK_MINUS       ; else compare with token for -
004357  1  F0 0E                BEQ     LAB_28C2        ; branch if token for -
004359  1               
004359  1  C9 2D                CMP     #'-'            ; else compare with "-"
00435B  1  F0 0A                BEQ     LAB_28C2        ; branch if "-"
00435D  1               
00435D  1  C9 C8                CMP     #TK_PLUS        ; else compare with token for +
00435F  1  F0 08                BEQ     LAB_28C4        ; branch if token for +
004361  1               
004361  1  C9 2B                CMP     #'+'            ; else compare with "+"
004363  1  F0 04                BEQ     LAB_28C4        ; branch if "+"
004365  1               
004365  1  D0 08                BNE     LAB_28C9        ; branch always
004367  1               
004367  1               LAB_28C2:
004367  1  66 AB                ROR     <expneg         ; set exponent -ve flag (C, which=1, into b7)
004369  1               LAB_28C4:
004369  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00436D  1               LAB_28C7:
00436D  1  90 5B                BCC     LAB_2925        ; branch if numeric character
00436F  1               
00436F  1               LAB_28C9:
00436F  1  24 AB                BIT     <expneg         ; test exponent -ve flag
004371  1  10 0E                BPL     LAB_28DB        ; if +ve go evaluate exponent
004373  1               
004373  1               ; else do exponent = -exponent
004373  1  A9 00                LDA     #$00            ; clear result
004375  1  38                   SEC                     ; set carry for subtract
004376  1  E5 A9                SBC     <expcnt         ; subtract exponent byte
004378  1  4C 83 43             JMP     LAB_28DD        ; go evaluate exponent
00437B  1               
00437B  1               LAB_28D5:
00437B  1  66 AA                ROR     <numdpf         ; set decimal point flag
00437D  1  24 AA                BIT     <numdpf         ; test decimal point flag
00437F  1  50 C0                BVC     LAB_289E        ; branch if only one decimal point so far
004381  1               
004381  1               ; evaluate exponent
004381  1               LAB_28DB:
004381  1  A5 A9                LDA     <expcnt         ; get exponent count byte
004383  1               LAB_28DD:
004383  1  38                   SEC                     ; set carry for subtract
004384  1  E5 A8                SBC     <numexp         ; subtract numerator exponent
004386  1  85 A9                STA     <expcnt         ; save exponent count byte
004388  1  F0 12                BEQ     LAB_28F6        ; branch if no adjustment
00438A  1               
00438A  1  10 09                BPL     LAB_28EF        ; else if +ve go do FAC1*10^<expcnt
00438C  1               
00438C  1               ; else go do FAC1/10^(0-<expcnt)
00438C  1               LAB_28E6:
00438C  1  20 57 40             JSR     LAB_26B9        ; divide by 10
00438F  1  E6 A9                INC     <expcnt         ; increment exponent count byte
004391  1  D0 F9                BNE     LAB_28E6        ; loop until all done
004393  1               
004393  1  F0 07                BEQ     LAB_28F6        ; branch always
004395  1               
004395  1               LAB_28EF:
004395  1  20 3E 40             JSR     LAB_269E        ; multiply by 10
004398  1  C6 A9                DEC     <expcnt         ; decrement exponent count byte
00439A  1  D0 F9                BNE     LAB_28EF        ; loop until all done
00439C  1               
00439C  1               LAB_28F6:
00439C  1  A5 B1                LDA     <negnum         ; get -ve flag
00439E  1  30 01                BMI     LAB_28FB        ; if -ve do - FAC1 and return
0043A0  1               
0043A0  1  60                   RTS
0043A1  1               
0043A1  1               ; do - FAC1 and return
0043A1  1               
0043A1  1               LAB_28FB:
0043A1  1  4C 94 45             JMP     LAB_GTHAN       ; do - FAC1 and return
0043A4  1               
0043A4  1               ; do unsigned FAC1*10+number
0043A4  1               
0043A4  1               LAB_28FE:
0043A4  1  48                   PHA                     ; save character
0043A5  1  24 AA                BIT     <numdpf         ; test decimal point flag
0043A7  1  10 02                BPL     LAB_2905        ; skip exponent increment if not set
0043A9  1               
0043A9  1  E6 A8                INC     <numexp         ; else increment number exponent
0043AB  1               LAB_2905:
0043AB  1  20 3E 40             JSR     LAB_269E        ; multiply FAC1 by 10
0043AE  1  68                   PLA                     ; restore character
0043AF  1  29 0F                AND     #$0F            ; convert to binary
0043B1  1  20 B7 43             JSR     LAB_2912        ; evaluate new ASCII digit
0043B4  1  4C 41 43             JMP     LAB_289E        ; go do next character
0043B7  1               
0043B7  1               ; evaluate new ASCII digit
0043B7  1               
0043B7  1               LAB_2912:
0043B7  1  48                   PHA                     ; save digit
0043B8  1  20 D1 41             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0043BB  1  68                   PLA                     ; restore digit
0043BC  1  20 01 42             JSR     LAB_27DB        ; save A as integer byte
0043BF  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0043C1  1  45 B0                EOR     <FAC1_s         ; toggle with FAC1 sign (b7)
0043C3  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
0043C5  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
0043C7  1  4C D2 3D             JMP     LAB_ADD         ; add FAC2 to FAC1 and return
0043CA  1               
0043CA  1               ; evaluate next character of exponential part of number
0043CA  1               
0043CA  1               LAB_2925:
0043CA  1  A5 A9                LDA     <expcnt         ; get exponent count byte
0043CC  1  C9 0A                CMP     #$0A            ; compare with 10 decimal
0043CE  1  90 09                BCC     LAB_2934        ; branch if less
0043D0  1               
0043D0  1  A9 64                LDA     #$64            ; make all -ve exponents = -100 decimal (causes underflow)
0043D2  1  24 AB                BIT     <expneg         ; test exponent -ve flag
0043D4  1  30 25                BMI     LAB_2942        ; branch if -ve
0043D6  1               
0043D6  1  4C DA 3E             JMP     LAB_2564        ; else do overflow error
0043D9  1               
0043D9  1               LAB_2934:
0043D9  1  0A                   ASL     A               ; * 2
0043DA  1  0A                   ASL     A               ; * 4
0043DB  1  65 A9                ADC     <expcnt         ; * 5
0043DD  1  0A                   ASL     A               ; * 10
0043DE  1  A0 00                LDY     #$00            ; set index
0043E0  1  8B 48 DA A2          ADCINDIRECTY Bpntrl     ; add character (will be $30 too much!)
0043E4  1  01 B5 C3 C9  
0043E8  1  00 D0 04 A2  
0043F9  1  E9 2F                SBC     #'0'-1          ; convert character to binary
0043FB  1               LAB_2942:
0043FB  1  85 A9                STA     <expcnt         ; save exponent count byte
0043FD  1  4C 69 43             JMP     LAB_28C4        ; go get next character
004400  1               
004400  1               ; print " in line [LINE #]"
004400  1               
004400  1               LAB_2953:
004400  1  A9 9F                LDA     #<LAB_LMSG      ; point to " in line " message low byte
004402  1  A0 17                LDY     #>LAB_LMSG      ; point to " in line " message high byte
004404  1  20 ED 2C             JSR     LAB_18C3        ; print null terminated string from memory
004407  1               
004407  1               ; print Basic line #
004407  1  A5 88                LDA     <Clineh         ; get current line high byte
004409  1  A6 87                LDX     <Clinel         ; get current line low byte
00440B  1               
00440B  1               ; print XA as unsigned integer
00440B  1               
00440B  1               LAB_295E:
00440B  1  85 AD                STA     <FAC1_1         ; save low byte as FAC1 mantissa1
00440D  1  86 AE                STX     <FAC1_2         ; save high byte as FAC1 mantissa2
00440F  1  A2 90                LDX     #$90            ; set exponent to 16d bits
004411  1  38                   SEC                     ; set integer is +ve flag
004412  1  20 0E 42             JSR     LAB_STFA        ; set exp=X, clearFAC1 mantissa3 and normalise
004415  1  A0 00                LDY     #$00            ; clear index
004417  1  98                   TYA                     ; clear A
004418  1  20 2D 44             JSR     LAB_297B        ; convert FAC1 to string, skip sign character save
00441B  1  4C ED 2C             JMP     LAB_18C3        ; print null terminated string from memory and return
00441E  1               
00441E  1               ; convert FAC1 to ASCII string result in (AY)
00441E  1               ; not any more, moved scratchpad to page 0
00441E  1               
00441E  1               LAB_296E:
00441E  1  A0 01                LDY     #$01            ; set index = 1
004420  1  A9 20                LDA     #$20            ; character = " " (assume +ve)
004422  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
004424  1  10 02                BPL     LAB_2978        ; branch if +ve
004426  1               
004426  1  A9 2D                LDA     #$2D            ; else character = "-"
004428  1               LAB_2978:
004428  1  DA                   PHX
004429  1  BB                   TYX
00442A  1  95 EF                STA     <Decss,X        ; save leading character (" " or "-")
00442C  1  FA                   PLX
00442D  1               LAB_297B:
00442D  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
00442F  1  84 BA                STY     <Sendl          ; save index
004431  1  C8                   INY                     ; increment index
004432  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
004434  1  D0 05                BNE     LAB_2989        ; branch if FAC1<>0
004436  1               
004436  1               ; exponent was $00 so FAC1 is 0
004436  1  A9 30                LDA     #'0'            ; set character = "0"
004438  1  4C 4A 45             JMP     LAB_2A89        ; save last character, [EOT] and exit
00443B  1               
00443B  1               ; FAC1 is some non zero value
00443B  1               LAB_2989:
00443B  1  A9 00                LDA     #$00            ; clear (number exponent count)
00443D  1  E0 81                CPX     #$81            ; compare FAC1 exponent with $81 (>1.00000)
00443F  1               
00443F  1  B0 09                BCS     LAB_299A        ; branch if FAC1=>1
004441  1               
004441  1               ; FAC1<1
004441  1  A9 09                LDA     #<LAB_294F      ; set pointer low byte to 1,000,000
004443  1  A0 18                LDY     #>LAB_294F      ; set pointer high byte to 1,000,000
004445  1  20 50 3F             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
004448  1  A9 FA                LDA     #$FA            ; set number exponent count (-6)
00444A  1               LAB_299A:
00444A  1  85 A8                STA     <numexp         ; save number exponent count
00444C  1               LAB_299C:
00444C  1  A9 05                LDA     #<LAB_294B      ; set pointer low byte to 999999.4375 (max before sci note)
00444E  1  A0 18                LDY     #>LAB_294B      ; set pointer high byte to 999999.4375
004450  1  20 1E 42             JSR     LAB_27F8        ; compare FAC1 with (AY)
004453  1  F0 1E                BEQ     LAB_29C3        ; exit if FAC1 = (AY)
004455  1  10 12                BPL     LAB_29B9        ; go do /10 if FAC1 > (AY)
004457  1               ; FAC1 < (AY)
004457  1               LAB_29A7:
004457  1  A9 01                LDA     #<LAB_2947      ; set pointer low byte to 99999.9375
004459  1  A0 18                LDY     #>LAB_2947      ; set pointer high byte to 99999.9375
00445B  1  20 1E 42             JSR     LAB_27F8        ; compare FAC1 with (AY)
00445E  1  F0 02                BEQ     LAB_29B2        ; branch if FAC1 = (AY) (allow decimal places)
004460  1  10 0E                BPL     LAB_29C0        ; branch if FAC1 > (AY) (no decimal places)
004462  1               ; FAC1 <= (AY)
004462  1               LAB_29B2:
004462  1  20 3E 40             JSR     LAB_269E        ; multiply by 10
004465  1  C6 A8                DEC     <numexp         ; decrement number exponent count
004467  1  D0 EE                BNE     LAB_29A7        ; go test again (branch always)
004469  1               
004469  1               LAB_29B9:
004469  1  20 57 40             JSR     LAB_26B9        ; divide by 10
00446C  1  E6 A8                INC     <numexp         ; increment number exponent count
00446E  1  D0 DC                BNE     LAB_299C        ; go test again (branch always)
004470  1               
004470  1               ; now we have just the digits to do
004470  1               
004470  1               LAB_29C0:
004470  1  20 CB 3D             JSR     LAB_244E        ; add 0.5 to FAC1 (round FAC1)
004473  1               LAB_29C3:
004473  1  20 BB 42             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
004476  1  A2 01                LDX     #$01            ; set default digits before dp = 1
004478  1  A5 A8                LDA     <numexp         ; get number exponent count
00447A  1  18                   CLC                     ; clear carry for add
00447B  1  69 07                ADC     #$07            ; up to 6 digits before point
00447D  1  30 09                BMI     LAB_29D8        ; if -ve then 1 digit before dp
00447F  1               
00447F  1  C9 08                CMP     #$08            ; A>=8 if n>=1E6
004481  1  B0 06                BCS     LAB_29D9        ; branch if >= $08
004483  1               
004483  1               ; carry is clear
004483  1  69 FF                ADC     #$FF            ; take 1 from digit count
004485  1  AA                   TAX                     ; copy to A
004486  1  A9 02                LDA     #$02            ;.set exponent adjust
004488  1               LAB_29D8:
004488  1  38                   SEC                     ; set carry for subtract
004489  1               LAB_29D9:
004489  1  E9 02                SBC     #$02            ; -2
00448B  1  85 A9                STA     <expcnt         ;.save exponent adjust
00448D  1  86 A8                STX     <numexp         ; save digits before dp count
00448F  1  8A                   TXA                     ; copy to A
004490  1  F0 02                BEQ     LAB_29E4        ; branch if no digits before dp
004492  1               
004492  1  10 17                BPL     LAB_29F7        ; branch if digits before dp
004494  1               
004494  1               LAB_29E4:
004494  1  A4 BA                LDY     <Sendl          ; get output string index
004496  1  A9 2E                LDA     #$2E            ; character "."
004498  1  C8                   INY                     ; increment index
004499  1  DA                   PHX
00449A  1  BB                   TYX
00449B  1  95 EF                STA     <Decss,X        ; save to output string
00449D  1  FA                   PLX
00449E  1  8A                   TXA                     ;.
00449F  1  F0 08                BEQ     LAB_29F5        ;.
0044A1  1               
0044A1  1  A9 30                LDA     #'0'            ; character "0"
0044A3  1  C8                   INY                     ; increment index
0044A4  1  DA                   PHX
0044A5  1  BB                   TYX
0044A6  1  95 EF                STA     <Decss,X        ; save to output string
0044A8  1  FA                   PLX
0044A9  1               LAB_29F5:
0044A9  1  84 BA                STY     <Sendl          ; save output string index
0044AB  1               LAB_29F7:
0044AB  1  A0 00                LDY     #$00            ; clear index (point to 100,000)
0044AD  1  A2 80                LDX     #$80            ;
0044AF  1               LAB_29FB:
0044AF  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0044B1  1  18                   CLC                     ; clear carry for add
0044B2  1  79 7F 18             ADC     LAB_2A9C,Y      ; add -ve LSB
0044B5  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0044B7  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0044B9  1  79 7E 18             ADC     LAB_2A9B,Y      ; add -ve NMSB
0044BC  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0044BE  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0044C0  1  79 7D 18             ADC     LAB_2A9A,Y      ; add -ve MSB
0044C3  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0044C5  1  E8                   INX                     ;
0044C6  1  B0 04                BCS     LAB_2A18        ;
0044C8  1               
0044C8  1  10 E5                BPL     LAB_29FB        ; not -ve so try again
0044CA  1               
0044CA  1  30 02                BMI     LAB_2A1A        ;
0044CC  1               
0044CC  1               LAB_2A18:
0044CC  1  30 E1                BMI     LAB_29FB        ;
0044CE  1               
0044CE  1               LAB_2A1A:
0044CE  1  8A                   TXA                     ;
0044CF  1  90 04                BCC     LAB_2A21        ;
0044D1  1               
0044D1  1  49 FF                EOR     #$FF            ;
0044D3  1  69 0A                ADC     #$0A            ;
0044D5  1               LAB_2A21:
0044D5  1  69 2F                ADC     #'0'-1          ; add "0"-1 to result
0044D7  1  C8                   INY                     ; increment index ..
0044D8  1  C8                   INY                     ; .. to next less ..
0044D9  1  C8                   INY                     ; .. power of ten
0044DA  1  84 95                STY     <Cvaral         ; save as current var address low byte
0044DC  1  A4 BA                LDY     <Sendl          ; get output string index
0044DE  1  C8                   INY                     ; increment output string index
0044DF  1  AA                   TAX                     ; copy character to X
0044E0  1  29 7F                AND     #$7F            ; mask out top bit
0044E2  1  DA                   PHX
0044E3  1  BB                   TYX
0044E4  1  95 EF                STA     <Decss,X        ; save to output string
0044E6  1  FA                   PLX
0044E7  1  C6 A8                DEC     <numexp         ; decrement # of characters before the dp
0044E9  1  D0 08                BNE     LAB_2A3B        ; branch if still characters to do
0044EB  1               
0044EB  1               ; else output the point
0044EB  1  A9 2E                LDA     #$2E            ; character "."
0044ED  1  C8                   INY                     ; increment output string index
0044EE  1  DA                   PHX
0044EF  1  BB                   TYX
0044F0  1  95 EF                STA     <Decss,X        ; save to output string
0044F2  1  FA                   PLX
0044F3  1               LAB_2A3B:
0044F3  1  84 BA                STY     <Sendl          ; save output string index
0044F5  1  A4 95                LDY     <Cvaral         ; get current var address low byte
0044F7  1  8A                   TXA                     ; get character back
0044F8  1  49 FF                EOR     #$FF            ;
0044FA  1  29 80                AND     #$80            ;
0044FC  1  AA                   TAX                     ;
0044FD  1  C0 12                CPY     #$12            ; compare index with max
0044FF  1  D0 AE                BNE     LAB_29FB        ; loop if not max
004501  1               
004501  1               ; now remove trailing zeroes
004501  1  A4 BA                LDY     <Sendl          ; get output string index
004503  1               LAB_2A4B:
004503  1  DA                   PHX
004504  1  BB                   TYX
004505  1  B5 EF                LDA     <Decss,X        ; get character from output string
004507  1  FA                   PLX
004508  1  88                   DEY                     ; decrement output string index
004509  1  C9 30                CMP     #'0'            ; compare with "0"
00450B  1  F0 F6                BEQ     LAB_2A4B        ; loop until non "0" character found
00450D  1               
00450D  1  C9 2E                CMP     #'.'            ; compare with "."
00450F  1  F0 01                BEQ     LAB_2A58        ; branch if was dp
004511  1               
004511  1               ; restore last character
004511  1  C8                   INY                     ; increment output string index
004512  1               LAB_2A58:
004512  1  A9 2B                LDA     #$2B            ; character "+"
004514  1  A6 A9                LDX     <expcnt         ; get exponent count
004516  1  F0 37                BEQ     LAB_2A8C        ; if zero go set null terminator and exit
004518  1               
004518  1               ; exponent isn't zero so write exponent
004518  1  10 08                BPL     LAB_2A68        ; branch if exponent count +ve
00451A  1               
00451A  1  A9 00                LDA     #$00            ; clear A
00451C  1  38                   SEC                     ; set carry for subtract
00451D  1  E5 A9                SBC     <expcnt         ; subtract exponent count adjust (convert -ve to +ve)
00451F  1  AA                   TAX                     ; copy exponent count to X
004520  1  A9 2D                LDA     #'-'            ; character "-"
004522  1               LAB_2A68:
004522  1  DA                   PHX
004523  1  BB                   TYX
004524  1  95 F1                STA     <Decss+2,X      ; save to output string
004526  1  A9 45                LDA     #$45            ; character "E"
004528  1  95 F0                STA     <Decss+1,X      ; save exponent sign to output string
00452A  1  FA                   PLX
00452B  1  8A                   TXA                     ; get exponent count back
00452C  1  A2 2F                LDX     #'0'-1          ; one less than "0" character
00452E  1  38                   SEC                     ; set carry for subtract
00452F  1               LAB_2A74:
00452F  1  E8                   INX                     ; increment 10's character
004530  1  E9 0A                SBC     #$0A            ;.subtract 10 from exponent count
004532  1  B0 FB                BCS     LAB_2A74        ; loop while still >= 0
004534  1               
004534  1  69 3A                ADC     #':'            ; add character ":" ($30+$0A, result is 10 less that value)
004536  1  DA                   PHX
004537  1  BB                   TYX
004538  1  95 F3                STA     <Decss+4,X      ; save to output string
00453A  1  FA                   PLX
00453B  1  8A                   TXA                     ; copy 10's character
00453C  1  DA                   PHX
00453D  1  BB                   TYX
00453E  1  95 F2                STA     <Decss+3,X      ; save to output string
004540  1  FA                   PLX
004541  1  A9 00                LDA     #$00            ; set null terminator
004543  1  DA                   PHX
004544  1  BB                   TYX
004545  1  95 F4                STA     <Decss+5,X      ; save to output string
004547  1  FA                   PLX
004548  1  F0 0C                BEQ     LAB_2A91        ; go set string pointer (AY) and exit (branch always)
00454A  1               
00454A  1               ; save last character, [EOT] and exit
00454A  1               LAB_2A89:
00454A  1  DA                   PHX
00454B  1  BB                   TYX
00454C  1  95 EF                STA     <Decss,X        ; save last character to output string
00454E  1  FA                   PLX
00454F  1               ; set null terminator and exit
00454F  1               LAB_2A8C:
00454F  1  A9 00                LDA     #$00            ; set null terminator
004551  1  DA                   PHX
004552  1  BB                   TYX
004553  1  95 F0                STA     <Decss+1,X      ; save after last character
004555  1  FA                   PLX
004556  1               ; set string pointer (AY) and exit
004556  1               LAB_2A91:
004556  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
004558  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
00455A  1  60                   RTS
00455B  1               
00455B  1               ; perform power function
00455B  1               
00455B  1               LAB_POWER:
00455B  1  F0 42                BEQ     LAB_EXP         ; go do  EXP()
00455D  1               
00455D  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
00455F  1  D0 03                BNE     LAB_2ABF        ; branch if FAC2<>0
004561  1               
004561  1  4C 69 3E             JMP     LAB_24F3        ; clear FAC1 exponent and sign and return
004564  1               
004564  1               LAB_2ABF:
004564  1  A2 9C                LDX     #<func_l        ; set destination pointer low byte
004566  1  A0 00                LDY     #>func_l        ; set destination pointer high byte
004568  1  20 5E 41             JSR     LAB_2778        ; pack FAC1 into (XY)
00456B  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
00456D  1  10 0F                BPL     LAB_2AD9        ; branch if FAC2>0
00456F  1               
00456F  1               ; else FAC2 is -ve and can only be raised to an
00456F  1               ; integer power which gives an x +j0 result
00456F  1  20 EC 42             JSR     LAB_INT         ; perform INT
004572  1  A9 9C                LDA     #<func_l        ; set source pointer low byte
004574  1  A0 00                LDY     #>func_l        ; set source pointer high byte
004576  1  20 1E 42             JSR     LAB_27F8        ; compare FAC1 with (AY)
004579  1  D0 03                BNE     LAB_2AD9        ; branch if FAC1 <> (AY) to allow Function Call error
00457B  1               ; this will leave FAC1 -ve and cause a Function Call
00457B  1               ; error when LOG() is called
00457B  1               
00457B  1  98                   TYA                     ; clear sign b7
00457C  1  A4 5B                LDY     <Temp3          ; save mantissa 3 from INT() function as sign in Y
00457E  1               ; for possible later negation, b0
00457E  1               LAB_2AD9:
00457E  1  20 D6 3D             JSR     LAB_279D        ; save FAC1 sign and copy ABS(FAC2) to FAC1
004581  1  98                   TYA                     ; copy sign back ..
004582  1  48                   PHA                     ; .. and save it
004583  1  20 12 3F             JSR     LAB_LOG         ; do LOG(n)
004586  1  A9 9C                LDA     #<garb_l        ; set pointer low byte
004588  1  A0 00                LDY     #>garb_l        ; set pointer high byte
00458A  1  20 50 3F             JSR     LAB_25FB        ; do convert AY, FCA1*(AY) (square the value)
00458D  1  20 9F 45             JSR     LAB_EXP         ; go do EXP(n)
004590  1  68                   PLA                     ; pull sign from stack
004591  1  4A                   LSR     A               ; b0 is to be tested, shift to Cb
004592  1  90 0A                BCC     LAB_2AF9        ; if no bit then exit
004594  1               
004594  1               ; Perform negation
004594  1               ; do - FAC1
004594  1               
004594  1               LAB_GTHAN:
004594  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004596  1  F0 06                BEQ     LAB_2AF9        ; exit if <FAC1_e = $00
004598  1               
004598  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00459A  1  49 FF                EOR     #$FF            ; complement it
00459C  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
00459E  1               LAB_2AF9:
00459E  1  60                   RTS
00459F  1               
00459F  1               ; perform EXP()	(x^e)
00459F  1               
00459F  1               LAB_EXP:
00459F  1  A9 0D                LDA     #<LAB_2AFA      ; set 1.443 pointer low byte
0045A1  1  A0 18                LDY     #>LAB_2AFA      ; set 1.443 pointer high byte
0045A3  1  20 50 3F             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0045A6  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
0045A8  1  69 50                ADC     #$50            ; +$50/$100
0045AA  1  90 03                BCC     LAB_2B2B        ; skip rounding if no carry
0045AC  1               
0045AC  1  20 E8 41             JSR     LAB_27C2        ; round FAC1 (no check)
0045AF  1               LAB_2B2B:
0045AF  1  85 A3                STA     <FAC2_r         ; save FAC2 rounding byte
0045B1  1  20 D4 41             JSR     LAB_27AE        ; copy FAC1 to FAC2
0045B4  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0045B6  1  C9 88                CMP     #$88            ; compare with EXP limit (256d)
0045B8  1  90 03                BCC     LAB_2B39        ; branch if less
0045BA  1               
0045BA  1               LAB_2B36:
0045BA  1  20 35 40             JSR     LAB_2690        ; handle overflow and underflow
0045BD  1               LAB_2B39:
0045BD  1  20 EC 42             JSR     LAB_INT         ; perform INT
0045C0  1  A5 5B                LDA     <Temp3          ; get mantissa 3 from INT() function
0045C2  1  18                   CLC                     ; clear carry for add
0045C3  1  69 81                ADC     #$81            ; normalise +1
0045C5  1  F0 F3                BEQ     LAB_2B36        ; if $00 go handle overflow
0045C7  1               
0045C7  1  38                   SEC                     ; set carry for subtract
0045C8  1  E9 01                SBC     #$01            ; now correct for exponent
0045CA  1  48                   PHA                     ; save FAC2 exponent
0045CB  1               
0045CB  1               ; swap FAC1 and FAC2
0045CB  1  A2 04                LDX     #$04            ; 4 bytes to do
0045CD  1               LAB_2B49:
0045CD  1  B5 B3                LDA     <FAC2_e,X       ; get FAC2,X
0045CF  1  B4 AC                LDY     <FAC1_e,X       ; get FAC1,X
0045D1  1  95 AC                STA     <FAC1_e,X       ; save FAC1,X
0045D3  1  94 B3                STY     <FAC2_e,X       ; save FAC2,X
0045D5  1  CA                   DEX                     ; decrement count/index
0045D6  1  10 F5                BPL     LAB_2B49        ; loop if not all done
0045D8  1               
0045D8  1  A5 A3                LDA     <FAC2_r         ; get FAC2 rounding byte
0045DA  1  85 B9                STA     <FAC1_r         ; save as FAC1 rounding byte
0045DC  1  20 B7 3D             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
0045DF  1  20 94 45             JSR     LAB_GTHAN       ; do - FAC1
0045E2  1  A9 11                LDA     #<LAB_2AFE      ; set counter pointer low byte
0045E4  1  A0 18                LDY     #>LAB_2AFE      ; set counter pointer high byte
0045E6  1  20 07 46             JSR     LAB_2B84        ; go do series evaluation
0045E9  1  A9 00                LDA     #$00            ; clear A
0045EB  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
0045ED  1  68                   PLA                     ;.get saved FAC2 exponent
0045EE  1  4C 1A 40             JMP     LAB_2675        ; test and adjust accumulators and return
0045F1  1               
0045F1  1               ; ^2 then series evaluation
0045F1  1               
0045F1  1               LAB_2B6E:
0045F1  1  85 BA                STA     <Cptrl          ; save count pointer low byte
0045F3  1  84 BB                STY     <Cptrh          ; save count pointer high byte
0045F5  1  20 54 41             JSR     LAB_276E        ; pack FAC1 into <Adatal
0045F8  1  A9 A4                LDA     #<Adatal        ; set pointer low byte (Y already $00)
0045FA  1  20 50 3F             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0045FD  1  20 0B 46             JSR     LAB_2B88        ; go do series evaluation
004600  1  A9 A4                LDA     #<Adatal        ; pointer to original # low byte
004602  1  A0 00                LDY     #>Adatal        ; pointer to original # high byte
004604  1  4C 50 3F             JMP     LAB_25FB        ; do convert AY, FCA1*(AY) and return
004607  1               
004607  1               ; series evaluation
004607  1               
004607  1               LAB_2B84:
004607  1  85 BA                STA     <Cptrl          ; save count pointer low byte
004609  1  84 BB                STY     <Cptrh          ; save count pointer high byte
00460B  1               LAB_2B88:
00460B  1  A2 A8                LDX     #<numexp        ; set pointer low byte
00460D  1  20 56 41             JSR     LAB_2770        ; set pointer high byte and pack FAC1 into <numexp
004610  1  8B DA A2 01          LDAINDIRECTY Cptrl      ; get constants count
004614  1  B5 BA C9 00  
004618  1  D0 04 A2 00  
004626  1  85 B1                STA     <numcon         ; save constants count
004628  1  A4 BA                LDY     <Cptrl          ; get count pointer low byte
00462A  1  C8                   INY                     ; increment it (now constants pointer)
00462B  1  98                   TYA                     ; copy it
00462C  1  D0 02                BNE     LAB_2B97        ; skip next if no overflow
00462E  1               
00462E  1  E6 BB                INC     <Cptrh          ; else increment high byte
004630  1               LAB_2B97:
004630  1  85 BA                STA     <Cptrl          ; save low byte
004632  1  A4 BB                LDY     <Cptrh          ; get high byte
004634  1               LAB_2B9B:
004634  1  20 50 3F             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
004637  1  A5 BA                LDA     <Cptrl          ; get constants pointer low byte
004639  1  A4 BB                LDY     <Cptrh          ; get constants pointer high byte
00463B  1  18                   CLC                     ; clear carry for add
00463C  1  69 04                ADC     #$04            ; +4 to  low pointer (4 bytes per constant)
00463E  1  90 01                BCC     LAB_2BA8        ; skip next if no overflow
004640  1               
004640  1  C8                   INY                     ; increment high byte
004641  1               LAB_2BA8:
004641  1  85 BA                STA     <Cptrl          ; save pointer low byte
004643  1  84 BB                STY     <Cptrh          ; save pointer high byte
004645  1  20 CF 3D             JSR     LAB_246C        ; add (AY) to FAC1
004648  1  A9 A8                LDA     #<numexp        ; set pointer low byte to partial @ <numexp
00464A  1  A0 00                LDY     #>numexp        ; set pointer high byte to partial @ <numexp
00464C  1  C6 B1                DEC     <numcon         ; decrement constants count
00464E  1  D0 E4                BNE     LAB_2B9B        ; loop until all done
004650  1               
004650  1  60                   RTS
004651  1               
004651  1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
004651  1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
004651  1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
004651  1               
004651  1               ; Entropy = 7.997442 bits per byte
004651  1               ; Optimum compression would reduce these 65536 bytes by 0 percent
004651  1               
004651  1               ; Chi square distribution for 65536 samples is 232.01, and
004651  1               ; randomly would exceed this value 75.00 percent of the time
004651  1               
004651  1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
004651  1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
004651  1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
004651  1               
004651  1               LAB_RND:
004651  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004653  1  F0 07                BEQ     NextPRN         ; do next random # if zero
004655  1               
004655  1               ; else get seed into random number store
004655  1  A2 E1                LDX     #<Rbyte4        ; set PRNG pointer low byte
004657  1  A0 00                LDY     #$00            ; set PRNG pointer high byte
004659  1  20 5E 41             JSR     LAB_2778        ; pack FAC1 into (XY)
00465C  1               NextPRN:
00465C  1  A2 AF                LDX     #$AF            ; set EOR byte
00465E  1  A0 13                LDY     #$13            ; do this nineteen times
004660  1               LoopPRN:
004660  1  06 E2                ASL     <Rbyte1         ; shift PRNG most significant byte
004662  1  26 E3                ROL     <Rbyte2         ; shift PRNG middle byte
004664  1  26 E4                ROL     <Rbyte3         ; shift PRNG least significant byte
004666  1  26 E1                ROL     <Rbyte4         ; shift PRNG extra byte
004668  1  90 05                BCC     Ninc1           ; branch if bit 32 clear
00466A  1               
00466A  1  8A                   TXA                     ; set EOR byte
00466B  1  45 E2                EOR     <Rbyte1         ; EOR PRNG extra byte
00466D  1  85 E2                STA     <Rbyte1         ; save new PRNG extra byte
00466F  1               Ninc1:
00466F  1  88                   DEY                     ; decrement loop count
004670  1  D0 EE                BNE     LoopPRN         ; loop if not all done
004672  1               
004672  1  A2 02                LDX     #$02            ; three bytes to copy
004674  1               CopyPRNG:
004674  1  B5 E2                LDA     <Rbyte1,X       ; get PRNG byte
004676  1  95 AD                STA     <FAC1_1,X       ; save FAC1 byte
004678  1  CA                   DEX
004679  1  10 F9                BPL     CopyPRNG        ; loop if not complete
00467B  1               
00467B  1  A9 80                LDA     #$80            ; set the exponent
00467D  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
00467F  1               
00467F  1  0A                   ASL     A               ; clear A
004680  1  85 B0                STA     <FAC1_s         ; save FAC1 sign
004682  1               
004682  1  4C 4B 3E             JMP     LAB_24D5        ; normalise FAC1 and return
004685  1               
004685  1               ; perform COS()
004685  1               
004685  1               LAB_COS:
004685  1  A9 2E                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
004687  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
004689  1  20 CF 3D             JSR     LAB_246C        ; add (AY) to FAC1
00468C  1               
00468C  1               ; perform SIN()
00468C  1               
00468C  1               LAB_SIN:
00468C  1  20 D1 41             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00468F  1  A9 43                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
004691  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
004693  1  A6 B7                LDX     <FAC2_s         ; get FAC2 sign (b7)
004695  1  20 60 40             JSR     LAB_26C2        ; divide by (AY) (X=sign)
004698  1  20 D1 41             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00469B  1  20 EC 42             JSR     LAB_INT         ; perform INT
00469E  1  A9 00                LDA     #$00            ; clear byte
0046A0  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
0046A2  1  20 B7 3D             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
0046A5  1  A9 75                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
0046A7  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
0046A9  1  20 B4 3D             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
0046AC  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0046AE  1  48                   PHA                     ; save FAC1 sign
0046AF  1  10 0D                BPL     LAB_2C35        ; branch if +ve
0046B1  1               
0046B1  1               ; FAC1 sign was -ve
0046B1  1  20 CB 3D             JSR     LAB_244E        ; add 0.5 to FAC1
0046B4  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0046B6  1  30 09                BMI     LAB_2C38        ; branch if -ve
0046B8  1               
0046B8  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
0046BA  1  49 FF                EOR     #$FF            ; toggle flag
0046BC  1  85 63                STA     <Cflag          ; save comparison evaluation flag
0046BE  1               LAB_2C35:
0046BE  1  20 94 45             JSR     LAB_GTHAN       ; do - FAC1
0046C1  1               LAB_2C38:
0046C1  1  A9 75                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
0046C3  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
0046C5  1  20 CF 3D             JSR     LAB_246C        ; add (AY) to FAC1
0046C8  1  68                   PLA                     ; restore FAC1 sign
0046C9  1  10 03                BPL     LAB_2C45        ; branch if was +ve
0046CB  1               
0046CB  1               ; else correct FAC1
0046CB  1  20 94 45             JSR     LAB_GTHAN       ; do - FAC1
0046CE  1               LAB_2C45:
0046CE  1  A9 32                LDA     #<LAB_2C84      ; set pointer low byte to counter
0046D0  1  A0 18                LDY     #>LAB_2C84      ; set pointer high byte to counter
0046D2  1  4C F1 45             JMP     LAB_2B6E        ; ^2 then series evaluation and return
0046D5  1               
0046D5  1               ; perform TAN()
0046D5  1               
0046D5  1               LAB_TAN:
0046D5  1  20 54 41             JSR     LAB_276E        ; pack FAC1 into <Adatal
0046D8  1  A9 00                LDA     #$00            ; clear byte
0046DA  1  85 63                STA     <Cflag          ; clear comparison evaluation flag
0046DC  1  20 8C 46             JSR     LAB_SIN         ; go do SIN(n)
0046DF  1  A2 9C                LDX     #<func_l        ; set sin(n) pointer low byte
0046E1  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
0046E3  1  20 5E 41             JSR     LAB_2778        ; pack FAC1 into (XY)
0046E6  1  A9 A4                LDA     #<Adatal        ; set n pointer low addr
0046E8  1  A0 00                LDY     #>Adatal        ; set n pointer high addr
0046EA  1  20 E4 40             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0046ED  1  A9 00                LDA     #$00            ; clear byte
0046EF  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
0046F1  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
0046F3  1  20 FD 46             JSR     LAB_2C74        ; save flag and go do series evaluation
0046F6  1               
0046F6  1  A9 9C                LDA     #<func_l        ; set sin(n) pointer low byte
0046F8  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
0046FA  1  4C 68 40             JMP     LAB_26CA        ; convert AY and do (AY)/FAC1
0046FD  1               
0046FD  1               LAB_2C74:
0046FD  1  48                   PHA                     ; save comparison evaluation flag
0046FE  1  4C BE 46             JMP     LAB_2C35        ; go do series evaluation
004701  1               
004701  1               ; perform USR()
004701  1               
004701  1               LAB_USR:
004701  1  20 0A 00             JSR     Usrjmp          ; call user code
004704  1  4C 7B 30             JMP     LAB_1BFB        ; scan for ")", else do syntax error then warm start
004707  1               
004707  1               ; perform ATN()
004707  1               
004707  1               LAB_ATN:
004707  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004709  1  48                   PHA                     ; save sign
00470A  1  10 03                BPL     LAB_2CA1        ; branch if +ve
00470C  1               
00470C  1  20 94 45             JSR     LAB_GTHAN       ; else do - FAC1
00470F  1               LAB_2CA1:
00470F  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004711  1  48                   PHA                     ; push exponent
004712  1  C9 81                CMP     #$81            ; compare with 1
004714  1  90 07                BCC     LAB_2CAF        ; branch if FAC1<1
004716  1               
004716  1  A9 68                LDA     #<LAB_259C      ; set 1 pointer low byte
004718  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
00471A  1  20 68 40             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1
00471D  1               LAB_2CAF:
00471D  1  A9 47                LDA     #<LAB_2CC9      ; set pointer low byte to counter
00471F  1  A0 18                LDY     #>LAB_2CC9      ; set pointer high byte to counter
004721  1  20 F1 45             JSR     LAB_2B6E        ; ^2 then series evaluation
004724  1  68                   PLA                     ; restore old FAC1 exponent
004725  1  C9 81                CMP     #$81            ; compare with 1
004727  1  90 07                BCC     LAB_2CC2        ; branch if FAC1<1
004729  1               
004729  1  A9 2E                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
00472B  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
00472D  1  20 B4 3D             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
004730  1               LAB_2CC2:
004730  1  68                   PLA                     ; restore FAC1 sign
004731  1  10 16                BPL     LAB_2D04        ; exit if was +ve
004733  1               
004733  1  4C 94 45             JMP     LAB_GTHAN       ; else do - FAC1 and return
004736  1               
004736  1               ; perform BITSET
004736  1               
004736  1               LAB_BITSET:
004736  1  20 91 3C             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004739  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
00473B  1  B0 20                BCS     FCError         ; branch if > 7
00473D  1               
00473D  1  A9 00                LDA     #$00            ; clear A
00473F  1  38                   SEC                     ; set the carry
004740  1               S_Bits:
004740  1  2A                   ROL     A               ; shift bit
004741  1  CA                   DEX                     ; decrement bit number
004742  1  10 FC                BPL     S_Bits          ; loop if still +ve
004744  1               
004744  1  E8                   INX                     ; make X = $00
004745  1  01 11                ORA     (<Itempl,X)     ; or with byte via temporary integer (addr)
004747  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
004749  1               LAB_2D04:
004749  1  60                   RTS
00474A  1               
00474A  1               ; perform BITCLR
00474A  1               
00474A  1               LAB_BITCLR:
00474A  1  20 91 3C             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
00474D  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
00474F  1  B0 0C                BCS     FCError         ; branch if > 7
004751  1               
004751  1  A9 FF                LDA     #$FF            ; set A
004753  1               S_Bitc:
004753  1  2A                   ROL     A               ; shift bit
004754  1  CA                   DEX                     ; decrement bit number
004755  1  10 FC                BPL     S_Bitc          ; loop if still +ve
004757  1               
004757  1  E8                   INX                     ; make X = $00
004758  1  21 11                AND     (<Itempl,X)     ; and with byte via temporary integer (addr)
00475A  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
00475C  1  60                   RTS
00475D  1               
00475D  1               FCError:
00475D  1  4C EF 33             JMP     LAB_FCER        ; do function call error then warm start
004760  1               
004760  1               ; perform BITTST()
004760  1               
004760  1               LAB_BTST:
004760  1  22 BC 00 00          JSL     LAB_IGBY        ; increment BASIC pointer
004764  1  20 91 3C             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004767  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
004769  1  B0 F2                BCS     FCError         ; branch if > 7
00476B  1               
00476B  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
00476F  1  C9 29                CMP     #')'            ; is next character ")"
004771  1  F0 03                BEQ     TST_OK          ; if ")" go do rest of function
004773  1               
004773  1  4C 90 30             JMP     LAB_SNER        ; do syntax error then warm start
004776  1               
004776  1               TST_OK:
004776  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
00477A  1  A9 00                LDA     #$00            ; clear A
00477C  1  38                   SEC                     ; set the carry
00477D  1               T_Bits:
00477D  1  2A                   ROL     A               ; shift bit
00477E  1  CA                   DEX                     ; decrement bit number
00477F  1  10 FC                BPL     T_Bits          ; loop if still +ve
004781  1               
004781  1  E8                   INX                     ; make X = $00
004782  1  21 11                AND     (<Itempl,X)     ; AND with byte via temporary integer (addr)
004784  1  F0 02                BEQ     LAB_NOTT        ; branch if zero (already correct)
004786  1               
004786  1  A9 FF                LDA     #$FF            ; set for -1 result
004788  1               LAB_NOTT:
004788  1  4C 01 42             JMP     LAB_27DB        ; go do SGN tail
00478B  1               
00478B  1               ; perform BIN$()
00478B  1               
00478B  1               LAB_BINS:
00478B  1  E0 19                CPX     #$19            ; max + 1
00478D  1  B0 71                BCS     BinFErr         ; exit if too big ( > or = )
00478F  1               
00478F  1  86 78                STX     <TempB          ; save # of characters ($00 = leading zero remove)
004791  1  A9 18                LDA     #$18            ; need A byte long space
004793  1  20 96 36             JSR     LAB_MSSP        ; make string space A bytes long
004796  1  A0 17                LDY     #$17            ; set index
004798  1  A2 18                LDX     #$18            ; character count
00479A  1               NextB1:
00479A  1  46 11                LSR     <nums_1         ; shift highest byte
00479C  1  66 12                ROR     <nums_2         ; shift middle byte
00479E  1  66 13                ROR     <nums_3         ; shift lowest byte bit 0 to carry
0047A0  1  8A                   TXA                     ; load with "0"/2
0047A1  1  2A                   ROL     A               ; shift in carry
0047A2  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string + index
0047A6  1  01 B5 AD C9  
0047AA  1  00 D0 04 A2  
0047B8  1  88                   DEY                     ; decrement index
0047B9  1  10 DF                BPL     NextB1          ; loop if not done
0047BB  1               
0047BB  1  A5 78                LDA     <TempB          ; get # of characters
0047BD  1  F0 0A                BEQ     EndBHS          ; branch if truncate
0047BF  1               
0047BF  1  AA                   TAX                     ; copy length to X
0047C0  1  38                   SEC                     ; set carry for add !
0047C1  1  49 FF                EOR     #$FF            ; 1's complement
0047C3  1  69 18                ADC     #$18            ; add 24d
0047C5  1  F0 30                BEQ     GoPr2           ; if zero print whole string
0047C7  1               
0047C7  1  D0 23                BNE     GoPr1           ; else go make output string
0047C9  1               
0047C9  1               ; this is the exit code and is also used by HEX$()
0047C9  1               ; truncate string to remove leading "0"s
0047C9  1               
0047C9  1               EndBHS:
0047C9  1  A8                   TAY                     ; clear index (A=0, X=length here)
0047CA  1               NextB2:
0047CA  1  8B DA A2 01          LDAINDIRECTY str_pl     ; get character from string
0047CE  1  B5 AD C9 00  
0047D2  1  D0 04 A2 00  
0047E0  1  C9 30                CMP     #'0'            ; compare with "0"
0047E2  1  D0 07                BNE     GoPr            ; if not "0" then go print string from here
0047E4  1               
0047E4  1  CA                   DEX                     ; decrement character count
0047E5  1  F0 03                BEQ     GoPr3           ; if zero then end of string so go print it
0047E7  1               
0047E7  1  C8                   INY                     ; else increment index
0047E8  1  10 E0                BPL     NextB2          ; loop always
0047EA  1               
0047EA  1               ; make fixed length output string - ignore overflows!
0047EA  1               
0047EA  1               GoPr3:
0047EA  1  E8                   INX                     ; need at least 1 character
0047EB  1               GoPr:
0047EB  1  98                   TYA                     ; copy result
0047EC  1               GoPr1:
0047EC  1  18                   CLC                     ; clear carry for add
0047ED  1  65 AD                ADC     <str_pl         ; add low address
0047EF  1  85 AD                STA     <str_pl         ; save low address
0047F1  1  A9 00                LDA     #$00            ; do high byte
0047F3  1  65 AE                ADC     <str_ph         ; add high address
0047F5  1  85 AE                STA     <str_ph         ; save high address
0047F7  1               GoPr2:
0047F7  1  86 AC                STX     <str_ln         ; X holds string length
0047F9  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
0047FD  1  4C F9 36             JMP     LAB_RTST        ; check for space on descriptor stack then put address
004800  1               ; and length on descriptor stack and update stack pointers
004800  1               
004800  1               BinFErr:
004800  1  4C EF 33             JMP     LAB_FCER        ; do function call error then warm start
004803  1               
004803  1               ; perform HEX$()
004803  1               
004803  1               LAB_HEXS:
004803  1  E0 07                CPX     #$07            ; max + 1
004805  1  B0 F9                BCS     BinFErr         ; exit if too big ( > or = )
004807  1               
004807  1  86 78                STX     <TempB          ; save # of characters
004809  1               
004809  1  A9 06                LDA     #$06            ; need 6 bytes for string
00480B  1  20 96 36             JSR     LAB_MSSP        ; make string space A bytes long
00480E  1  A0 05                LDY     #$05            ; set string index
004810  1               
004810  1  F8                   SED                     ; need decimal mode for nibble convert
004811  1  A5 13                LDA     <nums_3         ; get lowest byte
004813  1  20 31 48             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004816  1  A5 12                LDA     <nums_2         ; get middle byte
004818  1  20 31 48             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
00481B  1  A5 11                LDA     <nums_1         ; get highest byte
00481D  1  20 31 48             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004820  1  D8                   CLD                     ; back to binary
004821  1               
004821  1  A2 06                LDX     #$06            ; character count
004823  1  A5 78                LDA     <TempB          ; get # of characters
004825  1  F0 A2                BEQ     EndBHS          ; branch if truncate
004827  1               
004827  1  AA                   TAX                     ; copy length to X
004828  1  38                   SEC                     ; set carry for add !
004829  1  49 FF                EOR     #$FF            ; 1's complement
00482B  1  69 06                ADC     #$06            ; add 6d
00482D  1  F0 C8                BEQ     GoPr2           ; if zero print whole string
00482F  1               
00482F  1  D0 BB                BNE     GoPr1           ; else go make output string (branch always)
004831  1               
004831  1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
004831  1               
004831  1               LAB_A2HX:
004831  1  AA                   TAX                     ; save byte
004832  1  29 0F                AND     #$0F            ; mask off top bits
004834  1  20 3C 48             JSR     LAB_AL2X        ; convert low nibble to ASCII and output
004837  1  8A                   TXA                     ; get byte back
004838  1  4A                   LSR     A               ; /2	shift high nibble to low nibble
004839  1  4A                   LSR     A               ; /4
00483A  1  4A                   LSR     A               ; /8
00483B  1  4A                   LSR     A               ; /16
00483C  1               LAB_AL2X:
00483C  1  C9 0A                CMP     #$0A            ; set carry for +1 if >9
00483E  1  69 30                ADC     #'0'            ; add ASCII "0"
004840  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string
004844  1  01 B5 AD C9  
004848  1  00 D0 04 A2  
004856  1  88                   DEY                     ; decrement counter
004857  1  60                   RTS
004858  1               
004858  1               LAB_NLTO:
004858  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
00485A  1  A9 00                LDA     #$00            ; clear sign compare
00485C  1               LAB_MLTE:
00485C  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00485E  1  8A                   TXA                     ; restore character
00485F  1  20 B7 43             JSR     LAB_2912        ; evaluate new ASCII digit
004862  1               
004862  1               ; gets here if the first character was "$" for hex
004862  1               ; get hex number
004862  1               
004862  1               LAB_CHEX:
004862  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004866  1  90 0A                BCC     LAB_ISHN        ; branch if numeric character
004868  1               
004868  1  09 20                ORA     #$20            ; case convert, allow "A" to "F" and "a" to "f"
00486A  1  E9 61                SBC     #'a'            ; subtract "a" (carry set here)
00486C  1  C9 06                CMP     #$06            ; compare normalised with $06 (max+1)
00486E  1  B0 2B                BCS     LAB_EXCH        ; exit if >"f" or <"0"
004870  1               
004870  1  69 0A                ADC     #$0A            ; convert to nibble
004872  1               LAB_ISHN:
004872  1  29 0F                AND     #$0F            ; convert to binary
004874  1  AA                   TAX                     ; save nibble
004875  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004877  1  F0 E3                BEQ     LAB_MLTE        ; skip multiply if zero
004879  1               
004879  1  69 04                ADC     #$04            ; add four to exponent (*16 - carry clear here)
00487B  1  90 DB                BCC     LAB_NLTO        ; if no overflow do evaluate digit
00487D  1               
00487D  1               LAB_MLTO:
00487D  1  4C DA 3E             JMP     LAB_2564        ; do overflow error and warm start
004880  1               
004880  1               LAB_NXCH:
004880  1  AA                   TAX                     ; save bit
004881  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004883  1  F0 06                BEQ     LAB_MLBT        ; skip multiply if zero
004885  1               
004885  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*2)
004887  1  F0 F4                BEQ     LAB_MLTO        ; do overflow error if = $00
004889  1               
004889  1  A9 00                LDA     #$00            ; clear sign compare
00488B  1               LAB_MLBT:
00488B  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00488D  1  8A                   TXA                     ; restore bit
00488E  1  20 B7 43             JSR     LAB_2912        ; evaluate new ASCII digit
004891  1               
004891  1               ; gets here if the first character was  "%" for binary
004891  1               ; get binary number
004891  1               
004891  1               LAB_CBIN:
004891  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004895  1  49 30                EOR     #'0'            ; convert "0" to 0 etc.
004897  1  C9 02                CMP     #$02            ; compare with max+1
004899  1  90 E5                BCC     LAB_NXCH        ; branch exit if < 2
00489B  1               
00489B  1               LAB_EXCH:
00489B  1  4C 9C 43             JMP     LAB_28F6        ; evaluate -ve flag and return
00489E  1               
00489E  1               ; ctrl-c check routine. .includes limited "life" byte save for INGET routine
00489E  1               ; now also the code that checks to see if an interrupt has occurred
00489E  1               
00489E  1               CTRLC:
00489E  1  AF 00 02 00          LDA     f:ccflag        ; get [CTRL-C] check flag
0048A2  1  D0 21                BNE     LAB_FBA2        ; exit if inhibited
0048A4  1               
0048A4  1  20 8F 18             JSR     V_INPT          ; scan input device
0048A7  1  B0 11                BCS     LAB_FBA0        ; exit if buffer empty
0048A9  1               
0048A9  1  8F 01 02 00          STA     f:ccbyte        ; save received byte
0048AD  1  A9 20                LDA     #$20            ; "life" timer for bytes
0048AF  1  8F 02 02 00          STA     f:ccnull        ; set countdown
0048B3  1  AF 01 02 00          LDA     f:ccbyte
0048B7  1  4C 47 28             JMP     LAB_1636        ; return to BASIC
0048BA  1               
0048BA  1               LAB_FBA0:
0048BA  1  AF 02 02 00          LDA     f:ccnull        ; get countdown byte
0048BE  1  F0 05                BEQ     LAB_FBA2        ; exit if finished
0048C0  1  3A                   DEC     A
0048C1  1  8F 02 02 00          STA     f:ccnull        ; else decrement countdown
0048C5  1               LAB_FBA2:
0048C5  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
0048C7  1  20 D4 48             JSR     LAB_CKIN        ; go check interrupt
0048CA  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
0048CC  1  20 D4 48             JSR     LAB_CKIN        ; go check interrupt
0048CF  1  AF 01 02 00          LDA     f:ccbyte
0048D3  1               LAB_CRTS:
0048D3  1  60                   RTS
0048D4  1               
0048D4  1               ; check whichever interrupt is indexed by X
0048D4  1               
0048D4  1               LAB_CKIN:
0048D4  1  B5 00                LDA     <PLUS_0,X       ; get interrupt flag byte
0048D6  1  10 FB                BPL     LAB_CRTS        ; branch if interrupt not enabled
0048D8  1               
0048D8  1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
0048D8  1               ; automatically enable the interrupt when we exit
0048D8  1               
0048D8  1  0A                   ASL     A               ; move happened bit to setup bit
0048D9  1  29 40                AND     #$40            ; mask happened bits
0048DB  1  F0 F6                BEQ     LAB_CRTS        ; if no interrupt then exit
0048DD  1               
0048DD  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
0048DF  1               
0048DF  1  8A                   TXA                     ; copy index ..
0048E0  1  A8                   TAY                     ; .. to Y
0048E1  1               
0048E1  1  68                   PLA                     ; dump return address low byte, call from CTRL-C
0048E2  1  68                   PLA                     ; dump return address high byte
0048E3  1               
0048E3  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
0048E5  1  20 03 24             JSR     LAB_1212        ; check room on stack for A bytes
0048E8  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0048EA  1  48                   PHA                     ; push on stack
0048EB  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0048ED  1  48                   PHA                     ; push on stack
0048EE  1  A5 88                LDA     <Clineh         ; get current line high byte
0048F0  1  48                   PHA                     ; push on stack
0048F1  1  A5 87                LDA     <Clinel         ; get current line low byte
0048F3  1  48                   PHA                     ; push on stack
0048F4  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
0048F6  1  48                   PHA                     ; push on stack
0048F7  1  DA                   PHX
0048F8  1  BB                   TYX
0048F9  1  B5 01                LDA     <PLUS_1,X       ; get interrupt code pointer low byte
0048FB  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
0048FD  1  B5 02                LDA     <PLUS_2,X       ; get interrupt code pointer high byte
0048FF  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
004901  1  FA                   PLX
004902  1  4C E9 27             JMP     LAB_15C2        ; go do interpreter inner loop
004905  1               ; can't RTS, we used the stack! the RTS from the ctrl-c
004905  1               ; check will be taken when the RETIRQ/RETNMI/RETURN is
004905  1               ; executed at the end of the subroutine
004905  1               
004905  1               ; get byte from input device, no waiting
004905  1               ; returns with carry set if byte in A
004905  1               
004905  1               INGET:
004905  1  20 8F 18             JSR     V_INPT          ; call scan input device
004908  1  90 0B                BCC     LAB_FB95        ; if byte go reset timer
00490A  1               
00490A  1  AF 02 02 00          LDA     f:ccnull        ; get countdown
00490E  1  F0 0F                BEQ     LAB_FB96        ; exit if empty
004910  1               
004910  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004914  1  38                   SEC                     ; flag we got a byte
004915  1               LAB_FB95:
004915  1  A9 00                LDA     #$00            ; clear X
004917  1  8F 02 02 00          STA     f:ccnull        ; clear timer because we got a byte
00491B  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
00491F  1               LAB_FB96:
00491F  1  60                   RTS
004920  1               
004920  1               ; these routines only enable the interrupts if the set-up flag is set
004920  1               ; if not they have no effect
004920  1               
004920  1               ; perform IRQ {ON|OFF|CLEAR}
004920  1               
004920  1               LAB_IRQ:
004920  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004922  1  2C                   .BYTE   $2C             ; make next line BIT abs.
004923  1               
004923  1               ; perform NMI {ON|OFF|CLEAR}
004923  1               
004923  1               LAB_NMI:
004923  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004925  1  C9 93                CMP     #TK_ON          ; compare with token for ON
004927  1  F0 11                BEQ     LAB_INON        ; go turn on interrupt
004929  1               
004929  1  C9 C7                CMP     #TK_OFF         ; compare with token for OFF
00492B  1  F0 07                BEQ     LAB_IOFF        ; go turn off interrupt
00492D  1               
00492D  1  49 A1                EOR     #TK_CLEAR       ; compare with token for CLEAR, A = $00 if = TK_CLEAR
00492F  1  F0 0E                BEQ     LAB_INEX        ; go clear interrupt flags and return
004931  1               
004931  1  4C 90 30             JMP     LAB_SNER        ; do syntax error then warm start
004934  1               
004934  1               LAB_IOFF:
004934  1  A9 7F                LDA     #$7F            ; clear A
004936  1  35 00                AND     <PLUS_0,X       ; AND with interrupt setup flag
004938  1  10 05                BPL     LAB_INEX        ; go clear interrupt enabled flag and return
00493A  1               
00493A  1               LAB_INON:
00493A  1  B5 00                LDA     <PLUS_0,X       ; get interrupt setup flag
00493C  1  0A                   ASL     A               ; Shift bit to enabled flag
00493D  1  15 00                ORA     <PLUS_0,X       ; OR with flag byte
00493F  1               LAB_INEX:
00493F  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004941  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer and return
004945  1  60                   RTS
004946  1               ; these routines set up the pointers and flags for the interrupt routines
004946  1               ; note that the interrupts are also enabled by these commands
004946  1               
004946  1               
004946  1               ; MAX() MIN() pre process
004946  1               
004946  1               LAB_MMPP:
004946  1  20 72 2F             JSR     LAB_EVEZ        ; process expression
004949  1  4C 59 2F             JMP     LAB_CTNM        ; check if source is numeric, else do type mismatch
00494C  1               
00494C  1               ; perform MAX()
00494C  1               
00494C  1               LAB_MAX:
00494C  1  20 7C 49             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
00494F  1               ; pull FAC2 and compare with FAC1
00494F  1  10 FB                BPL     LAB_MAX         ; branch if no swap to do
004951  1               
004951  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004953  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004955  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004957  1  20 D4 3D             JSR     LAB_279B        ; copy FAC2 to FAC1
00495A  1  F0 F0                BEQ     LAB_MAX         ; go do next (branch always)
00495C  1               
00495C  1               ; perform MIN()
00495C  1               
00495C  1               LAB_MIN:
00495C  1  20 7C 49             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
00495F  1               ; pull FAC2 and compare with FAC1
00495F  1  30 FB                BMI     LAB_MIN         ; branch if no swap to do
004961  1               
004961  1  F0 F9                BEQ     LAB_MIN         ; branch if no swap to do
004963  1               
004963  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004965  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004967  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004969  1  20 D4 3D             JSR     LAB_279B        ; copy FAC2 to FAC1
00496C  1  F0 EE                BEQ     LAB_MIN         ; go do next (branch always)
00496E  1               
00496E  1               ; exit routine. don't bother returning to the loop code
00496E  1               ; check for correct exit, else so syntax error
00496E  1               
00496E  1               LAB_MMEC:
00496E  1  C9 29                CMP     #')'            ; is it end of function?
004970  1  D0 07                BNE     LAB_MMSE        ; if not do MAX MIN syntax error
004972  1               
004972  1  68                   PLA                     ; dump return address low byte
004973  1  68                   PLA                     ; dump return address high byte
004974  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to chr past ")")
004978  1  60                   RTS
004979  1               LAB_MMSE:
004979  1  4C 90 30             JMP     LAB_SNER        ; do syntax error then warm start
00497C  1               
00497C  1               ; check for next, evaluate and return or exit
00497C  1               ; this is the routine that does most of the work
00497C  1               
00497C  1               LAB_PHFA:
00497C  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
004980  1  C9 2C                CMP     #','            ; is there more ?
004982  1  D0 EA                BNE     LAB_MMEC        ; if not go do end check
004984  1               
004984  1               ; push FAC1
004984  1  20 E0 41             JSR     LAB_27BA        ; round FAC1
004987  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004989  1  09 7F                ORA     #$7F            ; set all non sign bits
00498B  1  25 AD                AND     <FAC1_1         ; AND FAC1 mantissa1 (AND in sign bit)
00498D  1  48                   PHA                     ; push on stack
00498E  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004990  1  48                   PHA                     ; push on stack
004991  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004993  1  48                   PHA                     ; push on stack
004994  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004996  1  48                   PHA                     ; push on stack
004997  1               
004997  1  22 BC 00 00          JSL     LAB_IGBY        ; scan and get next BASIC byte (after ",")
00499B  1  20 56 2F             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00499E  1               ; else do type mismatch
00499E  1               
00499E  1               ; pop FAC2 (MAX/MIN expression so far)
00499E  1  68                   PLA                     ; pop exponent
00499F  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
0049A1  1  68                   PLA                     ; pop mantissa3
0049A2  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
0049A4  1  68                   PLA                     ; pop mantissa1
0049A5  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
0049A7  1  68                   PLA                     ; pop sign/mantissa1
0049A8  1  85 B4                STA     <FAC2_1         ; save FAC2 sign/mantissa1
0049AA  1  85 B7                STA     <FAC2_s         ; save FAC2 sign
0049AC  1               
0049AC  1               ; compare FAC1 with (packed) FAC2
0049AC  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
0049AE  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
0049B0  1  4C 1E 42             JMP     LAB_27F8        ; compare FAC1 with FAC2 (AY) and return
0049B3  1               ; returns A=$00 if FAC1 = (AY)
0049B3  1               ; returns A=$01 if FAC1 > (AY)
0049B3  1               ; returns A=$FF if FAC1 < (AY)
0049B3  1               
0049B3  1               ; perform WIDTH
0049B3  1               
0049B3  1               LAB_WDTH:
0049B3  1  C9 2C                CMP     #','            ; is next byte ","
0049B5  1  F0 1C                BEQ     LAB_TBSZ        ; if so do tab size
0049B7  1               
0049B7  1  20 06 3C             JSR     LAB_GTBY        ; get byte parameter
0049BA  1  8A                   TXA                     ; copy width to A
0049BB  1  F0 0A                BEQ     LAB_NSTT        ; branch if set for infinite line
0049BD  1               
0049BD  1  E0 10                CPX     #$10            ; else make min width = 16d
0049BF  1  90 46                BCC     TabErr          ; if less do function call error and exit
0049C1  1               
0049C1  1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
0049C1  1               ; tab size greater than the line length.
0049C1  1               
0049C1  1  E4 64                CPX     <TabSiz         ; compare with tab size
0049C3  1  B0 02                BCS     LAB_NSTT        ; branch if >= tab size
0049C5  1               
0049C5  1  86 64                STX     <TabSiz         ; else make tab size = terminal width
0049C7  1               LAB_NSTT:
0049C7  1  86 0F                STX     <TWidth         ; set the terminal width
0049C9  1  22 C2 00 00          JSL     LAB_GBYT        ; get BASIC byte back
0049CD  1  F0 1A                BEQ     WExit           ; exit if no following
0049CF  1               
0049CF  1  C9 2C                CMP     #','            ; else is it ","
0049D1  1  D0 A6                BNE     LAB_MMSE        ; if not do syntax error
0049D3  1               
0049D3  1               LAB_TBSZ:
0049D3  1  20 02 3C             JSR     LAB_SGBY        ; scan and get byte parameter
0049D6  1  8A                   TXA                     ; copy TAB size
0049D7  1  30 2E                BMI     TabErr          ; if >127 do function call error and exit
0049D9  1               
0049D9  1  E0 01                CPX     #$01            ; compare with min-1
0049DB  1  90 2A                BCC     TabErr          ; if <=1 do function call error and exit
0049DD  1               
0049DD  1  A5 0F                LDA     <TWidth         ; set flags for width
0049DF  1  F0 06                BEQ     LAB_SVTB        ; skip check if infinite line
0049E1  1               
0049E1  1  E4 0F                CPX     <TWidth         ; compare TAB with width
0049E3  1  F0 02                BEQ     LAB_SVTB        ; ok if =
0049E5  1               
0049E5  1  B0 20                BCS     TabErr          ; branch if too big
0049E7  1               
0049E7  1               LAB_SVTB:
0049E7  1  86 64                STX     <TabSiz         ; save TAB size
0049E9  1               
0049E9  1               ; calculate tab column limit from TAB size. The <Iclim is set to the last tab
0049E9  1               ; position on a line that still has at least one whole tab width between it
0049E9  1               ; and the end of the line.
0049E9  1               
0049E9  1               WExit:
0049E9  1  A5 0F                LDA     <TWidth         ; get width
0049EB  1  F0 06                BEQ     LAB_SULP        ; branch if infinite line
0049ED  1               
0049ED  1  C5 64                CMP     <TabSiz         ; compare with tab size
0049EF  1  B0 03                BCS     LAB_WDLP        ; branch if >= tab size
0049F1  1               
0049F1  1  85 64                STA     <TabSiz         ; else make tab size = terminal width
0049F3  1               LAB_SULP:
0049F3  1  38                   SEC                     ; set carry for subtract
0049F4  1               LAB_WDLP:
0049F4  1  E5 64                SBC     <TabSiz         ; subtract tab size
0049F6  1  B0 FC                BCS     LAB_WDLP        ; loop while no borrow
0049F8  1               
0049F8  1  65 64                ADC     <TabSiz         ; add tab size back
0049FA  1  18                   CLC                     ; clear carry for add
0049FB  1  65 64                ADC     <TabSiz         ; add tab size back again
0049FD  1  85 10                STA     <Iclim          ; save for now
0049FF  1  A5 0F                LDA     <TWidth         ; get width back
004A01  1  38                   SEC                     ; set carry for subtract
004A02  1  E5 10                SBC     <Iclim          ; subtract remainder
004A04  1  85 10                STA     <Iclim          ; save tab column limit
004A06  1               LAB_NOSQ:
004A06  1  60                   RTS
004A07  1               
004A07  1               TabErr:
004A07  1  4C EF 33             JMP     LAB_FCER        ; do function call error then warm start
004A0A  1               
004A0A  1               ; perform SQR()
004A0A  1               
004A0A  1               LAB_SQR:
004A0A  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004A0C  1  30 F9                BMI     TabErr          ; if -ve do function call error
004A0E  1               
004A0E  1  A5 AC                LDA     <FAC1_e         ; get exponent
004A10  1  F0 F4                BEQ     LAB_NOSQ        ; if zero just return
004A12  1               
004A12  1               ; else do root
004A12  1  20 D1 41             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004A15  1  A9 00                LDA     #$00            ; clear A
004A17  1               
004A17  1  85 77                STA     <FACt_3         ; clear remainder
004A19  1  85 76                STA     <FACt_2         ; ..
004A1B  1  85 75                STA     <FACt_1         ; ..
004A1D  1  85 78                STA     <TempB          ; ..
004A1F  1               
004A1F  1  85 AF                STA     <FAC1_3         ; clear root
004A21  1  85 AE                STA     <FAC1_2         ; ..
004A23  1  85 AD                STA     <FAC1_1         ; ..
004A25  1               
004A25  1  A2 18                LDX     #$18            ; 24 pairs of bits to do
004A27  1  A5 B3                LDA     <FAC2_e         ; get exponent
004A29  1  4A                   LSR     A               ; check odd/even
004A2A  1  B0 0E                BCS     LAB_SQE2        ; if odd only 1 shift first time
004A2C  1               
004A2C  1               LAB_SQE1:
004A2C  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004A2E  1  26 B5                ROL     <FAC2_2         ; ..
004A30  1  26 B4                ROL     <FAC2_1         ; ..
004A32  1  26 77                ROL     <FACt_3         ; .. into remainder
004A34  1  26 76                ROL     <FACt_2         ; ..
004A36  1  26 75                ROL     <FACt_1         ; ..
004A38  1  26 78                ROL     <TempB          ; .. never overflows
004A3A  1               LAB_SQE2:
004A3A  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004A3C  1  26 B5                ROL     <FAC2_2         ; ..
004A3E  1  26 B4                ROL     <FAC2_1         ; ..
004A40  1  26 77                ROL     <FACt_3         ; .. into remainder
004A42  1  26 76                ROL     <FACt_2         ; ..
004A44  1  26 75                ROL     <FACt_1         ; ..
004A46  1  26 78                ROL     <TempB          ; .. never overflows
004A48  1               
004A48  1  06 AF                ASL     <FAC1_3         ; root = root * 2
004A4A  1  26 AE                ROL     <FAC1_2         ; ..
004A4C  1  26 AD                ROL     <FAC1_1         ; .. never overflows
004A4E  1               
004A4E  1  A5 AF                LDA     <FAC1_3         ; get root low byte
004A50  1  2A                   ROL     A               ; *2
004A51  1  85 5B                STA     <Temp3          ; save partial low byte
004A53  1  A5 AE                LDA     <FAC1_2         ; get root low mid byte
004A55  1  2A                   ROL     A               ; *2
004A56  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004A58  1  A5 AD                LDA     <FAC1_1         ; get root high mid byte
004A5A  1  2A                   ROL     A               ; *2
004A5B  1  85 5D                STA     <Temp3+2        ; save partial high mid byte
004A5D  1  A9 00                LDA     #$00            ; get root high byte (always $00)
004A5F  1  2A                   ROL     A               ; *2
004A60  1  85 5E                STA     <Temp3+3        ; save partial high byte
004A62  1               
004A62  1               ; carry clear for subtract +1
004A62  1  A5 77                LDA     <FACt_3         ; get remainder low byte
004A64  1  E5 5B                SBC     <Temp3          ; subtract partial low byte
004A66  1  85 5B                STA     <Temp3          ; save partial low byte
004A68  1               
004A68  1  A5 76                LDA     <FACt_2         ; get remainder low mid byte
004A6A  1  E5 5C                SBC     <Temp3+1        ; subtract partial low mid byte
004A6C  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004A6E  1               
004A6E  1  A5 75                LDA     <FACt_1         ; get remainder high mid byte
004A70  1  E5 5D                SBC     <Temp3+2        ; subtract partial high mid byte
004A72  1  A8                   TAY                     ; copy partial high mid byte
004A73  1               
004A73  1  A5 78                LDA     <TempB          ; get remainder high byte
004A75  1  E5 5E                SBC     <Temp3+3        ; subtract partial high byte
004A77  1  90 0E                BCC     LAB_SQNS        ; skip sub if remainder smaller
004A79  1               
004A79  1  85 78                STA     <TempB          ; save remainder high byte
004A7B  1               
004A7B  1  84 75                STY     <FACt_1         ; save remainder high mid byte
004A7D  1               
004A7D  1  A5 5C                LDA     <Temp3+1        ; get remainder low mid byte
004A7F  1  85 76                STA     <FACt_2         ; save remainder low mid byte
004A81  1               
004A81  1  A5 5B                LDA     <Temp3          ; get partial low byte
004A83  1  85 77                STA     <FACt_3         ; save remainder low byte
004A85  1               
004A85  1  E6 AF                INC     <FAC1_3         ; increment root low byte (never any rollover)
004A87  1               LAB_SQNS:
004A87  1  CA                   DEX                     ; decrement bit pair count
004A88  1  D0 A2                BNE     LAB_SQE1        ; loop if not all done
004A8A  1               LAB_SQNSA:
004A8A  1  38                   SEC                     ; set carry for subtract
004A8B  1  A5 B3                LDA     <FAC2_e         ; get exponent
004A8D  1  E9 80                SBC     #$80            ; normalise
004A8F  1  6A                   ROR     A               ; /2 and re-bias to $80
004A90  1  69 00                ADC     #$00            ; add bit zero back in (allow for half shift)
004A92  1  85 AC                STA     <FAC1_e         ; save it
004A94  1  4C 4B 3E             JMP     LAB_24D5        ; normalise FAC1 and return
004A97  1               
004A97  1               ; perform VARPTR()
004A97  1               
004A97  1               LAB_VARPTR:
004A97  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004A9B  1  20 67 32             JSR     LAB_GVAR        ; get var address
004A9E  1  20 7B 30             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
004AA1  1  A4 95                LDY     <Cvaral         ; get var address low byte
004AA3  1  A5 96                LDA     <Cvarah         ; get var address high byte
004AA5  1  4C 25 35             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
004AA8  1               
004AA8  1               ; perform PI
004AA8  1               
004AA8  1               LAB_PI:
004AA8  1  A9 43                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
004AAA  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
004AAC  1  20 E4 40             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004AAF  1  C6 AC                DEC     <FAC1_e         ; make result = PI
004AB1  1  60                   RTS
004AB2  1               
004AB2  1               
004AB2  1               
004AB2  1               
004AB2  1               
004AB2  1               AA_end_basic:
004AB2  1               ENDOFBASIC:
004AB2  1  44 45 52 49          .BYTE   "DERIVED FROM ehBASIC"
004AB6  1  56 45 44 20  
004ABA  1  46 52 4F 4D  
004AC6  1               
004AC6  1               
004AC6  1               
004AC6  1               
004AC6  1                       .END

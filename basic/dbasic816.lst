ca65 V2.18 - Ubuntu 2.19-1
Main file   : dbasic816.asm
Current file: dbasic816.asm

000000r 1               .P816
000000r 1               .A8
000000r 1               .I8
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.23
000000r 1               ; THIS WORK IS DERIVED FROM ehBASIC BY LEE DAVIDSON
000000r 1               ;
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixedf
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 1               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 1               ; 2.22	fixed RND() breaking the get byte routine
000000r 1               ; 2.30  CONVERT TO 65816 ADDRESS SPACE
000000r 1               
000000r 1               
000000r 1               
000000r 1                       .SEGMENT "HIGHMEM"
000000r 1               ;.ORG    0FF1000H
000000r 1                       .ORG    1000H
001000  1               BASICORG:
001000  1  4C 8D 21             JMP     BASICBEGIN
001003  1               ;____________________________________________________________________________________________
001003  1               ;
001003  1               ; MACROS
001003  1               
001003  1                       .INCLUDE "macros.asm"
001003  2               ;___________________________________________________________________________________________________
001003  2               ;
001003  2               ;	USEFUL 65186 MACROS
001003  2               ;__________________________________________________________________________________________________
001003  2               
001003  2               .macro       STORECONTEXT             ; Store Complete Context at the beginning of a Sub
001003  2                       PHX
001003  2                       phy
001003  2                       pha
001003  2                       php
001003  2               .endmacro
001003  2               
001003  2               .macro       RESTORECONTEXT                 ; Restore Complete Context at the end of a Sub
001003  2                       plp
001003  2                       pla
001003  2                       ply
001003  2                       plx
001003  2               .endmacro
001003  2               
001003  2               .macro       INDEX16                         ; Set 16bit Index Registers
001003  2               		REP #$10 		; 16 bit Index registers
001003  2               		.I16
001003  2               .endmacro
001003  2               .macro       INDEX8                          ; Set 8bit Index Registers
001003  2               		SEP #$10 		; 8 bit Index registers
001003  2               		.I8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR16                  ; Set 16bit Index Registers
001003  2               		REP #$20 		; 16 bit Index registers
001003  2               		.A16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR8                   ; Set 8bit Index Registers
001003  2               		SEP #$20 		; 8 bit Index registers
001003  2               		.A8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX16             ; Set 16bit Index Registers
001003  2               		REP #$30 		; 16 bit Index registers
001003  2               		.A16
001003  2                               .I16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX8              ; Set 8bit Index Registers
001003  2               		SEP #$30 		; 8 bit Index registers
001003  2               		.A8
001003  2                               .I8
001003  2               .endmacro
001003  2               
001003  2               .macro       LDAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               	LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLB
001003  2                   LDA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       STAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   PHA
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLA
001003  2                   PLX
001003  2               	STA	(<PARM1),Y		;
001003  2               	PLB
001003  2                   STA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       SETBANK PARM1
001003  2                   PHX
001003  2               	LDX #PARM1
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               .endmacro
001003  2               
001003  2               
001003  2               .macro       FETCHINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2               .endmacro
001003  2               
001003  2               .macro       CMPINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CMP	<TMPFLG		    ;
001003  2               .endmacro
001003  2               
001003  2               .macro       ADCINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CLC
001003  2                   ADC	<TMPFLG 		;
001003  2               .endmacro
001003  2               
001003  2               .macro       LBEQ PARM1
001003  2                    bne *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBNE PARM1
001003  2                    beq *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCC PARM1
001003  2                    bcc *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCS PARM1
001003  2                    bcs *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  1               
001003  1               ; ZERO PAGE DEFINITIONS
001003  1                       .INCLUDE "zeropage.asm"
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; ZERO PAGE DEFINITIONS
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_WARM        = $00           ; BASIC warm start entry point
001003  2               Wrmjpl          = LAB_WARM+1    ; BASIC warm start vector jump low byte
001003  2               Wrmjph          = LAB_WARM+2    ; BASIC warm start vector jump high byte
001003  2               TMPFLG          = $04
001003  2               VIDEOMODE       = $06
001003  2               LOCALWORK       = $07           ; word (2 bytes)
001003  2               Usrjmp          = $0A           ; USR function JMP address
001003  2               Usrjpl          = <Usrjmp+1     ; USR function JMP vector low byte
001003  2               Usrjph          = <Usrjmp+2     ; USR function JMP vector high byte
001003  2               Nullct          = $0D           ; nulls output after each line
001003  2               TPos            = $0E           ; BASIC terminal position byte
001003  2               TWidth          = $0F           ; BASIC terminal width byte
001003  2               Iclim           = $10           ; input column limit
001003  2               Itempl          = $11           ; temporary integer low byte
001003  2               Itemph          = <Itempl+1     ; temporary integer high byte
001003  2               
001003  2               nums_1          = <Itempl       ; number to bin/hex string convert MSB
001003  2               nums_2          = <nums_1+1     ; number to bin/hex string convert
001003  2               nums_3          = <nums_1+2     ; number to bin/hex string convert LSB
001003  2               
001003  2               Srchc           = $5B           ; search character
001003  2               Temp3           = <Srchc        ; temp byte used in number routines
001003  2               Scnquo          = $5C           ; scan-between-quotes flag
001003  2               Asrch           = <Scnquo       ; alt search character
001003  2               
001003  2               XOAw_l          = <Srchc        ; eXclusive OR, OR and AND word low byte
001003  2               XOAw_h          = <Scnquo       ; eXclusive OR, OR and AND word high byte
001003  2               
001003  2               Ibptr           = $5D           ; input buffer pointer
001003  2               Dimcnt          = <Ibptr        ; # of dimensions
001003  2               Tindx           = <Ibptr        ; token index
001003  2               
001003  2               Defdim          = $5E           ; default DIM flag
001003  2               Dtypef          = $5F           ; data type flag, $FF=string, $00=numeric
001003  2               Oquote          = $60           ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
001003  2               Gclctd          = $60           ; garbage collected flag
001003  2               Sufnxf          = $61           ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
001003  2               Imode           = $62           ; input mode flag, $00=INPUT, $80=READ
001003  2               Cflag           = $63           ; comparison evaluation flag
001003  2               
001003  2               TabSiz          = $64           ; TAB step size (was input flag)
001003  2               
001003  2               next_s          = $65           ; next descriptor stack address
001003  2               ; these two bytes form a word pointer to the item
001003  2               ; currently on top of the descriptor stack
001003  2               last_sl         = $66           ; last descriptor stack address low byte
001003  2               last_sh         = $67           ; last descriptor stack address high byte (always $00)
001003  2               
001003  2               des_sk          = $68           ; descriptor stack start address (temp strings)
001003  2               
001003  2               ;			= $70		; End of descriptor stack
001003  2               
001003  2               ut1_pl          = $71           ; utility pointer 1 low byte
001003  2               ut1_ph          = <ut1_pl+1     ; utility pointer 1 high byte
001003  2               ut2_pl          = $73           ; utility pointer 2 low byte
001003  2               ut2_ph          = <ut2_pl+1     ; utility pointer 2 high byte
001003  2               
001003  2               Temp_2          = <ut1_pl       ; temp byte for block move
001003  2               
001003  2               FACt_1          = $75           ; FAC temp mantissa1
001003  2               FACt_2          = <FACt_1+1     ; FAC temp mantissa2
001003  2               FACt_3          = <FACt_2+1     ; FAC temp mantissa3
001003  2               
001003  2               dims_l          = <FACt_2       ; array dimension size low byte
001003  2               dims_h          = <FACt_3       ; array dimension size high byte
001003  2               
001003  2               TempB           = $78           ; temp page 0 byte
001003  2               
001003  2               Smeml           = $79           ; start of mem low byte		(Start-of-Basic)
001003  2               Smemh           = <Smeml+1      ; start of mem high byte	(Start-of-Basic)
001003  2               Svarl           = $7B           ; start of vars low byte	(Start-of-Variables)
001003  2               Svarh           = <Svarl+1      ; start of vars high byte	(Start-of-Variables)
001003  2               Sarryl          = $7D           ; var mem end low byte		(Start-of-Arrays)
001003  2               Sarryh          = <Sarryl+1     ; var mem end high byte		(Start-of-Arrays)
001003  2               Earryl          = $7F           ; array mem end low byte	(End-of-Arrays)
001003  2               Earryh          = <Earryl+1     ; array mem end high byte	(End-of-Arrays)
001003  2               Sstorl          = $81           ; string storage low byte	(String storage (moving down))
001003  2               Sstorh          = <Sstorl+1     ; string storage high byte	(String storage (moving down))
001003  2               Sutill          = $83           ; string utility ptr low byte
001003  2               Sutilh          = <Sutill+1     ; string utility ptr high byte
001003  2               Ememl           = $85           ; end of mem low byte		(Limit-of-memory)
001003  2               Ememh           = <Ememl+1      ; end of mem high byte		(Limit-of-memory)
001003  2               
001003  2               Clinel          = $87           ; current line low byte		(Basic line number)
001003  2               Clineh          = <Clinel+1     ; current line high byte	(Basic line number)
001003  2               Blinel          = $89           ; break line low byte		(Previous Basic line number)
001003  2               Blineh          = <Blinel+1     ; break line high byte		(Previous Basic line number)
001003  2               
001003  2               Cpntrl          = $8B           ; continue pointer low byte
001003  2               Cpntrh          = <Cpntrl+1     ; continue pointer high byte
001003  2               
001003  2               Dlinel          = $8D           ; current DATA line low byte
001003  2               Dlineh          = <Dlinel+1     ; current DATA line high byte
001003  2               
001003  2               Dptrl           = $8F           ; DATA pointer low byte
001003  2               Dptrh           = <Dptrl+1      ; DATA pointer high byte
001003  2               
001003  2               Rdptrl          = $91           ; read pointer low byte
001003  2               Rdptrh          = <Rdptrl+1     ; read pointer high byte
001003  2               
001003  2               Varnm1          = $93           ; current var name 1st byte
001003  2               Varnm2          = <Varnm1+1     ; current var name 2nd byte
001003  2               
001003  2               Cvaral          = $95           ; current var address low byte
001003  2               Cvarah          = <Cvaral+1     ; current var address high byte
001003  2               
001003  2               Frnxtl          = $97           ; var pointer for FOR/NEXT low byte
001003  2               Frnxth          = <Frnxtl+1     ; var pointer for FOR/NEXT high byte
001003  2               
001003  2               Tidx1           = <Frnxtl       ; temp line index
001003  2               
001003  2               Lvarpl          = <Frnxtl       ; let var pointer low byte
001003  2               Lvarph          = <Frnxth       ; let var pointer high byte
001003  2               
001003  2               prstk           = $99           ; precedence stacked flag
001003  2               
001003  2               comp_f          = $9B           ; compare function flag, bits 0,1 and 2 used
001003  2               ; bit 2 set if >
001003  2               ; bit 1 set if =
001003  2               ; bit 0 set if <
001003  2               
001003  2               func_l          = $9C           ; function pointer low byte
001003  2               func_h          = <func_l+1     ; function pointer high byte
001003  2               
001003  2               garb_l          = <func_l       ; garbage collection working pointer low byte
001003  2               garb_h          = <func_h       ; garbage collection working pointer high byte
001003  2               
001003  2               des_2l          = $9E           ; string descriptor_2 pointer low byte
001003  2               des_2h          = <des_2l+1     ; string descriptor_2 pointer high byte
001003  2               
001003  2               g_step          = $A0           ; garbage collect step size
001003  2               
001003  2               Fnxjmp          = $A1           ; jump vector for functions
001003  2               Fnxjpl          = <Fnxjmp+1     ; functions jump vector low byte
001003  2               Fnxjph          = <Fnxjmp+2     ; functions jump vector high byte
001003  2               
001003  2               g_indx          = <Fnxjpl       ; garbage collect temp index
001003  2               
001003  2               FAC2_r          = $A3           ; FAC2 rounding byte
001003  2               
001003  2               Adatal          = $A4           ; array data pointer low byte
001003  2               Adatah          = <Adatal+1     ; array data pointer high  byte
001003  2               
001003  2               Nbendl          = <Adatal       ; new block end pointer low byte
001003  2               Nbendh          = <Adatah       ; new block end pointer high  byte
001003  2               
001003  2               Obendl          = $A6           ; old block end pointer low byte
001003  2               Obendh          = <Obendl+1     ; old block end pointer high  byte
001003  2               
001003  2               numexp          = $A8           ; string to float number exponent count
001003  2               expcnt          = $A9           ; string to float exponent count
001003  2               
001003  2               numbit          = <numexp       ; bit count for array element calculations
001003  2               
001003  2               numdpf          = $AA           ; string to float decimal point flag
001003  2               expneg          = $AB           ; string to float eval exponent -ve flag
001003  2               
001003  2               Astrtl          = <numdpf       ; array start pointer low byte
001003  2               Astrth          = <expneg       ; array start pointer high  byte
001003  2               
001003  2               Histrl          = <numdpf       ; highest string low byte
001003  2               Histrh          = <expneg       ; highest string high  byte
001003  2               
001003  2               Baslnl          = <numdpf       ; BASIC search line pointer low byte
001003  2               Baslnh          = <expneg       ; BASIC search line pointer high  byte
001003  2               
001003  2               Fvar_l          = <numdpf       ; find/found variable pointer low byte
001003  2               Fvar_h          = <expneg       ; find/found variable pointer high  byte
001003  2               
001003  2               Ostrtl          = <numdpf       ; old block start pointer low byte
001003  2               Ostrth          = <expneg       ; old block start pointer high  byte
001003  2               
001003  2               Vrschl          = <numdpf       ; variable search pointer low byte
001003  2               Vrschh          = <expneg       ; variable search pointer high  byte
001003  2               
001003  2               FAC1_e          = $AC           ; FAC1 exponent
001003  2               FAC1_1          = <FAC1_e+1     ; FAC1 mantissa1
001003  2               FAC1_2          = <FAC1_e+2     ; FAC1 mantissa2
001003  2               FAC1_3          = <FAC1_e+3     ; FAC1 mantissa3
001003  2               FAC1_s          = <FAC1_e+4     ; FAC1 sign (b7)
001003  2               
001003  2               str_ln          = <FAC1_e       ; string length
001003  2               str_pl          = <FAC1_1       ; string pointer low byte
001003  2               str_ph          = <FAC1_2       ; string pointer high byte
001003  2               
001003  2               des_pl          = <FAC1_2       ; string descriptor pointer low byte
001003  2               des_ph          = <FAC1_3       ; string descriptor pointer high byte
001003  2               
001003  2               mids_l          = <FAC1_3       ; MID$ string temp length byte
001003  2               
001003  2               negnum          = $B1           ; string to float eval -ve flag
001003  2               numcon          = $B1           ; series evaluation constant count
001003  2               
001003  2               FAC1_o          = $B2           ; FAC1 overflow byte
001003  2               
001003  2               FAC2_e          = $B3           ; FAC2 exponent
001003  2               FAC2_1          = <FAC2_e+1     ; FAC2 mantissa1
001003  2               FAC2_2          = <FAC2_e+2     ; FAC2 mantissa2
001003  2               FAC2_3          = <FAC2_e+3     ; FAC2 mantissa3
001003  2               FAC2_s          = <FAC2_e+4     ; FAC2 sign (b7)
001003  2               
001003  2               FAC_sc          = $B8           ; FAC sign comparison, Acc#1 vs #2
001003  2               FAC1_r          = $B9           ; FAC1 rounding byte
001003  2               
001003  2               ssptr_l         = <FAC_sc       ; string start pointer low byte
001003  2               ssptr_h         = <FAC1_r       ; string start pointer high byte
001003  2               
001003  2               sdescr          = <FAC_sc       ; string descriptor pointer
001003  2               
001003  2               csidx           = $BA           ; line crunch save index
001003  2               Asptl           = <csidx        ; array size/pointer low byte
001003  2               Aspth           = $BB           ; array size/pointer high byte
001003  2               
001003  2               Btmpl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Btmph           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Cptrl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Cptrh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Sendl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Sendh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               LAB_IGBY        = $BC           ; get next BASIC byte subroutine
001003  2               
001003  2               LAB_GBYT        = $C2           ; get current BASIC byte subroutine
001003  2               Bpntrl          = $C3           ; BASIC execute (get byte) pointer low byte
001003  2               Bpntrh          = <Bpntrl+1     ; BASIC execute (get byte) pointer high byte
001003  2               Bpntrp          = <Bpntrl+2     ; BASIC execute (get byte) pointer PAGE byte
001003  2               
001003  2               ;			= $E0		; end of get BASIC char subroutine
001003  2               
001003  2               Rbyte4          = $E1           ; extra PRNG byte
001003  2               Rbyte1          = <Rbyte4+1     ; most significant PRNG byte
001003  2               Rbyte2          = <Rbyte4+2     ; middle PRNG byte
001003  2               Rbyte3          = <Rbyte4+3     ; least significant PRNG byte
001003  2               
001003  2               NmiBase         = $E5           ; NMI handler enabled/setup/triggered flags
001003  2               ; bit	function
001003  2               ; ===	========
001003  2               ; 7	interrupt enabled
001003  2               ; 6	interrupt setup
001003  2               ; 5	interrupt happened
001003  2               ;			= $E6		; NMI handler addr low byte
001003  2               ;			= $E7		; NMI handler addr high byte
001003  2               IrqBase         = $E8           ; IRQ handler enabled/setup/triggered flags
001003  2               ;			= $E9		; IRQ handler addr low byte
001003  2               ;			= $EA		; IRQ handler addr high byte
001003  2               FCBPTR          = $EB           ; POINTER TO FCB FOR FILE OPS
001003  2               
001003  2               Decss           = $EF           ; number to decimal string start
001003  2               Decssp1         = Decss+1       ; number to decimal string start
001003  2               
001003  2               TEMPW           = $FD
001003  2               ;			= $FF		; decimal string end
001003  2               
001003  2               
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; character get subroutine for zero page
001003  2               
001003  2               ; For a 1.8432MHz 6502 including the JSR and RTS
001003  2               ; fastest (>=":")	=  29 cycles =  15.7uS
001003  2               ; slowest (<":")	=  40 cycles =  21.7uS
001003  2               ; space skip	= +21 cycles = +11.4uS
001003  2               ; inc across page	=  +4 cycles =  +2.2uS
001003  2               
001003  2               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
001003  2               ; block is copied to it's destination, any non zero page address will do at assembly
001003  2               ; time, to assemble a three byte instruction.
001003  2               
001003  2               ; page 0 initialisation table from $BC
001003  2               ; increment and scan memory
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_2CEE:
001003  2  E6 C3                INC     <Bpntrl         ; increment BASIC execute pointer low byte
001005  2  D0 02                BNE     LAB_2CF4        ; branch if no carry
001007  2               ; else
001007  2  E6 C4                INC     <Bpntrh         ; increment BASIC execute pointer high byte
001009  2               
001009  2               ; page 0 initialisation table from $C2
001009  2               ; scan memory
001009  2               LAB_2CF4:
001009  2  AF FF FF FF          LDA     $FFFFFF         ; get byte to scan (addr set by call routine)
00100D  2  C9 C1                CMP     #TK_ELSE        ; compare with the token for ELSE
00100F  2  F0 0E                BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
001011  2               
001011  2  C9 3A                CMP     #':'            ; compare with ":"
001013  2  B0 0A                BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
001015  2               
001015  2  C9 20                CMP     #' '            ; compare with " "
001017  2  F0 EA                BEQ     LAB_2CEE        ; if " " go do next
001019  2               
001019  2  38                   SEC                     ; set carry for SBC
00101A  2  E9 30                SBC     #'0'            ; subtract "0"
00101C  2  38                   SEC                     ; set carry for SBC
00101D  2  E9 D0                SBC     #$D0            ; subtract -"0"
00101F  2               ; clear carry if byte = "0"-"9"
00101F  2               LAB_2D05:
00101F  2  6B                   RTL
001020  2               LAB_2CEE_END:
001020  2               ;____________________________________________________________________________________________
001020  2               ;
001020  2               ; page zero initialisation table $00-$12 inclusive
001020  2               ;____________________________________________________________________________________________
001020  2               
001020  2               StrTab:
001020  2  4C                   .BYTE   $4C             ; JMP opcode
001021  2  AD 21                .WORD   LAB_COLD        ; initial warm start vector (cold start)
001023  2               
001023  2  00                   .BYTE   $00             ; these bytes are not used by BASIC
001024  2  00 00                .WORD   $0000           ;
001026  2  00 00                .WORD   $0000           ;
001028  2  00 00                .WORD   $0000           ;
00102A  2               
00102A  2  4C                   .BYTE   $4C             ; JMP opcode
00102B  2  E2 32                .WORD   LAB_FCER        ; initial user function vector ("Function call" error)
00102D  2  00                   .BYTE   $00             ; default NULL count
00102E  2  00                   .BYTE   $00             ; clear terminal position
00102F  2  00                   .BYTE   $00             ; default terminal width byte
001030  2  F2                   .BYTE   $F2             ; default limit for TAB = 14
001031  2  00 22                .WORD   Ram_base        ; start of user RAM
001033  2               EndTab:
001033  2               
001033  2               ;  BASIC start-up code
001033  2               
001033  2               PG2_TABS:
001033  2  00                   .BYTE   $00             ; ctrl-c flag		-	$00 = enabled
001034  2  03                   .BYTE   $03             ; ctrl-c byte		-	GET needs this
001035  2  00                   .BYTE   $00             ; ctrl-c byte timeout	-	GET needs this
001036  2  91 47                .WORD   CTRLC           ; ctrl c check vector
001038  2               PG2_TABE:
001038  2               
001038  1               
001038  1               ; BASIC TOKENS
001038  1                       .INCLUDE "tokens.asm"
001038  2               ; token values needed for BASIC
001038  2               
001038  2               ; primary command tokens (can start a statement)
001038  2               
001038  2               TK_END          = $80           ; END
001038  2               TK_FOR          = TK_END+1      ; FOR token
001038  2               TK_NEXT         = TK_FOR+1      ; NEXT token
001038  2               TK_DATA         = TK_NEXT+1     ; DATA token
001038  2               TK_DIRECTORY    = TK_DATA+1     ; DISKSTATUS token
001038  2               TK_DISKSTATUS   = TK_DIRECTORY+1; DIRECTORY token
001038  2               TK_INPUT        = TK_DISKSTATUS+1; INPUT token
001038  2               TK_DIM          = TK_INPUT+1    ; DIM token
001038  2               TK_READ         = TK_DIM+1      ; READ token
001038  2               TK_LET          = TK_READ+1     ; LET token
001038  2               TK_DEC          = TK_LET+1      ; DEC token
001038  2               TK_GOTO         = TK_DEC+1      ; GOTO token
001038  2               TK_RUN          = TK_GOTO+1     ; RUN token
001038  2               TK_IF           = TK_RUN+1      ; IF token
001038  2               TK_RESTORE      = TK_IF+1       ; RESTORE token
001038  2               TK_GOSUB        = TK_RESTORE+1  ; GOSUB token
001038  2               TK_RETURN       = TK_GOSUB+1    ; RETURN token
001038  2               TK_REM          = TK_RETURN+1   ; REM token
001038  2               TK_STOP         = TK_REM+1      ; STOP token
001038  2               TK_ON           = TK_STOP+1     ; ON token
001038  2               TK_NULL         = TK_ON+1       ; NULL token
001038  2               TK_INC          = TK_NULL+1     ; INC token
001038  2               TK_WAIT         = TK_INC+1      ; WAIT token
001038  2               TK_LOAD         = TK_WAIT+1     ; LOAD token
001038  2               TK_SAVE         = TK_LOAD+1     ; SAVE token
001038  2               TK_DEF          = TK_SAVE+1     ; DEF token
001038  2               TK_POKE         = TK_DEF+1      ; POKE token
001038  2               TK_CALL         = TK_POKE+1     ; CALL token
001038  2               TK_DO           = TK_CALL+1     ; DO token
001038  2               TK_LOOP         = TK_DO+1       ; LOOP token
001038  2               TK_PRINT        = TK_LOOP+1     ; PRINT token
001038  2               TK_CONT         = TK_PRINT+1    ; CONT token
001038  2               TK_LIST         = TK_CONT+1     ; LIST token
001038  2               TK_CLEAR        = TK_LIST+1     ; CLEAR token
001038  2               TK_NEW          = TK_CLEAR+1    ; NEW token
001038  2               TK_WIDTH        = TK_NEW+1      ; WIDTH token
001038  2               TK_GET          = TK_WIDTH+1    ; GET token
001038  2               TK_SWAP         = TK_GET+1      ; SWAP token
001038  2               TK_BITSET       = TK_SWAP+1     ; BITSET token
001038  2               TK_BITCLR       = TK_BITSET+1   ; BITCLR token
001038  2               TK_MONITOR      = TK_BITCLR+1   ; MONITOR token
001038  2               TK_OPEN         = TK_MONITOR+1  ; OPEN token
001038  2               TK_CLOSE        = TK_OPEN+1     ; CLOSE token
001038  2               TK_IECINPUT     = TK_CLOSE+1    ; IECINPUT token
001038  2               TK_IECOUTPUT    = TK_IECINPUT+1 ; IECOUTPUT token
001038  2               TK_PUTN         = TK_IECOUTPUT+1; PUTN token
001038  2               TK_GETN         = TK_PUTN+1     ; GETN token
001038  2               TK_DISKCMD      = TK_GETN+1     ; DISKCMD token
001038  2               TK_SCNCLR       = TK_DISKCMD+1  ;SCNCLR token
001038  2               TK_LOCATE       = TK_SCNCLR+1   ;LOCATE token
001038  2               TK_COLOR        = TK_LOCATE+1   ;COLOR token
001038  2               TK_SPOKE        = TK_COLOR+1    ;SPOKE token
001038  2               TK_SCREEN       = TK_SPOKE+1    ;SCREEN token
001038  2               TK_SPRITE       = TK_SCREEN+1   ;SPRITE token
001038  2               TK_SPRDEF       = TK_SPRITE+1   ;SPRDEF token
001038  2               TK_SPRSIZE      = TK_SPRDEF+1   ;SPRSIZE token
001038  2               TK_PLOT         = TK_SPRSIZE+1  ;PLOT token
001038  2               TK_PATTERN      = TK_PLOT+1     ;PATTERN token
001038  2               TK_SYS          = TK_PATTERN+1  ;SYS token
001038  2               TK_SOUND        = TK_SYS+1      ;SOUND token
001038  2               TK_NOISE        = TK_SOUND+1    ;NOISE token
001038  2               TK_TONE         = TK_NOISE+1    ;TONE token
001038  2               TK_VOLUME       = TK_TONE+1     ;VOLUME token
001038  2               TK_VOICE        = TK_VOLUME+1   ;VOICE token
001038  2               
001038  2               ; secondary command tokens, can't start a statement
001038  2               
001038  2               TK_TAB          = TK_VOICE+1    ; TAB token
001038  2               TK_ELSE         = TK_TAB+1      ; ELSE token
001038  2               TK_TO           = TK_ELSE+1     ; TO token
001038  2               TK_FN           = TK_TO+1       ; FN token
001038  2               TK_SPC          = TK_FN+1       ; SPC token
001038  2               TK_THEN         = TK_SPC+1      ; THEN token
001038  2               TK_NOT          = TK_THEN+1     ; NOT token
001038  2               TK_STEP         = TK_NOT+1      ; STEP token
001038  2               TK_UNTIL        = TK_STEP+1     ; UNTIL token
001038  2               TK_WHILE        = TK_UNTIL+1    ; WHILE token
001038  2               TK_OFF          = TK_WHILE+1    ; OFF token
001038  2               
001038  2               ; opperator tokens
001038  2               
001038  2               TK_PLUS         = TK_OFF+1      ; + token
001038  2               TK_MINUS        = TK_PLUS+1     ; - token
001038  2               TK_MUL          = TK_MINUS+1    ; * token
001038  2               TK_DIV          = TK_MUL+1      ; / token
001038  2               TK_POWER        = TK_DIV+1      ; ^ token
001038  2               TK_AND          = TK_POWER+1    ; AND token
001038  2               TK_EOR          = TK_AND+1      ; EOR token
001038  2               TK_OR           = TK_EOR+1      ; OR token
001038  2               TK_RSHIFT       = TK_OR+1       ; RSHIFT token
001038  2               TK_LSHIFT       = TK_RSHIFT+1   ; LSHIFT token
001038  2               TK_GT           = TK_LSHIFT+1   ; > token
001038  2               TK_EQUAL        = TK_GT+1       ; = token
001038  2               TK_LT           = TK_EQUAL+1    ; < token
001038  2               
001038  2               ; functions tokens
001038  2               
001038  2               TK_SGN          = TK_LT+1       ; SGN token
001038  2               TK_INT          = TK_SGN+1      ; INT token
001038  2               TK_ABS          = TK_INT+1      ; ABS token
001038  2               TK_USR          = TK_ABS+1      ; USR token
001038  2               TK_FRE          = TK_USR+1      ; FRE token
001038  2               TK_POS          = TK_FRE+1      ; POS token
001038  2               TK_SQR          = TK_POS+1      ; SQR token
001038  2               TK_RND          = TK_SQR+1      ; RND token
001038  2               TK_LOG          = TK_RND+1      ; LOG token
001038  2               TK_EXP          = TK_LOG+1      ; EXP token
001038  2               TK_COS          = TK_EXP+1      ; COS token
001038  2               TK_SIN          = TK_COS+1      ; SIN token
001038  2               TK_TAN          = TK_SIN+1      ; TAN token
001038  2               TK_ATN          = TK_TAN+1      ; ATN token
001038  2               TK_PEEK         = TK_ATN+1      ; PEEK token
001038  2               TK_SPEEK        = TK_PEEK+1     ;SPEEK token
001038  2               TK_SADD         = TK_SPEEK+1    ; SADD token
001038  2               TK_LEN          = TK_SADD+1     ; LEN token
001038  2               TK_STRS         = TK_LEN+1      ; STR$ token
001038  2               TK_VAL          = TK_STRS+1     ; VAL token
001038  2               TK_ASC          = TK_VAL+1      ; ASC token
001038  2               TK_UCASES       = TK_ASC+1      ; UCASE$ token
001038  2               TK_LCASES       = TK_UCASES+1   ; LCASE$ token
001038  2               TK_CHRS         = TK_LCASES+1   ; CHR$ token
001038  2               TK_HEXS         = TK_CHRS+1     ; HEX$ token
001038  2               TK_BINS         = TK_HEXS+1     ; BIN$ token
001038  2               TK_BITTST       = TK_BINS+1     ; BITTST token
001038  2               TK_MAX          = TK_BITTST+1   ; MAX token
001038  2               TK_MIN          = TK_MAX+1      ; MIN token
001038  2               TK_PI           = TK_MIN+1      ; PI token
001038  2               TK_IECST        = TK_PI+1       ; IECST token
001038  2               TK_VIDST        = TK_IECST+1    ; VIDST token
001038  2               TK_VPTR         = TK_VIDST+1    ; VARPTR token
001038  2               TK_LEFTS        = TK_VPTR+1     ; LEFT$ token
001038  2               TK_RIGHTS       = TK_LEFTS+1    ; RIGHT$ token
001038  2               TK_MIDS         = TK_RIGHTS+1   ; MID$ token
001038  2               TK_CON          = TK_MIDS+1     ; CON token
001038  2               
001038  2               
001038  2               
001038  2               
001038  2               LAB_CTBL:
001038  2  32 27                .WORD   LAB_END-1       ; END
00103A  2  6A 26                .WORD   LAB_FOR-1       ; FOR
00103C  2  C7 2D                .WORD   LAB_NEXT-1      ; NEXT
00103E  2  B5 28                .WORD   LAB_DATA-1      ; DATA
001040  2  79 1A                .WORD   V_DIR-1         ; DIRECTORY
001042  2  FE 19                .WORD   V_ERR-1         ; DISKSTATUS
001044  2  67 2C                .WORD   LAB_INPUT-1     ; INPUT
001046  2  0D 31                .WORD   LAB_DIM-1       ; DIM
001048  2  80 2C                .WORD   LAB_READ-1      ; READ
00104A  2  DA 29                .WORD   LAB_LET-1       ; LET
00104C  2  AA 29                .WORD   LAB_DEC-1       ; DEC			new command
00104E  2  0F 28                .WORD   LAB_GOTO-1      ; GOTO
001050  2  CC 27                .WORD   LAB_RUN-1       ; RUN
001052  2  E3 28                .WORD   LAB_IF-1        ; IF
001054  2  64 27                .WORD   LAB_RESTORE-1   ; RESTORE		modified command
001056  2  F1 27                .WORD   LAB_GOSUB-1     ; GOSUB
001058  2  A0 28                .WORD   LAB_RETURN-1    ; RETURN
00105A  2  4E 29                .WORD   LAB_REM-1       ; REM
00105C  2  30 27                .WORD   LAB_STOP-1      ; STOP
00105E  2  57 29                .WORD   LAB_ON-1        ; ON			modified command
001060  2  A2 27                .WORD   LAB_NULL-1      ; NULL		modified command
001062  2  AD 29                .WORD   LAB_INC-1       ; INC			new command
001064  2  77 3C                .WORD   LAB_WAIT-1      ; WAIT
001066  2  71 19                .WORD   V_LOAD-1        ; LOAD
001068  2  E4 18                .WORD   V_SAVE-1        ; SAVE
00106A  2  35 34                .WORD   LAB_DEF-1       ; DEF
00106C  2  C7 3B                .WORD   LAB_POKE-1      ; POKE
00106E  2  63 3C                .WORD   LAB_CALL-1      ; CALL		new command
001070  2  D6 27                .WORD   LAB_DO-1        ; DO			new command
001072  2  41 28                .WORD   LAB_LOOP-1      ; LOOP		new command
001074  2  44 2B                .WORD   LAB_PRINT-1     ; PRINT
001076  2  A8 27                .WORD   LAB_CONT-1      ; CONT
001078  2  AA 25                .WORD   LAB_LIST-1      ; LIST
00107A  2  A7 25                .WORD   LAB_CLEAR-1     ; CLEAR
00107C  2  57 25                .WORD   LAB_NEW-1       ; NEW
00107E  2  A5 48                .WORD   LAB_WDTH-1      ; WIDTH		new command
001080  2  FE 2A                .WORD   LAB_GET-1       ; GET			new command
001082  2  EB 3B                .WORD   LAB_SWAP-1      ; SWAP		new command
001084  2  28 46                .WORD   LAB_BITSET-1    ; BITSET		new command
001086  2  3C 46                .WORD   LAB_BITCLR-1    ; BITCLR		new command
001088  2  77 21                .WORD   LAB_MONITOR-1   ; MONITOR		MONITOR command
00108A  2  14 1C                .WORD   V_OPEN-1        ; OPEN			OPEN command
00108C  2  97 1C                .WORD   V_CLOSE-1       ; CLOSE			CLOSE command
00108E  2  A8 1C                .WORD   V_IECINPUT-1    ; IECINPUT		IECINPUT command
001090  2  BE 1C                .WORD   V_IECOUTPUT-1   ; IECOUTPUT		IECOUTPUT command
001092  2  D4 1C                .WORD   V_PUTN-1        ; PUTN			PUTN command
001094  2  40 1D                .WORD   V_GETN-1        ; GETN			GETN command
001096  2  50 1B                .WORD   V_DISKCMD-1     ; DISKCMD		DISKCMD COMMAND
001098  2  8D 1D                .WORD   V_SCNCLR-1      ; SCNCLR		SCNCLR COMMAND
00109A  2  9A 1D                .WORD   V_LOCATE-1      ; LOCATE		LOCATE COMMAND
00109C  2  B2 1D                .WORD   V_COLOR-1       ; COLOR			COLOR COMMAND
00109E  2  EA 1D                .WORD   V_SPOKE-1       ; SPOKE			SPOKE COMMAND
0010A0  2  F8 1D                .WORD   V_SCREEN-1      ; SCREEN		SCREEN COMMAND
0010A2  2  54 1E                .WORD   V_SPRITE-1      ; SPRITE		SPRITE COMMAND
0010A4  2  55 1E                .WORD   V_SPRDEF-1      ; SPRDEF		SPRDEF COMMAND
0010A6  2  57 1E                .WORD   V_SPRSIZE-1     ; SPRSIZE		SPRSIZE COMMAND
0010A8  2  58 1E                .WORD   V_PLOT-1        ; PLOT			PLOT COMMAND
0010AA  2  59 1E                .WORD   V_PATTERN-1     ; PATTERN		PATTERN COMMAND
0010AC  2  D8 3B                .WORD   LAB_SYS-1       ; SYS			SYS COMMAND
0010AE  2  5A 1E                .WORD   V_SOUND-1       ; SOUND			SOUND COMMAND
0010B0  2  B1 1E                .WORD   V_NOISE-1       ; NOISE			NOISE COMMAND
0010B2  2  F0 1E                .WORD   V_TONE-1        ; TONE			TONE COMMAND
0010B4  2  7A 1E                .WORD   V_VOLUME-1      ; VOLUME		VOLUME COMMAND
0010B6  2  8F 1E                .WORD   V_VOICE-1       ; VOICE			VOICE COMMAND
0010B8  2               ; function pre process routine table
0010B8  2               
0010B8  2               LAB_FTPL:
0010B8  2               LAB_FTPM        = LAB_FTPL+$01
0010B8  2  E5 2F                .WORD   LAB_PPFN-1      ; SGN(n)	process numeric expression in ()
0010BA  2  E5 2F                .WORD   LAB_PPFN-1      ; INT(n)		"
0010BC  2  E5 2F                .WORD   LAB_PPFN-1      ; ABS(n)		"
0010BE  2  64 2E                .WORD   LAB_EVEZ-1      ; USR(x)	process any expression
0010C0  2  6A 2F                .WORD   LAB_1BF7-1      ; FRE(x)		"
0010C2  2  6A 2F                .WORD   LAB_1BF7-1      ; POS(x)		"
0010C4  2  E5 2F                .WORD   LAB_PPFN-1      ; SQR(n)	process numeric expression in ()
0010C6  2  E5 2F                .WORD   LAB_PPFN-1      ; RND(n)		"
0010C8  2  E5 2F                .WORD   LAB_PPFN-1      ; LOG(n)		"
0010CA  2  E5 2F                .WORD   LAB_PPFN-1      ; EXP(n)		"
0010CC  2  E5 2F                .WORD   LAB_PPFN-1      ; COS(n)		"
0010CE  2  E5 2F                .WORD   LAB_PPFN-1      ; SIN(n)		"
0010D0  2  E5 2F                .WORD   LAB_PPFN-1      ; TAN(n)		"
0010D2  2  E5 2F                .WORD   LAB_PPFN-1      ; ATN(n)		"
0010D4  2  E5 2F                .WORD   LAB_PPFN-1      ; PEEK(n)		"
0010D6  2  E5 2F                .WORD   LAB_PPFN-1      ; SPEEK(N)		"
0010D8  2  00 00                .WORD   $0000           ; SADD()	none
0010DA  2  DF 2F                .WORD   LAB_PPFS-1      ; LEN($)	process string expression in ()
0010DC  2  E5 2F                .WORD   LAB_PPFN-1      ; STR$(n)	process numeric expression in ()
0010DE  2  DF 2F                .WORD   LAB_PPFS-1      ; VAL($)	process string expression in ()
0010E0  2  DF 2F                .WORD   LAB_PPFS-1      ; ASC($)		"
0010E2  2  DF 2F                .WORD   LAB_PPFS-1      ; UCASE$($)		"
0010E4  2  DF 2F                .WORD   LAB_PPFS-1      ; LCASE$($)		"
0010E6  2  E5 2F                .WORD   LAB_PPFN-1      ; CHR$(n)	process numeric expression in ()
0010E8  2  0E 30                .WORD   LAB_BHSS-1      ; HEX$(n)		"
0010EA  2  0E 30                .WORD   LAB_BHSS-1      ; BIN$(n)		"
0010EC  2  00 00                .WORD   $0000           ; BITTST()	none
0010EE  2  38 48                .WORD   LAB_MMPP-1      ; MAX()	process numeric expression
0010F0  2  38 48                .WORD   LAB_MMPP-1      ; MIN()		"
0010F2  2  EB 2F                .WORD   LAB_PPBI-1      ; PI		advance pointer
0010F4  2  39 1D                .WORD   LAB_PIECST-1    ; IECST		"
0010F6  2  56 1E                .WORD   LAB_PVIDST-1    ; VIDST		"
0010F8  2  00 00                .WORD   $0000           ; VARPTR()	none
0010FA  2  F2 2F                .WORD   LAB_LRMS-1      ; LEFT$()	process string expression
0010FC  2  F2 2F                .WORD   LAB_LRMS-1      ; RIGHT$()		"
0010FE  2  F2 2F                .WORD   LAB_LRMS-1      ; MID$()		"
001100  2  E5 2F                .WORD   LAB_PPFN-1      ; CON()		"
001102  2               
001102  2               ; action addresses for functions
001102  2               
001102  2               LAB_FTBL:
001102  2               LAB_FTBM        = LAB_FTBL+$01
001102  2  F0 40                .WORD   LAB_SGN-1       ; SGN()
001104  2  DE 41                .WORD   LAB_INT-1       ; INT()
001106  2  0D 41                .WORD   LAB_ABS-1       ; ABS()
001108  2  F3 45                .WORD   LAB_USR-1       ; USR()
00110A  2  03 34                .WORD   LAB_FRE-1       ; FRE()
00110C  2  22 34                .WORD   LAB_POS-1       ; POS()
00110E  2  FC 48                .WORD   LAB_SQR-1       ; SQR()
001110  2  43 45                .WORD   LAB_RND-1       ; RND()		modified function
001112  2  04 3E                .WORD   LAB_LOG-1       ; LOG()
001114  2  91 44                .WORD   LAB_EXP-1       ; EXP()
001116  2  77 45                .WORD   LAB_COS-1       ; COS()
001118  2  7E 45                .WORD   LAB_SIN-1       ; SIN()
00111A  2  C7 45                .WORD   LAB_TAN-1       ; TAN()
00111C  2  F9 45                .WORD   LAB_ATN-1       ; ATN()
00111E  2  B4 3B                .WORD   LAB_PEEK-1      ; PEEK()
001120  2  D9 1D                .WORD   V_SPEEK-1       ; SPEEK()
001122  2  83 3A                .WORD   LAB_SADD-1      ; SADD()		new function
001124  2  C5 3A                .WORD   LAB_LENS-1      ; LEN()
001126  2  74 35                .WORD   LAB_STRS-1      ; STR$()
001128  2  09 3B                .WORD   LAB_VAL-1       ; VAL()
00112A  2  D0 3A                .WORD   LAB_ASC-1       ; ASC()
00112C  2  39 3A                .WORD   LAB_UCASE-1     ; UCASE$()		new function
00112E  2  ED 39                .WORD   LAB_LCASE-1     ; LCASE$()		new function
001130  2  F1 38                .WORD   LAB_CHRS-1      ; CHR$()
001132  2  F5 46                .WORD   LAB_HEXS-1      ; HEX$()		new function
001134  2  7D 46                .WORD   LAB_BINS-1      ; BIN$()		new function
001136  2  52 46                .WORD   LAB_BTST-1      ; BITTST()		new function
001138  2  3E 48                .WORD   LAB_MAX-1       ; MAX()		new function
00113A  2  4E 48                .WORD   LAB_MIN-1       ; MIN()		new function
00113C  2  9A 49                .WORD   LAB_PI-1        ; PI			new function
00113E  2  2C 1D                .WORD   LAB_IECST-1     ; IECST		new function
001140  2  56 1E                .WORD   LAB_VIDST-1     ; VIDST		new function
001142  2  89 49                .WORD   LAB_VARPTR-1    ; VARPTR()		new function
001144  2  17 39                .WORD   LAB_LEFT-1      ; LEFT$()
001146  2  36 39                .WORD   LAB_RIGHT-1     ; RIGHT$()
001148  2  8F 39                .WORD   LAB_MIDS-1      ; MID$()
00114A  2  1E 1F                .WORD   LAB_CON-1       ; CON()
00114C  2               
00114C  2               ; hierarchy and action addresses for operator
00114C  2               
00114C  2               LAB_OPPT:
00114C  2  79                   .BYTE   $79             ; +
00114D  2  C4 3C                .WORD   LAB_ADD-1
00114F  2  79                   .BYTE   $79             ; -
001150  2  A9 3C                .WORD   LAB_SUBTRACT-1
001152  2  7B                   .BYTE   $7B             ; *
001153  2  45 3E                .WORD   LAB_MULTIPLY-1
001155  2  7B                   .BYTE   $7B             ; /
001156  2  5D 3F                .WORD   LAB_DIVIDE-1
001158  2  7F                   .BYTE   $7F             ; ^
001159  2  4D 44                .WORD   LAB_POWER-1
00115B  2  50                   .BYTE   $50             ; AND
00115C  2  59 30                .WORD   LAB_AND-1
00115E  2  46                   .BYTE   $46             ; EOR			new operator
00115F  2  3F 30                .WORD   LAB_EOR-1
001161  2  46                   .BYTE   $46             ; OR
001162  2  4C 30                .WORD   LAB_OR-1
001164  2  56                   .BYTE   $56             ; >>			new operator
001165  2  30 31                .WORD   LAB_RSHIFT-1
001167  2  56                   .BYTE   $56             ; <<			new operator
001168  2  18 31                .WORD   LAB_LSHIFT-1
00116A  2  7D                   .BYTE   $7D             ; >
00116B  2  86 44                .WORD   LAB_GTHAN-1
00116D  2  5A                   .BYTE   $5A             ; =
00116E  2  97 2F                .WORD   LAB_EQUAL-1
001170  2  64                   .BYTE   $64             ; <
001171  2  7A 30                .WORD   LAB_LTHAN-1
001173  2               
001173  2               ; keywords start with ..
001173  2               ; this is the first character table and must be in alphabetic order
001173  2               
001173  2               TAB_1STC:
001173  2  2A                   .BYTE   "*"
001174  2  2B                   .BYTE   "+"
001175  2  2D                   .BYTE   "-"
001176  2  2F                   .BYTE   "/"
001177  2  3C                   .BYTE   "<"
001178  2  3D                   .BYTE   "="
001179  2  3E                   .BYTE   ">"
00117A  2  3F                   .BYTE   "?"
00117B  2  41                   .BYTE   "A"
00117C  2  42                   .BYTE   "B"
00117D  2  43                   .BYTE   "C"
00117E  2  44                   .BYTE   "D"
00117F  2  45                   .BYTE   "E"
001180  2  46                   .BYTE   "F"
001181  2  47                   .BYTE   "G"
001182  2  48                   .BYTE   "H"
001183  2  49                   .BYTE   "I"
001184  2  4B                   .BYTE   "K"
001185  2  4C                   .BYTE   "L"
001186  2  4D                   .BYTE   "M"
001187  2  4E                   .BYTE   "N"
001188  2  4F                   .BYTE   "O"
001189  2  50                   .BYTE   "P"
00118A  2  52                   .BYTE   "R"
00118B  2  53                   .BYTE   "S"
00118C  2  54                   .BYTE   "T"
00118D  2  55                   .BYTE   "U"
00118E  2  56                   .BYTE   "V"
00118F  2  57                   .BYTE   "W"
001190  2  5E                   .BYTE   "^"
001191  2  00                   .BYTE   $00             ; table terminator
001192  2               
001192  2               ; pointers to keyword tables
001192  2               
001192  2               TAB_CHRT:
001192  2  CE 11                .WORD   TAB_STAR        ; table for "*"
001194  2  D0 11                .WORD   TAB_PLUS        ; table for "+"
001196  2  D2 11                .WORD   TAB_MNUS        ; table for "-"
001198  2  D4 11                .WORD   TAB_SLAS        ; table for "/"
00119A  2  D6 11                .WORD   TAB_LESS        ; table for "<"
00119C  2  DA 11                .WORD   TAB_EQUL        ; table for "="
00119E  2  DC 11                .WORD   TAB_MORE        ; table for ">"
0011A0  2  E0 11                .WORD   TAB_QEST        ; table for "?"
0011A2  2  E2 11                .WORD   TAB_ASCA        ; table for "A"
0011A4  2  F2 11                .WORD   TAB_ASCB        ; table for "B"
0011A6  2  0B 12                .WORD   TAB_ASCC        ; table for "C"
0011A8  2  30 12                .WORD   TAB_ASCD        ; table for "D"
0011AA  2  5A 12                .WORD   TAB_ASCE        ; table for "E"
0011AC  2  69 12                .WORD   TAB_ASCF        ; table for "F"
0011AE  2  73 12                .WORD   TAB_ASCG        ; table for "G"
0011B0  2  84 12                .WORD   TAB_ASCH        ; table for "H"
0011B2  2  8A 12                .WORD   TAB_ASCI        ; table for "I"
0011B4  2  AF 12                .WORD   TAB_ASCK        ; table for "K"
0011B6  2  AF 12                .WORD   TAB_ASCL        ; table for "L"
0011B8  2  DA 12                .WORD   TAB_ASCM        ; table for "M"
0011BA  2  EF 12                .WORD   TAB_ASCN        ; table for "N"
0011BC  2  03 13                .WORD   TAB_ASCO        ; table for "O"
0011BE  2  0F 13                .WORD   TAB_ASCP        ; table for "P"
0011C0  2  33 13                .WORD   TAB_ASCR        ; table for "R"
0011C2  2  56 13                .WORD   TAB_ASCS        ; table for "S"
0011C4  2  B3 13                .WORD   TAB_ASCT        ; table for "T"
0011C6  2  C6 13                .WORD   TAB_ASCU        ; table for "U"
0011C8  2  D7 13                .WORD   TAB_ASCV        ; table for "V"
0011CA  2  F3 13                .WORD   TAB_ASCW        ; table for "W"
0011CC  2  02 14                .WORD   TAB_POWR        ; table for "^"
0011CE  2               
0011CE  2               ; tables for each start character, note if a longer keyword with the same start
0011CE  2               ; letters as a shorter one exists then it must come first, else the list is in
0011CE  2               ; alphabetical order as follows ..
0011CE  2               
0011CE  2               ; [keyword,token
0011CE  2               ; [keyword,token]]
0011CE  2               ; end marker (#$00)
0011CE  2               
0011CE  2               TAB_STAR:
0011CE  2  CD 00                .BYTE   TK_MUL,$00      ; *
0011D0  2               TAB_PLUS:
0011D0  2  CB 00                .BYTE   TK_PLUS,$00     ; +
0011D2  2               TAB_MNUS:
0011D2  2  CC 00                .BYTE   TK_MINUS,$00    ; -
0011D4  2               TAB_SLAS:
0011D4  2  CE 00                .BYTE   TK_DIV,$00      ; /
0011D6  2               TAB_LESS:
0011D6  2               LBB_LSHIFT:
0011D6  2  3C D4                .BYTE   "<",TK_LSHIFT   ; <<	note - "<<" must come before "<"
0011D8  2  D7                   .BYTE   TK_LT           ; <
0011D9  2  00                   .BYTE   $00
0011DA  2               TAB_EQUL:
0011DA  2  D6 00                .BYTE   TK_EQUAL,$00    ; =
0011DC  2               TAB_MORE:
0011DC  2               LBB_RSHIFT:
0011DC  2  3E D3                .BYTE   ">",TK_RSHIFT   ; >>	note - ">>" must come before ">"
0011DE  2  D5                   .BYTE   TK_GT           ; >
0011DF  2  00                   .BYTE   $00
0011E0  2               TAB_QEST:
0011E0  2  9E 00                .BYTE   TK_PRINT,$00    ; ?
0011E2  2               TAB_ASCA:
0011E2  2               LBB_ABS:
0011E2  2  42 53 28 DA          .BYTE   "BS(",TK_ABS    ; ABS(
0011E6  2               LBB_AND:
0011E6  2  4E 44 D0             .BYTE   "ND",TK_AND     ; AND
0011E9  2               LBB_ASC:
0011E9  2  53 43 28 EC          .BYTE   "SC(",TK_ASC    ; ASC(
0011ED  2               LBB_ATN:
0011ED  2  54 4E 28 E5          .BYTE   "TN(",TK_ATN    ; ATN(
0011F1  2  00                   .BYTE   $00
0011F2  2               TAB_ASCB:
0011F2  2               LBB_BINS:
0011F2  2  49 4E 24 28          .BYTE   "IN$(",TK_BINS  ; BIN$(
0011F6  2  F1           
0011F7  2               LBB_BITCLR:
0011F7  2  49 54 43 4C          .BYTE   "ITCLR",TK_BITCLR; BITCLR
0011FB  2  52 A7        
0011FD  2               LBB_BITSET:
0011FD  2  49 54 53 45          .BYTE   "ITSET",TK_BITSET; BITSET
001201  2  54 A6        
001203  2               LBB_BITTST:
001203  2  49 54 54 53          .BYTE   "ITTST(",TK_BITTST
001207  2  54 28 F2     
00120A  2               ; BITTST(
00120A  2  00                   .BYTE   $00
00120B  2               TAB_ASCC:
00120B  2               LBB_CALL:
00120B  2  41 4C 4C 9B          .BYTE   "ALL",TK_CALL   ; CALL
00120F  2               LBB_CHRS:
00120F  2  48 52 24 28          .BYTE   "HR$(",TK_CHRS  ; CHR$(
001213  2  EF           
001214  2               LBB_CLEAR:
001214  2  4C 45 41 52          .BYTE   "LEAR",TK_CLEAR ; CLEAR
001218  2  A1           
001219  2               LBB_CLOSE:
001219  2  4C 4F 53 45          .BYTE   "LOSE",TK_CLOSE ; CLOSE
00121D  2  AA           
00121E  2               LBB_COLOR:
00121E  2  4F 4C 4F 52          .BYTE   "OLOR",TK_COLOR ; COLOR
001222  2  B2           
001223  2               LBB_CON:
001223  2  4F 4E 28 FC          .BYTE   "ON(",TK_CON    ;CON
001227  2               LBB_CONT:
001227  2  4F 4E 54 9F          .BYTE   "ONT",TK_CONT   ; CONT
00122B  2               LBB_COS:
00122B  2  4F 53 28 E2          .BYTE   "OS(",TK_COS    ; COS(
00122F  2  00                   .BYTE   $00
001230  2               TAB_ASCD:
001230  2               LBB_DATA:
001230  2  41 54 41 83          .BYTE   "ATA",TK_DATA   ; DATA
001234  2               LBB_DEC:
001234  2  45 43 8A             .BYTE   "EC",TK_DEC     ; DEC
001237  2               LBB_DEF:
001237  2  45 46 99             .BYTE   "EF",TK_DEF     ; DEF
00123A  2               LBB_DIM:
00123A  2  49 4D 87             .BYTE   "IM",TK_DIM     ; DIM
00123D  2               LBB_DIRECTORY:
00123D  2  49 52 45 43          .BYTE   "IRECTORY",TK_DIRECTORY; DIRECTORY
001241  2  54 4F 52 59  
001245  2  84           
001246  2               LBB_DISKCMD:
001246  2  49 53 4B 43          .BYTE   "ISKCMD",TK_DISKCMD; DISKCMD
00124A  2  4D 44 AF     
00124D  2               LBB_DISKSTATUS:
00124D  2  49 53 4B 53          .BYTE   "ISKSTATUS",TK_DISKSTATUS; DISKSTATUS
001251  2  54 41 54 55  
001255  2  53 85        
001257  2               LBB_DO:
001257  2  4F 9C                .BYTE   "O",TK_DO       ; DO
001259  2  00                   .BYTE   $00
00125A  2               TAB_ASCE:
00125A  2               LBB_ELSE:
00125A  2  4C 53 45 C1          .BYTE   "LSE",TK_ELSE   ; ELSE
00125E  2               LBB_END:
00125E  2  4E 44 80             .BYTE   "ND",TK_END     ; END
001261  2               LBB_EOR:
001261  2  4F 52 D1             .BYTE   "OR",TK_EOR     ; EOR
001264  2               LBB_EXP:
001264  2  58 50 28 E1          .BYTE   "XP(",TK_EXP    ; EXP(
001268  2  00                   .BYTE   $00
001269  2               TAB_ASCF:
001269  2               LBB_FN:
001269  2  4E C3                .BYTE   "N",TK_FN       ; FN
00126B  2               LBB_FOR:
00126B  2  4F 52 81             .BYTE   "OR",TK_FOR     ; FOR
00126E  2               LBB_FRE:
00126E  2  52 45 28 DC          .BYTE   "RE(",TK_FRE    ; FRE(
001272  2  00                   .BYTE   $00
001273  2               TAB_ASCG:
001273  2               LBB_GETN:
001273  2  45 54 23 AE          .BYTE   "ET#",TK_GETN   ; GETN
001277  2               LBB_GET:
001277  2  45 54 A4             .BYTE   "ET",TK_GET     ; GET
00127A  2               LBB_GOSUB:
00127A  2  4F 53 55 42          .BYTE   "OSUB",TK_GOSUB ; GOSUB
00127E  2  8F           
00127F  2               LBB_GOTO:
00127F  2  4F 54 4F 8B          .BYTE   "OTO",TK_GOTO   ; GOTO
001283  2  00                   .BYTE   $00
001284  2               TAB_ASCH:
001284  2               LBB_HEXS:
001284  2  45 58 24 28          .BYTE   "EX$(",TK_HEXS  ; HEX$(
001288  2  F0           
001289  2  00                   .BYTE   $00
00128A  2               TAB_ASCI:
00128A  2               LBB_IECINPUT:
00128A  2  45 43 49 4E          .BYTE   "ECINPUT",TK_IECINPUT; IECINPUT
00128E  2  50 55 54 AB  
001292  2               LBB_IECOUTPUT:
001292  2  45 43 4F 55          .BYTE   "ECOUTPUT",TK_IECOUTPUT; IECOUTPUT
001296  2  54 50 55 54  
00129A  2  AC           
00129B  2               LBB_IECST:
00129B  2  45 43 53 54          .BYTE   "ECST",TK_IECST ; IECST
00129F  2  F6           
0012A0  2               LBB_IF:
0012A0  2  46 8D                .BYTE   "F",TK_IF       ; IF
0012A2  2               LBB_INC:
0012A2  2  4E 43 95             .BYTE   "NC",TK_INC     ; INC
0012A5  2               LBB_INPUT:
0012A5  2  4E 50 55 54          .BYTE   "NPUT",TK_INPUT ; INPUT
0012A9  2  86           
0012AA  2               LBB_INT:
0012AA  2  4E 54 28 D9          .BYTE   "NT(",TK_INT    ; INT(
0012AE  2  00                   .BYTE   $00
0012AF  2               TAB_ASCK:
0012AF  2               TAB_ASCL:
0012AF  2               LBB_LCASES:
0012AF  2  43 41 53 45          .BYTE   "CASE$(",TK_LCASES
0012B3  2  24 28 EE     
0012B6  2               ; LCASE$(
0012B6  2               LBB_LEFTS:
0012B6  2  45 46 54 24          .BYTE   "EFT$(",TK_LEFTS; LEFT$(
0012BA  2  28 F9        
0012BC  2               LBB_LEN:
0012BC  2  45 4E 28 E9          .BYTE   "EN(",TK_LEN    ; LEN(
0012C0  2               LBB_LET:
0012C0  2  45 54 89             .BYTE   "ET",TK_LET     ; LET
0012C3  2               LBB_LIST:
0012C3  2  49 53 54 A0          .BYTE   "IST",TK_LIST   ; LIST
0012C7  2               LBB_LOAD:
0012C7  2  4F 41 44 97          .BYTE   "OAD",TK_LOAD   ; LOAD
0012CB  2               LBB_LOCATE:
0012CB  2  4F 43 41 54          .BYTE   "OCATE",TK_LOCATE; LOCATE
0012CF  2  45 B1        
0012D1  2               LBB_LOG:
0012D1  2  4F 47 28 E0          .BYTE   "OG(",TK_LOG    ; LOG(
0012D5  2               LBB_LOOP:
0012D5  2  4F 4F 50 9D          .BYTE   "OOP",TK_LOOP   ; LOOP
0012D9  2  00                   .BYTE   $00
0012DA  2               TAB_ASCM:
0012DA  2               LBB_MAX:
0012DA  2  41 58 28 F3          .BYTE   "AX(",TK_MAX    ; MAX(
0012DE  2               LBB_MIDS:
0012DE  2  49 44 24 28          .BYTE   "ID$(",TK_MIDS  ; MID$(
0012E2  2  FB           
0012E3  2               LBB_MIN:
0012E3  2  49 4E 28 F4          .BYTE   "IN(",TK_MIN    ; MIN(
0012E7  2               LBB_MONITOR:
0012E7  2  4F 4E 49 54          .BYTE   "ONITOR",TK_MONITOR; MONITOR(
0012EB  2  4F 52 A8     
0012EE  2  00                   .BYTE   $00
0012EF  2               TAB_ASCN:
0012EF  2               LBB_NEW:
0012EF  2  45 57 A2             .BYTE   "EW",TK_NEW     ; NEW
0012F2  2               LBB_NEXT:
0012F2  2  45 58 54 82          .BYTE   "EXT",TK_NEXT   ; NEXT
0012F6  2               LBB_NOISE:
0012F6  2  4F 49 53 45          .BYTE   "OISE",TK_NOISE ; NOISE
0012FA  2  BC           
0012FB  2               LBB_NOT:
0012FB  2  4F 54 C6             .BYTE   "OT",TK_NOT     ; NOT
0012FE  2               LBB_NULL:
0012FE  2  55 4C 4C 94          .BYTE   "ULL",TK_NULL   ; NULL
001302  2  00                   .BYTE   $00
001303  2               TAB_ASCO:
001303  2               LBB_OFF:
001303  2  46 46 CA             .BYTE   "FF",TK_OFF     ; OFF
001306  2               LBB_ON:
001306  2  4E 93                .BYTE   "N",TK_ON       ; ON
001308  2               LBB_OPEN:
001308  2  50 45 4E A9          .BYTE   "PEN",TK_OPEN   ; OPEN
00130C  2               LBB_OR:
00130C  2  52 D2                .BYTE   "R",TK_OR       ; OR
00130E  2  00                   .BYTE   $00
00130F  2               TAB_ASCP:
00130F  2               LBB_PATTERN:
00130F  2  41 54 54 45          .BYTE   "ATTERN",TK_PATTERN; PATTERN
001313  2  52 4E B9     
001316  2               LBB_PEEK:
001316  2  45 45 4B 28          .BYTE   "EEK(",TK_PEEK  ; PEEK(
00131A  2  E6           
00131B  2               LBB_PI:
00131B  2  49 F5                .BYTE   "I",TK_PI       ; PI
00131D  2               LBB_PLOT:
00131D  2  4C 4F 54 B8          .BYTE   "LOT",TK_PLOT   ; PLOT
001321  2               LBB_POKE:
001321  2  4F 4B 45 9A          .BYTE   "OKE",TK_POKE   ; POKE
001325  2               LBB_POS:
001325  2  4F 53 28 DD          .BYTE   "OS(",TK_POS    ; POS(
001329  2               LBB_PRINT:
001329  2  52 49 4E 54          .BYTE   "RINT",TK_PRINT ; PRINT
00132D  2  9E           
00132E  2               LBB_PUTN:
00132E  2  55 54 23 AD          .BYTE   "UT#",TK_PUTN   ; PUTN
001332  2  00                   .BYTE   $00
001333  2               TAB_ASCR:
001333  2               LBB_READ:
001333  2  45 41 44 88          .BYTE   "EAD",TK_READ   ; READ
001337  2               LBB_REM:
001337  2  45 4D 91             .BYTE   "EM",TK_REM     ; REM
00133A  2               LBB_RESTORE:
00133A  2  45 53 54 4F          .BYTE   "ESTORE",TK_RESTORE
00133E  2  52 45 8E     
001341  2               ; RESTORE
001341  2               LBB_RETURN:
001341  2  45 54 55 52          .BYTE   "ETURN",TK_RETURN; RETURN
001345  2  4E 90        
001347  2               LBB_RIGHTS:
001347  2  49 47 48 54          .BYTE   "IGHT$(",TK_RIGHTS
00134B  2  24 28 FA     
00134E  2               ; RIGHT$(
00134E  2               LBB_RND:
00134E  2  4E 44 28 DF          .BYTE   "ND(",TK_RND    ; RND(
001352  2               LBB_RUN:
001352  2  55 4E 8C             .BYTE   "UN",TK_RUN     ; RUN
001355  2  00                   .BYTE   $00
001356  2               TAB_ASCS:
001356  2               LBB_SADD:
001356  2  41 44 44 28          .BYTE   "ADD(",TK_SADD  ; SADD(
00135A  2  E8           
00135B  2               LBB_SAVE:
00135B  2  41 56 45 98          .BYTE   "AVE",TK_SAVE   ; SAVE
00135F  2               LBB_SCNCLR:
00135F  2  43 4E 43 4C          .BYTE   "CNCLR",TK_SCNCLR; SCNCLR
001363  2  52 B0        
001365  2               LBB_SCREEN:
001365  2  43 52 45 45          .BYTE   "CREEN",TK_SCREEN; SCREEN
001369  2  4E B4        
00136B  2               LBB_SGN:
00136B  2  47 4E 28 D8          .BYTE   "GN(",TK_SGN    ; SGN(
00136F  2               LBB_SIN:
00136F  2  49 4E 28 E3          .BYTE   "IN(",TK_SIN    ; SIN(
001373  2               LBB_SOUND:
001373  2  4F 55 4E 44          .BYTE   "OUND",TK_SOUND ; SOUND
001377  2  BB           
001378  2               LBB_SPC:
001378  2  50 43 28 C4          .BYTE   "PC(",TK_SPC    ; SPC(
00137C  2               LBB_SPEEK:
00137C  2  50 45 45 4B          .BYTE   "PEEK(",TK_SPEEK; SPEEK
001380  2  28 E7        
001382  2               LBB_SPOKE:
001382  2  50 4F 4B 45          .BYTE   "POKE",TK_SPOKE ; SPOKE
001386  2  B3           
001387  2               LBB_SPRDEF:
001387  2  50 52 44 45          .BYTE   "PRDEF",TK_SPRDEF; SPRDEF
00138B  2  46 B6        
00138D  2               LBB_SPRITE:
00138D  2  50 52 49 54          .BYTE   "PRITE",TK_SPRITE; SPRITE
001391  2  45 B5        
001393  2               LBB_SPRSIZE:
001393  2  50 52 53 49          .BYTE   "PRSIZE",TK_SPRSIZE; SPRSIZE
001397  2  5A 45 B7     
00139A  2               LBB_SQR:
00139A  2  51 52 28 DE          .BYTE   "QR(",TK_SQR    ; SQR(
00139E  2               LBB_STEP:
00139E  2  54 45 50 C7          .BYTE   "TEP",TK_STEP   ; STEP
0013A2  2               LBB_STOP:
0013A2  2  54 4F 50 92          .BYTE   "TOP",TK_STOP   ; STOP
0013A6  2               LBB_STRS:
0013A6  2  54 52 24 28          .BYTE   "TR$(",TK_STRS  ; STR$(
0013AA  2  EA           
0013AB  2               LBB_SWAP:
0013AB  2  57 41 50 A5          .BYTE   "WAP",TK_SWAP   ; SWAP
0013AF  2               LBB_SYS:
0013AF  2  59 53 BA             .BYTE   "YS",TK_SYS     ; SYS
0013B2  2  00                   .BYTE   $00
0013B3  2               TAB_ASCT:
0013B3  2               LBB_TAB:
0013B3  2  41 42 28 C0          .BYTE   "AB(",TK_TAB    ; TAB(
0013B7  2               LBB_TAN:
0013B7  2  41 4E 28 E4          .BYTE   "AN(",TK_TAN    ; TAN(
0013BB  2               LBB_THEN:
0013BB  2  48 45 4E C5          .BYTE   "HEN",TK_THEN   ; THEN
0013BF  2               LBB_TONE:
0013BF  2  4F 4E 45 BD          .BYTE   "ONE",TK_TONE   ; TONE
0013C3  2               LBB_TO:
0013C3  2  4F C2                .BYTE   "O",TK_TO       ; TO
0013C5  2  00                   .BYTE   $00
0013C6  2               TAB_ASCU:
0013C6  2               LBB_UCASES:
0013C6  2  43 41 53 45          .BYTE   "CASE$(",TK_UCASES
0013CA  2  24 28 ED     
0013CD  2               ; UCASE$(
0013CD  2               LBB_UNTIL:
0013CD  2  4E 54 49 4C          .BYTE   "NTIL",TK_UNTIL ; UNTIL
0013D1  2  C8           
0013D2  2               LBB_USR:
0013D2  2  53 52 28 DB          .BYTE   "SR(",TK_USR    ; USR(
0013D6  2  00                   .BYTE   $00
0013D7  2               TAB_ASCV:
0013D7  2               LBB_VAL:
0013D7  2  41 4C 28 EB          .BYTE   "AL(",TK_VAL    ; VAL(
0013DB  2               LBB_VPTR:
0013DB  2  41 52 50 54          .BYTE   "ARPTR(",TK_VPTR; VARPTR(
0013DF  2  52 28 F8     
0013E2  2               LBB_VIDST:
0013E2  2  49 44 53 54          .BYTE   "IDST",TK_VIDST ; VIDST
0013E6  2  F7           
0013E7  2               LBB_VOICE:
0013E7  2  4F 49 43 45          .BYTE   "OICE",TK_VOICE ; VOICE
0013EB  2  BF           
0013EC  2               LBB_VOLUME:
0013EC  2  4F 4C 55 4D          .BYTE   "OLUME",TK_VOLUME; VOLUME
0013F0  2  45 BE        
0013F2  2               
0013F2  2  00                   .BYTE   $00
0013F3  2               TAB_ASCW:
0013F3  2               LBB_WAIT:
0013F3  2  41 49 54 96          .BYTE   "AIT",TK_WAIT   ; WAIT
0013F7  2               LBB_WHILE:
0013F7  2  48 49 4C 45          .BYTE   "HILE",TK_WHILE ; WHILE
0013FB  2  C9           
0013FC  2               LBB_WIDTH:
0013FC  2  49 44 54 48          .BYTE   "IDTH",TK_WIDTH ; WIDTH
001400  2  A3           
001401  2  00                   .BYTE   $00
001402  2               TAB_POWR:
001402  2  CF 00                .BYTE   TK_POWER,$00    ; ^
001404  2               
001404  2               ; new decode table for LIST
001404  2               ; Table is ..
001404  2               ; byte - keyword length, keyword first character
001404  2               ; word - pointer to rest of keyword from dictionary
001404  2               
001404  2               ; note if length is 1 then the pointer is ignored
001404  2               
001404  2               LAB_KEYT:
001404  2  03 45                .BYTE   3,'E'
001406  2  5E 12                .WORD   LBB_END         ; END
001408  2  03 46                .BYTE   3,'F'
00140A  2  6B 12                .WORD   LBB_FOR         ; FOR
00140C  2  04 4E                .BYTE   4,'N'
00140E  2  F2 12                .WORD   LBB_NEXT        ; NEXT
001410  2  04 44                .BYTE   4,'D'
001412  2  30 12                .WORD   LBB_DATA        ; DATA
001414  2  09 44                .BYTE   9,'D'
001416  2  3D 12                .WORD   LBB_DIRECTORY   ; DIRECTORY
001418  2  0A 44                .BYTE   10,'D'
00141A  2  4D 12                .WORD   LBB_DISKSTATUS  ; DISKSTATUS
00141C  2  05 49                .BYTE   5,'I'
00141E  2  A5 12                .WORD   LBB_INPUT       ; INPUT
001420  2  03 44                .BYTE   3,'D'
001422  2  3A 12                .WORD   LBB_DIM         ; DIM
001424  2  04 52                .BYTE   4,'R'
001426  2  33 13                .WORD   LBB_READ        ; READ
001428  2  03 4C                .BYTE   3,'L'
00142A  2  C0 12                .WORD   LBB_LET         ; LET
00142C  2  03 44                .BYTE   3,'D'
00142E  2  34 12                .WORD   LBB_DEC         ; DEC
001430  2  04 47                .BYTE   4,'G'
001432  2  7F 12                .WORD   LBB_GOTO        ; GOTO
001434  2  03 52                .BYTE   3,'R'
001436  2  52 13                .WORD   LBB_RUN         ; RUN
001438  2  02 49                .BYTE   2,'I'
00143A  2  A0 12                .WORD   LBB_IF          ; IF
00143C  2  07 52                .BYTE   7,'R'
00143E  2  3A 13                .WORD   LBB_RESTORE     ; RESTORE
001440  2  05 47                .BYTE   5,'G'
001442  2  7A 12                .WORD   LBB_GOSUB       ; GOSUB
001444  2  06 52                .BYTE   6,'R'
001446  2  41 13                .WORD   LBB_RETURN      ; RETURN
001448  2  03 52                .BYTE   3,'R'
00144A  2  37 13                .WORD   LBB_REM         ; REM
00144C  2  04 53                .BYTE   4,'S'
00144E  2  A2 13                .WORD   LBB_STOP        ; STOP
001450  2  02 4F                .BYTE   2,'O'
001452  2  06 13                .WORD   LBB_ON          ; ON
001454  2  04 4E                .BYTE   4,'N'
001456  2  FE 12                .WORD   LBB_NULL        ; NULL
001458  2  03 49                .BYTE   3,'I'
00145A  2  A2 12                .WORD   LBB_INC         ; INC
00145C  2  04 57                .BYTE   4,'W'
00145E  2  F3 13                .WORD   LBB_WAIT        ; WAIT
001460  2  04 4C                .BYTE   4,'L'
001462  2  C7 12                .WORD   LBB_LOAD        ; LOAD
001464  2  04 53                .BYTE   4,'S'
001466  2  5B 13                .WORD   LBB_SAVE        ; SAVE
001468  2  03 44                .BYTE   3,'D'
00146A  2  37 12                .WORD   LBB_DEF         ; DEF
00146C  2  04 50                .BYTE   4,'P'
00146E  2  21 13                .WORD   LBB_POKE        ; POKE
001470  2  04 43                .BYTE   4,'C'
001472  2  0B 12                .WORD   LBB_CALL        ; CALL
001474  2  02 44                .BYTE   2,'D'
001476  2  57 12                .WORD   LBB_DO          ; DO
001478  2  04 4C                .BYTE   4,'L'
00147A  2  D5 12                .WORD   LBB_LOOP        ; LOOP
00147C  2  05 50                .BYTE   5,'P'
00147E  2  29 13                .WORD   LBB_PRINT       ; PRINT
001480  2  04 43                .BYTE   4,'C'
001482  2  27 12                .WORD   LBB_CONT        ; CONT
001484  2  04 4C                .BYTE   4,'L'
001486  2  C3 12                .WORD   LBB_LIST        ; LIST
001488  2  05 43                .BYTE   5,'C'
00148A  2  14 12                .WORD   LBB_CLEAR       ; CLEAR
00148C  2  03 4E                .BYTE   3,'N'
00148E  2  EF 12                .WORD   LBB_NEW         ; NEW
001490  2  05 57                .BYTE   5,'W'
001492  2  FC 13                .WORD   LBB_WIDTH       ; WIDTH
001494  2  03 47                .BYTE   3,'G'
001496  2  77 12                .WORD   LBB_GET         ; GET
001498  2  04 53                .BYTE   4,'S'
00149A  2  AB 13                .WORD   LBB_SWAP        ; SWAP
00149C  2  06 42                .BYTE   6,'B'
00149E  2  FD 11                .WORD   LBB_BITSET      ; BITSET
0014A0  2  06 42                .BYTE   6,'B'
0014A2  2  F7 11                .WORD   LBB_BITCLR      ; BITCLR
0014A4  2  07 4D                .BYTE   7,'M'
0014A6  2  E7 12                .WORD   LBB_MONITOR     ; MONITOR
0014A8  2  04 4F                .BYTE   4,'O'
0014AA  2  08 13                .WORD   LBB_OPEN        ; OPEN
0014AC  2  05 43                .BYTE   5,'C'
0014AE  2  19 12                .WORD   LBB_CLOSE       ; CLOSE
0014B0  2  08 49                .BYTE   8,'I'
0014B2  2  8A 12                .WORD   LBB_IECINPUT    ; IECINPUT
0014B4  2  09 49                .BYTE   9,'I'
0014B6  2  92 12                .WORD   LBB_IECOUTPUT   ; IECOUTPUT
0014B8  2  04 50                .BYTE   4,'P'
0014BA  2  2E 13                .WORD   LBB_PUTN        ; PUTN
0014BC  2  04 47                .BYTE   4,'G'
0014BE  2  73 12                .WORD   LBB_GETN        ; GETN
0014C0  2  07 44                .BYTE   7,'D'
0014C2  2  46 12                .WORD   LBB_DISKCMD     ; DISKCMD
0014C4  2  06 53                .BYTE   6,'S'
0014C6  2  5F 13                .WORD   LBB_SCNCLR      ; SCNCLR
0014C8  2  06 4C                .BYTE   6,'L'
0014CA  2  CB 12                .WORD   LBB_LOCATE      ; LOCATE
0014CC  2  05 43                .BYTE   5,'C'
0014CE  2  1E 12                .WORD   LBB_COLOR       ; COLOR
0014D0  2  05 53                .BYTE   5,'S'
0014D2  2  82 13                .WORD   LBB_SPOKE       ; SPOKE
0014D4  2  06 53                .BYTE   6,'S'
0014D6  2  65 13                .WORD   LBB_SCREEN      ; SCREEN
0014D8  2  06 53                .BYTE   6,'S'
0014DA  2  8D 13                .WORD   LBB_SPRITE      ; SPRITE
0014DC  2  06 53                .BYTE   6,'S'
0014DE  2  87 13                .WORD   LBB_SPRDEF      ; SPRDEF
0014E0  2  07 53                .BYTE   7,'S'
0014E2  2  93 13                .WORD   LBB_SPRSIZE     ; SPRSIZE
0014E4  2  04 50                .BYTE   4,'P'
0014E6  2  1D 13                .WORD   LBB_PLOT        ; PLOT
0014E8  2  07 50                .BYTE   7,'P'
0014EA  2  0F 13                .WORD   LBB_PATTERN     ; PATTERN
0014EC  2  03 53                .BYTE   3,'S'
0014EE  2  AF 13                .WORD   LBB_SYS         ; SYS
0014F0  2  05 53                .BYTE   5,'S'
0014F2  2  73 13                .WORD   LBB_SOUND       ; SOUND
0014F4  2  05 4E                .BYTE   5,'N'
0014F6  2  F6 12                .WORD   LBB_NOISE       ; NOISE
0014F8  2  04 54                .BYTE   4,'T'
0014FA  2  BF 13                .WORD   LBB_TONE        ; TONE
0014FC  2  06 56                .BYTE   6,'V'
0014FE  2  EC 13                .WORD   LBB_VOLUME      ; VOLUME
001500  2  05 56                .BYTE   5,'V'
001502  2  E7 13                .WORD   LBB_VOICE       ; VOICE
001504  2               
001504  2               ; secondary commands (can't start a statement)
001504  2               
001504  2  04 54                .BYTE   4,'T'
001506  2  B3 13                .WORD   LBB_TAB         ; TAB
001508  2  04 45                .BYTE   4,'E'
00150A  2  5A 12                .WORD   LBB_ELSE        ; ELSE
00150C  2  02 54                .BYTE   2,'T'
00150E  2  C3 13                .WORD   LBB_TO          ; TO
001510  2  02 46                .BYTE   2,'F'
001512  2  69 12                .WORD   LBB_FN          ; FN
001514  2  04 53                .BYTE   4,'S'
001516  2  78 13                .WORD   LBB_SPC         ; SPC
001518  2  04 54                .BYTE   4,'T'
00151A  2  BB 13                .WORD   LBB_THEN        ; THEN
00151C  2  03 4E                .BYTE   3,'N'
00151E  2  FB 12                .WORD   LBB_NOT         ; NOT
001520  2  04 53                .BYTE   4,'S'
001522  2  9E 13                .WORD   LBB_STEP        ; STEP
001524  2  05 55                .BYTE   5,'U'
001526  2  CD 13                .WORD   LBB_UNTIL       ; UNTIL
001528  2  05 57                .BYTE   5,'W'
00152A  2  F7 13                .WORD   LBB_WHILE       ; WHILE
00152C  2  03 4F                .BYTE   3,'O'
00152E  2  03 13                .WORD   LBB_OFF         ; OFF
001530  2               
001530  2               ; opperators
001530  2               
001530  2  01 2B                .BYTE   1,'+'
001532  2  00 00                .WORD   $0000           ; +
001534  2  01 2D                .BYTE   1,'-'
001536  2  00 00                .WORD   $0000           ; -
001538  2  01 2A                .BYTE   1,'*'
00153A  2  00 00                .WORD   $0000           ; *
00153C  2  01 2F                .BYTE   1,'/'
00153E  2  00 00                .WORD   $0000           ; /
001540  2  01 5E                .BYTE   1,'^'
001542  2  00 00                .WORD   $0000           ; ^
001544  2  03 41                .BYTE   3,'A'
001546  2  E6 11                .WORD   LBB_AND         ; AND
001548  2  03 45                .BYTE   3,'E'
00154A  2  61 12                .WORD   LBB_EOR         ; EOR
00154C  2  02 4F                .BYTE   2,'O'
00154E  2  0C 13                .WORD   LBB_OR          ; OR
001550  2  02 3E                .BYTE   2,'>'
001552  2  DC 11                .WORD   LBB_RSHIFT      ; >>
001554  2  02 3C                .BYTE   2,'<'
001556  2  D6 11                .WORD   LBB_LSHIFT      ; <<
001558  2  01 3E                .BYTE   1,'>'
00155A  2  00 00                .WORD   $0000           ; >
00155C  2  01 3D                .BYTE   1,'='
00155E  2  00 00                .WORD   $0000           ; =
001560  2  01 3C                .BYTE   1,'<'
001562  2  00 00                .WORD   $0000           ; <
001564  2               
001564  2               ; functions
001564  2               
001564  2  04 53                .BYTE   4,'S'           ;
001566  2  6B 13                .WORD   LBB_SGN         ; SGN
001568  2  04 49                .BYTE   4,'I'           ;
00156A  2  AA 12                .WORD   LBB_INT         ; INT
00156C  2  04 41                .BYTE   4,'A'           ;
00156E  2  E2 11                .WORD   LBB_ABS         ; ABS
001570  2  04 55                .BYTE   4,'U'           ;
001572  2  D2 13                .WORD   LBB_USR         ; USR
001574  2  04 46                .BYTE   4,'F'           ;
001576  2  6E 12                .WORD   LBB_FRE         ; FRE
001578  2  04 50                .BYTE   4,'P'           ;
00157A  2  25 13                .WORD   LBB_POS         ; POS
00157C  2  04 53                .BYTE   4,'S'           ;
00157E  2  9A 13                .WORD   LBB_SQR         ; SQR
001580  2  04 52                .BYTE   4,'R'           ;
001582  2  4E 13                .WORD   LBB_RND         ; RND
001584  2  04 4C                .BYTE   4,'L'           ;
001586  2  D1 12                .WORD   LBB_LOG         ; LOG
001588  2  04 45                .BYTE   4,'E'           ;
00158A  2  64 12                .WORD   LBB_EXP         ; EXP
00158C  2  04 43                .BYTE   4,'C'           ;
00158E  2  2B 12                .WORD   LBB_COS         ; COS
001590  2  04 53                .BYTE   4,'S'           ;
001592  2  6F 13                .WORD   LBB_SIN         ; SIN
001594  2  04 54                .BYTE   4,'T'           ;
001596  2  B7 13                .WORD   LBB_TAN         ; TAN
001598  2  04 41                .BYTE   4,'A'           ;
00159A  2  ED 11                .WORD   LBB_ATN         ; ATN
00159C  2  05 50                .BYTE   5,'P'           ;
00159E  2  16 13                .WORD   LBB_PEEK        ; PEEK
0015A0  2  06 53                .BYTE   6,'S'
0015A2  2  7C 13                .WORD   LBB_SPEEK       ; SPEEK
0015A4  2  05 53                .BYTE   5,'S'           ;
0015A6  2  56 13                .WORD   LBB_SADD        ; SADD
0015A8  2  04 4C                .BYTE   4,'L'           ;
0015AA  2  BC 12                .WORD   LBB_LEN         ; LEN
0015AC  2  05 53                .BYTE   5,'S'           ;
0015AE  2  A6 13                .WORD   LBB_STRS        ; STR$
0015B0  2  04 56                .BYTE   4,'V'           ;
0015B2  2  D7 13                .WORD   LBB_VAL         ; VAL
0015B4  2  04 41                .BYTE   4,'A'           ;
0015B6  2  E9 11                .WORD   LBB_ASC         ; ASC
0015B8  2  07 55                .BYTE   7,'U'           ;
0015BA  2  C6 13                .WORD   LBB_UCASES      ; UCASE$
0015BC  2  07 4C                .BYTE   7,'L'           ;
0015BE  2  AF 12                .WORD   LBB_LCASES      ; LCASE$
0015C0  2  05 43                .BYTE   5,'C'           ;
0015C2  2  0F 12                .WORD   LBB_CHRS        ; CHR$
0015C4  2  05 48                .BYTE   5,'H'           ;
0015C6  2  84 12                .WORD   LBB_HEXS        ; HEX$
0015C8  2  05 42                .BYTE   5,'B'           ;
0015CA  2  F2 11                .WORD   LBB_BINS        ; BIN$
0015CC  2  07 42                .BYTE   7,'B'           ;
0015CE  2  03 12                .WORD   LBB_BITTST      ; BITTST
0015D0  2  04 4D                .BYTE   4,'M'           ;
0015D2  2  DA 12                .WORD   LBB_MAX         ; MAX
0015D4  2  04 4D                .BYTE   4,'M'           ;
0015D6  2  E3 12                .WORD   LBB_MIN         ; MIN
0015D8  2  02 50                .BYTE   2,'P'           ;
0015DA  2  1B 13                .WORD   LBB_PI          ; PI
0015DC  2  05 49                .BYTE   5,'I'           ;
0015DE  2  9B 12                .WORD   LBB_IECST       ; IECST
0015E0  2  07 56                .BYTE   7,'V'           ;
0015E2  2  E2 13                .WORD   LBB_VIDST       ; VIDST
0015E4  2  05 56                .BYTE   5,'V'           ;
0015E6  2  DB 13                .WORD   LBB_VPTR        ; VARPTR
0015E8  2  06 4C                .BYTE   6,'L'           ;
0015EA  2  B6 12                .WORD   LBB_LEFTS       ; LEFT$
0015EC  2  07 52                .BYTE   7,'R'           ;
0015EE  2  47 13                .WORD   LBB_RIGHTS      ; RIGHT$
0015F0  2  05 4D                .BYTE   5,'M'           ;
0015F2  2  DE 12                .WORD   LBB_MIDS        ; MID$
0015F4  2  04 43                .BYTE   4,'C'           ;
0015F6  2  23 12                .WORD   LBB_CON         ; CON
0015F8  2               
0015F8  1               
0015F8  1               ; DEFINITIONS
0015F8  1                       .INCLUDE "definitions.asm"
0015F8  2               PROGRAMBANK     = $FF           ; BANK THAT THE INTREPRETER LIVES IN
0015F8  2               DATABANK        = $02           ; BANK THAT THE DATA LIVES IN
0015F8  2               
0015F8  2               FNBUFFER        = $000F00       ; FILE NAME BUFFER, MUST BE IN ZERO BANK!
0015F8  2               
0015F8  2               
0015F8  2               
0015F8  2               ; offsets from a base of X or Y
0015F8  2               
0015F8  2               PLUS_0          = $00           ; X or Y plus 0
0015F8  2               PLUS_1          = $01           ; X or Y plus 1
0015F8  2               PLUS_2          = $02           ; X or Y plus 2
0015F8  2               PLUS_3          = $03           ; X or Y plus 3
0015F8  2               
0015F8  2               STACK_BOTTOM    = $D000         ; stack bottom, no offset
0015F8  2               STACK           = $DFFF         ; stack top, no offset
0015F8  2               
0015F8  2               ccflag          = $000200       ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
0015F8  2               ccbyte          = ccflag+1      ; BASIC CTRL-C byte
0015F8  2               ccnull          = ccbyte+1      ; BASIC CTRL-C byte timeout
0015F8  2               
0015F8  2               VEC_CC          = ccnull+1      ; ctrl c check vector
0015F8  2               
0015F8  2               
0015F8  2               ; Ibuffs can now be anywhere in RAM AS LONG AS IT IS BEFORE RAM_BASE AND IS NOT PAGE ALIGNED!, ensure that the max length is < $80
0015F8  2               
0015F8  2                       .IF     PROGRAMBANK=DATABANK
0015F8  2               Ibuffs              = (ENDOFBASIC&$FF00)+$181
0015F8  2                       .ELSE
0015F8  2               Ibuffs              = $2000+$181
0015F8  2               LIbuffs             = (DATABANK*$10000)+$2000+$181
0015F8  2                       .ENDIF
0015F8  2               Ibuffe          = Ibuffs+80     ; end of input buffer
0015F8  2               
0015F8  2               Ram_base        = ((Ibuffe+1)&$FF00)+$100; start of user RAM (set as needed, should be page aligned)
0015F8  2               Ram_top         = $FF00         ; end of user RAM+1 (set as needed, should be page aligned)
0015F8  2               
0015F8  1               
0015F8  1               ; MESSAGES
0015F8  1                       .INCLUDE "messages.asm"
0015F8  2               
0015F8  2               LAB_CONMSG:
0015F8  2  80 80 80 83          .BYTE   $80,$80,$80,$83,$84,$85,"  Werner Engineering 816",$0D
0015FC  2  84 85 20 20  
001600  2  57 65 72 6E  
001617  2  81 81 81 83          .BYTE   $81,$81,$81,$83,$84,$85,"  Enhanced BASIC 65816 2.3",$0D
00161B  2  84 85 20 20  
00161F  2  45 6E 68 61  
001638  2  82 82 82 83          .BYTE   $82,$82,$82,$83,$84,$85,00
00163C  2  84 85 00     
00163F  2               
00163F  2               LAB_SMSG:
00163F  2  20 42 79 74          .BYTE   " Bytes free",$00
001643  2  65 73 20 66  
001647  2  72 65 65 00  
00164B  2               LAB_SMSG1:
00164B  2  0D 0A 45 6E          .BYTE   $0D,$0A,"Enhanced BASIC 65816 2.3",$00
00164F  2  68 61 6E 63  
001653  2  65 64 20 42  
001666  2  0D 0A 44 45          .BYTE   $0D,$0A,"DERIVED FROM ehBASIC BY LEE DAVIDSON",$00
00166A  2  52 49 56 45  
00166E  2  44 20 46 52  
00168D  2               
00168D  2               ; BASIC messages, mostly error messages
00168D  2               
00168D  2               LAB_BAER:
00168D  2  B1 16                .WORD   ERR_NF          ;$00 NEXT without FOR
00168F  2  C2 16                .WORD   ERR_SN          ;$02 syntax
001691  2  C9 16                .WORD   ERR_RG          ;$04 RETURN without GOSUB
001693  2  DE 16                .WORD   ERR_OD          ;$06 out of data
001695  2  EA 16                .WORD   ERR_FC          ;$08 function call
001697  2  F8 16                .WORD   ERR_OV          ;$0A overflow
001699  2  01 17                .WORD   ERR_OM          ;$0C out of memory
00169B  2  0F 17                .WORD   ERR_US          ;$0E undefined statement
00169D  2  23 17                .WORD   ERR_BS          ;$10 array bounds
00169F  2  30 17                .WORD   ERR_DD          ;$12 double dimension array
0016A1  2  41 17                .WORD   ERR_D0          ;$14 divide by 0
0016A3  2  50 17                .WORD   ERR_ID          ;$16 illegal direct
0016A5  2  5F 17                .WORD   ERR_TM          ;$18 type mismatch
0016A7  2  6D 17                .WORD   ERR_LS          ;$1A long string
0016A9  2  7D 17                .WORD   ERR_ST          ;$1C string too complex
0016AB  2  90 17                .WORD   ERR_CN          ;$1E continue error
0016AD  2  9F 17                .WORD   ERR_UF          ;$20 undefined function
0016AF  2  B2 17                .WORD   ERR_LD          ;$22 LOOP without DO
0016B1  2               
0016B1  2               ERR_NF:
0016B1  2  4E 45 58 54          .BYTE   "NEXT without FOR",$00
0016B5  2  20 77 69 74  
0016B9  2  68 6F 75 74  
0016C2  2               ERR_SN:
0016C2  2  53 79 6E 74          .BYTE   "Syntax",$00
0016C6  2  61 78 00     
0016C9  2               ERR_RG:
0016C9  2  52 45 54 55          .BYTE   "RETURN without GOSUB",$00
0016CD  2  52 4E 20 77  
0016D1  2  69 74 68 6F  
0016DE  2               ERR_OD:
0016DE  2  4F 75 74 20          .BYTE   "Out of DATA",$00
0016E2  2  6F 66 20 44  
0016E6  2  41 54 41 00  
0016EA  2               ERR_FC:
0016EA  2  46 75 6E 63          .BYTE   "Function call",$00
0016EE  2  74 69 6F 6E  
0016F2  2  20 63 61 6C  
0016F8  2               ERR_OV:
0016F8  2  4F 76 65 72          .BYTE   "Overflow",$00
0016FC  2  66 6C 6F 77  
001700  2  00           
001701  2               ERR_OM:
001701  2  4F 75 74 20          .BYTE   "Out of memory",$00
001705  2  6F 66 20 6D  
001709  2  65 6D 6F 72  
00170F  2               ERR_US:
00170F  2  55 6E 64 65          .BYTE   "Undefined statement",$00
001713  2  66 69 6E 65  
001717  2  64 20 73 74  
001723  2               ERR_BS:
001723  2  41 72 72 61          .BYTE   "Array bounds",$00
001727  2  79 20 62 6F  
00172B  2  75 6E 64 73  
001730  2               ERR_DD:
001730  2  44 6F 75 62          .BYTE   "Double dimension",$00
001734  2  6C 65 20 64  
001738  2  69 6D 65 6E  
001741  2               ERR_D0:
001741  2  44 69 76 69          .BYTE   "Divide by zero",$00
001745  2  64 65 20 62  
001749  2  79 20 7A 65  
001750  2               ERR_ID:
001750  2  49 6C 6C 65          .BYTE   "Illegal direct",$00
001754  2  67 61 6C 20  
001758  2  64 69 72 65  
00175F  2               ERR_TM:
00175F  2  54 79 70 65          .BYTE   "Type mismatch",$00
001763  2  20 6D 69 73  
001767  2  6D 61 74 63  
00176D  2               ERR_LS:
00176D  2  53 74 72 69          .BYTE   "String too long",$00
001771  2  6E 67 20 74  
001775  2  6F 6F 20 6C  
00177D  2               ERR_ST:
00177D  2  53 74 72 69          .BYTE   "String too complex",$00
001781  2  6E 67 20 74  
001785  2  6F 6F 20 63  
001790  2               ERR_CN:
001790  2  43 61 6E 27          .BYTE   "Can't continue",$00
001794  2  74 20 63 6F  
001798  2  6E 74 69 6E  
00179F  2               ERR_UF:
00179F  2  55 6E 64 65          .BYTE   "Undefined function",$00
0017A3  2  66 69 6E 65  
0017A7  2  64 20 66 75  
0017B2  2               ERR_LD:
0017B2  2  4C 4F 4F 50          .BYTE   "LOOP without DO",$00
0017B6  2  20 77 69 74  
0017BA  2  68 6F 75 74  
0017C2  2               
0017C2  2               LAB_BMSG:
0017C2  2  0D 0A 42 72          .BYTE   $0D,$0A,"Break",$00
0017C6  2  65 61 6B 00  
0017CA  2               LAB_EMSG:
0017CA  2  20 45 72 72          .BYTE   " Error",$00
0017CE  2  6F 72 00     
0017D1  2               LAB_LMSG:
0017D1  2  20 69 6E 20          .BYTE   " in line ",$00
0017D5  2  6C 69 6E 65  
0017D9  2  20 00        
0017DB  2               LAB_RMSG:
0017DB  2  0D 0A 52 65          .BYTE   $0D,$0A,"Ready",$0D,$0A,$00
0017DF  2  61 64 79 0D  
0017E3  2  0A 00        
0017E5  2               
0017E5  2               LAB_IMSG:
0017E5  2  20 45 78 74          .BYTE   " Extra ignored",$0D,$0A,$00
0017E9  2  72 61 20 69  
0017ED  2  67 6E 6F 72  
0017F6  2               LAB_REDO:
0017F6  2  20 52 65 64          .BYTE   " Redo from start",$0D,$0A,$00
0017FA  2  6F 20 66 72  
0017FE  2  6F 6D 20 73  
001809  2               LAB_IOER:
001809  2  20 49 2F 4F          .BYTE   " I/O Error",$0D,$0A,$00
00180D  2  20 45 72 72  
001811  2  6F 72 0D 0A  
001816  2               
001816  1               
001816  1               ; NUMERIC CONSTANTS
001816  1                       .INCLUDE "numconst.asm"
001816  2               ; numeric constants and series
001816  2               ; constants and series for LOG(n)
001816  2               LAB_25A0:
001816  2  02                   .BYTE   $02             ; counter
001817  2  80 19 56 62          .BYTE   $80,$19,$56,$62 ; 0.59898
00181B  2  80 76 22 F3          .BYTE   $80,$76,$22,$F3 ; 0.96147
00181F  2  82 38 AA 40          .BYTE   $82,$38,$AA,$40 ; 2.88539
001823  2               
001823  2               LAB_25AD:
001823  2  80 35 04 F3          .BYTE   $80,$35,$04,$F3 ; 0.70711	1/root 2
001827  2               LAB_25B1:
001827  2  81 35 04 F3          .BYTE   $81,$35,$04,$F3 ; 1.41421	root 2
00182B  2               LAB_25B5:
00182B  2  80 80 00 00          .BYTE   $80,$80,$00,$00 ; -0.5
00182F  2               LAB_25B9:
00182F  2  80 31 72 18          .BYTE   $80,$31,$72,$18 ; 0.69315	LOG(2)
001833  2               
001833  2               ; numeric PRINT constants
001833  2               LAB_2947:
001833  2  91 43 4F F8          .BYTE   $91,$43,$4F,$F8 ; 99999.9375 (max value with at least one decimal)
001837  2               LAB_294B:
001837  2  94 74 23 F7          .BYTE   $94,$74,$23,$F7 ; 999999.4375 (max value before scientific notation)
00183B  2               LAB_294F:
00183B  2  94 74 24 00          .BYTE   $94,$74,$24,$00 ; 1000000
00183F  2               
00183F  2               ; EXP(n) constants and series
00183F  2               LAB_2AFA:
00183F  2  81 38 AA 3B          .BYTE   $81,$38,$AA,$3B ; 1.4427	(1/LOG base 2 e)
001843  2               LAB_2AFE:
001843  2  06                   .BYTE   $06             ; counter
001844  2  74 63 90 8C          .BYTE   $74,$63,$90,$8C ; 2.17023e-4
001848  2  77 23 0C AB          .BYTE   $77,$23,$0C,$AB ; 0.00124
00184C  2  7A 1E 94 00          .BYTE   $7A,$1E,$94,$00 ; 0.00968
001850  2  7C 63 42 80          .BYTE   $7C,$63,$42,$80 ; 0.05548
001854  2  7E 75 FE D0          .BYTE   $7E,$75,$FE,$D0 ; 0.24023
001858  2  80 31 72 15          .BYTE   $80,$31,$72,$15 ; 0.69315
00185C  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.00000
001860  2               
001860  2               ; trigonometric constants and series
001860  2               LAB_2C78:
001860  2  81 49 0F DB          .BYTE   $81,$49,$0F,$DB ; 1.570796371 (pi/2) as floating #
001864  2               LAB_2C84:
001864  2  04                   .BYTE   $04             ; counter
001865  2  86 1E D7 FB          .BYTE   $86,$1E,$D7,$FB ; 39.7109
001869  2  87 99 26 65          .BYTE   $87,$99,$26,$65 ;-76.575
00186D  2  87 23 34 58          .BYTE   $87,$23,$34,$58 ; 81.6022
001871  2  86 A5 5D E1          .BYTE   $86,$A5,$5D,$E1 ;-41.3417
001875  2               LAB_2C7C:
001875  2  83 49 0F DB          .BYTE   $83,$49,$0F,$DB ; 6.28319 (2*pi) as floating #
001879  2               
001879  2               LAB_2CC9:
001879  2  08                   .BYTE   $08             ; counter
00187A  2  78 3A C5 37          .BYTE   $78,$3A,$C5,$37 ; 0.00285
00187E  2  7B 83 A2 5C          .BYTE   $7B,$83,$A2,$5C ;-0.0160686
001882  2  7C 2E DD 4D          .BYTE   $7C,$2E,$DD,$4D ; 0.0426915
001886  2  7D 99 B0 1E          .BYTE   $7D,$99,$B0,$1E ;-0.0750429
00188A  2  7D 59 ED 24          .BYTE   $7D,$59,$ED,$24 ; 0.106409
00188E  2  7E 91 72 00          .BYTE   $7E,$91,$72,$00 ;-0.142036
001892  2  7E 4C B9 73          .BYTE   $7E,$4C,$B9,$73 ; 0.199926
001896  2  7F AA AA 53          .BYTE   $7F,$AA,$AA,$53 ;-0.333331
00189A  2               
00189A  2               LAB_1D96        = *+1           ; $00,$00 used for undefined variables
00189A  2               LAB_259C:
00189A  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.000000, used for INC
00189E  2               LAB_2AFD:
00189E  2  81 80 00 00          .BYTE   $81,$80,$00,$00 ; -1.00000, used for DEC. must be on the same page as +1.00
0018A2  2               
0018A2  2               ; misc constants
0018A2  2               LAB_1DF7:
0018A2  2  90                   .BYTE   $90             ;-32768 (uses first three bytes from 0.5)
0018A3  2               LAB_2A96:
0018A3  2  80 00 00 00          .BYTE   $80,$00,$00,$00 ; 0.5
0018A7  2               LAB_2C80:
0018A7  2  7F 00 00 00          .BYTE   $7F,$00,$00,$00 ; 0.25
0018AB  2               LAB_26B5:
0018AB  2  84 20 00 00          .BYTE   $84,$20,$00,$00 ; 10.0000 divide by 10 constant
0018AF  2               
0018AF  2               ; This table is used in converting numbers to ASCII.
0018AF  2               
0018AF  2               LAB_2A9A:
0018AF  2               LAB_2A9B        = LAB_2A9A+1
0018AF  2               LAB_2A9C        = LAB_2A9B+1
0018AF  2  FE 79 60             .BYTE   $FE,$79,$60     ; -100000
0018B2  2  00 27 10             .BYTE   $00,$27,$10     ; 10000
0018B5  2  FF FC 18             .BYTE   $FF,$FC,$18     ; -1000
0018B8  2  00 00 64             .BYTE   $00,$00,$64     ; 100
0018BB  2  FF FF F6             .BYTE   $FF,$FF,$F6     ; -10
0018BE  2  00 00 01             .BYTE   $00,$00,$01     ; 1
0018C1  2               
0018C1  1               
0018C1  1               ; I/O VECTORS
0018C1  1                       .INCLUDE "iovect.asm"
0018C1  2               ;__________________________________________________________
0018C1  2               ;
0018C1  2               ; BIOS JUMP TABLE (NATIVE)
0018C1  2               ;__________________________________________________________
0018C1  2               LPRINTVEC       = $00FD00
0018C1  2               LINPVEC         = $00FD04
0018C1  2               LINPWVEC        = $00FD08
0018C1  2               LSetXYVEC       = $00FD0C
0018C1  2               LCPYVVEC        = $00FD10
0018C1  2               LSrlUpVEC       = $00FD14
0018C1  2               LSetColorVEC    = $00FD18
0018C1  2               LCURSORVEC      = $00FD1C
0018C1  2               LUNCURSORVEC    = $00FD20
0018C1  2               LWRITERTC       = $00FD24
0018C1  2               LREADRTC        = $00FD28
0018C1  2               LIECIN          = $00FD2C
0018C1  2               LIECOUT         = $00FD30
0018C1  2               LUNTALK         = $00FD34
0018C1  2               LUNLSTN         = $00FD38
0018C1  2               LLISTEN         = $00FD3C
0018C1  2               LTALK           = $00FD40
0018C1  2               LSETLFS         = $00FD44
0018C1  2               LSETNAM         = $00FD48
0018C1  2               LLOAD           = $00FD4C
0018C1  2               LSAVE           = $00FD50
0018C1  2               LIECINIT        = $00FD54
0018C1  2               LIECCLCH        = $00FD58       ; close input and output channels
0018C1  2               LIECOUTC        = $00FD5C       ; open a channel for output
0018C1  2               LIECINPC        = $00FD60       ; open a channel for input
0018C1  2               LIECOPNLF       = $00FD64       ; open a logical file
0018C1  2               LIECCLSLF       = $00FD68       ; close a specified logical file
0018C1  2               LClearScrVec    = $00FD6C       ; clear the  Screen
0018C1  2               
0018C1  2               
0018C1  2               
0018C1  2               CSRX            = $0330         ; CURRENT X POSITION
0018C1  2               CSRY            = $0331         ; CURRENT Y POSITION
0018C1  2               ConsoleDevice   = $0341         ; Current Console Device
0018C1  2               VIDEOWIDTH      = $0343
0018C1  2               TEMP            = $0344
0018C1  2               SpriteAttrs     = $0344
0018C1  2               SpritePatterns  = $0345
0018C1  2               IECSTW          = $000317
0018C1  2               IECMSGM         = $00031F       ; message mode flag,
0018C1  2               ; $C0 = both control and kernal messages,
0018C1  2               ; $80 = control messages only,
0018C1  2               ; $40 = kernal messages only,
0018C1  2               ; $00 = neither control or kernal messages
0018C1  2               LOADBUFL        = $000322       ; IEC buffer Pointer
0018C1  2               LOADBUFH        = LOADBUFL+1
0018C1  2               LOADBANK        = LOADBUFL+2    ; BANK buffer Pointer
0018C1  2               IECSTRTL        = $00031D       ; IEC Start Address Pointer
0018C1  2               IECSTRTH        = IECSTRTL+1
0018C1  2               LINEFLGS        = $03D0         ; 24 BYTES OF LINE POINTERS (3D0 - 3E9 , one extra for scrolling)
0018C1  2               
0018C1  2               
0018C1  2               
0018C1  2               VideoDisplayPage        = $fe31
0018C1  2               VideoTextMode           = $fe35
0018C1  2               VideoLoresMode          = $fe36
0018C1  2               VideoDoubleLores        = $fe37
0018C1  2               VideoHiresMode          = $fe38
0018C1  2               VideoDoubleHires        = $fe39
0018C1  2               Video80col              = $fe3A
0018C1  2               VideoMixedMode          = $fe3b
0018C1  2               VideoQuadLores          = $fe3c
0018C1  2               VideoMonoLores          = $fe3d
0018C1  2               
0018C1  2               
0018C1  2               ;__________________________________________________________
0018C1  2               
0018C1  2               
0018C1  2               
0018C1  2               
0018C1  2               ;___V_INPT_________________________________________________
0018C1  2               ;
0018C1  2               ; MAKE A BIOS CALL TO GET NON-BLOCKING CHARACTER INPUT
0018C1  2               ; THIS COULD BE SERIAL OR KEYBOARD DEPENDING ON BIOS SETTING
0018C1  2               ; RETURNS
0018C1  2               ;   A: CHARACTER
0018C1  2               ;      CARRY SET IF NO CHARACTER
0018C1  2               ;
0018C1  2               ;
0018C1  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
0018C1  2               ;__________________________________________________________
0018C1  2               V_INPT:
0018C1  2  8B                   PHB
0018C2  2  0B                   PHD
0018C3  2  DA                   PHX
0018C4  2  A2 00                LDX     #$00
0018C6  2  DA                   PHX
0018C7  2  AB                   PLB
0018C8  2  22 04 FD 00          JSL     LINPVEC         ; INCHAR
0018CC  2  FA                   PLX
0018CD  2  2B                   PLD
0018CE  2  AB                   PLB
0018CF  2  60                   RTS
0018D0  2               
0018D0  2               ;___V_OUTP_________________________________________________
0018D0  2               ;
0018D0  2               ; MAKE A BIOS CALL TO SEND CHARACTER TO OUTPUT
0018D0  2               ; THIS COULD BE SERIAL OR TMS9918 CHARACTER DISPLAY
0018D0  2               ;
0018D0  2               ;   A: CHARACTER
0018D0  2               ;
0018D0  2               ;
0018D0  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
0018D0  2               ;__________________________________________________________
0018D0  2               
0018D0  2               V_OUTP: ; send byte to output device
0018D0  2  8B                   PHB
0018D1  2  0B                   PHD
0018D2  2  DA                   PHX
0018D3  2  A6 06                LDX     <VIDEOMODE
0018D5  2  E0 02                CPX     #2
0018D7  2  D0 08                BNE     V_OUTP1
0018D9  2  A2 00                LDX     #$00
0018DB  2  DA                   PHX
0018DC  2  AB                   PLB
0018DD  2  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0018E1  2               V_OUTP1:
0018E1  2  FA                   PLX
0018E2  2  2B                   PLD
0018E3  2  AB                   PLB
0018E4  2  60                   RTS
0018E5  2               
0018E5  2               
0018E5  2                       .INCLUDE "diskcmds.asm"
0018E5  3               .P816
0018E5  3               ;___V_SAVE_________________________________________________
0018E5  3               ;
0018E5  3               ; UTILIZE BIOS TO SAVE BASIC RAM
0018E5  3               ;
0018E5  3               ; STORE CONTENTS IN RAM FROM "Smeml/h" TO "Svarl/h"-1 IN BANK "DATABANK"
0018E5  3               ;
0018E5  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
0018E5  3               ; THIS IS NATIVE '816 CODE
0018E5  3               ;__________________________________________________________
0018E5  3               V_SAVE: ; save BASIC program
0018E5  3  20 5D 2E             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
0018E8  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
0018EA  3  D0 08                BNE     V_SAVE_GO       ; YES, CONTINUE ON
0018EC  3               V_SAVE_ERR:
0018EC  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
0018EE  3  20 1C 23             JSR     LAB_XERR
0018F1  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0018F4  3               V_SAVE_GO:
0018F4  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0018F8  3  A9 C0                LDA     #$C0
0018FA  3  8F 1F 03 00          STA     f:IECMSGM
0018FE  3  A0 00                LDY     #$00
001900  3               V_SAVE_1:
001900  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001904  3  B5 B8 C9 00  
001908  3  D0 04 A2 00  
001916  3  BB                   TYX
001917  3  9F 00 0F 00          STA     F:FNBUFFER,X
00191B  3  C9 00                CMP     #$00
00191D  3  F0 07                BEQ     V_SAVE_2
00191F  3  C9 22                CMP     #'"'
001921  3  F0 03                BEQ     V_SAVE_2
001923  3  C8                   INY
001924  3  D0 DA                BNE     V_SAVE_1
001926  3               V_SAVE_2:
001926  3  98                   TYA                     ; fn length
001927  3  A2 00                LDX     #<FNBUFFER
001929  3  A0 0F                LDY     #>FNBUFFER
00192B  3  8B                   PHB
00192C  3  DA A2 00 DA          SETBANK 0
001930  3  AB FA        
001932  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001936  3  AB                   PLB
001937  3  20 7F 2F             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
00193A  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
00193D  3  A0 01                LDY#1                   ; secondary address
00193F  3  8B                   PHB
001940  3  DA A2 00 DA          SETBANK 0
001944  3  AB FA        
001946  3  22 44 FD 00          JSL     LSETLFS
00194A  3  A5 7A                LDA     <Smemh
00194C  3  8D 1E 03             STA     IECSTRTH
00194F  3  A5 79                LDA     <Smeml
001951  3  8D 1D 03             STA     IECSTRTL
001954  3  A5 7B                LDA     <Svarl
001956  3  8D 22 03             STA     LOADBUFL
001959  3  A5 7C                LDA     <Svarh
00195B  3  8D 23 03             STA     LOADBUFH
00195E  3  A9 02                LDA     #DATABANK
001960  3  8D 24 03             STA     LOADBANK
001963  3  22 50 FD 00          JSL     LSAVE
001967  3  AB                   PLB
001968  3  A9 DB                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
00196A  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
00196C  3  20 E0 2B             JSR     LAB_18C3
00196F  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001972  3               
001972  3               
001972  3               
001972  3               
001972  3               ;___V_LOAD_________________________________________________
001972  3               ;
001972  3               ; UTILIZE BIOS TO LOAD BASIC RAM
001972  3               ;
001972  3               ; LOAD CONTENTS TO RAM "Smeml/h" BANK "DATABANK"
001972  3               ;
001972  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
001972  3               ; THIS IS NATIVE '816 CODE
001972  3               ;__________________________________________________________
001972  3               V_LOAD: ; load BASIC program
001972  3  20 5D 2E             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001975  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001977  3  D0 08                BNE     V_LOAD_GO       ; YES, CONTINUE ON
001979  3               V_LOAD_ERR:
001979  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
00197B  3  20 1C 23             JSR     LAB_XERR
00197E  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001981  3               V_LOAD_GO:
001981  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001985  3  A9 C0                LDA     #$C0
001987  3  8F 1F 03 00          STA     f:IECMSGM
00198B  3  A0 00                LDY     #$00
00198D  3               V_LOAD_1:
00198D  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001991  3  B5 B8 C9 00  
001995  3  D0 04 A2 00  
0019A3  3  BB                   TYX
0019A4  3  9F 00 0F 00          STA     F:FNBUFFER,X
0019A8  3  C9 00                CMP     #$00
0019AA  3  F0 07                BEQ     V_LOAD_2
0019AC  3  C9 22                CMP     #'"'
0019AE  3  F0 03                BEQ     V_LOAD_2
0019B0  3  C8                   INY
0019B1  3  D0 DA                BNE     V_LOAD_1
0019B3  3               V_LOAD_2:
0019B3  3  98                   TYA                     ; fn length
0019B4  3  A2 00                LDX     #<FNBUFFER
0019B6  3  A0 0F                LDY     #>FNBUFFER
0019B8  3  8B                   PHB
0019B9  3  DA A2 00 DA          SETBANK 0
0019BD  3  AB FA        
0019BF  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0019C3  3  AB                   PLB
0019C4  3  20 7F 2F             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0019C7  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0019CA  3  A0 01                LDY#1                   ; secondary address
0019CC  3  8B                   PHB
0019CD  3  DA A2 00 DA          SETBANK 0
0019D1  3  AB FA        
0019D3  3  22 44 FD 00          JSL     LSETLFS
0019D7  3  A5 7A                LDA     <Smemh
0019D9  3  8D 23 03             STA     LOADBUFH
0019DC  3  A5 79                LDA     <Smeml
0019DE  3  8D 22 03             STA     LOADBUFL
0019E1  3  A9 02                LDA     #DATABANK
0019E3  3  8D 24 03             STA     LOADBANK
0019E6  3  22 4C FD 00          JSL     LLOAD
0019EA  3  AD 23 03             LDA     LOADBUFH
0019ED  3  85 7C                STA     <Svarh
0019EF  3  AD 22 03             LDA     LOADBUFL
0019F2  3  85 7B                STA     <Svarl
0019F4  3  AB                   PLB
0019F5  3  A9 DB                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0019F7  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0019F9  3  20 E0 2B             JSR     LAB_18C3
0019FC  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0019FF  3               
0019FF  3               
0019FF  3               ;___V_ERR___________________________________________________
0019FF  3               ;
0019FF  3               ; UTILIZE BIOS TO REPORT IEC IO CHANNEL STATUS
0019FF  3               ;
0019FF  3               ;
0019FF  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
0019FF  3               ; THIS IS NATIVE '816 CODE
0019FF  3               ;__________________________________________________________
0019FF  3               V_ERR:
0019FF  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001A03  3  A9 C0                LDA     #$C0
001A05  3  8F 1F 03 00          STA     f:IECMSGM
001A09  3  A0 00                LDY     #$00
001A0B  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001A0E  3               GETIECSTATUS:
001A0E  3  8B                   PHB
001A0F  3  DA                   PHX
001A10  3  DA A2 00 DA          SETBANK 0
001A14  3  AB FA        
001A16  3  A9 0D                LDA     #13
001A18  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A1C  3  A9 0A                LDA     #10
001A1E  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A22  3  A9 00                LDA     #0              ; fn length
001A24  3  A2 00                LDX     #0
001A26  3  A0 00                LDY     #0
001A28  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001A2C  3  FA                   PLX                     ; Device Number
001A2D  3  A0 0F                LDY     #15             ; secondary address
001A2F  3  A9 0F                LDA     #15             ; LFN NUMBER
001A31  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001A35  3  22 64 FD 00          JSL     LIECOPNLF
001A39  3  B0 1E                BCS     IECERROR
001A3B  3  A2 0F                LDX     #15
001A3D  3  22 60 FD 00          JSL     LIECINPC
001A41  3  B0 16                BCS     IECERROR
001A43  3               GETIECSTATUS_1:
001A43  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A47  3  B0 10                BCS     IECERROR
001A49  3  C9 0D                CMP     #13
001A4B  3  F0 0C                BEQ     IECERROR
001A4D  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A51  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001A55  3  4A                   LSR                     ; shift time out read ..
001A56  3  4A                   LSR                     ; .. into carry bit
001A57  3  90 EA                BCC     GETIECSTATUS_1  ; all ok, do another
001A59  3               IECERROR:
001A59  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001A5D  3  A9 0F                LDA     #15
001A5F  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001A63  3  A9 0D                LDA     #13
001A65  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A69  3  A9 0A                LDA     #10
001A6B  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A6F  3  AB                   PLB
001A70  3  A9 DB                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001A72  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001A74  3  20 E0 2B             JSR     LAB_18C3
001A77  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001A7A  3               
001A7A  3               
001A7A  3               
001A7A  3               ;___V_DIR___________________________________________________
001A7A  3               ;
001A7A  3               ; UTILIZE BIOS TO DISPLAY DISK DIRECTORY
001A7A  3               ;
001A7A  3               ;
001A7A  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
001A7A  3               ; THIS IS NATIVE '816 CODE
001A7A  3               ;__________________________________________________________
001A7A  3               V_DIR:
001A7A  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001A7E  3  A9 C0                LDA     #$C0
001A80  3  8F 1F 03 00          STA     f:IECMSGM
001A84  3  A0 00                LDY     #$00
001A86  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001A89  3  8B                   PHB
001A8A  3  DA                   PHX
001A8B  3  A9 24                LDA     #'$'
001A8D  3  8F 00 0F 00          STA     f:FNBUFFER
001A91  3  DA A2 00 DA          SETBANK 0
001A95  3  AB FA        
001A97  3  A9 0D                LDA     #13
001A99  3  22 00 FD 00          JSL     LPRINTVEC
001A9D  3  A9 0A                LDA     #10
001A9F  3  22 00 FD 00          JSL     LPRINTVEC
001AA3  3  A9 01                LDA     #1              ; fn length
001AA5  3  A2 00                LDX     #<FNBUFFER
001AA7  3  A0 0F                LDY     #>FNBUFFER
001AA9  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001AAD  3  FA                   PLX                     ; Device Number
001AAE  3  A0 00                LDY     #0              ; secondary address
001AB0  3  A9 0F                LDA     #15             ; LFN NUMBER
001AB2  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001AB6  3  22 64 FD 00          JSL     LIECOPNLF
001ABA  3  B0 9D                BCS     IECERROR
001ABC  3  A2 0F                LDX     #15
001ABE  3  22 60 FD 00          JSL     LIECINPC
001AC2  3  B0 95                BCS     IECERROR
001AC4  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001AC8  3               GETIECDIRECTORY_1:
001AC8  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001ACC  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001AD0  3  48                   PHA
001AD1  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001AD5  3  FA                   PLX
001AD6  3  AB                   PLB
001AD7  3  8B                   PHB
001AD8  3  20 FE 42             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
001ADB  3  DA A2 00 DA          SETBANK 0
001ADF  3  AB FA        
001AE1  3  A9 20                LDA     #' '
001AE3  3  22 00 FD 00          JSL     LPRINTVEC
001AE7  3  A9 20                LDA     #' '
001AE9  3  22 00 FD 00          JSL     LPRINTVEC
001AED  3  22 2C FD 00          JSL     LIECIN
001AF1  3  C9 00                CMP     #$00
001AF3  3  F0 04                BEQ     GETIECDIRECTORY_2A
001AF5  3  22 00 FD 00          JSL     LPRINTVEC
001AF9  3               GETIECDIRECTORY_2A:
001AF9  3  22 2C FD 00          JSL     LIECIN
001AFD  3  C9 00                CMP     #$00
001AFF  3  F0 04                BEQ     GETIECDIRECTORY_2
001B01  3  22 00 FD 00          JSL     LPRINTVEC
001B05  3               GETIECDIRECTORY_2:
001B05  3  22 2C FD 00          JSL     LIECIN          ; input ENTRY TEXT byte from the serial bus
001B09  3  22 00 FD 00          JSL     LPRINTVEC
001B0D  3  C9 00                CMP     #$00
001B0F  3  F0 29                BEQ     GETIECDIRECTORY_3; END ENTRY
001B11  3               
001B11  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001B15  3  4A                   LSR                     ; shift time out read ..
001B16  3  4A                   LSR                     ; .. into carry bit
001B17  3  90 EC                BCC     GETIECDIRECTORY_2; all ok, do another
001B19  3               GETIECDIRECTORY_END:
001B19  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001B1D  3  A9 0F                LDA     #15
001B1F  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001B23  3  A9 0D                LDA     #13
001B25  3  22 00 FD 00          JSL     LPRINTVEC
001B29  3  A9 0A                LDA     #10
001B2B  3  22 00 FD 00          JSL     LPRINTVEC
001B2F  3  AB                   PLB
001B30  3  A9 DB                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001B32  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001B34  3  20 E0 2B             JSR     LAB_18C3
001B37  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001B3A  3               
001B3A  3               GETIECDIRECTORY_3:
001B3A  3  A9 0D                LDA     #13
001B3C  3  22 00 FD 00          JSL     LPRINTVEC
001B40  3  A9 0A                LDA     #10
001B42  3  22 00 FD 00          JSL     LPRINTVEC
001B46  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001B4A  3  C9 01                CMP     #$01
001B4C  3  D0 CB                BNE     GETIECDIRECTORY_END
001B4E  3  4C C8 1A             JMP     GETIECDIRECTORY_1
001B51  3               
001B51  3               
001B51  3               ;___V_DISKCMD______________________________________________
001B51  3               ;
001B51  3               ; UTILIZE BIOS TO SEND A DISK COMMAND
001B51  3               ;
001B51  3               ;
001B51  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (COMMAND) AND ONE NUMERIC VAR (DEVICE)
001B51  3               ; THIS IS NATIVE '816 CODE
001B51  3               ;__________________________________________________________
001B51  3               V_DISKCMD:                      ; save BASIC program
001B51  3  20 5D 2E             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001B54  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001B56  3  D0 08                BNE     V_DISKCMD_GO    ; YES, CONTINUE ON
001B58  3               V_DISKCMD_ERR:
001B58  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001B5A  3  20 1C 23             JSR     LAB_XERR
001B5D  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001B60  3               V_DISKCMD_GO:
001B60  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001B64  3  A9 C0                LDA     #$C0
001B66  3  8F 1F 03 00          STA     f:IECMSGM
001B6A  3  20 70 38             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001B6D  3               ; space returns with A = length, X=$71=pointer low byte,
001B6D  3               ; Y=$72=pointer high byte
001B6D  3  86 B8                STX     <ssptr_l
001B6F  3  84 B9                STY     <ssptr_h
001B71  3  AA                   TAX
001B72  3  A0 00                LDY     #$00
001B74  3               V_DISKCMD_1:
001B74  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001B78  3  B5 B8 C9 00  
001B7C  3  D0 04 A2 00  
001B8A  3  DA                   PHX
001B8B  3  BB                   TYX
001B8C  3  9F 00 0F 00          STA     f:FNBUFFER,X
001B90  3  FA                   PLX
001B91  3  CA                   DEX
001B92  3  E0 00                CPX     #$00
001B94  3  F0 03                BEQ     V_DISKCMD_2
001B96  3  C8                   INY
001B97  3  D0 DB                BNE     V_DISKCMD_1
001B99  3               V_DISKCMD_2:
001B99  3  BB                   TYX
001B9A  3  A9 00                LDA     #0
001B9C  3  9F 01 0F 00          STA     f:FNBUFFER+1,X
001BA0  3  8B                   PHB
001BA1  3  DA A2 00 DA          SETBANK 0
001BA5  3  AB FA        
001BA7  3  A9 00                LDA     #0              ; fn length
001BA9  3  A2 00                LDX     #0
001BAB  3  A0 00                LDY     #0
001BAD  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001BB1  3  AB                   PLB
001BB2  3  20 7F 2F             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001BB5  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER (DEVICE NUMBER), RETURN IN X
001BB8  3  8B                   PHB
001BB9  3  DA A2 00 DA          SETBANK 0
001BBD  3  AB FA        
001BBF  3  A0 0F                LDY     #15             ; secondary address
001BC1  3  A9 0F                LDA     #15             ; LFN NUMBER
001BC3  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001BC7  3  22 64 FD 00          JSL     LIECOPNLF
001BCB  3  B0 27                BCS     V_DISKCMD_ERR1
001BCD  3  A2 0F                LDX     #15
001BCF  3  22 5C FD 00          JSL     LIECOUTC
001BD3  3  A2 00                LDX     #$00
001BD5  3               V_DISKCMD_3:
001BD5  3  BF 00 0F 00          LDA     f:FNBUFFER,X
001BD9  3  C9 00                CMP     #$00
001BDB  3  F0 09                BEQ     V_DISKCMD_4
001BDD  3  22 30 FD 00          JSL     LIECOUT         ; OUTPUT a byte To the serial bus
001BE1  3  B0 11                BCS     V_DISKCMD_ERR1
001BE3  3               
001BE3  3  E8                   INX
001BE4  3  80 EF                BRA     V_DISKCMD_3
001BE6  3               V_DISKCMD_4:
001BE6  3  A9 0F                LDA     #15
001BE8  3  22 38 FD 00          JSL     LUNLSTN
001BEC  3  A9 0F                LDA     #15
001BEE  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BF2  3  AB                   PLB
001BF3  3  60                   RTS
001BF4  3               V_DISKCMD_ERR1:
001BF4  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001BF8  3  A9 0F                LDA     #15
001BFA  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BFE  3  A9 0D                LDA     #13
001C00  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001C04  3  A9 0A                LDA     #10
001C06  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001C0A  3  AB                   PLB
001C0B  3  A9 DB                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001C0D  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001C0F  3  20 E0 2B             JSR     LAB_18C3
001C12  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001C15  3               
001C15  3               
001C15  3               
001C15  3               ;___V_OPEN__________________________________________________
001C15  3               ;
001C15  3               ; UTILIZE BIOS TO OPEN AN IEC IO CHANNEL
001C15  3               ;
001C15  3               ;
001C15  3               ; BASIC COMMAND EXPECTS THREE NUMERIC VARS, AND ONE STRING
001C15  3               ; VAR
001C15  3               ; FILE#, DEVICE, SECONDARY ADDRESS, FILENAME
001C15  3               ; THIS IS NATIVE '816 CODE
001C15  3               ;__________________________________________________________
001C15  3               V_OPEN:
001C15  3  8B                   PHB
001C16  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001C1A  3  A9 C0                LDA     #$C0
001C1C  3  8F 1F 03 00          STA     f:IECMSGM
001C20  3  A0 00                LDY     #$00
001C22  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C25  3  DA                   PHX
001C26  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C29  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001C2C  3  DA                   PHX
001C2D  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C30  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (SECONDARY ADDRESS)
001C33  3  DA                   PHX
001C34  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C37  3  20 5D 2E             JSR     LAB_EVEX        ; GET THE FOURTH PARAMETER
001C3A  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001C3C  3  D0 08                BNE     V_OPEN_GO       ; YES, CONTINUE ON
001C3E  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001C40  3  20 1C 23             JSR     LAB_XERR
001C43  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001C46  3               V_OPEN_GO:
001C46  3  20 70 38             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001C49  3               ; space returns with A = length, X=$71=pointer low byte,
001C49  3               ; Y=$72=pointer high byte
001C49  3  86 B8                STX     <ssptr_l
001C4B  3  84 B9                STY     <ssptr_h
001C4D  3  AA                   TAX
001C4E  3  A0 00                LDY     #$00
001C50  3               V_OPEN_1:
001C50  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001C54  3  B5 B8 C9 00  
001C58  3  D0 04 A2 00  
001C66  3  DA                   PHX
001C67  3  BB                   TYX
001C68  3  9F 00 0F 00          STA     f:FNBUFFER,X
001C6C  3  FA                   PLX
001C6D  3  CA                   DEX
001C6E  3  E0 00                CPX     #$00
001C70  3  F0 03                BEQ     V_OPEN_2
001C72  3  C8                   INY
001C73  3  D0 DB                BNE     V_OPEN_1
001C75  3               V_OPEN_2:
001C75  3  C8                   INY
001C76  3  98                   TYA                     ; fn length
001C77  3  A2 00                LDX     #<FNBUFFER
001C79  3  A0 0F                LDY     #>FNBUFFER
001C7B  3  DA A2 00 DA          SETBANK 0
001C7F  3  AB FA        
001C81  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001C85  3  FA                   PLX
001C86  3  9B                   TXY                     ; secondary address
001C87  3  FA                   PLX                     ; DEVICE NUMBER
001C88  3  68                   PLA                     ; LFN NUMBER
001C89  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001C8D  3  22 64 FD 00          JSL     LIECOPNLF
001C91  3  B0 02                BCS     V_OPEN_IECERROR
001C93  3  AB                   PLB
001C94  3  60                   RTS
001C95  3                       V_OPEN_IECERROR:
001C95  3  4C 59 1A             JMP     IECERROR
001C98  3               
001C98  3               ;___V_CLOSE________________________________________________
001C98  3               ;
001C98  3               ; UTILIZE BIOS TO CLOSE AN IEC IO CHANNEL
001C98  3               ;
001C98  3               ;
001C98  3               ; THIS IS NATIVE '816 CODE
001C98  3               ;__________________________________________________________
001C98  3               V_CLOSE:
001C98  3  8B                   PHB
001C99  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C9C  3  DA A2 00 DA          SETBANK 0
001CA0  3  AB FA        
001CA2  3  8A                   TXA
001CA3  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001CA7  3  AB                   PLB
001CA8  3  60                   RTS
001CA9  3               
001CA9  3               ;___V_IECINPUT_______________________________________________
001CA9  3               ;
001CA9  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS INPUT
001CA9  3               ;
001CA9  3               ;
001CA9  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001CA9  3               ; THIS IS NATIVE '816 CODE
001CA9  3               ;__________________________________________________________
001CA9  3               V_IECINPUT:
001CA9  3  8B                   PHB
001CAA  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001CAD  3  DA A2 00 DA          SETBANK 0
001CB1  3  AB FA        
001CB3  3  22 60 FD 00          JSL     LIECINPC
001CB7  3  B0 02                BCS     V_IECINPUT_IECERROR
001CB9  3  AB                   PLB
001CBA  3  60                   RTS
001CBB  3                       V_IECINPUT_IECERROR:
001CBB  3  AB                   PLB
001CBC  3  4C 59 1A             JMP     IECERROR
001CBF  3               
001CBF  3               ;___V_IECOUTPUT______________________________________________
001CBF  3               ;
001CBF  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS OUTPUT
001CBF  3               ;
001CBF  3               ;
001CBF  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001CBF  3               ; THIS IS NATIVE '816 CODE
001CBF  3               ;__________________________________________________________
001CBF  3               V_IECOUTPUT:
001CBF  3  8B                   PHB
001CC0  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001CC3  3  DA A2 00 DA          SETBANK 0
001CC7  3  AB FA        
001CC9  3  22 5C FD 00          JSL     LIECOUTC
001CCD  3  B0 02                BCS     V_IECOUTPUT_IECERROR
001CCF  3  AB                   PLB
001CD0  3  60                   RTS
001CD1  3                       V_IECOUTPUT_IECERROR:
001CD1  3  AB                   PLB
001CD2  3  4C 59 1A             JMP     IECERROR
001CD5  3               
001CD5  3               
001CD5  3               ;___V_PUTN__________________________________________________
001CD5  3               ;
001CD5  3               ; UTILIZE BIOS TO PRINT TO AN IEC IO CHANNEL
001CD5  3               ;
001CD5  3               ; STARTING WITH FILE#, OUTPUT STRING
001CD5  3               ; THIS IS NATIVE '816 CODE
001CD5  3               ;__________________________________________________________
001CD5  3               V_PUTN:
001CD5  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001CD8  3  86 04                STX     <TMPFLG
001CDA  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001CDD  3               
001CDD  3  20 5D 2E             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001CE0  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001CE2  3  D0 08                BNE     V_PUTN_GO       ; YES, CONTINUE ON
001CE4  3               V_PUTN_ERR:
001CE4  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001CE6  3  20 1C 23             JSR     LAB_XERR
001CE9  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001CEC  3               V_PUTN_GO:
001CEC  3  20 70 38             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001CEF  3               ; space returns with A = length, X=$71=pointer low byte,
001CEF  3               ; Y=$72=pointer high byte
001CEF  3  86 B8                STX     <ssptr_l
001CF1  3  84 B9                STY     <ssptr_h
001CF3  3  AA                   TAX
001CF4  3  A0 00                LDY     #$00
001CF6  3               V_PUTN_1:
001CF6  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001CFA  3  B5 B8 C9 00  
001CFE  3  D0 04 A2 00  
001D0C  3  DA                   PHX
001D0D  3  5A                   PHY
001D0E  3  8B                   PHB
001D0F  3  DA A2 00 DA          SETBANK 0
001D13  3  AB FA        
001D15  3  A6 04                LDX     <TMPFLG
001D17  3  48                   PHA
001D18  3  22 30 FD 00          JSL     LIECOUT
001D1C  3  68                   PLA
001D1D  3  22 00 FD 00          JSL     LPRINTVEC
001D21  3  AB                   PLB
001D22  3  7A                   PLY
001D23  3  FA                   PLX
001D24  3  CA                   DEX
001D25  3  E0 00                CPX     #00
001D27  3  F0 03                BEQ     V_PUTN_2
001D29  3  C8                   INY
001D2A  3  D0 CA                BNE     V_PUTN_1
001D2C  3               V_PUTN_2:
001D2C  3  60                   RTS
001D2D  3               
001D2D  3               
001D2D  3               
001D2D  3               ;___LAB_IECST_______________________________________________
001D2D  3               ;
001D2D  3               ; RETURN IEC STATUS BYTE
001D2D  3               ;
001D2D  3               ; THIS IS NATIVE '816 CODE
001D2D  3               ;__________________________________________________________
001D2D  3               LAB_IECST:
001D2D  3  48                   PHA
001D2E  3  AF 17 03 00          LDA     f:IECSTW        ; get IECSTW into low byte
001D32  3  A8                   TAY
001D33  3  68                   PLA
001D34  3  A9 00                LDA     #0              ; NO high byte
001D36  3  20 18 34             JSR     LAB_AYFC
001D39  3  60                   RTS
001D3A  3               LAB_PIECST:
001D3A  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
001D3C  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
001D40  3  60                   RTS
001D41  3               
001D41  3               ;___V_GETN_________________________________________________
001D41  3               ;
001D41  3               ; UTILIZE BIOS TO INPUT FROM AN IEC IO CHANNEL
001D41  3               ;
001D41  3               ; LOTS OF PARAMETERS :)  STARTING WITH FILE#
001D41  3               ; THIS IS NATIVE '816 CODE
001D41  3               ;__________________________________________________________
001D41  3               V_GETN:
001D41  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001D44  3  DA                   PHX                     ; STORE DEVICE NUMBER
001D45  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D48  3  20 5A 31             JSR     LAB_GVAR        ; get var address
001D4B  3  85 97                STA     <Lvarpl         ; save var address low byte
001D4D  3  84 98                STY     <Lvarph         ; save var address high byte
001D4F  3  FA                   PLX
001D50  3  8B                   PHB
001D51  3  DA A2 00 DA          SETBANK 0
001D55  3  AB FA        
001D57  3  A6 04                LDX     <TMPFLG
001D59  3  22 2C FD 00          JSL     LIECIN          ; get input byte
001D5D  3  AB                   PLB
001D5E  3               
001D5E  3  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
001D60  3  30 07                BMI     LAB_GETNS       ; go get string character
001D62  3               ; was numeric get
001D62  3  A8                   TAY                     ; copy character to Y
001D63  3  20 25 34             JSR     LAB_1FD0        ; convert Y to byte in FAC1
001D66  3  4C 4D 40             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
001D69  3               LAB_GETNS:
001D69  3  48                   PHA
001D6A  3  A9 01                LDA     #$01
001D6C  3  20 89 35             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
001D6F  3               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
001D6F  3  68                   PLA                     ; get character back
001D70  3  A0 00                LDY     #$00            ; clear index
001D72  3  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
001D76  3  01 B5 AD C9  
001D7A  3  00 D0 04 A2  
001D88  3  20 EC 35             JSR     LAB_RTST        ; check for space on descriptor stack then put address
001D8B  3               ; and length on descriptor stack and update stack pointers
001D8B  3  4C F7 29             JMP     LAB_17D5        ; do string LET and return
001D8E  3               
001D8E  2                       .INCLUDE "screencmds.asm"
001D8E  3               ;___SCNCLR_________________________________________________
001D8E  3               ;
001D8E  3               ; UTILIZE BIOS TO CLEAR SCREEN
001D8E  3               ;
001D8E  3               ;
001D8E  3               ; THIS IS NATIVE '816 CODE
001D8E  3               ;__________________________________________________________
001D8E  3               V_SCNCLR:
001D8E  3  8B                   PHB
001D8F  3  DA A2 00 DA          SETBANK 0
001D93  3  AB FA        
001D95  3  22 6C FD 00          JSL     LClearScrVec
001D99  3  AB                   PLB
001D9A  3  60                   RTS
001D9B  3               
001D9B  3               
001D9B  3               ;___LOCATE_________________________________________________
001D9B  3               ;
001D9B  3               ; UTILIZE BIOS TO LOCATE CURSOR
001D9B  3               ;
001D9B  3               ;  TAKES TWO PARAMETERS X,Y
001D9B  3               ;
001D9B  3               ; THIS IS NATIVE '816 CODE
001D9B  3               ;__________________________________________________________
001D9B  3               V_LOCATE:
001D9B  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001D9E  3  DA                   PHX
001D9F  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001DA2  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001DA5  3  7A                   PLY
001DA6  3  8B                   PHB
001DA7  3  DA A2 00 DA          SETBANK 0
001DAB  3  AB FA        
001DAD  3  22 0C FD 00          JSL     LSetXYVEC
001DB1  3  AB                   PLB
001DB2  3  60                   RTS
001DB3  3               
001DB3  3               ;___COLOR_________________________________________________
001DB3  3               ;
001DB3  3               ; UTILIZE BIOS TO SET COLORS
001DB3  3               ;
001DB3  3               ;  TAKES TWO PARAMETERS BACKGROUND,FOREGROUND
001DB3  3               ;
001DB3  3               ; THIS IS NATIVE '816 CODE
001DB3  3               ;__________________________________________________________
001DB3  3               V_COLOR:
001DB3  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001DB6  3  8A                   TXA
001DB7  3  29 0F                AND     #$0F
001DB9  3  48                   PHA
001DBA  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001DBD  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001DC0  3  8A                   TXA
001DC1  3  29 0F                AND     #$0F
001DC3  3  18                   CLC
001DC4  3  0A                   ASL
001DC5  3  0A                   ASL
001DC6  3  0A                   ASL
001DC7  3  0A                   ASL
001DC8  3  85 04                STA     <TMPFLG
001DCA  3  68                   PLA
001DCB  3  05 04                ORA     <TMPFLG
001DCD  3  8B                   PHB
001DCE  3  DA A2 00 DA          SETBANK 0
001DD2  3  AB FA        
001DD4  3  22 18 FD 00          JSL     LSetColorVEC
001DD8  3  AB                   PLB
001DD9  3  60                   RTS
001DDA  3               
001DDA  3               ;___V_SPEEK()______________________________________________
001DDA  3               ;
001DDA  3               ; GET VALUE FROM SCREEN MEMORY
001DDA  3               ;
001DDA  3               ;  TAKES ONE PARAMETER (ADDRESS), RETURNS VALUE
001DDA  3               ;
001DDA  3               ; THIS IS NATIVE '816 CODE
001DDA  3               ;__________________________________________________________
001DDA  3               V_SPEEK:
001DDA  3  20 9D 3B             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
001DDD  3               
001DDD  3  8B                   PHB
001DDE  3  DA A2 00 DA          SETBANK 0
001DE2  3  AB FA        
001DE4  3  A5 11                LDA     Itempl
001DE6  3  AB                   PLB
001DE7  3  A8                   TAY                     ; copy byte to Y
001DE8  3  4C 25 34             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
001DEB  3               
001DEB  3               
001DEB  3               ;___V_SPOKE_________________________________________________
001DEB  3               ;
001DEB  3               ; PUT VALUE IN SCREEN MEMORY
001DEB  3               ;
001DEB  3               ;  TAKES TWO PARAMETERS ADDRESS,VALUE
001DEB  3               ;
001DEB  3               ; THIS IS NATIVE '816 CODE
001DEB  3               ;__________________________________________________________
001DEB  3               V_SPOKE:
001DEB  3  20 84 3B             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
001DEE  3  8B                   PHB
001DEF  3  DA A2 00 DA          SETBANK 0
001DF3  3  AB FA        
001DF5  3  86 11                STX     Itempl
001DF7  3  AB                   PLB
001DF8  3  60                   RTS
001DF9  3               
001DF9  3               ;___V_SCREEN_________________________________________________
001DF9  3               ;
001DF9  3               ;  SET SCREEN MODE
001DF9  3               ;
001DF9  3               ;  TAKES UP TO THREE PARAMETERS
001DF9  3               ;  FIRST PARAMETER SCREEN MODE
001DF9  3               ;  0=TEXT MODE
001DF9  3               ;  1=LORES MODE
001DF9  3               ;  2=HIRES MODE
001DF9  3               ;
001DF9  3               ;  TEXT MODE PARAMETERS
001DF9  3               ;  0=40 COLUMNS
001DF9  3               ;  1=80 COLUMNS
001DF9  3               ;
001DF9  3               ;  LORES MODE SECOND PARAMETER
001DF9  3               ;  0=SINGLE LORES
001DF9  3               ;  1=DOUBLE LORES
001DF9  3               ;  LORES MODE THIRD PARAMETER
001DF9  3               ;  0=MIXED MODE
001DF9  3               ;  1=FULL SCREEN MODE
001DF9  3               ;
001DF9  3               ;  HIRES MODE SECOND PARAMETER
001DF9  3               ;  0=SINGLE HIRES
001DF9  3               ;  1=DOUBLE HIRES
001DF9  3               ;  2=QUAD HIRES
001DF9  3               ;  1=MONO HIRES
001DF9  3               ;  HIRES MODE THIRD PARAMETER
001DF9  3               ;  0=MIXED MODE
001DF9  3               ;  1=FULL SCREEN MODE
001DF9  3               ;
001DF9  3               ; THIS IS NATIVE '816 CODE
001DF9  3               ;__________________________________________________________
001DF9  3               V_SCREEN:
001DF9  3               ;;;;; SOME OF THESE ARE OK IN DIRECT MODE -- WILL WANT THIS LATER THOUGH        JSR     LAB_CKRN        ; check not Direct, back here if ok
001DF9  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (MODE)
001DFC  3               V_SCREEN1:
001DFC  3  86 06                STX     <VIDEOMODE
001DFE  3  E0 00                CPX     #00
001E00  3  D0 03                BNE     *+5
001E02  3  4C 1C 1E             JMP     SETUPMODE0
001E05  3  E0 01                CPX     #01
001E07  3  D0 03                BNE     *+5
001E09  3  4C 54 1E             JMP     SETUPMODE1
001E0C  3  E0 02                CPX     #02
001E0E  3  D0 03                BNE     *+5
001E10  3  4C 54 1E             JMP     SETUPMODE2
001E13  3               
001E13  3  A2 02                LDX     #$02            ; SYNTAX ERROR
001E15  3  20 1C 23             JSR     LAB_XERR
001E18  3  4C 0D 24             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001E1B  3  60                   RTS
001E1C  3               
001E1C  3               SETUPMODE0:
001E1C  3  A9 01                LDA     #$01
001E1E  3  8F 35 FE 00          STA     F:VideoTextMode
001E22  3  A9 02                LDA     #$02
001E24  3  8F 36 FE 00          STA     F:VideoLoresMode
001E28  3  8F 38 FE 00          STA     F:VideoHiresMode
001E2C  3  20 7F 2F             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E2F  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (PATTERN)
001E32  3  E0 00                CPX     #$00
001E34  3  D0 0E                BNE     SETUPMODE0_80
001E36  3  A9 02                LDA     #$02
001E38  3  8F 3A FE 00          STA     F:Video80col
001E3C  3  A9 28                LDA     #40
001E3E  3  8F 43 03 00          STA     F:VIDEOWIDTH
001E42  3  80 0C                BRA     SETUPMODE0_CLEAR
001E44  3               SETUPMODE0_80:
001E44  3  A9 01                LDA     #$01
001E46  3  8F 3A FE 00          STA     F:Video80col
001E4A  3  A9 50                LDA     #80
001E4C  3  8F 43 03 00          STA     F:VIDEOWIDTH
001E50  3               SETUPMODE0_CLEAR:
001E50  3  4C 8E 1D             JMP     V_SCNCLR
001E53  3  60                   RTS
001E54  3               
001E54  3               SETUPMODE1:
001E54  3               SETUPMODE2:
001E54  3  60                   RTS
001E55  3               
001E55  3               ;___V_SPRITE________________________________________________
001E55  3               ;
001E55  3               ;  SET SPRITE PARAMETERS
001E55  3               ;
001E55  3               ;  TAKES SIX PARAMETERS
001E55  3               ;       SPRITE NUM (0-32)
001E55  3               ;       SPRITE PATTERN (0-255)
001E55  3               ;       X CORD (0-255)
001E55  3               ;       Y CORD (0-255)
001E55  3               ;       COLOR  (0-15)
001E55  3               ;       LEFT SHIFT BIT (0/1)
001E55  3               ; THIS IS NATIVE '816 CODE
001E55  3               ;__________________________________________________________
001E55  3               V_SPRITE:
001E55  3  60                   RTS
001E56  3               
001E56  3               
001E56  3               ;___V_SPRDEF________________________________________________
001E56  3               ;
001E56  3               ;  DEFINE SPRITE PATTERN
001E56  3               ;
001E56  3               ;  TAKES 9 OR 17 PARAMETERS
001E56  3               ;       SPRITE NUM (0-32)
001E56  3               ;       SPRITE PATTERN DATA (8 BYTES OR 16 BYTES)
001E56  3               ; THIS IS NATIVE '816 CODE
001E56  3               ;__________________________________________________________
001E56  3               V_SPRDEF:
001E56  3  60                   RTS
001E57  3               
001E57  3               
001E57  3               ;___LAB_VIDST_______________________________________________
001E57  3               ;
001E57  3               ; RETURN VIDEO STATUS BYTE
001E57  3               ;
001E57  3               ; THIS IS NATIVE '816 CODE
001E57  3               ;__________________________________________________________
001E57  3               LAB_VIDST:
001E57  3               LAB_PVIDST:
001E57  3  60                   RTS
001E58  3               
001E58  3               
001E58  3               ;___SPRSIZE_________________________________________________
001E58  3               ;
001E58  3               ; SET SPRITE SIZE AND MAGNIFICATION
001E58  3               ;
001E58  3               ;  TAKES ONE PARAMETER
001E58  3               ;
001E58  3               ; 0= 8X8 SPRITES, 1x DISPLAY
001E58  3               ; 1= 8X8 SPRITES, 2X DISPLAY
001E58  3               ; 2= 16X16 SPRITES, 1X DISPLAY
001E58  3               ; 3= 16X16 SPRITES, 2X DISPLAY
001E58  3               ;
001E58  3               ; THIS IS NATIVE '816 CODE
001E58  3               ;__________________________________________________________
001E58  3               V_SPRSIZE:
001E58  3  60                   RTS
001E59  3               
001E59  3               
001E59  3               
001E59  3               ;___V_PLOT__________________________________________________
001E59  3               ;
001E59  3               ;  PLOT ON SCREEN
001E59  3               ;         VM= 1     TAKES THREE PARAMETERS,  X,Y,COLOR
001E59  3               ;         VM= 4     TAKES FOUR PARAMETERS,  X,Y,PRIORITY,COLOR
001E59  3               ;         VM= 0 AND 3     TAKES THREE PARAMETERS,  X,Y,PATTERN
001E59  3               ;
001E59  3               ;  0=GRAPHICS MODE (32X24)
001E59  3               ;  1=MULTICOLOR MODE (64X48 BLOCKS)
001E59  3               ;  2=TEXT MODE (40X24)
001E59  3               ;  3=GRAPHICS MODE 0, WITH MODE 2 COLOR (32X24 MULTICOLOR)
001E59  3               ;  4=GRAPHICS MODE 2 (32X24 MULTICOLOR)
001E59  3               ; THIS IS NATIVE '816 CODE
001E59  3               ;__________________________________________________________
001E59  3               V_PLOT:
001E59  3  60                   RTS
001E5A  3               
001E5A  3               
001E5A  3               ;___V_PATTERN________________________________________________
001E5A  3               ;
001E5A  3               ;  DEFINE GGRAPHICS PATTERN
001E5A  3               ;
001E5A  3               ;  TAKES 10 PARAMETERS
001E5A  3               ;       PATTERN NUM (0-255)
001E5A  3               ;       COLOR NUM (0-255)
001E5A  3               ;       PATTERN DATA (8 BYTES)
001E5A  3               ; THIS IS NATIVE '816 CODE
001E5A  3               ;__________________________________________________________
001E5A  3               V_PATTERN:
001E5A  3  60                   RTS
001E5B  3               
001E5B  2                       .INCLUDE "ay38910.asm"
001E5B  3               via1regb        = $FE10         ; Register
001E5B  3               via1rega        = $FE11         ; Register
001E5B  3               via1ddrb        = $FE12         ; Register
001E5B  3               via1ddra        = $FE13         ; Register
001E5B  3               via1t1cl        = $FE14         ; Register
001E5B  3               via1t1ch        = $FE15         ; Register
001E5B  3               via1t1ll        = $FE16         ; Register
001E5B  3               via1t1lh        = $FE17         ; Register
001E5B  3               via1t2cl        = $FE18         ; Register
001E5B  3               via1t2ch        = $FE19         ; Register
001E5B  3               via1sr          = $FE1A         ; Register
001E5B  3               via1acr         = $FE1B         ; Register
001E5B  3               via1pcr         = $FE1C         ; Register
001E5B  3               via1ifr         = $FE1D         ; Register
001E5B  3               via1ier         = $FE1E         ; Register
001E5B  3               via1ora         = $FE1F         ; Register
001E5B  3               
001E5B  3               
001E5B  3               
001E5B  3               ;___SOUND__________________________________________________
001E5B  3               ;
001E5B  3               ; PLAY SOUND
001E5B  3               ;
001E5B  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
001E5B  3               ;
001E5B  3               ; THIS IS NATIVE '816 CODE
001E5B  3               ;__________________________________________________________
001E5B  3               V_SOUND:
001E5B  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001E5E  3  DA                   PHX
001E5F  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001E62  3  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
001E65  3               ; else do type mismatch
001E65  3  20 9D 3B             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
001E68  3               
001E68  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
001E69  3  29 03                AND     #$03
001E6B  3  18                   CLC
001E6C  3  0A                   ASL                     ; = *2
001E6D  3  48                   PHA
001E6E  3  A4 11                LDY     <Itempl
001E70  3  20 95 1F             JSR     psgwr           ; SET LOW BYTE
001E73  3  68                   PLA
001E74  3  1A                   INC     A
001E75  3  A4 12                LDY     <Itemph
001E77  3  20 95 1F             JSR     psgwr           ; SET HIGH BYTE
001E7A  3  60                   RTS
001E7B  3               
001E7B  3               ;___VOLUME__________________________________________________
001E7B  3               ;
001E7B  3               ; SET VOLUME
001E7B  3               ;
001E7B  3               ;  TAKES TWO PARAMETERS CHANNEL,VOLUME
001E7B  3               ;
001E7B  3               ; THIS IS NATIVE '816 CODE
001E7B  3               ;__________________________________________________________
001E7B  3               V_VOLUME:
001E7B  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001E7E  3  DA                   PHX
001E7F  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001E82  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (VOLUME)
001E85  3  9B                   TXY
001E86  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
001E87  3  29 03                AND     #$03
001E89  3               
001E89  3  18                   CLC
001E8A  3  69 08                ADC     #08
001E8C  3  20 95 1F             JSR     psgwr
001E8F  3  60                   RTS
001E90  3               
001E90  3               
001E90  3               ;___VOICE__________________________________________________
001E90  3               ;
001E90  3               ; SET VOICE
001E90  3               ;
001E90  3               ;  TAKES TWO PARAMETERS VOICE, ENVELOPE
001E90  3               ;
001E90  3               ; THIS IS NATIVE '816 CODE
001E90  3               ;__________________________________________________________
001E90  3               V_VOICE:
001E90  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001E93  3  DA                   PHX
001E94  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001E97  3  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
001E9A  3               ; else do type mismatch
001E9A  3  20 9D 3B             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
001E9D  3  7A                   PLY
001E9E  3  A9 0D                LDA     #13
001EA0  3  20 95 1F             JSR     psgwr
001EA3  3               
001EA3  3  A9 0B                LDA     #11
001EA5  3  A4 11                LDY     <Itempl
001EA7  3  20 95 1F             JSR     psgwr           ; SET LOW BYTE
001EAA  3  A9 0C                LDA     #12
001EAC  3  A4 12                LDY     <Itemph         ; SET HIGH BYTE
001EAE  3  20 95 1F             JSR     psgwr
001EB1  3               
001EB1  3  60                   RTS
001EB2  3               
001EB2  3               
001EB2  3               
001EB2  3               
001EB2  3               
001EB2  3               ;___NOISE__________________________________________________
001EB2  3               ;
001EB2  3               ; SELECT NOISE CHANNEL
001EB2  3               ;
001EB2  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
001EB2  3               ;
001EB2  3               ; THIS IS NATIVE '816 CODE
001EB2  3               ;__________________________________________________________
001EB2  3               V_NOISE:
001EB2  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001EB5  3  DA                   PHX
001EB6  3  20 7F 2F             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001EB9  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (FREQ)
001EBC  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
001EBD  3  DA                   PHX
001EBE  3  AA                   TAX
001EBF  3               
001EBF  3  29 1F                AND     #%00011111
001EC1  3  A8                   TAY
001EC2  3  A9 06                LDA     #$06
001EC4  3  20 95 1F             JSR     psgwr           ; SET NOISE FREQ
001EC7  3               
001EC7  3  A9 07                LDA     #$07
001EC9  3  20 53 1F             JSR     psgrd           ; GET CONFIG
001ECC  3  68                   PLA
001ECD  3  5A                   PHY
001ECE  3  29 03                AND     #$03
001ED0  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
001ED1  3  68                   PLA
001ED2  3  E0 00                CPX     #$00
001ED4  3  D0 06                BNE     NOISE_1
001ED6  3  29 37                AND     #%00110111
001ED8  3  09 01                ORA     #%00000001
001EDA  3  80 0E                BRA     NOISE_3
001EDC  3               NOISE_1:
001EDC  3  E0 01                CPX     #$01
001EDE  3  D0 06                BNE     NOISE_2
001EE0  3  29 2F                AND     #%00101111
001EE2  3  09 02                ORA     #%00000010
001EE4  3  80 04                BRA     NOISE_3
001EE6  3               NOISE_2:
001EE6  3  29 1F                AND     #%00011111
001EE8  3  09 04                ORA     #%00000100
001EEA  3               NOISE_3:
001EEA  3  A8                   TAY
001EEB  3  A9 07                LDA     #$07
001EED  3  20 95 1F             JSR     psgwr           ; SET LOW BYTE
001EF0  3  60                   RTS
001EF1  3               
001EF1  3               ;___TONE___________________________________________________
001EF1  3               ;
001EF1  3               ; SELECT TONE CHANNEL
001EF1  3               ;
001EF1  3               ;  TAKES ONE PARAMETER CHANNEL
001EF1  3               ;
001EF1  3               ; THIS IS NATIVE '816 CODE
001EF1  3               ;__________________________________________________________
001EF1  3               V_TONE:
001EF1  3  20 F9 3A             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
001EF4  3  DA                   PHX
001EF5  3               
001EF5  3  A9 07                LDA     #$07
001EF7  3  20 53 1F             JSR     psgrd           ; GET CONFIG
001EFA  3  68                   PLA
001EFB  3  5A                   PHY
001EFC  3  29 03                AND     #$03
001EFE  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
001EFF  3  68                   PLA
001F00  3  E0 00                CPX     #$00
001F02  3  D0 06                BNE     TONE_1
001F04  3  29 3E                AND     #%00111110
001F06  3  09 08                ORA     #%00001000
001F08  3  80 0E                BRA     TONE_3
001F0A  3               TONE_1:
001F0A  3  E0 01                CPX     #$01
001F0C  3  D0 06                BNE     TONE_2
001F0E  3  29 3D                AND     #%00111101
001F10  3  09 10                ORA     #%00010000
001F12  3  80 04                BRA     TONE_3
001F14  3               TONE_2:
001F14  3  29 3B                AND     #%00111011
001F16  3  09 20                ORA     #%00100000
001F18  3               TONE_3:
001F18  3  A8                   TAY
001F19  3  A9 07                LDA     #$07
001F1B  3  20 95 1F             JSR     psgwr           ; SET LOW BYTE
001F1E  3  60                   RTS
001F1F  3               
001F1F  3               
001F1F  3               ;___CONTROLLER_______________________________________________
001F1F  3               ;
001F1F  3               ; GET JOYTICK STATUS
001F1F  3               ;
001F1F  3               ;  TAKES ONE PARAMETERS JOYSTICK#, RETURNS STATUS
001F1F  3               ;
001F1F  3               ; THIS IS NATIVE '816 CODE
001F1F  3               ;__________________________________________________________
001F1F  3               LAB_CON:
001F1F  3  20 9D 3B             JSR     LAB_F2FX        ; GET THE PARAMETER, RETURN IN X (controller#)
001F22  3  A5 11                LDA     <Itempl
001F24  3  29 01                AND     #$01
001F26  3  18                   CLC
001F27  3  69 0E                ADC     #14
001F29  3  20 53 1F             JSR     psgrd           ; return value in y
001F2C  3  4C 25 34             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
001F2F  3               
001F2F  3               
001F2F  3               
001F2F  3               
001F2F  3               ;___utility functions____________________________________________
001F2F  3               psginit:
001F2F  3  A9 9C                LDA     #%10011100
001F31  3  8F 13 FE 00          STA     f:via1ddra
001F35  3  A9 10                LDA     #%00010000
001F37  3  8F 11 FE 00          STA     f:via1rega
001F3B  3  A9 FF                LDA     #$FF
001F3D  3  8F 12 FE 00          STA     f:via1ddrb
001F41  3  A9 00                LDA     #$00
001F43  3  8F 10 FE 00          STA     f:via1regb
001F47  3  60                   RTS
001F48  3  20 D7 1F             JSR     clrpsg
001F4B  3               
001F4B  3  A9 07                LDA     #7
001F4D  3  A0 3F                LDY     #$3F
001F4F  3  20 95 1F             JSR     psgwr
001F52  3  60                   RTS
001F53  3               
001F53  3               psgrd:
001F53  3  8F 10 FE 00          STA     f:via1regb      ; select register
001F57  3  A9 1C                LDA     #%00011100      ; latch address
001F59  3  8F 11 FE 00          STA     f:via1rega
001F5D  3               
001F5D  3  8F 11 FE 00          STA     f:via1rega
001F61  3  8F 11 FE 00          STA     f:via1rega
001F65  3               
001F65  3  A9 10                LDA     #%00010000      ; inact
001F67  3  8F 11 FE 00          STA     f:via1rega
001F6B  3               
001F6B  3  8F 11 FE 00          STA     f:via1rega
001F6F  3               
001F6F  3  A9 00                LDA     #$00
001F71  3  8F 12 FE 00          STA     f:via1ddrb
001F75  3  A9 18                LDA     #%00011000      ; latch data
001F77  3  8F 11 FE 00          STA     f:via1rega
001F7B  3               
001F7B  3  8F 11 FE 00          STA     f:via1rega
001F7F  3  8F 11 FE 00          STA     f:via1rega
001F83  3               
001F83  3  AF 10 FE 00          LDA     f:via1regb      ; get data
001F87  3  A8                   TAY
001F88  3  A9 FF                LDA     #$FF
001F8A  3  8F 12 FE 00          STA     f:via1ddrb
001F8E  3  A9 10                LDA     #%00010000      ; inact
001F90  3  8F 11 FE 00          STA     f:via1rega
001F94  3  60                   RTS
001F95  3               
001F95  3               
001F95  3               psgwr:
001F95  3  8F 10 FE 00          STA     f:via1regb      ; select register
001F99  3  A9 1C                LDA     #%00011100      ; latch address
001F9B  3  8F 11 FE 00          STA     f:via1rega
001F9F  3               
001F9F  3  8F 11 FE 00          STA     f:via1rega
001FA3  3  8F 11 FE 00          STA     f:via1rega
001FA7  3               
001FA7  3  A9 10                LDA     #%00010000      ; inact
001FA9  3  8F 11 FE 00          STA     f:via1rega
001FAD  3               
001FAD  3  8F 11 FE 00          STA     f:via1rega
001FB1  3  8F 11 FE 00          STA     f:via1rega
001FB5  3  98                   TYA
001FB6  3  8F 10 FE 00          STA     f:via1regb      ; store data
001FBA  3               
001FBA  3  8F 10 FE 00          STA     f:via1regb      ; store data
001FBE  3  8F 10 FE 00          STA     f:via1regb      ; store data
001FC2  3               
001FC2  3  A9 14                LDA     #%00010100      ; latch data
001FC4  3  8F 11 FE 00          STA     f:via1rega
001FC8  3               
001FC8  3  8F 11 FE 00          STA     f:via1rega
001FCC  3  8F 11 FE 00          STA     f:via1rega
001FD0  3               
001FD0  3  A9 10                LDA     #%00010000      ; inact
001FD2  3  8F 11 FE 00          STA     f:via1rega
001FD6  3  60                   RTS
001FD7  3               
001FD7  3               ;
001FD7  3               ; Clear PSG registers to default
001FD7  3               ;
001FD7  3               clrpsg:
001FD7  3  DA 5A 48 08          STORECONTEXT
001FDB  3  E2 30                ACCUMULATORINDEX8
001FDD  3  A2 00                LDX     #00
001FDF  3  A0 00                LDY     #00
001FE1  3               clrpsg1:
001FE1  3  8A                   TXA
001FE2  3  20 95 1F             JSR     psgwr           ; set register X to 0
001FE5  3  E8                   INX
001FE6  3  E0 11                CPX     #17
001FE8  3  D0 F7                BNE     clrpsg1
001FEA  3  28 68 7A FA          RESTORECONTEXT
001FEE  3  60                   RTS
001FEF  3               
001FEF  2               
001FEF  2               
001FEF  2               
001FEF  2               ;___TitleScreen_____________________________________________
001FEF  2               ;
001FEF  2               ; Basic Title Screen
001FEF  2               ;
001FEF  2               ; THIS IS NATIVE '816 CODE
001FEF  2               ;__________________________________________________________
001FEF  2               TitleScreen:
001FEF  2  22 6C FD 00          JSL     LClearScrVec
001FF3  2  20 2F 1F             JSR     psginit
001FF6  2  A9 28                LDA     #40
001FF8  2  8F 43 03 00          STA     f:VIDEOWIDTH
001FFC  2  A9 02                LDA     #2
001FFE  2  85 06                STA     <VIDEOMODE
002000  2  AF 41 03 00          LDA     f:ConsoleDevice
002004  2  C9 00                CMP     #$00
002006  2  D0 08                BNE     TitleScreen_1
002008  2  A9 4B                LDA     #<LAB_SMSG1     ; point to sign-on message (low addr)
00200A  2  A0 16                LDY     #>LAB_SMSG1     ; point to sign-on message (high addr)
00200C  2  20 E0 2B             JSR     LAB_18C3        ; print null terminated string from memory
00200F  2  60                   RTS
002010  2               TitleScreen_1:
002010  2  A2 02                LDX     #02
002012  2  20 FC 1D             JSR     V_SCREEN1
002015  2  8B                   PHB
002016  2  DA A2 00 DA          SETBANK 0
00201A  2  AB FA        
00201C  2  A9 F4                LDA     #$F4
00201E  2  22 18 FD 00          JSL     LSetColorVEC
002022  2  A2 00                LDX     #$00
002024  2  9B                   TXY
002025  2  22 0C FD 00          JSL     LSetXYVEC
002029  2  AB                   PLB
00202A  2  A9 F8                LDA     #<LAB_CONMSG    ; point to sign-on message (low addr)
00202C  2  A0 15                LDY     #>LAB_CONMSG    ; point to sign-on message (high addr)
00202E  2  20 E0 2B             JSR     LAB_18C3        ; print null terminated string from memory
002031  2  60                   RTS
002032  2               
002032  2               ;___ScreenEditor____________________________________________
002032  2               ;
002032  2               ; Basic Screen editor code
002032  2               ;
002032  2               ; THIS IS NATIVE '816 CODE
002032  2               ;__________________________________________________________
002032  2               ScreenEditor:
002032  2  48                   PHA
002033  2  DA                   PHX
002034  2  5A                   PHY
002035  2  08                   PHP
002036  2  E2 30                ACCUMULATORINDEX8
002038  2  8B                   PHB
002039  2  DA A2 00 DA          SETBANK 0
00203D  2  AB FA        
00203F  2               ; allow prepopulate of screen
00203F  2               ploop:
00203F  2  22 1C FD 00          JSL     LCURSORVEC
002043  2  22 08 FD 00          JSL     LINPWVEC
002047  2  C9 FF                CMP     #$FF
002049  2  F0 F4                BEQ     ploop
00204B  2  22 20 FD 00          JSL     LUNCURSORVEC
00204F  2  C9 01                CMP     #01
002051  2  F0 19                BEQ     crsrup
002053  2  C9 02                CMP     #02
002055  2  F0 21                BEQ     crsrdn
002057  2  C9 1F                CMP     #$1f
002059  2  F0 43                BEQ     crsrlt
00205B  2  C9 04                CMP     #$04
00205D  2  F0 5E                BEQ     crsrrt
00205F  2  48                   PHA
002060  2  22 00 FD 00          JSL     LPRINTVEC
002064  2  68                   PLA
002065  2  C9 0D                CMP     #13
002067  2  F0 68                BEQ     pexit
002069  2  4C 3F 20             JMP     ploop
00206C  2               
00206C  2               crsrup:
00206C  2  AD 31 03             LDA     CSRY
00206F  2  C9 00                CMP     #00
002071  2  F0 CC                BEQ     ploop
002073  2  CE 31 03             DEC     CSRY
002076  2  80 C7                BRA     ploop
002078  2               crsrdn:
002078  2  AD 31 03             LDA     CSRY
00207B  2  C9 17                CMP     #23
00207D  2  F0 05                BEQ     crsrdn_1
00207F  2  EE 31 03             INC     CSRY
002082  2  80 BB                BRA     ploop
002084  2               crsrdn_1:
002084  2  AD 30 03             LDA     CSRX
002087  2  48                   PHA
002088  2  A9 28                LDA     #40
00208A  2  A2 00                LDX     #0
00208C  2  A0 17                LDY     #23
00208E  2  8E 30 03             STX     CSRX
002091  2  8C 31 03             STY     CSRY
002094  2  22 14 FD 00          JSL     LSrlUpVEC
002098  2  68                   PLA
002099  2  8D 30 03             STA     CSRX
00209C  2  80 A1                BRA     ploop
00209E  2               crsrlt:
00209E  2  AD 30 03             LDA     CSRX
0020A1  2  C9 00                CMP     #00
0020A3  2  F0 06                BEQ     crsrlt_1
0020A5  2  CE 30 03             DEC     CSRX
0020A8  2  4C 3F 20             JMP     ploop
0020AB  2               crsrlt_1:
0020AB  2  AD 31 03             LDA     CSRY
0020AE  2  C9 00                CMP     #00
0020B0  2  F0 8D                BEQ     ploop
0020B2  2  A9 27                LDA     #39
0020B4  2  8D 30 03             STA     CSRX
0020B7  2  CE 31 03             DEC     CSRY
0020BA  2  4C 3F 20             JMP     ploop
0020BD  2               crsrrt:
0020BD  2  AD 30 03             LDA     CSRX
0020C0  2  C9 27                CMP     #39
0020C2  2  F0 06                BEQ     crsrrt_1
0020C4  2  EE 30 03             INC     CSRX
0020C7  2  4C 3F 20             JMP     ploop
0020CA  2               crsrrt_1:
0020CA  2  A9 00                LDA     #00
0020CC  2  8D 30 03             STA     CSRX
0020CF  2  80 A7                BRA     crsrdn
0020D1  2               pexit:
0020D1  2  20 FB 20             JSR     LdKbBuffer
0020D4  2               
0020D4  2  A2 51                LDX     #81
0020D6  2  A9 00                LDA     #$00
0020D8  2  9F 81 21 02          STA     f:LIbuffs,X
0020DC  2               TERMLOOP:
0020DC  2  CA                   DEX
0020DD  2  BF 81 21 02          LDA     f:LIbuffs,X
0020E1  2  C9 20                CMP     #32
0020E3  2  F0 06                BEQ     TERMLOOP_B
0020E5  2  C9 00                CMP     #00
0020E7  2  F0 08                BEQ     TERMLOOP_C
0020E9  2  80 0A                BRA     TERMLOOP_A
0020EB  2               TERMLOOP_B:
0020EB  2  A9 00                LDA     #00
0020ED  2  9F 81 21 02          STA     f:LIbuffs,X
0020F1  2               TERMLOOP_C:
0020F1  2  E0 00                CPX     #00
0020F3  2  D0 E7                BNE     TERMLOOP
0020F5  2               TERMLOOP_A:
0020F5  2               
0020F5  2  AB                   PLB
0020F6  2  28                   PLP
0020F7  2  7A                   PLY
0020F8  2  FA                   PLX
0020F9  2  68                   PLA
0020FA  2  60                   RTS
0020FB  2               
0020FB  2               
0020FB  2               LdKbBuffer:
0020FB  2               ; clear input buffer
0020FB  2  A2 51                LDX     #81
0020FD  2               :
0020FD  2  A9 00                LDA     #00
0020FF  2  9F 80 21 02          STA     f:LIbuffs-1,X
002103  2  CA                   DEX
002104  2  D0 F7                BNE     :-
002106  2               
002106  2               ; are we on the first line?  If so, we know it is not a continue
002106  2  AC 31 03             LDY     CSRY
002109  2  88                   DEY
00210A  2  C0 00                CPY     #$00
00210C  2  F0 0D                BEQ     LdKbBuffer_1
00210E  2               ; if prior line linked  set y-1
00210E  2  BB                   TYX
00210F  2  BD D0 03             LDA     LINEFLGS,X
002112  2  C9 00                CMP     #$00
002114  2  F0 05                BEQ     LdKbBuffer_1
002116  2  88                   DEY
002117  2  A9 51                LDA     #81             ; get 80 chars
002119  2  80 13                BRA     LdKbBuffer_1b
00211B  2               ; get chars; 40 if last line char=32, 80 if not
00211B  2               
00211B  2               LdKbBuffer_1:
00211B  2               ; is this the last line on the screen?
00211B  2  C0 17                CPY     #23
00211D  2  F0 0D                BEQ     LdKbBuffer_1a
00211F  2               ; if current line linked carries to the next set size to 80
00211F  2  BB                   TYX
002120  2  BD D1 03             LDA     LINEFLGS+1,X
002123  2  C9 00                CMP     #$00
002125  2  F0 05                BEQ     LdKbBuffer_1a
002127  2  1A                   INC     A
002128  2  A9 51                LDA     #81             ; get 80 chars
00212A  2  80 02                BRA     LdKbBuffer_1b
00212C  2               LdKbBuffer_1a:
00212C  2  A9 29                LDA     #41             ; get 40 chars
00212E  2               LdKbBuffer_1b:
00212E  2  C2 10                INDEX16
002130  2  A0 00 00             LDY     #$0000
002133  2  A8                   TAY
002134  2               LdKbBuffer_2:
002134  2  20 46 21             JSR     GetVideoAddressOffset
002137  2  BD 00 10             LDA     $1000,X
00213A  2  9F 80 21 02          STA     f:LIbuffs-1,X
00213E  2  E8                   INX
00213F  2  88                   DEY
002140  2  C0 00 00             CPY     #0000
002143  2  D0 EF                BNE     LdKbBuffer_2
002145  2  60                   RTS
002146  2               
002146  2               GetVideoAddressOffset:
002146  2  AD 31 03             LDA     CSRY
002149  2  C2 30                ACCUMULATORINDEX16
00214B  2  29 FF 00             AND     #$00FF
00214E  2  8D 44 03             STA     TEMP
002151  2  18                   CLC
002152  2  0A                   ASL     A
002153  2  0A                   ASL     A
002154  2  0A                   ASL     A
002155  2  0A                   ASL     A
002156  2  0A                   ASL     A
002157  2  48                   PHA
002158  2  AD 44 03             LDA     TEMP
00215B  2  18                   CLC
00215C  2  0A                   ASL     A
00215D  2  0A                   ASL     A
00215E  2  0A                   ASL     A
00215F  2  8D 44 03             STA     TEMP
002162  2  68                   PLA
002163  2  18                   CLC
002164  2  6D 44 03             ADC     TEMP
002167  2  8D 44 03             STA     TEMP
00216A  2  AD 30 03             LDA     CSRX
00216D  2  29 FF 00             AND     #$00FF
002170  2  18                   CLC
002171  2  6D 44 03             ADC     TEMP
002174  2  AA                   TAX
002175  2  E2 20                ACCUMULATOR8
002177  2  60                   rts
002178  2               
002178  2               ;___LAB_MONITOR_____________________________________________
002178  2               ;
002178  2               ; UTILIZE BIOS TO GO TO MONITOR
002178  2               ;
002178  2               ;
002178  2               ; THIS IS NATIVE '816 CODE
002178  2               ;__________________________________________________________
002178  2               LAB_MONITOR:
002178  2  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
002179  2  18                   CLC                     ;
00217A  2  FB                   XCE                     ; SET NATIVE MODE
00217B  2  DA A2 00 00          SETBANK 0
00217F  2  DA AB FA     
002182  2  C2 30                ACCUMULATORINDEX16
002184  2  A9 FF DF             LDA     #STACK          ; get the stack address
002187  2  1B                   TCS                     ; and set the stack to it
002188  2  5C 00 E0 00          JML     $00E000
00218C  2               
00218C  1               ;
00218C  1               ;____________________________________________________________________________________________
00218C  1               
00218C  1               
00218C  1               ;   ensure CPU Context is in a known state
00218C  1  EA                   NOP                     ; FIX A CODE PAGE ALIGNMENT PROBLEM
00218D  1               BASICBEGIN:
00218D  1               
00218D  1  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
00218E  1  18                   CLC                     ;
00218F  1  FB                   XCE                     ; SET NATIVE MODE
002190  1  C2 30                ACCUMULATORINDEX16
002192  1  A9 FF DF             LDA     #STACK          ; get the stack address
002195  1  1B                   TCS                     ; and set the stack to it
002196  1  A9 00 00             LDA     #$0000          ;
002199  1  48                   PHA                     ; Set Direct Register to 0
00219A  1  2B                   PLD                     ;
00219B  1               
00219B  1                       .IF     PROGRAMBANK=DATABANK
00219B  1               
00219B  1                       .ELSE
00219B  1  A2 00 10                 LDX     #$1000
00219E  1  A0 00 10                 LDY     #$1000
0021A1  1  A9 00 10                 LDA     #$1000
0021A4  1  54 02 FF                 MVN     #PROGRAMBANK,#DATABANK; COPY TABLES $1000 THROUGH $2000 PLUS OR MINUS :) TO WORKING BANK
0021A7  1                       .ENDIF
0021A7  1  E2 30                ACCUMULATORINDEX8
0021A9  1  A9 FF                LDA     #PROGRAMBANK    ; SET DATA BANK = TO PROGRAM BANK TO ALLOW FOR INITIALIZATION FROM ROM
0021AB  1  48                   PHA
0021AC  1  AB                   PLB                     ;
0021AD  1               
0021AD  1               
0021AD  1               
0021AD  1               LAB_COLD:
0021AD  1  A2 04                LDX     #PG2_TABE-PG2_TABS-1
0021AF  1               ; byte count-1
0021AF  1               LAB_2D13:
0021AF  1  BD 33 10             LDA     PG2_TABS,X      ; get byte
0021B2  1  A0 00                LDY     #00             ; SET DATA BANK = TO ZERO BANK
0021B4  1  5A                   PHY
0021B5  1  AB                   PLB                     ;
0021B6  1  9F 00 02 00          STA     f:ccflag,X      ; store in page 2
0021BA  1  A0 FF                LDY     #PROGRAMBANK    ; SET DATA BANK = TO PROGRAM BANK TO ALLOW FOR INITIALIZATION FROM ROM
0021BC  1  5A                   PHY
0021BD  1  AB                   PLB                     ;
0021BE  1               
0021BE  1  CA                   DEX                     ; decrement count
0021BF  1  10 EE                BPL     LAB_2D13        ; loop if not done
0021C1  1               
0021C1  1  A2 FF                LDX     #$FF            ; set byte
0021C3  1  86 88                STX     <Clineh         ; set current line high byte (set immediate mode)
0021C5  1               
0021C5  1  A9 4C                LDA     #$4C            ; code for JMP
0021C7  1  85 A1                STA     <Fnxjmp         ; save for jump vector for functions
0021C9  1               
0021C9  1               ; copy block from LAB_2CEE to $00BC - $00E0
0021C9  1               
0021C9  1  A0 1D                LDY     #LAB_2CEE_END-LAB_2CEE; set byte count
0021CB  1               LAB_2D4E:
0021CB  1  BE 02 10             LDX     LAB_2CEE-1,Y    ; get byte from table
0021CE  1  96 BB                STX     <LAB_IGBY-1,Y   ; save byte in page zero
0021D0  1  88                   DEY                     ; decrement count
0021D1  1  D0 F8                BNE     LAB_2D4E        ; loop if not all done
0021D3  1               
0021D3  1               ; copy block from StrTab to $0000 - $0012
0021D3  1               
0021D3  1               LAB_GMEM:
0021D3  1  A0 12                LDY     #EndTab-StrTab-1; set byte count-1
0021D5  1               TabLoop:
0021D5  1  BE 20 10             LDX     StrTab,Y        ; get byte from table
0021D8  1  96 00                STX     <PLUS_0,Y       ; save byte in page zero
0021DA  1  88                   DEY                     ; decrement count
0021DB  1  10 F8                BPL     TabLoop         ; loop if not all done
0021DD  1               
0021DD  1               ; set-up start values
0021DD  1  A9 02                LDA     #DATABANK       ; SET DATA BANK = TO DATA BANK, ALL PROGRAM DATA IN THIS AREA
0021DF  1  85 C5                STA     <Bpntrp         ; SET LAB_GBYT PAGE POINTER TO DATA BANK
0021E1  1  48                   PHA
0021E2  1  AB                   PLB
0021E3  1  A9 02                LDA     #2              ;
0021E5  1  85 06                STA     <VIDEOMODE
0021E7  1  A9 00                LDA     #$00            ; clear A
0021E9  1  85 E5                STA     <NmiBase        ; clear NMI handler enabled flag
0021EB  1  85 E8                STA     <IrqBase        ; clear IRQ handler enabled flag
0021ED  1  85 B2                STA     <FAC1_o         ; clear FAC1 overflow byte
0021EF  1  85 67                STA     <last_sh        ; clear descriptor stack top item pointer high byte
0021F1  1               
0021F1  1  A9 0E                LDA     #$0E            ; set default tab size
0021F3  1  85 64                STA     <TabSiz         ; save it
0021F5  1  A9 03                LDA     #$03            ; set garbage collect step size for descriptor stack
0021F7  1  85 A0                STA     <g_step         ; save it
0021F9  1  A2 68                LDX     #<des_sk        ; descriptor stack start
0021FB  1  86 65                STX     <next_s         ; set descriptor stack pointer
0021FD  1  20 98 2B             JSR     LAB_CRLF        ; print CR/LF
002200  1               
002200  1  A9 00                LDA     #<Ram_top
002202  1  A0 FF                LDY     #>Ram_top
002204  1  85 85                STA     <Ememl          ; set end of mem low byte
002206  1  84 86                STY     <Ememh          ; set end of mem high byte
002208  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
00220A  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
00220C  1               
00220C  1  A0 00                LDY     #<Ram_base      ; set start addr low byte
00220E  1  A2 22                LDX     #>Ram_base      ; set start addr high byte
002210  1  84 79                STY     <Smeml          ; save start of mem low byte
002212  1  86 7A                STX     <Smemh          ; save start of mem high byte
002214  1               
002214  1  98                   TYA                     ; clear A
002215  1  91 79                STA     (<Smeml),Y      ; clear first byte
002217  1  E6 79                INC     <Smeml          ; increment start of mem low byte
002219  1               LAB_2E05:
002219  1               ; DO TITLE SCREEN
002219  1  20 EF 1F             JSR     TitleScreen
00221C  1               
00221C  1  20 98 2B             JSR     LAB_CRLF        ; print CR/LF
00221F  1  20 5A 25             JSR     LAB_1463        ; do "NEW" and "CLEAR"
002222  1  A5 85                LDA     <Ememl          ; get end of mem low byte
002224  1  38                   SEC                     ; set carry for subtract
002225  1  E5 79                SBC     <Smeml          ; subtract start of mem low byte
002227  1  AA                   TAX                     ; copy to X
002228  1  A5 86                LDA     <Ememh          ; get end of mem high byte
00222A  1  E5 7A                SBC     <Smemh          ; subtract start of mem high byte
00222C  1  20 FE 42             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
00222F  1  A9 3F                LDA     #<LAB_SMSG      ; point to sign-on message (low addr)
002231  1  A0 16                LDY     #>LAB_SMSG      ; point to sign-on message (high addr)
002233  1  20 E0 2B             JSR     LAB_18C3        ; print null terminated string from memory
002236  1  A9 47                LDA     #<LAB_1274      ; warm start vector low byte
002238  1  A0 23                LDY     #>LAB_1274      ; warm start vector high byte
00223A  1  85 01                STA     <Wrmjpl         ; save warm start vector low byte
00223C  1  84 02                STY     <Wrmjph         ; save warm start vector high byte
00223E  1  6C 01 00             JMP     (Wrmjpl)        ; go do warm start
002241  1               
002241  1               ; open up space in memory
002241  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
002241  1               
002241  1               ; <Nbendl,<Nbendh - new block end address (A/Y)
002241  1               ; <Obendl,<Obendh - old block end address
002241  1               ; <Ostrtl,<Ostrth - old block start address
002241  1               
002241  1               ; returns with ..
002241  1               
002241  1               ; <Nbendl,<Nbendh - new block start address (high byte - $100)
002241  1               ; <Obendl,<Obendh - old block start address (high byte - $100)
002241  1               ; <Ostrtl,<Ostrth - old block start address (unchanged)
002241  1               
002241  1               LAB_11CF:
002241  1  20 EB 22             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
002244  1               ; addr to check is in AY (low/high)
002244  1  85 7F                STA     <Earryl         ; save new array mem end low byte
002246  1  84 80                STY     <Earryh         ; save new array mem end high byte
002248  1               
002248  1               ; open up space in memory
002248  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
002248  1               ; don't set array end
002248  1               
002248  1               LAB_11D6:
002248  1  38                   SEC                     ; set carry for subtract
002249  1  A5 A6                LDA     <Obendl         ; get block end low byte
00224B  1  E5 AA                SBC     <Ostrtl         ; subtract block start low byte
00224D  1  A8                   TAY                     ; copy MOD(block length/$100) byte to Y
00224E  1  A5 A7                LDA     <Obendh         ; get block end high byte
002250  1  E5 AB                SBC     <Ostrth         ; subtract block start high byte
002252  1  AA                   TAX                     ; copy block length high byte to X
002253  1  E8                   INX                     ; +1 to allow for count=0 exit
002254  1  98                   TYA                     ; copy block length low byte to A
002255  1  F0 74                BEQ     LAB_120A        ; branch if length low byte=0
002257  1               
002257  1               ; block is (X-1)*256+Y bytes, do the Y bytes first
002257  1               
002257  1  38                   SEC                     ; set carry for add + 1, two's complement
002258  1  49 FF                EOR     #$FF            ; invert low byte for subtract
00225A  1  65 A6                ADC     <Obendl         ; add block end low byte
00225C  1               
00225C  1  85 A6                STA     <Obendl         ; save corrected old block end low byte
00225E  1  B0 03                BCS     LAB_11F3        ; branch if no underflow
002260  1               
002260  1  C6 A7                DEC     <Obendh         ; else decrement block end high byte
002262  1  38                   SEC                     ; set carry for add + 1, two's complement
002263  1               LAB_11F3:
002263  1  98                   TYA                     ; get MOD(block length/$100) byte
002264  1  49 FF                EOR     #$FF            ; invert low byte for subtract
002266  1  65 A4                ADC     <Nbendl         ; add destination end low byte
002268  1  85 A4                STA     <Nbendl         ; save modified new block end low byte
00226A  1  B0 30                BCS     LAB_1203        ; branch if no underflow
00226C  1               
00226C  1  C6 A5                DEC     <Nbendh         ; else decrement block end high byte
00226E  1  90 2C                BCC     LAB_1203        ; branch always
002270  1               
002270  1               LAB_11FF:
002270  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
002274  1  B5 A6 C9 00  
002278  1  D0 04 A2 00  
002286  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; copy byte to destination
00228A  1  01 B5 A4 C9  
00228E  1  00 D0 04 A2  
00229C  1               LAB_1203:
00229C  1  88                   DEY                     ; decrement index
00229D  1  D0 D1                BNE     LAB_11FF        ; loop until Y=0
00229F  1               
00229F  1               ; now do Y=0 indexed byte
00229F  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
0022A3  1  B5 A6 C9 00  
0022A7  1  D0 04 A2 00  
0022B5  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; save byte to destination
0022B9  1  01 B5 A4 C9  
0022BD  1  00 D0 04 A2  
0022CB  1               LAB_120A:
0022CB  1  C6 A7                DEC     <Obendh         ; decrement source pointer high byte
0022CD  1  C6 A5                DEC     <Nbendh         ; decrement destination pointer high byte
0022CF  1  CA                   DEX                     ; decrement block count
0022D0  1  D0 CA                BNE     LAB_1203        ; loop until count = $0
0022D2  1               
0022D2  1  60                   RTS
0022D3  1               
0022D3  1               ; check room on stack for A bytes
0022D3  1               ; stack too deep? do OM error
0022D3  1               LAB_1212:
0022D3  1  C2 20                ACCUMULATOR16
0022D5  1  29 FF 00             AND     #$00FF
0022D8  1  18                   CLC
0022D9  1  69 00 D0             ADC     #STACK_BOTTOM
0022DC  1  85 FD                STA     <TEMPW
0022DE  1  3B                   TSC
0022DF  1  C5 FD                CMP     <TEMPW
0022E1  1  90 03                BCC     LAB_1213        ; if stack < limit do "Out of memory" error then warm start
0022E3  1  E2 20                ACCUMULATOR8
0022E5  1  60                   RTS
0022E6  1               LAB_1213:
0022E6  1  E2 20                ACCUMULATOR8
0022E8  1  4C 1A 23             JMP     LAB_OMER
0022EB  1               
0022EB  1               ; check available memory, "Out of memory" error if no room
0022EB  1               ; addr to check is in AY (low/high)
0022EB  1               
0022EB  1               LAB_121F:
0022EB  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
0022ED  1  90 2A                BCC     LAB_124B        ; if less then exit (is ok)
0022EF  1               
0022EF  1  D0 04                BNE     LAB_1229        ; skip next test if greater (tested <)
0022F1  1               
0022F1  1               ; high byte was =, now do low byte
0022F1  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
0022F3  1  90 24                BCC     LAB_124B        ; if less then exit (is ok)
0022F5  1               
0022F5  1               ; addr is > string storage ptr (oops!)
0022F5  1               LAB_1229:
0022F5  1  48                   PHA                     ; push addr low byte
0022F6  1  A2 08                LDX     #$08            ; set index to save <Adatal to <expneg inclusive
0022F8  1  98                   TYA                     ; copy addr high byte (to push on stack)
0022F9  1               
0022F9  1               ; save misc numeric work area
0022F9  1               LAB_122D:
0022F9  1  48                   PHA                     ; push byte
0022FA  1  B5 A3                LDA     <Adatal-1,X     ; get byte from <Adatal to <expneg ( ,$00 not pushed)
0022FC  1  CA                   DEX                     ; decrement index
0022FD  1  10 FA                BPL     LAB_122D        ; loop until all done
0022FF  1               
0022FF  1  20 46 36             JSR     LAB_GARB        ; garbage collection routine
002302  1               
002302  1               ; restore misc numeric work area
002302  1  A2 00                LDX     #$00            ; clear the index to restore bytes
002304  1               LAB_1238:
002304  1  68                   PLA                     ; pop byte
002305  1  95 A4                STA     <Adatal,X       ; save byte to <Adatal to <expneg
002307  1  E8                   INX                     ; increment index
002308  1  E0 08                CPX     #$08            ; compare with end + 1
00230A  1  30 F8                BMI     LAB_1238        ; loop if more to do
00230C  1               
00230C  1  68                   PLA                     ; pop addr high byte
00230D  1  A8                   TAY                     ; copy back to Y
00230E  1  68                   PLA                     ; pop addr low byte
00230F  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
002311  1  90 06                BCC     LAB_124B        ; if less then exit (is ok)
002313  1               
002313  1  D0 05                BNE     LAB_OMER        ; if greater do "Out of memory" error then warm start
002315  1               
002315  1               ; high byte was =, now do low byte
002315  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
002317  1  B0 01                BCS     LAB_OMER        ; if >= do "Out of memory" error then warm start
002319  1               
002319  1               ; ok exit, carry clear
002319  1               LAB_124B:
002319  1  60                   RTS
00231A  1               
00231A  1               ; do "Out of memory" error then warm start
00231A  1               
00231A  1               LAB_OMER:
00231A  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
00231C  1               
00231C  1               ; do error #X, then warm start
00231C  1               
00231C  1               LAB_XERR:
00231C  1  20 98 2B             JSR     LAB_CRLF        ; print CR/LF
00231F  1               
00231F  1  A5 06                LDA     <VIDEOMODE
002321  1  C9 02                CMP     #2
002323  1  F0 07                BEQ     LAB_XERRA
002325  1  DA                   PHX
002326  1  A2 02                LDX     #2
002328  1  20 FC 1D             JSR     V_SCREEN1
00232B  1  FA                   PLX
00232C  1               LAB_XERRA:
00232C  1  BD 8D 16             LDA     LAB_BAER,X      ; get error message pointer low byte
00232F  1  BC 8E 16             LDY     LAB_BAER+1,X    ; get error message pointer high byte
002332  1  20 E0 2B             JSR     LAB_18C3        ; print null terminated string from memory
002335  1               
002335  1  20 93 25             JSR     LAB_1491        ; flush stack and clear continue flag
002338  1  A9 CA                LDA     #<LAB_EMSG      ; point to " Error" low addr
00233A  1  A0 17                LDY     #>LAB_EMSG      ; point to " Error" high addr
00233C  1               LAB_1269:
00233C  1  20 E0 2B             JSR     LAB_18C3        ; print null terminated string from memory
00233F  1  A4 88                LDY     <Clineh         ; get current line high byte
002341  1  C8                   INY                     ; increment it
002342  1  F0 03                BEQ     LAB_1274        ; go do warm start (was immediate mode)
002344  1               
002344  1               ; else print line number
002344  1  20 F3 42             JSR     LAB_2953        ; print " in line [LINE #]"
002347  1               
002347  1               ; BASIC warm start entry point
002347  1               ; wait for Basic command
002347  1               
002347  1               LAB_1274:
002347  1  A5 06                LDA     <VIDEOMODE
002349  1  C9 02                CMP     #2
00234B  1  F0 05                BEQ     LAB_1274a
00234D  1  A2 02                LDX     #2
00234F  1  20 FC 1D             JSR     V_SCREEN1
002352  1               LAB_1274a:
002352  1               ; clear ON IRQ/NMI bytes
002352  1  A9 00                LDA     #$00            ; clear A
002354  1  85 E8                STA     <IrqBase        ; clear enabled byte
002356  1  85 E5                STA     <NmiBase        ; clear enabled byte
002358  1  A9 DB                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
00235A  1  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
00235C  1               
00235C  1  20 E0 2B             JSR     LAB_18C3        ; go do print string
00235F  1               
00235F  1               ; wait for Basic command (no "Ready")
00235F  1               
00235F  1               LAB_127D:
00235F  1  20 44 24             JSR     LAB_1357        ; call for BASIC input
002362  1               LAB_1280:
002362  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002364  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002366  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00236A  1  F0 F3                BEQ     LAB_127D        ; loop while null
00236C  1               
00236C  1               ; got to interpret input line now ..
00236C  1               
00236C  1  A2 FF                LDX     #$FF            ; current line to null value
00236E  1  86 88                STX     <Clineh         ; set current line high byte
002370  1  90 06                BCC     LAB_1295        ; branch if numeric character (handle new BASIC line)
002372  1               
002372  1               ; no line number .. immediate mode
002372  1  20 85 24             JSR     LAB_13A6        ; crunch keywords into Basic tokens
002375  1  4C 08 27             JMP     LAB_15F6        ; go scan and interpret code
002378  1               
002378  1               ; handle new BASIC line
002378  1               
002378  1               LAB_1295:
002378  1  20 79 29             JSR     LAB_GFPN        ; get fixed-point number into temp integer
00237B  1  20 85 24             JSR     LAB_13A6        ; crunch keywords into Basic tokens
00237E  1  84 5D                STY     <Ibptr          ; save index pointer to end of crunched line
002380  1  20 2E 25             JSR     LAB_SSLN        ; search BASIC for temp integer line number
002383  1  90 44                BCC     LAB_12E6        ; branch if not found
002385  1               
002385  1               ; aroooogah! line # already exists! delete it
002385  1  A0 01                LDY     #$01            ; set index to next line pointer high byte
002387  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002389  1  85 72                STA     <ut1_ph         ; save it
00238B  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
00238D  1  85 71                STA     <ut1_pl         ; save it
00238F  1  A5 AB                LDA     <Baslnh         ; get found line pointer high byte
002391  1  85 74                STA     <ut2_ph         ; save it
002393  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
002395  1  88                   DEY                     ; decrement index
002396  1  F1 AA                SBC     (<Baslnl),Y     ; subtract next line pointer low byte
002398  1  18                   CLC                     ; clear carry for add
002399  1  65 7B                ADC     <Svarl          ; add start of vars low byte
00239B  1  85 7B                STA     <Svarl          ; save new start of vars low byte
00239D  1  85 73                STA     <ut2_pl         ; save destination pointer low byte
00239F  1  A5 7C                LDA     <Svarh          ; get start of vars high byte
0023A1  1  69 FF                ADC     #$FF            ; -1 + carry
0023A3  1  85 7C                STA     <Svarh          ; save start of vars high byte
0023A5  1  E5 AB                SBC     <Baslnh         ; subtract found line pointer high byte
0023A7  1  AA                   TAX                     ; copy to block count
0023A8  1  38                   SEC                     ; set carry for subtract
0023A9  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
0023AB  1  E5 7B                SBC     <Svarl          ; subtract start of vars low byte
0023AD  1  A8                   TAY                     ; copy to bytes in first block count
0023AE  1  B0 03                BCS     LAB_12D0        ; branch if overflow
0023B0  1               
0023B0  1  E8                   INX                     ; increment block count (correct for =0 loop exit)
0023B1  1  C6 74                DEC     <ut2_ph         ; decrement destination high byte
0023B3  1               LAB_12D0:
0023B3  1  18                   CLC                     ; clear carry for add
0023B4  1  65 71                ADC     <ut1_pl         ; add source pointer low byte
0023B6  1  90 03                BCC     LAB_12D8        ; branch if no overflow
0023B8  1               
0023B8  1  C6 72                DEC     <ut1_ph         ; else decrement source pointer high byte
0023BA  1  18                   CLC                     ; clear carry
0023BB  1               
0023BB  1               ; close up memory to delete old line
0023BB  1               LAB_12D8:
0023BB  1  B1 71                LDA     (<ut1_pl),Y     ; get byte from source
0023BD  1  91 73                STA     (<ut2_pl),Y     ; copy to destination
0023BF  1  C8                   INY                     ; increment index
0023C0  1  D0 F9                BNE     LAB_12D8        ; while <> 0 do this block
0023C2  1               
0023C2  1  E6 72                INC     <ut1_ph         ; increment source pointer high byte
0023C4  1  E6 74                INC     <ut2_ph         ; increment destination pointer high byte
0023C6  1  CA                   DEX                     ; decrement block count
0023C7  1  D0 F2                BNE     LAB_12D8        ; loop until all done
0023C9  1               
0023C9  1               ; got new line in buffer and no existing same #
0023C9  1               LAB_12E6:
0023C9  1  AD 81 21             LDA     Ibuffs          ; get byte from start of input buffer
0023CC  1  F0 3F                BEQ     LAB_1319        ; if null line just go flush stack/vars and exit
0023CE  1               
0023CE  1               ; got new line and it isn't empty line
0023CE  1  A5 85                LDA     <Ememl          ; get end of mem low byte
0023D0  1  A4 86                LDY     <Ememh          ; get end of mem high byte
0023D2  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
0023D4  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
0023D6  1  A5 7B                LDA     <Svarl          ; get start of vars low byte	(end of BASIC)
0023D8  1  85 A6                STA     <Obendl         ; save old block end low byte
0023DA  1  A4 7C                LDY     <Svarh          ; get start of vars high byte	(end of BASIC)
0023DC  1  84 A7                STY     <Obendh         ; save old block end high byte
0023DE  1  65 5D                ADC     <Ibptr          ; add input buffer pointer	(also buffer length)
0023E0  1  90 01                BCC     LAB_1301        ; branch if no overflow from add
0023E2  1               
0023E2  1  C8                   INY                     ; else increment high byte
0023E3  1               LAB_1301:
0023E3  1  85 A4                STA     <Nbendl         ; save new block end low byte	(move to, low byte)
0023E5  1  84 A5                STY     <Nbendh         ; save new block end high byte
0023E7  1  20 41 22             JSR     LAB_11CF        ; open up space in memory
0023EA  1               ; old start pointer <Ostrtl,<Ostrth set by the find line call
0023EA  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
0023EC  1  A4 80                LDY     <Earryh         ; get array mem end high byte
0023EE  1  85 7B                STA     <Svarl          ; save start of vars low byte
0023F0  1  84 7C                STY     <Svarh          ; save start of vars high byte
0023F2  1  A4 5D                LDY     <Ibptr          ; get input buffer pointer	(also buffer length)
0023F4  1  88                   DEY                     ; adjust for loop type
0023F5  1               LAB_1311:
0023F5  1  B9 7D 21             LDA     Ibuffs-4,Y      ; get byte from crunched line
0023F8  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
0023FA  1  88                   DEY                     ; decrement count
0023FB  1  C0 03                CPY     #$03            ; compare with first byte-1
0023FD  1  D0 F6                BNE     LAB_1311        ; continue while count <> 3
0023FF  1               
0023FF  1  A5 12                LDA     <Itemph         ; get line # high byte
002401  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002403  1  88                   DEY                     ; decrement count
002404  1  A5 11                LDA     <Itempl         ; get line # low byte
002406  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002408  1  88                   DEY                     ; decrement count
002409  1  A9 FF                LDA     #$FF            ; set byte to allow chain rebuild. if you didn't set this
00240B  1               ; byte then a zero already here would stop the chain rebuild
00240B  1               ; as it would think it was the [EOT] marker.
00240B  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
00240D  1               
00240D  1               LAB_1319:
00240D  1  20 6F 25             JSR     LAB_1477        ; reset execution to start, clear vars and flush stack
002410  1  A6 79                LDX     <Smeml          ; get start of mem low byte
002412  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002414  1  A0 01                LDY     #$01            ; index to high byte of next line pointer
002416  1               LAB_1325:
002416  1  86 71                STX     <ut1_pl         ; set line start pointer low byte
002418  1  85 72                STA     <ut1_ph         ; set line start pointer high byte
00241A  1  B1 71                LDA     (<ut1_pl),Y     ; get it
00241C  1  F0 18                BEQ     LAB_133E        ; exit if end of program
00241E  1               
00241E  1               ; rebuild chaining of Basic lines
00241E  1               
00241E  1  A0 04                LDY     #$04            ; point to first code byte of line
002420  1               ; there is always 1 byte + [EOL] as null entries are deleted
002420  1               LAB_1330:
002420  1  C8                   INY                     ; next code byte
002421  1  B1 71                LDA     (<ut1_pl),Y     ; get byte
002423  1  D0 FB                BNE     LAB_1330        ; loop if not [EOL]
002425  1               
002425  1  38                   SEC                     ; set carry for add + 1
002426  1  98                   TYA                     ; copy end index
002427  1  65 71                ADC     <ut1_pl         ; add to line start pointer low byte
002429  1  AA                   TAX                     ; copy to X
00242A  1  A0 00                LDY     #$00            ; clear index, point to this line's next line pointer
00242C  1  91 71                STA     (<ut1_pl),Y     ; set next line pointer low byte
00242E  1  98                   TYA                     ; clear A
00242F  1  65 72                ADC     <ut1_ph         ; add line start pointer high byte + carry
002431  1  C8                   INY                     ; increment index to high byte
002432  1  91 71                STA     (<ut1_pl),Y     ; save next line pointer low byte
002434  1  90 E0                BCC     LAB_1325        ; go do next line, branch always, carry clear
002436  1               
002436  1               
002436  1               LAB_133E:
002436  1  4C 5F 23             JMP     LAB_127D        ; else we just wait for Basic command, no "Ready"
002439  1               
002439  1               ; print "? " and get BASIC input
002439  1               
002439  1               LAB_INLN:
002439  1               ;JSR	LAB_18E3		; print "?" character
002439  1  20 09 2C             JSR     LAB_18E0        ; print " "
00243C  1  D0 18                BNE     SimpleSerialEditor; call for BASIC input and return
00243E  1               
00243E  1               ; receive line from keyboard
00243E  1               
00243E  1               ; $08 as delete key (BACKSPACE on standard keyboard)
00243E  1               LAB_134B:
00243E  1  20 0E 2C             JSR     LAB_PRNA        ; go print the character
002441  1  CA                   DEX                     ; decrement the buffer counter (delete)
002442  1  80 14                BRA     LAB_1359
002444  1               
002444  1               ; call for BASIC input (main entry point)
002444  1               LAB_1357:
002444  1  AF 41 03 00          LDA     f:ConsoleDevice
002448  1  C9 00                CMP     #$00
00244A  1  F0 0A                BEQ     SimpleSerialEditor
00244C  1               ;	do screen editor
00244C  1  20 32 20             JSR     ScreenEditor
00244F  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
002451  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
002453  1  A9 00                LDA     #$00
002455  1  60                   RTS
002456  1               
002456  1               SimpleSerialEditor:
002456  1  A2 00                LDX     #$00            ; clear BASIC line buffer pointer
002458  1               LAB_1359:
002458  1  20 C1 18             JSR     V_INPT          ; call scan input device
00245B  1  B0 FB                BCS     LAB_1359        ; loop if no byte
00245D  1               ;BEQ	LAB_1359		; loop until valid input (ignore NULLs)
00245D  1               
00245D  1  C9 07                CMP     #$07            ; compare with [BELL]
00245F  1  F0 10                BEQ     LAB_1378        ; branch if [BELL]
002461  1               
002461  1  C9 0D                CMP     #$0D            ; compare with [CR]
002463  1  F0 19                BEQ     LAB_1384        ; do CR/LF exit if [CR]
002465  1               
002465  1  E0 00                CPX     #$00            ; compare pointer with $00
002467  1  D0 04                BNE     LAB_1374        ; branch if not empty
002469  1               
002469  1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
002469  1               
002469  1  C9 21                CMP     #$21            ; compare with [SP]+1
00246B  1  90 EB                BCC     LAB_1359        ; if < ignore character
00246D  1               
00246D  1               LAB_1374:
00246D  1  C9 08                CMP     #$08            ; compare with [BACKSPACE] (delete last character)
00246F  1  F0 CD                BEQ     LAB_134B        ; go delete last character
002471  1               
002471  1               LAB_1378:
002471  1  E0 50                CPX     #Ibuffe-Ibuffs  ; compare character count with max
002473  1  B0 0C                BCS     LAB_138E        ; skip store and do [BELL] if buffer full
002475  1               
002475  1  9D 81 21             STA     Ibuffs,X        ; else store in buffer
002478  1  E8                   INX                     ; increment pointer
002479  1               LAB_137F:
002479  1  20 0E 2C             JSR     LAB_PRNA        ; go print the character
00247C  1  D0 DA                BNE     LAB_1359        ; always loop for next character
00247E  1               
00247E  1               LAB_1384:
00247E  1  4C 8F 2B             JMP     LAB_1866        ; do CR/LF exit to BASIC
002481  1               
002481  1               ; announce buffer full
002481  1               
002481  1               LAB_138E:
002481  1  A9 07                LDA     #$07            ; [BELL] character into A
002483  1  D0 F4                BNE     LAB_137F        ; go print the [BELL] but ignore input character
002485  1               ; branch always
002485  1               
002485  1               ; crunch keywords into Basic tokens
002485  1               ; position independent buffer version ..
002485  1               ; faster, dictionary search version ....
002485  1               
002485  1               LAB_13A6:
002485  1  A0 FF                LDY     #$FF            ; set save index (makes for easy math later)
002487  1               
002487  1  38                   SEC                     ; set carry for subtract
002488  1  A5 C3                LDA     <Bpntrl         ; get basic execute pointer low byte
00248A  1  E9 81                SBC     #<Ibuffs        ; subtract input buffer start pointer
00248C  1  AA                   TAX                     ; copy result to X (index past line # if any)
00248D  1               
00248D  1  86 60                STX     <Oquote         ; clear open quote/DATA flag
00248F  1               LAB_13AC:
00248F  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
002492  1  F0 51                BEQ     LAB_13EC        ; if null save byte then exit
002494  1               
002494  1  C9 5F                CMP     #'_'            ; compare with "_"
002496  1  B0 4D                BCS     LAB_13EC        ; if >= go save byte then continue crunching
002498  1               
002498  1  C9 3C                CMP     #'<'            ; compare with "<"
00249A  1  B0 0E                BCS     LAB_13CC        ; if >= go crunch now
00249C  1               
00249C  1  C9 30                CMP     #'0'            ; compare with "0"
00249E  1  B0 45                BCS     LAB_13EC        ; if >= go save byte then continue crunching
0024A0  1               
0024A0  1  85 5C                STA     <Scnquo         ; save buffer byte as search character
0024A2  1  C9 22                CMP     #$22            ; is it quote character?
0024A4  1  F0 64                BEQ     LAB_1410        ; branch if so (copy quoted string)
0024A6  1               
0024A6  1  C9 2A                CMP     #'*'            ; compare with "*"
0024A8  1  90 3B                BCC     LAB_13EC        ; if < go save byte then continue crunching
0024AA  1               
0024AA  1               ; else crunch now
0024AA  1               LAB_13CC:
0024AA  1  24 60                BIT     <Oquote         ; get open quote/DATA token flag
0024AC  1  70 37                BVS     LAB_13EC        ; branch if b6 of <Oquote set (was DATA)
0024AE  1               ; go save byte then continue crunching
0024AE  1               
0024AE  1  86 78                STX     <TempB          ; save buffer read index
0024B0  1  84 BA                STY     <csidx          ; copy buffer save index
0024B2  1  A0 73                LDY     #<TAB_1STC      ; get keyword first character table low address
0024B4  1  84 73                STY     <ut2_pl         ; save pointer low byte
0024B6  1  A0 11                LDY     #>TAB_1STC      ; get keyword first character table high address
0024B8  1  84 74                STY     <ut2_ph         ; save pointer high byte
0024BA  1  A0 00                LDY     #$00            ; clear table pointer
0024BC  1               
0024BC  1               LAB_13D0:
0024BC  1  D1 73                CMP     (<ut2_pl),Y     ; compare with keyword first character table byte
0024BE  1  F0 05                BEQ     LAB_13D1        ; go do word_table_chr if match
0024C0  1               
0024C0  1  90 21                BCC     LAB_13EA        ; if < keyword first character table byte go restore
0024C2  1               ; Y and save to crunched
0024C2  1               
0024C2  1  C8                   INY                     ; else increment pointer
0024C3  1  D0 F7                BNE     LAB_13D0        ; and loop (branch always)
0024C5  1               
0024C5  1               ; have matched first character of some keyword
0024C5  1               
0024C5  1               LAB_13D1:
0024C5  1  98                   TYA                     ; copy matching index
0024C6  1  0A                   ASL     A               ; *2 (bytes per pointer)
0024C7  1  AA                   TAX                     ; copy to new index
0024C8  1  BD 92 11             LDA     TAB_CHRT,X      ; get keyword table pointer low byte
0024CB  1  85 73                STA     <ut2_pl         ; save pointer low byte
0024CD  1  BD 93 11             LDA     TAB_CHRT+1,X    ; get keyword table pointer high byte
0024D0  1  85 74                STA     <ut2_ph         ; save pointer high byte
0024D2  1               
0024D2  1  A0 FF                LDY     #$FF            ; clear table pointer (make -1 for start)
0024D4  1               
0024D4  1  A6 78                LDX     <TempB          ; restore buffer read index
0024D6  1               
0024D6  1               LAB_13D6:
0024D6  1  C8                   INY                     ; next table byte
0024D7  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from table
0024D9  1               LAB_13D8:
0024D9  1  30 08                BMI     LAB_13EA        ; all bytes matched so go save token
0024DB  1               
0024DB  1  E8                   INX                     ; next buffer byte
0024DC  1  DD 81 21             CMP     Ibuffs,X        ; compare with byte from input buffer
0024DF  1  F0 F5                BEQ     LAB_13D6        ; go compare next if match
0024E1  1               
0024E1  1  D0 2E                BNE     LAB_1417        ; branch if >< (not found keyword)
0024E3  1               
0024E3  1               LAB_13EA:
0024E3  1  A4 BA                LDY     <csidx          ; restore save index
0024E5  1               
0024E5  1               ; save crunched to output
0024E5  1               LAB_13EC:
0024E5  1  E8                   INX                     ; increment buffer index (to next input byte)
0024E6  1  C8                   INY                     ; increment save index (to next output byte)
0024E7  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
0024EA  1  C9 00                CMP     #$00            ; set the flags, set carry
0024EC  1  F0 35                BEQ     LAB_142A        ; do exit if was null [EOL]
0024EE  1               
0024EE  1               ; A holds token or byte here
0024EE  1  E9 3A                SBC     #':'            ; subtract ":" (carry set by CMP #00)
0024F0  1  F0 04                BEQ     LAB_13FF        ; branch if it was ":" (is now $00)
0024F2  1               
0024F2  1               ; A now holds token-$3A
0024F2  1  C9 49                CMP     #TK_DATA-$3A    ; compare with DATA token - $3A
0024F4  1  D0 02                BNE     LAB_1401        ; branch if not DATA
0024F6  1               
0024F6  1               ; token was : or DATA
0024F6  1               LAB_13FF:
0024F6  1  85 60                STA     <Oquote         ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
0024F8  1               LAB_1401:
0024F8  1  49 57                EOR     #TK_REM-$3A     ; effectively subtract REM token offset
0024FA  1  F0 03                BEQ     LAB_1401_A
0024FC  1  4C 8F 24             JMP     LAB_13AC        ; If wasn't REM then go crunch rest of line
0024FF  1               
0024FF  1               LAB_1401_A:
0024FF  1  85 5C                STA     <Asrch          ; else was REM so set search for [EOL]
002501  1               
002501  1               ; loop for REM, "..." etc.
002501  1               LAB_1408:
002501  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
002504  1  F0 DF                BEQ     LAB_13EC        ; branch if null [EOL]
002506  1               
002506  1  C5 5C                CMP     <Asrch          ; compare with stored character
002508  1  F0 DB                BEQ     LAB_13EC        ; branch if match (end quote)
00250A  1               
00250A  1               ; entry for copy string in quotes, don't crunch
00250A  1               LAB_1410:
00250A  1  C8                   INY                     ; increment buffer save index
00250B  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
00250E  1  E8                   INX                     ; increment buffer read index
00250F  1  D0 F0                BNE     LAB_1408        ; loop while <> 0 (should never be 0!)
002511  1               
002511  1               ; not found keyword this go
002511  1               LAB_1417:
002511  1  A6 78                LDX     <TempB          ; compare has failed, restore buffer index (start byte!)
002513  1               
002513  1               ; now find the end of this word in the table
002513  1               LAB_141B:
002513  1  B1 73                LDA     (<ut2_pl),Y     ; get table byte
002515  1  08                   PHP                     ; save status
002516  1  C8                   INY                     ; increment table index
002517  1  28                   PLP                     ; restore byte status
002518  1  10 F9                BPL     LAB_141B        ; if not end of keyword go do next
00251A  1               
00251A  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from keyword table
00251C  1  D0 BB                BNE     LAB_13D8        ; go test next word if not zero byte (end of table)
00251E  1               
00251E  1               ; reached end of table with no match
00251E  1  BD 81 21             LDA     Ibuffs,X        ; restore byte from input buffer
002521  1  10 C0                BPL     LAB_13EA        ; branch always (all bytes in buffer are $00-$7F)
002523  1               ; go save byte in output and continue crunching
002523  1               
002523  1               ; reached [EOL]
002523  1               LAB_142A:
002523  1  C8                   INY                     ; increment pointer
002524  1  C8                   INY                     ; increment pointer (makes it next line pointer high byte)
002525  1  99 81 21             STA     Ibuffs,Y        ; save [EOL] (marks [EOT] in immediate mode)
002528  1  C8                   INY                     ; adjust for line copy
002529  1  C8                   INY                     ; adjust for line copy
00252A  1  C8                   INY                     ; adjust for line copy
00252B  1  C6 C3                DEC     <Bpntrl         ; allow for increment (change if buffer starts at $xxFF)
00252D  1  60                   RTS
00252E  1               
00252E  1               ; search Basic for temp integer line number from start of mem
00252E  1               
00252E  1               LAB_SSLN:
00252E  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002530  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002532  1               
002532  1               ; search Basic for temp integer line number from AX
002532  1               ; returns carry set if found
002532  1               ; returns <Baslnl/<Baslnh pointer to found or next higher (not found) line
002532  1               
002532  1               ; old 541 new 507
002532  1               
002532  1               LAB_SHLN:
002532  1  A0 01                LDY     #$01            ; set index
002534  1  85 AA                STA     <Baslnl         ; save low byte as current
002536  1  86 AB                STX     <Baslnh         ; save high byte as current
002538  1  B1 AA                LDA     (<Baslnl),Y     ; get pointer high byte from addr
00253A  1  F0 1A                BEQ     LAB_145F        ; pointer was zero so we're done, do 'not found' exit
00253C  1               
00253C  1  A0 03                LDY     #$03            ; set index to line # high byte
00253E  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
002540  1  88                   DEY                     ; decrement index (point to low byte)
002541  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002543  1  D0 04                BNE     LAB_1455        ; if <> skip low byte check
002545  1               
002545  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
002547  1  C5 11                CMP     <Itempl         ; compare with temporary integer low byte
002549  1               LAB_1455:
002549  1  B0 09                BCS     LAB_145E        ; else if temp < this line, exit (passed line#)
00254B  1               
00254B  1               LAB_1456:
00254B  1  88                   DEY                     ; decrement index to next line ptr high byte
00254C  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
00254E  1  AA                   TAX                     ; copy to X
00254F  1  88                   DEY                     ; decrement index to next line ptr low byte
002550  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
002552  1  90 DE                BCC     LAB_SHLN        ; go search for line # in temp (<Itempl/<Itemph) from AX
002554  1               ; (carry always clear)
002554  1               
002554  1               LAB_145E:
002554  1  F0 01                BEQ     LAB_1460        ; exit if temp = found line #, carry is set
002556  1               
002556  1               LAB_145F:
002556  1  18                   CLC                     ; clear found flag
002557  1               LAB_1460:
002557  1  60                   RTS
002558  1               
002558  1               ; perform NEW
002558  1               
002558  1               LAB_NEW:
002558  1  D0 FD                BNE     LAB_1460        ; exit if not end of statement (to do syntax error)
00255A  1               
00255A  1               LAB_1463:
00255A  1  A9 00                LDA     #$00            ; clear A
00255C  1  A8                   TAY                     ; clear Y
00255D  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, low byte
00255F  1  C8                   INY                     ; increment index
002560  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, high byte
002562  1  18                   CLC                     ; clear carry
002563  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002565  1  69 02                ADC     #$02            ; calculate end of BASIC low byte
002567  1  85 7B                STA     <Svarl          ; save start of vars low byte
002569  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
00256B  1  69 00                ADC     #$00            ; add any carry
00256D  1  85 7C                STA     <Svarh          ; save start of vars high byte
00256F  1               
00256F  1               ; reset execution to start, clear vars and flush stack
00256F  1               
00256F  1               LAB_1477:
00256F  1  18                   CLC                     ; clear carry
002570  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002572  1  69 FF                ADC     #$FF            ; -1
002574  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002576  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002578  1  69 FF                ADC     #$FF            ; -1+carry
00257A  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
00257C  1               ; "CLEAR" command gets here
00257C  1               
00257C  1               LAB_147A:
00257C  1  A5 85                LDA     <Ememl          ; get end of mem low byte
00257E  1  A4 86                LDY     <Ememh          ; get end of mem high byte
002580  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
002582  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002584  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
002586  1  A4 7C                LDY     <Svarh          ; get start of vars high byte
002588  1  85 7D                STA     <Sarryl         ; save var mem end low byte
00258A  1  84 7E                STY     <Sarryh         ; save var mem end high byte
00258C  1  85 7F                STA     <Earryl         ; save array mem end low byte
00258E  1  84 80                STY     <Earryh         ; save array mem end high byte
002590  1  20 67 27             JSR     LAB_161A        ; perform RESTORE command
002593  1               
002593  1               ; flush stack and clear continue flag
002593  1               
002593  1               LAB_1491:
002593  1  A2 68                LDX     #<des_sk        ; set descriptor stack pointer
002595  1  86 65                STX     <next_s         ; save descriptor stack pointer
002597  1  C2 30                ACCUMULATORINDEX16
002599  1  FA                   PLX                     ; pull return address low byte
00259A  1  A9 FF DF             LDA     #STACK          ; get the stack address
00259D  1  1B                   TCS                     ; and set the stack to it
00259E  1  DA                   PHX
00259F  1  E2 30                ACCUMULATORINDEX8
0025A1  1  A9 00                LDA     #$00            ; clear byte
0025A3  1  85 8C                STA     <Cpntrh         ; clear continue pointer high byte
0025A5  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
0025A7  1               LAB_14A6:
0025A7  1  60                   RTS
0025A8  1               
0025A8  1               ; perform CLEAR
0025A8  1               
0025A8  1               LAB_CLEAR:
0025A8  1  F0 D2                BEQ     LAB_147A        ; if no following token go do "CLEAR"
0025AA  1               
0025AA  1               ; else there was a following token (go do syntax error)
0025AA  1  60                   RTS
0025AB  1               
0025AB  1               ; perform LIST [n][-m]
0025AB  1               ; bigger, faster version (a _lot_ faster)
0025AB  1               
0025AB  1               LAB_LIST:
0025AB  1  90 06                BCC     LAB_14BD        ; branch if next character numeric (LIST n..)
0025AD  1               
0025AD  1  F0 04                BEQ     LAB_14BD        ; branch if next character [NULL] (LIST)
0025AF  1               
0025AF  1  C9 CC                CMP     #TK_MINUS       ; compare with token for -
0025B1  1  D0 F4                BNE     LAB_14A6        ; exit if not - (LIST -m)
0025B3  1               
0025B3  1               ; LIST [[n][-m]]
0025B3  1               ; this bit sets the n , if present, as the start and end
0025B3  1               LAB_14BD:
0025B3  1  20 79 29             JSR     LAB_GFPN        ; get fixed-point number into temp integer
0025B6  1  20 2E 25             JSR     LAB_SSLN        ; search BASIC for temp integer line number
0025B9  1               ; (pointer in <Baslnl/<Baslnh)
0025B9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0025BD  1  F0 0D                BEQ     LAB_14D4        ; branch if no more characters
0025BF  1               
0025BF  1               ; this bit checks the - is present
0025BF  1  C9 CC                CMP     #TK_MINUS       ; compare with token for -
0025C1  1  D0 61                BNE     LAB_152B        ; return if not "-" (will be Syntax error)
0025C3  1               
0025C3  1               ; LIST [n]-m
0025C3  1               ; the - was there so set m as the end value
0025C3  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0025C7  1  20 79 29             JSR     LAB_GFPN        ; get fixed-point number into temp integer
0025CA  1  D0 58                BNE     LAB_152B        ; exit if not ok
0025CC  1               
0025CC  1               LAB_14D4:
0025CC  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
0025CE  1  05 12                ORA     <Itemph         ; OR temporary integer high byte
0025D0  1  D0 06                BNE     LAB_14E2        ; branch if start set
0025D2  1               
0025D2  1  A9 FF                LDA     #$FF            ; set for -1
0025D4  1  85 11                STA     <Itempl         ; set temporary integer low byte
0025D6  1  85 12                STA     <Itemph         ; set temporary integer high byte
0025D8  1               LAB_14E2:
0025D8  1  A0 01                LDY     #$01            ; set index for line
0025DA  1  84 60                STY     <Oquote         ; clear open quote flag
0025DC  1  20 98 2B             JSR     LAB_CRLF        ; print CR/LF
0025DF  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0025E1  1               ; pointer initially set by search at LAB_14BD
0025E1  1  F0 41                BEQ     LAB_152B        ; if null all done so exit
0025E3  1  20 2C 27             JSR     LAB_1629        ; do CRTL-C check vector
0025E6  1               
0025E6  1  C8                   INY                     ; increment index for line
0025E7  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
0025E9  1  AA                   TAX                     ; copy to X
0025EA  1  C8                   INY                     ; increment index
0025EB  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
0025ED  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
0025EF  1  D0 04                BNE     LAB_14FF        ; branch if no high byte match
0025F1  1               
0025F1  1  E4 11                CPX     <Itempl         ; compare with temporary integer low byte
0025F3  1  F0 02                BEQ     LAB_1501        ; branch if = last line to do (< will pass next branch)
0025F5  1               
0025F5  1               LAB_14FF:                       ; else ..
0025F5  1  B0 2D                BCS     LAB_152B        ; if greater all done so exit
0025F7  1               
0025F7  1               LAB_1501:
0025F7  1  84 97                STY     <Tidx1          ; save index for line
0025F9  1  20 FE 42             JSR     LAB_295E        ; print XA as unsigned integer
0025FC  1  A9 20                LDA     #$20            ; space is the next character
0025FE  1               LAB_1508:
0025FE  1  A4 97                LDY     <Tidx1          ; get index for line
002600  1  29 7F                AND     #$7F            ; mask top out bit of character
002602  1               LAB_150C:
002602  1  20 0E 2C             JSR     LAB_PRNA        ; go print the character
002605  1  C9 22                CMP     #$22            ; was it " character
002607  1  D0 06                BNE     LAB_1519        ; branch if not
002609  1               
002609  1               ; we are either entering or leaving a pair of quotes
002609  1  A5 60                LDA     <Oquote         ; get open quote flag
00260B  1  49 FF                EOR     #$FF            ; toggle it
00260D  1  85 60                STA     <Oquote         ; save it back
00260F  1               LAB_1519:
00260F  1  C8                   INY                     ; increment index
002610  1  B1 AA                LDA     (<Baslnl),Y     ; get next byte
002612  1  D0 11                BNE     LAB_152E        ; branch if not [EOL] (go print character)
002614  1  A8                   TAY                     ; else clear index
002615  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
002617  1  AA                   TAX                     ; copy to X
002618  1  C8                   INY                     ; increment index
002619  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
00261B  1  86 AA                STX     <Baslnl         ; set pointer to line low byte
00261D  1  85 AB                STA     <Baslnh         ; set pointer to line high byte
00261F  1  F0 03                BEQ     LAB_152B
002621  1  4C D8 25             JMP     LAB_14E2        ; go do next line if not [EOT]
002624  1               
002624  1               ; else ..
002624  1               LAB_152B:
002624  1  60                   RTS
002625  1               
002625  1               LAB_152E:
002625  1  10 DB                BPL     LAB_150C        ; just go print it if not token byte
002627  1               
002627  1               ; else was token byte so uncrunch it (maybe)
002627  1  24 60                BIT     <Oquote         ; test the open quote flag
002629  1  30 D7                BMI     LAB_150C        ; just go print character if open quote set
00262B  1               
00262B  1  A2 14                LDX     #>LAB_KEYT      ; get table address high byte
00262D  1  0A                   ASL     A               ; *2
00262E  1  0A                   ASL     A               ; *4
00262F  1  90 02                BCC     LAB_152F        ; branch if no carry
002631  1               
002631  1  E8                   INX                     ; else increment high byte
002632  1  18                   CLC                     ; clear carry for add
002633  1               LAB_152F:
002633  1  69 04                ADC     #<LAB_KEYT      ; add low byte
002635  1  90 01                BCC     LAB_1530        ; branch if no carry
002637  1               
002637  1  E8                   INX                     ; else increment high byte
002638  1               LAB_1530:
002638  1  85 73                STA     <ut2_pl         ; save table pointer low byte
00263A  1  86 74                STX     <ut2_ph         ; save table pointer high byte
00263C  1  84 97                STY     <Tidx1          ; save index for line
00263E  1  A0 00                LDY     #$00            ; clear index
002640  1  B1 73                LDA     (<ut2_pl),Y     ; get length
002642  1  AA                   TAX                     ; copy length
002643  1  C8                   INY                     ; increment index
002644  1  B1 73                LDA     (<ut2_pl),Y     ; get 1st character
002646  1  CA                   DEX                     ; decrement length
002647  1  D0 03                BNE     LAB_1508_A
002649  1  4C FE 25             JMP     LAB_1508        ; if no more characters exit and print
00264C  1               LAB_1508_A:
00264C  1  20 0E 2C             JSR     LAB_PRNA        ; go print the character
00264F  1  C8                   INY                     ; increment index
002650  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address low byte
002652  1  48                   PHA                     ; save it for now
002653  1  C8                   INY                     ; increment index
002654  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address high byte
002656  1  A0 00                LDY     #$00
002658  1  85 74                STA     <ut2_ph         ; save keyword pointer high byte
00265A  1  68                   PLA                     ; pull low byte
00265B  1  85 73                STA     <ut2_pl         ; save keyword pointer low byte
00265D  1               LAB_1540:
00265D  1  B1 73                LDA     (<ut2_pl),Y     ; get character
00265F  1  CA                   DEX                     ; decrement character count
002660  1  D0 03                BNE     LAB_1508_B
002662  1  4C FE 25             JMP     LAB_1508        ; if last character exit and print
002665  1               LAB_1508_B:
002665  1  20 0E 2C             JSR     LAB_PRNA        ; go print the character
002668  1  C8                   INY                     ; increment index
002669  1  D0 F2                BNE     LAB_1540        ; loop for next character
00266B  1               
00266B  1               ; perform FOR
00266B  1               
00266B  1               LAB_FOR:
00266B  1  A9 80                LDA     #$80            ; set FNX
00266D  1  85 61                STA     <Sufnxf         ; set subscript/FNX flag
00266F  1  20 DB 29             JSR     LAB_LET         ; go do LET
002672  1  68                   PLA                     ; pull return address
002673  1  68                   PLA                     ; pull return address
002674  1  A9 10                LDA     #$10            ; we need 16d bytes !
002676  1  20 D3 22             JSR     LAB_1212        ; check room on stack for A bytes
002679  1  20 C7 28             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
00267C  1  18                   CLC                     ; clear carry for add
00267D  1  98                   TYA                     ; copy index to A
00267E  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002680  1  48                   PHA                     ; push onto stack
002681  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002683  1  69 00                ADC     #$00            ; add carry
002685  1  48                   PHA                     ; push onto stack
002686  1  A5 88                LDA     <Clineh         ; get current line high byte
002688  1  48                   PHA                     ; push onto stack
002689  1  A5 87                LDA     <Clinel         ; get current line low byte
00268B  1  48                   PHA                     ; push onto stack
00268C  1  A9 C2                LDA     #TK_TO          ; get "TO" token
00268E  1  20 70 2F             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
002691  1  20 4C 2E             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
002694  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002697  1               ; else do type mismatch
002697  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
002699  1  09 7F                ORA     #$7F            ; set all non sign bits
00269B  1  25 AD                AND     <FAC1_1         ; and FAC1 mantissa1
00269D  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00269F  1  A9 AA                LDA     #<LAB_159F      ; set return address low byte
0026A1  1  A0 26                LDY     #>LAB_159F      ; set return address high byte
0026A3  1  85 71                STA     <ut1_pl         ; save return address low byte
0026A5  1  84 72                STY     <ut1_ph         ; save return address high byte
0026A7  1  4C 02 2F             JMP     LAB_1B66        ; round FAC1 and put on stack (returns to next instruction)
0026AA  1               
0026AA  1               LAB_159F:
0026AA  1  A9 9A                LDA     #<LAB_259C      ; set 1 pointer low addr (default step size)
0026AC  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high addr
0026AE  1  20 D7 3F             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0026B1  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0026B5  1  C9 C7                CMP     #TK_STEP        ; compare with STEP token
0026B7  1  D0 07                BNE     LAB_15B3        ; jump if not "STEP"
0026B9  1               
0026B9  1               ;.was step so ..
0026B9  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0026BD  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0026C0  1               ; else do type mismatch
0026C0  1               LAB_15B3:
0026C0  1  20 E3 40             JSR     LAB_27CA        ; return A=FF,C=1/-ve A=01,C=0/+ve
0026C3  1  85 B0                STA     <FAC1_s         ; set FAC1 sign (b7)
0026C5  1               ; this is +1 for +ve step and -1 for -ve step, in NEXT we
0026C5  1               ; compare the FOR value and the TO value and return +1 if
0026C5  1               ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
0026C5  1               ; here (+/-1) is then compared to that result and if they
0026C5  1               ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
0026C5  1               ; the loop is done
0026C5  1  20 F7 2E             JSR     LAB_1B5B        ; push sign, round FAC1 and put on stack
0026C8  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
0026CA  1  48                   PHA                     ; push on stack
0026CB  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
0026CD  1  48                   PHA                     ; push on stack
0026CE  1  A9 81                LDA     #TK_FOR         ; get FOR token
0026D0  1  48                   PHA                     ; push on stack
0026D1  1               
0026D1  1               ; interpreter inner loop
0026D1  1               
0026D1  1               LAB_15C2:
0026D1  1  20 2C 27             JSR     LAB_1629        ; do CRTL-C check vector
0026D4  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0026D6  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
0026D8  1               
0026D8  1  A6 88                LDX     <Clineh         ; continue line is $FFxx for immediate mode
0026DA  1               ; ($00xx for RUN from immediate mode)
0026DA  1  E8                   INX                     ; increment it (now $00 if immediate mode)
0026DB  1  F0 04                BEQ     LAB_15D1        ; branch if null (immediate mode)
0026DD  1               
0026DD  1  85 8B                STA     <Cpntrl         ; save continue pointer low byte
0026DF  1  84 8C                STY     <Cpntrh         ; save continue pointer high byte
0026E1  1               LAB_15D1:
0026E1  1  A0 00                LDY     #$00            ; clear index
0026E3  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
0026E5  1  F0 07                BEQ     LAB_15DC        ; branch if null [EOL]
0026E7  1               
0026E7  1  C9 3A                CMP     #':'            ; compare with ":"
0026E9  1  F0 1D                BEQ     LAB_15F6        ; branch if = (statement separator)
0026EB  1               
0026EB  1               LAB_15D9:
0026EB  1  4C 83 2F             JMP     LAB_SNER        ; else syntax error then warm start
0026EE  1               
0026EE  1               ; have reached [EOL]
0026EE  1               LAB_15DC:
0026EE  1  A0 02                LDY     #$02            ; set index
0026F0  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
0026F2  1  18                   CLC                     ; clear carry for no "BREAK" message
0026F3  1  F0 59                BEQ     LAB_1651        ; if null go to immediate mode (was immediate or [EOT]
0026F5  1               ; marker)
0026F5  1               
0026F5  1  C8                   INY                     ; increment index
0026F6  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # low byte
0026F8  1  85 87                STA     <Clinel         ; save current line low byte
0026FA  1  C8                   INY                     ; increment index
0026FB  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # high byte
0026FD  1  85 88                STA     <Clineh         ; save current line high byte
0026FF  1  98                   TYA                     ; A now = 4
002700  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002702  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002704  1  90 02                BCC     LAB_15F6        ; branch if no overflow
002706  1               
002706  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002708  1               LAB_15F6:
002708  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00270C  1               
00270C  1               
00270C  1               
00270C  1               
00270C  1               LAB_15F9:
00270C  1  20 12 27             JSR     LAB_15FF        ; go interpret BASIC code from (<Bpntrl)
00270F  1               LAB_15FC:
00270F  1  4C D1 26             JMP     LAB_15C2        ; loop
002712  1               
002712  1               ; interpret BASIC code from (<Bpntrl)
002712  1               
002712  1               LAB_15FF:
002712  1  F0 61                BEQ     LAB_1628        ; exit if zero [EOL]
002714  1               
002714  1               LAB_1602:
002714  1  0A                   ASL     A               ; *2 bytes per vector and normalise token
002715  1  B0 03                BCS     LAB_1609        ; branch if was token
002717  1  4C DB 29             JMP     LAB_LET         ; else go do implied LET
00271A  1               
00271A  1               LAB_1609:
00271A  1               TK_TABUSE       = (TK_TAB-$80)*2
00271A  1  C9 80                CMP     #TK_TABUSE      ; compare normalised token * 2 with TAB
00271C  1  B0 CD                BCS     LAB_15D9        ; branch if A>=TAB (do syntax error then warm start)
00271E  1               ; only tokens before TAB can start a line
00271E  1  A8                   TAY                     ; copy to index
00271F  1  B9 39 10             LDA     LAB_CTBL+1,Y    ; get vector high byte
002722  1  48                   PHA                     ; onto stack
002723  1  B9 38 10             LDA     LAB_CTBL,Y      ; get vector low byte
002726  1  48                   PHA                     ; onto stack
002727  1  22 BC 00 00          JSL     LAB_IGBY        ; jump to increment and scan memory
00272B  1               ; then "return" to vector
00272B  1  60                   RTS
00272C  1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
00272C  1               ; key press is detected.
00272C  1               
00272C  1               LAB_1629:
00272C  1  6C 03 02             JMP     (VEC_CC)        ; ctrl c check vector
00272F  1               
00272F  1               ; if there was a key press it gets back here ..
00272F  1               
00272F  1               LAB_1636:
00272F  1  C9 03                CMP     #$03            ; compare with CTRL-C
002731  1               
002731  1               ; perform STOP
002731  1               
002731  1               LAB_STOP:
002731  1  B0 01                BCS     LAB_163B        ; branch if token follows STOP
002733  1               ; else just END
002733  1               ; END
002733  1               
002733  1               LAB_END:
002733  1  18                   CLC                     ; clear the carry, indicate a normal program end
002734  1               LAB_163B:
002734  1  D0 72                BNE     LAB_167A        ; if wasn't CTRL-C or there is a following byte return
002736  1               
002736  1  A5 C4                LDA     <Bpntrh         ; get the BASIC execute pointer high byte
002738  1  49 21                EOR     #>Ibuffs        ; compare with buffer address high byte (Cb unchanged)
00273A  1  F0 10                BEQ     LAB_164F        ; branch if the BASIC pointer is in the input buffer
00273C  1               ; (can't continue in immediate mode)
00273C  1               
00273C  1               ; else ..
00273C  1  49 21                EOR     #>Ibuffs        ; correct the bits
00273E  1  A4 C3                LDY     <Bpntrl         ; get BASIC execute pointer low byte
002740  1  84 8B                STY     <Cpntrl         ; save continue pointer low byte
002742  1  85 8C                STA     <Cpntrh         ; save continue pointer high byte
002744  1               LAB_1647:
002744  1  A5 87                LDA     <Clinel         ; get current line low byte
002746  1  A4 88                LDY     <Clineh         ; get current line high byte
002748  1  85 89                STA     <Blinel         ; save break line low byte
00274A  1  84 8A                STY     <Blineh         ; save break line high byte
00274C  1               LAB_164F:
00274C  1  68                   PLA                     ; pull return address low
00274D  1  68                   PLA                     ; pull return address high
00274E  1               LAB_1651:
00274E  1  90 12                BCC     LAB_165E        ; if was program end just do warm start
002750  1               
002750  1               ; else ..
002750  1               
002750  1  A5 06                LDA     <VIDEOMODE
002752  1  C9 02                CMP     #2
002754  1  F0 05                BEQ     LAB_1651A
002756  1  A2 02                LDX     #2
002758  1  20 FC 1D             JSR     V_SCREEN1
00275B  1               LAB_1651A:
00275B  1  A9 C2                LDA     #<LAB_BMSG      ; point to "Break" low byte
00275D  1  A0 17                LDY     #>LAB_BMSG      ; point to "Break" high byte
00275F  1  4C 3C 23             JMP     LAB_1269        ; print "Break" and do warm start
002762  1               
002762  1               LAB_165E:
002762  1  4C 47 23             JMP     LAB_1274        ; go do warm start
002765  1               
002765  1               ; perform RESTORE
002765  1               
002765  1               LAB_RESTORE:
002765  1  D0 0F                BNE     LAB_RESTOREn    ; branch if next character not null (RESTORE n)
002767  1               
002767  1               LAB_161A:
002767  1  38                   SEC                     ; set carry for subtract
002768  1  A5 79                LDA     <Smeml          ; get start of mem low byte
00276A  1  E9 01                SBC     #$01            ; -1
00276C  1  A4 7A                LDY     <Smemh          ; get start of mem high byte
00276E  1  B0 01                BCS     LAB_1624        ; branch if no underflow
002770  1               
002770  1               LAB_uflow:
002770  1  88                   DEY                     ; else decrement high byte
002771  1               LAB_1624:
002771  1  85 8F                STA     <Dptrl          ; save DATA pointer low byte
002773  1  84 90                STY     <Dptrh          ; save DATA pointer high byte
002775  1               LAB_1628:
002775  1  60                   RTS
002776  1               
002776  1               ; is RESTORE n
002776  1               LAB_RESTOREn:
002776  1  20 79 29             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002779  1  20 CA 28             JSR     LAB_SNBL        ; scan for next BASIC line
00277C  1  A5 88                LDA     <Clineh         ; get current line high byte
00277E  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002780  1  B0 0B                BCS     LAB_reset_search; branch if >= (start search from beginning)
002782  1               
002782  1  98                   TYA                     ; else copy line index to A
002783  1  38                   SEC                     ; set carry (+1)
002784  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002786  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002788  1  90 07                BCC     LAB_go_search   ; branch if no overflow to high byte
00278A  1               
00278A  1  E8                   INX                     ; increment high byte
00278B  1  B0 04                BCS     LAB_go_search   ; branch always (can never be carry clear)
00278D  1               
00278D  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
00278D  1               
00278D  1               LAB_reset_search:
00278D  1  A5 79                LDA     <Smeml          ; get start of mem low byte
00278F  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002791  1               
002791  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002791  1               
002791  1               LAB_go_search:
002791  1               
002791  1  20 32 25             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002794  1  B0 03                BCS     LAB_line_found  ; if carry set go set pointer
002796  1               
002796  1  4C 9C 28             JMP     LAB_16F7        ; else go do "Undefined statement" error
002799  1               
002799  1               LAB_line_found:
002799  1               ; carry already set for subtract
002799  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
00279B  1  E9 01                SBC     #$01            ; -1
00279D  1  A4 AB                LDY     <Baslnh         ; get pointer high byte
00279F  1  B0 D0                BCS     LAB_1624        ; branch if no underflow (save DATA pointer and return)
0027A1  1               
0027A1  1  90 CD                BCC     LAB_uflow       ; else decrement high byte then save DATA pointer and
0027A3  1               ; return (branch always)
0027A3  1               
0027A3  1               ; perform NULL
0027A3  1               
0027A3  1               LAB_NULL:
0027A3  1  20 F9 3A             JSR     LAB_GTBY        ; get byte parameter
0027A6  1  86 0D                STX     <Nullct         ; save new NULL count
0027A8  1               LAB_167A:
0027A8  1  60                   RTS
0027A9  1               
0027A9  1               ; perform CONT
0027A9  1               
0027A9  1               LAB_CONT:
0027A9  1  D0 FD                BNE     LAB_167A        ; if following byte exit to do syntax error
0027AB  1               
0027AB  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
0027AD  1  D0 05                BNE     LAB_166C        ; go do continue if we can
0027AF  1               
0027AF  1  A2 1E                LDX     #$1E            ; error code $1E ("Can't continue" error)
0027B1  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
0027B4  1               
0027B4  1               ; we can continue so ..
0027B4  1               LAB_166C:
0027B4  1  A9 93                LDA     #TK_ON          ; set token for ON
0027B6  1  20 13 48             JSR     LAB_IRQ         ; set IRQ flags
0027B9  1  A9 93                LDA     #TK_ON          ; set token for ON
0027BB  1  20 16 48             JSR     LAB_NMI         ; set NMI flags
0027BE  1               
0027BE  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
0027C0  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
0027C2  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0027C4  1  A5 89                LDA     <Blinel         ; get break line low byte
0027C6  1  A4 8A                LDY     <Blineh         ; get break line high byte
0027C8  1  85 87                STA     <Clinel         ; set current line low byte
0027CA  1  84 88                STY     <Clineh         ; set current line high byte
0027CC  1  60                   RTS
0027CD  1               
0027CD  1               ; perform RUN
0027CD  1               
0027CD  1               LAB_RUN:
0027CD  1  D0 03                BNE     LAB_1696        ; branch if RUN n
0027CF  1  4C 6F 25             JMP     LAB_1477        ; reset execution to start, clear variables, flush stack and
0027D2  1               ; return
0027D2  1               
0027D2  1               ; does RUN n
0027D2  1               
0027D2  1               LAB_1696:
0027D2  1  20 7C 25             JSR     LAB_147A        ; go do "CLEAR"
0027D5  1  F0 2F                BEQ     LAB_16B0        ; get n and do GOTO n (branch always as CLEAR sets Z=1)
0027D7  1               
0027D7  1               ; perform DO
0027D7  1               
0027D7  1               LAB_DO:
0027D7  1  A9 05                LDA     #$05            ; need 5 bytes for DO
0027D9  1  20 D3 22             JSR     LAB_1212        ; check room on stack for A bytes
0027DC  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0027DE  1  48                   PHA                     ; push on stack
0027DF  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0027E1  1  48                   PHA                     ; push on stack
0027E2  1  A5 88                LDA     <Clineh         ; get current line high byte
0027E4  1  48                   PHA                     ; push on stack
0027E5  1  A5 87                LDA     <Clinel         ; get current line low byte
0027E7  1  48                   PHA                     ; push on stack
0027E8  1  A9 9C                LDA     #TK_DO          ; token for DO
0027EA  1  48                   PHA                     ; push on stack
0027EB  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0027EF  1  4C D1 26             JMP     LAB_15C2        ; go do interpreter inner loop
0027F2  1               
0027F2  1               ; perform GOSUB
0027F2  1               
0027F2  1               LAB_GOSUB:
0027F2  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
0027F4  1  20 D3 22             JSR     LAB_1212        ; check room on stack for A bytes
0027F7  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0027F9  1  48                   PHA                     ; push on stack
0027FA  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0027FC  1  48                   PHA                     ; push on stack
0027FD  1  A5 88                LDA     <Clineh         ; get current line high byte
0027FF  1  48                   PHA                     ; push on stack
002800  1  A5 87                LDA     <Clinel         ; get current line low byte
002802  1  48                   PHA                     ; push on stack
002803  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
002805  1  48                   PHA                     ; push on stack
002806  1               LAB_16B0:
002806  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00280A  1  20 10 28             JSR     LAB_GOTO        ; perform GOTO n
00280D  1  4C D1 26             JMP     LAB_15C2        ; go do interpreter inner loop
002810  1               ; (can't RTS, we used the stack!)
002810  1               
002810  1               ; perform GOTO
002810  1               
002810  1               LAB_GOTO:
002810  1  20 79 29             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002813  1  20 CA 28             JSR     LAB_SNBL        ; scan for next BASIC line
002816  1  A5 88                LDA     <Clineh         ; get current line high byte
002818  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
00281A  1  B0 0B                BCS     LAB_16D0        ; branch if >= (start search from beginning)
00281C  1               
00281C  1  98                   TYA                     ; else copy line index to A
00281D  1  38                   SEC                     ; set carry (+1)
00281E  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002820  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002822  1  90 07                BCC     LAB_16D4        ; branch if no overflow to high byte
002824  1               
002824  1  E8                   INX                     ; increment high byte
002825  1  B0 04                BCS     LAB_16D4        ; branch always (can never be carry)
002827  1               
002827  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002827  1               
002827  1               LAB_16D0:
002827  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002829  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
00282B  1               
00282B  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
00282B  1               
00282B  1               LAB_16D4:
00282B  1  20 32 25             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
00282E  1  90 6C                BCC     LAB_16F7        ; if carry clear go do "Undefined statement" error
002830  1               ; (unspecified statement)
002830  1               
002830  1               ; carry already set for subtract
002830  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002832  1  E9 01                SBC     #$01            ; -1
002834  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002836  1  A5 AB                LDA     <Baslnh         ; get pointer high byte
002838  1  E9 00                SBC     #$00            ; subtract carry
00283A  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
00283C  1               LAB_16E5:
00283C  1  60                   RTS
00283D  1               
00283D  1               LAB_DONOK:
00283D  1  A2 22                LDX     #$22            ; error code $22 ("LOOP without DO" error)
00283F  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
002842  1               
002842  1               ; perform LOOP
002842  1               
002842  1               LAB_LOOP:
002842  1  A8                   TAY                     ; save following token
002843  1  A3 03                LDA     3,S             ; get token byte from stack
002845  1  C9 9C                CMP     #TK_DO          ; compare with DO token
002847  1  D0 F4                BNE     LAB_DONOK       ; branch if no matching DO
002849  1               
002849  1               ; FIXUP STACK
002849  1  C2 10                INDEX16
00284B  1  BA                   TSX
00284C  1  E8                   INX                     ; dump calling routine return address
00284D  1  E8                   INX                     ; dump calling routine return address
00284E  1  9A                   TXS                     ; correct stack
00284F  1  E2 10                INDEX8
002851  1               
002851  1  98                   TYA                     ; get saved following token back
002852  1  F0 20                BEQ     LoopAlways      ; if no following token loop forever
002854  1               ; (stack pointer in X)
002854  1               
002854  1  C9 3A                CMP     #':'            ; could be ':'
002856  1  F0 1C                BEQ     LoopAlways      ; if :... loop forever
002858  1               
002858  1  E9 C8                SBC     #TK_UNTIL       ; subtract token for UNTIL, we know carry is set here
00285A  1  AA                   TAX                     ; copy to X (if it was UNTIL then Y will be correct)
00285B  1  F0 04                BEQ     DoRest          ; branch if was UNTIL
00285D  1               
00285D  1  CA                   DEX                     ; decrement result
00285E  1  D0 64                BNE     LAB_16FC        ; if not WHILE go do syntax error and warm start
002860  1               ; only if the token was WHILE will this fail
002860  1               
002860  1  CA                   DEX                     ; set invert result byte
002861  1               DoRest:
002861  1  86 98                STX     <Frnxth         ; save invert result byte
002863  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002867  1  20 5D 2E             JSR     LAB_EVEX        ; evaluate expression
00286A  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00286C  1  F0 02                BEQ     DoCmp           ; if =0 go do straight compare
00286E  1               
00286E  1  A9 FF                LDA     #$FF            ; else set all bits
002870  1               DoCmp:
002870  1  45 98                EOR     <Frnxth         ; EOR with invert byte
002872  1  D0 17                BNE     LoopDone        ; if <> 0 clear stack and back to interpreter loop
002874  1               
002874  1               ; loop condition wasn't met so do it again
002874  1               LoopAlways:
002874  1  A3 02                LDA     2,S             ; get current line low byte
002876  1  85 87                STA     <Clinel         ; save current line low byte
002878  1  A3 03                LDA     3,S             ; get current line high byte
00287A  1  85 88                STA     <Clineh         ; save current line high byte
00287C  1  A3 04                LDA     4,S             ; get BASIC execute pointer low byte
00287E  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002880  1  A3 05                LDA     5,S             ; get BASIC execute pointer high byte
002882  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002884  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002888  1  4C D1 26             JMP     LAB_15C2        ; go do interpreter inner loop
00288B  1               
00288B  1               ; clear stack and back to interpreter loop
00288B  1               LoopDone:
00288B  1  C2 10                INDEX16
00288D  1  BA                   TSX
00288E  1  E8                   INX                     ; dump DO token
00288F  1  E8                   INX                     ; dump current line low byte
002890  1  E8                   INX                     ; dump current line high byte
002891  1  E8                   INX                     ; dump BASIC execute pointer low byte
002892  1  E8                   INX                     ; dump BASIC execute pointer high byte
002893  1  9A                   TXS                     ; correct stack
002894  1  E2 10                INDEX8
002896  1  4C B6 28             JMP     LAB_DATA        ; go perform DATA (find : or [EOL])
002899  1               
002899  1               ; do the return without gosub error
002899  1               
002899  1               LAB_16F4:
002899  1  A2 04                LDX     #$04            ; error code $04 ("RETURN without GOSUB" error)
00289B  1  2C                   .BYTE   $2C             ; makes next line BIT LAB_0EA2
00289C  1               
00289C  1               LAB_16F7:                       ; do undefined statement error
00289C  1  A2 0E                LDX     #$0E            ; error code $0E ("Undefined statement" error)
00289E  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
0028A1  1               
0028A1  1               ; perform RETURN
0028A1  1               
0028A1  1               LAB_RETURN:
0028A1  1  D0 99                BNE     LAB_16E5        ; exit if following token (to allow syntax error)
0028A3  1               
0028A3  1               LAB_16E8:
0028A3  1  68                   PLA                     ; dump calling routine return address
0028A4  1  68                   PLA                     ; dump calling routine return address
0028A5  1  68                   PLA                     ; pull token
0028A6  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
0028A8  1  D0 EF                BNE     LAB_16F4        ; branch if no matching GOSUB
0028AA  1               
0028AA  1               LAB_16FF:
0028AA  1  68                   PLA                     ; pull current line low byte
0028AB  1  85 87                STA     <Clinel         ; save current line low byte
0028AD  1  68                   PLA                     ; pull current line high byte
0028AE  1  85 88                STA     <Clineh         ; save current line high byte
0028B0  1  68                   PLA                     ; pull BASIC execute pointer low byte
0028B1  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0028B3  1  68                   PLA                     ; pull BASIC execute pointer high byte
0028B4  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
0028B6  1               
0028B6  1               ; now do the DATA statement as we could be returning into
0028B6  1               ; the middle of an ON <var> GOSUB n,m,p,q line
0028B6  1               ; (the return address used by the DATA statement is the one
0028B6  1               ; pushed before the GOSUB was executed!)
0028B6  1               
0028B6  1               ; perform DATA
0028B6  1               
0028B6  1               LAB_DATA:
0028B6  1  20 C7 28             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
0028B9  1               
0028B9  1               ; set BASIC execute pointer
0028B9  1               LAB_170F:
0028B9  1  98                   TYA                     ; copy index to A
0028BA  1  18                   CLC                     ; clear carry for add
0028BB  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
0028BD  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0028BF  1  90 02                BCC     LAB_1719        ; skip next if no carry
0028C1  1               
0028C1  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
0028C3  1               LAB_1719:
0028C3  1  60                   RTS
0028C4  1               
0028C4  1               LAB_16FC:
0028C4  1  4C 83 2F             JMP     LAB_SNER        ; do syntax error then warm start
0028C7  1               
0028C7  1               ; scan for next BASIC statement ([:] or [EOL])
0028C7  1               ; returns Y as index to [:] or [EOL]
0028C7  1               
0028C7  1               LAB_SNBS:
0028C7  1  A2 3A                LDX     #':'            ; set look for character = ":"
0028C9  1  2C                   .BYTE   $2C             ; makes next line BIT $00A2
0028CA  1               
0028CA  1               ; scan for next BASIC line
0028CA  1               ; returns Y as index to [EOL]
0028CA  1               
0028CA  1               LAB_SNBL:
0028CA  1  A2 00                LDX     #$00            ; set alt search character = [EOL]
0028CC  1  A0 00                LDY     #$00            ; set search character = [EOL]
0028CE  1  84 5C                STY     <Asrch          ; store search character
0028D0  1               LAB_1725:
0028D0  1  8A                   TXA                     ; get alt search character
0028D1  1  45 5C                EOR     <Asrch          ; toggle search character, effectively swap with $00
0028D3  1  85 5C                STA     <Asrch          ; save swapped search character
0028D5  1               LAB_172D:
0028D5  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
0028D7  1  F0 EA                BEQ     LAB_1719        ; exit if null [EOL]
0028D9  1               
0028D9  1  C5 5C                CMP     <Asrch          ; compare with search character
0028DB  1  F0 E6                BEQ     LAB_1719        ; exit if found
0028DD  1               
0028DD  1  C8                   INY                     ; increment index
0028DE  1  C9 22                CMP     #$22            ; compare current character with open quote
0028E0  1  D0 F3                BNE     LAB_172D        ; if not open quote go get next character
0028E2  1               
0028E2  1  F0 EC                BEQ     LAB_1725        ; if found go swap search character for alt search character
0028E4  1               
0028E4  1               ; perform IF
0028E4  1               
0028E4  1               LAB_IF:
0028E4  1  20 5D 2E             JSR     LAB_EVEX        ; evaluate the expression
0028E7  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0028EB  1  C9 C5                CMP     #TK_THEN        ; compare with THEN token
0028ED  1  F0 12                BEQ     LAB_174B        ; if it was THEN go do IF
0028EF  1               
0028EF  1               ; wasn't IF .. THEN so must be IF .. GOTO
0028EF  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
0028F1  1  D0 D1                BNE     LAB_16FC        ; if it wasn't GOTO go do syntax error
0028F3  1               
0028F3  1  A6 C3                LDX     <Bpntrl         ; save the basic pointer low byte
0028F5  1  A4 C4                LDY     <Bpntrh         ; save the basic pointer high byte
0028F7  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0028FB  1  B0 C7                BCS     LAB_16FC        ; if not numeric go do syntax error
0028FD  1               
0028FD  1  86 C3                STX     <Bpntrl         ; restore the basic pointer low byte
0028FF  1  84 C4                STY     <Bpntrh         ; restore the basic pointer high byte
002901  1               LAB_174B:
002901  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002903  1  F0 1F                BEQ     LAB_174E        ; if the result was zero go look for an ELSE
002905  1               
002905  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
002909  1  B0 03                BCS     LAB_174D        ; if not numeric go do var or keyword
00290B  1               
00290B  1               LAB_174C:
00290B  1  4C 10 28             JMP     LAB_GOTO        ; else was numeric so do GOTO n
00290E  1               
00290E  1               ; is var or keyword
00290E  1               LAB_174D:
00290E  1  C9 90                CMP     #TK_RETURN      ; compare the byte with the token for RETURN
002910  1  D0 03                BNE     LAB_174G        ; if it wasn't RETURN go interpret BASIC code from (<Bpntrl)
002912  1               ; and return to this code to process any following code
002912  1               
002912  1  4C 14 27             JMP     LAB_1602        ; else it was RETURN so interpret BASIC code from (<Bpntrl)
002915  1               ; but don't return here
002915  1               
002915  1               LAB_174G:
002915  1  20 12 27             JSR     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002918  1               
002918  1               ; the IF was executed and there may be a following ELSE so the code needs to return
002918  1               ; here to check and ignore the ELSE if present
002918  1               
002918  1  A0 00                LDY     #$00            ; clear the index
00291A  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
00291C  1  C9 C1                CMP     #TK_ELSE        ; compare it with the token for ELSE
00291E  1  D0 03                BNE     LAB_DATA_A
002920  1  4C B6 28             JMP     LAB_DATA        ; if ELSE ignore the following statement
002923  1               
002923  1               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
002923  1               ; following ELSE will, correctly, cause a syntax error
002923  1               LAB_DATA_A:
002923  1  60                   RTS                     ; else return to the interpreter inner loop
002924  1               
002924  1               ; perform ELSE after IF
002924  1               
002924  1               LAB_174E:
002924  1  A0 00                LDY     #$00            ; clear the BASIC byte index
002926  1  A2 01                LDX     #$01            ; clear the nesting depth
002928  1               LAB_1750:
002928  1  C8                   INY                     ; increment the BASIC byte index
002929  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
00292B  1  F0 0F                BEQ     LAB_1753        ; if EOL go add the pointer and return
00292D  1               
00292D  1  C9 8D                CMP     #TK_IF          ; compare the byte with the token for IF
00292F  1  D0 03                BNE     LAB_1752        ; if not IF token skip the depth increment
002931  1               
002931  1  E8                   INX                     ; else increment the nesting depth ..
002932  1  D0 F4                BNE     LAB_1750        ; .. and continue looking
002934  1               
002934  1               LAB_1752:
002934  1  C9 C1                CMP     #TK_ELSE        ; compare the byte with the token for ELSE
002936  1  D0 F0                BNE     LAB_1750        ; if not ELSE token continue looking
002938  1               
002938  1  CA                   DEX                     ; was ELSE so decrement the nesting depth
002939  1  D0 ED                BNE     LAB_1750        ; loop if still nested
00293B  1               
00293B  1  C8                   INY                     ; increment the BASIC byte index past the ELSE
00293C  1               
00293C  1               ; found the matching ELSE, now do <{n|statement}>
00293C  1               
00293C  1               LAB_1753:
00293C  1  98                   TYA                     ; else copy line index to A
00293D  1  18                   CLC                     ; clear carry for add
00293E  1  65 C3                ADC     <Bpntrl         ; add the BASIC execute pointer low byte
002940  1  85 C3                STA     <Bpntrl         ; save the BASIC execute pointer low byte
002942  1  90 02                BCC     LAB_1754        ; branch if no overflow to high byte
002944  1               
002944  1  E6 C4                INC     <Bpntrh         ; else increment the BASIC execute pointer high byte
002946  1               LAB_1754:
002946  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00294A  1  90 BF                BCC     LAB_174C        ; if numeric do GOTO n
00294C  1               ; the code will return to the interpreter loop at the
00294C  1               ; tail end of the GOTO <n>
00294C  1               
00294C  1  4C 12 27             JMP     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
00294F  1               ; the code will return to the interpreter loop at the
00294F  1               ; tail end of the <statement>
00294F  1               
00294F  1               ; perform REM, skip (rest of) line
00294F  1               
00294F  1               LAB_REM:
00294F  1  20 CA 28             JSR     LAB_SNBL        ; scan for next BASIC line
002952  1  4C B9 28             JMP     LAB_170F        ; go set BASIC execute pointer and return, branch always
002955  1               
002955  1               LAB_16FD:
002955  1  4C 83 2F             JMP     LAB_SNER        ; do syntax error then warm start
002958  1               
002958  1               ; perform ON
002958  1               
002958  1               LAB_ON:
002958  1               LAB_NONM:
002958  1  20 F9 3A             JSR     LAB_GTBY        ; get byte parameter
00295B  1  48                   PHA                     ; push GOTO/GOSUB token
00295C  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
00295E  1  F0 04                BEQ     LAB_176B        ; branch if GOSUB
002960  1               
002960  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002962  1               LAB_1767:
002962  1  D0 F1                BNE     LAB_16FD        ; if not GOTO do syntax error then warm start
002964  1               
002964  1               
002964  1               ; next character was GOTO or GOSUB
002964  1               
002964  1               LAB_176B:
002964  1  C6 AF                DEC     <FAC1_3         ; decrement index (byte value)
002966  1  D0 04                BNE     LAB_1773        ; branch if not zero
002968  1               
002968  1  68                   PLA                     ; pull GOTO/GOSUB token
002969  1  4C 14 27             JMP     LAB_1602        ; go execute it
00296C  1               
00296C  1               LAB_1773:
00296C  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002970  1  20 79 29             JSR     LAB_GFPN        ; get fixed-point number into temp integer (skip this n)
002973  1               ; (we could LDX #',' and JSR LAB_SNBL+2, then we
002973  1               ; just BNE LAB_176B for the loop. should be quicker ..
002973  1               ; no we can't, what if we meet a colon or [EOL]?)
002973  1  C9 2C                CMP     #$2C            ; compare next character with ","
002975  1  F0 ED                BEQ     LAB_176B        ; loop if ","
002977  1               
002977  1               LAB_177E:
002977  1  68                   PLA                     ; else pull keyword token (run out of options)
002978  1               ; also dump +/-1 pointer low byte and exit
002978  1               LAB_177F:
002978  1  60                   RTS
002979  1               
002979  1               ; takes n * 106 + 11 cycles where n is the number of digits
002979  1               
002979  1               ; get fixed-point number into temp integer
002979  1               
002979  1               LAB_GFPN:
002979  1  A2 00                LDX     #$00            ; clear reg
00297B  1  86 11                STX     <Itempl         ; clear temporary integer low byte
00297D  1               LAB_1785:
00297D  1  86 12                STX     <Itemph         ; save temporary integer high byte
00297F  1  B0 F7                BCS     LAB_177F        ; return if carry set, end of scan, character was
002981  1               ; not 0-9
002981  1               
002981  1  E0 19                CPX     #$19            ; compare high byte with $19
002983  1  A8                   TAY                     ; ensure Zb = 0 if the branch is taken
002984  1  B0 DC                BCS     LAB_1767        ; branch if >=, makes max line # 63999 because next
002986  1               ; bit does *$0A, = 64000, compare at target will fail
002986  1               ; and do syntax error
002986  1               
002986  1  E9 2F                SBC     #'0'-1          ; subtract "0", $2F + carry, from byte
002988  1  A8                   TAY                     ; copy binary digit
002989  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
00298B  1  0A                   ASL     A               ; *2 low byte
00298C  1  26 12                ROL     <Itemph         ; *2 high byte
00298E  1  0A                   ASL     A               ; *2 low byte
00298F  1  26 12                ROL     <Itemph         ; *2 high byte, *4
002991  1  65 11                ADC     <Itempl         ; + low byte, *5
002993  1  85 11                STA     <Itempl         ; save it
002995  1  8A                   TXA                     ; get high byte copy to A
002996  1  65 12                ADC     <Itemph         ; + high byte, *5
002998  1  06 11                ASL     <Itempl         ; *2 low byte, *10d
00299A  1  2A                   ROL     A               ; *2 high byte, *10d
00299B  1  AA                   TAX                     ; copy high byte back to X
00299C  1  98                   TYA                     ; get binary digit back
00299D  1  65 11                ADC     <Itempl         ; add number low byte
00299F  1  85 11                STA     <Itempl         ; save number low byte
0029A1  1  90 01                BCC     LAB_17B3        ; if no overflow to high byte get next character
0029A3  1               
0029A3  1  E8                   INX                     ; else increment high byte
0029A4  1               LAB_17B3:
0029A4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0029A8  1  4C 7D 29             JMP     LAB_1785        ; loop for next character
0029AB  1               
0029AB  1               ; perform DEC
0029AB  1               
0029AB  1               LAB_DEC:
0029AB  1  A9 9E                LDA     #<LAB_2AFD      ; set -1 pointer low byte
0029AD  1  2C                   .BYTE   $2C             ; BIT abs to skip the LDA below
0029AE  1               
0029AE  1               ; perform INC
0029AE  1               
0029AE  1               LAB_INC:
0029AE  1  A9 9A                LDA     #<LAB_259C      ; set 1 pointer low byte
0029B0  1               LAB_17B5:
0029B0  1  48                   PHA                     ; save +/-1 pointer low byte
0029B1  1               LAB_17B7:
0029B1  1  20 5A 31             JSR     LAB_GVAR        ; get var address
0029B4  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
0029B6  1  30 20                BMI     IncrErr         ; exit if string
0029B8  1               
0029B8  1  85 97                STA     <Lvarpl         ; save var address low byte
0029BA  1  84 98                STY     <Lvarph         ; save var address high byte
0029BC  1  20 D7 3F             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0029BF  1  68                   PLA                     ; get +/-1 pointer low byte
0029C0  1  48                   PHA                     ; save +/-1 pointer low byte
0029C1  1  A0 18                LDY     #>LAB_259C      ; set +/-1 pointer high byte (both the same)
0029C3  1  20 C2 3C             JSR     LAB_246C        ; add (AY) to FAC1
0029C6  1  20 4D 40             JSR     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl)
0029C9  1               
0029C9  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0029CD  1  C9 2C                CMP     #','            ; compare with ","
0029CF  1  D0 A6                BNE     LAB_177E        ; exit if not "," (either end or error)
0029D1  1               
0029D1  1               ; was "," so another INCR variable to do
0029D1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0029D5  1  4C B1 29             JMP     LAB_17B7        ; go do next var
0029D8  1               
0029D8  1               IncrErr:
0029D8  1  4C 58 2E             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
0029DB  1               
0029DB  1               ; perform LET
0029DB  1               
0029DB  1               LAB_LET:
0029DB  1  20 5A 31             JSR     LAB_GVAR        ; get var address
0029DE  1  85 97                STA     <Lvarpl         ; save var address low byte
0029E0  1  84 98                STY     <Lvarph         ; save var address high byte
0029E2  1  A9 D6                LDA     #TK_EQUAL       ; get = token
0029E4  1  20 70 2F             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0029E7  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
0029E9  1  48                   PHA                     ; push data type flag
0029EA  1  20 5D 2E             JSR     LAB_EVEX        ; evaluate expression
0029ED  1  68                   PLA                     ; pop data type flag
0029EE  1  2A                   ROL     A               ; set carry if type = string
0029EF  1  20 4F 2E             JSR     LAB_CKTM        ; type match check, set C for string
0029F2  1  D0 03                BNE     LAB_17D5        ; branch if string
0029F4  1               
0029F4  1  4C 4D 40             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
0029F7  1               
0029F7  1               ; string LET
0029F7  1               
0029F7  1               LAB_17D5:
0029F7  1  A0 02                LDY     #$02            ; set index to pointer high byte
0029F9  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string pointer high byte
0029FD  1  B5 AE C9 00  
002A01  1  D0 04 A2 00  
002A0F  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
002A11  1  90 2B                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002A13  1  D0 1B                BNE     LAB_17E6        ; branch if >
002A15  1               ; else was equal so compare low bytes
002A15  1  88                   DEY                     ; decrement index
002A16  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get pointer low byte
002A1A  1  B5 AE C9 00  
002A1E  1  D0 04 A2 00  
002A2C  1  C5 81                CMP     <Sstorl         ; compare bottom of string space low byte
002A2E  1  90 0E                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002A30  1               
002A30  1               ; pointer was >= to bottom of string space pointer
002A30  1               LAB_17E6:
002A30  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002A32  1  C4 7C                CPY     <Svarh          ; compare start of vars high byte
002A34  1  90 08                BCC     LAB_17F4        ; branch if less (descriptor is on stack)
002A36  1               
002A36  1  D0 0D                BNE     LAB_17FB        ; branch if greater (descriptor is not on stack)
002A38  1               
002A38  1               ; else high bytes were equal so ..
002A38  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002A3A  1  C5 7B                CMP     <Svarl          ; compare start of vars low byte
002A3C  1  B0 07                BCS     LAB_17FB        ; branch if >= (descriptor is not on stack)
002A3E  1               
002A3E  1               LAB_17F4:
002A3E  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002A40  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002A42  1  4C 6F 2A             JMP     LAB_1811        ; clean stack, copy descriptor to variable and return
002A45  1               
002A45  1               ; make space and copy string
002A45  1               LAB_17FB:
002A45  1               
002A45  1  A0 00                LDY     #$00            ; index to length
002A47  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string length
002A4B  1  B5 AE C9 00  
002A4F  1  D0 04 A2 00  
002A5D  1  20 81 35             JSR     LAB_209C        ; copy string
002A60  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
002A62  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
002A64  1  85 B8                STA     <ssptr_l        ; save descriptor pointer low byte
002A66  1  84 B9                STY     <ssptr_h        ; save descriptor pointer high byte
002A68  1  20 DF 37             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
002A6B  1  A9 AC                LDA     #<FAC1_e        ; set descriptor pointer low byte
002A6D  1  A0 00                LDY     #>FAC1_e        ; get descriptor pointer high byte
002A6F  1               
002A6F  1               ; clean stack and assign value to string variable
002A6F  1               LAB_1811:
002A6F  1  85 9E                STA     <des_2l         ; save descriptor_2 pointer low byte
002A71  1  84 9F                STY     <des_2h         ; save descriptor_2 pointer high byte
002A73  1  20 E1 38             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
002A76  1  A0 00                LDY     #$00            ; index to length
002A78  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string length
002A7C  1  B5 9E C9 00  
002A80  1  D0 04 A2 00  
002A8E  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002A92  1  01 B5 97 C9  
002A96  1  00 D0 04 A2  
002AA4  1  C8                   INY                     ; index to string pointer low byte
002AA5  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer low byte
002AA9  1  B5 9E C9 00  
002AAD  1  D0 04 A2 00  
002ABB  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002ABF  1  01 B5 97 C9  
002AC3  1  00 D0 04 A2  
002AD1  1  C8                   INY                     ; index to string pointer high byte
002AD2  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer high byte
002AD6  1  B5 9E C9 00  
002ADA  1  D0 04 A2 00  
002AE8  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002AEC  1  01 B5 97 C9  
002AF0  1  00 D0 04 A2  
002AFE  1  60                   RTS
002AFF  1               
002AFF  1               ; perform GET
002AFF  1               
002AFF  1               LAB_GET:
002AFF  1  20 5A 31             JSR     LAB_GVAR        ; get var address
002B02  1  85 97                STA     <Lvarpl         ; save var address low byte
002B04  1  84 98                STY     <Lvarph         ; save var address high byte
002B06  1  20 F8 47             JSR     INGET           ; get input byte
002B09  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002B0B  1  30 07                BMI     LAB_GETS        ; go get string character
002B0D  1               
002B0D  1               ; was numeric get
002B0D  1  A8                   TAY                     ; copy character to Y
002B0E  1  20 25 34             JSR     LAB_1FD0        ; convert Y to byte in FAC1
002B11  1  4C 4D 40             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002B14  1               
002B14  1               LAB_GETS:
002B14  1  48                   PHA                     ; save character
002B15  1  A9 01                LDA     #$01            ; string is single byte
002B17  1  B0 01                BCS     LAB_IsByte      ; branch if byte received
002B19  1               
002B19  1  68                   PLA                     ; string is null
002B1A  1               LAB_IsByte:
002B1A  1  20 89 35             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
002B1D  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
002B1D  1  F0 19                BEQ     LAB_NoSt        ; skip store if null string
002B1F  1               
002B1F  1  68                   PLA                     ; get character back
002B20  1  A0 00                LDY     #$00            ; clear index
002B22  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
002B26  1  01 B5 AD C9  
002B2A  1  00 D0 04 A2  
002B38  1               LAB_NoSt:
002B38  1  20 EC 35             JSR     LAB_RTST        ; check for space on descriptor stack then put address
002B3B  1               ; and length on descriptor stack and update stack pointers
002B3B  1               
002B3B  1  4C F7 29             JMP     LAB_17D5        ; do string LET and return
002B3E  1               
002B3E  1               ; perform PRINT
002B3E  1               
002B3E  1               LAB_1829:
002B3E  1  20 E3 2B             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002B41  1               LAB_182C:
002B41  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002B45  1               
002B45  1               ; PRINT
002B45  1               
002B45  1               LAB_PRINT:
002B45  1  F0 51                BEQ     LAB_CRLF        ; if nothing following just print CR/LF
002B47  1               
002B47  1               LAB_1831:
002B47  1  C9 C0                CMP     #TK_TAB         ; compare with TAB( token
002B49  1  F0 6C                BEQ     LAB_18A2        ; go do TAB/SPC
002B4B  1               
002B4B  1  C9 C4                CMP     #TK_SPC         ; compare with SPC( token
002B4D  1  F0 68                BEQ     LAB_18A2        ; go do TAB/SPC
002B4F  1               
002B4F  1  C9 2C                CMP     #','            ; compare with ","
002B51  1  F0 4E                BEQ     LAB_188B        ; go do move to next TAB mark
002B53  1               
002B53  1  C9 3B                CMP     #$3B            ; compare with ";"
002B55  1  F0 7F                BEQ     LAB_18BD        ; if ";" continue with PRINT processing
002B57  1               
002B57  1  20 5D 2E             JSR     LAB_EVEX        ; evaluate expression
002B5A  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002B5C  1  30 E0                BMI     LAB_1829        ; branch if string
002B5E  1               
002B5E  1  20 11 43             JSR     LAB_296E        ; convert FAC1 to string
002B61  1  20 93 35             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002B64  1  A0 00                LDY     #$00            ; clear index
002B66  1               
002B66  1               ; don't check fit if terminal width byte is zero
002B66  1               
002B66  1  A5 0F                LDA     <TWidth         ; get terminal width byte
002B68  1  F0 20                BEQ     LAB_185E        ; skip check if zero
002B6A  1               
002B6A  1  8B 48 DA A2          FETCHINDIRECTY des_pl
002B6E  1  01 B5 AE C9  
002B72  1  00 D0 04 A2  
002B80  1  38                   SEC                     ; set carry for subtract
002B81  1  E5 0E                SBC     <TPos           ; subtract terminal position
002B83  1  E5 04                SBC     <TMPFLG         ; subtract string length
002B85  1  B0 03                BCS     LAB_185E        ; branch if less than terminal width
002B87  1               
002B87  1  20 98 2B             JSR     LAB_CRLF        ; else print CR/LF
002B8A  1               LAB_185E:
002B8A  1  20 E3 2B             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002B8D  1  F0 B2                BEQ     LAB_182C        ; always go continue processing line
002B8F  1               
002B8F  1               ; CR/LF return to BASIC from BASIC input handler
002B8F  1               
002B8F  1               LAB_1866:
002B8F  1  A9 00                LDA     #$00            ; clear byte
002B91  1  9D 81 21             STA     Ibuffs,X        ; null terminate input
002B94  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
002B96  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
002B98  1               ; print CR/LF
002B98  1               
002B98  1               LAB_CRLF:
002B98  1  A9 0D                LDA     #$0D            ; load [CR]
002B9A  1  20 0E 2C             JSR     LAB_PRNA        ; go print the character
002B9D  1  A9 0A                LDA     #$0A            ; load [LF]
002B9F  1  D0 6D                BNE     LAB_PRNA        ; go print the character and return, branch always
002BA1  1               LAB_188B:
002BA1  1  A5 0E                LDA     <TPos           ; get terminal position
002BA3  1  C5 10                CMP     <Iclim          ; compare with input column limit
002BA5  1  90 05                BCC     LAB_1897        ; branch if less
002BA7  1               
002BA7  1  20 98 2B             JSR     LAB_CRLF        ; else print CR/LF (next line)
002BAA  1  D0 2A                BNE     LAB_18BD        ; continue with PRINT processing (branch always)
002BAC  1               
002BAC  1               LAB_1897:
002BAC  1  38                   SEC                     ; set carry for subtract
002BAD  1               LAB_1898:
002BAD  1  E5 64                SBC     <TabSiz         ; subtract TAB size
002BAF  1  B0 FC                BCS     LAB_1898        ; loop if result was +ve
002BB1  1               
002BB1  1  49 FF                EOR     #$FF            ; complement it
002BB3  1  69 01                ADC     #$01            ; +1 (twos complement)
002BB5  1  D0 15                BNE     LAB_18B6        ; always print A spaces (result is never $00)
002BB7  1               
002BB7  1               ; do TAB/SPC
002BB7  1               LAB_18A2:
002BB7  1  48                   PHA                     ; save token
002BB8  1  20 F5 3A             JSR     LAB_SGBY        ; scan and get byte parameter
002BBB  1  C9 29                CMP     #$29            ; is next character )
002BBD  1  F0 03                BEQ     LAB_18A2aa
002BBF  1               ;BNE	LAB_1910		; if not do syntax error then warm start
002BBF  1  4C 55 2C             JMP     LAB_1910        ; if not do syntax error then warm start
002BC2  1               LAB_18A2aa:
002BC2  1  68                   PLA                     ; get token back
002BC3  1  C9 C0                CMP     #TK_TAB         ; was it TAB ?
002BC5  1  D0 06                BNE     LAB_18B7        ; if not go do SPC
002BC7  1               
002BC7  1               ; calculate TAB offset
002BC7  1  8A                   TXA                     ; copy integer value to A
002BC8  1  E5 0E                SBC     <TPos           ; subtract terminal position
002BCA  1  90 0A                BCC     LAB_18BD        ; branch if result was < 0 (can't TAB backwards)
002BCC  1               
002BCC  1               ; print A spaces
002BCC  1               LAB_18B6:
002BCC  1  AA                   TAX                     ; copy result to X
002BCD  1               LAB_18B7:
002BCD  1  8A                   TXA                     ; set flags on size for SPC
002BCE  1  F0 06                BEQ     LAB_18BD        ; branch if result was = $0, already here
002BD0  1               
002BD0  1               ; print X spaces
002BD0  1               LAB_18BA:
002BD0  1  20 09 2C             JSR     LAB_18E0        ; print " "
002BD3  1  CA                   DEX                     ; decrement count
002BD4  1  D0 FA                BNE     LAB_18BA        ; loop if not all done
002BD6  1               
002BD6  1               ; continue with PRINT processing
002BD6  1               LAB_18BD:
002BD6  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002BDA  1  F0 03                BEQ     LAB_18BDA
002BDC  1  4C 47 2B             JMP     LAB_1831        ; if more to print go do it
002BDF  1               LAB_18BDA:
002BDF  1  60                   RTS
002BE0  1               
002BE0  1               ; print null terminated string from memory
002BE0  1               
002BE0  1               LAB_18C3:
002BE0  1  20 93 35             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002BE3  1               
002BE3  1               ; print string from <Sutill/<Sutilh
002BE3  1               
002BE3  1               LAB_18C6:
002BE3  1  20 70 38             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
002BE6  1               ; space returns with A = length, X=$71=pointer low byte,
002BE6  1               ; Y=$72=pointer high byte
002BE6  1  A0 00                LDY     #$00            ; reset index
002BE8  1  AA                   TAX                     ; copy length to X
002BE9  1  F0 5D                BEQ     LAB_188C        ; exit (RTS) if null string
002BEB  1               LAB_18CD:
002BEB  1               
002BEB  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get next byte
002BEF  1  B5 71 C9 00  
002BF3  1  D0 04 A2 00  
002C01  1  20 0E 2C             JSR     LAB_PRNA        ; go print the character
002C04  1  C8                   INY                     ; increment index
002C05  1  CA                   DEX                     ; decrement count
002C06  1  D0 E3                BNE     LAB_18CD        ; loop if not done yet
002C08  1  60                   RTS
002C09  1               
002C09  1               ; Print single format character
002C09  1               ; print " "
002C09  1               
002C09  1               LAB_18E0:
002C09  1  A9 20                LDA     #$20            ; load " "
002C0B  1  2C                   .BYTE   $2C             ; change next line to BIT LAB_3FA9
002C0C  1               
002C0C  1               ; print "?" character
002C0C  1               
002C0C  1               LAB_18E3:
002C0C  1  A9 3F                LDA     #$3F            ; load "?" character
002C0E  1               
002C0E  1               ; print character in A
002C0E  1               ; now .includes the null handler
002C0E  1               ; also .includes infinite line length code
002C0E  1               ; note! some routines expect this one to exit with Zb=0
002C0E  1               
002C0E  1               LAB_PRNA:
002C0E  1  C9 20                CMP     #' '            ; compare with " "
002C10  1  90 19                BCC     LAB_18F9        ; branch if less (non printing)
002C12  1               
002C12  1               ; else printable character
002C12  1  48                   PHA                     ; save the character
002C13  1               
002C13  1               ; don't check fit if terminal width byte is zero
002C13  1               
002C13  1  A5 0F                LDA     <TWidth         ; get terminal width
002C15  1  D0 0A                BNE     LAB_18F0        ; branch if not zero (not infinite length)
002C17  1               
002C17  1               ; is "infinite line" so check TAB position
002C17  1               
002C17  1  A5 0E                LDA     <TPos           ; get position
002C19  1  E5 64                SBC     <TabSiz         ; subtract TAB size, carry set by CMP #$20 above
002C1B  1  D0 0B                BNE     LAB_18F7        ; skip reset if different
002C1D  1               
002C1D  1  85 0E                STA     <TPos           ; else reset position
002C1F  1  F0 07                BEQ     LAB_18F7        ; go print character
002C21  1               
002C21  1               LAB_18F0:
002C21  1  C5 0E                CMP     <TPos           ; compare with terminal character position
002C23  1  D0 03                BNE     LAB_18F7        ; branch if not at end of line
002C25  1               
002C25  1  20 98 2B             JSR     LAB_CRLF        ; else print CR/LF
002C28  1               LAB_18F7:
002C28  1  E6 0E                INC     <TPos           ; increment terminal position
002C2A  1  68                   PLA                     ; get character back
002C2B  1               LAB_18F9:
002C2B  1  20 D0 18             JSR     V_OUTP          ; output byte via output vector
002C2E  1  C9 0D                CMP     #$0D            ; compare with [CR]
002C30  1  D0 14                BNE     LAB_188A        ; branch if not [CR]
002C32  1               
002C32  1               ; else print nullct nulls after the [CR]
002C32  1  86 78                STX     <TempB          ; save buffer index
002C34  1  A6 0D                LDX     <Nullct         ; get null count
002C36  1  F0 0A                BEQ     LAB_1886        ; branch if no nulls
002C38  1               
002C38  1  A9 00                LDA     #$00            ; load [NULL]
002C3A  1               LAB_1880:
002C3A  1  20 0E 2C             JSR     LAB_PRNA        ; go print the character
002C3D  1  CA                   DEX                     ; decrement count
002C3E  1  D0 FA                BNE     LAB_1880        ; loop if not all done
002C40  1               
002C40  1  A9 0D                LDA     #$0D            ; restore the character (and set the flags)
002C42  1               LAB_1886:
002C42  1  86 0E                STX     <TPos           ; clear terminal position (X always = zero when we get here)
002C44  1  A6 78                LDX     <TempB          ; restore buffer index
002C46  1               LAB_188A:
002C46  1  29 FF                AND     #$FF            ; set the flags
002C48  1               LAB_188C:
002C48  1  60                   RTS
002C49  1               
002C49  1               ; handle bad input data
002C49  1               
002C49  1               LAB_1904:
002C49  1  A5 62                LDA     <Imode          ; get input mode flag, $00=INPUT, $00=READ
002C4B  1  10 0B                BPL     LAB_1913        ; branch if INPUT (go do redo)
002C4D  1               
002C4D  1  A5 8D                LDA     <Dlinel         ; get current DATA line low byte
002C4F  1  A4 8E                LDY     <Dlineh         ; get current DATA line high byte
002C51  1  85 87                STA     <Clinel         ; save current line low byte
002C53  1  84 88                STY     <Clineh         ; save current line high byte
002C55  1               LAB_1910:
002C55  1  4C 83 2F             JMP     LAB_SNER        ; do syntax error then warm start
002C58  1               
002C58  1               ; mode was INPUT
002C58  1               LAB_1913:
002C58  1  A9 F6                LDA     #<LAB_REDO      ; point to redo message (low addr)
002C5A  1  A0 17                LDY     #>LAB_REDO      ; point to redo message (high addr)
002C5C  1  20 E0 2B             JSR     LAB_18C3        ; print null terminated string from memory
002C5F  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002C61  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002C63  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002C65  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002C67  1  60                   RTS
002C68  1               
002C68  1               ; perform INPUT
002C68  1               
002C68  1               LAB_INPUT:
002C68  1  C9 22                CMP     #$22            ; compare next byte with open quote
002C6A  1  D0 0B                BNE     LAB_1934        ; branch if no prompt string
002C6C  1               
002C6C  1  20 3C 2F             JSR     LAB_1BC1        ; print "..." string
002C6F  1  A9 3B                LDA     #$3B            ; load A with ";"
002C71  1  20 70 2F             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002C74  1  20 E3 2B             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002C77  1               
002C77  1               ; done with prompt, now get data
002C77  1               LAB_1934:
002C77  1  20 29 34             JSR     LAB_CKRN        ; check not Direct, back here if ok
002C7A  1  20 39 24             JSR     LAB_INLN        ; print "? " and get BASIC input
002C7D  1  A9 00                LDA     #$00            ; set mode = INPUT
002C7F  1               ;CMP	Ibuffs			; test first byte in buffer
002C7F  1  80 06                BRA     LAB_1953        ; branch if not null input
002C81  1               
002C81  1               ;CLC				; was null input so clear carry to exit program
002C81  1               ;JMP	LAB_1647		; go do BREAK exit
002C81  1               
002C81  1               ; perform READ
002C81  1               
002C81  1               LAB_READ:
002C81  1  A6 8F                LDX     <Dptrl          ; get DATA pointer low byte
002C83  1  A4 90                LDY     <Dptrh          ; get DATA pointer high byte
002C85  1  A9 80                LDA     #$80            ; set mode = READ
002C87  1               
002C87  1               LAB_1953:
002C87  1  85 62                STA     <Imode          ; set input mode flag, $00=INPUT, $80=READ
002C89  1  86 91                STX     <Rdptrl         ; save READ pointer low byte
002C8B  1  84 92                STY     <Rdptrh         ; save READ pointer high byte
002C8D  1               
002C8D  1               ; READ or INPUT next variable from list
002C8D  1               LAB_195B:
002C8D  1  20 5A 31             JSR     LAB_GVAR        ; get (var) address
002C90  1  85 97                STA     <Lvarpl         ; save address low byte
002C92  1  84 98                STY     <Lvarph         ; save address high byte
002C94  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002C96  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002C98  1  85 11                STA     <Itempl         ; save as temporary integer low byte
002C9A  1  84 12                STY     <Itemph         ; save as temporary integer high byte
002C9C  1  A6 91                LDX     <Rdptrl         ; get READ pointer low byte
002C9E  1  A4 92                LDY     <Rdptrh         ; get READ pointer high byte
002CA0  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002CA2  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002CA4  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002CA8  1  D0 0C                BNE     LAB_1988        ; branch if not null
002CAA  1               
002CAA  1               ; pointer was to null entry
002CAA  1  24 62                BIT     <Imode          ; test input mode flag, $00=INPUT, $80=READ
002CAC  1  30 63                BMI     LAB_19DD        ; branch if READ
002CAE  1               
002CAE  1               ; mode was INPUT
002CAE  1               ;JSR	LAB_18E3		; print "?" character (double ? for extended input)
002CAE  1               ;JSR	LAB_INLN		; print "? " and get BASIC input
002CAE  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002CB0  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002CB2  1               LAB_1985:
002CB2  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002CB6  1               LAB_1988:
002CB6  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002CB8  1  10 24                BPL     LAB_19B0        ; branch if numeric
002CBA  1               
002CBA  1               ; else get string
002CBA  1  85 5B                STA     <Srchc          ; save search character
002CBC  1  C9 22                CMP     #$22            ; was it " ?
002CBE  1  F0 07                BEQ     LAB_1999        ; branch if so
002CC0  1               
002CC0  1  A9 3A                LDA     #':'            ; else search character is ":"
002CC2  1  85 5B                STA     <Srchc          ; set new search character
002CC4  1  A9 2C                LDA     #','            ; other search character is ","
002CC6  1  18                   CLC                     ; clear carry for add
002CC7  1               LAB_1999:
002CC7  1  85 5C                STA     <Asrch          ; set second search character
002CC9  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002CCB  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002CCD  1               
002CCD  1  69 00                ADC     #$00            ; c is =1 if we came via the BEQ LAB_1999, else =0
002CCF  1  90 01                BCC     LAB_19A4        ; branch if no execute pointer low byte rollover
002CD1  1               
002CD1  1  C8                   INY                     ; else increment high byte
002CD2  1               LAB_19A4:
002CD2  1  20 99 35             JSR     LAB_20B4        ; print <Srchc or <Asrch terminated string to <Sutill/<Sutilh
002CD5  1  20 7B 3B             JSR     LAB_23F3        ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
002CD8  1  20 F7 29             JSR     LAB_17D5        ; go do string LET
002CDB  1  4C E4 2C             JMP     LAB_19B6        ; go check string terminator
002CDE  1               
002CDE  1               ; get numeric INPUT
002CDE  1               LAB_19B0:
002CDE  1  20 04 42             JSR     LAB_2887        ; get FAC1 from string
002CE1  1  20 4D 40             JSR     LAB_PFAC        ; pack FAC1 into (<Lvarpl)
002CE4  1               LAB_19B6:
002CE4  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002CE8  1  F0 0B                BEQ     LAB_19C5        ; branch if null (last entry)
002CEA  1               
002CEA  1  C9 2C                CMP     #','            ; else compare with ","
002CEC  1  F0 03                BEQ     LAB_19C2        ; branch if ","
002CEE  1               
002CEE  1  4C 49 2C             JMP     LAB_1904        ; else go handle bad input data
002CF1  1               
002CF1  1               ; got good input data
002CF1  1               LAB_19C2:
002CF1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002CF5  1               LAB_19C5:
002CF5  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
002CF7  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
002CF9  1  85 91                STA     <Rdptrl         ; save for now
002CFB  1  84 92                STY     <Rdptrh         ; save for now
002CFD  1  A5 11                LDA     <Itempl         ; get temporary integer low byte (temp BASIC execute ptr)
002CFF  1  A4 12                LDY     <Itemph         ; get temporary integer high byte (temp BASIC execute ptr)
002D01  1  85 C3                STA     <Bpntrl         ; set BASIC execute pointer low byte
002D03  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002D05  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002D09  1  F0 30                BEQ     LAB_1A03        ; if null go do extra ignored message
002D0B  1               
002D0B  1  20 7F 2F             JSR     LAB_1C01        ; else scan for "," , else do syntax error then warm start
002D0E  1  4C 8D 2C             JMP     LAB_195B        ; go INPUT next variable from list
002D11  1               
002D11  1               ; find next DATA statement or do "Out of DATA" error
002D11  1               LAB_19DD:
002D11  1  20 C7 28             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002D14  1  C8                   INY                     ; increment index
002D15  1  AA                   TAX                     ; copy character ([:] or [EOL])
002D16  1  D0 15                BNE     LAB_19F6        ; branch if [:]
002D18  1               
002D18  1  A2 06                LDX     #$06            ; set for "Out of DATA" error
002D1A  1  C8                   INY                     ; increment index, now points to next line pointer high byte
002D1B  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
002D1D  1  D0 03                BNE     LAB_19DE        ; branch if NOT end (eventually does error X)
002D1F  1  4C DC 2D             JMP     LAB_1A54
002D22  1               LAB_19DE:
002D22  1  C8                   INY                     ; increment index
002D23  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # low byte
002D25  1  85 8D                STA     <Dlinel         ; save current DATA line low byte
002D27  1  C8                   INY                     ; increment index
002D28  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # high byte
002D2A  1  C8                   INY                     ; increment index
002D2B  1  85 8E                STA     <Dlineh         ; save current DATA line high byte
002D2D  1               LAB_19F6:
002D2D  1  B1 C3                LDA     (<Bpntrl),Y     ; get byte
002D2F  1  C8                   INY                     ; increment index
002D30  1  AA                   TAX                     ; copy to X
002D31  1  20 B9 28             JSR     LAB_170F        ; set BASIC execute pointer
002D34  1  E0 83                CPX     #TK_DATA        ; compare with "DATA" token
002D36  1  D0 D9                BNE     LAB_19DD        ; go find next statement if not "DATA"
002D38  1  4C B2 2C             JMP     LAB_1985        ; was "DATA" so go do next READ
002D3B  1               
002D3B  1               ; end of INPUT/READ routine
002D3B  1               
002D3B  1               LAB_1A03:
002D3B  1  A5 91                LDA     <Rdptrl         ; get temp READ pointer low byte
002D3D  1  A4 92                LDY     <Rdptrh         ; get temp READ pointer high byte
002D3F  1  A6 62                LDX     <Imode          ; get input mode flag, $00=INPUT, $80=READ
002D41  1  10 03                BPL     LAB_1A0E        ; branch if INPUT
002D43  1               
002D43  1  4C 71 27             JMP     LAB_1624        ; save AY as DATA pointer and return
002D46  1               
002D46  1               ; we were getting INPUT
002D46  1               LAB_1A0E:
002D46  1  A0 00                LDY     #$00            ; clear index
002D48  1  8B DA A2 01          LDAINDIRECTY Rdptrl     ; get next byte
002D4C  1  B5 91 C9 00  
002D50  1  D0 04 A2 00  
002D5E  1  D0 01                BNE     LAB_1A1B        ; error if not end of INPUT
002D60  1               
002D60  1  60                   RTS
002D61  1               
002D61  1               ; user typed too much
002D61  1               LAB_1A1B:
002D61  1  A9 E5                LDA     #<LAB_IMSG      ; point to extra ignored message (low addr)
002D63  1  A0 17                LDY     #>LAB_IMSG      ; point to extra ignored message (high addr)
002D65  1  4C E0 2B             JMP     LAB_18C3        ; print null terminated string from memory and return
002D68  1               
002D68  1               ; search the stack for FOR activity
002D68  1               ; exit with z=1 if FOR else exit with z=0
002D68  1               
002D68  1               LAB_11A1:
002D68  1  C2 10                INDEX16
002D6A  1  BA                   TSX                     ; copy stack pointer
002D6B  1  E8                   INX                     ; +1 pass return address
002D6C  1  E8                   INX                     ; +2 pass return address
002D6D  1  E8                   INX                     ; +3 pass calling routine return address
002D6E  1  E8                   INX                     ; +4 pass calling routine return address
002D6F  1               LAB_11A6:
002D6F  1  8B                   PHB
002D70  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
002D72  1  48                   PHA
002D73  1  AB                   PLB
002D74  1  BD 01 00             LDA     a:1,X           ; get token byte from stack
002D77  1  AB                   PLB
002D78  1  C9 81                CMP     #TK_FOR         ; is it FOR token
002D7A  1  D0 47                BNE     LAB_11CE        ; exit if not FOR token
002D7C  1               
002D7C  1               ; was FOR token
002D7C  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
002D7E  1  D0 10                BNE     LAB_11BB        ; branch if not null
002D80  1               
002D80  1  8B                   PHB
002D81  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
002D83  1  48                   PHA
002D84  1  AB                   PLB
002D85  1  BD 02 00             LDA     a:2,X           ; get FOR variable pointer low byte
002D88  1  85 97                STA     <Frnxtl         ; save var pointer for FOR/NEXT low byte
002D8A  1  BD 03 00             LDA     a:3,X           ; get FOR variable pointer high byte
002D8D  1  85 98                STA     <Frnxth         ; save var pointer for FOR/NEXT high byte
002D8F  1  AB                   PLB
002D90  1               LAB_11BB:
002D90  1  8B                   PHB
002D91  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
002D93  1  48                   PHA
002D94  1  AB                   PLB
002D95  1  BD 03 00             LDA     a:3,X
002D98  1  85 04                STA     <TMPFLG
002D9A  1  AB                   PLB
002D9B  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
002D9D  1  D0 11                BNE     LAB_11C7        ; branch if no match
002D9F  1               
002D9F  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
002DA1  1  8B                   PHB
002DA2  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
002DA4  1  48                   PHA
002DA5  1  AB                   PLB
002DA6  1  BD 02 00             LDA     a:2,X
002DA9  1  85 04                STA     <TMPFLG
002DAB  1  AB                   PLB
002DAC  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
002DAE  1  F0 13                BEQ     LAB_11CE        ; exit if match found
002DB0  1               
002DB0  1               LAB_11C7:
002DB0  1  E8                   INX
002DB1  1  E8                   INX
002DB2  1  E8                   INX
002DB3  1  E8                   INX
002DB4  1  E8                   INX
002DB5  1  E8                   INX
002DB6  1  E8                   INX
002DB7  1  E8                   INX
002DB8  1  E8                   INX
002DB9  1  E8                   INX
002DBA  1  E8                   INX
002DBB  1  E8                   INX
002DBC  1  E8                   INX
002DBD  1  E8                   INX
002DBE  1  E8                   INX
002DBF  1  E8                   INX
002DC0  1  9A                   TXS                     ; copy back to index
002DC1  1  D0 AC                BNE     LAB_11A6        ; loop if not at start of stack
002DC3  1               LAB_11CE:
002DC3  1  86 FD                STX     <TEMPW
002DC5  1  E2 10                INDEX8
002DC7  1  60                   RTS
002DC8  1               
002DC8  1               ; perform NEXT
002DC8  1               
002DC8  1               LAB_NEXT:
002DC8  1  D0 04                BNE     LAB_1A46        ; branch if NEXT var
002DCA  1               
002DCA  1  A0 00                LDY     #$00            ; else clear Y
002DCC  1  F0 03                BEQ     LAB_1A49        ; branch always (no variable to search for)
002DCE  1               
002DCE  1               ; NEXT var
002DCE  1               
002DCE  1               LAB_1A46:
002DCE  1  20 5A 31             JSR     LAB_GVAR        ; get variable address
002DD1  1               LAB_1A49:
002DD1  1  85 97                STA     <Frnxtl         ; store variable pointer low byte
002DD3  1  84 98                STY     <Frnxth         ; store variable pointer high byte
002DD5  1               ; (both cleared if no variable defined)
002DD5  1  20 68 2D             JSR     LAB_11A1        ; search the stack for FOR activity
002DD8  1  F0 04                BEQ     LAB_1A56        ; branch if found
002DDA  1               
002DDA  1  A2 00                LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
002DDC  1               LAB_1A54:
002DDC  1  F0 7C                BEQ     LAB_1ABE        ; do error #X, then warm start
002DDE  1               
002DDE  1               
002DDE  1               LAB_1A56:
002DDE  1  C2 30                ACCUMULATORINDEX16
002DE0  1  A6 FD                LDX     <TEMPW
002DE2  1  9A                   TXS                     ; set stack pointer, X set by search, dumps return addresses
002DE3  1  8A                   TXA                     ; copy stack pointer
002DE4  1  18                   CLC                     ; CLEAR carry
002DE5  1               
002DE5  1  69 09 00             ADC     #$0009          ; point to TO var
002DE8  1  85 73                STA     <ut2_pl         ; save pointer to TO var for compare
002DEA  1  38                   SEC
002DEB  1  E9 05 00             SBC     #$0005          ; point to STEP var
002DEE  1  85 FD                STA     <TEMPW
002DF0  1               
002DF0  1  E2 30                ACCUMULATORINDEX8
002DF2  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
002DF4  1               
002DF4  1  8B                   PHB                     ; ensure UNPACK works in stack bank not data bank
002DF5  1  DA                   PHX
002DF6  1  A2 00                LDX     #$00
002DF8  1  DA                   PHX
002DF9  1  AB                   PLB
002DFA  1  FA                   PLX
002DFB  1  20 D7 3F             JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
002DFE  1  AB                   PLB
002DFF  1               
002DFF  1  A3 08                LDA     8,S             ; get step sign
002E01  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
002E03  1  A5 97                LDA     <Frnxtl         ; get FOR variable pointer low byte
002E05  1  A4 98                LDY     <Frnxth         ; get FOR variable pointer high byte
002E07  1  20 C2 3C             JSR     LAB_246C        ; add (FOR variable) to FAC1
002E0A  1  20 4D 40             JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
002E0D  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
002E0F  1               
002E0F  1  8B                   PHB                     ; ensure compare works in stack bank not data bank
002E10  1  DA                   PHX
002E11  1  A2 00                LDX     #$00
002E13  1  DA                   PHX
002E14  1  AB                   PLB
002E15  1  FA                   PLX
002E16  1               
002E16  1  20 13 41             JSR     LAB_27FA        ; compare FAC1 with (Y,<ut2_pl) (TO value)
002E19  1  AB                   PLB
002E1A  1               
002E1A  1               
002E1A  1  C3 08                CMP     8,S             ; compare step sign
002E1C  1  F0 13                BEQ     LAB_1A9B        ; branch if = (loop complete)
002E1E  1               ;
002E1E  1               ;					; loop back and do it all again
002E1E  1  A3 0D                LDA     $0D,S           ; get FOR line low byte
002E20  1  85 87                STA     <Clinel         ; save current line low byte
002E22  1  A3 0E                LDA     $0E,S           ; get FOR line high byte
002E24  1  85 88                STA     <Clineh         ; save current line high byte
002E26  1  A3 10                LDA     $10,S           ; get BASIC execute pointer low byte
002E28  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002E2A  1  A3 0F                LDA     $0F,S           ; get BASIC execute pointer high byte
002E2C  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002E2E  1               LAB_1A98:
002E2E  1  4C D1 26             JMP     LAB_15C2        ; go do interpreter inner loop
002E31  1               ;
002E31  1               ;					; loop complete so carry on
002E31  1               LAB_1A9B:
002E31  1               
002E31  1               
002E31  1  C2 30                ACCUMULATORINDEX16
002E33  1  3B                   TSC                     ; stack copy to A
002E34  1               ;;;;;;;;;;;;;;;;;;; THIS MAY NOT BE RIGHT !@#$%^&* TAG
002E34  1  69 0F 00             ADC     #$000F          ; add $10 ($0F+carry) to dump FOR structure
002E37  1  1B                   TCS                     ; copy back to index
002E38  1  E2 30                ACCUMULATORINDEX8
002E3A  1               
002E3A  1               
002E3A  1               
002E3A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002E3E  1  C9 2C                CMP     #','            ; compare with ","
002E40  1  D0 EC                BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
002E42  1               
002E42  1               ; was "," so another NEXT variable to do
002E42  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
002E46  1  20 CE 2D             JSR     LAB_1A46        ; do NEXT (var)
002E49  1               
002E49  1               ; evaluate expression and check is numeric, else do type mismatch
002E49  1               
002E49  1               LAB_EVNM:
002E49  1  20 5D 2E             JSR     LAB_EVEX        ; evaluate expression
002E4C  1               
002E4C  1               ; check if source is numeric, else do type mismatch
002E4C  1               
002E4C  1               LAB_CTNM:
002E4C  1  18                   CLC                     ; destination is numeric
002E4D  1  24                   .BYTE   $24             ; makes next line BIT $38
002E4E  1               
002E4E  1               ; check if source is string, else do type mismatch
002E4E  1               
002E4E  1               LAB_CTST:
002E4E  1  38                   SEC                     ; required type is string
002E4F  1               
002E4F  1               ; type match check, set C for string, clear C for numeric
002E4F  1               
002E4F  1               LAB_CKTM:
002E4F  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002E51  1  30 03                BMI     LAB_1ABA        ; branch if data type is string
002E53  1               
002E53  1               ; else data type was numeric
002E53  1  B0 03                BCS     LAB_1ABC        ; if required type is string do type mismatch error
002E55  1               LAB_1AB9:
002E55  1  60                   RTS
002E56  1               
002E56  1               ; data type was string, now check required type
002E56  1               LAB_1ABA:
002E56  1  B0 FD                BCS     LAB_1AB9        ; exit if required type is string
002E58  1               
002E58  1               ; else do type mismatch error
002E58  1               LAB_1ABC:
002E58  1  A2 18                LDX     #$18            ; error code $18 ("Type mismatch" error)
002E5A  1               LAB_1ABE:
002E5A  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
002E5D  1               
002E5D  1               ; evaluate expression
002E5D  1               
002E5D  1               LAB_EVEX:
002E5D  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
002E5F  1  D0 02                BNE     LAB_1AC7        ; skip next if not zero
002E61  1               
002E61  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
002E63  1               LAB_1AC7:
002E63  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
002E65  1               
002E65  1               LAB_EVEZ:
002E65  1  A9 00                LDA     #$00            ; set null precedence (flag done)
002E67  1               LAB_1ACC:
002E67  1  48                   PHA                     ; push precedence byte
002E68  1  A9 02                LDA     #$02            ; 2 bytes
002E6A  1  20 D3 22             JSR     LAB_1212        ; check room on stack for A bytes
002E6D  1  20 4B 2F             JSR     LAB_GVAL        ; get value from line
002E70  1  A9 00                LDA     #$00            ; clear A
002E72  1  85 9B                STA     <comp_f         ; clear compare function flag
002E74  1               LAB_1ADB:
002E74  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002E78  1               LAB_1ADE:
002E78  1  38                   SEC                     ; set carry for subtract
002E79  1  E9 D5                SBC     #TK_GT          ; subtract token for > (lowest comparison function)
002E7B  1  90 18                BCC     LAB_1AFA        ; branch if < TK_GT
002E7D  1               
002E7D  1  C9 03                CMP     #$03            ; compare with ">" to "<" tokens
002E7F  1  B0 14                BCS     LAB_1AFA        ; branch if >= TK_SGN (highest evaluation function +1)
002E81  1               
002E81  1               ; was token for > = or < (A = 0, 1 or 2)
002E81  1  C9 01                CMP     #$01            ; compare with token for =
002E83  1  2A                   ROL     A               ; *2, b0 = carry (=1 if token was = or <)
002E84  1               ; (A = 0, 3 or 5)
002E84  1  49 01                EOR     #$01            ; toggle b0
002E86  1               ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
002E86  1  45 9B                EOR     <comp_f         ; EOR with compare function flag bits
002E88  1  C5 9B                CMP     <comp_f         ; compare with compare function flag
002E8A  1  90 68                BCC     LAB_1B53        ; if <(<comp_f) do syntax error then warm start
002E8C  1               ; was more than one <, = or >)
002E8C  1               
002E8C  1  85 9B                STA     <comp_f         ; save new compare function flag
002E8E  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002E92  1  4C 78 2E             JMP     LAB_1ADE        ; go do next character
002E95  1               
002E95  1               ; token is < ">" or > "<" tokens
002E95  1               LAB_1AFA:
002E95  1  A6 9B                LDX     <comp_f         ; get compare function flag
002E97  1  D0 2C                BNE     LAB_1B2A        ; branch if compare function
002E99  1               
002E99  1  B0 79                BCS     LAB_1B78        ; go do functions
002E9B  1               
002E9B  1               ; else was <  TK_GT so is operator or lower
002E9B  1  69 0A                ADC     #TK_GT-TK_PLUS  ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
002E9D  1  90 75                BCC     LAB_1B78        ; branch if < + operator
002E9F  1               
002E9F  1               ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
002E9F  1  D0 07                BNE     LAB_1B0B        ; branch if not + token
002EA1  1               
002EA1  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002EA3  1  10 03                BPL     LAB_1B0B        ; branch if not string
002EA5  1               
002EA5  1               ; will only be $00 if type is string and token was +
002EA5  1  4C 77 37             JMP     LAB_224D        ; add strings, string 1 is in descriptor <des_pl, string 2
002EA8  1               ; is in line, and return
002EA8  1               
002EA8  1               LAB_1B0B:
002EA8  1  85 71                STA     <ut1_pl         ; save it
002EAA  1  0A                   ASL     A               ; *2
002EAB  1  65 71                ADC     <ut1_pl         ; *3
002EAD  1  A8                   TAY                     ; copy to index
002EAE  1               LAB_1B13:
002EAE  1  68                   PLA                     ; pull previous precedence
002EAF  1  D9 4C 11             CMP     LAB_OPPT,Y      ; compare with precedence byte
002EB2  1  B0 65                BCS     LAB_1B7D        ; branch if A >=
002EB4  1               
002EB4  1  20 4C 2E             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
002EB7  1               LAB_1B1C:
002EB7  1  48                   PHA                     ; save precedence
002EB8  1               LAB_1B1D:
002EB8  1  20 E0 2E             JSR     LAB_1B43        ; get vector, execute function then continue evaluation
002EBB  1  68                   PLA                     ; restore precedence
002EBC  1  A4 99                LDY     <prstk          ; get precedence stacked flag
002EBE  1  10 19                BPL     LAB_1B3C        ; branch if stacked values
002EC0  1               
002EC0  1  AA                   TAX                     ; copy precedence (set flags)
002EC1  1  F0 76                BEQ     LAB_1B9D        ; exit if done
002EC3  1               
002EC3  1  D0 5D                BNE     LAB_1B86        ; else pop FAC2 and return, branch always
002EC5  1               
002EC5  1               LAB_1B2A:
002EC5  1  26 5F                ROL     <Dtypef         ; shift data type flag into Cb
002EC7  1  8A                   TXA                     ; copy compare function flag
002EC8  1  85 5F                STA     <Dtypef         ; clear data type flag, X is 0xxx xxxx
002ECA  1  2A                   ROL     A               ; shift data type into compare function byte b0
002ECB  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
002ECD  1  D0 02                BNE     LAB_1B34        ; branch if no underflow
002ECF  1               
002ECF  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
002ED1  1               LAB_1B34:
002ED1  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
002ED3  1               TK_LT_PLUS      = TK_LT-TK_PLUS
002ED3  1  A0 24                LDY     #TK_LT_PLUS*3   ; set offset to last operator entry
002ED5  1  85 9B                STA     <comp_f         ; save new compare function flag
002ED7  1  D0 D5                BNE     LAB_1B13        ; branch always
002ED9  1               
002ED9  1               LAB_1B3C:
002ED9  1  D9 4C 11             CMP     LAB_OPPT,Y      ;.compare with stacked function precedence
002EDC  1  B0 44                BCS     LAB_1B86        ; branch if A >=, pop FAC2 and return
002EDE  1               
002EDE  1  90 D7                BCC     LAB_1B1C        ; branch always
002EE0  1               
002EE0  1               ;.get vector, execute function then continue evaluation
002EE0  1               
002EE0  1               LAB_1B43:
002EE0  1  B9 4E 11             LDA     LAB_OPPT+2,Y    ; get function vector high byte
002EE3  1  48                   PHA                     ; onto stack
002EE4  1  B9 4D 11             LDA     LAB_OPPT+1,Y    ; get function vector low byte
002EE7  1  48                   PHA                     ; onto stack
002EE8  1               ; now push sign, round FAC1 and put on stack
002EE8  1  20 F7 2E             JSR     LAB_1B5B        ; function will return here, then the next RTS will call
002EEB  1               ; the function
002EEB  1  A5 9B                LDA     <comp_f         ; get compare function flag
002EED  1  48                   PHA                     ; push compare evaluation byte
002EEE  1  B9 4C 11             LDA     LAB_OPPT,Y      ; get precedence byte
002EF1  1  4C 67 2E             JMP     LAB_1ACC        ; continue evaluating expression
002EF4  1               
002EF4  1               LAB_1B53:
002EF4  1  4C 83 2F             JMP     LAB_SNER        ; do syntax error then warm start
002EF7  1               
002EF7  1               ; push sign, round FAC1 and put on stack
002EF7  1               
002EF7  1               LAB_1B5B:
002EF7  1  68                   PLA                     ; get return addr low byte
002EF8  1  85 71                STA     <ut1_pl         ; save it
002EFA  1  E6 71                INC     <ut1_pl         ; increment it (was ret-1 pushed? yes!)
002EFC  1               ; note! no check is made on the high byte! if the calling
002EFC  1               ; routine assembles to a page edge then this all goes
002EFC  1               ; horribly wrong !!!
002EFC  1  68                   PLA                     ; get return addr high byte
002EFD  1  85 72                STA     <ut1_ph         ; save it
002EFF  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
002F01  1  48                   PHA                     ; push sign
002F02  1               
002F02  1               ; round FAC1 and put on stack
002F02  1               
002F02  1               LAB_1B66:
002F02  1  20 D3 40             JSR     LAB_27BA        ; round FAC1
002F05  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
002F07  1  48                   PHA                     ; push on stack
002F08  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
002F0A  1  48                   PHA                     ; push on stack
002F0B  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
002F0D  1  48                   PHA                     ; push on stack
002F0E  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002F10  1  48                   PHA                     ; push on stack
002F11  1  6C 71 00             JMP     (ut1_pl)        ; return, sort of
002F14  1               
002F14  1               ; do functions
002F14  1               
002F14  1               LAB_1B78:
002F14  1  A0 FF                LDY     #$FF            ; flag function
002F16  1  68                   PLA                     ; pull precedence byte
002F17  1               LAB_1B7B:
002F17  1  F0 20                BEQ     LAB_1B9D        ; exit if done
002F19  1               
002F19  1               LAB_1B7D:
002F19  1  C9 64                CMP     #$64            ; compare previous precedence with $64
002F1B  1  F0 03                BEQ     LAB_1B84        ; branch if was $64 (< function)
002F1D  1               
002F1D  1  20 4C 2E             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
002F20  1               LAB_1B84:
002F20  1  84 99                STY     <prstk          ; save precedence stacked flag
002F22  1               
002F22  1               ; pop FAC2 and return
002F22  1               LAB_1B86:
002F22  1  68                   PLA                     ; pop byte
002F23  1  4A                   LSR     A               ; shift out comparison evaluation lowest bit
002F24  1  85 63                STA     <Cflag          ; save comparison evaluation flag
002F26  1  68                   PLA                     ; pop exponent
002F27  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
002F29  1  68                   PLA                     ; pop mantissa1
002F2A  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
002F2C  1  68                   PLA                     ; pop mantissa2
002F2D  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
002F2F  1  68                   PLA                     ; pop mantissa3
002F30  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
002F32  1  68                   PLA                     ; pop sign
002F33  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
002F35  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
002F37  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
002F39  1               LAB_1B9D:
002F39  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002F3B  1  60                   RTS
002F3C  1               
002F3C  1               ; print "..." string to string util area
002F3C  1               
002F3C  1               LAB_1BC1:
002F3C  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002F3E  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002F40  1  69 00                ADC     #$00            ; add carry to low byte
002F42  1  90 01                BCC     LAB_1BCA        ; branch if no overflow
002F44  1               
002F44  1  C8                   INY                     ; increment high byte
002F45  1               LAB_1BCA:
002F45  1  20 93 35             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002F48  1  4C 7B 3B             JMP     LAB_23F3        ; restore BASIC execute pointer from temp and return
002F4B  1               
002F4B  1               ; get value from line
002F4B  1               
002F4B  1               LAB_GVAL:
002F4B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002F4F  1  B0 03                BCS     LAB_1BAC        ; branch if not numeric character
002F51  1               
002F51  1               ; else numeric string found (e.g. 123)
002F51  1               LAB_1BA9:
002F51  1  4C 04 42             JMP     LAB_2887        ; get FAC1 from string and return
002F54  1               
002F54  1               ; get value from line .. continued
002F54  1               
002F54  1               ; wasn't a number so ..
002F54  1               LAB_1BAC:
002F54  1  AA                   TAX                     ; set the flags
002F55  1  30 31                BMI     LAB_1BD0        ; if -ve go test token values
002F57  1               
002F57  1               ; else it is either a string, number, variable or (<expr>)
002F57  1  C9 24                CMP     #'$'            ; compare with "$"
002F59  1  F0 F6                BEQ     LAB_1BA9        ; branch if "$", hex number
002F5B  1               
002F5B  1  C9 25                CMP     #'%'            ; else compare with "%"
002F5D  1  F0 F2                BEQ     LAB_1BA9        ; branch if "%", binary number
002F5F  1               
002F5F  1  C9 2E                CMP     #'.'            ; compare with "."
002F61  1  F0 EE                BEQ     LAB_1BA9        ; if so get FAC1 from string and return (e.g. was .123)
002F63  1               
002F63  1               ; it wasn't any sort of number so ..
002F63  1  C9 22                CMP     #$22            ; compare with "
002F65  1  F0 D5                BEQ     LAB_1BC1        ; branch if open quote
002F67  1               
002F67  1               ; wasn't any sort of number so ..
002F67  1               
002F67  1               ; evaluate expression within parentheses
002F67  1               
002F67  1  C9 28                CMP     #'('            ; compare with "("
002F69  1  D0 51                BNE     LAB_1C18        ; if not "(" get (var), return value in FAC1 and $ flag
002F6B  1               
002F6B  1               LAB_1BF7:
002F6B  1  20 65 2E             JSR     LAB_EVEZ        ; evaluate expression, no decrement
002F6E  1               
002F6E  1               ; all the 'scan for' routines return the character after the sought character
002F6E  1               
002F6E  1               ; scan for ")" , else do syntax error then warm start
002F6E  1               
002F6E  1               LAB_1BFB:
002F6E  1  A9 29                LDA     #$29            ; load A with ")"
002F70  1               
002F70  1               ; scan for CHR$(A) , else do syntax error then warm start
002F70  1               
002F70  1               LAB_SCCA:
002F70  1  A0 00                LDY     #$00            ; clear index
002F72  1  D1 C3                CMP     (<Bpntrl),Y     ; check next byte is = A
002F74  1  D0 0D                BNE     LAB_SNER        ; if not do syntax error then warm start
002F76  1               
002F76  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then return
002F7A  1  60                   RTS
002F7B  1               ; scan for "(" , else do syntax error then warm start
002F7B  1               
002F7B  1               LAB_1BFE:
002F7B  1  A9 28                LDA     #$28            ; load A with "("
002F7D  1  D0 F1                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002F7F  1               ; (branch always)
002F7F  1               
002F7F  1               ; scan for "," , else do syntax error then warm start
002F7F  1               
002F7F  1               LAB_1C01:
002F7F  1  A9 2C                LDA     #$2C            ; load A with ","
002F81  1  D0 ED                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002F83  1               ; (branch always)
002F83  1               
002F83  1               ; syntax error then warm start
002F83  1               
002F83  1               LAB_SNER:
002F83  1  A2 02                LDX     #$02            ; error code $02 ("Syntax" error)
002F85  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
002F88  1               
002F88  1               ; get value from line .. continued
002F88  1               ; do tokens
002F88  1               
002F88  1               LAB_1BD0:
002F88  1  C9 CC                CMP     #TK_MINUS       ; compare with token for -
002F8A  1  F0 29                BEQ     LAB_1C11        ; branch if - token (do set-up for functions)
002F8C  1               
002F8C  1               ; wasn't -n so ..
002F8C  1  C9 CB                CMP     #TK_PLUS        ; compare with token for +
002F8E  1  F0 BB                BEQ     LAB_GVAL        ; branch if + token (+n = n so ignore leading +)
002F90  1               
002F90  1  C9 C6                CMP     #TK_NOT         ; compare with token for NOT
002F92  1  D0 13                BNE     LAB_1BE7        ; branch if not token for NOT
002F94  1               
002F94  1               ; was NOT token
002F94  1               TK_EQUAL_PLUS   = TK_EQUAL-TK_PLUS
002F94  1  A0 21                LDY     #TK_EQUAL_PLUS*3; offset to NOT function
002F96  1  D0 1F                BNE     LAB_1C13        ; do set-up for function then execute (branch always)
002F98  1               
002F98  1               ; do = compare
002F98  1               
002F98  1               LAB_EQUAL:
002F98  1  20 5B 32             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
002F9B  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
002F9D  1  49 FF                EOR     #$FF            ; invert it
002F9F  1  A8                   TAY                     ; copy it
002FA0  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
002FA2  1  49 FF                EOR     #$FF            ; invert it
002FA4  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
002FA7  1               
002FA7  1               ; get value from line .. continued
002FA7  1               
002FA7  1               ; wasn't +, -, or NOT so ..
002FA7  1               LAB_1BE7:
002FA7  1  C9 C3                CMP     #TK_FN          ; compare with token for FN
002FA9  1  D0 03                BNE     LAB_1BEE        ; branch if not token for FN
002FAB  1               
002FAB  1  4C 76 34             JMP     LAB_201E        ; go evaluate FNx
002FAE  1               
002FAE  1               ; get value from line .. continued
002FAE  1               
002FAE  1               ; wasn't +, -, NOT or FN so ..
002FAE  1               LAB_1BEE:
002FAE  1  E9 D8                SBC     #TK_SGN         ; subtract with token for SGN
002FB0  1  B0 19                BCS     LAB_1C27        ; if a function token go do it
002FB2  1               
002FB2  1  4C 83 2F             JMP     LAB_SNER        ; else do syntax error
002FB5  1               
002FB5  1               ; set-up for functions
002FB5  1               
002FB5  1               LAB_1C11:
002FB5  1               TK_GT_PLUS      = TK_GT-TK_PLUS
002FB5  1  A0 1E                LDY     #TK_GT_PLUS*3   ; set offset from base to > operator
002FB7  1               LAB_1C13:
002FB7  1  68                   PLA                     ; dump return address low byte
002FB8  1  68                   PLA                     ; dump return address high byte
002FB9  1  4C B8 2E             JMP     LAB_1B1D        ; execute function then continue evaluation
002FBC  1               
002FBC  1               ; variable name set-up
002FBC  1               ; get (var), return value in FAC_1 and $ flag
002FBC  1               
002FBC  1               LAB_1C18:
002FBC  1  20 5A 31             JSR     LAB_GVAR        ; get (var) address
002FBF  1  85 AE                STA     <FAC1_2         ; save address low byte in FAC1 mantissa2
002FC1  1  84 AF                STY     <FAC1_3         ; save address high byte in FAC1 mantissa3
002FC3  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002FC5  1  30 03                BMI     LAB_1C25        ; if string then return (does RTS)
002FC7  1               
002FC7  1               LAB_1C24:
002FC7  1  4C D7 3F             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1
002FCA  1               
002FCA  1               LAB_1C25:
002FCA  1  60                   RTS
002FCB  1               
002FCB  1               ; get value from line .. continued
002FCB  1               ; only functions left so ..
002FCB  1               
002FCB  1               ; set up function references
002FCB  1               
002FCB  1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
002FCB  1               ; to process function calls. now the function vector is computed and pushed on the stack
002FCB  1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
002FCB  1               ; is calculated and the routine called, if not this routine just does RTS. whichever
002FCB  1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
002FCB  1               ; the function code
002FCB  1               
002FCB  1               ; this also removes some less than elegant code that was used to bypass type checking
002FCB  1               ; for functions that returned strings
002FCB  1               
002FCB  1               LAB_1C27:
002FCB  1  0A                   ASL     A               ; *2 (2 bytes per function address)
002FCC  1  A8                   TAY                     ; copy to index
002FCD  1               
002FCD  1  B9 03 11             LDA     LAB_FTBM,Y      ; get function jump vector high byte
002FD0  1  48                   PHA                     ; push functions jump vector high byte
002FD1  1  B9 02 11             LDA     LAB_FTBL,Y      ; get function jump vector low byte
002FD4  1  48                   PHA                     ; push functions jump vector low byte
002FD5  1               
002FD5  1  B9 B9 10             LDA     LAB_FTPM,Y      ; get function pre process vector high byte
002FD8  1  F0 05                BEQ     LAB_1C56        ; skip pre process if null vector
002FDA  1               
002FDA  1  48                   PHA                     ; push functions pre process vector high byte
002FDB  1  B9 B8 10             LDA     LAB_FTPL,Y      ; get function pre process vector low byte
002FDE  1  48                   PHA                     ; push functions pre process vector low byte
002FDF  1               
002FDF  1               LAB_1C56:
002FDF  1  60                   RTS                     ; do function, or pre process, call
002FE0  1               
002FE0  1               ; process string expression in parenthesis
002FE0  1               
002FE0  1               LAB_PPFS:
002FE0  1  20 6B 2F             JSR     LAB_1BF7        ; process expression in parenthesis
002FE3  1  4C 4E 2E             JMP     LAB_CTST        ; check if source is string then do function,
002FE6  1               ; else do type mismatch
002FE6  1               
002FE6  1               ; process numeric expression in parenthesis
002FE6  1               
002FE6  1               LAB_PPFN:
002FE6  1  20 6B 2F             JSR     LAB_1BF7        ; process expression in parenthesis
002FE9  1  4C 4C 2E             JMP     LAB_CTNM        ; check if source is numeric then do function,
002FEC  1               ; else do type mismatch
002FEC  1               
002FEC  1               ; set numeric data type and increment BASIC execute pointer
002FEC  1               
002FEC  1               LAB_PPBI:
002FEC  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
002FEE  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
002FF2  1  60                   RTS
002FF3  1               ; process string for LEFT$, RIGHT$ or MID$
002FF3  1               
002FF3  1               LAB_LRMS:
002FF3  1  20 65 2E             JSR     LAB_EVEZ        ; evaluate (should be string) expression
002FF6  1  20 7F 2F             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
002FF9  1  20 4E 2E             JSR     LAB_CTST        ; check if source is string, else do type mismatch
002FFC  1               
002FFC  1  68                   PLA                     ; get function jump vector low byte
002FFD  1  AA                   TAX                     ; save functions jump vector low byte
002FFE  1  68                   PLA                     ; get function jump vector high byte
002FFF  1  A8                   TAY                     ; save functions jump vector high byte
003000  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003002  1  48                   PHA                     ; push string pointer high byte
003003  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003005  1  48                   PHA                     ; push string pointer low byte
003006  1  98                   TYA                     ; get function jump vector high byte back
003007  1  48                   PHA                     ; save functions jump vector high byte
003008  1  8A                   TXA                     ; get function jump vector low byte back
003009  1  48                   PHA                     ; save functions jump vector low byte
00300A  1  20 F9 3A             JSR     LAB_GTBY        ; get byte parameter
00300D  1  8A                   TXA                     ; copy byte parameter to A
00300E  1  60                   RTS                     ; go do function
00300F  1               
00300F  1               ; process numeric expression(s) for BIN$ or HEX$
00300F  1               
00300F  1               LAB_BHSS:
00300F  1  20 65 2E             JSR     LAB_EVEZ        ; process expression
003012  1  20 4C 2E             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003015  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003017  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
003019  1  B0 22                BCS     LAB_BHER        ; branch if n>=2^24 (is too big)
00301B  1               
00301B  1  20 AE 41             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
00301E  1  A2 02                LDX     #$02            ; 3 bytes to do
003020  1               LAB_CFAC:
003020  1  B5 AD                LDA     <FAC1_1,X       ; get byte from FAC1
003022  1  95 11                STA     <nums_1,X       ; save byte to temp
003024  1  CA                   DEX                     ; decrement index
003025  1  10 F9                BPL     LAB_CFAC        ; copy FAC1 mantissa to temp
003027  1               
003027  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
00302B  1  A2 00                LDX     #$00            ; set default to no leading "0"s
00302D  1  C9 29                CMP     #')'            ; compare with close bracket
00302F  1  F0 0B                BEQ     LAB_1C54        ; if ")" go do rest of function
003031  1               
003031  1  20 8A 3B             JSR     LAB_SCGB        ; scan for "," and get byte
003034  1  22 C2 00 00          JSL     LAB_GBYT        ; get last byte back
003038  1  C9 29                CMP     #')'            ; is next character )
00303A  1  D0 01                BNE     LAB_BHER        ; if not ")" go do error
00303C  1               
00303C  1               LAB_1C54:
00303C  1  60                   RTS                     ; else do function
00303D  1               
00303D  1               LAB_BHER:
00303D  1  4C E2 32             JMP     LAB_FCER        ; do function call error then warm start
003040  1               
003040  1               ; perform EOR
003040  1               
003040  1               ; added operator format is the same as AND or OR, precedence is the same as OR
003040  1               
003040  1               ; this bit worked first time but it took a while to sort out the operator table
003040  1               ; pointers and offsets afterwards!
003040  1               
003040  1               LAB_EOR:
003040  1  20 67 30             JSR     GetFirst        ; get first integer expression (no sign check)
003043  1  45 5B                EOR     <XOAw_l         ; EOR with expression 1 low byte
003045  1  A8                   TAY                     ; save in Y
003046  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003048  1  45 5C                EOR     <XOAw_h         ; EOR with expression 1 high byte
00304A  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00304D  1               
00304D  1               ; perform OR
00304D  1               
00304D  1               LAB_OR:
00304D  1  20 67 30             JSR     GetFirst        ; get first integer expression (no sign check)
003050  1  05 5B                ORA     <XOAw_l         ; OR with expression 1 low byte
003052  1  A8                   TAY                     ; save in Y
003053  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003055  1  05 5C                ORA     <XOAw_h         ; OR with expression 1 high byte
003057  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00305A  1               
00305A  1               ; perform AND
00305A  1               
00305A  1               LAB_AND:
00305A  1  20 67 30             JSR     GetFirst        ; get first integer expression (no sign check)
00305D  1  25 5B                AND     <XOAw_l         ; AND with expression 1 low byte
00305F  1  A8                   TAY                     ; save in Y
003060  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003062  1  25 5C                AND     <XOAw_h         ; AND with expression 1 high byte
003064  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003067  1               
003067  1               ; get first value for OR, AND or EOR
003067  1               
003067  1               GetFirst:
003067  1  20 5B 32             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
00306A  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00306C  1  85 5C                STA     <XOAw_h         ; save it
00306E  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003070  1  85 5B                STA     <XOAw_l         ; save it
003072  1  20 C7 3C             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
003075  1  20 5B 32             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
003078  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00307A  1               LAB_1C95:
00307A  1  60                   RTS
00307B  1               
00307B  1               ; perform comparisons
00307B  1               
00307B  1               ; do < compare
00307B  1               
00307B  1               LAB_LTHAN:
00307B  1  20 4F 2E             JSR     LAB_CKTM        ; type match check, set C for string
00307E  1  B0 13                BCS     LAB_1CAE        ; branch if string
003080  1               
003080  1               ; do numeric < compare
003080  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
003082  1  09 7F                ORA     #$7F            ; set all non sign bits
003084  1  25 B4                AND     <FAC2_1         ; and FAC2 mantissa1 (AND in sign bit)
003086  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
003088  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
00308A  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
00308C  1  20 11 41             JSR     LAB_27F8        ; compare FAC1 with FAC2 (AY)
00308F  1  AA                   TAX                     ; copy result
003090  1  4C C4 30             JMP     LAB_1CE1        ; go evaluate result
003093  1               
003093  1               ; do string < compare
003093  1               LAB_1CAE:
003093  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
003095  1  C6 9B                DEC     <comp_f         ; clear < bit in compare function flag
003097  1  20 70 38             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
00309A  1               ; space returns with A = length, X=pointer low byte,
00309A  1               ; Y=pointer high byte
00309A  1  85 AC                STA     <str_ln         ; save length
00309C  1  86 AD                STX     <str_pl         ; save string pointer low byte
00309E  1  84 AE                STY     <str_ph         ; save string pointer high byte
0030A0  1  A5 B5                LDA     <FAC2_2         ; get descriptor pointer low byte
0030A2  1  A4 B6                LDY     <FAC2_3         ; get descriptor pointer high byte
0030A4  1  20 74 38             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0030A7  1               ; returns with A = length, X=pointer low byte,
0030A7  1               ; Y=pointer high byte
0030A7  1  86 B5                STX     <FAC2_2         ; save string pointer low byte
0030A9  1  84 B6                STY     <FAC2_3         ; save string pointer high byte
0030AB  1  AA                   TAX                     ; copy length
0030AC  1  38                   SEC                     ; set carry for subtract
0030AD  1  E5 AC                SBC     <str_ln         ; subtract string 1 length
0030AF  1  F0 08                BEQ     LAB_1CD6        ; branch if str 1 length = string 2 length
0030B1  1               
0030B1  1  A9 01                LDA     #$01            ; set str 1 length > string 2 length
0030B3  1  90 04                BCC     LAB_1CD6        ; branch if so
0030B5  1               
0030B5  1  A6 AC                LDX     <str_ln         ; get string 1 length
0030B7  1  A9 FF                LDA     #$FF            ; set str 1 length < string 2 length
0030B9  1               LAB_1CD6:
0030B9  1  85 B0                STA     <FAC1_s         ; save length compare
0030BB  1  A0 FF                LDY     #$FF            ; set index
0030BD  1  E8                   INX                     ; adjust for loop
0030BE  1               LAB_1CDB:
0030BE  1  C8                   INY                     ; increment index
0030BF  1  CA                   DEX                     ; decrement count
0030C0  1  D0 07                BNE     LAB_1CE6        ; branch if still bytes to do
0030C2  1               
0030C2  1  A6 B0                LDX     <FAC1_s         ; get length compare back
0030C4  1               LAB_1CE1:
0030C4  1  30 39                BMI     LAB_1CF2        ; branch if str 1 < str 2
0030C6  1               
0030C6  1  18                   CLC                     ; flag str 1 <= str 2
0030C7  1  90 36                BCC     LAB_1CF2        ; go evaluate result
0030C9  1               
0030C9  1               LAB_1CE6:
0030C9  1  8B DA A2 01          LDAINDIRECTY FAC2_2     ; get string 2 byte
0030CD  1  B5 B5 C9 00  
0030D1  1  D0 04 A2 00  
0030DF  1  8B 48 DA A2          CMPINDIRECTY FAC1_1     ; compare with string 1 byte
0030E3  1  01 B5 AD C9  
0030E7  1  00 D0 04 A2  
0030F7  1  F0 C5                BEQ     LAB_1CDB        ; loop if bytes =
0030F9  1               
0030F9  1  A2 FF                LDX     #$FF            ; set str 1 < string 2
0030FB  1  B0 02                BCS     LAB_1CF2        ; branch if so
0030FD  1               
0030FD  1  A2 01                LDX     #$01            ;  set str 1 > string 2
0030FF  1               LAB_1CF2:
0030FF  1  E8                   INX                     ; x = 0, 1 or 2
003100  1  8A                   TXA                     ; copy to A
003101  1  2A                   ROL     A               ; *2 (1, 2 or 4)
003102  1  25 63                AND     <Cflag          ; AND with comparison evaluation flag
003104  1  F0 02                BEQ     LAB_1CFB        ; branch if 0 (compare is false)
003106  1               
003106  1  A9 FF                LDA     #$FF            ; else set result true
003108  1               LAB_1CFB:
003108  1  4C F4 40             JMP     LAB_27DB        ; save A as integer byte and return
00310B  1               
00310B  1               LAB_1CFE:
00310B  1  20 7F 2F             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00310E  1               
00310E  1               ; perform DIM
00310E  1               
00310E  1               LAB_DIM:
00310E  1  AA                   TAX                     ; copy "DIM" flag to X
00310F  1  20 60 31             JSR     LAB_1D10        ; search for variable
003112  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003116  1  D0 F3                BNE     LAB_1CFE        ; scan for "," and loop if not null
003118  1               
003118  1  60                   RTS
003119  1               
003119  1               ; perform << (left shift)
003119  1               
003119  1               LAB_LSHIFT:
003119  1  20 4F 31             JSR     GetPair         ; get integer expression and byte (no sign check)
00311C  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
00311E  1  A6 78                LDX     <TempB          ; get shift count
003120  1  F0 22                BEQ     NoShift         ; branch if zero
003122  1               
003122  1  E0 10                CPX     #$10            ; compare bit count with 16d
003124  1  B0 23                BCS     TooBig          ; branch if >=
003126  1               
003126  1               Ls_loop:
003126  1  06 AF                ASL     <FAC1_3         ; shift low byte
003128  1  2A                   ROL     A               ; shift high byte
003129  1  CA                   DEX                     ; decrement bit count
00312A  1  D0 FA                BNE     Ls_loop         ; loop if shift not complete
00312C  1               
00312C  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
00312E  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003131  1               
003131  1               ; perform >> (right shift)
003131  1               
003131  1               LAB_RSHIFT:
003131  1  20 4F 31             JSR     GetPair         ; get integer expression and byte (no sign check)
003134  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
003136  1  A6 78                LDX     <TempB          ; get shift count
003138  1  F0 0A                BEQ     NoShift         ; branch if zero
00313A  1               
00313A  1  E0 10                CPX     #$10            ; compare bit count with 16d
00313C  1  B0 0B                BCS     TooBig          ; branch if >=
00313E  1               
00313E  1               Rs_loop:
00313E  1  4A                   LSR     A               ; shift high byte
00313F  1  66 AF                ROR     <FAC1_3         ; shift low byte
003141  1  CA                   DEX                     ; decrement bit count
003142  1  D0 FA                BNE     Rs_loop         ; loop if shift not complete
003144  1               
003144  1               NoShift:
003144  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
003146  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003149  1               
003149  1               TooBig:
003149  1  A9 00                LDA     #$00            ; clear high byte
00314B  1  A8                   TAY                     ; copy to low byte
00314C  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00314F  1               
00314F  1               GetPair:
00314F  1  20 FC 3A             JSR     LAB_EVBY        ; evaluate byte expression, result in X
003152  1  86 78                STX     <TempB          ; save it
003154  1  20 C7 3C             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
003157  1  4C 5B 32             JMP     LAB_EVIR        ; evaluate integer expression (no sign check)
00315A  1               
00315A  1               ; search for variable
00315A  1               
00315A  1               ; return pointer to variable in <Cvaral/<Cvarah
00315A  1               
00315A  1               LAB_GVAR:
00315A  1  A2 00                LDX     #$00            ; set DIM flag = $00
00315C  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory (1st character)
003160  1               LAB_1D10:
003160  1  86 5E                STX     <Defdim         ; save DIM flag
003162  1               LAB_1D12:
003162  1  85 93                STA     <Varnm1         ; save 1st character
003164  1  29 7F                AND     #$7F            ; clear FN flag bit
003166  1  20 D2 31             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
003169  1  B0 03                BCS     LAB_1D1F        ; branch if ok
00316B  1               
00316B  1  4C 83 2F             JMP     LAB_SNER        ; else syntax error then warm start
00316E  1               
00316E  1               ; was variable name so ..
00316E  1               LAB_1D1F:
00316E  1  A2 00                LDX     #$00            ; clear 2nd character temp
003170  1  86 5F                STX     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
003172  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (2nd character)
003176  1  90 05                BCC     LAB_1D2D        ; branch if character = "0"-"9" (ok)
003178  1               
003178  1               ; 2nd character wasn't "0" to "9" so ..
003178  1  20 D2 31             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
00317B  1  90 0C                BCC     LAB_1D38        ; branch if <"A" or >"Z" (go check if string)
00317D  1               
00317D  1               LAB_1D2D:
00317D  1  AA                   TAX                     ; copy 2nd character
00317E  1               
00317E  1               ; ignore further (valid) characters in the variable name
00317E  1               LAB_1D2E:
00317E  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (3rd character)
003182  1  90 FA                BCC     LAB_1D2E        ; loop if character = "0"-"9" (ignore)
003184  1               
003184  1  20 D2 31             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
003187  1  B0 F5                BCS     LAB_1D2E        ; loop if character = "A"-"Z" (ignore)
003189  1               
003189  1               ; check if string variable
003189  1               LAB_1D38:
003189  1  C9 24                CMP     #'$'            ; compare with "$"
00318B  1  D0 0C                BNE     LAB_1D47        ; branch if not string
00318D  1               
00318D  1               ; to introduce a new variable type (% suffix for integers say) then this branch
00318D  1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
00318D  1               
00318D  1               ; type is string
00318D  1  A9 FF                LDA     #$FF            ; set data type = string
00318F  1  85 5F                STA     <Dtypef         ; set data type flag, $FF=string, $00=numeric
003191  1  8A                   TXA                     ; get 2nd character back
003192  1  09 80                ORA     #$80            ; set top bit (indicate string var)
003194  1  AA                   TAX                     ; copy back to 2nd character temp
003195  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003199  1               
003199  1               ; after we have determined the variable type we need to come back here to determine
003199  1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
003199  1               
003199  1               
003199  1               LAB_1D47:                       ; gets here with character after var name in A
003199  1  86 94                STX     <Varnm2         ; save 2nd character
00319B  1  05 61                ORA     <Sufnxf         ; or with subscript/FNX flag (or FN name)
00319D  1  C9 28                CMP     #'('            ; compare with "("
00319F  1  D0 03                BNE     LAB_1D53        ; branch if not "("
0031A1  1               
0031A1  1  4C 6D 32             JMP     LAB_1E17        ; go find, or make, array
0031A4  1               
0031A4  1               ; either find or create var
0031A4  1               ; var name (1st two characters only!) is in <Varnm1,<Varnm2
0031A4  1               
0031A4  1               ; variable name wasn't var(... so look for plain var
0031A4  1               LAB_1D53:
0031A4  1  A9 00                LDA     #$00            ; clear A
0031A6  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
0031A8  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0031AA  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
0031AC  1  A0 00                LDY     #$00            ; clear index
0031AE  1               LAB_1D5D:
0031AE  1  86 AB                STX     <Vrschh         ; save search address high byte
0031B0  1               LAB_1D5F:
0031B0  1  85 AA                STA     <Vrschl         ; save search address low byte
0031B2  1  E4 7E                CPX     <Sarryh         ; compare high address with var space end
0031B4  1  D0 04                BNE     LAB_1D69        ; skip next compare if <>
0031B6  1               
0031B6  1               ; high addresses were = so compare low addresses
0031B6  1  C5 7D                CMP     <Sarryl         ; compare low address with var space end
0031B8  1  F0 2C                BEQ     LAB_1D8B        ; if not found go make new var
0031BA  1               
0031BA  1               LAB_1D69:
0031BA  1  A5 93                LDA     <Varnm1         ; get 1st character of var to find
0031BC  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 1st character
0031BE  1  D0 08                BNE     LAB_1D77        ; branch if no match
0031C0  1               
0031C0  1               ; 1st characters match so compare 2nd characters
0031C0  1  A5 94                LDA     <Varnm2         ; get 2nd character of var to find
0031C2  1  C8                   INY                     ; index to point to variable name 2nd character
0031C3  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 2nd character
0031C5  1  F0 69                BEQ     LAB_1DD7        ; branch if match (found var)
0031C7  1               
0031C7  1  88                   DEY                     ; else decrement index (now = $00)
0031C8  1               LAB_1D77:
0031C8  1  18                   CLC                     ; clear carry for add
0031C9  1  A5 AA                LDA     <Vrschl         ; get search address low byte
0031CB  1  69 06                ADC     #$06            ; +6 (offset to next var name)
0031CD  1  90 E1                BCC     LAB_1D5F        ; loop if no overflow to high byte
0031CF  1               
0031CF  1  E8                   INX                     ; else increment high byte
0031D0  1  D0 DC                BNE     LAB_1D5D        ; loop always (RAM doesn't extend to $FFFF !)
0031D2  1               
0031D2  1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
0031D2  1               
0031D2  1               LAB_CASC:
0031D2  1  C9 61                CMP     #'a'            ; compare with "a"
0031D4  1  B0 0A                BCS     LAB_1D83        ; go check <"z"+1
0031D6  1               
0031D6  1               ; check byte, return C=0 if<"A" or >"Z"
0031D6  1               
0031D6  1               LAB_1D82:
0031D6  1  C9 41                CMP     #'A'            ; compare with "A"
0031D8  1  90 05                BCC     LAB_1D8A        ; exit if less
0031DA  1               
0031DA  1               ; carry is set
0031DA  1  E9 5B                SBC     #$5B            ; subtract "Z"+1
0031DC  1  38                   SEC                     ; set carry
0031DD  1  E9 A5                SBC     #$A5            ; subtract $A5 (restore byte)
0031DF  1               ; carry clear if byte>$5A
0031DF  1               LAB_1D8A:
0031DF  1  60                   RTS
0031E0  1               
0031E0  1               LAB_1D83:
0031E0  1  E9 7B                SBC     #$7B            ; subtract "z"+1
0031E2  1  38                   SEC                     ; set carry
0031E3  1  E9 85                SBC     #$85            ; subtract $85 (restore byte)
0031E5  1               ; carry clear if byte>$7A
0031E5  1  60                   RTS
0031E6  1               
0031E6  1               ; reached end of variable mem without match
0031E6  1               ; .. so create new variable
0031E6  1               LAB_1D8B:
0031E6  1  68                   PLA                     ; pop return address low byte
0031E7  1  48                   PHA                     ; push return address low byte
0031E8  1               LAB_1C18p2      = LAB_1C18+2
0031E8  1  C9 BE                CMP     #<LAB_1C18p2    ; compare with expected calling routine return low byte
0031EA  1  D0 05                BNE     LAB_1D98        ; if not get (var) go create new var
0031EC  1               
0031EC  1               ; This will only drop through if the call was from LAB_1C18 and is only called
0031EC  1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
0031EC  1               ; it prevents the creation of variables not assigned a value.
0031EC  1               
0031EC  1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
0031EC  1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
0031EC  1               
0031EC  1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
0031EC  1               
0031EC  1               ; this is where you would put the undefined variable error call e.g.
0031EC  1               
0031EC  1               ;					; variable doesn't exist so flag error
0031EC  1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
0031EC  1               ;	JMP	LAB_XERR		; do error #X then warm start
0031EC  1               
0031EC  1               ; the above code has been tested and works a treat! (it replaces the three code lines
0031EC  1               ; below)
0031EC  1               
0031EC  1               ; else return dummy null value
0031EC  1  A9 9B                LDA     #<LAB_1D96      ; low byte point to $00,$00
0031EE  1               ; (uses part of misc constants table)
0031EE  1  A0 18                LDY     #>LAB_1D96      ; high byte point to $00,$00
0031F0  1  60                   RTS
0031F1  1               
0031F1  1               ; create new numeric variable
0031F1  1               LAB_1D98:
0031F1  1  A5 7D                LDA     <Sarryl         ; get var mem end low byte
0031F3  1  A4 7E                LDY     <Sarryh         ; get var mem end high byte
0031F5  1  85 AA                STA     <Ostrtl         ; save old block start low byte
0031F7  1  84 AB                STY     <Ostrth         ; save old block start high byte
0031F9  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
0031FB  1  A4 80                LDY     <Earryh         ; get array mem end high byte
0031FD  1  85 A6                STA     <Obendl         ; save old block end low byte
0031FF  1  84 A7                STY     <Obendh         ; save old block end high byte
003201  1  18                   CLC                     ; clear carry for add
003202  1  69 06                ADC     #$06            ; +6 (space for one var)
003204  1  90 01                BCC     LAB_1DAE        ; branch if no overflow to high byte
003206  1               
003206  1  C8                   INY                     ; else increment high byte
003207  1               LAB_1DAE:
003207  1  85 A4                STA     <Nbendl         ; set new block end low byte
003209  1  84 A5                STY     <Nbendh         ; set new block end high byte
00320B  1  20 41 22             JSR     LAB_11CF        ; open up space in memory
00320E  1  A5 A4                LDA     <Nbendl         ; get new start low byte
003210  1  A4 A5                LDY     <Nbendh         ; get new start high byte (-$100)
003212  1  C8                   INY                     ; correct high byte
003213  1  85 7D                STA     <Sarryl         ; save new var mem end low byte
003215  1  84 7E                STY     <Sarryh         ; save new var mem end high byte
003217  1  A0 00                LDY     #$00            ; clear index
003219  1  A5 93                LDA     <Varnm1         ; get var name 1st character
00321B  1  91 AA                STA     (<Vrschl),Y     ; save var name 1st character
00321D  1  C8                   INY                     ; increment index
00321E  1  A5 94                LDA     <Varnm2         ; get var name 2nd character
003220  1  91 AA                STA     (<Vrschl),Y     ; save var name 2nd character
003222  1  A9 00                LDA     #$00            ; clear A
003224  1  C8                   INY                     ; increment index
003225  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
003227  1  C8                   INY                     ; increment index
003228  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
00322A  1  C8                   INY                     ; increment index
00322B  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
00322D  1  C8                   INY                     ; increment index
00322E  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
003230  1               
003230  1               ; found a match for var ((<Vrschl) = ptr)
003230  1               LAB_1DD7:
003230  1  A5 AA                LDA     <Vrschl         ; get var address low byte
003232  1  18                   CLC                     ; clear carry for add
003233  1  69 02                ADC     #$02            ; +2 (offset past var name bytes)
003235  1  A4 AB                LDY     <Vrschh         ; get var address high byte
003237  1  90 01                BCC     LAB_1DE1        ; branch if no overflow from add
003239  1               
003239  1  C8                   INY                     ; else increment high byte
00323A  1               LAB_1DE1:
00323A  1  85 95                STA     <Cvaral         ; save current var address low byte
00323C  1  84 96                STY     <Cvarah         ; save current var address high byte
00323E  1  60                   RTS
00323F  1               
00323F  1               ; set-up array pointer (<Adatal/h) to first element in array
00323F  1               ; set <Adatal,<Adatah to <Astrtl,<Astrth+2*<Dimcnt+#$05
00323F  1               
00323F  1               LAB_1DE6:
00323F  1  A5 5D                LDA     <Dimcnt         ; get # of dimensions (1, 2 or 3)
003241  1  0A                   ASL     A               ; *2 (also clears the carry !)
003242  1  69 05                ADC     #$05            ; +5 (result is 7, 9 or 11 here)
003244  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
003246  1  A4 AB                LDY     <Astrth         ; get array pointer high byte
003248  1  90 01                BCC     LAB_1DF2        ; branch if no overflow
00324A  1               
00324A  1  C8                   INY                     ; else increment high byte
00324B  1               LAB_1DF2:
00324B  1  85 A4                STA     <Adatal         ; save array data pointer low byte
00324D  1  84 A5                STY     <Adatah         ; save array data pointer high byte
00324F  1  60                   RTS
003250  1               
003250  1               ; evaluate integer expression
003250  1               
003250  1               LAB_EVIN:
003250  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003254  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003257  1               ; else do type mismatch
003257  1               
003257  1               ; evaluate integer expression (no check)
003257  1               
003257  1               LAB_EVPI:
003257  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003259  1  30 0D                BMI     LAB_1E12        ; do function call error if -ve
00325B  1               
00325B  1               ; evaluate integer expression (no sign check)
00325B  1               
00325B  1               LAB_EVIR:
00325B  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00325D  1  C9 90                CMP     #$90            ; compare with exponent = 2^16 (n>2^15)
00325F  1  90 09                BCC     LAB_1E14        ; branch if n<2^16 (is ok)
003261  1               
003261  1  A9 A2                LDA     #<LAB_1DF7      ; set pointer low byte to -32768
003263  1  A0 18                LDY     #>LAB_1DF7      ; set pointer high byte to -32768
003265  1  20 11 41             JSR     LAB_27F8        ; compare FAC1 with (AY)
003268  1               LAB_1E12:
003268  1  D0 78                BNE     LAB_FCER        ; if <> do function call error then warm start
00326A  1               
00326A  1               LAB_1E14:
00326A  1  4C AE 41             JMP     LAB_2831        ; convert FAC1 floating-to-fixed and return
00326D  1               
00326D  1               ; find or make array
00326D  1               
00326D  1               LAB_1E17:
00326D  1  A5 5E                LDA     <Defdim         ; get DIM flag
00326F  1  48                   PHA                     ; push it
003270  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003272  1  48                   PHA                     ; push it
003273  1  A0 00                LDY     #$00            ; clear dimensions count
003275  1               
003275  1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
003275  1               
003275  1               LAB_1E1F:
003275  1  98                   TYA                     ; copy dimensions count
003276  1  48                   PHA                     ; save it
003277  1  A5 94                LDA     <Varnm2         ; get array name 2nd byte
003279  1  48                   PHA                     ; save it
00327A  1  A5 93                LDA     <Varnm1         ; get array name 1st byte
00327C  1  48                   PHA                     ; save it
00327D  1  20 50 32             JSR     LAB_EVIN        ; evaluate integer expression
003280  1  68                   PLA                     ; pull array name 1st byte
003281  1  85 93                STA     <Varnm1         ; restore array name 1st byte
003283  1  68                   PLA                     ; pull array name 2nd byte
003284  1  85 94                STA     <Varnm2         ; restore array name 2nd byte
003286  1  68                   PLA                     ; pull dimensions count
003287  1  A8                   TAY                     ; restore it
003288  1  A3 02                LDA     2,S             ; get DIM flag
00328A  1  85 FD                STA     <TEMPW          ; push it
00328C  1  A3 01                LDA     1,S             ; get data type flag
00328E  1  85 FE                STA     <TEMPW+1        ; push it
003290  1  A5 AE                LDA     <FAC1_2         ; get this dimension size high byte
003292  1  83 02                STA     2,S             ; stack before flag bytes
003294  1  A5 AF                LDA     <FAC1_3         ; get this dimension size low byte
003296  1  83 01                STA     1,S             ; stack before flag bytes
003298  1  A5 FD                LDA     <TEMPW
00329A  1  48                   PHA
00329B  1  A5 FE                LDA     <TEMPW+1
00329D  1  48                   PHA
00329E  1  C8                   INY                     ; increment dimensions count
00329F  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0032A3  1  C9 2C                CMP     #','            ; compare with ","
0032A5  1  F0 CE                BEQ     LAB_1E1F        ; if found go do next dimension
0032A7  1               
0032A7  1  84 5D                STY     <Dimcnt         ; store dimensions count
0032A9  1  20 6E 2F             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0032AC  1  68                   PLA                     ; pull data type flag
0032AD  1  85 5F                STA     <Dtypef         ; restore data type flag, $FF=string, $00=numeric
0032AF  1  68                   PLA                     ; pull DIM flag
0032B0  1  85 5E                STA     <Defdim         ; restore DIM flag
0032B2  1  A6 7D                LDX     <Sarryl         ; get array mem start low byte
0032B4  1  A5 7E                LDA     <Sarryh         ; get array mem start high byte
0032B6  1               
0032B6  1               ; now check to see if we are at the end of array memory (we would be if there were
0032B6  1               ; no arrays).
0032B6  1               
0032B6  1               LAB_1E5C:
0032B6  1  86 AA                STX     <Astrtl         ; save as array start pointer low byte
0032B8  1  85 AB                STA     <Astrth         ; save as array start pointer high byte
0032BA  1  C5 80                CMP     <Earryh         ; compare with array mem end high byte
0032BC  1  D0 04                BNE     LAB_1E68        ; branch if not reached array mem end
0032BE  1               
0032BE  1  E4 7F                CPX     <Earryl         ; else compare with array mem end low byte
0032C0  1  F0 39                BEQ     LAB_1EA1        ; go build array if not found
0032C2  1               
0032C2  1               ; search for array
0032C2  1               LAB_1E68:
0032C2  1  A0 00                LDY     #$00            ; clear index
0032C4  1  B1 AA                LDA     (<Astrtl),Y     ; get array name first byte
0032C6  1  C8                   INY                     ; increment index to second name byte
0032C7  1  C5 93                CMP     <Varnm1         ; compare with this array name first byte
0032C9  1  D0 06                BNE     LAB_1E77        ; branch if no match
0032CB  1               
0032CB  1  A5 94                LDA     <Varnm2         ; else get this array name second byte
0032CD  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array name second byte
0032CF  1  F0 16                BEQ     LAB_1E8D        ; array found so branch
0032D1  1               
0032D1  1               ; no match
0032D1  1               LAB_1E77:
0032D1  1  C8                   INY                     ; increment index
0032D2  1  B1 AA                LDA     (<Astrtl),Y     ; get array size low byte
0032D4  1  18                   CLC                     ; clear carry for add
0032D5  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
0032D7  1  AA                   TAX                     ; copy low byte to X
0032D8  1  C8                   INY                     ; increment index
0032D9  1  B1 AA                LDA     (<Astrtl),Y     ; get array size high byte
0032DB  1  65 AB                ADC     <Astrth         ; add array mem pointer high byte
0032DD  1  90 D7                BCC     LAB_1E5C        ; if no overflow go check next array
0032DF  1               ; do array bounds error
0032DF  1               
0032DF  1               LAB_1E85:
0032DF  1  A2 10                LDX     #$10            ; error code $10 ("Array bounds" error)
0032E1  1  2C                   .BYTE   $2C             ; makes next bit BIT LAB_08A2
0032E2  1               
0032E2  1               ; do function call error
0032E2  1               
0032E2  1               LAB_FCER:
0032E2  1  A2 08                LDX     #$08            ; error code $08 ("Function call" error)
0032E4  1               LAB_1E8A:
0032E4  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
0032E7  1               
0032E7  1               ; found array, are we trying to dimension it?
0032E7  1               LAB_1E8D:
0032E7  1  A2 12                LDX     #$12            ; set error $12 ("Double dimension" error)
0032E9  1  A5 5E                LDA     <Defdim         ; get DIM flag
0032EB  1  D0 F7                BNE     LAB_1E8A        ; if we are trying to dimension it do error #X, then warm
0032ED  1               ; start
0032ED  1               
0032ED  1               ; found the array and we're not dimensioning it so we must find an element in it
0032ED  1               
0032ED  1  20 3F 32             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
0032F0  1               ; (<Astrtl,<Astrth points to start of array)
0032F0  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
0032F2  1  A0 04                LDY     #$04            ; set index to array's # of dimensions
0032F4  1  D1 AA                CMP     (<Astrtl),Y     ; compare with no of dimensions
0032F6  1  D0 E7                BNE     LAB_1E85        ; if wrong do array bounds error, could do "Wrong
0032F8  1               ; dimensions" error here .. if we want a different
0032F8  1               ; error message
0032F8  1               
0032F8  1  4C 7E 33             JMP     LAB_1F28        ; found array so go get element
0032FB  1               ; (could jump to LAB_1F28 as all LAB_1F24 does is take
0032FB  1               ; <Dimcnt and save it at (<Astrtl),Y which is already the
0032FB  1               ; same or we would have taken the BNE)
0032FB  1               
0032FB  1               ; array not found, so build it
0032FB  1               LAB_1EA1:
0032FB  1  20 3F 32             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
0032FE  1               ; (<Astrtl,<Astrth points to start of array)
0032FE  1  20 EB 22             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
003301  1               ; addr to check is in AY (low/high)
003301  1  A0 00                LDY     #$00            ; clear Y (don't need to clear A)
003303  1  84 BB                STY     <Aspth          ; clear array data size high byte
003305  1  A5 93                LDA     <Varnm1         ; get variable name 1st byte
003307  1  91 AA                STA     (<Astrtl),Y     ; save array name 1st byte
003309  1  C8                   INY                     ; increment index
00330A  1  A5 94                LDA     <Varnm2         ; get variable name 2nd byte
00330C  1  91 AA                STA     (<Astrtl),Y     ; save array name 2nd byte
00330E  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
003310  1  A0 04                LDY     #$04            ; index to dimension count
003312  1  84 BA                STY     <Asptl          ; set array data size low byte (four bytes per element)
003314  1  91 AA                STA     (<Astrtl),Y     ; set array's dimensions count
003316  1               
003316  1               ; now calculate the size of the data space for the array
003316  1  18                   CLC                     ; clear carry for add (clear on subsequent loops)
003317  1               LAB_1EC0:
003317  1  A2 0B                LDX     #$0B            ; set default dimension value low byte
003319  1  A9 00                LDA     #$00            ; set default dimension value high byte
00331B  1  24 5E                BIT     <Defdim         ; test default DIM flag
00331D  1  50 07                BVC     LAB_1ED0        ; branch if b6 of <Defdim is clear
00331F  1               
00331F  1  68                   PLA                     ; else pull dimension value low byte
003320  1  69 01                ADC     #$01            ; +1 (allow for zeroeth element)
003322  1  AA                   TAX                     ; copy low byte to X
003323  1  68                   PLA                     ; pull dimension value high byte
003324  1  69 00                ADC     #$00            ; add carry from low byte
003326  1               
003326  1               LAB_1ED0:
003326  1  C8                   INY                     ; index to dimension value high byte
003327  1  91 AA                STA     (<Astrtl),Y     ; save dimension value high byte
003329  1  C8                   INY                     ; index to dimension value high byte
00332A  1  8A                   TXA                     ; get dimension value low byte
00332B  1  91 AA                STA     (<Astrtl),Y     ; save dimension value low byte
00332D  1  20 CD 33             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
003330  1  86 BA                STX     <Asptl          ; save array data size low byte
003332  1  85 BB                STA     <Aspth          ; save array data size high byte
003334  1  A4 71                LDY     <ut1_pl         ; restore index (saved by subroutine)
003336  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
003338  1  D0 DD                BNE     LAB_1EC0        ; loop while not = 0
00333A  1               
00333A  1  65 A5                ADC     <Adatah         ; add size high byte to first element high byte
00333C  1               ; (carry is always clear here)
00333C  1  B0 5D                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
00333E  1               
00333E  1  85 A5                STA     <Adatah         ; save end of array high byte
003340  1  A8                   TAY                     ; copy end high byte to Y
003341  1  8A                   TXA                     ; get array size low byte
003342  1  65 A4                ADC     <Adatal         ; add array start low byte
003344  1  90 03                BCC     LAB_1EF3        ; branch if no carry
003346  1               
003346  1  C8                   INY                     ; else increment end of array high byte
003347  1  F0 52                BEQ     LAB_1F45        ; if overflow go do "Out of memory" error
003349  1               
003349  1               ; set-up mostly complete, now zero the array
003349  1               LAB_1EF3:
003349  1  20 EB 22             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
00334C  1               ; addr to check is in AY (low/high)
00334C  1  85 7F                STA     <Earryl         ; save array mem end low byte
00334E  1  84 80                STY     <Earryh         ; save array mem end high byte
003350  1  A9 00                LDA     #$00            ; clear byte for array clear
003352  1  E6 BB                INC     <Aspth          ; increment array size high byte (now block count)
003354  1  A4 BA                LDY     <Asptl          ; get array size low byte (now index to block)
003356  1  F0 05                BEQ     LAB_1F07        ; branch if low byte = $00
003358  1               
003358  1               LAB_1F02:
003358  1  88                   DEY                     ; decrement index (do 0 to n-1)
003359  1  91 A4                STA     (<Adatal),Y     ; zero byte
00335B  1  D0 FB                BNE     LAB_1F02        ; loop until this block done
00335D  1               
00335D  1               LAB_1F07:
00335D  1  C6 A5                DEC     <Adatah         ; decrement array pointer high byte
00335F  1  C6 BB                DEC     <Aspth          ; decrement block count high byte
003361  1  D0 F5                BNE     LAB_1F02        ; loop until all blocks done
003363  1               
003363  1  E6 A5                INC     <Adatah         ; correct for last loop
003365  1  38                   SEC                     ; set carry for subtract
003366  1  A0 02                LDY     #$02            ; index to array size low byte
003368  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
00336A  1  E5 AA                SBC     <Astrtl         ; subtract array start low byte
00336C  1  91 AA                STA     (<Astrtl),Y     ; save array size low byte
00336E  1  C8                   INY                     ; index to array size high byte
00336F  1  A5 80                LDA     <Earryh         ; get array mem end high byte
003371  1  E5 AB                SBC     <Astrth         ; subtract array start high byte
003373  1  91 AA                STA     (<Astrtl),Y     ; save array size high byte
003375  1  A5 5E                LDA     <Defdim         ; get default DIM flag
003377  1  D0 53                BNE     LAB_1F7B        ; exit (RET) if this was a DIM command
003379  1               ; else, find element
003379  1  C8                   INY                     ; index to # of dimensions
00337A  1               
00337A  1               LAB_1F24:
00337A  1  B1 AA                LDA     (<Astrtl),Y     ; get array's dimension count
00337C  1  85 5D                STA     <Dimcnt         ; save it
00337E  1               
00337E  1               ; we have found, or built, the array. now we need to find the element
00337E  1               
00337E  1               LAB_1F28:
00337E  1  A9 00                LDA     #$00            ; clear byte
003380  1  85 BA                STA     <Asptl          ; clear array data pointer low byte
003382  1               LAB_1F2C:
003382  1  85 BB                STA     <Aspth          ; save array data pointer high byte
003384  1  C8                   INY                     ; increment index (point to array bound high byte)
003385  1  68                   PLA                     ; pull array index low byte
003386  1  AA                   TAX                     ; copy to X
003387  1  85 AE                STA     <FAC1_2         ; save index low byte to FAC1 mantissa2
003389  1  68                   PLA                     ; pull array index high byte
00338A  1  85 AF                STA     <FAC1_3         ; save index high byte to FAC1 mantissa3
00338C  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound high byte
00338E  1  90 0E                BCC     LAB_1F48        ; branch if within bounds
003390  1               
003390  1  D0 06                BNE     LAB_1F42        ; if outside bounds do array bounds error
003392  1               
003392  1               ; else high byte was = so test low bytes
003392  1  C8                   INY                     ; index to array bound low byte
003393  1  8A                   TXA                     ; get array index low byte
003394  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound low byte
003396  1  90 07                BCC     LAB_1F49        ; branch if within bounds
003398  1               
003398  1               LAB_1F42:
003398  1  4C DF 32             JMP     LAB_1E85        ; else do array bounds error
00339B  1               
00339B  1               LAB_1F45:
00339B  1  4C 1A 23             JMP     LAB_OMER        ; do "Out of memory" error then warm start
00339E  1               
00339E  1               LAB_1F48:
00339E  1  C8                   INY                     ; index to array bound low byte
00339F  1               LAB_1F49:
00339F  1  A5 BB                LDA     <Aspth          ; get array data pointer high byte
0033A1  1  05 BA                ORA     <Asptl          ; OR with array data pointer low byte
0033A3  1  F0 0A                BEQ     LAB_1F5A        ; branch if array data pointer = null (skip multiply)
0033A5  1               
0033A5  1  20 CD 33             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
0033A8  1  8A                   TXA                     ; get result low byte
0033A9  1  65 AE                ADC     <FAC1_2         ; add index low byte from FAC1 mantissa2
0033AB  1  AA                   TAX                     ; save result low byte
0033AC  1  98                   TYA                     ; get result high byte
0033AD  1  A4 71                LDY     <ut1_pl         ; restore index
0033AF  1               LAB_1F5A:
0033AF  1  65 AF                ADC     <FAC1_3         ; add index high byte from FAC1 mantissa3
0033B1  1  86 BA                STX     <Asptl          ; save array data pointer low byte
0033B3  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
0033B5  1  D0 CB                BNE     LAB_1F2C        ; loop if dimensions still to do
0033B7  1               
0033B7  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 2
0033B9  1  2A                   ROL     A               ; array data pointer high byte * 2
0033BA  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 4
0033BC  1  2A                   ROL     A               ; array data pointer high byte * 4
0033BD  1  A8                   TAY                     ; copy high byte
0033BE  1  A5 BA                LDA     <Asptl          ; get low byte
0033C0  1  65 A4                ADC     <Adatal         ; add array data start pointer low byte
0033C2  1  85 95                STA     <Cvaral         ; save as current var address low byte
0033C4  1  98                   TYA                     ; get high byte back
0033C5  1  65 A5                ADC     <Adatah         ; add array data start pointer high byte
0033C7  1  85 96                STA     <Cvarah         ; save as current var address high byte
0033C9  1  A8                   TAY                     ; copy high byte to Y
0033CA  1  A5 95                LDA     <Cvaral         ; get current var address low byte
0033CC  1               LAB_1F7B:
0033CC  1  60                   RTS
0033CD  1               
0033CD  1               ; does XY = (<Astrtl),Y * (<Asptl)
0033CD  1               
0033CD  1               LAB_1F7C:
0033CD  1  84 71                STY     <ut1_pl         ; save index
0033CF  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size low byte
0033D1  1  85 76                STA     <dims_l         ; save dimension size low byte
0033D3  1  88                   DEY                     ; decrement index
0033D4  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size high byte
0033D6  1  85 77                STA     <dims_h         ; save dimension size high byte
0033D8  1               
0033D8  1  A9 10                LDA     #$10            ; count = $10 (16 bit multiply)
0033DA  1  85 A8                STA     <numbit         ; save bit count
0033DC  1  A2 00                LDX     #$00            ; clear result low byte
0033DE  1  A0 00                LDY     #$00            ; clear result high byte
0033E0  1               LAB_1F8F:
0033E0  1  8A                   TXA                     ; get result low byte
0033E1  1  0A                   ASL     A               ; *2
0033E2  1  AA                   TAX                     ; save result low byte
0033E3  1  98                   TYA                     ; get result high byte
0033E4  1  2A                   ROL     A               ; *2
0033E5  1  A8                   TAY                     ; save result high byte
0033E6  1  B0 B3                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
0033E8  1               
0033E8  1  06 BA                ASL     <Asptl          ; shift multiplier low byte
0033EA  1  26 BB                ROL     <Aspth          ; shift multiplier high byte
0033EC  1  90 11                BCC     LAB_1FA8        ; skip add if no carry
0033EE  1               
0033EE  1  18                   CLC                     ; else clear carry for add
0033EF  1  8A                   TXA                     ; get result low byte
0033F0  1  65 76                ADC     <dims_l         ; add dimension size low byte
0033F2  1  AA                   TAX                     ; save result low byte
0033F3  1  98                   TYA                     ; get result high byte
0033F4  1  65 77                ADC     <dims_h         ; add dimension size high byte
0033F6  1  A8                   TAY                     ; save result high byte
0033F7  1  B0 03                BCS     LAB_1F45_1      ; if overflow go do "Out of memory" error
0033F9  1  4C FF 33             JMP     LAB_1FA8
0033FC  1               LAB_1F45_1:
0033FC  1  4C 9B 33             JMP     LAB_1F45
0033FF  1               LAB_1FA8:
0033FF  1  C6 A8                DEC     <numbit         ; decrement bit count
003401  1  D0 DD                BNE     LAB_1F8F        ; loop until all done
003403  1               
003403  1  60                   RTS
003404  1               
003404  1               ; perform FRE()
003404  1               
003404  1               LAB_FRE:
003404  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003406  1  10 03                BPL     LAB_1FB4        ; branch if numeric
003408  1               
003408  1  20 70 38             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
00340B  1               ; space returns with A = length, X=$71=pointer low byte,
00340B  1               ; Y=$72=pointer high byte
00340B  1               
00340B  1               ; FRE(n) was numeric so do this
00340B  1               LAB_1FB4:
00340B  1  20 46 36             JSR     LAB_GARB        ; go do garbage collection
00340E  1  38                   SEC                     ; set carry for subtract
00340F  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003411  1  E5 7F                SBC     <Earryl         ; subtract array mem end low byte
003413  1  A8                   TAY                     ; copy result to Y
003414  1  A5 82                LDA     <Sstorh         ; get bottom of string space high byte
003416  1  E5 80                SBC     <Earryh         ; subtract array mem end high byte
003418  1               
003418  1               ; save and convert integer AY to FAC1
003418  1               
003418  1               LAB_AYFC:
003418  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00341A  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00341C  1  84 AE                STY     <FAC1_2         ; save FAC1 mantissa2
00341E  1  A2 90                LDX     #$90            ; set exponent=2^16 (integer)
003420  1  4C FC 40             JMP     LAB_27E3        ; set exp=X, clear <FAC1_3, normalise and return
003423  1               
003423  1               ; perform POS()
003423  1               
003423  1               LAB_POS:
003423  1  A4 0E                LDY     <TPos           ; get terminal position
003425  1               
003425  1               ; convert Y to byte in FAC1
003425  1               
003425  1               LAB_1FD0:
003425  1  A9 00                LDA     #$00            ; clear high byte
003427  1  F0 EF                BEQ     LAB_AYFC        ; always save and convert integer AY to FAC1 and return
003429  1               
003429  1               ; check not Direct (used by DEF and INPUT)
003429  1               
003429  1               LAB_CKRN:
003429  1  A6 88                LDX     <Clineh         ; get current line high byte
00342B  1  E8                   INX                     ; increment it
00342C  1  F0 03                BEQ     LAB_1FD9
00342E  1  4C CC 33             JMP     LAB_1F7B        ; return if can continue not direct mode
003431  1               
003431  1               ; else do illegal direct error
003431  1               LAB_1FD9:
003431  1  A2 16                LDX     #$16            ; error code $16 ("Illegal direct" error)
003433  1               LAB_1FDB:
003433  1  4C 1C 23             JMP     LAB_XERR        ; go do error #X, then warm start
003436  1               
003436  1               ; perform DEF
003436  1               
003436  1               LAB_DEF:
003436  1  20 67 34             JSR     LAB_200B        ; check FNx syntax
003439  1  85 9C                STA     <func_l         ; save function pointer low byte
00343B  1  84 9D                STY     <func_h         ; save function pointer high byte
00343D  1  20 29 34             JSR     LAB_CKRN        ; check not Direct (back here if ok)
003440  1  20 7B 2F             JSR     LAB_1BFE        ; scan for "(" , else do syntax error then warm start
003443  1  A9 80                LDA     #$80            ; set flag for FNx
003445  1  85 61                STA     <Sufnxf         ; save subscript/FNx flag
003447  1  20 5A 31             JSR     LAB_GVAR        ; get (var) address
00344A  1  20 4C 2E             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
00344D  1  20 6E 2F             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003450  1  A9 D6                LDA     #TK_EQUAL       ; get = token
003452  1  20 70 2F             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003455  1  A5 96                LDA     <Cvarah         ; get current var address high byte
003457  1  48                   PHA                     ; push it
003458  1  A5 95                LDA     <Cvaral         ; get current var address low byte
00345A  1  48                   PHA                     ; push it
00345B  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
00345D  1  48                   PHA                     ; push it
00345E  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
003460  1  48                   PHA                     ; push it
003461  1  20 B6 28             JSR     LAB_DATA        ; go perform DATA
003464  1  4C 13 35             JMP     LAB_207A        ; put execute pointer and variable pointer into function
003467  1               ; and return
003467  1               
003467  1               ; check FNx syntax
003467  1               
003467  1               LAB_200B:
003467  1  A9 C3                LDA     #TK_FN          ; get FN" token
003469  1  20 70 2F             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
00346C  1               ; return character after A
00346C  1  09 80                ORA     #$80            ; set FN flag bit
00346E  1  85 61                STA     <Sufnxf         ; save FN flag so array variable test fails
003470  1  20 62 31             JSR     LAB_1D12        ; search for FN variable
003473  1  4C 4C 2E             JMP     LAB_CTNM        ; check if source is numeric and return, else do type
003476  1               ; mismatch
003476  1               
003476  1               ; Evaluate FNx
003476  1               LAB_201E:
003476  1  20 67 34             JSR     LAB_200B        ; check FNx syntax
003479  1  48                   PHA                     ; push function pointer low byte
00347A  1  98                   TYA                     ; copy function pointer high byte
00347B  1  48                   PHA                     ; push function pointer high byte
00347C  1  20 7B 2F             JSR     LAB_1BFE        ; scan for "(", else do syntax error then warm start
00347F  1  20 5D 2E             JSR     LAB_EVEX        ; evaluate expression
003482  1  20 6E 2F             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003485  1  20 4C 2E             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003488  1  68                   PLA                     ; pop function pointer high byte
003489  1  85 9D                STA     <func_h         ; restore it
00348B  1  68                   PLA                     ; pop function pointer low byte
00348C  1  85 9C                STA     <func_l         ; restore it
00348E  1  A2 20                LDX     #$20            ; error code $20 ("Undefined function" error)
003490  1  A0 03                LDY     #$03            ; index to variable pointer high byte
003492  1  B1 9C                LDA     (<func_l),Y     ; get variable pointer high byte
003494  1  F0 9D                BEQ     LAB_1FDB        ; if zero go do undefined function error
003496  1               
003496  1  85 96                STA     <Cvarah         ; save variable address high byte
003498  1  88                   DEY                     ; index to variable address low byte
003499  1  B1 9C                LDA     (<func_l),Y     ; get variable address low byte
00349B  1  85 95                STA     <Cvaral         ; save variable address low byte
00349D  1  AA                   TAX                     ; copy address low byte
00349E  1               
00349E  1               ; now stack the function variable value before use
00349E  1  C8                   INY                     ; index to mantissa_3
00349F  1               LAB_2043:
00349F  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from variable
0034A3  1  B5 95 C9 00  
0034A7  1  D0 04 A2 00  
0034B5  1  48                   PHA                     ; stack it
0034B6  1  88                   DEY                     ; decrement index
0034B7  1  10 E6                BPL     LAB_2043        ; loop until variable stacked
0034B9  1               
0034B9  1  A4 96                LDY     <Cvarah         ; get variable address high byte
0034BB  1  20 51 40             JSR     LAB_2778        ; pack FAC1 (function expression value) into (XY)
0034BE  1               ; (function variable), return Y=0, always
0034BE  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0034C0  1  48                   PHA                     ; push it
0034C1  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0034C3  1  48                   PHA                     ; push it
0034C4  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer low byte
0034C8  1  B5 9C C9 00  
0034CC  1  D0 04 A2 00  
0034DA  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
0034DC  1  C8                   INY                     ; index to high byte
0034DD  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer high byte
0034E1  1  B5 9C C9 00  
0034E5  1  D0 04 A2 00  
0034F3  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
0034F5  1  A5 96                LDA     <Cvarah         ; get variable address high byte
0034F7  1  48                   PHA                     ; push it
0034F8  1  A5 95                LDA     <Cvaral         ; get variable address low byte
0034FA  1  48                   PHA                     ; push it
0034FB  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0034FE  1               ; else do type mismatch
0034FE  1  68                   PLA                     ; pull variable address low byte
0034FF  1  85 9C                STA     <func_l         ; save variable address low byte
003501  1  68                   PLA                     ; pull variable address high byte
003502  1  85 9D                STA     <func_h         ; save variable address high byte
003504  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003508  1  F0 03                BEQ     LAB_2074        ; branch if null (should be [EOL] marker)
00350A  1               
00350A  1  4C 83 2F             JMP     LAB_SNER        ; else syntax error then warm start
00350D  1               
00350D  1               ; restore <Bpntrl,<Bpntrh and function variable from stack
00350D  1               
00350D  1               LAB_2074:
00350D  1  68                   PLA                     ; pull BASIC execute pointer low byte
00350E  1  85 C3                STA     <Bpntrl         ; restore BASIC execute pointer low byte
003510  1  68                   PLA                     ; pull BASIC execute pointer high byte
003511  1  85 C4                STA     <Bpntrh         ; restore BASIC execute pointer high byte
003513  1               
003513  1               ; put execute pointer and variable pointer into function
003513  1               
003513  1               LAB_207A:
003513  1  A0 00                LDY     #$00            ; clear index
003515  1  68                   PLA                     ; pull BASIC execute pointer low byte
003516  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
00351A  1  01 B5 9C C9  
00351E  1  00 D0 04 A2  
00352C  1  C8                   INY                     ; increment index
00352D  1  68                   PLA                     ; pull BASIC execute pointer high byte
00352E  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
003532  1  01 B5 9C C9  
003536  1  00 D0 04 A2  
003544  1  C8                   INY                     ; increment index
003545  1  68                   PLA                     ; pull current var address low byte
003546  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
00354A  1  01 B5 9C C9  
00354E  1  00 D0 04 A2  
00355C  1  C8                   INY                     ; increment index
00355D  1  68                   PLA                     ; pull current var address high byte
00355E  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
003562  1  01 B5 9C C9  
003566  1  00 D0 04 A2  
003574  1  60                   RTS
003575  1               
003575  1               ; perform STR$()
003575  1               
003575  1               LAB_STRS:
003575  1  20 4C 2E             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003578  1  20 11 43             JSR     LAB_296E        ; convert FAC1 to string
00357B  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
00357D  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
00357F  1  F0 12                BEQ     LAB_20AE        ; print null terminated string to <Sutill/<Sutilh
003581  1               
003581  1               ; Do string vector
003581  1               ; copy <des_pl/h to <des_2l/h and make string space A bytes long
003581  1               
003581  1               LAB_209C:
003581  1  A6 AE                LDX     <des_pl         ; get descriptor pointer low byte
003583  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003585  1  86 9E                STX     <des_2l         ; save descriptor pointer low byte
003587  1  84 9F                STY     <des_2h         ; save descriptor pointer high byte
003589  1               
003589  1               ; make string space A bytes long
003589  1               ; A=length, X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003589  1               
003589  1               LAB_MSSP:
003589  1  20 14 36             JSR     LAB_2115        ; make space in string memory for string A long
00358C  1               ; return X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
00358C  1  86 AD                STX     <str_pl         ; save string pointer low byte
00358E  1  84 AE                STY     <str_ph         ; save string pointer high byte
003590  1  85 AC                STA     <str_ln         ; save length
003592  1  60                   RTS
003593  1               
003593  1               ; Scan, set up string
003593  1               ; print " terminated string to <Sutill/<Sutilh
003593  1               
003593  1               LAB_20AE:
003593  1  A2 22                LDX     #$22            ; set terminator to "
003595  1  86 5B                STX     <Srchc          ; set search character (terminator 1)
003597  1  86 5C                STX     <Asrch          ; set terminator 2
003599  1               
003599  1               ; print [<Srchc] or [<Asrch] terminated string to <Sutill/<Sutilh
003599  1               ; source is AY
003599  1               
003599  1               LAB_20B4:
003599  1  85 B8                STA     <ssptr_l        ; store string start low byte
00359B  1  84 B9                STY     <ssptr_h        ; store string start high byte
00359D  1  85 AD                STA     <str_pl         ; save string pointer low byte
00359F  1  84 AE                STY     <str_ph         ; save string pointer high byte
0035A1  1  A0 FF                LDY     #$FF            ; set length to -1
0035A3  1               LAB_20BE:
0035A3  1  C8                   INY                     ; increment length
0035A4  1               
0035A4  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get byte from string
0035A8  1  B5 B8 C9 00  
0035AC  1  D0 04 A2 00  
0035BA  1  C9 00                CMP     #$00
0035BC  1  F0 0C                BEQ     LAB_20CF        ; exit loop if null byte [EOS]
0035BE  1               
0035BE  1  C5 5B                CMP     <Srchc          ; compare with search character (terminator 1)
0035C0  1  F0 04                BEQ     LAB_20CB        ; branch if terminator
0035C2  1               
0035C2  1  C5 5C                CMP     <Asrch          ; compare with terminator 2
0035C4  1  D0 DD                BNE     LAB_20BE        ; loop if not terminator 2
0035C6  1               
0035C6  1               LAB_20CB:
0035C6  1  C9 22                CMP     #$22            ; compare with "
0035C8  1  F0 01                BEQ     LAB_20D0        ; branch if " (carry set if = !)
0035CA  1               
0035CA  1               LAB_20CF:
0035CA  1  18                   CLC                     ; clear carry for add (only if [EOL] terminated string)
0035CB  1               LAB_20D0:
0035CB  1  84 AC                STY     <str_ln         ; save length in FAC1 exponent
0035CD  1  98                   TYA                     ; copy length to A
0035CE  1  65 B8                ADC     <ssptr_l        ; add string start low byte
0035D0  1  85 BA                STA     <Sendl          ; save string end low byte
0035D2  1  A6 B9                LDX     <ssptr_h        ; get string start high byte
0035D4  1  90 01                BCC     LAB_20DC        ; branch if no low byte overflow
0035D6  1               
0035D6  1  E8                   INX                     ; else increment high byte
0035D7  1               LAB_20DC:
0035D7  1  86 BB                STX     <Sendh          ; save string end high byte
0035D9  1  A5 B9                LDA     <ssptr_h        ; get string start high byte
0035DB  1               
0035DB  1               
0035DB  1               ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
0035DB  1               ; *** replace
0035DB  1               ;      CMP	#((BASICBEGIN&$FF00)>>8)  ; compare with BASICBEGIN, FORMERLY (>Ram_base) start of program memory
0035DB  1               ;      BCS   LAB_RTST          ; branch if not in utility area
0035DB  1               ; *** with
0035DB  1  F0 04                BEQ     LAB_MVST        ; fix STR$() using page zero via LAB_296E
0035DD  1  C9 21                CMP     #>Ibuffs        ; compare with location of input buffer page
0035DF  1  D0 0B                BNE     LAB_RTST        ; branch if not in utility area
0035E1  1               LAB_MVST:
0035E1  1               ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
0035E1  1               
0035E1  1               
0035E1  1  98                   TYA                     ; copy length to A
0035E2  1  20 81 35             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
0035E5  1               ; long
0035E5  1  A6 B8                LDX     <ssptr_l        ; get string start low byte
0035E7  1  A4 B9                LDY     <ssptr_h        ; get string start high byte
0035E9  1  20 29 38             JSR     LAB_2298        ; store string A bytes long from XY to (<Sutill)
0035EC  1               ; check for space on descriptor stack then ..
0035EC  1               ; put string address and length on descriptor stack and update stack pointers
0035EC  1               
0035EC  1               LAB_RTST:
0035EC  1  A6 65                LDX     <next_s         ; get string stack pointer
0035EE  1  E0 71                CPX     #<des_sk+$09    ; compare with max+1
0035F0  1  D0 05                BNE     LAB_20F8        ; branch if space on string stack
0035F2  1               
0035F2  1               ; else do string too complex error
0035F2  1  A2 1C                LDX     #$1C            ; error code $1C ("String too complex" error)
0035F4  1               LAB_20F5:
0035F4  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
0035F7  1               
0035F7  1               ; put string address and length on descriptor stack and update stack pointers
0035F7  1               
0035F7  1               LAB_20F8:
0035F7  1  A5 AC                LDA     <str_ln         ; get string length
0035F9  1  95 00                STA     <PLUS_0,X       ; put on string stack
0035FB  1  A5 AD                LDA     <str_pl         ; get string pointer low byte
0035FD  1  95 01                STA     <PLUS_1,X       ; put on string stack
0035FF  1  A5 AE                LDA     <str_ph         ; get string pointer high byte
003601  1  95 02                STA     <PLUS_2,X       ; put on string stack
003603  1  A0 00                LDY     #$00            ; clear Y
003605  1  86 AE                STX     <des_pl         ; save string descriptor pointer low byte
003607  1  84 AF                STY     <des_ph         ; save string descriptor pointer high byte (always $00)
003609  1  88                   DEY                     ; Y = $FF
00360A  1  84 5F                STY     <Dtypef         ; save data type flag, $FF=string
00360C  1  86 66                STX     <last_sl        ; save old stack pointer (current top item)
00360E  1  E8                   INX                     ; update stack pointer
00360F  1  E8                   INX                     ; update stack pointer
003610  1  E8                   INX                     ; update stack pointer
003611  1  86 65                STX     <next_s         ; save new top item value
003613  1  60                   RTS
003614  1               
003614  1               ; Build descriptor
003614  1               ; make space in string memory for string A long
003614  1               ; return X=<Sutill=ptr low byte, Y=<Sutill=ptr high byte
003614  1               
003614  1               LAB_2115:
003614  1  46 60                LSR     <Gclctd         ; clear garbage collected flag (b7)
003616  1               
003616  1               ; make space for string A long
003616  1               LAB_2117:
003616  1  48                   PHA                     ; save string length
003617  1  49 FF                EOR     #$FF            ; complement it
003619  1  38                   SEC                     ; set carry for subtract (twos comp add)
00361A  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte (subtract length)
00361C  1  A4 82                LDY     <Sstorh         ; get bottom of string space high byte
00361E  1  B0 01                BCS     LAB_2122        ; skip decrement if no underflow
003620  1               
003620  1  88                   DEY                     ; decrement bottom of string space high byte
003621  1               LAB_2122:
003621  1  C4 80                CPY     <Earryh         ; compare with array mem end high byte
003623  1  90 11                BCC     LAB_2137        ; do out of memory error if less
003625  1               
003625  1  D0 04                BNE     LAB_212C        ; if not = skip next test
003627  1               
003627  1  C5 7F                CMP     <Earryl         ; compare with array mem end low byte
003629  1  90 0B                BCC     LAB_2137        ; do out of memory error if less
00362B  1               
00362B  1               LAB_212C:
00362B  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
00362D  1  84 82                STY     <Sstorh         ; save bottom of string space high byte
00362F  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003631  1  84 84                STY     <Sutilh         ; save string utility ptr high byte
003633  1  AA                   TAX                     ; copy low byte to X
003634  1  68                   PLA                     ; get string length back
003635  1  60                   RTS
003636  1               
003636  1               LAB_2137:
003636  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
003638  1  A5 60                LDA     <Gclctd         ; get garbage collected flag
00363A  1  30 B8                BMI     LAB_20F5        ; if set then do error code X
00363C  1               
00363C  1  20 46 36             JSR     LAB_GARB        ; else go do garbage collection
00363F  1  A9 80                LDA     #$80            ; flag for garbage collected
003641  1  85 60                STA     <Gclctd         ; set garbage collected flag
003643  1  68                   PLA                     ; pull length
003644  1  D0 D0                BNE     LAB_2117        ; go try again (loop always, length should never be = $00)
003646  1               
003646  1               ; garbage collection routine
003646  1               
003646  1               LAB_GARB:
003646  1  A6 85                LDX     <Ememl          ; get end of mem low byte
003648  1  A5 86                LDA     <Ememh          ; get end of mem high byte
00364A  1               
00364A  1               ; re-run routine from last ending
00364A  1               
00364A  1               LAB_214B:
00364A  1  86 81                STX     <Sstorl         ; set string storage low byte
00364C  1  85 82                STA     <Sstorh         ; set string storage high byte
00364E  1  A0 00                LDY     #$00            ; clear index
003650  1  84 9D                STY     <garb_h         ; clear working pointer high byte (flag no strings to move)
003652  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
003654  1  A6 80                LDX     <Earryh         ; get array mem end high byte
003656  1  85 AA                STA     <Histrl         ; save as highest string low byte
003658  1  86 AB                STX     <Histrh         ; save as highest string high byte
00365A  1  A9 68                LDA     #<des_sk        ; set descriptor stack pointer
00365C  1  85 71                STA     <ut1_pl         ; save descriptor stack pointer low byte
00365E  1  84 72                STY     <ut1_ph         ; save descriptor stack pointer high byte ($00)
003660  1               LAB_2161:
003660  1  C5 65                CMP     <next_s         ; compare with descriptor stack pointer
003662  1  F0 05                BEQ     LAB_216A        ; branch if =
003664  1               
003664  1  20 CA 36             JSR     LAB_21D7        ; go garbage collect descriptor stack
003667  1  F0 F7                BEQ     LAB_2161        ; loop always
003669  1               
003669  1               ; done stacked strings, now do string vars
003669  1               LAB_216A:
003669  1  06 A0                ASL     <g_step         ; set step size = $06
00366B  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
00366D  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
00366F  1  85 71                STA     <ut1_pl         ; save as pointer low byte
003671  1  86 72                STX     <ut1_ph         ; save as pointer high byte
003673  1               LAB_2176:
003673  1  E4 7E                CPX     <Sarryh         ; compare start of arrays high byte
003675  1  D0 04                BNE     LAB_217E        ; branch if no high byte match
003677  1               
003677  1  C5 7D                CMP     <Sarryl         ; else compare start of arrays low byte
003679  1  F0 05                BEQ     LAB_2183        ; branch if = var mem end
00367B  1               
00367B  1               LAB_217E:
00367B  1  20 C4 36             JSR     LAB_21D1        ; go garbage collect strings
00367E  1  F0 F3                BEQ     LAB_2176        ; loop always
003680  1               
003680  1               ; done string vars, now do string arrays
003680  1               LAB_2183:
003680  1  85 A4                STA     <Nbendl         ; save start of arrays low byte as working pointer
003682  1  86 A5                STX     <Nbendh         ; save start of arrays high byte as working pointer
003684  1  A9 04                LDA     #$04            ; set step size
003686  1  85 A0                STA     <g_step         ; save step size
003688  1               LAB_218B:
003688  1  A5 A4                LDA     <Nbendl         ; get pointer low byte
00368A  1  A6 A5                LDX     <Nbendh         ; get pointer high byte
00368C  1               LAB_218F:
00368C  1  E4 80                CPX     <Earryh         ; compare with array mem end high byte
00368E  1  D0 04                BNE     LAB_219A        ; branch if not at end
003690  1               
003690  1  C5 7F                CMP     <Earryl         ; else compare with array mem end low byte
003692  1  F0 75                BEQ     LAB_2216        ; tidy up and exit if at end
003694  1               
003694  1               LAB_219A:
003694  1  85 71                STA     <ut1_pl         ; save pointer low byte
003696  1  86 72                STX     <ut1_ph         ; save pointer high byte
003698  1  A0 02                LDY     #$02            ; set index
00369A  1  B1 71                LDA     (<ut1_pl),Y     ; get array size low byte
00369C  1  65 A4                ADC     <Nbendl         ; add start of this array low byte
00369E  1  85 A4                STA     <Nbendl         ; save start of next array low byte
0036A0  1  C8                   INY                     ; increment index
0036A1  1  B1 71                LDA     (<ut1_pl),Y     ; get array size high byte
0036A3  1  65 A5                ADC     <Nbendh         ; add start of this array high byte
0036A5  1  85 A5                STA     <Nbendh         ; save start of next array high byte
0036A7  1  A0 01                LDY     #$01            ; set index
0036A9  1  B1 71                LDA     (<ut1_pl),Y     ; get name second byte
0036AB  1  10 DB                BPL     LAB_218B        ; skip if not string array
0036AD  1               
0036AD  1               ; was string array so ..
0036AD  1               
0036AD  1  A0 04                LDY     #$04            ; set index
0036AF  1  B1 71                LDA     (<ut1_pl),Y     ; get # of dimensions
0036B1  1  0A                   ASL     A               ; *2
0036B2  1  69 05                ADC     #$05            ; +5 (array header size)
0036B4  1  20 FC 36             JSR     LAB_2208        ; go set up for first element
0036B7  1               LAB_21C4:
0036B7  1  E4 A5                CPX     <Nbendh         ; compare with start of next array high byte
0036B9  1  D0 04                BNE     LAB_21CC        ; branch if <> (go do this array)
0036BB  1               
0036BB  1  C5 A4                CMP     <Nbendl         ; else compare element pointer low byte with next array
0036BD  1               ; low byte
0036BD  1  F0 CD                BEQ     LAB_218F        ; if equal then go do next array
0036BF  1               
0036BF  1               LAB_21CC:
0036BF  1  20 CA 36             JSR     LAB_21D7        ; go defrag array strings
0036C2  1  F0 F3                BEQ     LAB_21C4        ; go do next array string (loop always)
0036C4  1               
0036C4  1               ; defrag string variables
0036C4  1               ; enter with XA = variable pointer
0036C4  1               ; return with XA = next variable pointer
0036C4  1               
0036C4  1               LAB_21D1:
0036C4  1  C8                   INY                     ; increment index (Y was $00)
0036C5  1  B1 71                LDA     (<ut1_pl),Y     ; get var name byte 2
0036C7  1  10 30                BPL     LAB_2206        ; if not string, step pointer to next var and return
0036C9  1               
0036C9  1  C8                   INY                     ; else increment index
0036CA  1               LAB_21D7:
0036CA  1  B1 71                LDA     (<ut1_pl),Y     ; get string length
0036CC  1  F0 2B                BEQ     LAB_2206        ; if null, step pointer to next string and return
0036CE  1               
0036CE  1  C8                   INY                     ; else increment index
0036CF  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer low byte
0036D1  1  AA                   TAX                     ; copy to X
0036D2  1  C8                   INY                     ; increment index
0036D3  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer high byte
0036D5  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
0036D7  1  90 06                BCC     LAB_21EC        ; branch if less
0036D9  1               
0036D9  1  D0 1E                BNE     LAB_2206        ; if greater, step pointer to next string and return
0036DB  1               
0036DB  1               ; high bytes were = so compare low bytes
0036DB  1  E4 81                CPX     <Sstorl         ; compare bottom of string space low byte
0036DD  1  B0 1A                BCS     LAB_2206        ; if >=, step pointer to next string and return
0036DF  1               
0036DF  1               ; string pointer is < string storage pointer (pos in mem)
0036DF  1               LAB_21EC:
0036DF  1  C5 AB                CMP     <Histrh         ; compare to highest string high byte
0036E1  1  90 17                BCC     LAB_2207        ; if <, step pointer to next string and return
0036E3  1               
0036E3  1  D0 04                BNE     LAB_21F6        ; if > update pointers, step to next and return
0036E5  1               
0036E5  1               ; high bytes were = so compare low bytes
0036E5  1  E4 AA                CPX     <Histrl         ; compare to highest string low byte
0036E7  1  90 11                BCC     LAB_2207        ; if <, step pointer to next string and return
0036E9  1               
0036E9  1               ; string is in string memory space
0036E9  1               LAB_21F6:
0036E9  1  86 AA                STX     <Histrl         ; save as new highest string low byte
0036EB  1  85 AB                STA     <Histrh         ; save as new highest string high byte
0036ED  1  A5 71                LDA     <ut1_pl         ; get start of vars(descriptors) low byte
0036EF  1  A6 72                LDX     <ut1_ph         ; get start of vars(descriptors) high byte
0036F1  1  85 9C                STA     <garb_l         ; save as working pointer low byte
0036F3  1  86 9D                STX     <garb_h         ; save as working pointer high byte
0036F5  1  88                   DEY                     ; decrement index DIFFERS
0036F6  1  88                   DEY                     ; decrement index (should point to descriptor start)
0036F7  1  84 A2                STY     <g_indx         ; save index pointer
0036F9  1               
0036F9  1               ; step pointer to next string
0036F9  1               LAB_2206:
0036F9  1  18                   CLC                     ; clear carry for add
0036FA  1               LAB_2207:
0036FA  1  A5 A0                LDA     <g_step         ; get step size
0036FC  1               LAB_2208:
0036FC  1  65 71                ADC     <ut1_pl         ; add pointer low byte
0036FE  1  85 71                STA     <ut1_pl         ; save pointer low byte
003700  1  90 02                BCC     LAB_2211        ; branch if no overflow
003702  1               
003702  1  E6 72                INC     <ut1_ph         ; else increment high byte
003704  1               LAB_2211:
003704  1  A6 72                LDX     <ut1_ph         ; get pointer high byte
003706  1  A0 00                LDY     #$00            ; clear Y
003708  1  60                   RTS
003709  1               
003709  1               ; search complete, now either exit or set-up and move string
003709  1               
003709  1               LAB_2216:
003709  1  C6 A0                DEC     <g_step         ; decrement step size (now $03 for descriptor stack)
00370B  1  A6 9D                LDX     <garb_h         ; get string to move high byte
00370D  1  F0 F5                BEQ     LAB_2211        ; exit if nothing to move
00370F  1               
00370F  1  A4 A2                LDY     <g_indx         ; get index byte back (points to descriptor)
003711  1  18                   CLC                     ; clear carry for add
003712  1  8B DA A2 01          LDAINDIRECTY garb_l     ; get string length
003716  1  B5 9C C9 00  
00371A  1  D0 04 A2 00  
003728  1  65 AA                ADC     <Histrl         ; add highest string low byte
00372A  1  85 A6                STA     <Obendl         ; save old block end low pointer
00372C  1  A5 AB                LDA     <Histrh         ; get highest string high byte
00372E  1  69 00                ADC     #$00            ; add any carry
003730  1  85 A7                STA     <Obendh         ; save old block end high byte
003732  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003734  1  A6 82                LDX     <Sstorh         ; get bottom of string space high byte
003736  1  85 A4                STA     <Nbendl         ; save new block end low byte
003738  1  86 A5                STX     <Nbendh         ; save new block end high byte
00373A  1  20 48 22             JSR     LAB_11D6        ; open up space in memory, don't set array end
00373D  1  A4 A2                LDY     <g_indx         ; get index byte
00373F  1  C8                   INY                     ; point to descriptor low byte
003740  1  A5 A4                LDA     <Nbendl         ; get string pointer low byte
003742  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer low byte
003746  1  01 B5 9C C9  
00374A  1  00 D0 04 A2  
003758  1  AA                   TAX                     ; copy string pointer low byte
003759  1  E6 A5                INC     <Nbendh         ; correct high byte (move sets high byte -1)
00375B  1  A5 A5                LDA     <Nbendh         ; get new string pointer high byte
00375D  1  C8                   INY                     ; point to descriptor high byte
00375E  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer high byte
003762  1  01 B5 9C C9  
003766  1  00 D0 04 A2  
003774  1  4C 4A 36             JMP     LAB_214B        ; re-run routine from last ending
003777  1               ; (but don't collect this string)
003777  1               
003777  1               ; concatenate
003777  1               ; add strings, string 1 is in descriptor <des_pl, string 2 is in line
003777  1               
003777  1               LAB_224D:
003777  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003779  1  48                   PHA                     ; put on stack
00377A  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
00377C  1  48                   PHA                     ; put on stack
00377D  1  20 4B 2F             JSR     LAB_GVAL        ; get value from line
003780  1  20 4E 2E             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003783  1  68                   PLA                     ; get descriptor pointer low byte back
003784  1  85 B8                STA     <ssptr_l        ; set pointer low byte
003786  1  68                   PLA                     ; get descriptor pointer high byte back
003787  1  85 B9                STA     <ssptr_h        ; set pointer high byte
003789  1  A0 00                LDY     #$00            ; clear index
00378B  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get length_1 from descriptor
00378F  1  B5 B8 C9 00  
003793  1  D0 04 A2 00  
0037A1  1  18                   CLC                     ; clear carry for add
0037A2  1  8B 48 DA A2          ADCINDIRECTY des_pl     ; add length_2
0037A6  1  01 B5 AE C9  
0037AA  1  00 D0 04 A2  
0037BB  1  90 05                BCC     LAB_226D        ; branch if no overflow
0037BD  1               
0037BD  1  A2 1A                LDX     #$1A            ; else set error code $1A ("String too long" error)
0037BF  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
0037C2  1               
0037C2  1               LAB_226D:
0037C2  1  20 81 35             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
0037C5  1               ; long
0037C5  1  20 DF 37             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
0037C8  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
0037CA  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
0037CC  1  20 74 38             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0037CF  1               ; returns with A = length, <ut1_pl = pointer low byte,
0037CF  1               ; <ut1_ph = pointer high byte
0037CF  1  20 2D 38             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
0037D2  1  A5 B8                LDA     <ssptr_l        ;.set descriptor pointer low byte
0037D4  1  A4 B9                LDY     <ssptr_h        ;.set descriptor pointer high byte
0037D6  1  20 74 38             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
0037D9  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
0037D9  1               ; Y=<ut1_ph=pointer high byte
0037D9  1  20 EC 35             JSR     LAB_RTST        ; check for space on descriptor stack then put string
0037DC  1               ; address and length on descriptor stack and update stack
0037DC  1               ; pointers
0037DC  1  4C 74 2E             JMP     LAB_1ADB        ;.continue evaluation
0037DF  1               
0037DF  1               ; copy string from descriptor (<sdescr) to (<Sutill)
0037DF  1               
0037DF  1               LAB_228A:
0037DF  1  A0 00                LDY     #$00            ; clear index
0037E1  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get string length
0037E5  1  B5 B8 C9 00  
0037E9  1  D0 04 A2 00  
0037F7  1  48                   PHA                     ; save on stack
0037F8  1  C8                   INY                     ; increment index
0037F9  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer low byte
0037FD  1  B5 B8 C9 00  
003801  1  D0 04 A2 00  
00380F  1  AA                   TAX                     ; copy to X
003810  1  C8                   INY                     ; increment index
003811  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer high byte
003815  1  B5 B8 C9 00  
003819  1  D0 04 A2 00  
003827  1  A8                   TAY                     ; copy to Y
003828  1  68                   PLA                     ; get length back
003829  1               
003829  1               ; store string A bytes long from YX to (<Sutill)
003829  1               
003829  1               LAB_2298:
003829  1  86 71                STX     <ut1_pl         ; save source string pointer low byte
00382B  1  84 72                STY     <ut1_ph         ; save source string pointer high byte
00382D  1               
00382D  1               ; store string A bytes long from (<ut1_pl) to (<Sutill)
00382D  1               
00382D  1               LAB_229C:
00382D  1  AA                   TAX                     ; copy length to index (don't count with Y)
00382E  1  F0 3C                BEQ     LAB_22B2        ; branch if = $0 (null string) no need to add zero length
003830  1               
003830  1  A0 00                LDY     #$00            ; zero pointer (copy forward)
003832  1               LAB_22A0:
003832  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get source byte
003836  1  B5 71 C9 00  
00383A  1  D0 04 A2 00  
003848  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save destination byte
00384C  1  01 B5 83 C9  
003850  1  00 D0 04 A2  
00385E  1               
00385E  1  C8                   INY                     ; increment index
00385F  1  CA                   DEX                     ; decrement counter
003860  1  D0 D0                BNE     LAB_22A0        ; loop while <> 0
003862  1               
003862  1  98                   TYA                     ; restore length from Y
003863  1               LAB_22A9:
003863  1  18                   CLC                     ; clear carry for add
003864  1  65 83                ADC     <Sutill         ; add string utility ptr low byte
003866  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003868  1  90 02                BCC     LAB_22B2        ; branch if no carry
00386A  1               
00386A  1  E6 84                INC     <Sutilh         ; else increment string utility ptr high byte
00386C  1               LAB_22B2:
00386C  1  60                   RTS
00386D  1               
00386D  1               ; evaluate string
00386D  1               
00386D  1               LAB_EVST:
00386D  1  20 4E 2E             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003870  1               
003870  1               ; pop string off descriptor stack, or from top of string space
003870  1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
003870  1               
003870  1               LAB_22B6:
003870  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003872  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003874  1               
003874  1               ; pop (YA) descriptor off stack or from top of string space
003874  1               ; returns with A = length, X=<ut1_pl=pointer low byte, Y=<ut1_ph=pointer high byte
003874  1               
003874  1               LAB_22BA:
003874  1  85 71                STA     <ut1_pl         ; save descriptor pointer low byte
003876  1  84 72                STY     <ut1_ph         ; save descriptor pointer high byte
003878  1  20 E1 38             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
00387B  1  08                   PHP                     ; save status flags
00387C  1  A0 00                LDY     #$00            ; clear index
00387E  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get length from string descriptor
003882  1  B5 71 C9 00  
003886  1  D0 04 A2 00  
003894  1  48                   PHA                     ; put on stack
003895  1  C8                   INY                     ; increment index
003896  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte from descriptor
00389A  1  B5 71 C9 00  
00389E  1  D0 04 A2 00  
0038AC  1  AA                   TAX                     ; copy to X
0038AD  1  C8                   INY                     ; increment index
0038AE  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte from descriptor
0038B2  1  B5 71 C9 00  
0038B6  1  D0 04 A2 00  
0038C4  1  A8                   TAY                     ; copy to Y
0038C5  1  68                   PLA                     ; get string length back
0038C6  1  28                   PLP                     ; restore status
0038C7  1  D0 13                BNE     LAB_22E6        ; branch if pointer <> <last_sl,<last_sh
0038C9  1               
0038C9  1  C4 82                CPY     <Sstorh         ; compare bottom of string space high byte
0038CB  1  D0 0F                BNE     LAB_22E6        ; branch if <>
0038CD  1               
0038CD  1  E4 81                CPX     <Sstorl         ; else compare bottom of string space low byte
0038CF  1  D0 0B                BNE     LAB_22E6        ; branch if <>
0038D1  1               
0038D1  1  48                   PHA                     ; save string length
0038D2  1  18                   CLC                     ; clear carry for add
0038D3  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte
0038D5  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
0038D7  1  90 02                BCC     LAB_22E5        ; skip increment if no overflow
0038D9  1               
0038D9  1  E6 82                INC     <Sstorh         ; increment bottom of string space high byte
0038DB  1               LAB_22E5:
0038DB  1  68                   PLA                     ; restore string length
0038DC  1               LAB_22E6:
0038DC  1  86 71                STX     <ut1_pl         ; save string pointer low byte
0038DE  1  84 72                STY     <ut1_ph         ; save string pointer high byte
0038E0  1  60                   RTS
0038E1  1               
0038E1  1               ; clean descriptor stack, YA = pointer
0038E1  1               ; checks if AY is on the descriptor stack, if so does a stack discard
0038E1  1               
0038E1  1               LAB_22EB:
0038E1  1  C4 67                CPY     <last_sh        ; compare pointer high byte
0038E3  1  D0 0C                BNE     LAB_22FB        ; exit if <>
0038E5  1               
0038E5  1  C5 66                CMP     <last_sl        ; compare pointer low byte
0038E7  1  D0 08                BNE     LAB_22FB        ; exit if <>
0038E9  1               
0038E9  1  85 65                STA     <next_s         ; save descriptor stack pointer
0038EB  1  E9 03                SBC     #$03            ; -3
0038ED  1  85 66                STA     <last_sl        ; save low byte -3
0038EF  1  A0 00                LDY     #$00            ; clear high byte
0038F1  1               LAB_22FB:
0038F1  1  60                   RTS
0038F2  1               
0038F2  1               ; perform CHR$()
0038F2  1               
0038F2  1               LAB_CHRS:
0038F2  1  20 FC 3A             JSR     LAB_EVBY        ; evaluate byte expression, result in X
0038F5  1  8A                   TXA                     ; copy to A
0038F6  1  48                   PHA                     ; save character
0038F7  1  A9 01                LDA     #$01            ; string is single byte
0038F9  1  20 89 35             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
0038FC  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
0038FC  1  68                   PLA                     ; get character back
0038FD  1  A0 00                LDY     #$00            ; clear index
0038FF  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
003903  1  01 B5 AD C9  
003907  1  00 D0 04 A2  
003915  1  4C EC 35             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003918  1               ; address and length on descriptor stack and update stack
003918  1               ; pointers
003918  1               
003918  1               ; perform LEFT$()
003918  1               
003918  1               LAB_LEFT:
003918  1  48                   PHA                     ; push byte parameter
003919  1  20 D0 39             JSR     LAB_236F        ; pull string data and byte parameter from stack
00391C  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
00391C  1  8B 48 DA A2          CMPINDIRECTY des_2l     ; compare byte parameter with string length
003920  1  01 B5 9E C9  
003924  1  00 D0 04 A2  
003934  1  98                   TYA                     ; clear A
003935  1  F0 1F                BEQ     LAB_2316        ; go do string copy (branch always)
003937  1               
003937  1               ; perform RIGHT$()
003937  1               
003937  1               LAB_RIGHT:
003937  1  48                   PHA                     ; push byte parameter
003938  1  20 D0 39             JSR     LAB_236F        ; pull string data and byte parameter from stack
00393B  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
00393B  1  8B 48 DA A2          FETCHINDIRECTY des_2l   ; subtract string length
00393F  1  01 B5 9E C9  
003943  1  00 D0 04 A2  
003951  1  18                   CLC                     ; clear carry for add-1
003952  1  E5 04                SBC     <TMPFLG         ; REDO SBC WITH CARRY CLEARED (ARTIFACT FROM 816 CONVERSION)
003954  1  49 FF                EOR     #$FF            ; invert it (A=LEN(expression$)-l)
003956  1               
003956  1               LAB_2316:
003956  1  90 18                BCC     LAB_231C        ; branch if string length > byte parameter
003958  1               
003958  1  8B DA A2 01          LDAINDIRECTY des_2l     ; else make parameter = length
00395C  1  B5 9E C9 00  
003960  1  D0 04 A2 00  
00396E  1  AA                   TAX                     ; copy to byte parameter copy
00396F  1  98                   TYA                     ; clear string start offset
003970  1               LAB_231C:
003970  1  48                   PHA                     ; save string start offset
003971  1               LAB_231D:
003971  1  8A                   TXA                     ; copy byte parameter (or string length if <)
003972  1               LAB_231E:
003972  1  48                   PHA                     ; save string length
003973  1  20 89 35             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003976  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003976  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003978  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
00397A  1  20 74 38             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
00397D  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
00397D  1               ; Y=<ut1_ph=pointer high byte
00397D  1  68                   PLA                     ; get string length back
00397E  1  A8                   TAY                     ; copy length to Y
00397F  1  68                   PLA                     ; get string start offset back
003980  1  18                   CLC                     ; clear carry for add
003981  1  65 71                ADC     <ut1_pl         ; add start offset to string start pointer low byte
003983  1  85 71                STA     <ut1_pl         ; save string start pointer low byte
003985  1  90 02                BCC     LAB_2335        ; branch if no overflow
003987  1               
003987  1  E6 72                INC     <ut1_ph         ; else increment string start pointer high byte
003989  1               LAB_2335:
003989  1  98                   TYA                     ; copy length to A
00398A  1  20 2D 38             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
00398D  1  4C EC 35             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003990  1               ; address and length on descriptor stack and update stack
003990  1               ; pointers
003990  1               
003990  1               ; perform MID$()
003990  1               
003990  1               LAB_MIDS:
003990  1  48                   PHA                     ; push byte parameter
003991  1  A9 FF                LDA     #$FF            ; set default length = 255
003993  1  85 AF                STA     <mids_l         ; save default length
003995  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003999  1  C9 29                CMP     #')'            ; compare with ")"
00399B  1  F0 06                BEQ     LAB_2358        ; branch if = ")" (skip second byte get)
00399D  1               
00399D  1  20 7F 2F             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
0039A0  1  20 F9 3A             JSR     LAB_GTBY        ; get byte parameter (use copy in <mids_l)
0039A3  1               LAB_2358:
0039A3  1  20 D0 39             JSR     LAB_236F        ; pull string data and byte parameter from stack
0039A6  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
0039A6  1  CA                   DEX                     ; decrement start index
0039A7  1  8A                   TXA                     ; copy to A
0039A8  1  48                   PHA                     ; save string start offset
0039A9  1  8B 48 DA A2          FETCHINDIRECTY des_2l
0039AD  1  01 B5 9E C9  
0039B1  1  00 D0 04 A2  
0039BF  1  18                   CLC                     ; clear carry for sub-1
0039C0  1  A2 00                LDX     #$00            ; clear output string length
0039C2  1  E5 04                SBC     <TMPFLG         ; subtract string length
0039C4  1  B0 AB                BCS     LAB_231D        ; if start>string length go do null string
0039C6  1               
0039C6  1  49 FF                EOR     #$FF            ; complement -length
0039C8  1  C5 AF                CMP     <mids_l         ; compare byte parameter
0039CA  1  90 A6                BCC     LAB_231E        ; if length>remaining string go do RIGHT$
0039CC  1               
0039CC  1  A5 AF                LDA     <mids_l         ; get length byte
0039CE  1  B0 A2                BCS     LAB_231E        ; go do string copy (branch always)
0039D0  1               
0039D0  1               ; pull string data and byte parameter from stack
0039D0  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
0039D0  1               
0039D0  1               LAB_236F:
0039D0  1  20 6E 2F             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0039D3  1  68                   PLA                     ; pull return address low byte (return address)
0039D4  1  85 A2                STA     <Fnxjpl         ; save functions jump vector low byte
0039D6  1  68                   PLA                     ; pull return address high byte (return address)
0039D7  1  85 A3                STA     <Fnxjph         ; save functions jump vector high byte
0039D9  1  68                   PLA                     ; pull byte parameter
0039DA  1  AA                   TAX                     ; copy byte parameter to X
0039DB  1  68                   PLA                     ; pull string pointer low byte
0039DC  1  85 9E                STA     <des_2l         ; save it
0039DE  1  68                   PLA                     ; pull string pointer high byte
0039DF  1  85 9F                STA     <des_2h         ; save it
0039E1  1  A0 00                LDY     #$00            ; clear index
0039E3  1  8A                   TXA                     ; copy byte parameter
0039E4  1  D0 03 4C F2          LBEQ    LAB_23A8        ; if null do function call error then warm start
0039E8  1  3A           
0039E9  1               
0039E9  1  E6 A2                INC     <Fnxjpl         ; increment function jump vector low byte
0039EB  1               ; (JSR pushes return addr-1. this is all very nice
0039EB  1               ; but will go tits up if either call is on a page
0039EB  1               ; boundary!)
0039EB  1  6C A2 00             JMP     (Fnxjpl)        ; in effect, RTS
0039EE  1               
0039EE  1               ; perform LCASE$()
0039EE  1               
0039EE  1               LAB_LCASE:
0039EE  1  20 6D 38             JSR     LAB_EVST        ; evaluate string
0039F1  1  85 AC                STA     <str_ln         ; set string length
0039F3  1  A8                   TAY                     ; copy length to Y
0039F4  1  D0 03 4C 81          LBEQ    NoString        ; branch if null string
0039F8  1  3A           
0039F9  1               
0039F9  1  20 89 35             JSR     LAB_MSSP        ; make string space A bytes long A=length,
0039FC  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
0039FC  1  86 AD                STX     <str_pl         ; save string pointer low byte
0039FE  1  84 AE                STY     <str_ph         ; save string pointer high byte
003A00  1  A8                   TAY                     ; get string length back
003A01  1               
003A01  1               LC_loop:
003A01  1  88                   DEY                     ; decrement index
003A02  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003A06  1  B5 71 C9 00  
003A0A  1  D0 04 A2 00  
003A18  1  20 D6 31             JSR     LAB_1D82        ; is character "A" to "Z"
003A1B  1  90 02                BCC     NoUcase         ; branch if not upper case alpha
003A1D  1               
003A1D  1  09 20                ORA     #$20            ; convert upper to lower case
003A1F  1               NoUcase:
003A1F  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003A23  1  01 B5 83 C9  
003A27  1  00 D0 04 A2  
003A35  1  98                   TYA                     ; test index
003A36  1  D0 C9                BNE     LC_loop         ; loop if not all done
003A38  1               
003A38  1  F0 47                BEQ     NoString        ; tidy up and exit, branch always
003A3A  1               
003A3A  1               ; perform UCASE$()
003A3A  1               
003A3A  1               LAB_UCASE:
003A3A  1  20 6D 38             JSR     LAB_EVST        ; evaluate string
003A3D  1  85 AC                STA     <str_ln         ; set string length
003A3F  1  A8                   TAY                     ; copy length to Y
003A40  1  F0 3F                BEQ     NoString        ; branch if null string
003A42  1               
003A42  1  20 89 35             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003A45  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003A45  1  86 AD                STX     <str_pl         ; save string pointer low byte
003A47  1  84 AE                STY     <str_ph         ; save string pointer high byte
003A49  1  A8                   TAY                     ; get string length back
003A4A  1               
003A4A  1               UC_loop:
003A4A  1  88                   DEY                     ; decrement index
003A4B  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003A4F  1  B5 71 C9 00  
003A53  1  D0 04 A2 00  
003A61  1  20 D2 31             JSR     LAB_CASC        ; is character "a" to "z" (or "A" to "Z")
003A64  1  90 02                BCC     NoLcase         ; branch if not alpha
003A66  1               
003A66  1  29 DF                AND     #$DF            ; convert lower to upper case
003A68  1               NoLcase:
003A68  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003A6C  1  01 B5 83 C9  
003A70  1  00 D0 04 A2  
003A7E  1  98                   TYA                     ; test index
003A7F  1  D0 C9                BNE     UC_loop         ; loop if not all done
003A81  1               
003A81  1               NoString:
003A81  1  4C EC 35             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003A84  1               ; address and length on descriptor stack and update stack
003A84  1               ; pointers
003A84  1               
003A84  1               ; perform SADD()
003A84  1               
003A84  1               LAB_SADD:
003A84  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003A88  1  20 5A 31             JSR     LAB_GVAR        ; get var address
003A8B  1               
003A8B  1  20 6E 2F             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003A8E  1  20 4E 2E             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003A91  1               
003A91  1  A0 02                LDY     #$02            ; index to string pointer high byte
003A93  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer high byte
003A97  1  B5 95 C9 00  
003A9B  1  D0 04 A2 00  
003AA9  1  AA                   TAX                     ; copy string pointer high byte to X
003AAA  1  88                   DEY                     ; index to string pointer low byte
003AAB  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer low byte
003AAF  1  B5 95 C9 00  
003AB3  1  D0 04 A2 00  
003AC1  1  A8                   TAY                     ; copy string pointer low byte to Y
003AC2  1  8A                   TXA                     ; copy string pointer high byte to A
003AC3  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003AC6  1               
003AC6  1               ; perform LEN()
003AC6  1               
003AC6  1               LAB_LENS:
003AC6  1  20 CC 3A             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003AC9  1  4C 25 34             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003ACC  1               
003ACC  1               ; evaluate string, get length in Y
003ACC  1               
003ACC  1               LAB_ESGL:
003ACC  1  20 6D 38             JSR     LAB_EVST        ; evaluate string
003ACF  1  A8                   TAY                     ; copy length to Y
003AD0  1  60                   RTS
003AD1  1               
003AD1  1               ; perform ASC()
003AD1  1               
003AD1  1               LAB_ASC:
003AD1  1  20 CC 3A             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003AD4  1  F0 1C                BEQ     LAB_23A8        ; if null do function call error then warm start
003AD6  1               
003AD6  1  A0 00                LDY     #$00            ; set index to first character
003AD8  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
003ADC  1  B5 71 C9 00  
003AE0  1  D0 04 A2 00  
003AEE  1  A8                   TAY                     ; copy to Y
003AEF  1  4C 25 34             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003AF2  1               
003AF2  1               ; do function call error then warm start
003AF2  1               
003AF2  1               LAB_23A8:
003AF2  1  4C E2 32             JMP     LAB_FCER        ; do function call error then warm start
003AF5  1               
003AF5  1               ; scan and get byte parameter
003AF5  1               
003AF5  1               LAB_SGBY:
003AF5  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003AF9  1               
003AF9  1               ; get byte parameter
003AF9  1               
003AF9  1               LAB_GTBY:
003AF9  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003AFC  1               ; else do type mismatch
003AFC  1               
003AFC  1               ; evaluate byte expression, result in X
003AFC  1               
003AFC  1               LAB_EVBY:
003AFC  1  20 57 32             JSR     LAB_EVPI        ; evaluate integer expression (no check)
003AFF  1               
003AFF  1  A4 AE                LDY     <FAC1_2         ; get FAC1 mantissa2
003B01  1  D0 EF                BNE     LAB_23A8        ; if top byte <> 0 do function call error then warm start
003B03  1               
003B03  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
003B05  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003B09  1  60                   RTS
003B0A  1               
003B0A  1               ; perform VAL()
003B0A  1               
003B0A  1               LAB_VAL:
003B0A  1  20 CC 3A             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003B0D  1  D0 03                BNE     LAB_23C5        ; branch if not null string
003B0F  1               
003B0F  1               ; string was null so set result = $00
003B0F  1  4C 5A 3D             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
003B12  1               
003B12  1               LAB_23C5:
003B12  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
003B14  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003B16  1  86 BA                STX     <Btmpl          ; save BASIC execute pointer low byte
003B18  1  84 BB                STY     <Btmph          ; save BASIC execute pointer high byte
003B1A  1  A6 71                LDX     <ut1_pl         ; get string pointer low byte
003B1C  1  86 C3                STX     <Bpntrl         ; save as BASIC execute pointer low byte
003B1E  1  18                   CLC                     ; clear carry
003B1F  1  65 71                ADC     <ut1_pl         ; add string length
003B21  1  85 73                STA     <ut2_pl         ; save string end low byte
003B23  1  A5 72                LDA     <ut1_ph         ; get string pointer high byte
003B25  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003B27  1  69 00                ADC     #$00            ; add carry to high byte
003B29  1  85 74                STA     <ut2_ph         ; save string end high byte
003B2B  1  A0 00                LDY     #$00            ; set index to $00
003B2D  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get string end +1 byte
003B31  1  B5 73 C9 00  
003B35  1  D0 04 A2 00  
003B43  1  48                   PHA                     ; push it
003B44  1  98                   TYA                     ; clear A
003B45  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; terminate string with $00
003B49  1  01 B5 73 C9  
003B4D  1  00 D0 04 A2  
003B5B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003B5F  1  20 04 42             JSR     LAB_2887        ; get FAC1 from string
003B62  1  68                   PLA                     ; restore string end +1 byte
003B63  1  A0 00                LDY     #$00            ; set index to zero
003B65  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; put string end byte back
003B69  1  01 B5 73 C9  
003B6D  1  00 D0 04 A2  
003B7B  1               
003B7B  1               ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
003B7B  1               
003B7B  1               LAB_23F3:
003B7B  1  A6 BA                LDX     <Btmpl          ; get BASIC execute pointer low byte back
003B7D  1  A4 BB                LDY     <Btmph          ; get BASIC execute pointer high byte back
003B7F  1  86 C3                STX     <Bpntrl         ; save BASIC execute pointer low byte
003B81  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
003B83  1  60                   RTS
003B84  1               
003B84  1               ; get two parameters for POKE or WAIT
003B84  1               
003B84  1               LAB_GADB:
003B84  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003B87  1               ; else do type mismatch
003B87  1  20 9D 3B             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003B8A  1               
003B8A  1               ; scan for "," and get byte, else do Syntax error then warm start
003B8A  1               
003B8A  1               LAB_SCGB:
003B8A  1  20 7F 2F             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003B8D  1  A5 12                LDA     <Itemph         ; save temporary integer high byte
003B8F  1  48                   PHA                     ; on stack
003B90  1  A5 11                LDA     <Itempl         ; save temporary integer low byte
003B92  1  48                   PHA                     ; on stack
003B93  1  20 F9 3A             JSR     LAB_GTBY        ; get byte parameter
003B96  1  68                   PLA                     ; pull low byte
003B97  1  85 11                STA     <Itempl         ; restore temporary integer low byte
003B99  1  68                   PLA                     ; pull high byte
003B9A  1  85 12                STA     <Itemph         ; restore temporary integer high byte
003B9C  1  60                   RTS
003B9D  1               
003B9D  1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
003B9D  1               ; -ve and converts it into a right truncated integer in <Itempl and <Itemph
003B9D  1               
003B9D  1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
003B9D  1               
003B9D  1               LAB_F2FX:
003B9D  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003B9F  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
003BA1  1  B0 03                BCS     LAB_23A8_1      ; do function call error then warm start
003BA3  1  4C A9 3B             JMP     LAB_F2FU
003BA6  1               LAB_23A8_1:
003BA6  1  4C F2 3A             JMP     LAB_23A8
003BA9  1               LAB_F2FU:
003BA9  1  20 AE 41             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
003BAC  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003BAE  1  A4 AF                LDY     <FAC1_3         ; get FAC1 mantissa3
003BB0  1  84 11                STY     <Itempl         ; save temporary integer low byte
003BB2  1  85 12                STA     <Itemph         ; save temporary integer high byte
003BB4  1  60                   RTS
003BB5  1               
003BB5  1               ; perform PEEK()
003BB5  1               
003BB5  1               LAB_PEEK:
003BB5  1  20 9D 3B             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003BB8  1  A2 00                LDX     #$00            ; clear index
003BBA  1  8B                   PHB
003BBB  1  DA A2 00 DA          SETBANK 0
003BBF  1  AB FA        
003BC1  1  A1 11                LDA     (<Itempl,X)     ; get byte via temporary integer (addr)
003BC3  1  AB                   PLB
003BC4  1  A8                   TAY                     ; copy byte to Y
003BC5  1  4C 25 34             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003BC8  1               
003BC8  1               ; perform POKE
003BC8  1               
003BC8  1               LAB_POKE:
003BC8  1  20 84 3B             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003BCB  1  8A                   TXA                     ; copy byte argument to A
003BCC  1  A2 00                LDX     #$00            ; clear index
003BCE  1  8B                   PHB
003BCF  1  DA A2 00 DA          SETBANK 0
003BD3  1  AB FA        
003BD5  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
003BD7  1  AB                   PLB
003BD8  1  60                   RTS
003BD9  1               
003BD9  1               ; perform SYS
003BD9  1               
003BD9  1               LAB_SYS:
003BD9  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003BDC  1               ; else do type mismatch
003BDC  1  20 9D 3B             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003BDF  1               
003BDF  1  A5 11                LDA     <Itempl
003BE1  1  85 0B                STA     <Usrjpl
003BE3  1  A5 12                LDA     <Itemph
003BE5  1  85 0C                STA     <Usrjph
003BE7  1  22 0A 00 00          JSL     Usrjmp
003BEB  1  60                   RTS
003BEC  1               
003BEC  1               ; perform SWAP
003BEC  1               
003BEC  1               LAB_SWAP:
003BEC  1  20 5A 31             JSR     LAB_GVAR        ; get var1 address
003BEF  1  85 97                STA     <Lvarpl         ; save var1 address low byte
003BF1  1  84 98                STY     <Lvarph         ; save var1 address high byte
003BF3  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003BF5  1  48                   PHA                     ; save data type flag
003BF6  1               
003BF6  1  20 7F 2F             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003BF9  1  20 5A 31             JSR     LAB_GVAR        ; get var2 address (pointer in <Cvaral/h)
003BFC  1  68                   PLA                     ; pull var1 data type flag
003BFD  1  45 5F                EOR     <Dtypef         ; compare with var2 data type
003BFF  1  10 60                BPL     SwapErr         ; exit if not both the same type
003C01  1               
003C01  1  A0 03                LDY     #$03            ; four bytes to swap (either value or descriptor+1)
003C03  1               SwapLp:
003C03  1  8B DA A2 01          LDAINDIRECTY Lvarpl     ; get byte from var1
003C07  1  B5 97 C9 00  
003C0B  1  D0 04 A2 00  
003C19  1  AA                   TAX                     ; save var1 byte
003C1A  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from var2
003C1E  1  B5 95 C9 00  
003C22  1  D0 04 A2 00  
003C30  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; save byte to var1
003C34  1  01 B5 97 C9  
003C38  1  00 D0 04 A2  
003C46  1  8A                   TXA                     ; restore var1 byte
003C47  1  8B DA 48 A2          STAINDIRECTY Cvaral     ; save byte to var2
003C4B  1  01 B5 95 C9  
003C4F  1  00 D0 04 A2  
003C5D  1  88                   DEY                     ; decrement index
003C5E  1  10 A3                BPL     SwapLp          ; loop until done
003C60  1               
003C60  1  60                   RTS
003C61  1               
003C61  1               SwapErr:
003C61  1  4C 58 2E             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
003C64  1               
003C64  1               ; perform CALL
003C64  1               
003C64  1               LAB_CALL:
003C64  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003C67  1               ; else do type mismatch
003C67  1  20 9D 3B             JSR     LAB_F2FX        ; convert floating-to-fixed
003C6A  1  A9 3C                LDA     #>CallExit      ; set return address high byte
003C6C  1  48                   PHA                     ; put on stack
003C6D  1  A9 72                LDA     #<CallExit-1    ; set return address low byte
003C6F  1  48                   PHA                     ; put on stack
003C70  1  6C 11 00             JMP     (Itempl)        ; do indirect jump to user routine
003C73  1               
003C73  1               ; if the called routine exits correctly then it will return to here. this will then get
003C73  1               ; the next byte for the interpreter and return
003C73  1               
003C73  1               CallExit:
003C73  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003C77  1  60                   RTS
003C78  1               ; perform WAIT
003C78  1               
003C78  1               LAB_WAIT:
003C78  1  20 84 3B             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003C7B  1  86 97                STX     <Frnxtl         ; save byte
003C7D  1  A2 00                LDX     #$00            ; clear mask
003C7F  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003C83  1  F0 03                BEQ     LAB_2441        ; skip if no third argument
003C85  1               
003C85  1  20 8A 3B             JSR     LAB_SCGB        ; scan for "," and get byte, else SN error then warm start
003C88  1               LAB_2441:
003C88  1  86 98                STX     <Frnxth         ; save EOR argument
003C8A  1               LAB_2445:
003C8A  1  8B DA A2 01          LDAINDIRECTY Itempl     ; get byte via temporary integer (addr)
003C8E  1  B5 11 C9 00  
003C92  1  D0 04 A2 00  
003CA0  1  45 98                EOR     <Frnxth         ; EOR with second argument (mask)
003CA2  1  25 97                AND     <Frnxtl         ; AND with first argument (byte)
003CA4  1  F0 E4                BEQ     LAB_2445        ; loop if result is zero
003CA6  1               
003CA6  1               LAB_244D:
003CA6  1  60                   RTS
003CA7  1               
003CA7  1               ; perform subtraction, FAC1 from (AY)
003CA7  1               
003CA7  1               LAB_2455:
003CA7  1  20 95 3E             JSR     LAB_264D        ; unpack memory (AY) into FAC2
003CAA  1               
003CAA  1               ; perform subtraction, FAC1 from FAC2
003CAA  1               
003CAA  1               LAB_SUBTRACT:
003CAA  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003CAC  1  49 FF                EOR     #$FF            ; complement it
003CAE  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003CB0  1  45 B7                EOR     <FAC2_s         ; EOR with FAC2 sign (b7)
003CB2  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
003CB4  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003CB6  1  4C C5 3C             JMP     LAB_ADD         ; go add FAC2 to FAC1
003CB9  1               
003CB9  1               ; perform addition
003CB9  1               
003CB9  1               LAB_2467:
003CB9  1  20 E4 3D             JSR     LAB_257B        ; shift FACX A times right (>8 shifts)
003CBC  1  90 4D                BCC     LAB_24A8        ;.go subtract mantissas
003CBE  1               
003CBE  1               ; add 0.5 to FAC1
003CBE  1               
003CBE  1               LAB_244E:
003CBE  1  A9 A3                LDA     #<LAB_2A96      ; set 0.5 pointer low byte
003CC0  1  A0 18                LDY     #>LAB_2A96      ; set 0.5 pointer high byte
003CC2  1               
003CC2  1               ; add (AY) to FAC1
003CC2  1               
003CC2  1               LAB_246C:
003CC2  1  20 95 3E             JSR     LAB_264D        ; unpack memory (AY) into FAC2
003CC5  1               
003CC5  1               ; add FAC2 to FAC1
003CC5  1               
003CC5  1               LAB_ADD:
003CC5  1  D0 10                BNE     LAB_2474        ; branch if FAC1 was not zero
003CC7  1               
003CC7  1               ; copy FAC2 to FAC1
003CC7  1               
003CC7  1               LAB_279B:
003CC7  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
003CC9  1               
003CC9  1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
003CC9  1               
003CC9  1               LAB_279D:
003CC9  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003CCB  1  A2 04                LDX     #$04            ; 4 bytes to copy
003CCD  1               LAB_27A1:
003CCD  1  B5 B2                LDA     <FAC1_o,X       ; get byte from FAC2,X
003CCF  1  95 AB                STA     <FAC1_e-1,X     ; save byte at FAC1,X
003CD1  1  CA                   DEX                     ; decrement count
003CD2  1  D0 F9                BNE     LAB_27A1        ; loop if not all done
003CD4  1               
003CD4  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
003CD6  1  60                   RTS
003CD7  1               
003CD7  1               ; FAC1 is non zero
003CD7  1               LAB_2474:
003CD7  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
003CD9  1  86 A3                STX     <FAC2_r         ; save as FAC2 rounding byte
003CDB  1  A2 B3                LDX     #<FAC2_e        ; set index to FAC2 exponent addr
003CDD  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
003CDF  1               LAB_247C:
003CDF  1  A8                   TAY                     ; copy exponent
003CE0  1  F0 C4                BEQ     LAB_244D        ; exit if zero
003CE2  1  38                   SEC                     ; set carry for subtract
003CE3  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
003CE5  1  F0 24                BEQ     LAB_24A8        ; branch if = (go add mantissa)
003CE7  1  90 12                BCC     LAB_2498        ; branch if <
003CE9  1               ; FAC2>FAC1
003CE9  1  84 AC                STY     <FAC1_e         ; save FAC1 exponent
003CEB  1  A4 B7                LDY     <FAC2_s         ; get FAC2 sign (b7)
003CED  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
003CEF  1  49 FF                EOR     #$FF            ; complement A
003CF1  1  69 00                ADC     #$00            ; +1 (twos complement, carry is set)
003CF3  1  A0 00                LDY     #$00            ; clear Y
003CF5  1  84 A3                STY     <FAC2_r         ; clear FAC2 rounding byte
003CF7  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1 exponent addr
003CF9  1  D0 04                BNE     LAB_249C        ; branch always
003CFB  1               LAB_2498:
003CFB  1  A0 00                LDY     #$00            ; clear Y
003CFD  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
003CFF  1               LAB_249C:
003CFF  1  C9 F9                CMP     #$F9            ; compare exponent diff with $F9
003D01  1  30 B6                BMI     LAB_2467        ; branch if range $79-$F8
003D03  1  A8                   TAY                     ; copy exponent difference to Y
003D04  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
003D06  1  56 01                LSR     <PLUS_1,X       ; shift FAC? mantissa1
003D08  1  20 FB 3D             JSR     LAB_2592        ; shift FACX Y times right
003D0B  1               ; exponents are equal now do mantissa subtract
003D0B  1               LAB_24A8:
003D0B  1  24 B8                BIT     <FAC_sc         ; test sign compare (FAC1 EOR FAC2)
003D0D  1  10 52                BPL     LAB_24F8        ; if = add FAC2 mantissa to FAC1 mantissa and return
003D0F  1               
003D0F  1  A0 AC                LDY     #<FAC1_e        ; set index to FAC1 exponent addr
003D11  1  E0 B3                CPX     #<FAC2_e        ; compare X to FAC2 exponent addr
003D13  1  F0 02                BEQ     LAB_24B4        ; branch if =
003D15  1               
003D15  1  A0 B3                LDY     #<FAC2_e        ; else set index to FAC2 exponent addr
003D17  1               
003D17  1               ; subtract smaller from bigger (take sign of bigger)
003D17  1               LAB_24B4:
003D17  1  38                   SEC                     ; set carry for subtract
003D18  1  49 FF                EOR     #$FF            ; ones complement A
003D1A  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
003D1C  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
003D1E  1  DA                   PHX
003D1F  1  BB                   TYX
003D20  1  B5 03                LDA     <PLUS_3,X       ; get FACY mantissa3
003D22  1  FA                   PLX
003D23  1  F5 03                SBC     <PLUS_3,X       ; subtract FACX mantissa3
003D25  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
003D27  1  DA                   PHX
003D28  1  BB                   TYX
003D29  1  B5 02                LDA     <PLUS_2,x       ; get FACY mantissa2
003D2B  1  FA                   PLX
003D2C  1  F5 02                SBC     <PLUS_2,X       ; subtract FACX mantissa2
003D2E  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
003D30  1  DA                   PHX
003D31  1  BB                   TYX
003D32  1  B5 01                LDA     <PLUS_1,x       ; get FACY mantissa1
003D34  1  FA                   PLX
003D35  1  F5 01                SBC     <PLUS_1,X       ; subtract FACX mantissa1
003D37  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003D39  1               
003D39  1               ; do ABS and normalise FAC1
003D39  1               
003D39  1               LAB_24D0:
003D39  1  B0 03                BCS     LAB_24D5        ; branch if number is +ve
003D3B  1               
003D3B  1  20 A0 3D             JSR     LAB_2537        ; negate FAC1
003D3E  1               
003D3E  1               ; normalise FAC1
003D3E  1               
003D3E  1               LAB_24D5:
003D3E  1  A0 00                LDY     #$00            ; clear Y
003D40  1  98                   TYA                     ; clear A
003D41  1  18                   CLC                     ; clear carry for add
003D42  1               LAB_24D9:
003D42  1  A6 AD                LDX     <FAC1_1         ; get FAC1 mantissa1
003D44  1  D0 3E                BNE     LAB_251B        ; if not zero normalise FAC1
003D46  1               
003D46  1  A6 AE                LDX     <FAC1_2         ; get FAC1 mantissa2
003D48  1  86 AD                STX     <FAC1_1         ; save FAC1 mantissa1
003D4A  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
003D4C  1  86 AE                STX     <FAC1_2         ; save FAC1 mantissa2
003D4E  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
003D50  1  86 AF                STX     <FAC1_3         ; save FAC1 mantissa3
003D52  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
003D54  1  69 08                ADC     #$08            ; add x to exponent offset
003D56  1  C9 18                CMP     #$18            ; compare with $18 (max offset, all bits would be =0)
003D58  1  D0 E8                BNE     LAB_24D9        ; loop if not max
003D5A  1               
003D5A  1               ; clear FAC1 exponent and sign
003D5A  1               
003D5A  1               LAB_24F1:
003D5A  1  A9 00                LDA     #$00            ; clear A
003D5C  1               LAB_24F3:
003D5C  1  85 AC                STA     <FAC1_e         ; set FAC1 exponent
003D5E  1               
003D5E  1               ; save FAC1 sign
003D5E  1               
003D5E  1               LAB_24F5:
003D5E  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003D60  1  60                   RTS
003D61  1               
003D61  1               ; add FAC2 mantissa to FAC1 mantissa
003D61  1               
003D61  1               LAB_24F8:
003D61  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
003D63  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
003D65  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003D67  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
003D69  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
003D6B  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003D6D  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
003D6F  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
003D71  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
003D73  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
003D75  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003D77  1  B0 1A                BCS     LAB_252A        ; if carry then normalise FAC1 for C=1
003D79  1               
003D79  1  60                   RTS                     ; else just exit
003D7A  1               
003D7A  1               LAB_2511:
003D7A  1  69 01                ADC     #$01            ; add 1 to exponent offset
003D7C  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
003D7E  1  26 AF                ROL     <FAC1_3         ; shift FAC1 mantissa3
003D80  1  26 AE                ROL     <FAC1_2         ; shift FAC1 mantissa2
003D82  1  26 AD                ROL     <FAC1_1         ; shift FAC1 mantissa1
003D84  1               
003D84  1               ; normalise FAC1
003D84  1               
003D84  1               LAB_251B:
003D84  1  10 F4                BPL     LAB_2511        ; loop if not normalised
003D86  1               
003D86  1  38                   SEC                     ; set carry for subtract
003D87  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
003D89  1  B0 CF                BCS     LAB_24F1        ; branch if underflow (set result = $0)
003D8B  1               
003D8B  1  49 FF                EOR     #$FF            ; complement exponent
003D8D  1  69 01                ADC     #$01            ; +1 (twos complement)
003D8F  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
003D91  1               
003D91  1               ; test and normalise FAC1 for C=0/1
003D91  1               
003D91  1               LAB_2528:
003D91  1  90 0C                BCC     LAB_2536        ; exit if no overflow
003D93  1               
003D93  1               ; normalise FAC1 for C=1
003D93  1               
003D93  1               LAB_252A:
003D93  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
003D95  1  F0 36                BEQ     LAB_2564        ; if zero do overflow error and warm start
003D97  1               
003D97  1  66 AD                ROR     <FAC1_1         ; shift FAC1 mantissa1
003D99  1  66 AE                ROR     <FAC1_2         ; shift FAC1 mantissa2
003D9B  1  66 AF                ROR     <FAC1_3         ; shift FAC1 mantissa3
003D9D  1  66 B9                ROR     <FAC1_r         ; shift FAC1 rounding byte
003D9F  1               LAB_2536:
003D9F  1  60                   RTS
003DA0  1               
003DA0  1               ; negate FAC1
003DA0  1               
003DA0  1               LAB_2537:
003DA0  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003DA2  1  49 FF                EOR     #$FF            ; complement it
003DA4  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003DA6  1               
003DA6  1               ; twos complement FAC1 mantissa
003DA6  1               
003DA6  1               LAB_253D:
003DA6  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
003DA8  1  49 FF                EOR     #$FF            ; complement it
003DAA  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003DAC  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003DAE  1  49 FF                EOR     #$FF            ; complement it
003DB0  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
003DB2  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003DB4  1  49 FF                EOR     #$FF            ; complement it
003DB6  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
003DB8  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
003DBA  1  49 FF                EOR     #$FF            ; complement it
003DBC  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
003DBE  1  E6 B9                INC     <FAC1_r         ; increment FAC1 rounding byte
003DC0  1  D0 0A                BNE     LAB_2563        ; exit if no overflow
003DC2  1               
003DC2  1               ; increment FAC1 mantissa
003DC2  1               
003DC2  1               LAB_2559:
003DC2  1  E6 AF                INC     <FAC1_3         ; increment FAC1 mantissa3
003DC4  1  D0 06                BNE     LAB_2563        ; finished if no rollover
003DC6  1               
003DC6  1  E6 AE                INC     <FAC1_2         ; increment FAC1 mantissa2
003DC8  1  D0 02                BNE     LAB_2563        ; finished if no rollover
003DCA  1               
003DCA  1  E6 AD                INC     <FAC1_1         ; increment FAC1 mantissa1
003DCC  1               LAB_2563:
003DCC  1  60                   RTS
003DCD  1               
003DCD  1               ; do overflow error (overflow exit)
003DCD  1               
003DCD  1               LAB_2564:
003DCD  1  A2 0A                LDX     #$0A            ; error code $0A ("Overflow" error)
003DCF  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
003DD2  1               
003DD2  1               ; shift FCAtemp << A+8 times
003DD2  1               
003DD2  1               LAB_2569:
003DD2  1  A2 74                LDX     #<FACt_1-1      ; set offset to FACtemp
003DD4  1               LAB_256B:
003DD4  1  B4 03                LDY     <PLUS_3,X       ; get FACX mantissa3
003DD6  1  84 B9                STY     <FAC1_r         ; save as FAC1 rounding byte
003DD8  1  B4 02                LDY     <PLUS_2,X       ; get FACX mantissa2
003DDA  1  94 03                STY     <PLUS_3,X       ; save FACX mantissa3
003DDC  1  B4 01                LDY     <PLUS_1,X       ; get FACX mantissa1
003DDE  1  94 02                STY     <PLUS_2,X       ; save FACX mantissa2
003DE0  1  A4 B2                LDY     <FAC1_o         ; get FAC1 overflow byte
003DE2  1  94 01                STY     <PLUS_1,X       ; save FACX mantissa1
003DE4  1               
003DE4  1               ; shift FACX -A times right (> 8 shifts)
003DE4  1               
003DE4  1               LAB_257B:
003DE4  1  69 08                ADC     #$08            ; add 8 to shift count
003DE6  1  30 EC                BMI     LAB_256B        ; go do 8 shift if still -ve
003DE8  1               
003DE8  1  F0 EA                BEQ     LAB_256B        ; go do 8 shift if zero
003DEA  1               
003DEA  1  E9 08                SBC     #$08            ; else subtract 8 again
003DEC  1  A8                   TAY                     ; save count to Y
003DED  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
003DEF  1  B0 12                BCS     LAB_259A        ;.
003DF1  1               
003DF1  1               LAB_2588:
003DF1  1  16 01                ASL     <PLUS_1,X       ; shift FACX mantissa1
003DF3  1  90 02                BCC     LAB_258E        ; branch if +ve
003DF5  1               
003DF5  1  F6 01                INC     <PLUS_1,X       ; this sets b7 eventually
003DF7  1               LAB_258E:
003DF7  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (correct for ASL)
003DF9  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (put carry in b7)
003DFB  1               
003DFB  1               ; shift FACX Y times right
003DFB  1               
003DFB  1               LAB_2592:
003DFB  1  76 02                ROR     <PLUS_2,X       ; shift FACX mantissa2
003DFD  1  76 03                ROR     <PLUS_3,X       ; shift FACX mantissa3
003DFF  1  6A                   ROR     A               ; shift FACX rounding byte
003E00  1  C8                   INY                     ; increment exponent diff
003E01  1  D0 EE                BNE     LAB_2588        ; branch if range adjust not complete
003E03  1               
003E03  1               LAB_259A:
003E03  1  18                   CLC                     ; just clear it
003E04  1  60                   RTS
003E05  1               
003E05  1               ; perform LOG()
003E05  1               
003E05  1               LAB_LOG:
003E05  1  20 E3 40             JSR     LAB_27CA        ; test sign and zero
003E08  1  F0 02                BEQ     LAB_25C4        ; if zero do function call error then warm start
003E0A  1               
003E0A  1  10 03                BPL     LAB_25C7        ; skip error if +ve
003E0C  1               
003E0C  1               LAB_25C4:
003E0C  1  4C E2 32             JMP     LAB_FCER        ; do function call error then warm start (-ve)
003E0F  1               
003E0F  1               LAB_25C7:
003E0F  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003E11  1  E9 7F                SBC     #$7F            ; normalise it
003E13  1  48                   PHA                     ; save it
003E14  1  A9 80                LDA     #$80            ; set exponent to zero
003E16  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
003E18  1  A9 23                LDA     #<LAB_25AD      ; set 1/root2 pointer low byte
003E1A  1  A0 18                LDY     #>LAB_25AD      ; set 1/root2 pointer high byte
003E1C  1  20 C2 3C             JSR     LAB_246C        ; add (AY) to FAC1 (1/root2)
003E1F  1  A9 27                LDA     #<LAB_25B1      ; set root2 pointer low byte
003E21  1  A0 18                LDY     #>LAB_25B1      ; set root2 pointer high byte
003E23  1  20 5B 3F             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
003E26  1  A9 9A                LDA     #<LAB_259C      ; set 1 pointer low byte
003E28  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
003E2A  1  20 A7 3C             JSR     LAB_2455        ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
003E2D  1  A9 16                LDA     #<LAB_25A0      ; set pointer low byte to counter
003E2F  1  A0 18                LDY     #>LAB_25A0      ; set pointer high byte to counter
003E31  1  20 E4 44             JSR     LAB_2B6E        ; ^2 then series evaluation
003E34  1  A9 2B                LDA     #<LAB_25B5      ; set -0.5 pointer low byte
003E36  1  A0 18                LDY     #>LAB_25B5      ; set -0.5 pointer high byte
003E38  1  20 C2 3C             JSR     LAB_246C        ; add (AY) to FAC1
003E3B  1  68                   PLA                     ; restore FAC1 exponent
003E3C  1  20 AA 42             JSR     LAB_2912        ; evaluate new ASCII digit
003E3F  1  A9 2F                LDA     #<LAB_25B9      ; set LOG(2) pointer low byte
003E41  1  A0 18                LDY     #>LAB_25B9      ; set LOG(2) pointer high byte
003E43  1               
003E43  1               ; do convert AY, FCA1*(AY)
003E43  1               
003E43  1               LAB_25FB:
003E43  1  20 95 3E             JSR     LAB_264D        ; unpack memory (AY) into FAC2
003E46  1               LAB_MULTIPLY:
003E46  1  F0 4C                BEQ     LAB_264C        ; exit if zero
003E48  1               
003E48  1  20 0B 3F             JSR     LAB_2673        ; test and adjust accumulators
003E4B  1  A9 00                LDA     #$00            ; clear A
003E4D  1  85 75                STA     <FACt_1         ; clear temp mantissa1
003E4F  1  85 76                STA     <FACt_2         ; clear temp mantissa2
003E51  1  85 77                STA     <FACt_3         ; clear temp mantissa3
003E53  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
003E55  1  20 6A 3E             JSR     LAB_2622        ; go do shift/add FAC2
003E58  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003E5A  1  20 6A 3E             JSR     LAB_2622        ; go do shift/add FAC2
003E5D  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003E5F  1  20 6A 3E             JSR     LAB_2622        ; go do shift/add FAC2
003E62  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
003E64  1  20 6F 3E             JSR     LAB_2627        ; go do shift/add FAC2
003E67  1  4C C8 3F             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
003E6A  1               
003E6A  1               LAB_2622:
003E6A  1  D0 03                BNE     LAB_2627        ; branch if byte <> zero
003E6C  1               
003E6C  1  4C D2 3D             JMP     LAB_2569        ; shift FCAtemp << A+8 times
003E6F  1               
003E6F  1               ; else do shift and add
003E6F  1               LAB_2627:
003E6F  1  4A                   LSR     A               ; shift byte
003E70  1  09 80                ORA     #$80            ; set top bit (mark for 8 times)
003E72  1               LAB_262A:
003E72  1  A8                   TAY                     ; copy result
003E73  1  90 13                BCC     LAB_2640        ; skip next if bit was zero
003E75  1               
003E75  1  18                   CLC                     ; clear carry for add
003E76  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
003E78  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
003E7A  1  85 77                STA     <FACt_3         ; save temp mantissa3
003E7C  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
003E7E  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
003E80  1  85 76                STA     <FACt_2         ; save temp mantissa2
003E82  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
003E84  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
003E86  1  85 75                STA     <FACt_1         ; save temp mantissa1
003E88  1               LAB_2640:
003E88  1  66 75                ROR     <FACt_1         ; shift temp mantissa1
003E8A  1  66 76                ROR     <FACt_2         ; shift temp mantissa2
003E8C  1  66 77                ROR     <FACt_3         ; shift temp mantissa3
003E8E  1  66 B9                ROR     <FAC1_r         ; shift temp rounding byte
003E90  1  98                   TYA                     ; get byte back
003E91  1  4A                   LSR     A               ; shift byte
003E92  1  D0 DE                BNE     LAB_262A        ; loop if all bits not done
003E94  1               
003E94  1               LAB_264C:
003E94  1  60                   RTS
003E95  1               
003E95  1               ; unpack memory (AY) into FAC2
003E95  1               
003E95  1               LAB_264D:
003E95  1  85 71                STA     <ut1_pl         ; save pointer low byte
003E97  1  84 72                STY     <ut1_ph         ; save pointer high byte
003E99  1  A0 03                LDY     #$03            ; 4 bytes to get (0-3)
003E9B  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa3
003E9F  1  B5 71 C9 00  
003EA3  1  D0 04 A2 00  
003EB1  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
003EB3  1  88                   DEY                     ; decrement index
003EB4  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa2
003EB8  1  B5 71 C9 00  
003EBC  1  D0 04 A2 00  
003ECA  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
003ECC  1  88                   DEY                     ; decrement index
003ECD  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa1+sign
003ED1  1  B5 71 C9 00  
003ED5  1  D0 04 A2 00  
003EE3  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
003EE5  1  45 B0                EOR     <FAC1_s         ; EOR with FAC1 sign (b7)
003EE7  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
003EE9  1  A5 B7                LDA     <FAC2_s         ; recover FAC2 sign (b7)
003EEB  1  09 80                ORA     #$80            ; set 1xxx xxx (set normal bit)
003EED  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
003EEF  1  88                   DEY                     ; decrement index
003EF0  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get exponent byte
003EF4  1  B5 71 C9 00  
003EF8  1  D0 04 A2 00  
003F06  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
003F08  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003F0A  1  60                   RTS
003F0B  1               
003F0B  1               ; test and adjust accumulators
003F0B  1               
003F0B  1               LAB_2673:
003F0B  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
003F0D  1               LAB_2675:
003F0D  1  F0 1D                BEQ     LAB_2696        ; branch if FAC2 = $00 (handle underflow)
003F0F  1               
003F0F  1  18                   CLC                     ; clear carry for add
003F10  1  65 AC                ADC     <FAC1_e         ; add FAC1 exponent
003F12  1  90 04                BCC     LAB_2680        ; branch if sum of exponents <$0100
003F14  1               
003F14  1  30 31                BMI     LAB_269B        ; do overflow error
003F16  1               
003F16  1  18                   CLC                     ; clear carry for the add
003F17  1  2C                   .BYTE   $2C             ; makes next line BIT $1410
003F18  1               LAB_2680:
003F18  1  10 12                BPL     LAB_2696        ; if +ve go handle underflow
003F1A  1               
003F1A  1  69 80                ADC     #$80            ; adjust exponent
003F1C  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
003F1E  1  D0 03                BNE     LAB_268B        ; branch if not zero
003F20  1               
003F20  1  4C 5E 3D             JMP     LAB_24F5        ; save FAC1 sign and return
003F23  1               
003F23  1               LAB_268B:
003F23  1  A5 B8                LDA     <FAC_sc         ; get sign compare (FAC1 EOR FAC2)
003F25  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003F27  1               LAB_268F:
003F27  1  60                   RTS
003F28  1               
003F28  1               ; handle overflow and underflow
003F28  1               
003F28  1               LAB_2690:
003F28  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003F2A  1  10 1B                BPL     LAB_269B        ; do overflow error
003F2C  1               
003F2C  1               ; handle underflow
003F2C  1               LAB_2696:
003F2C  1  68                   PLA                     ; pop return address low byte
003F2D  1  68                   PLA                     ; pop return address high byte
003F2E  1  4C 5A 3D             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
003F31  1               
003F31  1               ; multiply by 10
003F31  1               
003F31  1               LAB_269E:
003F31  1  20 C4 40             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
003F34  1  AA                   TAX                     ; copy exponent (set the flags)
003F35  1  F0 F0                BEQ     LAB_268F        ; exit if zero
003F37  1  18                   CLC                     ; clear carry for add
003F38  1  69 02                ADC     #$02            ; add two to exponent (*4)
003F3A  1  B0 0B                BCS     LAB_269B        ; do overflow error if > $FF
003F3C  1  A2 00                LDX     #$00            ; clear byte
003F3E  1  86 B8                STX     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
003F40  1  20 DF 3C             JSR     LAB_247C        ; add FAC2 to FAC1 (*5)
003F43  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*10)
003F45  1  D0 E0                BNE     LAB_268F        ; if non zero just do RTS
003F47  1               
003F47  1               LAB_269B:
003F47  1  4C CD 3D             JMP     LAB_2564        ; do overflow error and warm start
003F4A  1               
003F4A  1               ; divide by 10
003F4A  1               
003F4A  1               LAB_26B9:
003F4A  1  20 C4 40             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
003F4D  1  A9 AB                LDA     #<LAB_26B5      ; set pointer to 10d low addr
003F4F  1  A0 18                LDY     #>LAB_26B5      ; set pointer to 10d high addr
003F51  1  A2 00                LDX     #$00            ; clear sign
003F53  1               
003F53  1               ; divide by (AY) (X=sign)
003F53  1               
003F53  1               LAB_26C2:
003F53  1  86 B8                STX     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
003F55  1  20 D7 3F             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
003F58  1  4C 5E 3F             JMP     LAB_DIVIDE      ; do FAC2/FAC1
003F5B  1               
003F5B  1               ; Perform divide-by
003F5B  1               ; convert AY and do (AY)/FAC1
003F5B  1               
003F5B  1               LAB_26CA:
003F5B  1  20 95 3E             JSR     LAB_264D        ; unpack memory (AY) into FAC2
003F5E  1               
003F5E  1               ; Perform divide-into
003F5E  1               LAB_DIVIDE:
003F5E  1  F0 63                BEQ     LAB_2737        ; if zero go do /0 error
003F60  1               
003F60  1  20 D3 40             JSR     LAB_27BA        ; round FAC1
003F63  1  A9 00                LDA     #$00            ; clear A
003F65  1  38                   SEC                     ; set carry for subtract
003F66  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent (2s complement)
003F68  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
003F6A  1  20 0B 3F             JSR     LAB_2673        ; test and adjust accumulators
003F6D  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
003F6F  1  F0 D6                BEQ     LAB_269B        ; if zero do overflow error
003F71  1               
003F71  1  A2 FF                LDX     #$FF            ; set index for pre increment
003F73  1  A9 01                LDA     #$01            ; set bit to flag byte save
003F75  1               LAB_26E4:
003F75  1  A4 B4                LDY     <FAC2_1         ; get FAC2 mantissa1
003F77  1  C4 AD                CPY     <FAC1_1         ; compare FAC1 mantissa1
003F79  1  D0 0A                BNE     LAB_26F4        ; branch if <>
003F7B  1               
003F7B  1  A4 B5                LDY     <FAC2_2         ; get FAC2 mantissa2
003F7D  1  C4 AE                CPY     <FAC1_2         ; compare FAC1 mantissa2
003F7F  1  D0 04                BNE     LAB_26F4        ; branch if <>
003F81  1               
003F81  1  A4 B6                LDY     <FAC2_3         ; get FAC2 mantissa3
003F83  1  C4 AF                CPY     <FAC1_3         ; compare FAC1 mantissa3
003F85  1               LAB_26F4:
003F85  1  08                   PHP                     ; save FAC2-FAC1 compare status
003F86  1  2A                   ROL     A               ; shift the result byte
003F87  1  90 0E                BCC     LAB_2702        ; if no carry skip the byte save
003F89  1               
003F89  1  A0 01                LDY     #$01            ; set bit to flag byte save
003F8B  1  E8                   INX                     ; else increment the index to FACt
003F8C  1  E0 02                CPX     #$02            ; compare with the index to <FACt_3
003F8E  1  30 04                BMI     LAB_2701        ; if not last byte just go save it
003F90  1               
003F90  1  D0 28                BNE     LAB_272B        ; if all done go save FAC1 rounding byte, normalise and
003F92  1               ; return
003F92  1               
003F92  1  A0 40                LDY     #$40            ; set bit to flag byte save for the rounding byte
003F94  1               LAB_2701:
003F94  1  95 75                STA     <FACt_1,X       ; write result byte to <FACt_1 + index
003F96  1  98                   TYA                     ; copy the next save byte flag
003F97  1               LAB_2702:
003F97  1  28                   PLP                     ; restore FAC2-FAC1 compare status
003F98  1  90 14                BCC     LAB_2704        ; if FAC2 < FAC1 then skip the subtract
003F9A  1               
003F9A  1  A8                   TAY                     ; save FAC2-FAC1 compare status
003F9B  1  A5 B6                LDA     <FAC2_3         ; get FAC2 mantissa3
003F9D  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
003F9F  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
003FA1  1  A5 B5                LDA     <FAC2_2         ; get FAC2 mantissa2
003FA3  1  E5 AE                SBC     <FAC1_2         ; subtract FAC1 mantissa2
003FA5  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
003FA7  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
003FA9  1  E5 AD                SBC     <FAC1_1         ; subtract FAC1 mantissa1
003FAB  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
003FAD  1  98                   TYA                     ; restore FAC2-FAC1 compare status
003FAE  1               
003FAE  1               ; FAC2 = FAC2*2
003FAE  1               LAB_2704:
003FAE  1  06 B6                ASL     <FAC2_3         ; shift FAC2 mantissa3
003FB0  1  26 B5                ROL     <FAC2_2         ; shift FAC2 mantissa2
003FB2  1  26 B4                ROL     <FAC2_1         ; shift FAC2 mantissa1
003FB4  1  B0 CF                BCS     LAB_26F4        ; loop with no compare
003FB6  1               
003FB6  1  30 BD                BMI     LAB_26E4        ; loop with compare
003FB8  1               
003FB8  1  10 CB                BPL     LAB_26F4        ; loop always with no compare
003FBA  1               
003FBA  1               ; do A<<6, save as FAC1 rounding byte, normalise and return
003FBA  1               
003FBA  1               LAB_272B:
003FBA  1  4A                   LSR     A               ; shift b1 - b0 ..
003FBB  1  6A                   ROR     A               ; ..
003FBC  1  6A                   ROR     A               ; .. to b7 - b6
003FBD  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
003FBF  1  28                   PLP                     ; dump FAC2-FAC1 compare status
003FC0  1  4C C8 3F             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
003FC3  1               
003FC3  1               ; do "Divide by zero" error
003FC3  1               
003FC3  1               LAB_2737:
003FC3  1  A2 14                LDX     #$14            ; error code $14 ("Divide by zero" error)
003FC5  1  4C 1C 23             JMP     LAB_XERR        ; do error #X, then warm start
003FC8  1               
003FC8  1               ; copy temp to FAC1 and normalise
003FC8  1               
003FC8  1               LAB_273C:
003FC8  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
003FCA  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
003FCC  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
003FCE  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
003FD0  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
003FD2  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
003FD4  1  4C 3E 3D             JMP     LAB_24D5        ; normalise FAC1 and return
003FD7  1               
003FD7  1               ; unpack memory (AY) into FAC1
003FD7  1               
003FD7  1               LAB_UFAC:
003FD7  1  85 71                STA     <ut1_pl         ; save pointer low byte
003FD9  1  84 72                STY     <ut1_ph         ; save pointer high byte
003FDB  1  A0 03                LDY     #$03            ; 4 bytes to do
003FDD  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last byte
003FE1  1  B5 71 C9 00  
003FE5  1  D0 04 A2 00  
003FF3  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
003FF5  1  88                   DEY                     ; decrement index
003FF6  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last-1 byte
003FFA  1  B5 71 C9 00  
003FFE  1  D0 04 A2 00  
00400C  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
00400E  1  88                   DEY                     ; decrement index
00400F  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get second byte
004013  1  B5 71 C9 00  
004017  1  D0 04 A2 00  
004025  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004027  1  09 80                ORA     #$80            ; set 1xxx xxxx (add normal bit)
004029  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00402B  1  88                   DEY                     ; decrement index
00402C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get first byte (exponent)
004030  1  B5 71 C9 00  
004034  1  D0 04 A2 00  
004042  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004044  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004046  1  60                   RTS
004047  1               
004047  1               ; pack FAC1 into <Adatal
004047  1               
004047  1               LAB_276E:
004047  1  A2 A4                LDX     #<Adatal        ; set pointer low byte
004049  1               LAB_2770:
004049  1  A0 00                LDY     #>Adatal        ; set pointer high byte
00404B  1  F0 04                BEQ     LAB_2778        ; pack FAC1 into (XY) and return
00404D  1               
00404D  1               ; pack FAC1 into (<Lvarpl)
00404D  1               
00404D  1               LAB_PFAC:
00404D  1  A6 97                LDX     <Lvarpl         ; get destination pointer low byte
00404F  1  A4 98                LDY     <Lvarph         ; get destination pointer high byte
004051  1               
004051  1               ; pack FAC1 into (XY)
004051  1               
004051  1               LAB_2778:
004051  1  20 D3 40             JSR     LAB_27BA        ; round FAC1
004054  1  86 71                STX     <ut1_pl         ; save pointer low byte
004056  1  84 72                STY     <ut1_ph         ; save pointer high byte
004058  1  A0 03                LDY     #$03            ; set index
00405A  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00405C  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
004060  1  01 B5 71 C9  
004064  1  00 D0 04 A2  
004072  1  88                   DEY                     ; decrement index
004073  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004075  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
004079  1  01 B5 71 C9  
00407D  1  00 D0 04 A2  
00408B  1  88                   DEY                     ; decrement index
00408C  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00408E  1  09 7F                ORA     #$7F            ; set bits x111 1111
004090  1  25 AD                AND     <FAC1_1         ; AND in FAC1 mantissa1
004092  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
004096  1  01 B5 71 C9  
00409A  1  00 D0 04 A2  
0040A8  1  88                   DEY                     ; decrement index
0040A9  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0040AB  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0040AF  1  01 B5 71 C9  
0040B3  1  00 D0 04 A2  
0040C1  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
0040C3  1  60                   RTS
0040C4  1               
0040C4  1               ; round and copy FAC1 to FAC2
0040C4  1               
0040C4  1               LAB_27AB:
0040C4  1  20 D3 40             JSR     LAB_27BA        ; round FAC1
0040C7  1               
0040C7  1               ; copy FAC1 to FAC2
0040C7  1               
0040C7  1               LAB_27AE:
0040C7  1  A2 05                LDX     #$05            ; 5 bytes to copy
0040C9  1               LAB_27B0:
0040C9  1  B5 AB                LDA     <FAC1_e-1,X     ; get byte from FAC1,X
0040CB  1  95 B2                STA     <FAC1_o,X       ; save byte at FAC2,X
0040CD  1  CA                   DEX                     ; decrement count
0040CE  1  D0 F9                BNE     LAB_27B0        ; loop if not all done
0040D0  1               
0040D0  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
0040D2  1               LAB_27B9:
0040D2  1  60                   RTS
0040D3  1               
0040D3  1               ; round FAC1
0040D3  1               
0040D3  1               LAB_27BA:
0040D3  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0040D5  1  F0 FB                BEQ     LAB_27B9        ; exit if zero
0040D7  1               
0040D7  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
0040D9  1  90 F7                BCC     LAB_27B9        ; exit if no overflow
0040DB  1               
0040DB  1               ; round FAC1 (no check)
0040DB  1               
0040DB  1               LAB_27C2:
0040DB  1  20 C2 3D             JSR     LAB_2559        ; increment FAC1 mantissa
0040DE  1  D0 F2                BNE     LAB_27B9        ; branch if no overflow
0040E0  1               
0040E0  1  4C 93 3D             JMP     LAB_252A        ; normalise FAC1 for C=1 and return
0040E3  1               
0040E3  1               ; get FAC1 sign
0040E3  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0040E3  1               
0040E3  1               LAB_27CA:
0040E3  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0040E5  1  F0 09                BEQ     LAB_27D7        ; exit if zero (already correct SGN(0)=0)
0040E7  1               
0040E7  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0040E7  1               ; no = 0 check
0040E7  1               
0040E7  1               LAB_27CE:
0040E7  1  A5 B0                LDA     <FAC1_s         ; else get FAC1 sign (b7)
0040E9  1               
0040E9  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
0040E9  1               ; no = 0 check, sign in A
0040E9  1               
0040E9  1               LAB_27D0:
0040E9  1  2A                   ROL     A               ; move sign bit to carry
0040EA  1  A9 FF                LDA     #$FF            ; set byte for -ve result
0040EC  1  B0 02                BCS     LAB_27D7        ; return if sign was set (-ve)
0040EE  1               
0040EE  1  A9 01                LDA     #$01            ; else set byte for +ve result
0040F0  1               LAB_27D7:
0040F0  1  60                   RTS
0040F1  1               
0040F1  1               ; perform SGN()
0040F1  1               
0040F1  1               LAB_SGN:
0040F1  1  20 E3 40             JSR     LAB_27CA        ; get FAC1 sign
0040F4  1               ; return A=$FF/-ve A=$01/+ve
0040F4  1               ; save A as integer byte
0040F4  1               
0040F4  1               LAB_27DB:
0040F4  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0040F6  1  A9 00                LDA     #$00            ; clear A
0040F8  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
0040FA  1  A2 88                LDX     #$88            ; set exponent
0040FC  1               
0040FC  1               ; set exp=X, clearFAC1 mantissa3 and normalise
0040FC  1               
0040FC  1               LAB_27E3:
0040FC  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0040FE  1  49 FF                EOR     #$FF            ; complement it
004100  1  2A                   ROL     A               ; sign bit into carry
004101  1               
004101  1               ; set exp=X, clearFAC1 mantissa3 and normalise
004101  1               
004101  1               LAB_STFA:
004101  1  A9 00                LDA     #$00            ; clear A
004103  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004105  1  86 AC                STX     <FAC1_e         ; set FAC1 exponent
004107  1  85 B9                STA     <FAC1_r         ; clear FAC1 rounding byte
004109  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
00410B  1  4C 39 3D             JMP     LAB_24D0        ; do ABS and normalise FAC1
00410E  1               
00410E  1               ; perform ABS()
00410E  1               
00410E  1               LAB_ABS:
00410E  1  46 B0                LSR     <FAC1_s         ; clear FAC1 sign (put zero in b7)
004110  1  60                   RTS
004111  1               
004111  1               ; compare FAC1 with (AY)
004111  1               ; returns A=$00 if FAC1 = (AY)
004111  1               ; returns A=$01 if FAC1 > (AY)
004111  1               ; returns A=$FF if FAC1 < (AY)
004111  1               
004111  1               LAB_27F8:
004111  1  85 73                STA     <ut2_pl         ; save pointer low byte
004113  1               LAB_27FA:
004113  1  84 74                STY     <ut2_ph         ; save pointer high byte
004115  1  A0 00                LDY     #$00            ; clear index
004117  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get exponent
00411B  1  B5 73 C9 00  
00411F  1  D0 04 A2 00  
00412D  1  C8                   INY                     ; increment index
00412E  1  AA                   TAX                     ; copy (AY) exponent to X
00412F  1  F0 B2                BEQ     LAB_27CA        ; branch if (AY) exponent=0 and get FAC1 sign
004131  1               ; A=FF,C=1/-ve A=01,C=0/+ve
004131  1               
004131  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
004135  1  B5 73 C9 00  
004139  1  D0 04 A2 00  
004147  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
004149  1  30 9C                BMI     LAB_27CE        ; if signs <> do return A=FF,C=1/-ve
00414B  1               ; A=01,C=0/+ve and return
00414B  1               
00414B  1  E4 AC                CPX     <FAC1_e         ; compare (AY) exponent with FAC1 exponent
00414D  1  D0 56                BNE     LAB_2828        ; branch if different
00414F  1               
00414F  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
004153  1  B5 73 C9 00  
004157  1  D0 04 A2 00  
004165  1  09 80                ORA     #$80            ; normalise top bit
004167  1  C5 AD                CMP     <FAC1_1         ; compare with FAC1 mantissa1
004169  1  D0 3A                BNE     LAB_2828        ; branch if different
00416B  1               
00416B  1  C8                   INY                     ; increment index
00416C  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa2
004170  1  B5 73 C9 00  
004174  1  D0 04 A2 00  
004182  1  C5 AE                CMP     <FAC1_2         ; compare with FAC1 mantissa2
004184  1  D0 1F                BNE     LAB_2828        ; branch if different
004186  1               
004186  1  C8                   INY                     ; increment index
004187  1  A9 7F                LDA     #$7F            ; set for 1/2 value rounding byte
004189  1  C5 B9                CMP     <FAC1_r         ; compare with FAC1 rounding byte (set carry)
00418B  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa3
00418F  1  B5 73 C9 00  
004193  1  D0 04 A2 00  
0041A1  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
0041A3  1  F0 28                BEQ     LAB_2850        ; exit if mantissa3 equal
0041A5  1               
0041A5  1               ; gets here if number <> FAC1
0041A5  1               
0041A5  1               LAB_2828:
0041A5  1               
0041A5  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0041A7  1  90 02                BCC     LAB_282E        ; branch if FAC1 > (AY)
0041A9  1               
0041A9  1  49 FF                EOR     #$FF            ; else toggle FAC1 sign
0041AB  1               LAB_282E:
0041AB  1  4C E9 40             JMP     LAB_27D0        ; return A=FF,C=1/-ve A=01,C=0/+ve
0041AE  1               
0041AE  1               ; convert FAC1 floating-to-fixed
0041AE  1               
0041AE  1               LAB_2831:
0041AE  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0041B0  1  F0 4A                BEQ     LAB_287F        ; if zero go clear FAC1 and return
0041B2  1               
0041B2  1  38                   SEC                     ; set carry for subtract
0041B3  1  E9 98                SBC     #$98            ; subtract maximum integer range exponent
0041B5  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
0041B7  1  10 09                BPL     LAB_2845        ; branch if FAC1 +ve
0041B9  1               
0041B9  1               ; FAC1 was -ve
0041B9  1  AA                   TAX                     ; copy subtracted exponent
0041BA  1  A9 FF                LDA     #$FF            ; overflow for -ve number
0041BC  1  85 B2                STA     <FAC1_o         ; set FAC1 overflow byte
0041BE  1  20 A6 3D             JSR     LAB_253D        ; twos complement FAC1 mantissa
0041C1  1  8A                   TXA                     ; restore subtracted exponent
0041C2  1               LAB_2845:
0041C2  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1
0041C4  1  C9 F9                CMP     #$F9            ; compare exponent result
0041C6  1  10 06                BPL     LAB_2851        ; if < 8 shifts shift FAC1 A times right and return
0041C8  1               
0041C8  1  20 E4 3D             JSR     LAB_257B        ; shift FAC1 A times right (> 8 shifts)
0041CB  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
0041CD  1               LAB_2850:
0041CD  1  60                   RTS
0041CE  1               
0041CE  1               ; shift FAC1 A times right
0041CE  1               
0041CE  1               LAB_2851:
0041CE  1  A8                   TAY                     ; copy shift count
0041CF  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0041D1  1  29 80                AND     #$80            ; mask sign bit only (x000 0000)
0041D3  1  46 AD                LSR     <FAC1_1         ; shift FAC1 mantissa1
0041D5  1  05 AD                ORA     <FAC1_1         ; OR sign in b7 FAC1 mantissa1
0041D7  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0041D9  1  20 FB 3D             JSR     LAB_2592        ; shift FAC1 Y times right
0041DC  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
0041DE  1  60                   RTS
0041DF  1               
0041DF  1               ; perform INT()
0041DF  1               
0041DF  1               LAB_INT:
0041DF  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0041E1  1  C9 98                CMP     #$98            ; compare with max int
0041E3  1  B0 1E                BCS     LAB_2886        ; exit if >= (already int, too big for fractional part!)
0041E5  1               
0041E5  1  20 AE 41             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0041E8  1  84 B9                STY     <FAC1_r         ; save FAC1 rounding byte
0041EA  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0041EC  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
0041EE  1  49 80                EOR     #$80            ; toggle FAC1 sign
0041F0  1  2A                   ROL     A               ; shift into carry
0041F1  1  A9 98                LDA     #$98            ; set new exponent
0041F3  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0041F5  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0041F7  1  85 5B                STA     <Temp3          ; save for EXP() function
0041F9  1  4C 39 3D             JMP     LAB_24D0        ; do ABS and normalise FAC1
0041FC  1               
0041FC  1               ; clear FAC1 and return
0041FC  1               
0041FC  1               LAB_287F:
0041FC  1  85 AD                STA     <FAC1_1         ; clear FAC1 mantissa1
0041FE  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
004200  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004202  1  A8                   TAY                     ; clear Y
004203  1               LAB_2886:
004203  1  60                   RTS
004204  1               
004204  1               ; get FAC1 from string
004204  1               ; this routine now handles hex and binary values from strings
004204  1               ; starting with "$" and "%" respectively
004204  1               
004204  1               LAB_2887:
004204  1  A0 00                LDY     #$00            ; clear Y
004206  1  84 5F                STY     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
004208  1  A2 09                LDX     #$09            ; set index
00420A  1               LAB_288B:
00420A  1  94 A8                STY     <numexp,x       ; clear byte
00420C  1  CA                   DEX                     ; decrement index
00420D  1  10 FB                BPL     LAB_288B        ; loop until <numexp to <negnum (and FAC1) = $00
00420F  1               
00420F  1  B0 03                BCS     LAB_s28FE       ; branch if 1st NOT character numeric
004211  1  4C 97 42             JMP     LAB_28FE        ; branch if 1st character numeric
004214  1               LAB_s28FE:
004214  1               
004214  1               ; get FAC1 from string .. first character wasn't numeric
004214  1               
004214  1  C9 2D                CMP     #'-'            ; else compare with "-"
004216  1  D0 04                BNE     LAB_289A        ; branch if not "-"
004218  1               
004218  1  86 B1                STX     <negnum         ; set flag for -ve number (X = $FF)
00421A  1  F0 04                BEQ     LAB_289C        ; branch always (go scan and check for hex/bin)
00421C  1               
00421C  1               ; get FAC1 from string .. first character wasn't numeric or -
00421C  1               
00421C  1               LAB_289A:
00421C  1  C9 2B                CMP     #'+'            ; else compare with "+"
00421E  1  D0 06                BNE     LAB_289D        ; branch if not "+" (go check for hex/bin)
004220  1               
004220  1               ; was "+" or "-" to start, so get next character
004220  1               
004220  1               LAB_289C:
004220  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004224  1  90 71                BCC     LAB_28FE        ; branch if numeric character
004226  1               
004226  1               ; code here for hex and binary numbers
004226  1               
004226  1               LAB_289D:
004226  1  C9 24                CMP     #'$'            ; else compare with "$"
004228  1  D0 03                BNE     LAB_NHEX        ; branch if not "$"
00422A  1               
00422A  1  4C 55 47             JMP     LAB_CHEX        ; branch if "$"
00422D  1               
00422D  1               LAB_NHEX:
00422D  1  C9 25                CMP     #'%'            ; else compare with "%"
00422F  1  D0 09                BNE     LAB_28A3        ; branch if not "%" (continue original code)
004231  1               
004231  1  4C 84 47             JMP     LAB_CBIN        ; branch if "%"
004234  1               
004234  1               LAB_289E:
004234  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (ignore + or get next number)
004238  1               LAB_28A1:
004238  1  90 5D                BCC     LAB_28FE        ; branch if numeric character
00423A  1               
00423A  1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
00423A  1               
00423A  1               LAB_28A3:
00423A  1  C9 2E                CMP     #'.'            ; else compare with "."
00423C  1  F0 30                BEQ     LAB_28D5        ; branch if "."
00423E  1               
00423E  1               ; get FAC1 from string .. character wasn't numeric, -, + or .
00423E  1               
00423E  1  C9 45                CMP     #'E'            ; else compare with "E"
004240  1  D0 32                BNE     LAB_28DB        ; branch if not "E"
004242  1               
004242  1               ; was "E" so evaluate exponential part
004242  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004246  1  90 18                BCC     LAB_28C7        ; branch if numeric character
004248  1               
004248  1  C9 CC                CMP     #TK_MINUS       ; else compare with token for -
00424A  1  F0 0E                BEQ     LAB_28C2        ; branch if token for -
00424C  1               
00424C  1  C9 2D                CMP     #'-'            ; else compare with "-"
00424E  1  F0 0A                BEQ     LAB_28C2        ; branch if "-"
004250  1               
004250  1  C9 CB                CMP     #TK_PLUS        ; else compare with token for +
004252  1  F0 08                BEQ     LAB_28C4        ; branch if token for +
004254  1               
004254  1  C9 2B                CMP     #'+'            ; else compare with "+"
004256  1  F0 04                BEQ     LAB_28C4        ; branch if "+"
004258  1               
004258  1  D0 08                BNE     LAB_28C9        ; branch always
00425A  1               
00425A  1               LAB_28C2:
00425A  1  66 AB                ROR     <expneg         ; set exponent -ve flag (C, which=1, into b7)
00425C  1               LAB_28C4:
00425C  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004260  1               LAB_28C7:
004260  1  90 5B                BCC     LAB_2925        ; branch if numeric character
004262  1               
004262  1               LAB_28C9:
004262  1  24 AB                BIT     <expneg         ; test exponent -ve flag
004264  1  10 0E                BPL     LAB_28DB        ; if +ve go evaluate exponent
004266  1               
004266  1               ; else do exponent = -exponent
004266  1  A9 00                LDA     #$00            ; clear result
004268  1  38                   SEC                     ; set carry for subtract
004269  1  E5 A9                SBC     <expcnt         ; subtract exponent byte
00426B  1  4C 76 42             JMP     LAB_28DD        ; go evaluate exponent
00426E  1               
00426E  1               LAB_28D5:
00426E  1  66 AA                ROR     <numdpf         ; set decimal point flag
004270  1  24 AA                BIT     <numdpf         ; test decimal point flag
004272  1  50 C0                BVC     LAB_289E        ; branch if only one decimal point so far
004274  1               
004274  1               ; evaluate exponent
004274  1               LAB_28DB:
004274  1  A5 A9                LDA     <expcnt         ; get exponent count byte
004276  1               LAB_28DD:
004276  1  38                   SEC                     ; set carry for subtract
004277  1  E5 A8                SBC     <numexp         ; subtract numerator exponent
004279  1  85 A9                STA     <expcnt         ; save exponent count byte
00427B  1  F0 12                BEQ     LAB_28F6        ; branch if no adjustment
00427D  1               
00427D  1  10 09                BPL     LAB_28EF        ; else if +ve go do FAC1*10^<expcnt
00427F  1               
00427F  1               ; else go do FAC1/10^(0-<expcnt)
00427F  1               LAB_28E6:
00427F  1  20 4A 3F             JSR     LAB_26B9        ; divide by 10
004282  1  E6 A9                INC     <expcnt         ; increment exponent count byte
004284  1  D0 F9                BNE     LAB_28E6        ; loop until all done
004286  1               
004286  1  F0 07                BEQ     LAB_28F6        ; branch always
004288  1               
004288  1               LAB_28EF:
004288  1  20 31 3F             JSR     LAB_269E        ; multiply by 10
00428B  1  C6 A9                DEC     <expcnt         ; decrement exponent count byte
00428D  1  D0 F9                BNE     LAB_28EF        ; loop until all done
00428F  1               
00428F  1               LAB_28F6:
00428F  1  A5 B1                LDA     <negnum         ; get -ve flag
004291  1  30 01                BMI     LAB_28FB        ; if -ve do - FAC1 and return
004293  1               
004293  1  60                   RTS
004294  1               
004294  1               ; do - FAC1 and return
004294  1               
004294  1               LAB_28FB:
004294  1  4C 87 44             JMP     LAB_GTHAN       ; do - FAC1 and return
004297  1               
004297  1               ; do unsigned FAC1*10+number
004297  1               
004297  1               LAB_28FE:
004297  1  48                   PHA                     ; save character
004298  1  24 AA                BIT     <numdpf         ; test decimal point flag
00429A  1  10 02                BPL     LAB_2905        ; skip exponent increment if not set
00429C  1               
00429C  1  E6 A8                INC     <numexp         ; else increment number exponent
00429E  1               LAB_2905:
00429E  1  20 31 3F             JSR     LAB_269E        ; multiply FAC1 by 10
0042A1  1  68                   PLA                     ; restore character
0042A2  1  29 0F                AND     #$0F            ; convert to binary
0042A4  1  20 AA 42             JSR     LAB_2912        ; evaluate new ASCII digit
0042A7  1  4C 34 42             JMP     LAB_289E        ; go do next character
0042AA  1               
0042AA  1               ; evaluate new ASCII digit
0042AA  1               
0042AA  1               LAB_2912:
0042AA  1  48                   PHA                     ; save digit
0042AB  1  20 C4 40             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0042AE  1  68                   PLA                     ; restore digit
0042AF  1  20 F4 40             JSR     LAB_27DB        ; save A as integer byte
0042B2  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0042B4  1  45 B0                EOR     <FAC1_s         ; toggle with FAC1 sign (b7)
0042B6  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
0042B8  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
0042BA  1  4C C5 3C             JMP     LAB_ADD         ; add FAC2 to FAC1 and return
0042BD  1               
0042BD  1               ; evaluate next character of exponential part of number
0042BD  1               
0042BD  1               LAB_2925:
0042BD  1  A5 A9                LDA     <expcnt         ; get exponent count byte
0042BF  1  C9 0A                CMP     #$0A            ; compare with 10 decimal
0042C1  1  90 09                BCC     LAB_2934        ; branch if less
0042C3  1               
0042C3  1  A9 64                LDA     #$64            ; make all -ve exponents = -100 decimal (causes underflow)
0042C5  1  24 AB                BIT     <expneg         ; test exponent -ve flag
0042C7  1  30 25                BMI     LAB_2942        ; branch if -ve
0042C9  1               
0042C9  1  4C CD 3D             JMP     LAB_2564        ; else do overflow error
0042CC  1               
0042CC  1               LAB_2934:
0042CC  1  0A                   ASL     A               ; * 2
0042CD  1  0A                   ASL     A               ; * 4
0042CE  1  65 A9                ADC     <expcnt         ; * 5
0042D0  1  0A                   ASL     A               ; * 10
0042D1  1  A0 00                LDY     #$00            ; set index
0042D3  1  8B 48 DA A2          ADCINDIRECTY Bpntrl     ; add character (will be $30 too much!)
0042D7  1  01 B5 C3 C9  
0042DB  1  00 D0 04 A2  
0042EC  1  E9 2F                SBC     #'0'-1          ; convert character to binary
0042EE  1               LAB_2942:
0042EE  1  85 A9                STA     <expcnt         ; save exponent count byte
0042F0  1  4C 5C 42             JMP     LAB_28C4        ; go get next character
0042F3  1               
0042F3  1               ; print " in line [LINE #]"
0042F3  1               
0042F3  1               LAB_2953:
0042F3  1  A9 D1                LDA     #<LAB_LMSG      ; point to " in line " message low byte
0042F5  1  A0 17                LDY     #>LAB_LMSG      ; point to " in line " message high byte
0042F7  1  20 E0 2B             JSR     LAB_18C3        ; print null terminated string from memory
0042FA  1               
0042FA  1               ; print Basic line #
0042FA  1  A5 88                LDA     <Clineh         ; get current line high byte
0042FC  1  A6 87                LDX     <Clinel         ; get current line low byte
0042FE  1               
0042FE  1               ; print XA as unsigned integer
0042FE  1               
0042FE  1               LAB_295E:
0042FE  1  85 AD                STA     <FAC1_1         ; save low byte as FAC1 mantissa1
004300  1  86 AE                STX     <FAC1_2         ; save high byte as FAC1 mantissa2
004302  1  A2 90                LDX     #$90            ; set exponent to 16d bits
004304  1  38                   SEC                     ; set integer is +ve flag
004305  1  20 01 41             JSR     LAB_STFA        ; set exp=X, clearFAC1 mantissa3 and normalise
004308  1  A0 00                LDY     #$00            ; clear index
00430A  1  98                   TYA                     ; clear A
00430B  1  20 20 43             JSR     LAB_297B        ; convert FAC1 to string, skip sign character save
00430E  1  4C E0 2B             JMP     LAB_18C3        ; print null terminated string from memory and return
004311  1               
004311  1               ; convert FAC1 to ASCII string result in (AY)
004311  1               ; not any more, moved scratchpad to page 0
004311  1               
004311  1               LAB_296E:
004311  1  A0 01                LDY     #$01            ; set index = 1
004313  1  A9 20                LDA     #$20            ; character = " " (assume +ve)
004315  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
004317  1  10 02                BPL     LAB_2978        ; branch if +ve
004319  1               
004319  1  A9 2D                LDA     #$2D            ; else character = "-"
00431B  1               LAB_2978:
00431B  1  DA                   PHX
00431C  1  BB                   TYX
00431D  1  95 EF                STA     <Decss,X        ; save leading character (" " or "-")
00431F  1  FA                   PLX
004320  1               LAB_297B:
004320  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
004322  1  84 BA                STY     <Sendl          ; save index
004324  1  C8                   INY                     ; increment index
004325  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
004327  1  D0 05                BNE     LAB_2989        ; branch if FAC1<>0
004329  1               
004329  1               ; exponent was $00 so FAC1 is 0
004329  1  A9 30                LDA     #'0'            ; set character = "0"
00432B  1  4C 3D 44             JMP     LAB_2A89        ; save last character, [EOT] and exit
00432E  1               
00432E  1               ; FAC1 is some non zero value
00432E  1               LAB_2989:
00432E  1  A9 00                LDA     #$00            ; clear (number exponent count)
004330  1  E0 81                CPX     #$81            ; compare FAC1 exponent with $81 (>1.00000)
004332  1               
004332  1  B0 09                BCS     LAB_299A        ; branch if FAC1=>1
004334  1               
004334  1               ; FAC1<1
004334  1  A9 3B                LDA     #<LAB_294F      ; set pointer low byte to 1,000,000
004336  1  A0 18                LDY     #>LAB_294F      ; set pointer high byte to 1,000,000
004338  1  20 43 3E             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
00433B  1  A9 FA                LDA     #$FA            ; set number exponent count (-6)
00433D  1               LAB_299A:
00433D  1  85 A8                STA     <numexp         ; save number exponent count
00433F  1               LAB_299C:
00433F  1  A9 37                LDA     #<LAB_294B      ; set pointer low byte to 999999.4375 (max before sci note)
004341  1  A0 18                LDY     #>LAB_294B      ; set pointer high byte to 999999.4375
004343  1  20 11 41             JSR     LAB_27F8        ; compare FAC1 with (AY)
004346  1  F0 1E                BEQ     LAB_29C3        ; exit if FAC1 = (AY)
004348  1  10 12                BPL     LAB_29B9        ; go do /10 if FAC1 > (AY)
00434A  1               ; FAC1 < (AY)
00434A  1               LAB_29A7:
00434A  1  A9 33                LDA     #<LAB_2947      ; set pointer low byte to 99999.9375
00434C  1  A0 18                LDY     #>LAB_2947      ; set pointer high byte to 99999.9375
00434E  1  20 11 41             JSR     LAB_27F8        ; compare FAC1 with (AY)
004351  1  F0 02                BEQ     LAB_29B2        ; branch if FAC1 = (AY) (allow decimal places)
004353  1  10 0E                BPL     LAB_29C0        ; branch if FAC1 > (AY) (no decimal places)
004355  1               ; FAC1 <= (AY)
004355  1               LAB_29B2:
004355  1  20 31 3F             JSR     LAB_269E        ; multiply by 10
004358  1  C6 A8                DEC     <numexp         ; decrement number exponent count
00435A  1  D0 EE                BNE     LAB_29A7        ; go test again (branch always)
00435C  1               
00435C  1               LAB_29B9:
00435C  1  20 4A 3F             JSR     LAB_26B9        ; divide by 10
00435F  1  E6 A8                INC     <numexp         ; increment number exponent count
004361  1  D0 DC                BNE     LAB_299C        ; go test again (branch always)
004363  1               
004363  1               ; now we have just the digits to do
004363  1               
004363  1               LAB_29C0:
004363  1  20 BE 3C             JSR     LAB_244E        ; add 0.5 to FAC1 (round FAC1)
004366  1               LAB_29C3:
004366  1  20 AE 41             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
004369  1  A2 01                LDX     #$01            ; set default digits before dp = 1
00436B  1  A5 A8                LDA     <numexp         ; get number exponent count
00436D  1  18                   CLC                     ; clear carry for add
00436E  1  69 07                ADC     #$07            ; up to 6 digits before point
004370  1  30 09                BMI     LAB_29D8        ; if -ve then 1 digit before dp
004372  1               
004372  1  C9 08                CMP     #$08            ; A>=8 if n>=1E6
004374  1  B0 06                BCS     LAB_29D9        ; branch if >= $08
004376  1               
004376  1               ; carry is clear
004376  1  69 FF                ADC     #$FF            ; take 1 from digit count
004378  1  AA                   TAX                     ; copy to A
004379  1  A9 02                LDA     #$02            ;.set exponent adjust
00437B  1               LAB_29D8:
00437B  1  38                   SEC                     ; set carry for subtract
00437C  1               LAB_29D9:
00437C  1  E9 02                SBC     #$02            ; -2
00437E  1  85 A9                STA     <expcnt         ;.save exponent adjust
004380  1  86 A8                STX     <numexp         ; save digits before dp count
004382  1  8A                   TXA                     ; copy to A
004383  1  F0 02                BEQ     LAB_29E4        ; branch if no digits before dp
004385  1               
004385  1  10 17                BPL     LAB_29F7        ; branch if digits before dp
004387  1               
004387  1               LAB_29E4:
004387  1  A4 BA                LDY     <Sendl          ; get output string index
004389  1  A9 2E                LDA     #$2E            ; character "."
00438B  1  C8                   INY                     ; increment index
00438C  1  DA                   PHX
00438D  1  BB                   TYX
00438E  1  95 EF                STA     <Decss,X        ; save to output string
004390  1  FA                   PLX
004391  1  8A                   TXA                     ;.
004392  1  F0 08                BEQ     LAB_29F5        ;.
004394  1               
004394  1  A9 30                LDA     #'0'            ; character "0"
004396  1  C8                   INY                     ; increment index
004397  1  DA                   PHX
004398  1  BB                   TYX
004399  1  95 EF                STA     <Decss,X        ; save to output string
00439B  1  FA                   PLX
00439C  1               LAB_29F5:
00439C  1  84 BA                STY     <Sendl          ; save output string index
00439E  1               LAB_29F7:
00439E  1  A0 00                LDY     #$00            ; clear index (point to 100,000)
0043A0  1  A2 80                LDX     #$80            ;
0043A2  1               LAB_29FB:
0043A2  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0043A4  1  18                   CLC                     ; clear carry for add
0043A5  1  79 B1 18             ADC     LAB_2A9C,Y      ; add -ve LSB
0043A8  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0043AA  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0043AC  1  79 B0 18             ADC     LAB_2A9B,Y      ; add -ve NMSB
0043AF  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0043B1  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0043B3  1  79 AF 18             ADC     LAB_2A9A,Y      ; add -ve MSB
0043B6  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0043B8  1  E8                   INX                     ;
0043B9  1  B0 04                BCS     LAB_2A18        ;
0043BB  1               
0043BB  1  10 E5                BPL     LAB_29FB        ; not -ve so try again
0043BD  1               
0043BD  1  30 02                BMI     LAB_2A1A        ;
0043BF  1               
0043BF  1               LAB_2A18:
0043BF  1  30 E1                BMI     LAB_29FB        ;
0043C1  1               
0043C1  1               LAB_2A1A:
0043C1  1  8A                   TXA                     ;
0043C2  1  90 04                BCC     LAB_2A21        ;
0043C4  1               
0043C4  1  49 FF                EOR     #$FF            ;
0043C6  1  69 0A                ADC     #$0A            ;
0043C8  1               LAB_2A21:
0043C8  1  69 2F                ADC     #'0'-1          ; add "0"-1 to result
0043CA  1  C8                   INY                     ; increment index ..
0043CB  1  C8                   INY                     ; .. to next less ..
0043CC  1  C8                   INY                     ; .. power of ten
0043CD  1  84 95                STY     <Cvaral         ; save as current var address low byte
0043CF  1  A4 BA                LDY     <Sendl          ; get output string index
0043D1  1  C8                   INY                     ; increment output string index
0043D2  1  AA                   TAX                     ; copy character to X
0043D3  1  29 7F                AND     #$7F            ; mask out top bit
0043D5  1  DA                   PHX
0043D6  1  BB                   TYX
0043D7  1  95 EF                STA     <Decss,X        ; save to output string
0043D9  1  FA                   PLX
0043DA  1  C6 A8                DEC     <numexp         ; decrement # of characters before the dp
0043DC  1  D0 08                BNE     LAB_2A3B        ; branch if still characters to do
0043DE  1               
0043DE  1               ; else output the point
0043DE  1  A9 2E                LDA     #$2E            ; character "."
0043E0  1  C8                   INY                     ; increment output string index
0043E1  1  DA                   PHX
0043E2  1  BB                   TYX
0043E3  1  95 EF                STA     <Decss,X        ; save to output string
0043E5  1  FA                   PLX
0043E6  1               LAB_2A3B:
0043E6  1  84 BA                STY     <Sendl          ; save output string index
0043E8  1  A4 95                LDY     <Cvaral         ; get current var address low byte
0043EA  1  8A                   TXA                     ; get character back
0043EB  1  49 FF                EOR     #$FF            ;
0043ED  1  29 80                AND     #$80            ;
0043EF  1  AA                   TAX                     ;
0043F0  1  C0 12                CPY     #$12            ; compare index with max
0043F2  1  D0 AE                BNE     LAB_29FB        ; loop if not max
0043F4  1               
0043F4  1               ; now remove trailing zeroes
0043F4  1  A4 BA                LDY     <Sendl          ; get output string index
0043F6  1               LAB_2A4B:
0043F6  1  DA                   PHX
0043F7  1  BB                   TYX
0043F8  1  B5 EF                LDA     <Decss,X        ; get character from output string
0043FA  1  FA                   PLX
0043FB  1  88                   DEY                     ; decrement output string index
0043FC  1  C9 30                CMP     #'0'            ; compare with "0"
0043FE  1  F0 F6                BEQ     LAB_2A4B        ; loop until non "0" character found
004400  1               
004400  1  C9 2E                CMP     #'.'            ; compare with "."
004402  1  F0 01                BEQ     LAB_2A58        ; branch if was dp
004404  1               
004404  1               ; restore last character
004404  1  C8                   INY                     ; increment output string index
004405  1               LAB_2A58:
004405  1  A9 2B                LDA     #$2B            ; character "+"
004407  1  A6 A9                LDX     <expcnt         ; get exponent count
004409  1  F0 37                BEQ     LAB_2A8C        ; if zero go set null terminator and exit
00440B  1               
00440B  1               ; exponent isn't zero so write exponent
00440B  1  10 08                BPL     LAB_2A68        ; branch if exponent count +ve
00440D  1               
00440D  1  A9 00                LDA     #$00            ; clear A
00440F  1  38                   SEC                     ; set carry for subtract
004410  1  E5 A9                SBC     <expcnt         ; subtract exponent count adjust (convert -ve to +ve)
004412  1  AA                   TAX                     ; copy exponent count to X
004413  1  A9 2D                LDA     #'-'            ; character "-"
004415  1               LAB_2A68:
004415  1  DA                   PHX
004416  1  BB                   TYX
004417  1  95 F1                STA     <Decss+2,X      ; save to output string
004419  1  A9 45                LDA     #$45            ; character "E"
00441B  1  95 F0                STA     <Decss+1,X      ; save exponent sign to output string
00441D  1  FA                   PLX
00441E  1  8A                   TXA                     ; get exponent count back
00441F  1  A2 2F                LDX     #'0'-1          ; one less than "0" character
004421  1  38                   SEC                     ; set carry for subtract
004422  1               LAB_2A74:
004422  1  E8                   INX                     ; increment 10's character
004423  1  E9 0A                SBC     #$0A            ;.subtract 10 from exponent count
004425  1  B0 FB                BCS     LAB_2A74        ; loop while still >= 0
004427  1               
004427  1  69 3A                ADC     #':'            ; add character ":" ($30+$0A, result is 10 less that value)
004429  1  DA                   PHX
00442A  1  BB                   TYX
00442B  1  95 F3                STA     <Decss+4,X      ; save to output string
00442D  1  FA                   PLX
00442E  1  8A                   TXA                     ; copy 10's character
00442F  1  DA                   PHX
004430  1  BB                   TYX
004431  1  95 F2                STA     <Decss+3,X      ; save to output string
004433  1  FA                   PLX
004434  1  A9 00                LDA     #$00            ; set null terminator
004436  1  DA                   PHX
004437  1  BB                   TYX
004438  1  95 F4                STA     <Decss+5,X      ; save to output string
00443A  1  FA                   PLX
00443B  1  F0 0C                BEQ     LAB_2A91        ; go set string pointer (AY) and exit (branch always)
00443D  1               
00443D  1               ; save last character, [EOT] and exit
00443D  1               LAB_2A89:
00443D  1  DA                   PHX
00443E  1  BB                   TYX
00443F  1  95 EF                STA     <Decss,X        ; save last character to output string
004441  1  FA                   PLX
004442  1               ; set null terminator and exit
004442  1               LAB_2A8C:
004442  1  A9 00                LDA     #$00            ; set null terminator
004444  1  DA                   PHX
004445  1  BB                   TYX
004446  1  95 F0                STA     <Decss+1,X      ; save after last character
004448  1  FA                   PLX
004449  1               ; set string pointer (AY) and exit
004449  1               LAB_2A91:
004449  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
00444B  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
00444D  1  60                   RTS
00444E  1               
00444E  1               ; perform power function
00444E  1               
00444E  1               LAB_POWER:
00444E  1  F0 42                BEQ     LAB_EXP         ; go do  EXP()
004450  1               
004450  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
004452  1  D0 03                BNE     LAB_2ABF        ; branch if FAC2<>0
004454  1               
004454  1  4C 5C 3D             JMP     LAB_24F3        ; clear FAC1 exponent and sign and return
004457  1               
004457  1               LAB_2ABF:
004457  1  A2 9C                LDX     #<func_l        ; set destination pointer low byte
004459  1  A0 00                LDY     #>func_l        ; set destination pointer high byte
00445B  1  20 51 40             JSR     LAB_2778        ; pack FAC1 into (XY)
00445E  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
004460  1  10 0F                BPL     LAB_2AD9        ; branch if FAC2>0
004462  1               
004462  1               ; else FAC2 is -ve and can only be raised to an
004462  1               ; integer power which gives an x +j0 result
004462  1  20 DF 41             JSR     LAB_INT         ; perform INT
004465  1  A9 9C                LDA     #<func_l        ; set source pointer low byte
004467  1  A0 00                LDY     #>func_l        ; set source pointer high byte
004469  1  20 11 41             JSR     LAB_27F8        ; compare FAC1 with (AY)
00446C  1  D0 03                BNE     LAB_2AD9        ; branch if FAC1 <> (AY) to allow Function Call error
00446E  1               ; this will leave FAC1 -ve and cause a Function Call
00446E  1               ; error when LOG() is called
00446E  1               
00446E  1  98                   TYA                     ; clear sign b7
00446F  1  A4 5B                LDY     <Temp3          ; save mantissa 3 from INT() function as sign in Y
004471  1               ; for possible later negation, b0
004471  1               LAB_2AD9:
004471  1  20 C9 3C             JSR     LAB_279D        ; save FAC1 sign and copy ABS(FAC2) to FAC1
004474  1  98                   TYA                     ; copy sign back ..
004475  1  48                   PHA                     ; .. and save it
004476  1  20 05 3E             JSR     LAB_LOG         ; do LOG(n)
004479  1  A9 9C                LDA     #<garb_l        ; set pointer low byte
00447B  1  A0 00                LDY     #>garb_l        ; set pointer high byte
00447D  1  20 43 3E             JSR     LAB_25FB        ; do convert AY, FCA1*(AY) (square the value)
004480  1  20 92 44             JSR     LAB_EXP         ; go do EXP(n)
004483  1  68                   PLA                     ; pull sign from stack
004484  1  4A                   LSR     A               ; b0 is to be tested, shift to Cb
004485  1  90 0A                BCC     LAB_2AF9        ; if no bit then exit
004487  1               
004487  1               ; Perform negation
004487  1               ; do - FAC1
004487  1               
004487  1               LAB_GTHAN:
004487  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004489  1  F0 06                BEQ     LAB_2AF9        ; exit if <FAC1_e = $00
00448B  1               
00448B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00448D  1  49 FF                EOR     #$FF            ; complement it
00448F  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004491  1               LAB_2AF9:
004491  1  60                   RTS
004492  1               
004492  1               ; perform EXP()	(x^e)
004492  1               
004492  1               LAB_EXP:
004492  1  A9 3F                LDA     #<LAB_2AFA      ; set 1.443 pointer low byte
004494  1  A0 18                LDY     #>LAB_2AFA      ; set 1.443 pointer high byte
004496  1  20 43 3E             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
004499  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
00449B  1  69 50                ADC     #$50            ; +$50/$100
00449D  1  90 03                BCC     LAB_2B2B        ; skip rounding if no carry
00449F  1               
00449F  1  20 DB 40             JSR     LAB_27C2        ; round FAC1 (no check)
0044A2  1               LAB_2B2B:
0044A2  1  85 A3                STA     <FAC2_r         ; save FAC2 rounding byte
0044A4  1  20 C7 40             JSR     LAB_27AE        ; copy FAC1 to FAC2
0044A7  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0044A9  1  C9 88                CMP     #$88            ; compare with EXP limit (256d)
0044AB  1  90 03                BCC     LAB_2B39        ; branch if less
0044AD  1               
0044AD  1               LAB_2B36:
0044AD  1  20 28 3F             JSR     LAB_2690        ; handle overflow and underflow
0044B0  1               LAB_2B39:
0044B0  1  20 DF 41             JSR     LAB_INT         ; perform INT
0044B3  1  A5 5B                LDA     <Temp3          ; get mantissa 3 from INT() function
0044B5  1  18                   CLC                     ; clear carry for add
0044B6  1  69 81                ADC     #$81            ; normalise +1
0044B8  1  F0 F3                BEQ     LAB_2B36        ; if $00 go handle overflow
0044BA  1               
0044BA  1  38                   SEC                     ; set carry for subtract
0044BB  1  E9 01                SBC     #$01            ; now correct for exponent
0044BD  1  48                   PHA                     ; save FAC2 exponent
0044BE  1               
0044BE  1               ; swap FAC1 and FAC2
0044BE  1  A2 04                LDX     #$04            ; 4 bytes to do
0044C0  1               LAB_2B49:
0044C0  1  B5 B3                LDA     <FAC2_e,X       ; get FAC2,X
0044C2  1  B4 AC                LDY     <FAC1_e,X       ; get FAC1,X
0044C4  1  95 AC                STA     <FAC1_e,X       ; save FAC1,X
0044C6  1  94 B3                STY     <FAC2_e,X       ; save FAC2,X
0044C8  1  CA                   DEX                     ; decrement count/index
0044C9  1  10 F5                BPL     LAB_2B49        ; loop if not all done
0044CB  1               
0044CB  1  A5 A3                LDA     <FAC2_r         ; get FAC2 rounding byte
0044CD  1  85 B9                STA     <FAC1_r         ; save as FAC1 rounding byte
0044CF  1  20 AA 3C             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
0044D2  1  20 87 44             JSR     LAB_GTHAN       ; do - FAC1
0044D5  1  A9 43                LDA     #<LAB_2AFE      ; set counter pointer low byte
0044D7  1  A0 18                LDY     #>LAB_2AFE      ; set counter pointer high byte
0044D9  1  20 FA 44             JSR     LAB_2B84        ; go do series evaluation
0044DC  1  A9 00                LDA     #$00            ; clear A
0044DE  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
0044E0  1  68                   PLA                     ;.get saved FAC2 exponent
0044E1  1  4C 0D 3F             JMP     LAB_2675        ; test and adjust accumulators and return
0044E4  1               
0044E4  1               ; ^2 then series evaluation
0044E4  1               
0044E4  1               LAB_2B6E:
0044E4  1  85 BA                STA     <Cptrl          ; save count pointer low byte
0044E6  1  84 BB                STY     <Cptrh          ; save count pointer high byte
0044E8  1  20 47 40             JSR     LAB_276E        ; pack FAC1 into <Adatal
0044EB  1  A9 A4                LDA     #<Adatal        ; set pointer low byte (Y already $00)
0044ED  1  20 43 3E             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0044F0  1  20 FE 44             JSR     LAB_2B88        ; go do series evaluation
0044F3  1  A9 A4                LDA     #<Adatal        ; pointer to original # low byte
0044F5  1  A0 00                LDY     #>Adatal        ; pointer to original # high byte
0044F7  1  4C 43 3E             JMP     LAB_25FB        ; do convert AY, FCA1*(AY) and return
0044FA  1               
0044FA  1               ; series evaluation
0044FA  1               
0044FA  1               LAB_2B84:
0044FA  1  85 BA                STA     <Cptrl          ; save count pointer low byte
0044FC  1  84 BB                STY     <Cptrh          ; save count pointer high byte
0044FE  1               LAB_2B88:
0044FE  1  A2 A8                LDX     #<numexp        ; set pointer low byte
004500  1  20 49 40             JSR     LAB_2770        ; set pointer high byte and pack FAC1 into <numexp
004503  1  8B DA A2 01          LDAINDIRECTY Cptrl      ; get constants count
004507  1  B5 BA C9 00  
00450B  1  D0 04 A2 00  
004519  1  85 B1                STA     <numcon         ; save constants count
00451B  1  A4 BA                LDY     <Cptrl          ; get count pointer low byte
00451D  1  C8                   INY                     ; increment it (now constants pointer)
00451E  1  98                   TYA                     ; copy it
00451F  1  D0 02                BNE     LAB_2B97        ; skip next if no overflow
004521  1               
004521  1  E6 BB                INC     <Cptrh          ; else increment high byte
004523  1               LAB_2B97:
004523  1  85 BA                STA     <Cptrl          ; save low byte
004525  1  A4 BB                LDY     <Cptrh          ; get high byte
004527  1               LAB_2B9B:
004527  1  20 43 3E             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
00452A  1  A5 BA                LDA     <Cptrl          ; get constants pointer low byte
00452C  1  A4 BB                LDY     <Cptrh          ; get constants pointer high byte
00452E  1  18                   CLC                     ; clear carry for add
00452F  1  69 04                ADC     #$04            ; +4 to  low pointer (4 bytes per constant)
004531  1  90 01                BCC     LAB_2BA8        ; skip next if no overflow
004533  1               
004533  1  C8                   INY                     ; increment high byte
004534  1               LAB_2BA8:
004534  1  85 BA                STA     <Cptrl          ; save pointer low byte
004536  1  84 BB                STY     <Cptrh          ; save pointer high byte
004538  1  20 C2 3C             JSR     LAB_246C        ; add (AY) to FAC1
00453B  1  A9 A8                LDA     #<numexp        ; set pointer low byte to partial @ <numexp
00453D  1  A0 00                LDY     #>numexp        ; set pointer high byte to partial @ <numexp
00453F  1  C6 B1                DEC     <numcon         ; decrement constants count
004541  1  D0 E4                BNE     LAB_2B9B        ; loop until all done
004543  1               
004543  1  60                   RTS
004544  1               
004544  1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
004544  1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
004544  1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
004544  1               
004544  1               ; Entropy = 7.997442 bits per byte
004544  1               ; Optimum compression would reduce these 65536 bytes by 0 percent
004544  1               
004544  1               ; Chi square distribution for 65536 samples is 232.01, and
004544  1               ; randomly would exceed this value 75.00 percent of the time
004544  1               
004544  1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
004544  1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
004544  1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
004544  1               
004544  1               LAB_RND:
004544  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004546  1  F0 07                BEQ     NextPRN         ; do next random # if zero
004548  1               
004548  1               ; else get seed into random number store
004548  1  A2 E1                LDX     #<Rbyte4        ; set PRNG pointer low byte
00454A  1  A0 00                LDY     #$00            ; set PRNG pointer high byte
00454C  1  20 51 40             JSR     LAB_2778        ; pack FAC1 into (XY)
00454F  1               NextPRN:
00454F  1  A2 AF                LDX     #$AF            ; set EOR byte
004551  1  A0 13                LDY     #$13            ; do this nineteen times
004553  1               LoopPRN:
004553  1  06 E2                ASL     <Rbyte1         ; shift PRNG most significant byte
004555  1  26 E3                ROL     <Rbyte2         ; shift PRNG middle byte
004557  1  26 E4                ROL     <Rbyte3         ; shift PRNG least significant byte
004559  1  26 E1                ROL     <Rbyte4         ; shift PRNG extra byte
00455B  1  90 05                BCC     Ninc1           ; branch if bit 32 clear
00455D  1               
00455D  1  8A                   TXA                     ; set EOR byte
00455E  1  45 E2                EOR     <Rbyte1         ; EOR PRNG extra byte
004560  1  85 E2                STA     <Rbyte1         ; save new PRNG extra byte
004562  1               Ninc1:
004562  1  88                   DEY                     ; decrement loop count
004563  1  D0 EE                BNE     LoopPRN         ; loop if not all done
004565  1               
004565  1  A2 02                LDX     #$02            ; three bytes to copy
004567  1               CopyPRNG:
004567  1  B5 E2                LDA     <Rbyte1,X       ; get PRNG byte
004569  1  95 AD                STA     <FAC1_1,X       ; save FAC1 byte
00456B  1  CA                   DEX
00456C  1  10 F9                BPL     CopyPRNG        ; loop if not complete
00456E  1               
00456E  1  A9 80                LDA     #$80            ; set the exponent
004570  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004572  1               
004572  1  0A                   ASL     A               ; clear A
004573  1  85 B0                STA     <FAC1_s         ; save FAC1 sign
004575  1               
004575  1  4C 3E 3D             JMP     LAB_24D5        ; normalise FAC1 and return
004578  1               
004578  1               ; perform COS()
004578  1               
004578  1               LAB_COS:
004578  1  A9 60                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
00457A  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
00457C  1  20 C2 3C             JSR     LAB_246C        ; add (AY) to FAC1
00457F  1               
00457F  1               ; perform SIN()
00457F  1               
00457F  1               LAB_SIN:
00457F  1  20 C4 40             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004582  1  A9 75                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
004584  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
004586  1  A6 B7                LDX     <FAC2_s         ; get FAC2 sign (b7)
004588  1  20 53 3F             JSR     LAB_26C2        ; divide by (AY) (X=sign)
00458B  1  20 C4 40             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00458E  1  20 DF 41             JSR     LAB_INT         ; perform INT
004591  1  A9 00                LDA     #$00            ; clear byte
004593  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
004595  1  20 AA 3C             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
004598  1  A9 A7                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
00459A  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
00459C  1  20 A7 3C             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
00459F  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0045A1  1  48                   PHA                     ; save FAC1 sign
0045A2  1  10 0D                BPL     LAB_2C35        ; branch if +ve
0045A4  1               
0045A4  1               ; FAC1 sign was -ve
0045A4  1  20 BE 3C             JSR     LAB_244E        ; add 0.5 to FAC1
0045A7  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0045A9  1  30 09                BMI     LAB_2C38        ; branch if -ve
0045AB  1               
0045AB  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
0045AD  1  49 FF                EOR     #$FF            ; toggle flag
0045AF  1  85 63                STA     <Cflag          ; save comparison evaluation flag
0045B1  1               LAB_2C35:
0045B1  1  20 87 44             JSR     LAB_GTHAN       ; do - FAC1
0045B4  1               LAB_2C38:
0045B4  1  A9 A7                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
0045B6  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
0045B8  1  20 C2 3C             JSR     LAB_246C        ; add (AY) to FAC1
0045BB  1  68                   PLA                     ; restore FAC1 sign
0045BC  1  10 03                BPL     LAB_2C45        ; branch if was +ve
0045BE  1               
0045BE  1               ; else correct FAC1
0045BE  1  20 87 44             JSR     LAB_GTHAN       ; do - FAC1
0045C1  1               LAB_2C45:
0045C1  1  A9 64                LDA     #<LAB_2C84      ; set pointer low byte to counter
0045C3  1  A0 18                LDY     #>LAB_2C84      ; set pointer high byte to counter
0045C5  1  4C E4 44             JMP     LAB_2B6E        ; ^2 then series evaluation and return
0045C8  1               
0045C8  1               ; perform TAN()
0045C8  1               
0045C8  1               LAB_TAN:
0045C8  1  20 47 40             JSR     LAB_276E        ; pack FAC1 into <Adatal
0045CB  1  A9 00                LDA     #$00            ; clear byte
0045CD  1  85 63                STA     <Cflag          ; clear comparison evaluation flag
0045CF  1  20 7F 45             JSR     LAB_SIN         ; go do SIN(n)
0045D2  1  A2 9C                LDX     #<func_l        ; set sin(n) pointer low byte
0045D4  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
0045D6  1  20 51 40             JSR     LAB_2778        ; pack FAC1 into (XY)
0045D9  1  A9 A4                LDA     #<Adatal        ; set n pointer low addr
0045DB  1  A0 00                LDY     #>Adatal        ; set n pointer high addr
0045DD  1  20 D7 3F             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0045E0  1  A9 00                LDA     #$00            ; clear byte
0045E2  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
0045E4  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
0045E6  1  20 F0 45             JSR     LAB_2C74        ; save flag and go do series evaluation
0045E9  1               
0045E9  1  A9 9C                LDA     #<func_l        ; set sin(n) pointer low byte
0045EB  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
0045ED  1  4C 5B 3F             JMP     LAB_26CA        ; convert AY and do (AY)/FAC1
0045F0  1               
0045F0  1               LAB_2C74:
0045F0  1  48                   PHA                     ; save comparison evaluation flag
0045F1  1  4C B1 45             JMP     LAB_2C35        ; go do series evaluation
0045F4  1               
0045F4  1               ; perform USR()
0045F4  1               
0045F4  1               LAB_USR:
0045F4  1  20 0A 00             JSR     Usrjmp          ; call user code
0045F7  1  4C 6E 2F             JMP     LAB_1BFB        ; scan for ")", else do syntax error then warm start
0045FA  1               
0045FA  1               ; perform ATN()
0045FA  1               
0045FA  1               LAB_ATN:
0045FA  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0045FC  1  48                   PHA                     ; save sign
0045FD  1  10 03                BPL     LAB_2CA1        ; branch if +ve
0045FF  1               
0045FF  1  20 87 44             JSR     LAB_GTHAN       ; else do - FAC1
004602  1               LAB_2CA1:
004602  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004604  1  48                   PHA                     ; push exponent
004605  1  C9 81                CMP     #$81            ; compare with 1
004607  1  90 07                BCC     LAB_2CAF        ; branch if FAC1<1
004609  1               
004609  1  A9 9A                LDA     #<LAB_259C      ; set 1 pointer low byte
00460B  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
00460D  1  20 5B 3F             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1
004610  1               LAB_2CAF:
004610  1  A9 79                LDA     #<LAB_2CC9      ; set pointer low byte to counter
004612  1  A0 18                LDY     #>LAB_2CC9      ; set pointer high byte to counter
004614  1  20 E4 44             JSR     LAB_2B6E        ; ^2 then series evaluation
004617  1  68                   PLA                     ; restore old FAC1 exponent
004618  1  C9 81                CMP     #$81            ; compare with 1
00461A  1  90 07                BCC     LAB_2CC2        ; branch if FAC1<1
00461C  1               
00461C  1  A9 60                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
00461E  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
004620  1  20 A7 3C             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
004623  1               LAB_2CC2:
004623  1  68                   PLA                     ; restore FAC1 sign
004624  1  10 16                BPL     LAB_2D04        ; exit if was +ve
004626  1               
004626  1  4C 87 44             JMP     LAB_GTHAN       ; else do - FAC1 and return
004629  1               
004629  1               ; perform BITSET
004629  1               
004629  1               LAB_BITSET:
004629  1  20 84 3B             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
00462C  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
00462E  1  B0 20                BCS     FCError         ; branch if > 7
004630  1               
004630  1  A9 00                LDA     #$00            ; clear A
004632  1  38                   SEC                     ; set the carry
004633  1               S_Bits:
004633  1  2A                   ROL     A               ; shift bit
004634  1  CA                   DEX                     ; decrement bit number
004635  1  10 FC                BPL     S_Bits          ; loop if still +ve
004637  1               
004637  1  E8                   INX                     ; make X = $00
004638  1  01 11                ORA     (<Itempl,X)     ; or with byte via temporary integer (addr)
00463A  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
00463C  1               LAB_2D04:
00463C  1  60                   RTS
00463D  1               
00463D  1               ; perform BITCLR
00463D  1               
00463D  1               LAB_BITCLR:
00463D  1  20 84 3B             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004640  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
004642  1  B0 0C                BCS     FCError         ; branch if > 7
004644  1               
004644  1  A9 FF                LDA     #$FF            ; set A
004646  1               S_Bitc:
004646  1  2A                   ROL     A               ; shift bit
004647  1  CA                   DEX                     ; decrement bit number
004648  1  10 FC                BPL     S_Bitc          ; loop if still +ve
00464A  1               
00464A  1  E8                   INX                     ; make X = $00
00464B  1  21 11                AND     (<Itempl,X)     ; and with byte via temporary integer (addr)
00464D  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
00464F  1  60                   RTS
004650  1               
004650  1               FCError:
004650  1  4C E2 32             JMP     LAB_FCER        ; do function call error then warm start
004653  1               
004653  1               ; perform BITTST()
004653  1               
004653  1               LAB_BTST:
004653  1  22 BC 00 00          JSL     LAB_IGBY        ; increment BASIC pointer
004657  1  20 84 3B             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
00465A  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
00465C  1  B0 F2                BCS     FCError         ; branch if > 7
00465E  1               
00465E  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
004662  1  C9 29                CMP     #')'            ; is next character ")"
004664  1  F0 03                BEQ     TST_OK          ; if ")" go do rest of function
004666  1               
004666  1  4C 83 2F             JMP     LAB_SNER        ; do syntax error then warm start
004669  1               
004669  1               TST_OK:
004669  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
00466D  1  A9 00                LDA     #$00            ; clear A
00466F  1  38                   SEC                     ; set the carry
004670  1               T_Bits:
004670  1  2A                   ROL     A               ; shift bit
004671  1  CA                   DEX                     ; decrement bit number
004672  1  10 FC                BPL     T_Bits          ; loop if still +ve
004674  1               
004674  1  E8                   INX                     ; make X = $00
004675  1  21 11                AND     (<Itempl,X)     ; AND with byte via temporary integer (addr)
004677  1  F0 02                BEQ     LAB_NOTT        ; branch if zero (already correct)
004679  1               
004679  1  A9 FF                LDA     #$FF            ; set for -1 result
00467B  1               LAB_NOTT:
00467B  1  4C F4 40             JMP     LAB_27DB        ; go do SGN tail
00467E  1               
00467E  1               ; perform BIN$()
00467E  1               
00467E  1               LAB_BINS:
00467E  1  E0 19                CPX     #$19            ; max + 1
004680  1  B0 71                BCS     BinFErr         ; exit if too big ( > or = )
004682  1               
004682  1  86 78                STX     <TempB          ; save # of characters ($00 = leading zero remove)
004684  1  A9 18                LDA     #$18            ; need A byte long space
004686  1  20 89 35             JSR     LAB_MSSP        ; make string space A bytes long
004689  1  A0 17                LDY     #$17            ; set index
00468B  1  A2 18                LDX     #$18            ; character count
00468D  1               NextB1:
00468D  1  46 11                LSR     <nums_1         ; shift highest byte
00468F  1  66 12                ROR     <nums_2         ; shift middle byte
004691  1  66 13                ROR     <nums_3         ; shift lowest byte bit 0 to carry
004693  1  8A                   TXA                     ; load with "0"/2
004694  1  2A                   ROL     A               ; shift in carry
004695  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string + index
004699  1  01 B5 AD C9  
00469D  1  00 D0 04 A2  
0046AB  1  88                   DEY                     ; decrement index
0046AC  1  10 DF                BPL     NextB1          ; loop if not done
0046AE  1               
0046AE  1  A5 78                LDA     <TempB          ; get # of characters
0046B0  1  F0 0A                BEQ     EndBHS          ; branch if truncate
0046B2  1               
0046B2  1  AA                   TAX                     ; copy length to X
0046B3  1  38                   SEC                     ; set carry for add !
0046B4  1  49 FF                EOR     #$FF            ; 1's complement
0046B6  1  69 18                ADC     #$18            ; add 24d
0046B8  1  F0 30                BEQ     GoPr2           ; if zero print whole string
0046BA  1               
0046BA  1  D0 23                BNE     GoPr1           ; else go make output string
0046BC  1               
0046BC  1               ; this is the exit code and is also used by HEX$()
0046BC  1               ; truncate string to remove leading "0"s
0046BC  1               
0046BC  1               EndBHS:
0046BC  1  A8                   TAY                     ; clear index (A=0, X=length here)
0046BD  1               NextB2:
0046BD  1  8B DA A2 01          LDAINDIRECTY str_pl     ; get character from string
0046C1  1  B5 AD C9 00  
0046C5  1  D0 04 A2 00  
0046D3  1  C9 30                CMP     #'0'            ; compare with "0"
0046D5  1  D0 07                BNE     GoPr            ; if not "0" then go print string from here
0046D7  1               
0046D7  1  CA                   DEX                     ; decrement character count
0046D8  1  F0 03                BEQ     GoPr3           ; if zero then end of string so go print it
0046DA  1               
0046DA  1  C8                   INY                     ; else increment index
0046DB  1  10 E0                BPL     NextB2          ; loop always
0046DD  1               
0046DD  1               ; make fixed length output string - ignore overflows!
0046DD  1               
0046DD  1               GoPr3:
0046DD  1  E8                   INX                     ; need at least 1 character
0046DE  1               GoPr:
0046DE  1  98                   TYA                     ; copy result
0046DF  1               GoPr1:
0046DF  1  18                   CLC                     ; clear carry for add
0046E0  1  65 AD                ADC     <str_pl         ; add low address
0046E2  1  85 AD                STA     <str_pl         ; save low address
0046E4  1  A9 00                LDA     #$00            ; do high byte
0046E6  1  65 AE                ADC     <str_ph         ; add high address
0046E8  1  85 AE                STA     <str_ph         ; save high address
0046EA  1               GoPr2:
0046EA  1  86 AC                STX     <str_ln         ; X holds string length
0046EC  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
0046F0  1  4C EC 35             JMP     LAB_RTST        ; check for space on descriptor stack then put address
0046F3  1               ; and length on descriptor stack and update stack pointers
0046F3  1               
0046F3  1               BinFErr:
0046F3  1  4C E2 32             JMP     LAB_FCER        ; do function call error then warm start
0046F6  1               
0046F6  1               ; perform HEX$()
0046F6  1               
0046F6  1               LAB_HEXS:
0046F6  1  E0 07                CPX     #$07            ; max + 1
0046F8  1  B0 F9                BCS     BinFErr         ; exit if too big ( > or = )
0046FA  1               
0046FA  1  86 78                STX     <TempB          ; save # of characters
0046FC  1               
0046FC  1  A9 06                LDA     #$06            ; need 6 bytes for string
0046FE  1  20 89 35             JSR     LAB_MSSP        ; make string space A bytes long
004701  1  A0 05                LDY     #$05            ; set string index
004703  1               
004703  1  F8                   SED                     ; need decimal mode for nibble convert
004704  1  A5 13                LDA     <nums_3         ; get lowest byte
004706  1  20 24 47             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004709  1  A5 12                LDA     <nums_2         ; get middle byte
00470B  1  20 24 47             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
00470E  1  A5 11                LDA     <nums_1         ; get highest byte
004710  1  20 24 47             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004713  1  D8                   CLD                     ; back to binary
004714  1               
004714  1  A2 06                LDX     #$06            ; character count
004716  1  A5 78                LDA     <TempB          ; get # of characters
004718  1  F0 A2                BEQ     EndBHS          ; branch if truncate
00471A  1               
00471A  1  AA                   TAX                     ; copy length to X
00471B  1  38                   SEC                     ; set carry for add !
00471C  1  49 FF                EOR     #$FF            ; 1's complement
00471E  1  69 06                ADC     #$06            ; add 6d
004720  1  F0 C8                BEQ     GoPr2           ; if zero print whole string
004722  1               
004722  1  D0 BB                BNE     GoPr1           ; else go make output string (branch always)
004724  1               
004724  1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
004724  1               
004724  1               LAB_A2HX:
004724  1  AA                   TAX                     ; save byte
004725  1  29 0F                AND     #$0F            ; mask off top bits
004727  1  20 2F 47             JSR     LAB_AL2X        ; convert low nibble to ASCII and output
00472A  1  8A                   TXA                     ; get byte back
00472B  1  4A                   LSR     A               ; /2	shift high nibble to low nibble
00472C  1  4A                   LSR     A               ; /4
00472D  1  4A                   LSR     A               ; /8
00472E  1  4A                   LSR     A               ; /16
00472F  1               LAB_AL2X:
00472F  1  C9 0A                CMP     #$0A            ; set carry for +1 if >9
004731  1  69 30                ADC     #'0'            ; add ASCII "0"
004733  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string
004737  1  01 B5 AD C9  
00473B  1  00 D0 04 A2  
004749  1  88                   DEY                     ; decrement counter
00474A  1  60                   RTS
00474B  1               
00474B  1               LAB_NLTO:
00474B  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
00474D  1  A9 00                LDA     #$00            ; clear sign compare
00474F  1               LAB_MLTE:
00474F  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004751  1  8A                   TXA                     ; restore character
004752  1  20 AA 42             JSR     LAB_2912        ; evaluate new ASCII digit
004755  1               
004755  1               ; gets here if the first character was "$" for hex
004755  1               ; get hex number
004755  1               
004755  1               LAB_CHEX:
004755  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004759  1  90 0A                BCC     LAB_ISHN        ; branch if numeric character
00475B  1               
00475B  1  09 20                ORA     #$20            ; case convert, allow "A" to "F" and "a" to "f"
00475D  1  E9 61                SBC     #'a'            ; subtract "a" (carry set here)
00475F  1  C9 06                CMP     #$06            ; compare normalised with $06 (max+1)
004761  1  B0 2B                BCS     LAB_EXCH        ; exit if >"f" or <"0"
004763  1               
004763  1  69 0A                ADC     #$0A            ; convert to nibble
004765  1               LAB_ISHN:
004765  1  29 0F                AND     #$0F            ; convert to binary
004767  1  AA                   TAX                     ; save nibble
004768  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00476A  1  F0 E3                BEQ     LAB_MLTE        ; skip multiply if zero
00476C  1               
00476C  1  69 04                ADC     #$04            ; add four to exponent (*16 - carry clear here)
00476E  1  90 DB                BCC     LAB_NLTO        ; if no overflow do evaluate digit
004770  1               
004770  1               LAB_MLTO:
004770  1  4C CD 3D             JMP     LAB_2564        ; do overflow error and warm start
004773  1               
004773  1               LAB_NXCH:
004773  1  AA                   TAX                     ; save bit
004774  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004776  1  F0 06                BEQ     LAB_MLBT        ; skip multiply if zero
004778  1               
004778  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*2)
00477A  1  F0 F4                BEQ     LAB_MLTO        ; do overflow error if = $00
00477C  1               
00477C  1  A9 00                LDA     #$00            ; clear sign compare
00477E  1               LAB_MLBT:
00477E  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004780  1  8A                   TXA                     ; restore bit
004781  1  20 AA 42             JSR     LAB_2912        ; evaluate new ASCII digit
004784  1               
004784  1               ; gets here if the first character was  "%" for binary
004784  1               ; get binary number
004784  1               
004784  1               LAB_CBIN:
004784  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004788  1  49 30                EOR     #'0'            ; convert "0" to 0 etc.
00478A  1  C9 02                CMP     #$02            ; compare with max+1
00478C  1  90 E5                BCC     LAB_NXCH        ; branch exit if < 2
00478E  1               
00478E  1               LAB_EXCH:
00478E  1  4C 8F 42             JMP     LAB_28F6        ; evaluate -ve flag and return
004791  1               
004791  1               ; ctrl-c check routine. .includes limited "life" byte save for INGET routine
004791  1               ; now also the code that checks to see if an interrupt has occurred
004791  1               
004791  1               CTRLC:
004791  1  AF 00 02 00          LDA     f:ccflag        ; get [CTRL-C] check flag
004795  1  D0 21                BNE     LAB_FBA2        ; exit if inhibited
004797  1               
004797  1  20 C1 18             JSR     V_INPT          ; scan input device
00479A  1  B0 11                BCS     LAB_FBA0        ; exit if buffer empty
00479C  1               
00479C  1  8F 01 02 00          STA     f:ccbyte        ; save received byte
0047A0  1  A9 20                LDA     #$20            ; "life" timer for bytes
0047A2  1  8F 02 02 00          STA     f:ccnull        ; set countdown
0047A6  1  AF 01 02 00          LDA     f:ccbyte
0047AA  1  4C 2F 27             JMP     LAB_1636        ; return to BASIC
0047AD  1               
0047AD  1               LAB_FBA0:
0047AD  1  AF 02 02 00          LDA     f:ccnull        ; get countdown byte
0047B1  1  F0 05                BEQ     LAB_FBA2        ; exit if finished
0047B3  1  3A                   DEC     A
0047B4  1  8F 02 02 00          STA     f:ccnull        ; else decrement countdown
0047B8  1               LAB_FBA2:
0047B8  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
0047BA  1  20 C7 47             JSR     LAB_CKIN        ; go check interrupt
0047BD  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
0047BF  1  20 C7 47             JSR     LAB_CKIN        ; go check interrupt
0047C2  1  AF 01 02 00          LDA     f:ccbyte
0047C6  1               LAB_CRTS:
0047C6  1  60                   RTS
0047C7  1               
0047C7  1               ; check whichever interrupt is indexed by X
0047C7  1               
0047C7  1               LAB_CKIN:
0047C7  1  B5 00                LDA     <PLUS_0,X       ; get interrupt flag byte
0047C9  1  10 FB                BPL     LAB_CRTS        ; branch if interrupt not enabled
0047CB  1               
0047CB  1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
0047CB  1               ; automatically enable the interrupt when we exit
0047CB  1               
0047CB  1  0A                   ASL     A               ; move happened bit to setup bit
0047CC  1  29 40                AND     #$40            ; mask happened bits
0047CE  1  F0 F6                BEQ     LAB_CRTS        ; if no interrupt then exit
0047D0  1               
0047D0  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
0047D2  1               
0047D2  1  8A                   TXA                     ; copy index ..
0047D3  1  A8                   TAY                     ; .. to Y
0047D4  1               
0047D4  1  68                   PLA                     ; dump return address low byte, call from CTRL-C
0047D5  1  68                   PLA                     ; dump return address high byte
0047D6  1               
0047D6  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
0047D8  1  20 D3 22             JSR     LAB_1212        ; check room on stack for A bytes
0047DB  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0047DD  1  48                   PHA                     ; push on stack
0047DE  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0047E0  1  48                   PHA                     ; push on stack
0047E1  1  A5 88                LDA     <Clineh         ; get current line high byte
0047E3  1  48                   PHA                     ; push on stack
0047E4  1  A5 87                LDA     <Clinel         ; get current line low byte
0047E6  1  48                   PHA                     ; push on stack
0047E7  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
0047E9  1  48                   PHA                     ; push on stack
0047EA  1  DA                   PHX
0047EB  1  BB                   TYX
0047EC  1  B5 01                LDA     <PLUS_1,X       ; get interrupt code pointer low byte
0047EE  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
0047F0  1  B5 02                LDA     <PLUS_2,X       ; get interrupt code pointer high byte
0047F2  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
0047F4  1  FA                   PLX
0047F5  1  4C D1 26             JMP     LAB_15C2        ; go do interpreter inner loop
0047F8  1               ; can't RTS, we used the stack! the RTS from the ctrl-c
0047F8  1               ; check will be taken when the RETIRQ/RETNMI/RETURN is
0047F8  1               ; executed at the end of the subroutine
0047F8  1               
0047F8  1               ; get byte from input device, no waiting
0047F8  1               ; returns with carry set if byte in A
0047F8  1               
0047F8  1               INGET:
0047F8  1  20 C1 18             JSR     V_INPT          ; call scan input device
0047FB  1  90 0B                BCC     LAB_FB95        ; if byte go reset timer
0047FD  1               
0047FD  1  AF 02 02 00          LDA     f:ccnull        ; get countdown
004801  1  F0 0F                BEQ     LAB_FB96        ; exit if empty
004803  1               
004803  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004807  1  38                   SEC                     ; flag we got a byte
004808  1               LAB_FB95:
004808  1  A9 00                LDA     #$00            ; clear X
00480A  1  8F 02 02 00          STA     f:ccnull        ; clear timer because we got a byte
00480E  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004812  1               LAB_FB96:
004812  1  60                   RTS
004813  1               
004813  1               ; these routines only enable the interrupts if the set-up flag is set
004813  1               ; if not they have no effect
004813  1               
004813  1               ; perform IRQ {ON|OFF|CLEAR}
004813  1               
004813  1               LAB_IRQ:
004813  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004815  1  2C                   .BYTE   $2C             ; make next line BIT abs.
004816  1               
004816  1               ; perform NMI {ON|OFF|CLEAR}
004816  1               
004816  1               LAB_NMI:
004816  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004818  1  C9 93                CMP     #TK_ON          ; compare with token for ON
00481A  1  F0 11                BEQ     LAB_INON        ; go turn on interrupt
00481C  1               
00481C  1  C9 CA                CMP     #TK_OFF         ; compare with token for OFF
00481E  1  F0 07                BEQ     LAB_IOFF        ; go turn off interrupt
004820  1               
004820  1  49 A1                EOR     #TK_CLEAR       ; compare with token for CLEAR, A = $00 if = TK_CLEAR
004822  1  F0 0E                BEQ     LAB_INEX        ; go clear interrupt flags and return
004824  1               
004824  1  4C 83 2F             JMP     LAB_SNER        ; do syntax error then warm start
004827  1               
004827  1               LAB_IOFF:
004827  1  A9 7F                LDA     #$7F            ; clear A
004829  1  35 00                AND     <PLUS_0,X       ; AND with interrupt setup flag
00482B  1  10 05                BPL     LAB_INEX        ; go clear interrupt enabled flag and return
00482D  1               
00482D  1               LAB_INON:
00482D  1  B5 00                LDA     <PLUS_0,X       ; get interrupt setup flag
00482F  1  0A                   ASL     A               ; Shift bit to enabled flag
004830  1  15 00                ORA     <PLUS_0,X       ; OR with flag byte
004832  1               LAB_INEX:
004832  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004834  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer and return
004838  1  60                   RTS
004839  1               ; these routines set up the pointers and flags for the interrupt routines
004839  1               ; note that the interrupts are also enabled by these commands
004839  1               
004839  1               
004839  1               ; MAX() MIN() pre process
004839  1               
004839  1               LAB_MMPP:
004839  1  20 65 2E             JSR     LAB_EVEZ        ; process expression
00483C  1  4C 4C 2E             JMP     LAB_CTNM        ; check if source is numeric, else do type mismatch
00483F  1               
00483F  1               ; perform MAX()
00483F  1               
00483F  1               LAB_MAX:
00483F  1  20 6F 48             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004842  1               ; pull FAC2 and compare with FAC1
004842  1  10 FB                BPL     LAB_MAX         ; branch if no swap to do
004844  1               
004844  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004846  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004848  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
00484A  1  20 C7 3C             JSR     LAB_279B        ; copy FAC2 to FAC1
00484D  1  F0 F0                BEQ     LAB_MAX         ; go do next (branch always)
00484F  1               
00484F  1               ; perform MIN()
00484F  1               
00484F  1               LAB_MIN:
00484F  1  20 6F 48             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004852  1               ; pull FAC2 and compare with FAC1
004852  1  30 FB                BMI     LAB_MIN         ; branch if no swap to do
004854  1               
004854  1  F0 F9                BEQ     LAB_MIN         ; branch if no swap to do
004856  1               
004856  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004858  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
00485A  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
00485C  1  20 C7 3C             JSR     LAB_279B        ; copy FAC2 to FAC1
00485F  1  F0 EE                BEQ     LAB_MIN         ; go do next (branch always)
004861  1               
004861  1               ; exit routine. don't bother returning to the loop code
004861  1               ; check for correct exit, else so syntax error
004861  1               
004861  1               LAB_MMEC:
004861  1  C9 29                CMP     #')'            ; is it end of function?
004863  1  D0 07                BNE     LAB_MMSE        ; if not do MAX MIN syntax error
004865  1               
004865  1  68                   PLA                     ; dump return address low byte
004866  1  68                   PLA                     ; dump return address high byte
004867  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to chr past ")")
00486B  1  60                   RTS
00486C  1               LAB_MMSE:
00486C  1  4C 83 2F             JMP     LAB_SNER        ; do syntax error then warm start
00486F  1               
00486F  1               ; check for next, evaluate and return or exit
00486F  1               ; this is the routine that does most of the work
00486F  1               
00486F  1               LAB_PHFA:
00486F  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
004873  1  C9 2C                CMP     #','            ; is there more ?
004875  1  D0 EA                BNE     LAB_MMEC        ; if not go do end check
004877  1               
004877  1               ; push FAC1
004877  1  20 D3 40             JSR     LAB_27BA        ; round FAC1
00487A  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
00487C  1  09 7F                ORA     #$7F            ; set all non sign bits
00487E  1  25 AD                AND     <FAC1_1         ; AND FAC1 mantissa1 (AND in sign bit)
004880  1  48                   PHA                     ; push on stack
004881  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004883  1  48                   PHA                     ; push on stack
004884  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004886  1  48                   PHA                     ; push on stack
004887  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004889  1  48                   PHA                     ; push on stack
00488A  1               
00488A  1  22 BC 00 00          JSL     LAB_IGBY        ; scan and get next BASIC byte (after ",")
00488E  1  20 49 2E             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
004891  1               ; else do type mismatch
004891  1               
004891  1               ; pop FAC2 (MAX/MIN expression so far)
004891  1  68                   PLA                     ; pop exponent
004892  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
004894  1  68                   PLA                     ; pop mantissa3
004895  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004897  1  68                   PLA                     ; pop mantissa1
004898  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
00489A  1  68                   PLA                     ; pop sign/mantissa1
00489B  1  85 B4                STA     <FAC2_1         ; save FAC2 sign/mantissa1
00489D  1  85 B7                STA     <FAC2_s         ; save FAC2 sign
00489F  1               
00489F  1               ; compare FAC1 with (packed) FAC2
00489F  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
0048A1  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
0048A3  1  4C 11 41             JMP     LAB_27F8        ; compare FAC1 with FAC2 (AY) and return
0048A6  1               ; returns A=$00 if FAC1 = (AY)
0048A6  1               ; returns A=$01 if FAC1 > (AY)
0048A6  1               ; returns A=$FF if FAC1 < (AY)
0048A6  1               
0048A6  1               ; perform WIDTH
0048A6  1               
0048A6  1               LAB_WDTH:
0048A6  1  C9 2C                CMP     #','            ; is next byte ","
0048A8  1  F0 1C                BEQ     LAB_TBSZ        ; if so do tab size
0048AA  1               
0048AA  1  20 F9 3A             JSR     LAB_GTBY        ; get byte parameter
0048AD  1  8A                   TXA                     ; copy width to A
0048AE  1  F0 0A                BEQ     LAB_NSTT        ; branch if set for infinite line
0048B0  1               
0048B0  1  E0 10                CPX     #$10            ; else make min width = 16d
0048B2  1  90 46                BCC     TabErr          ; if less do function call error and exit
0048B4  1               
0048B4  1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
0048B4  1               ; tab size greater than the line length.
0048B4  1               
0048B4  1  E4 64                CPX     <TabSiz         ; compare with tab size
0048B6  1  B0 02                BCS     LAB_NSTT        ; branch if >= tab size
0048B8  1               
0048B8  1  86 64                STX     <TabSiz         ; else make tab size = terminal width
0048BA  1               LAB_NSTT:
0048BA  1  86 0F                STX     <TWidth         ; set the terminal width
0048BC  1  22 C2 00 00          JSL     LAB_GBYT        ; get BASIC byte back
0048C0  1  F0 1A                BEQ     WExit           ; exit if no following
0048C2  1               
0048C2  1  C9 2C                CMP     #','            ; else is it ","
0048C4  1  D0 A6                BNE     LAB_MMSE        ; if not do syntax error
0048C6  1               
0048C6  1               LAB_TBSZ:
0048C6  1  20 F5 3A             JSR     LAB_SGBY        ; scan and get byte parameter
0048C9  1  8A                   TXA                     ; copy TAB size
0048CA  1  30 2E                BMI     TabErr          ; if >127 do function call error and exit
0048CC  1               
0048CC  1  E0 01                CPX     #$01            ; compare with min-1
0048CE  1  90 2A                BCC     TabErr          ; if <=1 do function call error and exit
0048D0  1               
0048D0  1  A5 0F                LDA     <TWidth         ; set flags for width
0048D2  1  F0 06                BEQ     LAB_SVTB        ; skip check if infinite line
0048D4  1               
0048D4  1  E4 0F                CPX     <TWidth         ; compare TAB with width
0048D6  1  F0 02                BEQ     LAB_SVTB        ; ok if =
0048D8  1               
0048D8  1  B0 20                BCS     TabErr          ; branch if too big
0048DA  1               
0048DA  1               LAB_SVTB:
0048DA  1  86 64                STX     <TabSiz         ; save TAB size
0048DC  1               
0048DC  1               ; calculate tab column limit from TAB size. The <Iclim is set to the last tab
0048DC  1               ; position on a line that still has at least one whole tab width between it
0048DC  1               ; and the end of the line.
0048DC  1               
0048DC  1               WExit:
0048DC  1  A5 0F                LDA     <TWidth         ; get width
0048DE  1  F0 06                BEQ     LAB_SULP        ; branch if infinite line
0048E0  1               
0048E0  1  C5 64                CMP     <TabSiz         ; compare with tab size
0048E2  1  B0 03                BCS     LAB_WDLP        ; branch if >= tab size
0048E4  1               
0048E4  1  85 64                STA     <TabSiz         ; else make tab size = terminal width
0048E6  1               LAB_SULP:
0048E6  1  38                   SEC                     ; set carry for subtract
0048E7  1               LAB_WDLP:
0048E7  1  E5 64                SBC     <TabSiz         ; subtract tab size
0048E9  1  B0 FC                BCS     LAB_WDLP        ; loop while no borrow
0048EB  1               
0048EB  1  65 64                ADC     <TabSiz         ; add tab size back
0048ED  1  18                   CLC                     ; clear carry for add
0048EE  1  65 64                ADC     <TabSiz         ; add tab size back again
0048F0  1  85 10                STA     <Iclim          ; save for now
0048F2  1  A5 0F                LDA     <TWidth         ; get width back
0048F4  1  38                   SEC                     ; set carry for subtract
0048F5  1  E5 10                SBC     <Iclim          ; subtract remainder
0048F7  1  85 10                STA     <Iclim          ; save tab column limit
0048F9  1               LAB_NOSQ:
0048F9  1  60                   RTS
0048FA  1               
0048FA  1               TabErr:
0048FA  1  4C E2 32             JMP     LAB_FCER        ; do function call error then warm start
0048FD  1               
0048FD  1               ; perform SQR()
0048FD  1               
0048FD  1               LAB_SQR:
0048FD  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
0048FF  1  30 F9                BMI     TabErr          ; if -ve do function call error
004901  1               
004901  1  A5 AC                LDA     <FAC1_e         ; get exponent
004903  1  F0 F4                BEQ     LAB_NOSQ        ; if zero just return
004905  1               
004905  1               ; else do root
004905  1  20 C4 40             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004908  1  A9 00                LDA     #$00            ; clear A
00490A  1               
00490A  1  85 77                STA     <FACt_3         ; clear remainder
00490C  1  85 76                STA     <FACt_2         ; ..
00490E  1  85 75                STA     <FACt_1         ; ..
004910  1  85 78                STA     <TempB          ; ..
004912  1               
004912  1  85 AF                STA     <FAC1_3         ; clear root
004914  1  85 AE                STA     <FAC1_2         ; ..
004916  1  85 AD                STA     <FAC1_1         ; ..
004918  1               
004918  1  A2 18                LDX     #$18            ; 24 pairs of bits to do
00491A  1  A5 B3                LDA     <FAC2_e         ; get exponent
00491C  1  4A                   LSR     A               ; check odd/even
00491D  1  B0 0E                BCS     LAB_SQE2        ; if odd only 1 shift first time
00491F  1               
00491F  1               LAB_SQE1:
00491F  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004921  1  26 B5                ROL     <FAC2_2         ; ..
004923  1  26 B4                ROL     <FAC2_1         ; ..
004925  1  26 77                ROL     <FACt_3         ; .. into remainder
004927  1  26 76                ROL     <FACt_2         ; ..
004929  1  26 75                ROL     <FACt_1         ; ..
00492B  1  26 78                ROL     <TempB          ; .. never overflows
00492D  1               LAB_SQE2:
00492D  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
00492F  1  26 B5                ROL     <FAC2_2         ; ..
004931  1  26 B4                ROL     <FAC2_1         ; ..
004933  1  26 77                ROL     <FACt_3         ; .. into remainder
004935  1  26 76                ROL     <FACt_2         ; ..
004937  1  26 75                ROL     <FACt_1         ; ..
004939  1  26 78                ROL     <TempB          ; .. never overflows
00493B  1               
00493B  1  06 AF                ASL     <FAC1_3         ; root = root * 2
00493D  1  26 AE                ROL     <FAC1_2         ; ..
00493F  1  26 AD                ROL     <FAC1_1         ; .. never overflows
004941  1               
004941  1  A5 AF                LDA     <FAC1_3         ; get root low byte
004943  1  2A                   ROL     A               ; *2
004944  1  85 5B                STA     <Temp3          ; save partial low byte
004946  1  A5 AE                LDA     <FAC1_2         ; get root low mid byte
004948  1  2A                   ROL     A               ; *2
004949  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
00494B  1  A5 AD                LDA     <FAC1_1         ; get root high mid byte
00494D  1  2A                   ROL     A               ; *2
00494E  1  85 5D                STA     <Temp3+2        ; save partial high mid byte
004950  1  A9 00                LDA     #$00            ; get root high byte (always $00)
004952  1  2A                   ROL     A               ; *2
004953  1  85 5E                STA     <Temp3+3        ; save partial high byte
004955  1               
004955  1               ; carry clear for subtract +1
004955  1  A5 77                LDA     <FACt_3         ; get remainder low byte
004957  1  E5 5B                SBC     <Temp3          ; subtract partial low byte
004959  1  85 5B                STA     <Temp3          ; save partial low byte
00495B  1               
00495B  1  A5 76                LDA     <FACt_2         ; get remainder low mid byte
00495D  1  E5 5C                SBC     <Temp3+1        ; subtract partial low mid byte
00495F  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004961  1               
004961  1  A5 75                LDA     <FACt_1         ; get remainder high mid byte
004963  1  E5 5D                SBC     <Temp3+2        ; subtract partial high mid byte
004965  1  A8                   TAY                     ; copy partial high mid byte
004966  1               
004966  1  A5 78                LDA     <TempB          ; get remainder high byte
004968  1  E5 5E                SBC     <Temp3+3        ; subtract partial high byte
00496A  1  90 0E                BCC     LAB_SQNS        ; skip sub if remainder smaller
00496C  1               
00496C  1  85 78                STA     <TempB          ; save remainder high byte
00496E  1               
00496E  1  84 75                STY     <FACt_1         ; save remainder high mid byte
004970  1               
004970  1  A5 5C                LDA     <Temp3+1        ; get remainder low mid byte
004972  1  85 76                STA     <FACt_2         ; save remainder low mid byte
004974  1               
004974  1  A5 5B                LDA     <Temp3          ; get partial low byte
004976  1  85 77                STA     <FACt_3         ; save remainder low byte
004978  1               
004978  1  E6 AF                INC     <FAC1_3         ; increment root low byte (never any rollover)
00497A  1               LAB_SQNS:
00497A  1  CA                   DEX                     ; decrement bit pair count
00497B  1  D0 A2                BNE     LAB_SQE1        ; loop if not all done
00497D  1               LAB_SQNSA:
00497D  1  38                   SEC                     ; set carry for subtract
00497E  1  A5 B3                LDA     <FAC2_e         ; get exponent
004980  1  E9 80                SBC     #$80            ; normalise
004982  1  6A                   ROR     A               ; /2 and re-bias to $80
004983  1  69 00                ADC     #$00            ; add bit zero back in (allow for half shift)
004985  1  85 AC                STA     <FAC1_e         ; save it
004987  1  4C 3E 3D             JMP     LAB_24D5        ; normalise FAC1 and return
00498A  1               
00498A  1               ; perform VARPTR()
00498A  1               
00498A  1               LAB_VARPTR:
00498A  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00498E  1  20 5A 31             JSR     LAB_GVAR        ; get var address
004991  1  20 6E 2F             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
004994  1  A4 95                LDY     <Cvaral         ; get var address low byte
004996  1  A5 96                LDA     <Cvarah         ; get var address high byte
004998  1  4C 18 34             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00499B  1               
00499B  1               ; perform PI
00499B  1               
00499B  1               LAB_PI:
00499B  1  A9 75                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
00499D  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
00499F  1  20 D7 3F             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0049A2  1  C6 AC                DEC     <FAC1_e         ; make result = PI
0049A4  1  60                   RTS
0049A5  1               
0049A5  1               
0049A5  1               
0049A5  1               
0049A5  1               
0049A5  1               AA_end_basic:
0049A5  1               ENDOFBASIC:
0049A5  1  44 45 52 49          .BYTE   "DERIVED FROM ehBASIC"
0049A9  1  56 45 44 20  
0049AD  1  46 52 4F 4D  
0049B9  1               
0049B9  1               
0049B9  1               
0049B9  1               
0049B9  1                       .END

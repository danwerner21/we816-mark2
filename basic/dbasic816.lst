ca65 V2.18 - Ubuntu 2.19-1
Main file   : dbasic816.asm
Current file: dbasic816.asm

000000r 1               .P816
000000r 1               .A8
000000r 1               .I8
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.23
000000r 1               ; THIS WORK IS DERIVED FROM ehBASIC BY LEE DAVIDSON
000000r 1               ;
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixedf
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 1               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 1               ; 2.22	fixed RND() breaking the get byte routine
000000r 1               ; 2.30  CONVERT TO 65816 ADDRESS SPACE
000000r 1               
000000r 1               
000000r 1               
000000r 1                       .SEGMENT "HIGHMEM"
000000r 1               ;.ORG    0FF1000H
000000r 1                       .ORG    1000H
001000  1               BASICORG:
001000  1  4C 50 26             JMP     BASICBEGIN
001003  1               ;____________________________________________________________________________________________
001003  1               ;
001003  1               ; MACROS
001003  1               
001003  1                       .INCLUDE "macros.asm"
001003  2               ;___________________________________________________________________________________________________
001003  2               ;
001003  2               ;	USEFUL 65186 MACROS
001003  2               ;__________________________________________________________________________________________________
001003  2               
001003  2               .macro       STORECONTEXT             ; Store Complete Context at the beginning of a Sub
001003  2                       PHX
001003  2                       phy
001003  2                       pha
001003  2                       php
001003  2               .endmacro
001003  2               
001003  2               .macro       RESTORECONTEXT                 ; Restore Complete Context at the end of a Sub
001003  2                       plp
001003  2                       pla
001003  2                       ply
001003  2                       plx
001003  2               .endmacro
001003  2               
001003  2               .macro       INDEX16                         ; Set 16bit Index Registers
001003  2               		REP #$10 		; 16 bit Index registers
001003  2               		.I16
001003  2               .endmacro
001003  2               .macro       INDEX8                          ; Set 8bit Index Registers
001003  2               		SEP #$10 		; 8 bit Index registers
001003  2               		.I8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR16                  ; Set 16bit Index Registers
001003  2               		REP #$20 		; 16 bit Index registers
001003  2               		.A16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR8                   ; Set 8bit Index Registers
001003  2               		SEP #$20 		; 8 bit Index registers
001003  2               		.A8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX16             ; Set 16bit Index Registers
001003  2               		REP #$30 		; 16 bit Index registers
001003  2               		.A16
001003  2                               .I16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX8              ; Set 8bit Index Registers
001003  2               		SEP #$30 		; 8 bit Index registers
001003  2               		.A8
001003  2                               .I8
001003  2               .endmacro
001003  2               
001003  2               .macro       LDAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               	LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLB
001003  2                   LDA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       STAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   PHA
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLA
001003  2                   PLX
001003  2               	STA	(<PARM1),Y		;
001003  2               	PLB
001003  2                   STA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       SETBANK PARM1
001003  2                   PHX
001003  2               	LDX #PARM1
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               .endmacro
001003  2               
001003  2               
001003  2               .macro       FETCHINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2               .endmacro
001003  2               
001003  2               .macro       CMPINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CMP	<TMPFLG		    ;
001003  2               .endmacro
001003  2               
001003  2               .macro       ADCINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CLC
001003  2                   ADC	<TMPFLG 		;
001003  2               .endmacro
001003  2               
001003  2               .macro       LBEQ PARM1
001003  2                    bne *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBNE PARM1
001003  2                    beq *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCC PARM1
001003  2                    bcc *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCS PARM1
001003  2                    bcs *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  1               
001003  1               ; ZERO PAGE DEFINITIONS
001003  1                       .INCLUDE "zeropage.asm"
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; ZERO PAGE DEFINITIONS
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_WARM        = $00           ; BASIC warm start entry point
001003  2               Wrmjpl          = LAB_WARM+1    ; BASIC warm start vector jump low byte
001003  2               Wrmjph          = LAB_WARM+2    ; BASIC warm start vector jump high byte
001003  2               TMPFLG          = $04
001003  2               VIDEOMODE       = $06
001003  2               LOCALWORK       = $07           ; word (2 bytes)
001003  2               Usrjmp          = $0A           ; USR function JMP address
001003  2               Usrjpl          = <Usrjmp+1     ; USR function JMP vector low byte
001003  2               Usrjph          = <Usrjmp+2     ; USR function JMP vector high byte
001003  2               Nullct          = $0D           ; nulls output after each line
001003  2               TPos            = $0E           ; BASIC terminal position byte
001003  2               TWidth          = $0F           ; BASIC terminal width byte
001003  2               Iclim           = $10           ; input column limit
001003  2               Itempl          = $11           ; temporary integer low byte
001003  2               Itemph          = <Itempl+1     ; temporary integer high byte
001003  2               
001003  2               nums_1          = <Itempl       ; number to bin/hex string convert MSB
001003  2               nums_2          = <nums_1+1     ; number to bin/hex string convert
001003  2               nums_3          = <nums_1+2     ; number to bin/hex string convert LSB
001003  2               
001003  2               Srchc           = $5B           ; search character
001003  2               Temp3           = <Srchc        ; temp byte used in number routines
001003  2               Scnquo          = $5C           ; scan-between-quotes flag
001003  2               Asrch           = <Scnquo       ; alt search character
001003  2               
001003  2               XOAw_l          = <Srchc        ; eXclusive OR, OR and AND word low byte
001003  2               XOAw_h          = <Scnquo       ; eXclusive OR, OR and AND word high byte
001003  2               
001003  2               Ibptr           = $5D           ; input buffer pointer
001003  2               Dimcnt          = <Ibptr        ; # of dimensions
001003  2               Tindx           = <Ibptr        ; token index
001003  2               
001003  2               Defdim          = $5E           ; default DIM flag
001003  2               Dtypef          = $5F           ; data type flag, $FF=string, $00=numeric
001003  2               Oquote          = $60           ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
001003  2               Gclctd          = $60           ; garbage collected flag
001003  2               Sufnxf          = $61           ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
001003  2               Imode           = $62           ; input mode flag, $00=INPUT, $80=READ
001003  2               Cflag           = $63           ; comparison evaluation flag
001003  2               
001003  2               TabSiz          = $64           ; TAB step size (was input flag)
001003  2               
001003  2               next_s          = $65           ; next descriptor stack address
001003  2               ; these two bytes form a word pointer to the item
001003  2               ; currently on top of the descriptor stack
001003  2               last_sl         = $66           ; last descriptor stack address low byte
001003  2               last_sh         = $67           ; last descriptor stack address high byte (always $00)
001003  2               
001003  2               des_sk          = $68           ; descriptor stack start address (temp strings)
001003  2               
001003  2               ;			= $70		; End of descriptor stack
001003  2               
001003  2               ut1_pl          = $71           ; utility pointer 1 low byte
001003  2               ut1_ph          = <ut1_pl+1     ; utility pointer 1 high byte
001003  2               ut2_pl          = $73           ; utility pointer 2 low byte
001003  2               ut2_ph          = <ut2_pl+1     ; utility pointer 2 high byte
001003  2               
001003  2               Temp_2          = <ut1_pl       ; temp byte for block move
001003  2               
001003  2               FACt_1          = $75           ; FAC temp mantissa1
001003  2               FACt_2          = <FACt_1+1     ; FAC temp mantissa2
001003  2               FACt_3          = <FACt_2+1     ; FAC temp mantissa3
001003  2               
001003  2               dims_l          = <FACt_2       ; array dimension size low byte
001003  2               dims_h          = <FACt_3       ; array dimension size high byte
001003  2               
001003  2               TempB           = $78           ; temp page 0 byte
001003  2               
001003  2               Smeml           = $79           ; start of mem low byte		(Start-of-Basic)
001003  2               Smemh           = <Smeml+1      ; start of mem high byte	(Start-of-Basic)
001003  2               Svarl           = $7B           ; start of vars low byte	(Start-of-Variables)
001003  2               Svarh           = <Svarl+1      ; start of vars high byte	(Start-of-Variables)
001003  2               Sarryl          = $7D           ; var mem end low byte		(Start-of-Arrays)
001003  2               Sarryh          = <Sarryl+1     ; var mem end high byte		(Start-of-Arrays)
001003  2               Earryl          = $7F           ; array mem end low byte	(End-of-Arrays)
001003  2               Earryh          = <Earryl+1     ; array mem end high byte	(End-of-Arrays)
001003  2               Sstorl          = $81           ; string storage low byte	(String storage (moving down))
001003  2               Sstorh          = <Sstorl+1     ; string storage high byte	(String storage (moving down))
001003  2               Sutill          = $83           ; string utility ptr low byte
001003  2               Sutilh          = <Sutill+1     ; string utility ptr high byte
001003  2               Ememl           = $85           ; end of mem low byte		(Limit-of-memory)
001003  2               Ememh           = <Ememl+1      ; end of mem high byte		(Limit-of-memory)
001003  2               
001003  2               Clinel          = $87           ; current line low byte		(Basic line number)
001003  2               Clineh          = <Clinel+1     ; current line high byte	(Basic line number)
001003  2               Blinel          = $89           ; break line low byte		(Previous Basic line number)
001003  2               Blineh          = <Blinel+1     ; break line high byte		(Previous Basic line number)
001003  2               
001003  2               Cpntrl          = $8B           ; continue pointer low byte
001003  2               Cpntrh          = <Cpntrl+1     ; continue pointer high byte
001003  2               
001003  2               Dlinel          = $8D           ; current DATA line low byte
001003  2               Dlineh          = <Dlinel+1     ; current DATA line high byte
001003  2               
001003  2               Dptrl           = $8F           ; DATA pointer low byte
001003  2               Dptrh           = <Dptrl+1      ; DATA pointer high byte
001003  2               
001003  2               Rdptrl          = $91           ; read pointer low byte
001003  2               Rdptrh          = <Rdptrl+1     ; read pointer high byte
001003  2               
001003  2               Varnm1          = $93           ; current var name 1st byte
001003  2               Varnm2          = <Varnm1+1     ; current var name 2nd byte
001003  2               
001003  2               Cvaral          = $95           ; current var address low byte
001003  2               Cvarah          = <Cvaral+1     ; current var address high byte
001003  2               
001003  2               Frnxtl          = $97           ; var pointer for FOR/NEXT low byte
001003  2               Frnxth          = <Frnxtl+1     ; var pointer for FOR/NEXT high byte
001003  2               
001003  2               Tidx1           = <Frnxtl       ; temp line index
001003  2               
001003  2               Lvarpl          = <Frnxtl       ; let var pointer low byte
001003  2               Lvarph          = <Frnxth       ; let var pointer high byte
001003  2               
001003  2               prstk           = $99           ; precedence stacked flag
001003  2               
001003  2               comp_f          = $9B           ; compare function flag, bits 0,1 and 2 used
001003  2               ; bit 2 set if >
001003  2               ; bit 1 set if =
001003  2               ; bit 0 set if <
001003  2               
001003  2               func_l          = $9C           ; function pointer low byte
001003  2               func_h          = <func_l+1     ; function pointer high byte
001003  2               
001003  2               garb_l          = <func_l       ; garbage collection working pointer low byte
001003  2               garb_h          = <func_h       ; garbage collection working pointer high byte
001003  2               
001003  2               des_2l          = $9E           ; string descriptor_2 pointer low byte
001003  2               des_2h          = <des_2l+1     ; string descriptor_2 pointer high byte
001003  2               
001003  2               g_step          = $A0           ; garbage collect step size
001003  2               
001003  2               Fnxjmp          = $A1           ; jump vector for functions
001003  2               Fnxjpl          = <Fnxjmp+1     ; functions jump vector low byte
001003  2               Fnxjph          = <Fnxjmp+2     ; functions jump vector high byte
001003  2               
001003  2               g_indx          = <Fnxjpl       ; garbage collect temp index
001003  2               
001003  2               FAC2_r          = $A3           ; FAC2 rounding byte
001003  2               
001003  2               Adatal          = $A4           ; array data pointer low byte
001003  2               Adatah          = <Adatal+1     ; array data pointer high  byte
001003  2               
001003  2               Nbendl          = <Adatal       ; new block end pointer low byte
001003  2               Nbendh          = <Adatah       ; new block end pointer high  byte
001003  2               
001003  2               Obendl          = $A6           ; old block end pointer low byte
001003  2               Obendh          = <Obendl+1     ; old block end pointer high  byte
001003  2               
001003  2               numexp          = $A8           ; string to float number exponent count
001003  2               expcnt          = $A9           ; string to float exponent count
001003  2               
001003  2               numbit          = <numexp       ; bit count for array element calculations
001003  2               
001003  2               numdpf          = $AA           ; string to float decimal point flag
001003  2               expneg          = $AB           ; string to float eval exponent -ve flag
001003  2               
001003  2               Astrtl          = <numdpf       ; array start pointer low byte
001003  2               Astrth          = <expneg       ; array start pointer high  byte
001003  2               
001003  2               Histrl          = <numdpf       ; highest string low byte
001003  2               Histrh          = <expneg       ; highest string high  byte
001003  2               
001003  2               Baslnl          = <numdpf       ; BASIC search line pointer low byte
001003  2               Baslnh          = <expneg       ; BASIC search line pointer high  byte
001003  2               
001003  2               Fvar_l          = <numdpf       ; find/found variable pointer low byte
001003  2               Fvar_h          = <expneg       ; find/found variable pointer high  byte
001003  2               
001003  2               Ostrtl          = <numdpf       ; old block start pointer low byte
001003  2               Ostrth          = <expneg       ; old block start pointer high  byte
001003  2               
001003  2               Vrschl          = <numdpf       ; variable search pointer low byte
001003  2               Vrschh          = <expneg       ; variable search pointer high  byte
001003  2               
001003  2               FAC1_e          = $AC           ; FAC1 exponent
001003  2               FAC1_1          = <FAC1_e+1     ; FAC1 mantissa1
001003  2               FAC1_2          = <FAC1_e+2     ; FAC1 mantissa2
001003  2               FAC1_3          = <FAC1_e+3     ; FAC1 mantissa3
001003  2               FAC1_s          = <FAC1_e+4     ; FAC1 sign (b7)
001003  2               
001003  2               str_ln          = <FAC1_e       ; string length
001003  2               str_pl          = <FAC1_1       ; string pointer low byte
001003  2               str_ph          = <FAC1_2       ; string pointer high byte
001003  2               
001003  2               des_pl          = <FAC1_2       ; string descriptor pointer low byte
001003  2               des_ph          = <FAC1_3       ; string descriptor pointer high byte
001003  2               
001003  2               mids_l          = <FAC1_3       ; MID$ string temp length byte
001003  2               
001003  2               negnum          = $B1           ; string to float eval -ve flag
001003  2               numcon          = $B1           ; series evaluation constant count
001003  2               
001003  2               FAC1_o          = $B2           ; FAC1 overflow byte
001003  2               
001003  2               FAC2_e          = $B3           ; FAC2 exponent
001003  2               FAC2_1          = <FAC2_e+1     ; FAC2 mantissa1
001003  2               FAC2_2          = <FAC2_e+2     ; FAC2 mantissa2
001003  2               FAC2_3          = <FAC2_e+3     ; FAC2 mantissa3
001003  2               FAC2_s          = <FAC2_e+4     ; FAC2 sign (b7)
001003  2               
001003  2               FAC_sc          = $B8           ; FAC sign comparison, Acc#1 vs #2
001003  2               FAC1_r          = $B9           ; FAC1 rounding byte
001003  2               
001003  2               ssptr_l         = <FAC_sc       ; string start pointer low byte
001003  2               ssptr_h         = <FAC1_r       ; string start pointer high byte
001003  2               
001003  2               sdescr          = <FAC_sc       ; string descriptor pointer
001003  2               
001003  2               csidx           = $BA           ; line crunch save index
001003  2               Asptl           = <csidx        ; array size/pointer low byte
001003  2               Aspth           = $BB           ; array size/pointer high byte
001003  2               
001003  2               Btmpl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Btmph           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Cptrl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Cptrh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Sendl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Sendh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               LAB_IGBY        = $BC           ; get next BASIC byte subroutine
001003  2               
001003  2               LAB_GBYT        = $C2           ; get current BASIC byte subroutine
001003  2               Bpntrl          = $C3           ; BASIC execute (get byte) pointer low byte
001003  2               Bpntrh          = <Bpntrl+1     ; BASIC execute (get byte) pointer high byte
001003  2               Bpntrp          = <Bpntrl+2     ; BASIC execute (get byte) pointer PAGE byte
001003  2               
001003  2               ;			= $E0		; end of get BASIC char subroutine
001003  2               
001003  2               Rbyte4          = $E1           ; extra PRNG byte
001003  2               Rbyte1          = <Rbyte4+1     ; most significant PRNG byte
001003  2               Rbyte2          = <Rbyte4+2     ; middle PRNG byte
001003  2               Rbyte3          = <Rbyte4+3     ; least significant PRNG byte
001003  2               
001003  2               NmiBase         = $E5           ; NMI handler enabled/setup/triggered flags
001003  2               ; bit	function
001003  2               ; ===	========
001003  2               ; 7	interrupt enabled
001003  2               ; 6	interrupt setup
001003  2               ; 5	interrupt happened
001003  2               ;			= $E6		; NMI handler addr low byte
001003  2               ;			= $E7		; NMI handler addr high byte
001003  2               IrqBase         = $E8           ; IRQ handler enabled/setup/triggered flags
001003  2               ;			= $E9		; IRQ handler addr low byte
001003  2               ;			= $EA		; IRQ handler addr high byte
001003  2               FCBPTR          = $EB           ; POINTER TO FCB FOR FILE OPS
001003  2               
001003  2               Decss           = $EF           ; number to decimal string start
001003  2               Decssp1         = Decss+1       ; number to decimal string start
001003  2               
001003  2               TEMPW           = $FD
001003  2               ;			= $FF		; decimal string end
001003  2               
001003  2               
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; character get subroutine for zero page
001003  2               
001003  2               ; For a 1.8432MHz 6502 including the JSR and RTS
001003  2               ; fastest (>=":")	=  29 cycles =  15.7uS
001003  2               ; slowest (<":")	=  40 cycles =  21.7uS
001003  2               ; space skip	= +21 cycles = +11.4uS
001003  2               ; inc across page	=  +4 cycles =  +2.2uS
001003  2               
001003  2               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
001003  2               ; block is copied to it's destination, any non zero page address will do at assembly
001003  2               ; time, to assemble a three byte instruction.
001003  2               
001003  2               ; page 0 initialisation table from $BC
001003  2               ; increment and scan memory
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_2CEE:
001003  2  E6 C3                INC     <Bpntrl         ; increment BASIC execute pointer low byte
001005  2  D0 02                BNE     LAB_2CF4        ; branch if no carry
001007  2               ; else
001007  2  E6 C4                INC     <Bpntrh         ; increment BASIC execute pointer high byte
001009  2               
001009  2               ; page 0 initialisation table from $C2
001009  2               ; scan memory
001009  2               LAB_2CF4:
001009  2  AF FF FF FF          LDA     $FFFFFF         ; get byte to scan (addr set by call routine)
00100D  2  C9 BD                CMP     #TK_ELSE        ; compare with the token for ELSE
00100F  2  F0 0E                BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
001011  2               
001011  2  C9 3A                CMP     #':'            ; compare with ":"
001013  2  B0 0A                BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
001015  2               
001015  2  C9 20                CMP     #' '            ; compare with " "
001017  2  F0 EA                BEQ     LAB_2CEE        ; if " " go do next
001019  2               
001019  2  38                   SEC                     ; set carry for SBC
00101A  2  E9 30                SBC     #'0'            ; subtract "0"
00101C  2  38                   SEC                     ; set carry for SBC
00101D  2  E9 D0                SBC     #$D0            ; subtract -"0"
00101F  2               ; clear carry if byte = "0"-"9"
00101F  2               LAB_2D05:
00101F  2  6B                   RTL
001020  2               LAB_2CEE_END:
001020  2               ;____________________________________________________________________________________________
001020  2               ;
001020  2               ; page zero initialisation table $00-$12 inclusive
001020  2               ;____________________________________________________________________________________________
001020  2               
001020  2               StrTab:
001020  2  4C                   .BYTE   $4C             ; JMP opcode
001021  2  70 26                .WORD   LAB_COLD        ; initial warm start vector (cold start)
001023  2               
001023  2  00                   .BYTE   $00             ; these bytes are not used by BASIC
001024  2  00 00                .WORD   $0000           ;
001026  2  00 00                .WORD   $0000           ;
001028  2  00 00                .WORD   $0000           ;
00102A  2               
00102A  2  4C                   .BYTE   $4C             ; JMP opcode
00102B  2  73 37                .WORD   LAB_FCER        ; initial user function vector ("Function call" error)
00102D  2  00                   .BYTE   $00             ; default NULL count
00102E  2  00                   .BYTE   $00             ; clear terminal position
00102F  2  00                   .BYTE   $00             ; default terminal width byte
001030  2  F2                   .BYTE   $F2             ; default limit for TAB = 14
001031  2  00 22                .WORD   Ram_base        ; start of user RAM
001033  2               EndTab:
001033  2               
001033  2               ;  BASIC start-up code
001033  2               
001033  2               PG2_TABS:
001033  2  00                   .BYTE   $00             ; ctrl-c flag		-	$00 = enabled
001034  2  03                   .BYTE   $03             ; ctrl-c byte		-	GET needs this
001035  2  00                   .BYTE   $00             ; ctrl-c byte timeout	-	GET needs this
001036  2  22 4C                .WORD   CTRLC           ; ctrl c check vector
001038  2               PG2_TABE:
001038  2               
001038  1               
001038  1               ; BASIC TOKENS
001038  1                       .INCLUDE "tokens.asm"
001038  2               ; token values needed for BASIC
001038  2               
001038  2               ; primary command tokens (can start a statement)
001038  2               
001038  2               TK_END          = $80           ; END
001038  2               TK_FOR          = TK_END+1      ; FOR token
001038  2               TK_NEXT         = TK_FOR+1      ; NEXT token
001038  2               TK_DATA         = TK_NEXT+1     ; DATA token
001038  2               TK_DIRECTORY    = TK_DATA+1     ; DISKSTATUS token
001038  2               TK_DISKSTATUS   = TK_DIRECTORY+1; DIRECTORY token
001038  2               TK_INPUT        = TK_DISKSTATUS+1; INPUT token
001038  2               TK_DIM          = TK_INPUT+1    ; DIM token
001038  2               TK_READ         = TK_DIM+1      ; READ token
001038  2               TK_LET          = TK_READ+1     ; LET token
001038  2               TK_DEC          = TK_LET+1      ; DEC token
001038  2               TK_GOTO         = TK_DEC+1      ; GOTO token
001038  2               TK_RUN          = TK_GOTO+1     ; RUN token
001038  2               TK_IF           = TK_RUN+1      ; IF token
001038  2               TK_RESTORE      = TK_IF+1       ; RESTORE token
001038  2               TK_GOSUB        = TK_RESTORE+1  ; GOSUB token
001038  2               TK_RETURN       = TK_GOSUB+1    ; RETURN token
001038  2               TK_REM          = TK_RETURN+1   ; REM token
001038  2               TK_STOP         = TK_REM+1      ; STOP token
001038  2               TK_ON           = TK_STOP+1     ; ON token
001038  2               TK_NULL         = TK_ON+1       ; NULL token
001038  2               TK_INC          = TK_NULL+1     ; INC token
001038  2               TK_WAIT         = TK_INC+1      ; WAIT token
001038  2               TK_LOAD         = TK_WAIT+1     ; LOAD token
001038  2               TK_SAVE         = TK_LOAD+1     ; SAVE token
001038  2               TK_DEF          = TK_SAVE+1     ; DEF token
001038  2               TK_POKE         = TK_DEF+1      ; POKE token
001038  2               TK_CALL         = TK_POKE+1     ; CALL token
001038  2               TK_DO           = TK_CALL+1     ; DO token
001038  2               TK_LOOP         = TK_DO+1       ; LOOP token
001038  2               TK_PRINT        = TK_LOOP+1     ; PRINT token
001038  2               TK_CONT         = TK_PRINT+1    ; CONT token
001038  2               TK_LIST         = TK_CONT+1     ; LIST token
001038  2               TK_CLEAR        = TK_LIST+1     ; CLEAR token
001038  2               TK_NEW          = TK_CLEAR+1    ; NEW token
001038  2               TK_WIDTH        = TK_NEW+1      ; WIDTH token
001038  2               TK_GET          = TK_WIDTH+1    ; GET token
001038  2               TK_SWAP         = TK_GET+1      ; SWAP token
001038  2               TK_BITSET       = TK_SWAP+1     ; BITSET token
001038  2               TK_BITCLR       = TK_BITSET+1   ; BITCLR token
001038  2               TK_MONITOR      = TK_BITCLR+1   ; MONITOR token
001038  2               TK_OPEN         = TK_MONITOR+1  ; OPEN token
001038  2               TK_CLOSE        = TK_OPEN+1     ; CLOSE token
001038  2               TK_IECINPUT     = TK_CLOSE+1    ; IECINPUT token
001038  2               TK_IECOUTPUT    = TK_IECINPUT+1 ; IECOUTPUT token
001038  2               TK_PUTN         = TK_IECOUTPUT+1; PUTN token
001038  2               TK_GETN         = TK_PUTN+1     ; GETN token
001038  2               TK_DISKCMD      = TK_GETN+1     ; DISKCMD token
001038  2               TK_SCNCLR       = TK_DISKCMD+1  ;SCNCLR token
001038  2               TK_LOCATE       = TK_SCNCLR+1   ;LOCATE token
001038  2               TK_COLOR        = TK_LOCATE+1   ;COLOR token
001038  2               TK_SCREEN       = TK_COLOR+1    ;SCREEN token
001038  2               TK_PLOT         = TK_SCREEN+1   ;PLOT token
001038  2               TK_PATTERN      = TK_PLOT+1     ;PATTERN token
001038  2               TK_SYS          = TK_PATTERN+1  ;SYS token
001038  2               TK_SOUND        = TK_SYS+1      ;SOUND token
001038  2               TK_NOISE        = TK_SOUND+1    ;NOISE token
001038  2               TK_TONE         = TK_NOISE+1    ;TONE token
001038  2               TK_VOLUME       = TK_TONE+1     ;VOLUME token
001038  2               TK_VOICE        = TK_VOLUME+1   ;VOICE token
001038  2               
001038  2               ; secondary command tokens, can't start a statement
001038  2               
001038  2               TK_TAB          = TK_VOICE+1    ; TAB token
001038  2               TK_ELSE         = TK_TAB+1      ; ELSE token
001038  2               TK_TO           = TK_ELSE+1     ; TO token
001038  2               TK_FN           = TK_TO+1       ; FN token
001038  2               TK_SPC          = TK_FN+1       ; SPC token
001038  2               TK_THEN         = TK_SPC+1      ; THEN token
001038  2               TK_NOT          = TK_THEN+1     ; NOT token
001038  2               TK_STEP         = TK_NOT+1      ; STEP token
001038  2               TK_UNTIL        = TK_STEP+1     ; UNTIL token
001038  2               TK_WHILE        = TK_UNTIL+1    ; WHILE token
001038  2               TK_OFF          = TK_WHILE+1    ; OFF token
001038  2               
001038  2               ; opperator tokens
001038  2               
001038  2               TK_PLUS         = TK_OFF+1      ; + token
001038  2               TK_MINUS        = TK_PLUS+1     ; - token
001038  2               TK_MUL          = TK_MINUS+1    ; * token
001038  2               TK_DIV          = TK_MUL+1      ; / token
001038  2               TK_POWER        = TK_DIV+1      ; ^ token
001038  2               TK_AND          = TK_POWER+1    ; AND token
001038  2               TK_EOR          = TK_AND+1      ; EOR token
001038  2               TK_OR           = TK_EOR+1      ; OR token
001038  2               TK_RSHIFT       = TK_OR+1       ; RSHIFT token
001038  2               TK_LSHIFT       = TK_RSHIFT+1   ; LSHIFT token
001038  2               TK_GT           = TK_LSHIFT+1   ; > token
001038  2               TK_EQUAL        = TK_GT+1       ; = token
001038  2               TK_LT           = TK_EQUAL+1    ; < token
001038  2               
001038  2               ; functions tokens
001038  2               
001038  2               TK_SGN          = TK_LT+1       ; SGN token
001038  2               TK_INT          = TK_SGN+1      ; INT token
001038  2               TK_ABS          = TK_INT+1      ; ABS token
001038  2               TK_USR          = TK_ABS+1      ; USR token
001038  2               TK_FRE          = TK_USR+1      ; FRE token
001038  2               TK_POS          = TK_FRE+1      ; POS token
001038  2               TK_SQR          = TK_POS+1      ; SQR token
001038  2               TK_RND          = TK_SQR+1      ; RND token
001038  2               TK_LOG          = TK_RND+1      ; LOG token
001038  2               TK_EXP          = TK_LOG+1      ; EXP token
001038  2               TK_COS          = TK_EXP+1      ; COS token
001038  2               TK_SIN          = TK_COS+1      ; SIN token
001038  2               TK_TAN          = TK_SIN+1      ; TAN token
001038  2               TK_ATN          = TK_TAN+1      ; ATN token
001038  2               TK_PEEK         = TK_ATN+1      ; PEEK token
001038  2               TK_SADD         = TK_PEEK+1     ; SADD token
001038  2               TK_LEN          = TK_SADD+1     ; LEN token
001038  2               TK_STRS         = TK_LEN+1      ; STR$ token
001038  2               TK_VAL          = TK_STRS+1     ; VAL token
001038  2               TK_ASC          = TK_VAL+1      ; ASC token
001038  2               TK_UCASES       = TK_ASC+1      ; UCASE$ token
001038  2               TK_LCASES       = TK_UCASES+1   ; LCASE$ token
001038  2               TK_CHRS         = TK_LCASES+1   ; CHR$ token
001038  2               TK_HEXS         = TK_CHRS+1     ; HEX$ token
001038  2               TK_BINS         = TK_HEXS+1     ; BIN$ token
001038  2               TK_BITTST       = TK_BINS+1     ; BITTST token
001038  2               TK_MAX          = TK_BITTST+1   ; MAX token
001038  2               TK_MIN          = TK_MAX+1      ; MIN token
001038  2               TK_PI           = TK_MIN+1      ; PI token
001038  2               TK_IECST        = TK_PI+1       ; IECST token
001038  2               TK_SECOND       = TK_IECST+1    ; SECOND token
001038  2               TK_MINUTE       = TK_SECOND+1   ; MINUTE token
001038  2               TK_HOUR         = TK_MINUTE+1   ; HOUR token
001038  2               TK_WEEKD        = TK_HOUR+1     ; WEEKD token
001038  2               TK_DAY          = TK_WEEKD+1    ; DAY token
001038  2               TK_MONTH        = TK_DAY+1      ; MONTH token
001038  2               TK_YEAR         = TK_MONTH+1    ; YEAR token
001038  2               TK_VPTR         = TK_YEAR       ; VARPTR token
001038  2               TK_LEFTS        = TK_VPTR+1     ; LEFT$ token
001038  2               TK_RIGHTS       = TK_LEFTS+1    ; RIGHT$ token
001038  2               TK_MIDS         = TK_RIGHTS+1   ; MID$ token
001038  2               TK_CON          = TK_MIDS+1     ; CON token
001038  2               
001038  2               
001038  2               
001038  2               
001038  2               LAB_CTBL:
001038  2  CE 2B                .WORD   LAB_END-1       ; END
00103A  2  06 2B                .WORD   LAB_FOR-1       ; FOR
00103C  2  58 32                .WORD   LAB_NEXT-1      ; NEXT
00103E  2  46 2D                .WORD   LAB_DATA-1      ; DATA
001040  2  7B 1A                .WORD   V_DIR-1         ; DIRECTORY
001042  2  00 1A                .WORD   V_ERR-1         ; DISKSTATUS
001044  2  F8 30                .WORD   LAB_INPUT-1     ; INPUT
001046  2  9E 35                .WORD   LAB_DIM-1       ; DIM
001048  2  11 31                .WORD   LAB_READ-1      ; READ
00104A  2  6B 2E                .WORD   LAB_LET-1       ; LET
00104C  2  3B 2E                .WORD   LAB_DEC-1       ; DEC			new command
00104E  2  A0 2C                .WORD   LAB_GOTO-1      ; GOTO
001050  2  5D 2C                .WORD   LAB_RUN-1       ; RUN
001052  2  74 2D                .WORD   LAB_IF-1        ; IF
001054  2  F5 2B                .WORD   LAB_RESTORE-1   ; RESTORE		modified command
001056  2  82 2C                .WORD   LAB_GOSUB-1     ; GOSUB
001058  2  31 2D                .WORD   LAB_RETURN-1    ; RETURN
00105A  2  DF 2D                .WORD   LAB_REM-1       ; REM
00105C  2  CC 2B                .WORD   LAB_STOP-1      ; STOP
00105E  2  E8 2D                .WORD   LAB_ON-1        ; ON			modified command
001060  2  33 2C                .WORD   LAB_NULL-1      ; NULL		modified command
001062  2  3E 2E                .WORD   LAB_INC-1       ; INC			new command
001064  2  08 41                .WORD   LAB_WAIT-1      ; WAIT
001066  2  6E 19                .WORD   V_LOAD-1        ; LOAD
001068  2  DC 18                .WORD   V_SAVE-1        ; SAVE
00106A  2  C6 38                .WORD   LAB_DEF-1       ; DEF
00106C  2  58 40                .WORD   LAB_POKE-1      ; POKE
00106E  2  F4 40                .WORD   LAB_CALL-1      ; CALL		new command
001070  2  67 2C                .WORD   LAB_DO-1        ; DO			new command
001072  2  D2 2C                .WORD   LAB_LOOP-1      ; LOOP		new command
001074  2  D5 2F                .WORD   LAB_PRINT-1     ; PRINT
001076  2  39 2C                .WORD   LAB_CONT-1      ; CONT
001078  2  46 2A                .WORD   LAB_LIST-1      ; LIST
00107A  2  43 2A                .WORD   LAB_CLEAR-1     ; CLEAR
00107C  2  F3 29                .WORD   LAB_NEW-1       ; NEW
00107E  2  36 4D                .WORD   LAB_WDTH-1      ; WIDTH		new command
001080  2  8F 2F                .WORD   LAB_GET-1       ; GET			new command
001082  2  7C 40                .WORD   LAB_SWAP-1      ; SWAP		new command
001084  2  B9 4A                .WORD   LAB_BITSET-1    ; BITSET		new command
001086  2  CD 4A                .WORD   LAB_BITCLR-1    ; BITCLR		new command
001088  2  3B 26                .WORD   LAB_MONITOR-1   ; MONITOR		MONITOR command
00108A  2  16 1C                .WORD   V_OPEN-1        ; OPEN			OPEN command
00108C  2  99 1C                .WORD   V_CLOSE-1       ; CLOSE			CLOSE command
00108E  2  AA 1C                .WORD   V_IECINPUT-1    ; IECINPUT		IECINPUT command
001090  2  C0 1C                .WORD   V_IECOUTPUT-1   ; IECOUTPUT		IECOUTPUT command
001092  2  D6 1C                .WORD   V_PUTN-1        ; PUTN			PUTN command
001094  2  42 1D                .WORD   V_GETN-1        ; GETN			GETN command
001096  2  52 1B                .WORD   V_DISKCMD-1     ; DISKCMD		DISKCMD COMMAND
001098  2  8F 1D                .WORD   V_SCNCLR-1      ; SCNCLR		SCNCLR COMMAND
00109A  2  9C 1D                .WORD   V_LOCATE-1      ; LOCATE		LOCATE COMMAND
00109C  2  B4 1D                .WORD   V_COLOR-1       ; COLOR			COLOR COMMAND
00109E  2  DB 1D                .WORD   V_SCREEN-1      ; SCREEN		SCREEN COMMAND
0010A0  2  48 1F                .WORD   V_PLOT-1        ; PLOT			PLOT COMMAND
0010A2  2  A5 21                .WORD   V_PATTERN-1     ; PATTERN		PATTERN COMMAND
0010A4  2  69 40                .WORD   LAB_SYS-1       ; SYS			SYS COMMAND
0010A6  2  C2 21                .WORD   V_SOUND-1       ; SOUND			SOUND COMMAND
0010A8  2  19 22                .WORD   V_NOISE-1       ; NOISE			NOISE COMMAND
0010AA  2  58 22                .WORD   V_TONE-1        ; TONE			TONE COMMAND
0010AC  2  E2 21                .WORD   V_VOLUME-1      ; VOLUME		VOLUME COMMAND
0010AE  2  F7 21                .WORD   V_VOICE-1       ; VOICE			VOICE COMMAND
0010B0  2               ; function pre process routine table
0010B0  2               
0010B0  2               LAB_FTPL:
0010B0  2               LAB_FTPM        = LAB_FTPL+$01
0010B0  2  76 34                .WORD   LAB_PPFN-1      ; SGN(n)	process numeric expression in ()
0010B2  2  76 34                .WORD   LAB_PPFN-1      ; INT(n)		"
0010B4  2  76 34                .WORD   LAB_PPFN-1      ; ABS(n)		"
0010B6  2  F5 32                .WORD   LAB_EVEZ-1      ; USR(x)	process any expression
0010B8  2  FB 33                .WORD   LAB_1BF7-1      ; FRE(x)		"
0010BA  2  FB 33                .WORD   LAB_1BF7-1      ; POS(x)		"
0010BC  2  76 34                .WORD   LAB_PPFN-1      ; SQR(n)	process numeric expression in ()
0010BE  2  76 34                .WORD   LAB_PPFN-1      ; RND(n)		"
0010C0  2  76 34                .WORD   LAB_PPFN-1      ; LOG(n)		"
0010C2  2  76 34                .WORD   LAB_PPFN-1      ; EXP(n)		"
0010C4  2  76 34                .WORD   LAB_PPFN-1      ; COS(n)		"
0010C6  2  76 34                .WORD   LAB_PPFN-1      ; SIN(n)		"
0010C8  2  76 34                .WORD   LAB_PPFN-1      ; TAN(n)		"
0010CA  2  76 34                .WORD   LAB_PPFN-1      ; ATN(n)		"
0010CC  2  76 34                .WORD   LAB_PPFN-1      ; PEEK(n)		"
0010CE  2  00 00                .WORD   $0000           ; SADD()	none
0010D0  2  70 34                .WORD   LAB_PPFS-1      ; LEN($)	process string expression in ()
0010D2  2  76 34                .WORD   LAB_PPFN-1      ; STR$(n)	process numeric expression in ()
0010D4  2  70 34                .WORD   LAB_PPFS-1      ; VAL($)	process string expression in ()
0010D6  2  70 34                .WORD   LAB_PPFS-1      ; ASC($)		"
0010D8  2  70 34                .WORD   LAB_PPFS-1      ; UCASE$($)		"
0010DA  2  70 34                .WORD   LAB_PPFS-1      ; LCASE$($)		"
0010DC  2  76 34                .WORD   LAB_PPFN-1      ; CHR$(n)	process numeric expression in ()
0010DE  2  9F 34                .WORD   LAB_BHSS-1      ; HEX$(n)		"
0010E0  2  9F 34                .WORD   LAB_BHSS-1      ; BIN$(n)		"
0010E2  2  00 00                .WORD   $0000           ; BITTST()	none
0010E4  2  C9 4C                .WORD   LAB_MMPP-1      ; MAX()	process numeric expression
0010E6  2  C9 4C                .WORD   LAB_MMPP-1      ; MIN()		"
0010E8  2  7C 34                .WORD   LAB_PPBI-1      ; PI		advance pointer
0010EA  2  3B 1D                .WORD   LAB_PIECST-1    ; IECST		"
0010EC  2  66 23                .WORD   LAB_PSECOND-1   ; SECOND	"
0010EE  2  7D 23                .WORD   LAB_PMINUTE-1   ; MINUTE	"
0010F0  2  94 23                .WORD   LAB_PHOUR-1     ; HOUR  	"
0010F2  2  AB 23                .WORD   LAB_PWEEKD-1    ; WEEKD   	"
0010F4  2  C2 23                .WORD   LAB_PDAY-1      ; DAY   	"
0010F6  2  D9 23                .WORD   LAB_PMONTH-1    ; MONTH	        "
0010F8  2  29 24                .WORD   LAB_PYEAR-1     ; YEAR	        "
0010FA  2  00 00                .WORD   $0000           ; VARPTR()	none
0010FC  2  83 34                .WORD   LAB_LRMS-1      ; LEFT$()	process string expression
0010FE  2  83 34                .WORD   LAB_LRMS-1      ; RIGHT$()		"
001100  2  83 34                .WORD   LAB_LRMS-1      ; MID$()		"
001102  2  76 34                .WORD   LAB_PPFN-1      ; CON()		"
001104  2               
001104  2               ; action addresses for functions
001104  2               
001104  2               LAB_FTBL:
001104  2               LAB_FTBM        = LAB_FTBL+$01
001104  2  81 45                .WORD   LAB_SGN-1       ; SGN()
001106  2  6F 46                .WORD   LAB_INT-1       ; INT()
001108  2  9E 45                .WORD   LAB_ABS-1       ; ABS()
00110A  2  84 4A                .WORD   LAB_USR-1       ; USR()
00110C  2  94 38                .WORD   LAB_FRE-1       ; FRE()
00110E  2  B3 38                .WORD   LAB_POS-1       ; POS()
001110  2  8D 4D                .WORD   LAB_SQR-1       ; SQR()
001112  2  D4 49                .WORD   LAB_RND-1       ; RND()		modified function
001114  2  95 42                .WORD   LAB_LOG-1       ; LOG()
001116  2  22 49                .WORD   LAB_EXP-1       ; EXP()
001118  2  08 4A                .WORD   LAB_COS-1       ; COS()
00111A  2  0F 4A                .WORD   LAB_SIN-1       ; SIN()
00111C  2  58 4A                .WORD   LAB_TAN-1       ; TAN()
00111E  2  8A 4A                .WORD   LAB_ATN-1       ; ATN()
001120  2  45 40                .WORD   LAB_PEEK-1      ; PEEK()
001122  2  14 3F                .WORD   LAB_SADD-1      ; SADD()		new function
001124  2  56 3F                .WORD   LAB_LENS-1      ; LEN()
001126  2  05 3A                .WORD   LAB_STRS-1      ; STR$()
001128  2  9A 3F                .WORD   LAB_VAL-1       ; VAL()
00112A  2  61 3F                .WORD   LAB_ASC-1       ; ASC()
00112C  2  CA 3E                .WORD   LAB_UCASE-1     ; UCASE$()		new function
00112E  2  7E 3E                .WORD   LAB_LCASE-1     ; LCASE$()		new function
001130  2  82 3D                .WORD   LAB_CHRS-1      ; CHR$()
001132  2  86 4B                .WORD   LAB_HEXS-1      ; HEX$()		new function
001134  2  0E 4B                .WORD   LAB_BINS-1      ; BIN$()		new function
001136  2  E3 4A                .WORD   LAB_BTST-1      ; BITTST()		new function
001138  2  CF 4C                .WORD   LAB_MAX-1       ; MAX()		new function
00113A  2  DF 4C                .WORD   LAB_MIN-1       ; MIN()		new function
00113C  2  2B 4E                .WORD   LAB_PI-1        ; PI			new function
00113E  2  2E 1D                .WORD   LAB_IECST-1     ; IECST		new function
001140  2  56 23                .WORD   LAB_SECOND-1    ; SECOND	new function
001142  2  6D 23                .WORD   LAB_MINUTE-1    ; MINUTE	new function
001144  2  84 23                .WORD   LAB_HOUR-1      ; HOUR	        new function
001146  2  9B 23                .WORD   LAB_WEEKD-1     ; WEEKD	        new function
001148  2  B2 23                .WORD   LAB_DAY-1       ; DAY	        new function
00114A  2  C9 23                .WORD   LAB_MONTH-1     ; MONTH	        new function
00114C  2  E0 23                .WORD   LAB_YEAR-1      ; YEAR	        new function
00114E  2  1A 4E                .WORD   LAB_VARPTR-1    ; VARPTR()		new function
001150  2  A8 3D                .WORD   LAB_LEFT-1      ; LEFT$()
001152  2  C7 3D                .WORD   LAB_RIGHT-1     ; RIGHT$()
001154  2  20 3E                .WORD   LAB_MIDS-1      ; MID$()
001156  2  86 22                .WORD   LAB_CON-1       ; CON()
001158  2               
001158  2               ; hierarchy and action addresses for operator
001158  2               
001158  2               LAB_OPPT:
001158  2  79                   .BYTE   $79             ; +
001159  2  55 41                .WORD   LAB_ADD-1
00115B  2  79                   .BYTE   $79             ; -
00115C  2  3A 41                .WORD   LAB_SUBTRACT-1
00115E  2  7B                   .BYTE   $7B             ; *
00115F  2  D6 42                .WORD   LAB_MULTIPLY-1
001161  2  7B                   .BYTE   $7B             ; /
001162  2  EE 43                .WORD   LAB_DIVIDE-1
001164  2  7F                   .BYTE   $7F             ; ^
001165  2  DE 48                .WORD   LAB_POWER-1
001167  2  50                   .BYTE   $50             ; AND
001168  2  EA 34                .WORD   LAB_AND-1
00116A  2  46                   .BYTE   $46             ; EOR			new operator
00116B  2  D0 34                .WORD   LAB_EOR-1
00116D  2  46                   .BYTE   $46             ; OR
00116E  2  DD 34                .WORD   LAB_OR-1
001170  2  56                   .BYTE   $56             ; >>			new operator
001171  2  C1 35                .WORD   LAB_RSHIFT-1
001173  2  56                   .BYTE   $56             ; <<			new operator
001174  2  A9 35                .WORD   LAB_LSHIFT-1
001176  2  7D                   .BYTE   $7D             ; >
001177  2  17 49                .WORD   LAB_GTHAN-1
001179  2  5A                   .BYTE   $5A             ; =
00117A  2  28 34                .WORD   LAB_EQUAL-1
00117C  2  64                   .BYTE   $64             ; <
00117D  2  0B 35                .WORD   LAB_LTHAN-1
00117F  2               
00117F  2               ; keywords start with ..
00117F  2               ; this is the first character table and must be in alphabetic order
00117F  2               
00117F  2               TAB_1STC:
00117F  2  2A                   .BYTE   "*"
001180  2  2B                   .BYTE   "+"
001181  2  2D                   .BYTE   "-"
001182  2  2F                   .BYTE   "/"
001183  2  3C                   .BYTE   "<"
001184  2  3D                   .BYTE   "="
001185  2  3E                   .BYTE   ">"
001186  2  3F                   .BYTE   "?"
001187  2  41                   .BYTE   "A"
001188  2  42                   .BYTE   "B"
001189  2  43                   .BYTE   "C"
00118A  2  44                   .BYTE   "D"
00118B  2  45                   .BYTE   "E"
00118C  2  46                   .BYTE   "F"
00118D  2  47                   .BYTE   "G"
00118E  2  48                   .BYTE   "H"
00118F  2  49                   .BYTE   "I"
001190  2  4B                   .BYTE   "K"
001191  2  4C                   .BYTE   "L"
001192  2  4D                   .BYTE   "M"
001193  2  4E                   .BYTE   "N"
001194  2  4F                   .BYTE   "O"
001195  2  50                   .BYTE   "P"
001196  2  52                   .BYTE   "R"
001197  2  53                   .BYTE   "S"
001198  2  54                   .BYTE   "T"
001199  2  55                   .BYTE   "U"
00119A  2  56                   .BYTE   "V"
00119B  2  57                   .BYTE   "W"
00119C  2  59                   .BYTE   "Y"
00119D  2  5E                   .BYTE   "^"
00119E  2  00                   .BYTE   $00             ; table terminator
00119F  2               
00119F  2               ; pointers to keyword tables
00119F  2               
00119F  2               TAB_CHRT:
00119F  2  DD 11                .WORD   TAB_STAR        ; table for "*"
0011A1  2  DF 11                .WORD   TAB_PLUS        ; table for "+"
0011A3  2  E1 11                .WORD   TAB_MNUS        ; table for "-"
0011A5  2  E3 11                .WORD   TAB_SLAS        ; table for "/"
0011A7  2  E5 11                .WORD   TAB_LESS        ; table for "<"
0011A9  2  E9 11                .WORD   TAB_EQUL        ; table for "="
0011AB  2  EB 11                .WORD   TAB_MORE        ; table for ">"
0011AD  2  EF 11                .WORD   TAB_QEST        ; table for "?"
0011AF  2  F1 11                .WORD   TAB_ASCA        ; table for "A"
0011B1  2  01 12                .WORD   TAB_ASCB        ; table for "B"
0011B3  2  1A 12                .WORD   TAB_ASCC        ; table for "C"
0011B5  2  3F 12                .WORD   TAB_ASCD        ; table for "D"
0011B7  2  6C 12                .WORD   TAB_ASCE        ; table for "E"
0011B9  2  7B 12                .WORD   TAB_ASCF        ; table for "F"
0011BB  2  85 12                .WORD   TAB_ASCG        ; table for "G"
0011BD  2  96 12                .WORD   TAB_ASCH        ; table for "H"
0011BF  2  A0 12                .WORD   TAB_ASCI        ; table for "I"
0011C1  2  C5 12                .WORD   TAB_ASCK        ; table for "K"
0011C3  2  C5 12                .WORD   TAB_ASCL        ; table for "L"
0011C5  2  F0 12                .WORD   TAB_ASCM        ; table for "M"
0011C7  2  10 13                .WORD   TAB_ASCN        ; table for "N"
0011C9  2  24 13                .WORD   TAB_ASCO        ; table for "O"
0011CB  2  30 13                .WORD   TAB_ASCP        ; table for "P"
0011CD  2  54 13                .WORD   TAB_ASCR        ; table for "R"
0011CF  2  77 13                .WORD   TAB_ASCS        ; table for "S"
0011D1  2  BC 13                .WORD   TAB_ASCT        ; table for "T"
0011D3  2  CF 13                .WORD   TAB_ASCU        ; table for "U"
0011D5  2  E0 13                .WORD   TAB_ASCV        ; table for "V"
0011D7  2  F7 13                .WORD   TAB_ASCW        ; table for "W"
0011D9  2  0B 14                .WORD   TAB_ASCY        ; table for "Y"
0011DB  2  10 14                .WORD   TAB_POWR        ; table for "^"
0011DD  2               
0011DD  2               ; tables for each start character, note if a longer keyword with the same start
0011DD  2               ; letters as a shorter one exists then it must come first, else the list is in
0011DD  2               ; alphabetical order as follows ..
0011DD  2               
0011DD  2               ; [keyword,token
0011DD  2               ; [keyword,token]]
0011DD  2               ; end marker (#$00)
0011DD  2               
0011DD  2               TAB_STAR:
0011DD  2  C9 00                .BYTE   TK_MUL,$00      ; *
0011DF  2               TAB_PLUS:
0011DF  2  C7 00                .BYTE   TK_PLUS,$00     ; +
0011E1  2               TAB_MNUS:
0011E1  2  C8 00                .BYTE   TK_MINUS,$00    ; -
0011E3  2               TAB_SLAS:
0011E3  2  CA 00                .BYTE   TK_DIV,$00      ; /
0011E5  2               TAB_LESS:
0011E5  2               LBB_LSHIFT:
0011E5  2  3C D0                .BYTE   "<",TK_LSHIFT   ; <<	note - "<<" must come before "<"
0011E7  2  D3                   .BYTE   TK_LT           ; <
0011E8  2  00                   .BYTE   $00
0011E9  2               TAB_EQUL:
0011E9  2  D2 00                .BYTE   TK_EQUAL,$00    ; =
0011EB  2               TAB_MORE:
0011EB  2               LBB_RSHIFT:
0011EB  2  3E CF                .BYTE   ">",TK_RSHIFT   ; >>	note - ">>" must come before ">"
0011ED  2  D1                   .BYTE   TK_GT           ; >
0011EE  2  00                   .BYTE   $00
0011EF  2               TAB_QEST:
0011EF  2  9E 00                .BYTE   TK_PRINT,$00    ; ?
0011F1  2               TAB_ASCA:
0011F1  2               LBB_ABS:
0011F1  2  42 53 28 D6          .BYTE   "BS(",TK_ABS    ; ABS(
0011F5  2               LBB_AND:
0011F5  2  4E 44 CC             .BYTE   "ND",TK_AND     ; AND
0011F8  2               LBB_ASC:
0011F8  2  53 43 28 E7          .BYTE   "SC(",TK_ASC    ; ASC(
0011FC  2               LBB_ATN:
0011FC  2  54 4E 28 E1          .BYTE   "TN(",TK_ATN    ; ATN(
001200  2  00                   .BYTE   $00
001201  2               TAB_ASCB:
001201  2               LBB_BINS:
001201  2  49 4E 24 28          .BYTE   "IN$(",TK_BINS  ; BIN$(
001205  2  EC           
001206  2               LBB_BITCLR:
001206  2  49 54 43 4C          .BYTE   "ITCLR",TK_BITCLR; BITCLR
00120A  2  52 A7        
00120C  2               LBB_BITSET:
00120C  2  49 54 53 45          .BYTE   "ITSET",TK_BITSET; BITSET
001210  2  54 A6        
001212  2               LBB_BITTST:
001212  2  49 54 54 53          .BYTE   "ITTST(",TK_BITTST
001216  2  54 28 ED     
001219  2               ; BITTST(
001219  2  00                   .BYTE   $00
00121A  2               TAB_ASCC:
00121A  2               LBB_CALL:
00121A  2  41 4C 4C 9B          .BYTE   "ALL",TK_CALL   ; CALL
00121E  2               LBB_CHRS:
00121E  2  48 52 24 28          .BYTE   "HR$(",TK_CHRS  ; CHR$(
001222  2  EA           
001223  2               LBB_CLEAR:
001223  2  4C 45 41 52          .BYTE   "LEAR",TK_CLEAR ; CLEAR
001227  2  A1           
001228  2               LBB_CLOSE:
001228  2  4C 4F 53 45          .BYTE   "LOSE",TK_CLOSE ; CLOSE
00122C  2  AA           
00122D  2               LBB_COLOR:
00122D  2  4F 4C 4F 52          .BYTE   "OLOR",TK_COLOR ; COLOR
001231  2  B2           
001232  2               LBB_CON:
001232  2  4F 4E 28 FC          .BYTE   "ON(",TK_CON    ;CON
001236  2               LBB_CONT:
001236  2  4F 4E 54 9F          .BYTE   "ONT",TK_CONT   ; CONT
00123A  2               LBB_COS:
00123A  2  4F 53 28 DE          .BYTE   "OS(",TK_COS    ; COS(
00123E  2  00                   .BYTE   $00
00123F  2               TAB_ASCD:
00123F  2               LBB_DATA:
00123F  2  41 54 41 83          .BYTE   "ATA",TK_DATA   ; DATA
001243  2               LBB_DAY:
001243  2  41 59 F6             .BYTE   "AY",TK_DAY     ; DAY
001246  2               LBB_DEC:
001246  2  45 43 8A             .BYTE   "EC",TK_DEC     ; DEC
001249  2               LBB_DEF:
001249  2  45 46 99             .BYTE   "EF",TK_DEF     ; DEF
00124C  2               LBB_DIM:
00124C  2  49 4D 87             .BYTE   "IM",TK_DIM     ; DIM
00124F  2               LBB_DIRECTORY:
00124F  2  49 52 45 43          .BYTE   "IRECTORY",TK_DIRECTORY; DIRECTORY
001253  2  54 4F 52 59  
001257  2  84           
001258  2               LBB_DISKCMD:
001258  2  49 53 4B 43          .BYTE   "ISKCMD",TK_DISKCMD; DISKCMD
00125C  2  4D 44 AF     
00125F  2               LBB_DISKSTATUS:
00125F  2  49 53 4B 53          .BYTE   "ISKSTATUS",TK_DISKSTATUS; DISKSTATUS
001263  2  54 41 54 55  
001267  2  53 85        
001269  2               LBB_DO:
001269  2  4F 9C                .BYTE   "O",TK_DO       ; DO
00126B  2  00                   .BYTE   $00
00126C  2               TAB_ASCE:
00126C  2               LBB_ELSE:
00126C  2  4C 53 45 BD          .BYTE   "LSE",TK_ELSE   ; ELSE
001270  2               LBB_END:
001270  2  4E 44 80             .BYTE   "ND",TK_END     ; END
001273  2               LBB_EOR:
001273  2  4F 52 CD             .BYTE   "OR",TK_EOR     ; EOR
001276  2               LBB_EXP:
001276  2  58 50 28 DD          .BYTE   "XP(",TK_EXP    ; EXP(
00127A  2  00                   .BYTE   $00
00127B  2               TAB_ASCF:
00127B  2               LBB_FN:
00127B  2  4E BF                .BYTE   "N",TK_FN       ; FN
00127D  2               LBB_FOR:
00127D  2  4F 52 81             .BYTE   "OR",TK_FOR     ; FOR
001280  2               LBB_FRE:
001280  2  52 45 28 D8          .BYTE   "RE(",TK_FRE    ; FRE(
001284  2  00                   .BYTE   $00
001285  2               TAB_ASCG:
001285  2               LBB_GETN:
001285  2  45 54 23 AE          .BYTE   "ET#",TK_GETN   ; GETN
001289  2               LBB_GET:
001289  2  45 54 A4             .BYTE   "ET",TK_GET     ; GET
00128C  2               LBB_GOSUB:
00128C  2  4F 53 55 42          .BYTE   "OSUB",TK_GOSUB ; GOSUB
001290  2  8F           
001291  2               LBB_GOTO:
001291  2  4F 54 4F 8B          .BYTE   "OTO",TK_GOTO   ; GOTO
001295  2  00                   .BYTE   $00
001296  2               TAB_ASCH:
001296  2               LBB_HEXS:
001296  2  45 58 24 28          .BYTE   "EX$(",TK_HEXS  ; HEX$(
00129A  2  EB           
00129B  2               LBB_HOUR:
00129B  2  4F 55 52 F4          .BYTE   "OUR",TK_HOUR   ; HOUR
00129F  2  00                   .BYTE   $00
0012A0  2               TAB_ASCI:
0012A0  2               LBB_IECINPUT:
0012A0  2  45 43 49 4E          .BYTE   "ECINPUT",TK_IECINPUT; IECINPUT
0012A4  2  50 55 54 AB  
0012A8  2               LBB_IECOUTPUT:
0012A8  2  45 43 4F 55          .BYTE   "ECOUTPUT",TK_IECOUTPUT; IECOUTPUT
0012AC  2  54 50 55 54  
0012B0  2  AC           
0012B1  2               LBB_IECST:
0012B1  2  45 43 53 54          .BYTE   "ECST",TK_IECST ; IECST
0012B5  2  F1           
0012B6  2               LBB_IF:
0012B6  2  46 8D                .BYTE   "F",TK_IF       ; IF
0012B8  2               LBB_INC:
0012B8  2  4E 43 95             .BYTE   "NC",TK_INC     ; INC
0012BB  2               LBB_INPUT:
0012BB  2  4E 50 55 54          .BYTE   "NPUT",TK_INPUT ; INPUT
0012BF  2  86           
0012C0  2               LBB_INT:
0012C0  2  4E 54 28 D5          .BYTE   "NT(",TK_INT    ; INT(
0012C4  2  00                   .BYTE   $00
0012C5  2               TAB_ASCK:
0012C5  2               TAB_ASCL:
0012C5  2               LBB_LCASES:
0012C5  2  43 41 53 45          .BYTE   "CASE$(",TK_LCASES
0012C9  2  24 28 E9     
0012CC  2               ; LCASE$(
0012CC  2               LBB_LEFTS:
0012CC  2  45 46 54 24          .BYTE   "EFT$(",TK_LEFTS; LEFT$(
0012D0  2  28 F9        
0012D2  2               LBB_LEN:
0012D2  2  45 4E 28 E4          .BYTE   "EN(",TK_LEN    ; LEN(
0012D6  2               LBB_LET:
0012D6  2  45 54 89             .BYTE   "ET",TK_LET     ; LET
0012D9  2               LBB_LIST:
0012D9  2  49 53 54 A0          .BYTE   "IST",TK_LIST   ; LIST
0012DD  2               LBB_LOAD:
0012DD  2  4F 41 44 97          .BYTE   "OAD",TK_LOAD   ; LOAD
0012E1  2               LBB_LOCATE:
0012E1  2  4F 43 41 54          .BYTE   "OCATE",TK_LOCATE; LOCATE
0012E5  2  45 B1        
0012E7  2               LBB_LOG:
0012E7  2  4F 47 28 DC          .BYTE   "OG(",TK_LOG    ; LOG(
0012EB  2               LBB_LOOP:
0012EB  2  4F 4F 50 9D          .BYTE   "OOP",TK_LOOP   ; LOOP
0012EF  2  00                   .BYTE   $00
0012F0  2               TAB_ASCM:
0012F0  2               LBB_MAX:
0012F0  2  41 58 28 EE          .BYTE   "AX(",TK_MAX    ; MAX(
0012F4  2               LBB_MIDS:
0012F4  2  49 44 24 28          .BYTE   "ID$(",TK_MIDS  ; MID$(
0012F8  2  FB           
0012F9  2               LBB_MIN:
0012F9  2  49 4E 28 EF          .BYTE   "IN(",TK_MIN    ; MIN(
0012FD  2               LBB_MINUTE:
0012FD  2  49 4E 55 54          .BYTE   "INUTE",TK_MINUTE; MINUTE
001301  2  45 F3        
001303  2               LBB_MONITOR:
001303  2  4F 4E 49 54          .BYTE   "ONITOR",TK_MONITOR; MONITOR
001307  2  4F 52 A8     
00130A  2               LBB_MONTH:
00130A  2  4F 4E 54 48          .BYTE   "ONTH",TK_MONTH ; MONTH
00130E  2  F7           
00130F  2  00                   .BYTE   $00
001310  2               TAB_ASCN:
001310  2               LBB_NEW:
001310  2  45 57 A2             .BYTE   "EW",TK_NEW     ; NEW
001313  2               LBB_NEXT:
001313  2  45 58 54 82          .BYTE   "EXT",TK_NEXT   ; NEXT
001317  2               LBB_NOISE:
001317  2  4F 49 53 45          .BYTE   "OISE",TK_NOISE ; NOISE
00131B  2  B8           
00131C  2               LBB_NOT:
00131C  2  4F 54 C2             .BYTE   "OT",TK_NOT     ; NOT
00131F  2               LBB_NULL:
00131F  2  55 4C 4C 94          .BYTE   "ULL",TK_NULL   ; NULL
001323  2  00                   .BYTE   $00
001324  2               TAB_ASCO:
001324  2               LBB_OFF:
001324  2  46 46 C6             .BYTE   "FF",TK_OFF     ; OFF
001327  2               LBB_ON:
001327  2  4E 93                .BYTE   "N",TK_ON       ; ON
001329  2               LBB_OPEN:
001329  2  50 45 4E A9          .BYTE   "PEN",TK_OPEN   ; OPEN
00132D  2               LBB_OR:
00132D  2  52 CE                .BYTE   "R",TK_OR       ; OR
00132F  2  00                   .BYTE   $00
001330  2               TAB_ASCP:
001330  2               LBB_PATTERN:
001330  2  41 54 54 45          .BYTE   "ATTERN",TK_PATTERN; PATTERN
001334  2  52 4E B5     
001337  2               LBB_PEEK:
001337  2  45 45 4B 28          .BYTE   "EEK(",TK_PEEK  ; PEEK(
00133B  2  E2           
00133C  2               LBB_PI:
00133C  2  49 F0                .BYTE   "I",TK_PI       ; PI
00133E  2               LBB_PLOT:
00133E  2  4C 4F 54 B4          .BYTE   "LOT",TK_PLOT   ; PLOT
001342  2               LBB_POKE:
001342  2  4F 4B 45 9A          .BYTE   "OKE",TK_POKE   ; POKE
001346  2               LBB_POS:
001346  2  4F 53 28 D9          .BYTE   "OS(",TK_POS    ; POS(
00134A  2               LBB_PRINT:
00134A  2  52 49 4E 54          .BYTE   "RINT",TK_PRINT ; PRINT
00134E  2  9E           
00134F  2               LBB_PUTN:
00134F  2  55 54 23 AD          .BYTE   "UT#",TK_PUTN   ; PUTN
001353  2  00                   .BYTE   $00
001354  2               TAB_ASCR:
001354  2               LBB_READ:
001354  2  45 41 44 88          .BYTE   "EAD",TK_READ   ; READ
001358  2               LBB_REM:
001358  2  45 4D 91             .BYTE   "EM",TK_REM     ; REM
00135B  2               LBB_RESTORE:
00135B  2  45 53 54 4F          .BYTE   "ESTORE",TK_RESTORE
00135F  2  52 45 8E     
001362  2               ; RESTORE
001362  2               LBB_RETURN:
001362  2  45 54 55 52          .BYTE   "ETURN",TK_RETURN; RETURN
001366  2  4E 90        
001368  2               LBB_RIGHTS:
001368  2  49 47 48 54          .BYTE   "IGHT$(",TK_RIGHTS
00136C  2  24 28 FA     
00136F  2               ; RIGHT$(
00136F  2               LBB_RND:
00136F  2  4E 44 28 DB          .BYTE   "ND(",TK_RND    ; RND(
001373  2               LBB_RUN:
001373  2  55 4E 8C             .BYTE   "UN",TK_RUN     ; RUN
001376  2  00                   .BYTE   $00
001377  2               TAB_ASCS:
001377  2               LBB_SADD:
001377  2  41 44 44 28          .BYTE   "ADD(",TK_SADD  ; SADD(
00137B  2  E3           
00137C  2               LBB_SAVE:
00137C  2  41 56 45 98          .BYTE   "AVE",TK_SAVE   ; SAVE
001380  2               LBB_SCNCLR:
001380  2  43 4E 43 4C          .BYTE   "CNCLR",TK_SCNCLR; SCNCLR
001384  2  52 B0        
001386  2               LBB_SCREEN:
001386  2  43 52 45 45          .BYTE   "CREEN",TK_SCREEN; SCREEN
00138A  2  4E B3        
00138C  2               LBB_SECOND:
00138C  2  45 43 4F 4E          .BYTE   "ECOND",TK_SECOND; SECOND
001390  2  44 F2        
001392  2               LBB_SGN:
001392  2  47 4E 28 D4          .BYTE   "GN(",TK_SGN    ; SGN(
001396  2               LBB_SIN:
001396  2  49 4E 28 DF          .BYTE   "IN(",TK_SIN    ; SIN(
00139A  2               LBB_SOUND:
00139A  2  4F 55 4E 44          .BYTE   "OUND",TK_SOUND ; SOUND
00139E  2  B7           
00139F  2               LBB_SPC:
00139F  2  50 43 28 C0          .BYTE   "PC(",TK_SPC    ; SPC(
0013A3  2               LBB_SQR:
0013A3  2  51 52 28 DA          .BYTE   "QR(",TK_SQR    ; SQR(
0013A7  2               LBB_STEP:
0013A7  2  54 45 50 C3          .BYTE   "TEP",TK_STEP   ; STEP
0013AB  2               LBB_STOP:
0013AB  2  54 4F 50 92          .BYTE   "TOP",TK_STOP   ; STOP
0013AF  2               LBB_STRS:
0013AF  2  54 52 24 28          .BYTE   "TR$(",TK_STRS  ; STR$(
0013B3  2  E5           
0013B4  2               LBB_SWAP:
0013B4  2  57 41 50 A5          .BYTE   "WAP",TK_SWAP   ; SWAP
0013B8  2               LBB_SYS:
0013B8  2  59 53 B6             .BYTE   "YS",TK_SYS     ; SYS
0013BB  2  00                   .BYTE   $00
0013BC  2               TAB_ASCT:
0013BC  2               LBB_TAB:
0013BC  2  41 42 28 BC          .BYTE   "AB(",TK_TAB    ; TAB(
0013C0  2               LBB_TAN:
0013C0  2  41 4E 28 E0          .BYTE   "AN(",TK_TAN    ; TAN(
0013C4  2               LBB_THEN:
0013C4  2  48 45 4E C1          .BYTE   "HEN",TK_THEN   ; THEN
0013C8  2               LBB_TONE:
0013C8  2  4F 4E 45 B9          .BYTE   "ONE",TK_TONE   ; TONE
0013CC  2               LBB_TO:
0013CC  2  4F BE                .BYTE   "O",TK_TO       ; TO
0013CE  2  00                   .BYTE   $00
0013CF  2               TAB_ASCU:
0013CF  2               LBB_UCASES:
0013CF  2  43 41 53 45          .BYTE   "CASE$(",TK_UCASES
0013D3  2  24 28 E8     
0013D6  2               ; UCASE$(
0013D6  2               LBB_UNTIL:
0013D6  2  4E 54 49 4C          .BYTE   "NTIL",TK_UNTIL ; UNTIL
0013DA  2  C4           
0013DB  2               LBB_USR:
0013DB  2  53 52 28 D7          .BYTE   "SR(",TK_USR    ; USR(
0013DF  2  00                   .BYTE   $00
0013E0  2               TAB_ASCV:
0013E0  2               LBB_VAL:
0013E0  2  41 4C 28 E6          .BYTE   "AL(",TK_VAL    ; VAL(
0013E4  2               LBB_VPTR:
0013E4  2  41 52 50 54          .BYTE   "ARPTR(",TK_VPTR; VARPTR(
0013E8  2  52 28 F8     
0013EB  2               LBB_VOICE:
0013EB  2  4F 49 43 45          .BYTE   "OICE",TK_VOICE ; VOICE
0013EF  2  BB           
0013F0  2               LBB_VOLUME:
0013F0  2  4F 4C 55 4D          .BYTE   "OLUME",TK_VOLUME; VOLUME
0013F4  2  45 BA        
0013F6  2               
0013F6  2  00                   .BYTE   $00
0013F7  2               TAB_ASCW:
0013F7  2               LBB_WAIT:
0013F7  2  41 49 54 96          .BYTE   "AIT",TK_WAIT   ; WAIT
0013FB  2               LBB_WEEKD:
0013FB  2  45 45 4B 44          .BYTE   "EEKD",TK_WEEKD ; WEEKD
0013FF  2  F5           
001400  2               LBB_WHILE:
001400  2  48 49 4C 45          .BYTE   "HILE",TK_WHILE ; WHILE
001404  2  C5           
001405  2               LBB_WIDTH:
001405  2  49 44 54 48          .BYTE   "IDTH",TK_WIDTH ; WIDTH
001409  2  A3           
00140A  2  00                   .BYTE   $00
00140B  2               TAB_ASCY:
00140B  2               LBB_YEAR:
00140B  2  45 41 52 F8          .BYTE   "EAR",TK_YEAR   ; YEAR
00140F  2  00                   .BYTE   $00
001410  2               
001410  2               TAB_POWR:
001410  2  CB 00                .BYTE   TK_POWER,$00    ; ^
001412  2               
001412  2               ; new decode table for LIST
001412  2               ; Table is ..
001412  2               ; byte - keyword length, keyword first character
001412  2               ; word - pointer to rest of keyword from dictionary
001412  2               
001412  2               ; note if length is 1 then the pointer is ignored
001412  2               
001412  2               LAB_KEYT:
001412  2  03 45                .BYTE   3,'E'
001414  2  70 12                .WORD   LBB_END         ; END
001416  2  03 46                .BYTE   3,'F'
001418  2  7D 12                .WORD   LBB_FOR         ; FOR
00141A  2  04 4E                .BYTE   4,'N'
00141C  2  13 13                .WORD   LBB_NEXT        ; NEXT
00141E  2  04 44                .BYTE   4,'D'
001420  2  3F 12                .WORD   LBB_DATA        ; DATA
001422  2  09 44                .BYTE   9,'D'
001424  2  4F 12                .WORD   LBB_DIRECTORY   ; DIRECTORY
001426  2  0A 44                .BYTE   10,'D'
001428  2  5F 12                .WORD   LBB_DISKSTATUS  ; DISKSTATUS
00142A  2  05 49                .BYTE   5,'I'
00142C  2  BB 12                .WORD   LBB_INPUT       ; INPUT
00142E  2  03 44                .BYTE   3,'D'
001430  2  4C 12                .WORD   LBB_DIM         ; DIM
001432  2  04 52                .BYTE   4,'R'
001434  2  54 13                .WORD   LBB_READ        ; READ
001436  2  03 4C                .BYTE   3,'L'
001438  2  D6 12                .WORD   LBB_LET         ; LET
00143A  2  03 44                .BYTE   3,'D'
00143C  2  46 12                .WORD   LBB_DEC         ; DEC
00143E  2  04 47                .BYTE   4,'G'
001440  2  91 12                .WORD   LBB_GOTO        ; GOTO
001442  2  03 52                .BYTE   3,'R'
001444  2  73 13                .WORD   LBB_RUN         ; RUN
001446  2  02 49                .BYTE   2,'I'
001448  2  B6 12                .WORD   LBB_IF          ; IF
00144A  2  07 52                .BYTE   7,'R'
00144C  2  5B 13                .WORD   LBB_RESTORE     ; RESTORE
00144E  2  05 47                .BYTE   5,'G'
001450  2  8C 12                .WORD   LBB_GOSUB       ; GOSUB
001452  2  06 52                .BYTE   6,'R'
001454  2  62 13                .WORD   LBB_RETURN      ; RETURN
001456  2  03 52                .BYTE   3,'R'
001458  2  58 13                .WORD   LBB_REM         ; REM
00145A  2  04 53                .BYTE   4,'S'
00145C  2  AB 13                .WORD   LBB_STOP        ; STOP
00145E  2  02 4F                .BYTE   2,'O'
001460  2  27 13                .WORD   LBB_ON          ; ON
001462  2  04 4E                .BYTE   4,'N'
001464  2  1F 13                .WORD   LBB_NULL        ; NULL
001466  2  03 49                .BYTE   3,'I'
001468  2  B8 12                .WORD   LBB_INC         ; INC
00146A  2  04 57                .BYTE   4,'W'
00146C  2  F7 13                .WORD   LBB_WAIT        ; WAIT
00146E  2  04 4C                .BYTE   4,'L'
001470  2  DD 12                .WORD   LBB_LOAD        ; LOAD
001472  2  04 53                .BYTE   4,'S'
001474  2  7C 13                .WORD   LBB_SAVE        ; SAVE
001476  2  03 44                .BYTE   3,'D'
001478  2  49 12                .WORD   LBB_DEF         ; DEF
00147A  2  04 50                .BYTE   4,'P'
00147C  2  42 13                .WORD   LBB_POKE        ; POKE
00147E  2  04 43                .BYTE   4,'C'
001480  2  1A 12                .WORD   LBB_CALL        ; CALL
001482  2  02 44                .BYTE   2,'D'
001484  2  69 12                .WORD   LBB_DO          ; DO
001486  2  04 4C                .BYTE   4,'L'
001488  2  EB 12                .WORD   LBB_LOOP        ; LOOP
00148A  2  05 50                .BYTE   5,'P'
00148C  2  4A 13                .WORD   LBB_PRINT       ; PRINT
00148E  2  04 43                .BYTE   4,'C'
001490  2  36 12                .WORD   LBB_CONT        ; CONT
001492  2  04 4C                .BYTE   4,'L'
001494  2  D9 12                .WORD   LBB_LIST        ; LIST
001496  2  05 43                .BYTE   5,'C'
001498  2  23 12                .WORD   LBB_CLEAR       ; CLEAR
00149A  2  03 4E                .BYTE   3,'N'
00149C  2  10 13                .WORD   LBB_NEW         ; NEW
00149E  2  05 57                .BYTE   5,'W'
0014A0  2  05 14                .WORD   LBB_WIDTH       ; WIDTH
0014A2  2  03 47                .BYTE   3,'G'
0014A4  2  89 12                .WORD   LBB_GET         ; GET
0014A6  2  04 53                .BYTE   4,'S'
0014A8  2  B4 13                .WORD   LBB_SWAP        ; SWAP
0014AA  2  06 42                .BYTE   6,'B'
0014AC  2  0C 12                .WORD   LBB_BITSET      ; BITSET
0014AE  2  06 42                .BYTE   6,'B'
0014B0  2  06 12                .WORD   LBB_BITCLR      ; BITCLR
0014B2  2  07 4D                .BYTE   7,'M'
0014B4  2  03 13                .WORD   LBB_MONITOR     ; MONITOR
0014B6  2  04 4F                .BYTE   4,'O'
0014B8  2  29 13                .WORD   LBB_OPEN        ; OPEN
0014BA  2  05 43                .BYTE   5,'C'
0014BC  2  28 12                .WORD   LBB_CLOSE       ; CLOSE
0014BE  2  08 49                .BYTE   8,'I'
0014C0  2  A0 12                .WORD   LBB_IECINPUT    ; IECINPUT
0014C2  2  09 49                .BYTE   9,'I'
0014C4  2  A8 12                .WORD   LBB_IECOUTPUT   ; IECOUTPUT
0014C6  2  04 50                .BYTE   4,'P'
0014C8  2  4F 13                .WORD   LBB_PUTN        ; PUTN
0014CA  2  04 47                .BYTE   4,'G'
0014CC  2  85 12                .WORD   LBB_GETN        ; GETN
0014CE  2  07 44                .BYTE   7,'D'
0014D0  2  58 12                .WORD   LBB_DISKCMD     ; DISKCMD
0014D2  2  06 53                .BYTE   6,'S'
0014D4  2  80 13                .WORD   LBB_SCNCLR      ; SCNCLR
0014D6  2  06 4C                .BYTE   6,'L'
0014D8  2  E1 12                .WORD   LBB_LOCATE      ; LOCATE
0014DA  2  05 43                .BYTE   5,'C'
0014DC  2  2D 12                .WORD   LBB_COLOR       ; COLOR
0014DE  2  06 53                .BYTE   6,'S'
0014E0  2  86 13                .WORD   LBB_SCREEN      ; SCREEN
0014E2  2  04 50                .BYTE   4,'P'
0014E4  2  3E 13                .WORD   LBB_PLOT        ; PLOT
0014E6  2  07 50                .BYTE   7,'P'
0014E8  2  30 13                .WORD   LBB_PATTERN     ; PATTERN
0014EA  2  03 53                .BYTE   3,'S'
0014EC  2  B8 13                .WORD   LBB_SYS         ; SYS
0014EE  2  05 53                .BYTE   5,'S'
0014F0  2  9A 13                .WORD   LBB_SOUND       ; SOUND
0014F2  2  05 4E                .BYTE   5,'N'
0014F4  2  17 13                .WORD   LBB_NOISE       ; NOISE
0014F6  2  04 54                .BYTE   4,'T'
0014F8  2  C8 13                .WORD   LBB_TONE        ; TONE
0014FA  2  06 56                .BYTE   6,'V'
0014FC  2  F0 13                .WORD   LBB_VOLUME      ; VOLUME
0014FE  2  05 56                .BYTE   5,'V'
001500  2  EB 13                .WORD   LBB_VOICE       ; VOICE
001502  2               
001502  2               ; secondary commands (can't start a statement)
001502  2               
001502  2  04 54                .BYTE   4,'T'
001504  2  BC 13                .WORD   LBB_TAB         ; TAB
001506  2  04 45                .BYTE   4,'E'
001508  2  6C 12                .WORD   LBB_ELSE        ; ELSE
00150A  2  02 54                .BYTE   2,'T'
00150C  2  CC 13                .WORD   LBB_TO          ; TO
00150E  2  02 46                .BYTE   2,'F'
001510  2  7B 12                .WORD   LBB_FN          ; FN
001512  2  04 53                .BYTE   4,'S'
001514  2  9F 13                .WORD   LBB_SPC         ; SPC
001516  2  04 54                .BYTE   4,'T'
001518  2  C4 13                .WORD   LBB_THEN        ; THEN
00151A  2  03 4E                .BYTE   3,'N'
00151C  2  1C 13                .WORD   LBB_NOT         ; NOT
00151E  2  04 53                .BYTE   4,'S'
001520  2  A7 13                .WORD   LBB_STEP        ; STEP
001522  2  05 55                .BYTE   5,'U'
001524  2  D6 13                .WORD   LBB_UNTIL       ; UNTIL
001526  2  05 57                .BYTE   5,'W'
001528  2  00 14                .WORD   LBB_WHILE       ; WHILE
00152A  2  03 4F                .BYTE   3,'O'
00152C  2  24 13                .WORD   LBB_OFF         ; OFF
00152E  2               
00152E  2               ; opperators
00152E  2               
00152E  2  01 2B                .BYTE   1,'+'
001530  2  00 00                .WORD   $0000           ; +
001532  2  01 2D                .BYTE   1,'-'
001534  2  00 00                .WORD   $0000           ; -
001536  2  01 2A                .BYTE   1,'*'
001538  2  00 00                .WORD   $0000           ; *
00153A  2  01 2F                .BYTE   1,'/'
00153C  2  00 00                .WORD   $0000           ; /
00153E  2  01 5E                .BYTE   1,'^'
001540  2  00 00                .WORD   $0000           ; ^
001542  2  03 41                .BYTE   3,'A'
001544  2  F5 11                .WORD   LBB_AND         ; AND
001546  2  03 45                .BYTE   3,'E'
001548  2  73 12                .WORD   LBB_EOR         ; EOR
00154A  2  02 4F                .BYTE   2,'O'
00154C  2  2D 13                .WORD   LBB_OR          ; OR
00154E  2  02 3E                .BYTE   2,'>'
001550  2  EB 11                .WORD   LBB_RSHIFT      ; >>
001552  2  02 3C                .BYTE   2,'<'
001554  2  E5 11                .WORD   LBB_LSHIFT      ; <<
001556  2  01 3E                .BYTE   1,'>'
001558  2  00 00                .WORD   $0000           ; >
00155A  2  01 3D                .BYTE   1,'='
00155C  2  00 00                .WORD   $0000           ; =
00155E  2  01 3C                .BYTE   1,'<'
001560  2  00 00                .WORD   $0000           ; <
001562  2               
001562  2               ; functions
001562  2               
001562  2  04 53                .BYTE   4,'S'           ;
001564  2  92 13                .WORD   LBB_SGN         ; SGN
001566  2  04 49                .BYTE   4,'I'           ;
001568  2  C0 12                .WORD   LBB_INT         ; INT
00156A  2  04 41                .BYTE   4,'A'           ;
00156C  2  F1 11                .WORD   LBB_ABS         ; ABS
00156E  2  04 55                .BYTE   4,'U'           ;
001570  2  DB 13                .WORD   LBB_USR         ; USR
001572  2  04 46                .BYTE   4,'F'           ;
001574  2  80 12                .WORD   LBB_FRE         ; FRE
001576  2  04 50                .BYTE   4,'P'           ;
001578  2  46 13                .WORD   LBB_POS         ; POS
00157A  2  04 53                .BYTE   4,'S'           ;
00157C  2  A3 13                .WORD   LBB_SQR         ; SQR
00157E  2  04 52                .BYTE   4,'R'           ;
001580  2  6F 13                .WORD   LBB_RND         ; RND
001582  2  04 4C                .BYTE   4,'L'           ;
001584  2  E7 12                .WORD   LBB_LOG         ; LOG
001586  2  04 45                .BYTE   4,'E'           ;
001588  2  76 12                .WORD   LBB_EXP         ; EXP
00158A  2  04 43                .BYTE   4,'C'           ;
00158C  2  3A 12                .WORD   LBB_COS         ; COS
00158E  2  04 53                .BYTE   4,'S'           ;
001590  2  96 13                .WORD   LBB_SIN         ; SIN
001592  2  04 54                .BYTE   4,'T'           ;
001594  2  C0 13                .WORD   LBB_TAN         ; TAN
001596  2  04 41                .BYTE   4,'A'           ;
001598  2  FC 11                .WORD   LBB_ATN         ; ATN
00159A  2  05 50                .BYTE   5,'P'           ;
00159C  2  37 13                .WORD   LBB_PEEK        ; PEEK
00159E  2  05 53                .BYTE   5,'S'           ;
0015A0  2  77 13                .WORD   LBB_SADD        ; SADD
0015A2  2  04 4C                .BYTE   4,'L'           ;
0015A4  2  D2 12                .WORD   LBB_LEN         ; LEN
0015A6  2  05 53                .BYTE   5,'S'           ;
0015A8  2  AF 13                .WORD   LBB_STRS        ; STR$
0015AA  2  04 56                .BYTE   4,'V'           ;
0015AC  2  E0 13                .WORD   LBB_VAL         ; VAL
0015AE  2  04 41                .BYTE   4,'A'           ;
0015B0  2  F8 11                .WORD   LBB_ASC         ; ASC
0015B2  2  07 55                .BYTE   7,'U'           ;
0015B4  2  CF 13                .WORD   LBB_UCASES      ; UCASE$
0015B6  2  07 4C                .BYTE   7,'L'           ;
0015B8  2  C5 12                .WORD   LBB_LCASES      ; LCASE$
0015BA  2  05 43                .BYTE   5,'C'           ;
0015BC  2  1E 12                .WORD   LBB_CHRS        ; CHR$
0015BE  2  05 48                .BYTE   5,'H'           ;
0015C0  2  96 12                .WORD   LBB_HEXS        ; HEX$
0015C2  2  05 42                .BYTE   5,'B'           ;
0015C4  2  01 12                .WORD   LBB_BINS        ; BIN$
0015C6  2  07 42                .BYTE   7,'B'           ;
0015C8  2  12 12                .WORD   LBB_BITTST      ; BITTST
0015CA  2  04 4D                .BYTE   4,'M'           ;
0015CC  2  F0 12                .WORD   LBB_MAX         ; MAX
0015CE  2  04 4D                .BYTE   4,'M'           ;
0015D0  2  F9 12                .WORD   LBB_MIN         ; MIN
0015D2  2  02 50                .BYTE   2,'P'           ;
0015D4  2  3C 13                .WORD   LBB_PI          ; PI
0015D6  2  05 49                .BYTE   5,'I'           ;
0015D8  2  B1 12                .WORD   LBB_IECST       ; IECST
0015DA  2  06 53                .BYTE   6,'S'           ;
0015DC  2  8C 13                .WORD   LBB_SECOND      ; SECOND
0015DE  2  06 4D                .BYTE   6,'M'           ;
0015E0  2  FD 12                .WORD   LBB_MINUTE      ; MINUTE
0015E2  2  04 48                .BYTE   4,'H'           ;
0015E4  2  9B 12                .WORD   LBB_HOUR        ; HOUR
0015E6  2  05 57                .BYTE   5,'W'           ;
0015E8  2  FB 13                .WORD   LBB_WEEKD       ; WEEKD
0015EA  2  03 44                .BYTE   3,'D'           ;
0015EC  2  43 12                .WORD   LBB_DAY         ; DAY
0015EE  2  05 4D                .BYTE   5,'M'           ;
0015F0  2  0A 13                .WORD   LBB_MONTH       ; MONTH
0015F2  2  04 59                .BYTE   4,'Y'           ;
0015F4  2  0B 14                .WORD   LBB_YEAR        ; YEAR
0015F6  2  05 56                .BYTE   5,'V'           ;
0015F8  2  E4 13                .WORD   LBB_VPTR        ; VARPTR
0015FA  2  06 4C                .BYTE   6,'L'           ;
0015FC  2  CC 12                .WORD   LBB_LEFTS       ; LEFT$
0015FE  2  07 52                .BYTE   7,'R'           ;
001600  2  68 13                .WORD   LBB_RIGHTS      ; RIGHT$
001602  2  05 4D                .BYTE   5,'M'           ;
001604  2  F4 12                .WORD   LBB_MIDS        ; MID$
001606  2  04 43                .BYTE   4,'C'           ;
001608  2  32 12                .WORD   LBB_CON         ; CON
00160A  2               
00160A  1               
00160A  1               ; DEFINITIONS
00160A  1                       .INCLUDE "definitions.asm"
00160A  2               PROGRAMBANK     = $FF           ; BANK THAT THE INTREPRETER LIVES IN
00160A  2               DATABANK        = $02           ; BANK THAT THE DATA LIVES IN
00160A  2               
00160A  2               FNBUFFER        = $000F00       ; FILE NAME BUFFER, MUST BE IN ZERO BANK!
00160A  2               
00160A  2               
00160A  2               
00160A  2               ; offsets from a base of X or Y
00160A  2               
00160A  2               PLUS_0          = $00           ; X or Y plus 0
00160A  2               PLUS_1          = $01           ; X or Y plus 1
00160A  2               PLUS_2          = $02           ; X or Y plus 2
00160A  2               PLUS_3          = $03           ; X or Y plus 3
00160A  2               
00160A  2               STACK_BOTTOM    = $B000         ; stack bottom, no offset
00160A  2               STACK           = $BFFF         ; stack top, no offset
00160A  2               
00160A  2               ccflag          = $000200       ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
00160A  2               ccbyte          = ccflag+1      ; BASIC CTRL-C byte
00160A  2               ccnull          = ccbyte+1      ; BASIC CTRL-C byte timeout
00160A  2               
00160A  2               VEC_CC          = ccnull+1      ; ctrl c check vector
00160A  2               
00160A  2               
00160A  2               ; Ibuffs can now be anywhere in RAM AS LONG AS IT IS BEFORE RAM_BASE AND IS NOT PAGE ALIGNED!, ensure that the max length is < $80
00160A  2               
00160A  2                       .IF     PROGRAMBANK=DATABANK
00160A  2               Ibuffs              = (ENDOFBASIC&$FF00)+$181
00160A  2                       .ELSE
00160A  2               Ibuffs              = $2000+$181
00160A  2               LIbuffs             = (DATABANK*$10000)+$2000+$181
00160A  2                       .ENDIF
00160A  2               Ibuffe          = Ibuffs+80     ; end of input buffer
00160A  2               
00160A  2               Ram_base        = ((Ibuffe+1)&$FF00)+$100; start of user RAM (set as needed, should be page aligned)
00160A  2               Ram_top         = $FF00         ; end of user RAM+1 (set as needed, should be page aligned)
00160A  2               
00160A  1               
00160A  1               ; MESSAGES
00160A  1                       .INCLUDE "messages.asm"
00160A  2               
00160A  2               LAB_CONMSG:
00160A  2  80 80 80 83          .BYTE   $80,$80,$80,$83,$84,$85,"  Werner Engineering 816",$0D
00160E  2  84 85 20 20  
001612  2  57 65 72 6E  
001629  2  81 81 81 83          .BYTE   $81,$81,$81,$83,$84,$85,"  Enhanced BASIC 65816 2.3",$0D
00162D  2  84 85 20 20  
001631  2  45 6E 68 61  
00164A  2  82 82 82 83          .BYTE   $82,$82,$82,$83,$84,$85,00
00164E  2  84 85 00     
001651  2               
001651  2               LAB_SMSG:
001651  2  20 42 79 74          .BYTE   " Bytes free",$00
001655  2  65 73 20 66  
001659  2  72 65 65 00  
00165D  2               LAB_SMSG1:
00165D  2  0D 0A 45 6E          .BYTE   $0D,$0A,"Enhanced BASIC 65816 2.3",$00
001661  2  68 61 6E 63  
001665  2  65 64 20 42  
001678  2  0D 0A 44 45          .BYTE   $0D,$0A,"DERIVED FROM ehBASIC BY LEE DAVIDSON",$00
00167C  2  52 49 56 45  
001680  2  44 20 46 52  
00169F  2               
00169F  2               ; BASIC messages, mostly error messages
00169F  2               
00169F  2               LAB_BAER:
00169F  2  C3 16                .WORD   ERR_NF          ;$00 NEXT without FOR
0016A1  2  D4 16                .WORD   ERR_SN          ;$02 syntax
0016A3  2  DB 16                .WORD   ERR_RG          ;$04 RETURN without GOSUB
0016A5  2  F0 16                .WORD   ERR_OD          ;$06 out of data
0016A7  2  FC 16                .WORD   ERR_FC          ;$08 function call
0016A9  2  0A 17                .WORD   ERR_OV          ;$0A overflow
0016AB  2  13 17                .WORD   ERR_OM          ;$0C out of memory
0016AD  2  21 17                .WORD   ERR_US          ;$0E undefined statement
0016AF  2  35 17                .WORD   ERR_BS          ;$10 array bounds
0016B1  2  42 17                .WORD   ERR_DD          ;$12 double dimension array
0016B3  2  53 17                .WORD   ERR_D0          ;$14 divide by 0
0016B5  2  62 17                .WORD   ERR_ID          ;$16 illegal direct
0016B7  2  71 17                .WORD   ERR_TM          ;$18 type mismatch
0016B9  2  7F 17                .WORD   ERR_LS          ;$1A long string
0016BB  2  8F 17                .WORD   ERR_ST          ;$1C string too complex
0016BD  2  A2 17                .WORD   ERR_CN          ;$1E continue error
0016BF  2  B1 17                .WORD   ERR_UF          ;$20 undefined function
0016C1  2  C4 17                .WORD   ERR_LD          ;$22 LOOP without DO
0016C3  2               
0016C3  2               ERR_NF:
0016C3  2  4E 45 58 54          .BYTE   "NEXT without FOR",$00
0016C7  2  20 77 69 74  
0016CB  2  68 6F 75 74  
0016D4  2               ERR_SN:
0016D4  2  53 79 6E 74          .BYTE   "Syntax",$00
0016D8  2  61 78 00     
0016DB  2               ERR_RG:
0016DB  2  52 45 54 55          .BYTE   "RETURN without GOSUB",$00
0016DF  2  52 4E 20 77  
0016E3  2  69 74 68 6F  
0016F0  2               ERR_OD:
0016F0  2  4F 75 74 20          .BYTE   "Out of DATA",$00
0016F4  2  6F 66 20 44  
0016F8  2  41 54 41 00  
0016FC  2               ERR_FC:
0016FC  2  46 75 6E 63          .BYTE   "Function call",$00
001700  2  74 69 6F 6E  
001704  2  20 63 61 6C  
00170A  2               ERR_OV:
00170A  2  4F 76 65 72          .BYTE   "Overflow",$00
00170E  2  66 6C 6F 77  
001712  2  00           
001713  2               ERR_OM:
001713  2  4F 75 74 20          .BYTE   "Out of memory",$00
001717  2  6F 66 20 6D  
00171B  2  65 6D 6F 72  
001721  2               ERR_US:
001721  2  55 6E 64 65          .BYTE   "Undefined statement",$00
001725  2  66 69 6E 65  
001729  2  64 20 73 74  
001735  2               ERR_BS:
001735  2  41 72 72 61          .BYTE   "Array bounds",$00
001739  2  79 20 62 6F  
00173D  2  75 6E 64 73  
001742  2               ERR_DD:
001742  2  44 6F 75 62          .BYTE   "Double dimension",$00
001746  2  6C 65 20 64  
00174A  2  69 6D 65 6E  
001753  2               ERR_D0:
001753  2  44 69 76 69          .BYTE   "Divide by zero",$00
001757  2  64 65 20 62  
00175B  2  79 20 7A 65  
001762  2               ERR_ID:
001762  2  49 6C 6C 65          .BYTE   "Illegal direct",$00
001766  2  67 61 6C 20  
00176A  2  64 69 72 65  
001771  2               ERR_TM:
001771  2  54 79 70 65          .BYTE   "Type mismatch",$00
001775  2  20 6D 69 73  
001779  2  6D 61 74 63  
00177F  2               ERR_LS:
00177F  2  53 74 72 69          .BYTE   "String too long",$00
001783  2  6E 67 20 74  
001787  2  6F 6F 20 6C  
00178F  2               ERR_ST:
00178F  2  53 74 72 69          .BYTE   "String too complex",$00
001793  2  6E 67 20 74  
001797  2  6F 6F 20 63  
0017A2  2               ERR_CN:
0017A2  2  43 61 6E 27          .BYTE   "Can't continue",$00
0017A6  2  74 20 63 6F  
0017AA  2  6E 74 69 6E  
0017B1  2               ERR_UF:
0017B1  2  55 6E 64 65          .BYTE   "Undefined function",$00
0017B5  2  66 69 6E 65  
0017B9  2  64 20 66 75  
0017C4  2               ERR_LD:
0017C4  2  4C 4F 4F 50          .BYTE   "LOOP without DO",$00
0017C8  2  20 77 69 74  
0017CC  2  68 6F 75 74  
0017D4  2               
0017D4  2               LAB_BMSG:
0017D4  2  0D 0A 42 72          .BYTE   $0D,$0A,"Break",$00
0017D8  2  65 61 6B 00  
0017DC  2               LAB_EMSG:
0017DC  2  20 45 72 72          .BYTE   " Error",$00
0017E0  2  6F 72 00     
0017E3  2               LAB_LMSG:
0017E3  2  20 69 6E 20          .BYTE   " in line ",$00
0017E7  2  6C 69 6E 65  
0017EB  2  20 00        
0017ED  2               LAB_RMSG:
0017ED  2  0D 0A 52 65          .BYTE   $0D,$0A,"Ready",$0D,$0A,$00
0017F1  2  61 64 79 0D  
0017F5  2  0A 00        
0017F7  2               
0017F7  2               LAB_IMSG:
0017F7  2  20 45 78 74          .BYTE   " Extra ignored",$0D,$0A,$00
0017FB  2  72 61 20 69  
0017FF  2  67 6E 6F 72  
001808  2               LAB_REDO:
001808  2  20 52 65 64          .BYTE   " Redo from start",$0D,$0A,$00
00180C  2  6F 20 66 72  
001810  2  6F 6D 20 73  
00181B  2               LAB_IOER:
00181B  2  20 49 2F 4F          .BYTE   " I/O Error",$0D,$0A,$00
00181F  2  20 45 72 72  
001823  2  6F 72 0D 0A  
001828  2               
001828  1               
001828  1               ; NUMERIC CONSTANTS
001828  1                       .INCLUDE "numconst.asm"
001828  2               ; numeric constants and series
001828  2               ; constants and series for LOG(n)
001828  2               LAB_25A0:
001828  2  02                   .BYTE   $02             ; counter
001829  2  80 19 56 62          .BYTE   $80,$19,$56,$62 ; 0.59898
00182D  2  80 76 22 F3          .BYTE   $80,$76,$22,$F3 ; 0.96147
001831  2  82 38 AA 40          .BYTE   $82,$38,$AA,$40 ; 2.88539
001835  2               
001835  2               LAB_25AD:
001835  2  80 35 04 F3          .BYTE   $80,$35,$04,$F3 ; 0.70711	1/root 2
001839  2               LAB_25B1:
001839  2  81 35 04 F3          .BYTE   $81,$35,$04,$F3 ; 1.41421	root 2
00183D  2               LAB_25B5:
00183D  2  80 80 00 00          .BYTE   $80,$80,$00,$00 ; -0.5
001841  2               LAB_25B9:
001841  2  80 31 72 18          .BYTE   $80,$31,$72,$18 ; 0.69315	LOG(2)
001845  2               
001845  2               ; numeric PRINT constants
001845  2               LAB_2947:
001845  2  91 43 4F F8          .BYTE   $91,$43,$4F,$F8 ; 99999.9375 (max value with at least one decimal)
001849  2               LAB_294B:
001849  2  94 74 23 F7          .BYTE   $94,$74,$23,$F7 ; 999999.4375 (max value before scientific notation)
00184D  2               LAB_294F:
00184D  2  94 74 24 00          .BYTE   $94,$74,$24,$00 ; 1000000
001851  2               
001851  2               ; EXP(n) constants and series
001851  2               LAB_2AFA:
001851  2  81 38 AA 3B          .BYTE   $81,$38,$AA,$3B ; 1.4427	(1/LOG base 2 e)
001855  2               LAB_2AFE:
001855  2  06                   .BYTE   $06             ; counter
001856  2  74 63 90 8C          .BYTE   $74,$63,$90,$8C ; 2.17023e-4
00185A  2  77 23 0C AB          .BYTE   $77,$23,$0C,$AB ; 0.00124
00185E  2  7A 1E 94 00          .BYTE   $7A,$1E,$94,$00 ; 0.00968
001862  2  7C 63 42 80          .BYTE   $7C,$63,$42,$80 ; 0.05548
001866  2  7E 75 FE D0          .BYTE   $7E,$75,$FE,$D0 ; 0.24023
00186A  2  80 31 72 15          .BYTE   $80,$31,$72,$15 ; 0.69315
00186E  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.00000
001872  2               
001872  2               ; trigonometric constants and series
001872  2               LAB_2C78:
001872  2  81 49 0F DB          .BYTE   $81,$49,$0F,$DB ; 1.570796371 (pi/2) as floating #
001876  2               LAB_2C84:
001876  2  04                   .BYTE   $04             ; counter
001877  2  86 1E D7 FB          .BYTE   $86,$1E,$D7,$FB ; 39.7109
00187B  2  87 99 26 65          .BYTE   $87,$99,$26,$65 ;-76.575
00187F  2  87 23 34 58          .BYTE   $87,$23,$34,$58 ; 81.6022
001883  2  86 A5 5D E1          .BYTE   $86,$A5,$5D,$E1 ;-41.3417
001887  2               LAB_2C7C:
001887  2  83 49 0F DB          .BYTE   $83,$49,$0F,$DB ; 6.28319 (2*pi) as floating #
00188B  2               
00188B  2               LAB_2CC9:
00188B  2  08                   .BYTE   $08             ; counter
00188C  2  78 3A C5 37          .BYTE   $78,$3A,$C5,$37 ; 0.00285
001890  2  7B 83 A2 5C          .BYTE   $7B,$83,$A2,$5C ;-0.0160686
001894  2  7C 2E DD 4D          .BYTE   $7C,$2E,$DD,$4D ; 0.0426915
001898  2  7D 99 B0 1E          .BYTE   $7D,$99,$B0,$1E ;-0.0750429
00189C  2  7D 59 ED 24          .BYTE   $7D,$59,$ED,$24 ; 0.106409
0018A0  2  7E 91 72 00          .BYTE   $7E,$91,$72,$00 ;-0.142036
0018A4  2  7E 4C B9 73          .BYTE   $7E,$4C,$B9,$73 ; 0.199926
0018A8  2  7F AA AA 53          .BYTE   $7F,$AA,$AA,$53 ;-0.333331
0018AC  2               
0018AC  2               LAB_1D96        = *+1           ; $00,$00 used for undefined variables
0018AC  2               LAB_259C:
0018AC  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.000000, used for INC
0018B0  2               LAB_2AFD:
0018B0  2  81 80 00 00          .BYTE   $81,$80,$00,$00 ; -1.00000, used for DEC. must be on the same page as +1.00
0018B4  2               
0018B4  2               ; misc constants
0018B4  2               LAB_1DF7:
0018B4  2  90                   .BYTE   $90             ;-32768 (uses first three bytes from 0.5)
0018B5  2               LAB_2A96:
0018B5  2  80 00 00 00          .BYTE   $80,$00,$00,$00 ; 0.5
0018B9  2               LAB_2C80:
0018B9  2  7F 00 00 00          .BYTE   $7F,$00,$00,$00 ; 0.25
0018BD  2               LAB_26B5:
0018BD  2  84 20 00 00          .BYTE   $84,$20,$00,$00 ; 10.0000 divide by 10 constant
0018C1  2               
0018C1  2               ; This table is used in converting numbers to ASCII.
0018C1  2               
0018C1  2               LAB_2A9A:
0018C1  2               LAB_2A9B        = LAB_2A9A+1
0018C1  2               LAB_2A9C        = LAB_2A9B+1
0018C1  2  FE 79 60             .BYTE   $FE,$79,$60     ; -100000
0018C4  2  00 27 10             .BYTE   $00,$27,$10     ; 10000
0018C7  2  FF FC 18             .BYTE   $FF,$FC,$18     ; -1000
0018CA  2  00 00 64             .BYTE   $00,$00,$64     ; 100
0018CD  2  FF FF F6             .BYTE   $FF,$FF,$F6     ; -10
0018D0  2  00 00 01             .BYTE   $00,$00,$01     ; 1
0018D3  2               
0018D3  1               
0018D3  1               ; I/O VECTORS
0018D3  1                       .INCLUDE "iovect.asm"
0018D3  2               ;__________________________________________________________
0018D3  2               ;
0018D3  2               ; BIOS JUMP TABLE (NATIVE)
0018D3  2               ;__________________________________________________________
0018D3  2               LPRINTVEC       = $00FD00
0018D3  2               LINPVEC         = $00FD04
0018D3  2               LINPWVEC        = $00FD08
0018D3  2               LSetXYVEC       = $00FD0C
0018D3  2               LCPYVVEC        = $00FD10
0018D3  2               LSrlUpVEC       = $00FD14
0018D3  2               LSetColorVEC    = $00FD18
0018D3  2               LCURSORVEC      = $00FD1C
0018D3  2               LUNCURSORVEC    = $00FD20
0018D3  2               LIECIN          = $00FD2C
0018D3  2               LIECOUT         = $00FD30
0018D3  2               LUNTALK         = $00FD34
0018D3  2               LUNLSTN         = $00FD38
0018D3  2               LLISTEN         = $00FD3C
0018D3  2               LTALK           = $00FD40
0018D3  2               LSETLFS         = $00FD44
0018D3  2               LSETNAM         = $00FD48
0018D3  2               LLOAD           = $00FD4C
0018D3  2               LSAVE           = $00FD50
0018D3  2               LIECINIT        = $00FD54
0018D3  2               LIECCLCH        = $00FD58       ; close input and output channels
0018D3  2               LIECOUTC        = $00FD5C       ; open a channel for output
0018D3  2               LIECINPC        = $00FD60       ; open a channel for input
0018D3  2               LIECOPNLF       = $00FD64       ; open a logical file
0018D3  2               LIECCLSLF       = $00FD68       ; close a specified logical file
0018D3  2               LClearScrVec    = $00FD6C       ; clear the  Screen
0018D3  2               
0018D3  2               CSRX            = $0330         ; CURRENT X POSITION
0018D3  2               CSRY            = $0331         ; CURRENT Y POSITION
0018D3  2               ConsoleDevice   = $0341         ; Current Console Device
0018D3  2               CSRCHAR         = $0342         ; Character under the Cursor
0018D3  2               VIDEOWIDTH      = $0343
0018D3  2               DEFAULT_COLOR   = $0344         ; DEFAULT COLOR FOR PRINTING
0018D3  2               TEMP            = $0345
0018D3  2               TEMPOFFSET      = $0347
0018D3  2               
0018D3  2               IECSTW          = $000317
0018D3  2               IECMSGM         = $00031F       ; message mode flag,
0018D3  2               ; $C0 = both control and kernal messages,
0018D3  2               ; $80 = control messages only,
0018D3  2               ; $40 = kernal messages only,
0018D3  2               ; $00 = neither control or kernal messages
0018D3  2               LOADBUFL        = $000322       ; IEC buffer Pointer
0018D3  2               LOADBUFH        = LOADBUFL+1
0018D3  2               LOADBANK        = LOADBUFL+2    ; BANK buffer Pointer
0018D3  2               IECSTRTL        = $00031D       ; IEC Start Address Pointer
0018D3  2               IECSTRTH        = IECSTRTL+1
0018D3  2               
0018D3  2               VideoDisplayPage = $fe31
0018D3  2               VideoCharGenOffset = $FE32
0018D3  2               VideoCharGenData = $fe33
0018D3  2               VideoTextMode   = $fe35
0018D3  2               VideoLoresMode  = $fe36
0018D3  2               VideoDoubleLores = $fe37
0018D3  2               VideoHiresMode  = $fe38
0018D3  2               VideoDoubleHires = $fe39
0018D3  2               Video80col      = $fe3A
0018D3  2               VideoMixedMode  = $fe3b
0018D3  2               VideoQuadHires  = $fe3c
0018D3  2               VideoMonoHires  = $fe3d
0018D3  2               
0018D3  2               RTCBASE         = $FE40         ;   RTC BASE REGISTER.
0018D3  2               RTCSECONDS      = RTCBASE+0     ;   RTC SECONDS
0018D3  2               RTCMINUTES      = RTCBASE+1     ;   RTC MINUTES
0018D3  2               RTCHOUR         = RTCBASE+2     ;   RTC HOUR
0018D3  2               RTCDAYOWEEK     = RTCBASE+3     ;   RTC DAY OF WEEK
0018D3  2               RTCDATE         = RTCBASE+4     ;   RTC DATE
0018D3  2               RTCMONTH        = RTCBASE+5     ;   RTC MONTH
0018D3  2               RTCYEAR         = RTCBASE+6     ;   RTC YEAR
0018D3  2               RTCCENTURY      = RTCBASE+7     ;   RTC CENTURY
0018D3  2               
0018D3  2               ;__________________________________________________________
0018D3  2               
0018D3  2               
0018D3  2               
0018D3  2               
0018D3  2               ;___V_INPT_________________________________________________
0018D3  2               ;
0018D3  2               ; MAKE A BIOS CALL TO GET NON-BLOCKING CHARACTER INPUT
0018D3  2               ; THIS COULD BE SERIAL OR KEYBOARD DEPENDING ON BIOS SETTING
0018D3  2               ; RETURNS
0018D3  2               ;   A: CHARACTER
0018D3  2               ;      CARRY SET IF NO CHARACTER
0018D3  2               ;
0018D3  2               ;
0018D3  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
0018D3  2               ;__________________________________________________________
0018D3  2               V_INPT:
0018D3  2  22 04 FD 00          JSL     LINPVEC         ; INCHAR
0018D7  2  60                   RTS
0018D8  2               
0018D8  2               ;___V_OUTP_________________________________________________
0018D8  2               ;
0018D8  2               ; MAKE A BIOS CALL TO SEND CHARACTER TO OUTPUT
0018D8  2               ; THIS COULD BE SERIAL OR TMS9918 CHARACTER DISPLAY
0018D8  2               ;
0018D8  2               ;   A: CHARACTER
0018D8  2               ;
0018D8  2               ;
0018D8  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
0018D8  2               ;__________________________________________________________
0018D8  2               
0018D8  2               V_OUTP: ; send byte to output device
0018D8  2               ;        PHX
0018D8  2               ;        LDX     <VIDEOMODE
0018D8  2               ;        CPX     #0
0018D8  2               ;        BNE     V_OUTP1
0018D8  2  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0018DC  2               ;V_OUTP1:
0018DC  2               ;        PLX
0018DC  2  60                   RTS
0018DD  2               
0018DD  2               
0018DD  2                       .INCLUDE "diskcmds.asm"
0018DD  3               .P816
0018DD  3               ;___V_SAVE_________________________________________________
0018DD  3               ;
0018DD  3               ; UTILIZE BIOS TO SAVE BASIC RAM
0018DD  3               ;
0018DD  3               ; STORE CONTENTS IN RAM FROM "Smeml/h" TO "Svarl/h"-1 IN BANK "DATABANK"
0018DD  3               ;
0018DD  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
0018DD  3               ; THIS IS NATIVE '816 CODE
0018DD  3               ;__________________________________________________________
0018DD  3               V_SAVE: ; save BASIC program
0018DD  3  20 EE 32             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
0018E0  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
0018E2  3  D0 08                BNE     V_SAVE_GO       ; YES, CONTINUE ON
0018E4  3               V_SAVE_ERR:
0018E4  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
0018E6  3  20 D0 27             JSR     LAB_XERR
0018E9  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0018EC  3               V_SAVE_GO:
0018EC  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0018F0  3  A9 C0                LDA     #$C0
0018F2  3  8F 1F 03 00          STA     f:IECMSGM
0018F6  3  A0 00                LDY     #$00
0018F8  3               V_SAVE_1:
0018F8  3  8B DA A2 01          LDAINDIRECTY ssptr_l
0018FC  3  B5 B8 C9 00  
001900  3  D0 04 A2 00  
00190E  3  BB                   TYX
00190F  3  9F 00 0F 00          STA     F:FNBUFFER,X
001913  3  C9 00                CMP     #$00
001915  3  F0 07                BEQ     V_SAVE_2
001917  3  C9 22                CMP     #'"'
001919  3  F0 03                BEQ     V_SAVE_2
00191B  3  C8                   INY
00191C  3  D0 DA                BNE     V_SAVE_1
00191E  3               V_SAVE_2:
00191E  3  98                   TYA                     ; fn length
00191F  3  A2 00                LDX     #<FNBUFFER
001921  3  A0 0F                LDY     #>FNBUFFER
001923  3  8B                   PHB
001924  3  DA A2 00 DA          SETBANK 0
001928  3  AB FA        
00192A  3  22 48 FD 00          JSL     LSETNAM         ; setnam
00192E  3  AB                   PLB
00192F  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001932  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001935  3  A0 01                LDY#1                   ; secondary address
001937  3  8B                   PHB
001938  3  DA A2 00 DA          SETBANK 0
00193C  3  AB FA        
00193E  3  22 44 FD 00          JSL     LSETLFS
001942  3  A5 7A                LDA     <Smemh
001944  3  8F 1E 03 00          STA     F:IECSTRTH
001948  3  A5 79                LDA     <Smeml
00194A  3  8F 1D 03 00          STA     F:IECSTRTL
00194E  3  A5 7B                LDA     <Svarl
001950  3  8F 22 03 00          STA     F:LOADBUFL
001954  3  A5 7C                LDA     <Svarh
001956  3  8F 23 03 00          STA     F:LOADBUFH
00195A  3  A9 02                LDA     #DATABANK
00195C  3  8F 24 03 00          STA     F:LOADBANK
001960  3  22 50 FD 00          JSL     LSAVE
001964  3  AB                   PLB
001965  3  A9 ED                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001967  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001969  3  20 71 30             JSR     LAB_18C3
00196C  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00196F  3               
00196F  3               
00196F  3               
00196F  3               
00196F  3               ;___V_LOAD_________________________________________________
00196F  3               ;
00196F  3               ; UTILIZE BIOS TO LOAD BASIC RAM
00196F  3               ;
00196F  3               ; LOAD CONTENTS TO RAM "Smeml/h" BANK "DATABANK"
00196F  3               ;
00196F  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
00196F  3               ; THIS IS NATIVE '816 CODE
00196F  3               ;__________________________________________________________
00196F  3               V_LOAD: ; load BASIC program
00196F  3  20 EE 32             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001972  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001974  3  D0 08                BNE     V_LOAD_GO       ; YES, CONTINUE ON
001976  3               V_LOAD_ERR:
001976  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001978  3  20 D0 27             JSR     LAB_XERR
00197B  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00197E  3               V_LOAD_GO:
00197E  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001982  3  A9 C0                LDA     #$C0
001984  3  8F 1F 03 00          STA     f:IECMSGM
001988  3  A0 00                LDY     #$00
00198A  3               V_LOAD_1:
00198A  3  8B DA A2 01          LDAINDIRECTY ssptr_l
00198E  3  B5 B8 C9 00  
001992  3  D0 04 A2 00  
0019A0  3  BB                   TYX
0019A1  3  9F 00 0F 00          STA     F:FNBUFFER,X
0019A5  3  C9 00                CMP     #$00
0019A7  3  F0 07                BEQ     V_LOAD_2
0019A9  3  C9 22                CMP     #'"'
0019AB  3  F0 03                BEQ     V_LOAD_2
0019AD  3  C8                   INY
0019AE  3  D0 DA                BNE     V_LOAD_1
0019B0  3               V_LOAD_2:
0019B0  3  98                   TYA                     ; fn length
0019B1  3  A2 00                LDX     #<FNBUFFER
0019B3  3  A0 0F                LDY     #>FNBUFFER
0019B5  3  8B                   PHB
0019B6  3  DA A2 00 DA          SETBANK 0
0019BA  3  AB FA        
0019BC  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0019C0  3  AB                   PLB
0019C1  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0019C4  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0019C7  3  A0 01                LDY#1                   ; secondary address
0019C9  3  8B                   PHB
0019CA  3  DA A2 00 DA          SETBANK 0
0019CE  3  AB FA        
0019D0  3  22 44 FD 00          JSL     LSETLFS
0019D4  3  A5 7A                LDA     <Smemh
0019D6  3  8F 23 03 00          STA     F:LOADBUFH
0019DA  3  A5 79                LDA     <Smeml
0019DC  3  8F 22 03 00          STA     F:LOADBUFL
0019E0  3  A9 02                LDA     #DATABANK
0019E2  3  8F 24 03 00          STA     F:LOADBANK
0019E6  3  22 4C FD 00          JSL     LLOAD
0019EA  3  AF 23 03 00          LDA     F:LOADBUFH
0019EE  3  85 7C                STA     <Svarh
0019F0  3  AF 22 03 00          LDA     F:LOADBUFL
0019F4  3  85 7B                STA     <Svarl
0019F6  3  AB                   PLB
0019F7  3  A9 ED                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0019F9  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0019FB  3  20 71 30             JSR     LAB_18C3
0019FE  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001A01  3               
001A01  3               
001A01  3               ;___V_ERR___________________________________________________
001A01  3               ;
001A01  3               ; UTILIZE BIOS TO REPORT IEC IO CHANNEL STATUS
001A01  3               ;
001A01  3               ;
001A01  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
001A01  3               ; THIS IS NATIVE '816 CODE
001A01  3               ;__________________________________________________________
001A01  3               V_ERR:
001A01  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001A05  3  A9 C0                LDA     #$C0
001A07  3  8F 1F 03 00          STA     f:IECMSGM
001A0B  3  A0 00                LDY     #$00
001A0D  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001A10  3               GETIECSTATUS:
001A10  3  8B                   PHB
001A11  3  DA                   PHX
001A12  3  DA A2 00 DA          SETBANK 0
001A16  3  AB FA        
001A18  3  A9 0D                LDA     #13
001A1A  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A1E  3  A9 0A                LDA     #10
001A20  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A24  3  A9 00                LDA     #0              ; fn length
001A26  3  A2 00                LDX     #0
001A28  3  A0 00                LDY     #0
001A2A  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001A2E  3  FA                   PLX                     ; Device Number
001A2F  3  A0 0F                LDY     #15             ; secondary address
001A31  3  A9 0F                LDA     #15             ; LFN NUMBER
001A33  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001A37  3  22 64 FD 00          JSL     LIECOPNLF
001A3B  3  B0 1E                BCS     IECERROR
001A3D  3  A2 0F                LDX     #15
001A3F  3  22 60 FD 00          JSL     LIECINPC
001A43  3  B0 16                BCS     IECERROR
001A45  3               GETIECSTATUS_1:
001A45  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A49  3  B0 10                BCS     IECERROR
001A4B  3  C9 0D                CMP     #13
001A4D  3  F0 0C                BEQ     IECERROR
001A4F  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A53  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001A57  3  4A                   LSR                     ; shift time out read ..
001A58  3  4A                   LSR                     ; .. into carry bit
001A59  3  90 EA                BCC     GETIECSTATUS_1  ; all ok, do another
001A5B  3               IECERROR:
001A5B  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001A5F  3  A9 0F                LDA     #15
001A61  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001A65  3  A9 0D                LDA     #13
001A67  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A6B  3  A9 0A                LDA     #10
001A6D  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A71  3  AB                   PLB
001A72  3  A9 ED                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001A74  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001A76  3  20 71 30             JSR     LAB_18C3
001A79  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001A7C  3               
001A7C  3               
001A7C  3               
001A7C  3               ;___V_DIR___________________________________________________
001A7C  3               ;
001A7C  3               ; UTILIZE BIOS TO DISPLAY DISK DIRECTORY
001A7C  3               ;
001A7C  3               ;
001A7C  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
001A7C  3               ; THIS IS NATIVE '816 CODE
001A7C  3               ;__________________________________________________________
001A7C  3               V_DIR:
001A7C  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001A80  3  A9 C0                LDA     #$C0
001A82  3  8F 1F 03 00          STA     f:IECMSGM
001A86  3  A0 00                LDY     #$00
001A88  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001A8B  3  8B                   PHB
001A8C  3  DA                   PHX
001A8D  3  A9 24                LDA     #'$'
001A8F  3  8F 00 0F 00          STA     f:FNBUFFER
001A93  3  DA A2 00 DA          SETBANK 0
001A97  3  AB FA        
001A99  3  A9 0D                LDA     #13
001A9B  3  22 00 FD 00          JSL     LPRINTVEC
001A9F  3  A9 0A                LDA     #10
001AA1  3  22 00 FD 00          JSL     LPRINTVEC
001AA5  3  A9 01                LDA     #1              ; fn length
001AA7  3  A2 00                LDX     #<FNBUFFER
001AA9  3  A0 0F                LDY     #>FNBUFFER
001AAB  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001AAF  3  FA                   PLX                     ; Device Number
001AB0  3  A0 00                LDY     #0              ; secondary address
001AB2  3  A9 0F                LDA     #15             ; LFN NUMBER
001AB4  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001AB8  3  22 64 FD 00          JSL     LIECOPNLF
001ABC  3  B0 9D                BCS     IECERROR
001ABE  3  A2 0F                LDX     #15
001AC0  3  22 60 FD 00          JSL     LIECINPC
001AC4  3  B0 95                BCS     IECERROR
001AC6  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001ACA  3               GETIECDIRECTORY_1:
001ACA  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001ACE  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001AD2  3  48                   PHA
001AD3  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001AD7  3  FA                   PLX
001AD8  3  AB                   PLB
001AD9  3  8B                   PHB
001ADA  3  20 8F 47             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
001ADD  3  DA A2 00 DA          SETBANK 0
001AE1  3  AB FA        
001AE3  3  A9 20                LDA     #' '
001AE5  3  22 00 FD 00          JSL     LPRINTVEC
001AE9  3  A9 20                LDA     #' '
001AEB  3  22 00 FD 00          JSL     LPRINTVEC
001AEF  3  22 2C FD 00          JSL     LIECIN
001AF3  3  C9 00                CMP     #$00
001AF5  3  F0 04                BEQ     GETIECDIRECTORY_2A
001AF7  3  22 00 FD 00          JSL     LPRINTVEC
001AFB  3               GETIECDIRECTORY_2A:
001AFB  3  22 2C FD 00          JSL     LIECIN
001AFF  3  C9 00                CMP     #$00
001B01  3  F0 04                BEQ     GETIECDIRECTORY_2
001B03  3  22 00 FD 00          JSL     LPRINTVEC
001B07  3               GETIECDIRECTORY_2:
001B07  3  22 2C FD 00          JSL     LIECIN          ; input ENTRY TEXT byte from the serial bus
001B0B  3  22 00 FD 00          JSL     LPRINTVEC
001B0F  3  C9 00                CMP     #$00
001B11  3  F0 29                BEQ     GETIECDIRECTORY_3; END ENTRY
001B13  3               
001B13  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001B17  3  4A                   LSR                     ; shift time out read ..
001B18  3  4A                   LSR                     ; .. into carry bit
001B19  3  90 EC                BCC     GETIECDIRECTORY_2; all ok, do another
001B1B  3               GETIECDIRECTORY_END:
001B1B  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001B1F  3  A9 0F                LDA     #15
001B21  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001B25  3  A9 0D                LDA     #13
001B27  3  22 00 FD 00          JSL     LPRINTVEC
001B2B  3  A9 0A                LDA     #10
001B2D  3  22 00 FD 00          JSL     LPRINTVEC
001B31  3  AB                   PLB
001B32  3  A9 ED                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001B34  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001B36  3  20 71 30             JSR     LAB_18C3
001B39  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001B3C  3               
001B3C  3               GETIECDIRECTORY_3:
001B3C  3  A9 0D                LDA     #13
001B3E  3  22 00 FD 00          JSL     LPRINTVEC
001B42  3  A9 0A                LDA     #10
001B44  3  22 00 FD 00          JSL     LPRINTVEC
001B48  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001B4C  3  C9 01                CMP     #$01
001B4E  3  D0 CB                BNE     GETIECDIRECTORY_END
001B50  3  4C CA 1A             JMP     GETIECDIRECTORY_1
001B53  3               
001B53  3               
001B53  3               ;___V_DISKCMD______________________________________________
001B53  3               ;
001B53  3               ; UTILIZE BIOS TO SEND A DISK COMMAND
001B53  3               ;
001B53  3               ;
001B53  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (COMMAND) AND ONE NUMERIC VAR (DEVICE)
001B53  3               ; THIS IS NATIVE '816 CODE
001B53  3               ;__________________________________________________________
001B53  3               V_DISKCMD:                      ; save BASIC program
001B53  3  20 EE 32             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001B56  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001B58  3  D0 08                BNE     V_DISKCMD_GO    ; YES, CONTINUE ON
001B5A  3               V_DISKCMD_ERR:
001B5A  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001B5C  3  20 D0 27             JSR     LAB_XERR
001B5F  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001B62  3               V_DISKCMD_GO:
001B62  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001B66  3  A9 C0                LDA     #$C0
001B68  3  8F 1F 03 00          STA     f:IECMSGM
001B6C  3  20 01 3D             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001B6F  3               ; space returns with A = length, X=$71=pointer low byte,
001B6F  3               ; Y=$72=pointer high byte
001B6F  3  86 B8                STX     <ssptr_l
001B71  3  84 B9                STY     <ssptr_h
001B73  3  AA                   TAX
001B74  3  A0 00                LDY     #$00
001B76  3               V_DISKCMD_1:
001B76  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001B7A  3  B5 B8 C9 00  
001B7E  3  D0 04 A2 00  
001B8C  3  DA                   PHX
001B8D  3  BB                   TYX
001B8E  3  9F 00 0F 00          STA     f:FNBUFFER,X
001B92  3  FA                   PLX
001B93  3  CA                   DEX
001B94  3  E0 00                CPX     #$00
001B96  3  F0 03                BEQ     V_DISKCMD_2
001B98  3  C8                   INY
001B99  3  D0 DB                BNE     V_DISKCMD_1
001B9B  3               V_DISKCMD_2:
001B9B  3  BB                   TYX
001B9C  3  A9 00                LDA     #0
001B9E  3  9F 01 0F 00          STA     f:FNBUFFER+1,X
001BA2  3  8B                   PHB
001BA3  3  DA A2 00 DA          SETBANK 0
001BA7  3  AB FA        
001BA9  3  A9 00                LDA     #0              ; fn length
001BAB  3  A2 00                LDX     #0
001BAD  3  A0 00                LDY     #0
001BAF  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001BB3  3  AB                   PLB
001BB4  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001BB7  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER (DEVICE NUMBER), RETURN IN X
001BBA  3  8B                   PHB
001BBB  3  DA A2 00 DA          SETBANK 0
001BBF  3  AB FA        
001BC1  3  A0 0F                LDY     #15             ; secondary address
001BC3  3  A9 0F                LDA     #15             ; LFN NUMBER
001BC5  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001BC9  3  22 64 FD 00          JSL     LIECOPNLF
001BCD  3  B0 27                BCS     V_DISKCMD_ERR1
001BCF  3  A2 0F                LDX     #15
001BD1  3  22 5C FD 00          JSL     LIECOUTC
001BD5  3  A2 00                LDX     #$00
001BD7  3               V_DISKCMD_3:
001BD7  3  BF 00 0F 00          LDA     f:FNBUFFER,X
001BDB  3  C9 00                CMP     #$00
001BDD  3  F0 09                BEQ     V_DISKCMD_4
001BDF  3  22 30 FD 00          JSL     LIECOUT         ; OUTPUT a byte To the serial bus
001BE3  3  B0 11                BCS     V_DISKCMD_ERR1
001BE5  3               
001BE5  3  E8                   INX
001BE6  3  80 EF                BRA     V_DISKCMD_3
001BE8  3               V_DISKCMD_4:
001BE8  3  A9 0F                LDA     #15
001BEA  3  22 38 FD 00          JSL     LUNLSTN
001BEE  3  A9 0F                LDA     #15
001BF0  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BF4  3  AB                   PLB
001BF5  3  60                   RTS
001BF6  3               V_DISKCMD_ERR1:
001BF6  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001BFA  3  A9 0F                LDA     #15
001BFC  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001C00  3  A9 0D                LDA     #13
001C02  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001C06  3  A9 0A                LDA     #10
001C08  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001C0C  3  AB                   PLB
001C0D  3  A9 ED                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001C0F  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001C11  3  20 71 30             JSR     LAB_18C3
001C14  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001C17  3               
001C17  3               
001C17  3               
001C17  3               ;___V_OPEN__________________________________________________
001C17  3               ;
001C17  3               ; UTILIZE BIOS TO OPEN AN IEC IO CHANNEL
001C17  3               ;
001C17  3               ;
001C17  3               ; BASIC COMMAND EXPECTS THREE NUMERIC VARS, AND ONE STRING
001C17  3               ; VAR
001C17  3               ; FILE#, DEVICE, SECONDARY ADDRESS, FILENAME
001C17  3               ; THIS IS NATIVE '816 CODE
001C17  3               ;__________________________________________________________
001C17  3               V_OPEN:
001C17  3  8B                   PHB
001C18  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001C1C  3  A9 C0                LDA     #$C0
001C1E  3  8F 1F 03 00          STA     f:IECMSGM
001C22  3  A0 00                LDY     #$00
001C24  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C27  3  DA                   PHX
001C28  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C2B  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001C2E  3  DA                   PHX
001C2F  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C32  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (SECONDARY ADDRESS)
001C35  3  DA                   PHX
001C36  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C39  3  20 EE 32             JSR     LAB_EVEX        ; GET THE FOURTH PARAMETER
001C3C  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001C3E  3  D0 08                BNE     V_OPEN_GO       ; YES, CONTINUE ON
001C40  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001C42  3  20 D0 27             JSR     LAB_XERR
001C45  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001C48  3               V_OPEN_GO:
001C48  3  20 01 3D             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001C4B  3               ; space returns with A = length, X=$71=pointer low byte,
001C4B  3               ; Y=$72=pointer high byte
001C4B  3  86 B8                STX     <ssptr_l
001C4D  3  84 B9                STY     <ssptr_h
001C4F  3  AA                   TAX
001C50  3  A0 00                LDY     #$00
001C52  3               V_OPEN_1:
001C52  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001C56  3  B5 B8 C9 00  
001C5A  3  D0 04 A2 00  
001C68  3  DA                   PHX
001C69  3  BB                   TYX
001C6A  3  9F 00 0F 00          STA     f:FNBUFFER,X
001C6E  3  FA                   PLX
001C6F  3  CA                   DEX
001C70  3  E0 00                CPX     #$00
001C72  3  F0 03                BEQ     V_OPEN_2
001C74  3  C8                   INY
001C75  3  D0 DB                BNE     V_OPEN_1
001C77  3               V_OPEN_2:
001C77  3  C8                   INY
001C78  3  98                   TYA                     ; fn length
001C79  3  A2 00                LDX     #<FNBUFFER
001C7B  3  A0 0F                LDY     #>FNBUFFER
001C7D  3  DA A2 00 DA          SETBANK 0
001C81  3  AB FA        
001C83  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001C87  3  FA                   PLX
001C88  3  9B                   TXY                     ; secondary address
001C89  3  FA                   PLX                     ; DEVICE NUMBER
001C8A  3  68                   PLA                     ; LFN NUMBER
001C8B  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001C8F  3  22 64 FD 00          JSL     LIECOPNLF
001C93  3  B0 02                BCS     V_OPEN_IECERROR
001C95  3  AB                   PLB
001C96  3  60                   RTS
001C97  3                       V_OPEN_IECERROR:
001C97  3  4C 5B 1A             JMP     IECERROR
001C9A  3               
001C9A  3               ;___V_CLOSE________________________________________________
001C9A  3               ;
001C9A  3               ; UTILIZE BIOS TO CLOSE AN IEC IO CHANNEL
001C9A  3               ;
001C9A  3               ;
001C9A  3               ; THIS IS NATIVE '816 CODE
001C9A  3               ;__________________________________________________________
001C9A  3               V_CLOSE:
001C9A  3  8B                   PHB
001C9B  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C9E  3  DA A2 00 DA          SETBANK 0
001CA2  3  AB FA        
001CA4  3  8A                   TXA
001CA5  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001CA9  3  AB                   PLB
001CAA  3  60                   RTS
001CAB  3               
001CAB  3               ;___V_IECINPUT_______________________________________________
001CAB  3               ;
001CAB  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS INPUT
001CAB  3               ;
001CAB  3               ;
001CAB  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001CAB  3               ; THIS IS NATIVE '816 CODE
001CAB  3               ;__________________________________________________________
001CAB  3               V_IECINPUT:
001CAB  3  8B                   PHB
001CAC  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001CAF  3  DA A2 00 DA          SETBANK 0
001CB3  3  AB FA        
001CB5  3  22 60 FD 00          JSL     LIECINPC
001CB9  3  B0 02                BCS     V_IECINPUT_IECERROR
001CBB  3  AB                   PLB
001CBC  3  60                   RTS
001CBD  3                       V_IECINPUT_IECERROR:
001CBD  3  AB                   PLB
001CBE  3  4C 5B 1A             JMP     IECERROR
001CC1  3               
001CC1  3               ;___V_IECOUTPUT______________________________________________
001CC1  3               ;
001CC1  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS OUTPUT
001CC1  3               ;
001CC1  3               ;
001CC1  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001CC1  3               ; THIS IS NATIVE '816 CODE
001CC1  3               ;__________________________________________________________
001CC1  3               V_IECOUTPUT:
001CC1  3  8B                   PHB
001CC2  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001CC5  3  DA A2 00 DA          SETBANK 0
001CC9  3  AB FA        
001CCB  3  22 5C FD 00          JSL     LIECOUTC
001CCF  3  B0 02                BCS     V_IECOUTPUT_IECERROR
001CD1  3  AB                   PLB
001CD2  3  60                   RTS
001CD3  3                       V_IECOUTPUT_IECERROR:
001CD3  3  AB                   PLB
001CD4  3  4C 5B 1A             JMP     IECERROR
001CD7  3               
001CD7  3               
001CD7  3               ;___V_PUTN__________________________________________________
001CD7  3               ;
001CD7  3               ; UTILIZE BIOS TO PRINT TO AN IEC IO CHANNEL
001CD7  3               ;
001CD7  3               ; STARTING WITH FILE#, OUTPUT STRING
001CD7  3               ; THIS IS NATIVE '816 CODE
001CD7  3               ;__________________________________________________________
001CD7  3               V_PUTN:
001CD7  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001CDA  3  86 04                STX     <TMPFLG
001CDC  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001CDF  3               
001CDF  3  20 EE 32             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001CE2  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001CE4  3  D0 08                BNE     V_PUTN_GO       ; YES, CONTINUE ON
001CE6  3               V_PUTN_ERR:
001CE6  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001CE8  3  20 D0 27             JSR     LAB_XERR
001CEB  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001CEE  3               V_PUTN_GO:
001CEE  3  20 01 3D             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001CF1  3               ; space returns with A = length, X=$71=pointer low byte,
001CF1  3               ; Y=$72=pointer high byte
001CF1  3  86 B8                STX     <ssptr_l
001CF3  3  84 B9                STY     <ssptr_h
001CF5  3  AA                   TAX
001CF6  3  A0 00                LDY     #$00
001CF8  3               V_PUTN_1:
001CF8  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001CFC  3  B5 B8 C9 00  
001D00  3  D0 04 A2 00  
001D0E  3  DA                   PHX
001D0F  3  5A                   PHY
001D10  3  8B                   PHB
001D11  3  DA A2 00 DA          SETBANK 0
001D15  3  AB FA        
001D17  3  A6 04                LDX     <TMPFLG
001D19  3  48                   PHA
001D1A  3  22 30 FD 00          JSL     LIECOUT
001D1E  3  68                   PLA
001D1F  3  22 00 FD 00          JSL     LPRINTVEC
001D23  3  AB                   PLB
001D24  3  7A                   PLY
001D25  3  FA                   PLX
001D26  3  CA                   DEX
001D27  3  E0 00                CPX     #00
001D29  3  F0 03                BEQ     V_PUTN_2
001D2B  3  C8                   INY
001D2C  3  D0 CA                BNE     V_PUTN_1
001D2E  3               V_PUTN_2:
001D2E  3  60                   RTS
001D2F  3               
001D2F  3               
001D2F  3               
001D2F  3               ;___LAB_IECST_______________________________________________
001D2F  3               ;
001D2F  3               ; RETURN IEC STATUS BYTE
001D2F  3               ;
001D2F  3               ; THIS IS NATIVE '816 CODE
001D2F  3               ;__________________________________________________________
001D2F  3               LAB_IECST:
001D2F  3  48                   PHA
001D30  3  AF 17 03 00          LDA     f:IECSTW        ; get IECSTW into low byte
001D34  3  A8                   TAY
001D35  3  68                   PLA
001D36  3  A9 00                LDA     #0              ; NO high byte
001D38  3  20 A9 38             JSR     LAB_AYFC
001D3B  3  60                   RTS
001D3C  3               LAB_PIECST:
001D3C  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
001D3E  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
001D42  3  60                   RTS
001D43  3               
001D43  3               ;___V_GETN_________________________________________________
001D43  3               ;
001D43  3               ; UTILIZE BIOS TO INPUT FROM AN IEC IO CHANNEL
001D43  3               ;
001D43  3               ; LOTS OF PARAMETERS :)  STARTING WITH FILE#
001D43  3               ; THIS IS NATIVE '816 CODE
001D43  3               ;__________________________________________________________
001D43  3               V_GETN:
001D43  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001D46  3  DA                   PHX                     ; STORE DEVICE NUMBER
001D47  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D4A  3  20 EB 35             JSR     LAB_GVAR        ; get var address
001D4D  3  85 97                STA     <Lvarpl         ; save var address low byte
001D4F  3  84 98                STY     <Lvarph         ; save var address high byte
001D51  3  FA                   PLX
001D52  3  8B                   PHB
001D53  3  DA A2 00 DA          SETBANK 0
001D57  3  AB FA        
001D59  3  A6 04                LDX     <TMPFLG
001D5B  3  22 2C FD 00          JSL     LIECIN          ; get input byte
001D5F  3  AB                   PLB
001D60  3               
001D60  3  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
001D62  3  30 07                BMI     LAB_GETNS       ; go get string character
001D64  3               ; was numeric get
001D64  3  A8                   TAY                     ; copy character to Y
001D65  3  20 B6 38             JSR     LAB_1FD0        ; convert Y to byte in FAC1
001D68  3  4C DE 44             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
001D6B  3               LAB_GETNS:
001D6B  3  48                   PHA
001D6C  3  A9 01                LDA     #$01
001D6E  3  20 1A 3A             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
001D71  3               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
001D71  3  68                   PLA                     ; get character back
001D72  3  A0 00                LDY     #$00            ; clear index
001D74  3  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
001D78  3  01 B5 AD C9  
001D7C  3  00 D0 04 A2  
001D8A  3  20 7D 3A             JSR     LAB_RTST        ; check for space on descriptor stack then put address
001D8D  3               ; and length on descriptor stack and update stack pointers
001D8D  3  4C 88 2E             JMP     LAB_17D5        ; do string LET and return
001D90  3               
001D90  2                       .INCLUDE "screencmds.asm"
001D90  3               ;___SCNCLR_________________________________________________
001D90  3               ;
001D90  3               ; UTILIZE BIOS TO CLEAR SCREEN
001D90  3               ;
001D90  3               ;
001D90  3               ; THIS IS NATIVE '816 CODE
001D90  3               ;__________________________________________________________
001D90  3               V_SCNCLR:
001D90  3  8B                   PHB
001D91  3  DA A2 00 DA          SETBANK 0
001D95  3  AB FA        
001D97  3  22 6C FD 00          JSL     LClearScrVec
001D9B  3  AB                   PLB
001D9C  3  60                   RTS
001D9D  3               
001D9D  3               
001D9D  3               ;___LOCATE_________________________________________________
001D9D  3               ;
001D9D  3               ; UTILIZE BIOS TO LOCATE CURSOR
001D9D  3               ;
001D9D  3               ;  TAKES TWO PARAMETERS X,Y
001D9D  3               ;
001D9D  3               ; THIS IS NATIVE '816 CODE
001D9D  3               ;__________________________________________________________
001D9D  3               V_LOCATE:
001D9D  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001DA0  3  DA                   PHX
001DA1  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001DA4  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001DA7  3  7A                   PLY
001DA8  3  8B                   PHB
001DA9  3  DA A2 00 DA          SETBANK 0
001DAD  3  AB FA        
001DAF  3  22 0C FD 00          JSL     LSetXYVEC
001DB3  3  AB                   PLB
001DB4  3  60                   RTS
001DB5  3               
001DB5  3               ;___COLOR_________________________________________________
001DB5  3               ;
001DB5  3               ; UTILIZE BIOS TO SET COLORS
001DB5  3               ;
001DB5  3               ;  TAKES TWO PARAMETERS BACKGROUND,FOREGROUND
001DB5  3               ;
001DB5  3               ; THIS IS NATIVE '816 CODE
001DB5  3               ;__________________________________________________________
001DB5  3               V_COLOR:
001DB5  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001DB8  3  8A                   TXA
001DB9  3  29 0F                AND     #$0F
001DBB  3  48                   PHA
001DBC  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001DBF  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001DC2  3  8A                   TXA
001DC3  3  29 0F                AND     #$0F
001DC5  3  85 04                STA     <TMPFLG
001DC7  3  68                   PLA
001DC8  3  18                   CLC
001DC9  3  0A                   ASL
001DCA  3  0A                   ASL
001DCB  3  0A                   ASL
001DCC  3  0A                   ASL
001DCD  3  05 04                ORA     <TMPFLG
001DCF  3  8B                   PHB
001DD0  3  DA A2 00 DA          SETBANK 0
001DD4  3  AB FA        
001DD6  3  22 18 FD 00          JSL     LSetColorVEC
001DDA  3  AB                   PLB
001DDB  3  60                   RTS
001DDC  3               
001DDC  3               ;___V_SCREEN_________________________________________________
001DDC  3               ;
001DDC  3               ;  SET SCREEN MODE
001DDC  3               ;
001DDC  3               ;  TAKES UP TO THREE PARAMETERS
001DDC  3               ;  FIRST PARAMETER SCREEN MODE
001DDC  3               ;  0=TEXT MODE
001DDC  3               ;  1=LORES MODE
001DDC  3               ;  2=HIRES MODE
001DDC  3               ;
001DDC  3               ;  TEXT MODE PARAMETERS
001DDC  3               ;  0=40 COLUMNS
001DDC  3               ;  1=80 COLUMNS
001DDC  3               ;
001DDC  3               ;  LORES MODE SECOND PARAMETER
001DDC  3               ;  0=SINGLE LORES
001DDC  3               ;  1=DOUBLE LORES
001DDC  3               ;  LORES MODE THIRD PARAMETER
001DDC  3               ;  0=MIXED MODE
001DDC  3               ;  1=FULL SCREEN MODE
001DDC  3               ;
001DDC  3               ;  HIRES MODE SECOND PARAMETER
001DDC  3               ;  0=SINGLE HIRES
001DDC  3               ;  1=DOUBLE HIRES
001DDC  3               ;  2=QUAD HIRES
001DDC  3               ;  3=MONO HIRES
001DDC  3               ;  HIRES MODE THIRD PARAMETER
001DDC  3               ;  0=MIXED MODE
001DDC  3               ;  1=FULL SCREEN MODE
001DDC  3               ;
001DDC  3               ; THIS IS NATIVE '816 CODE
001DDC  3               ;__________________________________________________________
001DDC  3               V_SCREEN:
001DDC  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (MODE)
001DDF  3               V_SCREEN1:
001DDF  3  86 06                STX     <VIDEOMODE
001DE1  3  E0 00                CPX     #00
001DE3  3  D0 03                BNE     *+5
001DE5  3  4C FF 1D             JMP     SETUPMODE0
001DE8  3  E0 01                CPX     #01
001DEA  3  D0 03                BNE     *+5
001DEC  3  4C 37 1E             JMP     SETUPMODE1
001DEF  3  E0 02                CPX     #02
001DF1  3  D0 03                BNE     *+5
001DF3  3  4C 9D 1E             JMP     SETUPMODE2
001DF6  3               
001DF6  3  A2 02                LDX     #$02            ; SYNTAX ERROR
001DF8  3  20 D0 27             JSR     LAB_XERR
001DFB  3  4C A9 28             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001DFE  3  60                   RTS
001DFF  3               
001DFF  3               SETUPMODE0:                     ; TEXT MODE
001DFF  3  A9 01                LDA     #$01
001E01  3  8F 35 FE 00          STA     F:VideoTextMode
001E05  3  A9 02                LDA     #$02
001E07  3  8F 36 FE 00          STA     F:VideoLoresMode
001E0B  3  8F 38 FE 00          STA     F:VideoHiresMode
001E0F  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E12  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001E15  3  E0 00                CPX     #$00
001E17  3  D0 0E                BNE     SETUPMODE0_80
001E19  3  A9 02                LDA     #$02
001E1B  3  8F 3A FE 00          STA     F:Video80col
001E1F  3  A9 28                LDA     #40
001E21  3  8F 43 03 00          STA     F:VIDEOWIDTH
001E25  3  80 0C                BRA     SETUPMODE0_CLEAR
001E27  3               SETUPMODE0_80:
001E27  3  A9 01                LDA     #$01
001E29  3  8F 3A FE 00          STA     F:Video80col
001E2D  3  A9 50                LDA     #80
001E2F  3  8F 43 03 00          STA     F:VIDEOWIDTH
001E33  3               SETUPMODE0_CLEAR:
001E33  3  4C 90 1D             JMP     V_SCNCLR
001E36  3  60                   RTS
001E37  3               
001E37  3               SETUPMODE1:                     ; LORES MODE
001E37  3  A9 01                LDA     #$01
001E39  3  8F 36 FE 00          STA     F:VideoLoresMode
001E3D  3  A9 02                LDA     #$02
001E3F  3  8F 35 FE 00          STA     F:VideoTextMode
001E43  3  8F 38 FE 00          STA     F:VideoHiresMode
001E47  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E4A  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001E4D  3               
001E4D  3  E0 00                CPX     #$00
001E4F  3  D0 08                BNE     SETUPMODE1_DOUBLE
001E51  3  A9 02                LDA     #$02
001E53  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E57  3  80 0A                BRA     SETUPMODE1_CLEAR
001E59  3               SETUPMODE1_DOUBLE:
001E59  3  A9 01                LDA     #$01
001E5B  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E5F  3  A9 11                LDA     #$11
001E61  3  85 06                STA     <VIDEOMODE
001E63  3               SETUPMODE1_CLEAR:
001E63  3  08                   PHP                     ; Clear Lores RAM
001E64  3  8B                   PHB
001E65  3  DA A2 00 DA          SETBANK 0
001E69  3  AB FA        
001E6B  3  C2 10                INDEX16
001E6D  3  A9 00                LDA     #$00
001E6F  3  A2 00 00             LDX     #$0000
001E72  3               :
001E72  3  9D 00 20             STA     $2000,X
001E75  3  E8                   INX
001E76  3  E0 00 08             CPX     #$0800
001E79  3  D0 F7                BNE     :-
001E7B  3  E2 10                INDEX8
001E7D  3  AB                   PLB
001E7E  3  28                   PLP
001E7F  3  20 10 34             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001E82  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X
001E85  3  E0 00                CPX     #$00
001E87  3  D0 07                BNE     SETUPMODE1_MIXED
001E89  3  A9 02                LDA     #$02
001E8B  3  8F 3B FE 00          STA     F:VideoMixedMode
001E8F  3  60                   RTS
001E90  3               SETUPMODE1_MIXED:
001E90  3  A9 01                LDA     #$01
001E92  3  8F 3B FE 00          STA     F:VideoMixedMode
001E96  3  A5 06                LDA     <VIDEOMODE
001E98  3  09 80                ORA     #$80
001E9A  3  85 06                STA     <VIDEOMODE
001E9C  3  60                   RTS
001E9D  3               
001E9D  3               
001E9D  3               SETUPMODE2:                     ; HIRES MODE
001E9D  3  A9 01                LDA     #$01
001E9F  3  8F 38 FE 00          STA     F:VideoHiresMode
001EA3  3  A9 02                LDA     #$02
001EA5  3  8F 35 FE 00          STA     F:VideoTextMode
001EA9  3  8F 36 FE 00          STA     F:VideoLoresMode
001EAD  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001EB0  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001EB3  3               
001EB3  3  E0 00                CPX     #$00
001EB5  3  D0 10                BNE     SETUPMODE2_DOUBLE
001EB7  3  A9 02                LDA     #$02
001EB9  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EBD  3  8F 3C FE 00          STA     F:VideoQuadHires
001EC1  3  8F 3D FE 00          STA     F:VideoMonoHires
001EC5  3  80 48                BRA     SETUPMODE2_CLEAR
001EC7  3               SETUPMODE2_DOUBLE:
001EC7  3  E0 01                CPX     #$01
001EC9  3  D0 16                BNE     SETUPMODE2_QUAD
001ECB  3  A9 01                LDA     #$01
001ECD  3  8F 39 FE 00          STA     F:VideoDoubleHires
001ED1  3  A9 02                LDA     #$02
001ED3  3  8F 3C FE 00          STA     F:VideoQuadHires
001ED7  3  8F 3D FE 00          STA     F:VideoMonoHires
001EDB  3  A9 12                LDA     #$12
001EDD  3  85 06                STA     <VIDEOMODE
001EDF  3  80 2E                BRA     SETUPMODE2_CLEAR
001EE1  3               SETUPMODE2_QUAD:
001EE1  3  E0 02                CPX     #$02
001EE3  3  D0 16                BNE     SETUPMODE2_MONO
001EE5  3  A9 01                LDA     #$01
001EE7  3  8F 3C FE 00          STA     F:VideoQuadHires
001EEB  3  A9 02                LDA     #$02
001EED  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EF1  3  8F 3D FE 00          STA     F:VideoMonoHires
001EF5  3  A9 22                LDA     #$22
001EF7  3  85 06                STA     <VIDEOMODE
001EF9  3  80 14                BRA     SETUPMODE2_CLEAR
001EFB  3               SETUPMODE2_MONO:
001EFB  3  A9 01                LDA     #$01
001EFD  3  8F 3D FE 00          STA     F:VideoMonoHires
001F01  3  A9 02                LDA     #$02
001F03  3  8F 39 FE 00          STA     F:VideoDoubleHires
001F07  3  8F 3C FE 00          STA     F:VideoQuadHires
001F0B  3  A9 32                LDA     #$32
001F0D  3  85 06                STA     <VIDEOMODE
001F0F  3               
001F0F  3               SETUPMODE2_CLEAR:
001F0F  3  08                   PHP                     ; Clear Hires RAM
001F10  3  8B                   PHB
001F11  3  DA A2 00 DA          SETBANK 0
001F15  3  AB FA        
001F17  3  C2 10                INDEX16
001F19  3  A9 00                LDA     #$00
001F1B  3  A2 00 00             LDX     #$0000
001F1E  3               :
001F1E  3  9D 00 20             STA     $2000,X
001F21  3  E8                   INX
001F22  3  E0 00 80             CPX     #$8000
001F25  3  D0 F7                BNE     :-
001F27  3  E2 10                INDEX8
001F29  3  AB                   PLB
001F2A  3  28                   PLP
001F2B  3  20 10 34             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001F2E  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X
001F31  3  E0 00                CPX     #$00
001F33  3  D0 07                BNE     SETUPMODE2_MIXED
001F35  3  A9 02                LDA     #$02
001F37  3  8F 3B FE 00          STA     F:VideoMixedMode
001F3B  3  60                   RTS
001F3C  3               SETUPMODE2_MIXED:
001F3C  3  A9 01                LDA     #$01
001F3E  3  8F 3B FE 00          STA     F:VideoMixedMode
001F42  3  A5 06                LDA     <VIDEOMODE
001F44  3  09 80                ORA     #$80
001F46  3  85 06                STA     <VIDEOMODE
001F48  3  60                   RTS
001F49  3               
001F49  3               
001F49  3               ;___V_PLOT__________________________________________________
001F49  3               ;
001F49  3               ;  PLOT ON SCREEN
001F49  3               ;         TAKES THREE PARAMETERS,  X,Y,COLOR
001F49  3               ;
001F49  3               ; THIS IS NATIVE '816 CODE
001F49  3               ;__________________________________________________________
001F49  3               V_PLOT:
001F49  3  A5 06                LDA     <VIDEOMODE
001F4B  3  29 0F                AND     #$0F
001F4D  3  C9 01                CMP     #$01
001F4F  3  F0 13                BEQ     V_PLOT_LORES
001F51  3  A5 06                LDA     <VIDEOMODE
001F53  3  29 2F                AND     #$2F
001F55  3  C9 02                CMP     #$02
001F57  3  D0 03 4C 1A          LBEQ    V_PLOT_HIRES_COLOR
001F5B  3  20           
001F5C  3  C9 22                CMP     #$22
001F5E  3  D0 03 4C E1          LBEQ    V_PLOT_HIRES_MONO
001F62  3  20           
001F63  3  60                   RTS
001F64  3                       V_PLOT_LORES:
001F64  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001F67  3  8A                   TXA
001F68  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
001F6C  3  A9 00                LDA     #00
001F6E  3  8F 48 03 00          STA     F:TEMPOFFSET+1
001F72  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001F75  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001F78  3                                               ; FIGURE THE BUFFER OFFSET
001F78  3  8A                   TXA                     ; GET Y COORD
001F79  3  48                   PHA                     ; STORE FOR LATER
001F7A  3  4A                   LSR     A               ; THERE ARE TWO ROWS PER BYTE
001F7B  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 40 OR 80 (SINGLE OR DOUBLE LORES)
001F7D  3  29 FF 00             AND     #$00FF
001F80  3  8F 45 03 00          STA     F:TEMP
001F84  3  18                   CLC
001F85  3  0A                   ASL     A
001F86  3  0A                   ASL     A
001F87  3  0A                   ASL     A
001F88  3  0A                   ASL     A
001F89  3  0A                   ASL     A
001F8A  3  48                   PHA
001F8B  3  AF 45 03 00          LDA     F:TEMP
001F8F  3  18                   CLC
001F90  3  0A                   ASL     A
001F91  3  0A                   ASL     A
001F92  3  0A                   ASL     A
001F93  3  8F 45 03 00          STA     F:TEMP
001F97  3  68                   PLA
001F98  3  18                   CLC
001F99  3  6F 45 03 00          ADC     F:TEMP
001F9D  3  8F 45 03 00          STA     F:TEMP
001FA1  3               ; if double lores columns double it.
001FA1  3  E2 20                ACCUMULATOR8
001FA3  3  A5 06                LDA     <VIDEOMODE
001FA5  3  29 10                AND     #$10
001FA7  3  C9 00                CMP     #00
001FA9  3  F0 0B                BEQ     :+
001FAB  3  C2 20                ACCUMULATOR16
001FAD  3  AF 45 03 00          LDA     F:TEMP
001FB1  3  0A                   ASL     A
001FB2  3  8F 45 03 00          STA     F:TEMP
001FB6  3               :
001FB6  3  C2 20                ACCUMULATOR16
001FB8  3  AF 47 03 00          LDA     F:TEMPOFFSET
001FBC  3  18                   CLC
001FBD  3  6F 45 03 00          ADC     F:TEMP
001FC1  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
001FC5  3  E2 30                ACCUMULATORINDEX8
001FC7  3  20 10 34             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001FCA  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
001FCD  3  8A                   TXA
001FCE  3  29 0F                AND     #$0F
001FD0  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
001FD4  3  68                   PLA
001FD5  3  4A                   LSR     A               ; TOP OR BOTTOM PIXEL?
001FD6  3  90 28                BCC     :+
001FD8  3                                               ; TOP PIXEL
001FD8  3  C2 30                ACCUMULATORINDEX16
001FDA  3  AF 47 03 00          LDA     F:TEMPOFFSET
001FDE  3  AA                   TAX
001FDF  3  E2 20                ACCUMULATOR8
001FE1  3  BF 00 20 00          LDA     F:$2000,X
001FE5  3  29 0F                AND     #$0F
001FE7  3  48                   PHA
001FE8  3  AF 45 03 00          LDA     F:TEMP
001FEC  3  0A                   ASL     A
001FED  3  0A                   ASL     A
001FEE  3  0A                   ASL     A
001FEF  3  0A                   ASL     A
001FF0  3  8F 45 03 00          STA     F:TEMP
001FF4  3  68                   PLA
001FF5  3  0F 45 03 00          ORA     F:TEMP
001FF9  3  9F 00 20 00          STA     F:$2000,X
001FFD  3  E2 30                ACCUMULATORINDEX8
001FFF  3  60                   RTS
002000  3               :
002000  3               ; BOTTOM PIXEL
002000  3  C2 30                ACCUMULATORINDEX16
002002  3  AF 47 03 00          LDA     F:TEMPOFFSET
002006  3  AA                   TAX
002007  3  E2 20                ACCUMULATOR8
002009  3  BF 00 20 00          LDA     F:$2000,X
00200D  3  29 F0                AND     #$F0
00200F  3  0F 45 03 00          ORA     F:TEMP
002013  3  9F 00 20 00          STA     F:$2000,X
002017  3  E2 30                ACCUMULATORINDEX8
002019  3  60                   RTS
00201A  3               V_PLOT_HIRES_COLOR:
00201A  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
00201D  3  8A                   TXA
00201E  3  48                   PHA
00201F  3  4A                   LSR     A               ; 2 PIXEL PER BYTE
002020  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
002024  3  A9 00                LDA     #00
002026  3  8F 48 03 00          STA     F:TEMPOFFSET+1
00202A  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
00202D  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
002030  3                                               ; FIGURE THE BUFFER OFFSET
002030  3  8A                   TXA                     ; GET Y COORD
002031  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 70 OR 140 (SINGLE OR DOUBLE HIRES)
002033  3  29 FF 00             AND     #$00FF
002036  3  8F 45 03 00          STA     F:TEMP
00203A  3  18                   CLC
00203B  3  0A                   ASL     A
00203C  3  0A                   ASL     A
00203D  3  0A                   ASL     A
00203E  3  0A                   ASL     A
00203F  3  0A                   ASL     A
002040  3  0A                   ASL     A
002041  3  48                   PHA
002042  3  AF 45 03 00          LDA     F:TEMP
002046  3  18                   CLC
002047  3  0A                   ASL     A
002048  3  0A                   ASL     A
002049  3  48                   PHA
00204A  3  AF 45 03 00          LDA     F:TEMP
00204E  3  18                   CLC
00204F  3  0A                   ASL     A
002050  3  8F 45 03 00          STA     F:TEMP
002054  3  68                   PLA
002055  3  18                   CLC
002056  3  6F 45 03 00          ADC     F:TEMP
00205A  3  8F 45 03 00          STA     F:TEMP
00205E  3  68                   PLA
00205F  3  18                   CLC
002060  3  6F 45 03 00          ADC     F:TEMP
002064  3  8F 45 03 00          STA     F:TEMP
002068  3               ; if double hires double it.
002068  3  E2 20                ACCUMULATOR8
00206A  3  A5 06                LDA     <VIDEOMODE
00206C  3  29 10                AND     #$10
00206E  3  C9 00                CMP     #00
002070  3  F0 0B                BEQ     :+
002072  3  C2 20                ACCUMULATOR16
002074  3  AF 45 03 00          LDA     F:TEMP
002078  3  0A                   ASL     A
002079  3  8F 45 03 00          STA     F:TEMP
00207D  3               :
00207D  3  C2 20                ACCUMULATOR16
00207F  3  AF 47 03 00          LDA     F:TEMPOFFSET
002083  3  18                   CLC
002084  3  6F 45 03 00          ADC     F:TEMP
002088  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
00208C  3  E2 30                ACCUMULATORINDEX8
00208E  3  20 10 34             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
002091  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
002094  3  8A                   TXA
002095  3  29 0F                AND     #$0F
002097  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
00209B  3  68                   PLA
00209C  3  4A                   LSR     A               ; LEFT OR RIGHT PIXEL?
00209D  3  90 28                BCC     :+
00209F  3                                               ; LEFT PIXEL
00209F  3  C2 30                ACCUMULATORINDEX16
0020A1  3  AF 47 03 00          LDA     F:TEMPOFFSET
0020A5  3  AA                   TAX
0020A6  3  E2 20                ACCUMULATOR8
0020A8  3  BF 00 20 00          LDA     F:$2000,X
0020AC  3  29 0F                AND     #$0F
0020AE  3  48                   PHA
0020AF  3  AF 45 03 00          LDA     F:TEMP
0020B3  3  0A                   ASL     A
0020B4  3  0A                   ASL     A
0020B5  3  0A                   ASL     A
0020B6  3  0A                   ASL     A
0020B7  3  8F 45 03 00          STA     F:TEMP
0020BB  3  68                   PLA
0020BC  3  0F 45 03 00          ORA     F:TEMP
0020C0  3  9F 00 20 00          STA     F:$2000,X
0020C4  3  E2 30                ACCUMULATORINDEX8
0020C6  3  60                   RTS
0020C7  3               :
0020C7  3               ; RIGHT PIXEL
0020C7  3  C2 30                ACCUMULATORINDEX16
0020C9  3  AF 47 03 00          LDA     F:TEMPOFFSET
0020CD  3  AA                   TAX
0020CE  3  E2 20                ACCUMULATOR8
0020D0  3  BF 00 20 00          LDA     F:$2000,X
0020D4  3  29 F0                AND     #$F0
0020D6  3  0F 45 03 00          ORA     F:TEMP
0020DA  3  9F 00 20 00          STA     F:$2000,X
0020DE  3  E2 30                ACCUMULATORINDEX8
0020E0  3  60                   RTS
0020E1  3               
0020E1  3               V_PLOT_HIRES_MONO:
0020E1  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
0020E4  3  8A                   TXA
0020E5  3  48                   PHA
0020E6  3  4A                   LSR     A               ; 8 PIXEL PER BYTE
0020E7  3  4A                   LSR     A
0020E8  3  4A                   LSR     A
0020E9  3               
0020E9  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
0020ED  3  A9 00                LDA     #00
0020EF  3  8F 48 03 00          STA     F:TEMPOFFSET+1
0020F3  3  20 10 34             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0020F6  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0020F9  3                                               ; FIGURE THE BUFFER OFFSET
0020F9  3  8A                   TXA                     ; GET Y COORD
0020FA  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 35 OR 70 (MONO OR QUAD HIRES)
0020FC  3  29 FF 00             AND     #$00FF
0020FF  3  8F 45 03 00          STA     F:TEMP
002103  3  18                   CLC
002104  3  0A                   ASL     A
002105  3  0A                   ASL     A
002106  3  0A                   ASL     A
002107  3  0A                   ASL     A
002108  3  0A                   ASL     A
002109  3  48                   PHA
00210A  3  AF 45 03 00          LDA     F:TEMP
00210E  3  18                   CLC
00210F  3  0A                   ASL     A
002110  3  18                   CLC
002111  3  6F 45 03 00          ADC     F:TEMP
002115  3  8F 45 03 00          STA     F:TEMP
002119  3  68                   PLA
00211A  3  18                   CLC
00211B  3  6F 45 03 00          ADC     F:TEMP
00211F  3  8F 45 03 00          STA     F:TEMP
002123  3               ; if quad hires double it.
002123  3  E2 20                ACCUMULATOR8
002125  3  A5 06                LDA     <VIDEOMODE
002127  3  29 10                AND     #$10
002129  3  C9 00                CMP     #00
00212B  3  D0 0B                BNE     :+
00212D  3  C2 20                ACCUMULATOR16
00212F  3  AF 45 03 00          LDA     F:TEMP
002133  3  0A                   ASL     A
002134  3  8F 45 03 00          STA     F:TEMP
002138  3               :
002138  3  C2 20                ACCUMULATOR16
00213A  3  AF 47 03 00          LDA     F:TEMPOFFSET
00213E  3  18                   CLC
00213F  3  6F 45 03 00          ADC     F:TEMP
002143  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
002147  3  E2 30                ACCUMULATORINDEX8
002149  3  20 10 34             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
00214C  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
00214F  3  8A                   TXA
002150  3  29 01                AND     #$01
002152  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
002156  3  68                   PLA
002157  3  29 07                AND     #$07            ; WHICH BIT?
002159  3  AA                   TAX
00215A  3  AF 45 03 00          LDA     F:TEMP
00215E  3  C9 01                CMP     #$01
002160  3  D0 1A                BNE     :+
002162  3  BF 96 21 FF          LDA     F:HIRES_BIT_LOOKUP_SET,X
002166  3  48                   PHA
002167  3  C2 30                ACCUMULATORINDEX16
002169  3  AF 47 03 00          LDA     F:TEMPOFFSET
00216D  3  AA                   TAX
00216E  3  E2 20                ACCUMULATOR8
002170  3  68                   PLA
002171  3  1F 00 20 00          ORA     F:$2000,X
002175  3  9F 00 20 00          STA     F:$2000,X
002179  3  E2 10                INDEX8
00217B  3  60                   RTS
00217C  3               :
00217C  3  BF 9E 21 FF          LDA     F:HIRES_BIT_LOOKUP_RESET,X
002180  3  48                   PHA
002181  3  C2 30                ACCUMULATORINDEX16
002183  3  AF 47 03 00          LDA     F:TEMPOFFSET
002187  3  AA                   TAX
002188  3  E2 20                ACCUMULATOR8
00218A  3  68                   PLA
00218B  3  3F 00 20 00          AND     F:$2000,X
00218F  3  9F 00 20 00          STA     F:$2000,X
002193  3  E2 10                INDEX8
002195  3  60                   RTS
002196  3               HIRES_BIT_LOOKUP_S:
002196  3  80 40 20 10          .BYTE   %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001
00219A  3  08 04 02 01  
00219E  3               HIRES_BIT_LOOKUP_R:
00219E  3  7F BF DF EF          .BYTE   %01111111,%10111111,%11011111,%11101111,%11110111,%11111011,%11111101,%11111110
0021A2  3  F7 FB FD FE  
0021A6  3               HIRES_BIT_LOOKUP_SET = (PROGRAMBANK*$10000)+HIRES_BIT_LOOKUP_S
0021A6  3               HIRES_BIT_LOOKUP_RESET = (PROGRAMBANK*$10000)+HIRES_BIT_LOOKUP_R
0021A6  3               
0021A6  3               ;___V_PATTERN________________________________________________
0021A6  3               ;
0021A6  3               ;  DEFINE GRAPHICS PATTERN
0021A6  3               ;
0021A6  3               ;  TAKES 10 PARAMETERS
0021A6  3               ;       PATTERN NUM (0-255)
0021A6  3               ;       PATTERN DATA (8 BYTES)
0021A6  3               ; THIS IS NATIVE '816 CODE
0021A6  3               ;__________________________________________________________
0021A6  3               V_PATTERN:
0021A6  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
0021A9  3  8A                   TXA
0021AA  3  8F 32 FE 00          STA     f:VideoCharGenOffset
0021AE  3  A0 08                LDY     #8
0021B0  3               :
0021B0  3  5A                   PHY
0021B1  3  20 10 34             JSR     LAB_1C01        ; GET THE NEXT PARAMETER (AFTER ',') OR SYN ERR
0021B4  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE NEXT PARAMETER, RETURN IN X
0021B7  3  7A                   PLY
0021B8  3  8A                   TXA
0021B9  3  8F 33 FE 00          STA     f:VideoCharGenData
0021BD  3  88                   DEY
0021BE  3  C0 00                CPY     #$00
0021C0  3  D0 EE                BNE     :-
0021C2  3  60                   RTS
0021C3  3               
0021C3  2                       .INCLUDE "ay38910.asm"
0021C3  3               via1regb        = $FE10         ; Register
0021C3  3               via1rega        = $FE11         ; Register
0021C3  3               via1ddrb        = $FE12         ; Register
0021C3  3               via1ddra        = $FE13         ; Register
0021C3  3               via1t1cl        = $FE14         ; Register
0021C3  3               via1t1ch        = $FE15         ; Register
0021C3  3               via1t1ll        = $FE16         ; Register
0021C3  3               via1t1lh        = $FE17         ; Register
0021C3  3               via1t2cl        = $FE18         ; Register
0021C3  3               via1t2ch        = $FE19         ; Register
0021C3  3               via1sr          = $FE1A         ; Register
0021C3  3               via1acr         = $FE1B         ; Register
0021C3  3               via1pcr         = $FE1C         ; Register
0021C3  3               via1ifr         = $FE1D         ; Register
0021C3  3               via1ier         = $FE1E         ; Register
0021C3  3               via1ora         = $FE1F         ; Register
0021C3  3               
0021C3  3               
0021C3  3               
0021C3  3               ;___SOUND__________________________________________________
0021C3  3               ;
0021C3  3               ; PLAY SOUND
0021C3  3               ;
0021C3  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
0021C3  3               ;
0021C3  3               ; THIS IS NATIVE '816 CODE
0021C3  3               ;__________________________________________________________
0021C3  3               V_SOUND:
0021C3  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021C6  3  DA                   PHX
0021C7  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021CA  3  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0021CD  3               ; else do type mismatch
0021CD  3  20 2E 40             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
0021D0  3               
0021D0  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
0021D1  3  29 03                AND     #$03
0021D3  3  18                   CLC
0021D4  3  0A                   ASL                     ; = *2
0021D5  3  48                   PHA
0021D6  3  A4 11                LDY     <Itempl
0021D8  3  20 FD 22             JSR     psgwr           ; SET LOW BYTE
0021DB  3  68                   PLA
0021DC  3  1A                   INC     A
0021DD  3  A4 12                LDY     <Itemph
0021DF  3  20 FD 22             JSR     psgwr           ; SET HIGH BYTE
0021E2  3  60                   RTS
0021E3  3               
0021E3  3               ;___VOLUME__________________________________________________
0021E3  3               ;
0021E3  3               ; SET VOLUME
0021E3  3               ;
0021E3  3               ;  TAKES TWO PARAMETERS CHANNEL,VOLUME
0021E3  3               ;
0021E3  3               ; THIS IS NATIVE '816 CODE
0021E3  3               ;__________________________________________________________
0021E3  3               V_VOLUME:
0021E3  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021E6  3  DA                   PHX
0021E7  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021EA  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (VOLUME)
0021ED  3  9B                   TXY
0021EE  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
0021EF  3  29 03                AND     #$03
0021F1  3               
0021F1  3  18                   CLC
0021F2  3  69 08                ADC     #08
0021F4  3  20 FD 22             JSR     psgwr
0021F7  3  60                   RTS
0021F8  3               
0021F8  3               
0021F8  3               ;___VOICE__________________________________________________
0021F8  3               ;
0021F8  3               ; SET VOICE
0021F8  3               ;
0021F8  3               ;  TAKES TWO PARAMETERS VOICE, ENVELOPE
0021F8  3               ;
0021F8  3               ; THIS IS NATIVE '816 CODE
0021F8  3               ;__________________________________________________________
0021F8  3               V_VOICE:
0021F8  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021FB  3  DA                   PHX
0021FC  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021FF  3  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002202  3               ; else do type mismatch
002202  3  20 2E 40             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
002205  3  7A                   PLY
002206  3  A9 0D                LDA     #13
002208  3  20 FD 22             JSR     psgwr
00220B  3               
00220B  3  A9 0B                LDA     #11
00220D  3  A4 11                LDY     <Itempl
00220F  3  20 FD 22             JSR     psgwr           ; SET LOW BYTE
002212  3  A9 0C                LDA     #12
002214  3  A4 12                LDY     <Itemph         ; SET HIGH BYTE
002216  3  20 FD 22             JSR     psgwr
002219  3               
002219  3  60                   RTS
00221A  3               
00221A  3               
00221A  3               
00221A  3               
00221A  3               
00221A  3               ;___NOISE__________________________________________________
00221A  3               ;
00221A  3               ; SELECT NOISE CHANNEL
00221A  3               ;
00221A  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
00221A  3               ;
00221A  3               ; THIS IS NATIVE '816 CODE
00221A  3               ;__________________________________________________________
00221A  3               V_NOISE:
00221A  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
00221D  3  DA                   PHX
00221E  3  20 10 34             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
002221  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (FREQ)
002224  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
002225  3  DA                   PHX
002226  3  AA                   TAX
002227  3               
002227  3  29 1F                AND     #%00011111
002229  3  A8                   TAY
00222A  3  A9 06                LDA     #$06
00222C  3  20 FD 22             JSR     psgwr           ; SET NOISE FREQ
00222F  3               
00222F  3  A9 07                LDA     #$07
002231  3  20 BB 22             JSR     psgrd           ; GET CONFIG
002234  3  68                   PLA
002235  3  5A                   PHY
002236  3  29 03                AND     #$03
002238  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
002239  3  68                   PLA
00223A  3  E0 00                CPX     #$00
00223C  3  D0 06                BNE     NOISE_1
00223E  3  29 37                AND     #%00110111
002240  3  09 01                ORA     #%00000001
002242  3  80 0E                BRA     NOISE_3
002244  3               NOISE_1:
002244  3  E0 01                CPX     #$01
002246  3  D0 06                BNE     NOISE_2
002248  3  29 2F                AND     #%00101111
00224A  3  09 02                ORA     #%00000010
00224C  3  80 04                BRA     NOISE_3
00224E  3               NOISE_2:
00224E  3  29 1F                AND     #%00011111
002250  3  09 04                ORA     #%00000100
002252  3               NOISE_3:
002252  3  A8                   TAY
002253  3  A9 07                LDA     #$07
002255  3  20 FD 22             JSR     psgwr           ; SET LOW BYTE
002258  3  60                   RTS
002259  3               
002259  3               ;___TONE___________________________________________________
002259  3               ;
002259  3               ; SELECT TONE CHANNEL
002259  3               ;
002259  3               ;  TAKES ONE PARAMETER CHANNEL
002259  3               ;
002259  3               ; THIS IS NATIVE '816 CODE
002259  3               ;__________________________________________________________
002259  3               V_TONE:
002259  3  20 8A 3F             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
00225C  3  DA                   PHX
00225D  3               
00225D  3  A9 07                LDA     #$07
00225F  3  20 BB 22             JSR     psgrd           ; GET CONFIG
002262  3  68                   PLA
002263  3  5A                   PHY
002264  3  29 03                AND     #$03
002266  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
002267  3  68                   PLA
002268  3  E0 00                CPX     #$00
00226A  3  D0 06                BNE     TONE_1
00226C  3  29 3E                AND     #%00111110
00226E  3  09 08                ORA     #%00001000
002270  3  80 0E                BRA     TONE_3
002272  3               TONE_1:
002272  3  E0 01                CPX     #$01
002274  3  D0 06                BNE     TONE_2
002276  3  29 3D                AND     #%00111101
002278  3  09 10                ORA     #%00010000
00227A  3  80 04                BRA     TONE_3
00227C  3               TONE_2:
00227C  3  29 3B                AND     #%00111011
00227E  3  09 20                ORA     #%00100000
002280  3               TONE_3:
002280  3  A8                   TAY
002281  3  A9 07                LDA     #$07
002283  3  20 FD 22             JSR     psgwr           ; SET LOW BYTE
002286  3  60                   RTS
002287  3               
002287  3               
002287  3               ;___CONTROLLER_______________________________________________
002287  3               ;
002287  3               ; GET JOYTICK STATUS
002287  3               ;
002287  3               ;  TAKES ONE PARAMETERS JOYSTICK#, RETURNS STATUS
002287  3               ;
002287  3               ; THIS IS NATIVE '816 CODE
002287  3               ;__________________________________________________________
002287  3               LAB_CON:
002287  3  20 2E 40             JSR     LAB_F2FX        ; GET THE PARAMETER, RETURN IN X (controller#)
00228A  3  A5 11                LDA     <Itempl
00228C  3  29 01                AND     #$01
00228E  3  18                   CLC
00228F  3  69 0E                ADC     #14
002291  3  20 BB 22             JSR     psgrd           ; return value in y
002294  3  4C B6 38             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
002297  3               
002297  3               
002297  3               
002297  3               
002297  3               ;___utility functions____________________________________________
002297  3               psginit:
002297  3  A9 9C                LDA     #%10011100
002299  3  8F 13 FE 00          STA     f:via1ddra
00229D  3  A9 10                LDA     #%00010000
00229F  3  8F 11 FE 00          STA     f:via1rega
0022A3  3  A9 FF                LDA     #$FF
0022A5  3  8F 12 FE 00          STA     f:via1ddrb
0022A9  3  A9 00                LDA     #$00
0022AB  3  8F 10 FE 00          STA     f:via1regb
0022AF  3  60                   RTS
0022B0  3  20 3F 23             JSR     clrpsg
0022B3  3               
0022B3  3  A9 07                LDA     #7
0022B5  3  A0 3F                LDY     #$3F
0022B7  3  20 FD 22             JSR     psgwr
0022BA  3  60                   RTS
0022BB  3               
0022BB  3               psgrd:
0022BB  3  8F 10 FE 00          STA     f:via1regb      ; select register
0022BF  3  A9 1C                LDA     #%00011100      ; latch address
0022C1  3  8F 11 FE 00          STA     f:via1rega
0022C5  3               
0022C5  3  8F 11 FE 00          STA     f:via1rega
0022C9  3  8F 11 FE 00          STA     f:via1rega
0022CD  3               
0022CD  3  A9 10                LDA     #%00010000      ; inact
0022CF  3  8F 11 FE 00          STA     f:via1rega
0022D3  3               
0022D3  3  8F 11 FE 00          STA     f:via1rega
0022D7  3               
0022D7  3  A9 00                LDA     #$00
0022D9  3  8F 12 FE 00          STA     f:via1ddrb
0022DD  3  A9 18                LDA     #%00011000      ; latch data
0022DF  3  8F 11 FE 00          STA     f:via1rega
0022E3  3               
0022E3  3  8F 11 FE 00          STA     f:via1rega
0022E7  3  8F 11 FE 00          STA     f:via1rega
0022EB  3               
0022EB  3  AF 10 FE 00          LDA     f:via1regb      ; get data
0022EF  3  A8                   TAY
0022F0  3  A9 FF                LDA     #$FF
0022F2  3  8F 12 FE 00          STA     f:via1ddrb
0022F6  3  A9 10                LDA     #%00010000      ; inact
0022F8  3  8F 11 FE 00          STA     f:via1rega
0022FC  3  60                   RTS
0022FD  3               
0022FD  3               
0022FD  3               psgwr:
0022FD  3  8F 10 FE 00          STA     f:via1regb      ; select register
002301  3  A9 1C                LDA     #%00011100      ; latch address
002303  3  8F 11 FE 00          STA     f:via1rega
002307  3               
002307  3  8F 11 FE 00          STA     f:via1rega
00230B  3  8F 11 FE 00          STA     f:via1rega
00230F  3               
00230F  3  A9 10                LDA     #%00010000      ; inact
002311  3  8F 11 FE 00          STA     f:via1rega
002315  3               
002315  3  8F 11 FE 00          STA     f:via1rega
002319  3  8F 11 FE 00          STA     f:via1rega
00231D  3  98                   TYA
00231E  3  8F 10 FE 00          STA     f:via1regb      ; store data
002322  3               
002322  3  8F 10 FE 00          STA     f:via1regb      ; store data
002326  3  8F 10 FE 00          STA     f:via1regb      ; store data
00232A  3               
00232A  3  A9 14                LDA     #%00010100      ; latch data
00232C  3  8F 11 FE 00          STA     f:via1rega
002330  3               
002330  3  8F 11 FE 00          STA     f:via1rega
002334  3  8F 11 FE 00          STA     f:via1rega
002338  3               
002338  3  A9 10                LDA     #%00010000      ; inact
00233A  3  8F 11 FE 00          STA     f:via1rega
00233E  3  60                   RTS
00233F  3               
00233F  3               ;
00233F  3               ; Clear PSG registers to default
00233F  3               ;
00233F  3               clrpsg:
00233F  3  DA 5A 48 08          STORECONTEXT
002343  3  E2 30                ACCUMULATORINDEX8
002345  3  A2 00                LDX     #00
002347  3  A0 00                LDY     #00
002349  3               clrpsg1:
002349  3  8A                   TXA
00234A  3  20 FD 22             JSR     psgwr           ; set register X to 0
00234D  3  E8                   INX
00234E  3  E0 11                CPX     #17
002350  3  D0 F7                BNE     clrpsg1
002352  3  28 68 7A FA          RESTORECONTEXT
002356  3  60                   RTS
002357  3               
002357  2                       .INCLUDE "rtc.asm"
002357  3               .P816
002357  3               
002357  3               ;___LAB_SECOND______________________________________________
002357  3               ;
002357  3               ; RETURN SYSTEM SECONDS
002357  3               ;
002357  3               ; THIS IS NATIVE '816 CODE
002357  3               ;__________________________________________________________
002357  3               LAB_SECOND:
002357  3  E2 30                ACCUMULATORINDEX8
002359  3  AF 40 FE 00          LDA     F:RTCSECONDS
00235D  3  20 31 24             JSR     BCD_TO_HEX
002360  3  A8                   TAY
002361  3  A9 00                LDA     #0              ; Get high byte
002363  3  20 A9 38             JSR     LAB_AYFC
002366  3  60                   RTS
002367  3               LAB_PSECOND:
002367  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
002369  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
00236D  3  60                   RTS
00236E  3               ;___LAB_MINUTE______________________________________________
00236E  3               ;
00236E  3               ; RETURN SYSTEM MINUTE
00236E  3               ;
00236E  3               ; THIS IS NATIVE '816 CODE
00236E  3               ;__________________________________________________________
00236E  3               LAB_MINUTE:
00236E  3  E2 30                ACCUMULATORINDEX8
002370  3  AF 41 FE 00          LDA     F:RTCMINUTES
002374  3  20 31 24             JSR     BCD_TO_HEX
002377  3  A8                   TAY
002378  3  A9 00                LDA     #0              ; Get high byte
00237A  3  20 A9 38             JSR     LAB_AYFC
00237D  3  60                   RTS
00237E  3               LAB_PMINUTE:
00237E  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
002380  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
002384  3  60                   RTS
002385  3               ;___LAB_HOUR_________________________________________________
002385  3               ;
002385  3               ; RETURN SYSTEM HOUR
002385  3               ;
002385  3               ; THIS IS NATIVE '816 CODE
002385  3               ;__________________________________________________________
002385  3               LAB_HOUR:
002385  3  E2 30                ACCUMULATORINDEX8
002387  3  AF 42 FE 00          LDA     F:RTCHOUR
00238B  3  20 31 24             JSR     BCD_TO_HEX
00238E  3  A8                   TAY
00238F  3  A9 00                LDA     #0              ; Get high byte
002391  3  20 A9 38             JSR     LAB_AYFC
002394  3  60                   RTS
002395  3               LAB_PHOUR:
002395  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
002397  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
00239B  3  60                   RTS
00239C  3               ;___LAB_DOW_________________________________________________
00239C  3               ;
00239C  3               ; RETURN SYSTEM DAY OF WEEK
00239C  3               ;
00239C  3               ; THIS IS NATIVE '816 CODE
00239C  3               ;__________________________________________________________
00239C  3               LAB_WEEKD:
00239C  3  E2 30                ACCUMULATORINDEX8
00239E  3  AF 43 FE 00          LDA     F:RTCDAYOWEEK
0023A2  3  20 31 24             JSR     BCD_TO_HEX
0023A5  3  A8                   TAY
0023A6  3  A9 00                LDA     #0              ; Get high byte
0023A8  3  20 A9 38             JSR     LAB_AYFC
0023AB  3  60                   RTS
0023AC  3               LAB_PWEEKD:
0023AC  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0023AE  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
0023B2  3  60                   RTS
0023B3  3               ;___LAB_DAY______________________________________________
0023B3  3               ;
0023B3  3               ; RETURN SYSTEM DAY OF MONTH
0023B3  3               ;
0023B3  3               ; THIS IS NATIVE '816 CODE
0023B3  3               ;__________________________________________________________
0023B3  3               LAB_DAY:
0023B3  3  E2 30                ACCUMULATORINDEX8
0023B5  3  AF 44 FE 00          LDA     F:RTCDATE
0023B9  3  20 31 24             JSR     BCD_TO_HEX
0023BC  3  A8                   TAY
0023BD  3  A9 00                LDA     #0              ; Get high byte
0023BF  3  20 A9 38             JSR     LAB_AYFC
0023C2  3  60                   RTS
0023C3  3               LAB_PDAY:
0023C3  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0023C5  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
0023C9  3  60                   RTS
0023CA  3               ;___LAB_MONTH______________________________________________
0023CA  3               ;
0023CA  3               ; RETURN SYSTEM MONTH
0023CA  3               ;
0023CA  3               ; THIS IS NATIVE '816 CODE
0023CA  3               ;__________________________________________________________
0023CA  3               LAB_MONTH:
0023CA  3  E2 30                ACCUMULATORINDEX8
0023CC  3  AF 45 FE 00          LDA     F:RTCMONTH
0023D0  3  20 31 24             JSR     BCD_TO_HEX
0023D3  3  A8                   TAY
0023D4  3  A9 00                LDA     #0              ; Get high byte
0023D6  3  20 A9 38             JSR     LAB_AYFC
0023D9  3  60                   RTS
0023DA  3               LAB_PMONTH:
0023DA  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0023DC  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
0023E0  3  60                   RTS
0023E1  3               ;___LAB_YEAR________________________________________________
0023E1  3               ;
0023E1  3               ; RETURN SYSTEM YEAR
0023E1  3               ;
0023E1  3               ; THIS IS NATIVE '816 CODE
0023E1  3               ;__________________________________________________________
0023E1  3               LAB_YEAR:
0023E1  3  E2 30                ACCUMULATORINDEX8
0023E3  3  AF 47 FE 00          LDA     F:RTCCENTURY
0023E7  3  20 31 24             JSR     BCD_TO_HEX
0023EA  3  85 11                STA     nums_1
0023EC  3  C2 20                ACCUMULATOR16
0023EE  3  A5 11                LDA     nums_1
0023F0  3  29 FF 00             AND     #$00FF
0023F3  3  0A                   ASL     a               ; THIS IS THE NUMBER * 2
0023F4  3  0A                   ASL     a               ; THIS IS THE NUMBER * 4
0023F5  3  85 11                STA     nums_1          ; PARK IT (NOW NUM*4)
0023F7  3  0A                   ASL     a               ; THIS IS THE NUMBER * 8
0023F8  3  0A                   ASL     a               ; THIS IS THE NUMBER * 16
0023F9  3  0A                   ASL     a               ; THIS IS THE NUMBER * 32
0023FA  3  48                   PHA
0023FB  3  18                   CLC                     ; ADD IT TO STORED QUANTITY
0023FC  3  65 11                ADC     nums_1
0023FE  3  85 11                STA     nums_1          ; PARK IT (NOW NUM*36)
002400  3  68                   PLA
002401  3  0A                   ASL     a               ; THIS IS THE NUMBER * 64
002402  3  18                   CLC                     ; ADD IT TO STORED QUANTITY
002403  3  65 11                ADC     nums_1
002405  3  85 71                STA     Temp_2          ; PARK IT (NOW NUM*100)
002407  3  E2 20                ACCUMULATOR8
002409  3  AF 46 FE 00          LDA     F:RTCYEAR
00240D  3  20 31 24             JSR     BCD_TO_HEX
002410  3  85 11                STA     nums_1
002412  3  A9 00                LDA     #$00
002414  3  85 12                STA     nums_1+1
002416  3  C2 20                ACCUMULATOR16
002418  3  A5 71                LDA     Temp_2
00241A  3  18                   CLC
00241B  3  65 11                ADC     nums_1
00241D  3  85 11                STA     nums_1
00241F  3  E2 20                ACCUMULATOR8
002421  3  A5 11                LDA     nums_1
002423  3  A8                   TAY
002424  3  A5 12                LDA     nums_1+1
002426  3  20 A9 38             JSR     LAB_AYFC
002429  3  60                   RTS
00242A  3               LAB_PYEAR:
00242A  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00242C  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
002430  3  60                   RTS
002431  3               
002431  3               
002431  3               BCD_TO_HEX:
002431  3  85 12                STA     nums_2          ; Store in TEMP2
002433  3  29 F0                AND     #$F0
002435  3  4A                   LSR     A               ; (shift 1 times to /2)
002436  3  85 11                STA     nums_1          ; Store the /2 into TEMP
002438  3  4A                   LSR     A               ;
002439  3  4A                   LSR     A               ; Shift two more times to /8
00243A  3  18                   CLC
00243B  3  65 11                ADC     nums_1          ; add /8 + /2 to get /10
00243D  3  85 11                STA     nums_1          ; Store tens digit into TEMP
00243F  3  A5 12                LDA     nums_2          ; Get Ones
002441  3  29 0F                AND     #$0F
002443  3  18                   CLC
002444  3  65 11                ADC     nums_1
002446  3  60                   RTS                     ; Return from subroutine
002447  3               
002447  2               
002447  2               
002447  2               
002447  2               ;___TitleScreen_____________________________________________
002447  2               ;
002447  2               ; Basic Title Screen
002447  2               ;
002447  2               ; THIS IS NATIVE '816 CODE
002447  2               ;__________________________________________________________
002447  2               TitleScreen:
002447  2  20 97 22             JSR     psginit
00244A  2               
00244A  2  A9 00                LDA     #0
00244C  2  85 06                STA     <VIDEOMODE
00244E  2               
00244E  2  AF 41 03 00          LDA     f:ConsoleDevice
002452  2  C9 00                CMP     #$00
002454  2  D0 08                BNE     TitleScreen_1
002456  2  A9 5D                LDA     #<LAB_SMSG1     ; point to sign-on message (low addr)
002458  2  A0 16                LDY     #>LAB_SMSG1     ; point to sign-on message (high addr)
00245A  2  20 71 30             JSR     LAB_18C3        ; print null terminated string from memory
00245D  2  60                   RTS
00245E  2               TitleScreen_1:
00245E  2  A9 9E                LDA     #$9E
002460  2  22 18 FD 00          JSL     LSetColorVEC
002464  2  22 6C FD 00          JSL     LClearScrVec
002468  2  A9 0A                LDA     #<LAB_CONMSG    ; point to sign-on message (low addr)
00246A  2  A0 16                LDY     #>LAB_CONMSG    ; point to sign-on message (high addr)
00246C  2  20 71 30             JSR     LAB_18C3        ; print null terminated string from memory
00246F  2  60                   RTS
002470  2               
002470  2               ;___ScreenEditor____________________________________________
002470  2               ;
002470  2               ; Basic Screen editor code
002470  2               ;
002470  2               ; THIS IS NATIVE '816 CODE
002470  2               ;__________________________________________________________
002470  2               ScreenEditor:
002470  2  48                   PHA
002471  2  DA                   PHX
002472  2  5A                   PHY
002473  2  08                   PHP
002474  2  8B                   PHB
002475  2  E2 30                ACCUMULATORINDEX8
002477  2               ; allow prepopulate of screen
002477  2               ploop:
002477  2  22 1C FD 00          JSL     LCURSORVEC
00247B  2  22 08 FD 00          JSL     LINPWVEC
00247F  2  C9 FF                CMP     #$FF
002481  2  F0 F4                BEQ     ploop
002483  2  22 20 FD 00          JSL     LUNCURSORVEC
002487  2  C9 01                CMP     #01
002489  2  F0 21                BEQ     crsrup
00248B  2  C9 02                CMP     #02
00248D  2  F0 30                BEQ     crsrdn
00248F  2  C9 1F                CMP     #$1f
002491  2  F0 53                BEQ     crsrlt
002493  2  C9 04                CMP     #$04
002495  2  D0 03 4C 1A          LBEQ    crsrrt
002499  2  25           
00249A  2  C9 0A                CMP     #$0A
00249C  2  F0 D9                BEQ     ploop
00249E  2  C9 0D                CMP     #13
0024A0  2  D0 03 4C 39          LBEQ    pexit
0024A4  2  25           
0024A5  2               
0024A5  2  22 00 FD 00          JSL     LPRINTVEC
0024A9  2  4C 77 24             JMP     ploop
0024AC  2               
0024AC  2               crsrup:
0024AC  2  AF 31 03 00          LDA     F:CSRY
0024B0  2  C9 00                CMP     #00
0024B2  2  F0 C3                BEQ     ploop
0024B4  2  AF 31 03 00          LDA     F:CSRY
0024B8  2  3A                   DEC     A
0024B9  2  8F 31 03 00          STA     F:CSRY
0024BD  2  80 B8                BRA     ploop
0024BF  2               crsrdn:
0024BF  2  AF 31 03 00          LDA     F:CSRY
0024C3  2  C9 17                CMP     #23
0024C5  2  F0 0B                BEQ     crsrdn_1
0024C7  2  AF 31 03 00          LDA     F:CSRY
0024CB  2  1A                   INC     A
0024CC  2  8F 31 03 00          STA     F:CSRY
0024D0  2  80 A5                BRA     ploop
0024D2  2               crsrdn_1:
0024D2  2  AF 30 03 00          LDA     F:CSRX
0024D6  2  48                   PHA
0024D7  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0024DB  2  22 14 FD 00          JSL     LSrlUpVEC
0024DF  2  68                   PLA
0024E0  2  8F 30 03 00          STA     F:CSRX
0024E4  2  80 91                BRA     ploop
0024E6  2               crsrlt:
0024E6  2  AF 30 03 00          LDA     F:CSRX
0024EA  2  C9 00                CMP     #00
0024EC  2  F0 0C                BEQ     crsrlt_1
0024EE  2  AF 30 03 00          LDA     F:CSRX
0024F2  2  3A                   DEC     A
0024F3  2  8F 30 03 00          STA     F:CSRX
0024F7  2  4C 77 24             JMP     ploop
0024FA  2               crsrlt_1:
0024FA  2  AF 31 03 00          LDA     F:CSRY
0024FE  2  C9 00                CMP     #00
002500  2  D0 03 4C 77          LBEQ    ploop
002504  2  24           
002505  2  AF 43 03 00          LDA     F:VIDEOWIDTH
002509  2  3A                   DEC     A
00250A  2  8F 30 03 00          STA     F:CSRX
00250E  2  AF 31 03 00          LDA     F:CSRY
002512  2  3A                   DEC     A
002513  2  8F 31 03 00          STA     F:CSRY
002517  2  4C 77 24             JMP     ploop
00251A  2               crsrrt:
00251A  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00251E  2  3A                   DEC     A
00251F  2  CF 30 03 00          CMP     F:CSRX
002523  2  F0 0C                BEQ     crsrrt_1
002525  2  AF 30 03 00          LDA     F:CSRX
002529  2  1A                   INC     A
00252A  2  8F 30 03 00          STA     F:CSRX
00252E  2  4C 77 24             JMP     ploop
002531  2               crsrrt_1:
002531  2  A9 00                LDA     #00
002533  2  8F 30 03 00          STA     F:CSRX
002537  2  80 86                BRA     crsrdn
002539  2               pexit:
002539  2  20 69 25             JSR     LdKbBuffer
00253C  2  A2 50                LDX     #80
00253E  2  A9 00                LDA     #$00
002540  2  9F 81 21 02          STA     f:LIbuffs,X
002544  2               TERMLOOP:
002544  2  CA                   DEX
002545  2  BF 81 21 02          LDA     f:LIbuffs,X
002549  2  C9 20                CMP     #32
00254B  2  F0 06                BEQ     TERMLOOP_B
00254D  2  C9 00                CMP     #00
00254F  2  F0 08                BEQ     TERMLOOP_C
002551  2  80 0A                BRA     TERMLOOP_A
002553  2               TERMLOOP_B:
002553  2  A9 00                LDA     #00
002555  2  9F 81 21 02          STA     f:LIbuffs,X
002559  2               TERMLOOP_C:
002559  2  E0 00                CPX     #00
00255B  2  D0 E7                BNE     TERMLOOP
00255D  2               TERMLOOP_A:
00255D  2  A9 0D                LDA     #13
00255F  2  22 00 FD 00          JSL     LPRINTVEC
002563  2  AB                   PLB
002564  2  28                   PLP
002565  2  7A                   PLY
002566  2  FA                   PLX
002567  2  68                   PLA
002568  2  60                   RTS
002569  2               
002569  2               
002569  2               LdKbBuffer:
002569  2               ; clear input buffer
002569  2  A2 51                LDX     #81
00256B  2               :
00256B  2  A9 00                LDA     #00
00256D  2  9F 80 21 02          STA     f:LIbuffs-1,X
002571  2  CA                   DEX
002572  2  D0 F7                BNE     :-
002574  2               
002574  2               ; Let's calculate the screen memory offset and store it
002574  2  20 FA 25             JSR     GetVideoAddressOffset
002577  2               
002577  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00257B  2  C9 28                CMP     #40
00257D  2  F0 03                BEQ     :+
00257F  2  4C C9 25             JMP     LdKbBuffer_1c
002582  2               :
002582  2               ; are we on the first line?  If so, we know it is not continued from the previous line
002582  2  AF 31 03 00          LDA     F:CSRY
002586  2  A8                   TAY
002587  2  C0 00                CPY     #$00
002589  2  F0 27                BEQ     LdKbBuffer_1
00258B  2               ; if prior line linked  set y-1
00258B  2  C2 30                ACCUMULATORINDEX16
00258D  2  AF 47 03 00          LDA     f:TEMPOFFSET
002591  2  AA                   TAX
002592  2  E2 20                ACCUMULATOR8
002594  2  BF FF 0F 00          LDA     F:$0FFF,X
002598  2  E2 10                INDEX8
00259A  2  C9 20                CMP     #$20
00259C  2  F0 14                BEQ     LdKbBuffer_1
00259E  2  C2 20                ACCUMULATOR16
0025A0  2  AF 47 03 00          LDA     f:TEMPOFFSET
0025A4  2  38                   SEC
0025A5  2  E9 28 00             SBC     #40
0025A8  2  8F 47 03 00          STA     f:TEMPOFFSET
0025AC  2  E2 20                ACCUMULATOR8
0025AE  2  A9 51                LDA     #81             ; get 80 chars
0025B0  2  80 1D                BRA     LdKbBuffer_1b
0025B2  2               ; get chars; 40 if last line char=32, 80 if not
0025B2  2               
0025B2  2               LdKbBuffer_1:
0025B2  2               ; is this the last line on the screen?
0025B2  2  C0 17                CPY     #23
0025B4  2  F0 17                BEQ     LdKbBuffer_1a
0025B6  2               ; if current line linked carries to the next set size to 80
0025B6  2  C2 30                ACCUMULATORINDEX16
0025B8  2  AF 47 03 00          LDA     f:TEMPOFFSET
0025BC  2  AA                   TAX
0025BD  2  E2 20                ACCUMULATOR8
0025BF  2  BF 27 10 00          LDA     F:$1027,X
0025C3  2  E2 10                INDEX8
0025C5  2  C9 20                CMP     #$20
0025C7  2  F0 04                BEQ     LdKbBuffer_1a
0025C9  2               LdKbBuffer_1c:
0025C9  2  A9 51                LDA     #81             ; get 80 chars
0025CB  2  80 02                BRA     LdKbBuffer_1b
0025CD  2               LdKbBuffer_1a:
0025CD  2  A9 29                LDA     #41             ; get 40 chars
0025CF  2               LdKbBuffer_1b:
0025CF  2  C2 30                ACCUMULATORINDEX16
0025D1  2  29 FF 00             AND     #$00FF
0025D4  2  A8                   TAY
0025D5  2  AF 47 03 00          LDA     f:TEMPOFFSET
0025D9  2  AA                   TAX
0025DA  2  A9 00 00             LDA     #$0000
0025DD  2  85 07                STA     <LOCALWORK
0025DF  2  E2 20                ACCUMULATOR8
0025E1  2               LdKbBuffer_2:
0025E1  2  BF 00 10 00          LDA     f:$1000,X
0025E5  2  DA                   PHX
0025E6  2  A6 07                LDX     <LOCALWORK
0025E8  2  9F 81 21 02          STA     f:LIbuffs,X
0025EC  2  E8                   INX
0025ED  2  86 07                STX     <LOCALWORK
0025EF  2  FA                   PLX
0025F0  2  E8                   INX
0025F1  2  88                   DEY
0025F2  2  C0 00 00             CPY     #0000
0025F5  2  D0 EA                BNE     LdKbBuffer_2
0025F7  2  E2 30                ACCUMULATORINDEX8
0025F9  2  60                   RTS
0025FA  2               
0025FA  2               .I8
0025FA  2               .A8
0025FA  2               GetVideoAddressOffset:
0025FA  2  AF 31 03 00          LDA     F:CSRY
0025FE  2  C2 30                ACCUMULATORINDEX16
002600  2  29 FF 00             AND     #$00FF
002603  2  8F 45 03 00          STA     F:TEMP
002607  2  18                   CLC
002608  2  0A                   ASL     A
002609  2  0A                   ASL     A
00260A  2  0A                   ASL     A
00260B  2  0A                   ASL     A
00260C  2  0A                   ASL     A
00260D  2  48                   PHA
00260E  2  AF 45 03 00          LDA     F:TEMP
002612  2  18                   CLC
002613  2  0A                   ASL     A
002614  2  0A                   ASL     A
002615  2  0A                   ASL     A
002616  2  8F 45 03 00          STA     F:TEMP
00261A  2  68                   PLA
00261B  2  18                   CLC
00261C  2  6F 45 03 00          ADC     F:TEMP
002620  2  8F 47 03 00          STA     F:TEMPOFFSET
002624  2               ; if 80 columns double it.
002624  2  E2 20                ACCUMULATOR8
002626  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00262A  2  C9 28                CMP     #40
00262C  2  F0 0B                BEQ     :+
00262E  2  C2 20                ACCUMULATOR16
002630  2  AF 47 03 00          LDA     F:TEMPOFFSET
002634  2  0A                   ASL     A
002635  2  8F 47 03 00          STA     F:TEMPOFFSET
002639  2               :
002639  2  E2 30                ACCUMULATORINDEX8
00263B  2  60                   RTS
00263C  2               
00263C  2               
00263C  2               
00263C  2               .I8
00263C  2               .A8
00263C  2               ;___LAB_MONITOR_____________________________________________
00263C  2               ;
00263C  2               ; UTILIZE BIOS TO GO TO MONITOR
00263C  2               ;
00263C  2               ;
00263C  2               ; THIS IS NATIVE '816 CODE
00263C  2               ;__________________________________________________________
00263C  2               LAB_MONITOR:
00263C  2  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
00263D  2  18                   CLC                     ;
00263E  2  FB                   XCE                     ; SET NATIVE MODE
00263F  2  DA A2 00 DA          SETBANK 0
002643  2  AB FA        
002645  2  C2 30                ACCUMULATORINDEX16
002647  2  A9 FF BF             LDA     #STACK          ; get the stack address
00264A  2  1B                   TCS                     ; and set the stack to it
00264B  2  5C 00 E0 00          JML     $00E000
00264F  2               
00264F  1               ;
00264F  1               ;____________________________________________________________________________________________
00264F  1               
00264F  1               
00264F  1               ;   ensure CPU Context is in a known state
00264F  1  EA                   NOP                     ; FIX A CODE PAGE ALIGNMENT PROBLEM
002650  1               BASICBEGIN:
002650  1               
002650  1  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
002651  1  18                   CLC                     ;
002652  1  FB                   XCE                     ; SET NATIVE MODE
002653  1  C2 30                ACCUMULATORINDEX16
002655  1  A9 FF BF             LDA     #STACK          ; get the stack address
002658  1  1B                   TCS                     ; and set the stack to it
002659  1  A9 00 00             LDA     #$0000          ;
00265C  1  48                   PHA                     ; Set Direct Register to 0
00265D  1  2B                   PLD                     ;
00265E  1               
00265E  1                       .IF     PROGRAMBANK=DATABANK
00265E  1               
00265E  1                       .ELSE
00265E  1  A2 00 10                 LDX     #$1000
002661  1  A0 00 10                 LDY     #$1000
002664  1  A9 00 10                 LDA     #$1000
002667  1  54 02 FF                 MVN     #PROGRAMBANK,#DATABANK; COPY TABLES $1000 THROUGH $2000 PLUS OR MINUS :) TO WORKING BANK
00266A  1                       .ENDIF
00266A  1  E2 30                ACCUMULATORINDEX8
00266C  1  A9 FF                LDA     #PROGRAMBANK    ; SET DATA BANK = TO PROGRAM BANK TO ALLOW FOR INITIALIZATION FROM ROM
00266E  1  48                   PHA
00266F  1  AB                   PLB                     ;
002670  1               
002670  1               
002670  1               
002670  1               LAB_COLD:
002670  1  A2 04                LDX     #PG2_TABE-PG2_TABS-1
002672  1               ; byte count-1
002672  1               LAB_2D13:
002672  1  BD 33 10             LDA     PG2_TABS,X      ; get byte
002675  1  9F 00 02 00          STA     f:ccflag,X      ; store in page 2
002679  1  CA                   DEX                     ; decrement count
00267A  1  10 F6                BPL     LAB_2D13        ; loop if not done
00267C  1               
00267C  1  A2 FF                LDX     #$FF            ; set byte
00267E  1  86 88                STX     <Clineh         ; set current line high byte (set immediate mode)
002680  1               
002680  1  A9 4C                LDA     #$4C            ; code for JMP
002682  1  85 A1                STA     <Fnxjmp         ; save for jump vector for functions
002684  1               
002684  1               ; copy block from LAB_2CEE to $00BC - $00E0
002684  1               
002684  1  A0 1D                LDY     #LAB_2CEE_END-LAB_2CEE; set byte count
002686  1               LAB_2D4E:
002686  1  BE 02 10             LDX     LAB_2CEE-1,Y    ; get byte from table
002689  1  96 BB                STX     <LAB_IGBY-1,Y   ; save byte in page zero
00268B  1  88                   DEY                     ; decrement count
00268C  1  D0 F8                BNE     LAB_2D4E        ; loop if not all done
00268E  1               
00268E  1               ; copy block from StrTab to $0000 - $0012
00268E  1               
00268E  1               LAB_GMEM:
00268E  1  A0 12                LDY     #EndTab-StrTab-1; set byte count-1
002690  1               TabLoop:
002690  1  BE 20 10             LDX     StrTab,Y        ; get byte from table
002693  1  96 00                STX     <PLUS_0,Y       ; save byte in page zero
002695  1  88                   DEY                     ; decrement count
002696  1  10 F8                BPL     TabLoop         ; loop if not all done
002698  1               
002698  1               ; set-up start values
002698  1  A9 02                LDA     #DATABANK       ; SET DATA BANK = TO DATA BANK, ALL PROGRAM DATA IN THIS AREA
00269A  1  85 C5                STA     <Bpntrp         ; SET LAB_GBYT PAGE POINTER TO DATA BANK
00269C  1  48                   PHA
00269D  1  AB                   PLB
00269E  1               
00269E  1  A9 00                LDA     #$00            ; clear A
0026A0  1  85 E5                STA     <NmiBase        ; clear NMI handler enabled flag
0026A2  1  85 E8                STA     <IrqBase        ; clear IRQ handler enabled flag
0026A4  1  85 B2                STA     <FAC1_o         ; clear FAC1 overflow byte
0026A6  1  85 67                STA     <last_sh        ; clear descriptor stack top item pointer high byte
0026A8  1               
0026A8  1  A9 0E                LDA     #$0E            ; set default tab size
0026AA  1  85 64                STA     <TabSiz         ; save it
0026AC  1  A9 03                LDA     #$03            ; set garbage collect step size for descriptor stack
0026AE  1  85 A0                STA     <g_step         ; save it
0026B0  1  A2 68                LDX     #<des_sk        ; descriptor stack start
0026B2  1  86 65                STX     <next_s         ; set descriptor stack pointer
0026B4  1               
0026B4  1  A9 00                LDA     #<Ram_top
0026B6  1  A0 FF                LDY     #>Ram_top
0026B8  1  85 85                STA     <Ememl          ; set end of mem low byte
0026BA  1  84 86                STY     <Ememh          ; set end of mem high byte
0026BC  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
0026BE  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
0026C0  1               
0026C0  1  A0 00                LDY     #<Ram_base      ; set start addr low byte
0026C2  1  A2 22                LDX     #>Ram_base      ; set start addr high byte
0026C4  1  84 79                STY     <Smeml          ; save start of mem low byte
0026C6  1  86 7A                STX     <Smemh          ; save start of mem high byte
0026C8  1               
0026C8  1  98                   TYA                     ; clear A
0026C9  1  91 79                STA     (<Smeml),Y      ; clear first byte
0026CB  1  E6 79                INC     <Smeml          ; increment start of mem low byte
0026CD  1               
0026CD  1               ; DO TITLE SCREEN
0026CD  1  20 47 24             JSR     TitleScreen
0026D0  1  20 29 30             JSR     LAB_CRLF        ; print CR/LF
0026D3  1  20 F6 29             JSR     LAB_1463        ; do "NEW" and "CLEAR"
0026D6  1  A5 85                LDA     <Ememl          ; get end of mem low byte
0026D8  1  38                   SEC                     ; set carry for subtract
0026D9  1  E5 79                SBC     <Smeml          ; subtract start of mem low byte
0026DB  1  AA                   TAX                     ; copy to X
0026DC  1  A5 86                LDA     <Ememh          ; get end of mem high byte
0026DE  1  E5 7A                SBC     <Smemh          ; subtract start of mem high byte
0026E0  1  20 8F 47             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
0026E3  1  A9 51                LDA     #<LAB_SMSG      ; point to sign-on message (low addr)
0026E5  1  A0 16                LDY     #>LAB_SMSG      ; point to sign-on message (high addr)
0026E7  1  20 71 30             JSR     LAB_18C3        ; print null terminated string from memory
0026EA  1  A9 EE                LDA     #<LAB_1274      ; warm start vector low byte
0026EC  1  A0 27                LDY     #>LAB_1274      ; warm start vector high byte
0026EE  1  85 01                STA     <Wrmjpl         ; save warm start vector low byte
0026F0  1  84 02                STY     <Wrmjph         ; save warm start vector high byte
0026F2  1  6C 01 00             JMP     (Wrmjpl)        ; go do warm start
0026F5  1               
0026F5  1               ; open up space in memory
0026F5  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
0026F5  1               
0026F5  1               ; <Nbendl,<Nbendh - new block end address (A/Y)
0026F5  1               ; <Obendl,<Obendh - old block end address
0026F5  1               ; <Ostrtl,<Ostrth - old block start address
0026F5  1               
0026F5  1               ; returns with ..
0026F5  1               
0026F5  1               ; <Nbendl,<Nbendh - new block start address (high byte - $100)
0026F5  1               ; <Obendl,<Obendh - old block start address (high byte - $100)
0026F5  1               ; <Ostrtl,<Ostrth - old block start address (unchanged)
0026F5  1               
0026F5  1               LAB_11CF:
0026F5  1  20 9F 27             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
0026F8  1               ; addr to check is in AY (low/high)
0026F8  1  85 7F                STA     <Earryl         ; save new array mem end low byte
0026FA  1  84 80                STY     <Earryh         ; save new array mem end high byte
0026FC  1               
0026FC  1               ; open up space in memory
0026FC  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
0026FC  1               ; don't set array end
0026FC  1               
0026FC  1               LAB_11D6:
0026FC  1  38                   SEC                     ; set carry for subtract
0026FD  1  A5 A6                LDA     <Obendl         ; get block end low byte
0026FF  1  E5 AA                SBC     <Ostrtl         ; subtract block start low byte
002701  1  A8                   TAY                     ; copy MOD(block length/$100) byte to Y
002702  1  A5 A7                LDA     <Obendh         ; get block end high byte
002704  1  E5 AB                SBC     <Ostrth         ; subtract block start high byte
002706  1  AA                   TAX                     ; copy block length high byte to X
002707  1  E8                   INX                     ; +1 to allow for count=0 exit
002708  1  98                   TYA                     ; copy block length low byte to A
002709  1  F0 74                BEQ     LAB_120A        ; branch if length low byte=0
00270B  1               
00270B  1               ; block is (X-1)*256+Y bytes, do the Y bytes first
00270B  1               
00270B  1  38                   SEC                     ; set carry for add + 1, two's complement
00270C  1  49 FF                EOR     #$FF            ; invert low byte for subtract
00270E  1  65 A6                ADC     <Obendl         ; add block end low byte
002710  1               
002710  1  85 A6                STA     <Obendl         ; save corrected old block end low byte
002712  1  B0 03                BCS     LAB_11F3        ; branch if no underflow
002714  1               
002714  1  C6 A7                DEC     <Obendh         ; else decrement block end high byte
002716  1  38                   SEC                     ; set carry for add + 1, two's complement
002717  1               LAB_11F3:
002717  1  98                   TYA                     ; get MOD(block length/$100) byte
002718  1  49 FF                EOR     #$FF            ; invert low byte for subtract
00271A  1  65 A4                ADC     <Nbendl         ; add destination end low byte
00271C  1  85 A4                STA     <Nbendl         ; save modified new block end low byte
00271E  1  B0 30                BCS     LAB_1203        ; branch if no underflow
002720  1               
002720  1  C6 A5                DEC     <Nbendh         ; else decrement block end high byte
002722  1  90 2C                BCC     LAB_1203        ; branch always
002724  1               
002724  1               LAB_11FF:
002724  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
002728  1  B5 A6 C9 00  
00272C  1  D0 04 A2 00  
00273A  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; copy byte to destination
00273E  1  01 B5 A4 C9  
002742  1  00 D0 04 A2  
002750  1               LAB_1203:
002750  1  88                   DEY                     ; decrement index
002751  1  D0 D1                BNE     LAB_11FF        ; loop until Y=0
002753  1               
002753  1               ; now do Y=0 indexed byte
002753  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
002757  1  B5 A6 C9 00  
00275B  1  D0 04 A2 00  
002769  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; save byte to destination
00276D  1  01 B5 A4 C9  
002771  1  00 D0 04 A2  
00277F  1               LAB_120A:
00277F  1  C6 A7                DEC     <Obendh         ; decrement source pointer high byte
002781  1  C6 A5                DEC     <Nbendh         ; decrement destination pointer high byte
002783  1  CA                   DEX                     ; decrement block count
002784  1  D0 CA                BNE     LAB_1203        ; loop until count = $0
002786  1               
002786  1  60                   RTS
002787  1               
002787  1               ; check room on stack for A bytes
002787  1               ; stack too deep? do OM error
002787  1               LAB_1212:
002787  1  C2 20                ACCUMULATOR16
002789  1  29 FF 00             AND     #$00FF
00278C  1  18                   CLC
00278D  1  69 00 B0             ADC     #STACK_BOTTOM
002790  1  85 FD                STA     <TEMPW
002792  1  3B                   TSC
002793  1  C5 FD                CMP     <TEMPW
002795  1  90 03                BCC     LAB_1213        ; if stack < limit do "Out of memory" error then warm start
002797  1  E2 20                ACCUMULATOR8
002799  1  60                   RTS
00279A  1               LAB_1213:
00279A  1  E2 20                ACCUMULATOR8
00279C  1  4C CE 27             JMP     LAB_OMER
00279F  1               
00279F  1               ; check available memory, "Out of memory" error if no room
00279F  1               ; addr to check is in AY (low/high)
00279F  1               
00279F  1               LAB_121F:
00279F  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
0027A1  1  90 2A                BCC     LAB_124B        ; if less then exit (is ok)
0027A3  1               
0027A3  1  D0 04                BNE     LAB_1229        ; skip next test if greater (tested <)
0027A5  1               
0027A5  1               ; high byte was =, now do low byte
0027A5  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
0027A7  1  90 24                BCC     LAB_124B        ; if less then exit (is ok)
0027A9  1               
0027A9  1               ; addr is > string storage ptr (oops!)
0027A9  1               LAB_1229:
0027A9  1  48                   PHA                     ; push addr low byte
0027AA  1  A2 08                LDX     #$08            ; set index to save <Adatal to <expneg inclusive
0027AC  1  98                   TYA                     ; copy addr high byte (to push on stack)
0027AD  1               
0027AD  1               ; save misc numeric work area
0027AD  1               LAB_122D:
0027AD  1  48                   PHA                     ; push byte
0027AE  1  B5 A3                LDA     <Adatal-1,X     ; get byte from <Adatal to <expneg ( ,$00 not pushed)
0027B0  1  CA                   DEX                     ; decrement index
0027B1  1  10 FA                BPL     LAB_122D        ; loop until all done
0027B3  1               
0027B3  1  20 D7 3A             JSR     LAB_GARB        ; garbage collection routine
0027B6  1               
0027B6  1               ; restore misc numeric work area
0027B6  1  A2 00                LDX     #$00            ; clear the index to restore bytes
0027B8  1               LAB_1238:
0027B8  1  68                   PLA                     ; pop byte
0027B9  1  95 A4                STA     <Adatal,X       ; save byte to <Adatal to <expneg
0027BB  1  E8                   INX                     ; increment index
0027BC  1  E0 08                CPX     #$08            ; compare with end + 1
0027BE  1  30 F8                BMI     LAB_1238        ; loop if more to do
0027C0  1               
0027C0  1  68                   PLA                     ; pop addr high byte
0027C1  1  A8                   TAY                     ; copy back to Y
0027C2  1  68                   PLA                     ; pop addr low byte
0027C3  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
0027C5  1  90 06                BCC     LAB_124B        ; if less then exit (is ok)
0027C7  1               
0027C7  1  D0 05                BNE     LAB_OMER        ; if greater do "Out of memory" error then warm start
0027C9  1               
0027C9  1               ; high byte was =, now do low byte
0027C9  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
0027CB  1  B0 01                BCS     LAB_OMER        ; if >= do "Out of memory" error then warm start
0027CD  1               
0027CD  1               ; ok exit, carry clear
0027CD  1               LAB_124B:
0027CD  1  60                   RTS
0027CE  1               
0027CE  1               ; do "Out of memory" error then warm start
0027CE  1               
0027CE  1               LAB_OMER:
0027CE  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
0027D0  1               
0027D0  1               ; do error #X, then warm start
0027D0  1               
0027D0  1               LAB_XERR:
0027D0  1  20 29 30             JSR     LAB_CRLF        ; print CR/LF
0027D3  1               
0027D3  1               ;        LDA     <VIDEOMODE
0027D3  1               ;        CMP     #2
0027D3  1               ;        BEQ     LAB_XERRA
0027D3  1               ;        PHX
0027D3  1               ;        LDX     #2
0027D3  1               ;        JSR     V_SCREEN1
0027D3  1               ;        PLX
0027D3  1               ;LAB_XERRA:
0027D3  1  BD 9F 16             LDA     LAB_BAER,X      ; get error message pointer low byte
0027D6  1  BC A0 16             LDY     LAB_BAER+1,X    ; get error message pointer high byte
0027D9  1  20 71 30             JSR     LAB_18C3        ; print null terminated string from memory
0027DC  1               
0027DC  1  20 2F 2A             JSR     LAB_1491        ; flush stack and clear continue flag
0027DF  1  A9 DC                LDA     #<LAB_EMSG      ; point to " Error" low addr
0027E1  1  A0 17                LDY     #>LAB_EMSG      ; point to " Error" high addr
0027E3  1               LAB_1269:
0027E3  1  20 71 30             JSR     LAB_18C3        ; print null terminated string from memory
0027E6  1  A4 88                LDY     <Clineh         ; get current line high byte
0027E8  1  C8                   INY                     ; increment it
0027E9  1  F0 03                BEQ     LAB_1274        ; go do warm start (was immediate mode)
0027EB  1               
0027EB  1               ; else print line number
0027EB  1  20 84 47             JSR     LAB_2953        ; print " in line [LINE #]"
0027EE  1               
0027EE  1               ; BASIC warm start entry point
0027EE  1               ; wait for Basic command
0027EE  1               
0027EE  1               LAB_1274:
0027EE  1               ;        LDA     <VIDEOMODE
0027EE  1               ;        CMP     #2
0027EE  1               ;        BEQ     LAB_1274a
0027EE  1               ;        LDX     #2
0027EE  1               ;        JSR     V_SCREEN1
0027EE  1               ;LAB_1274a:
0027EE  1               ; clear ON IRQ/NMI bytes
0027EE  1  A9 00                LDA     #$00            ; clear A
0027F0  1  85 E8                STA     <IrqBase        ; clear enabled byte
0027F2  1  85 E5                STA     <NmiBase        ; clear enabled byte
0027F4  1  A9 ED                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0027F6  1  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0027F8  1               
0027F8  1  20 71 30             JSR     LAB_18C3        ; go do print string
0027FB  1               
0027FB  1               ; wait for Basic command (no "Ready")
0027FB  1               
0027FB  1               LAB_127D:
0027FB  1  20 E0 28             JSR     LAB_1357        ; call for BASIC input
0027FE  1               LAB_1280:
0027FE  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002800  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002802  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002806  1  F0 F3                BEQ     LAB_127D        ; loop while null
002808  1               
002808  1               ; got to interpret input line now ..
002808  1               
002808  1  A2 FF                LDX     #$FF            ; current line to null value
00280A  1  86 88                STX     <Clineh         ; set current line high byte
00280C  1  90 06                BCC     LAB_1295        ; branch if numeric character (handle new BASIC line)
00280E  1               
00280E  1               ; no line number .. immediate mode
00280E  1  20 21 29             JSR     LAB_13A6        ; crunch keywords into Basic tokens
002811  1  4C A4 2B             JMP     LAB_15F6        ; go scan and interpret code
002814  1               
002814  1               ; handle new BASIC line
002814  1               
002814  1               LAB_1295:
002814  1               
002814  1  20 0A 2E             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002817  1  20 21 29             JSR     LAB_13A6        ; crunch keywords into Basic tokens
00281A  1  84 5D                STY     <Ibptr          ; save index pointer to end of crunched line
00281C  1  20 CA 29             JSR     LAB_SSLN        ; search BASIC for temp integer line number
00281F  1  90 44                BCC     LAB_12E6        ; branch if not found
002821  1               
002821  1               ; aroooogah! line # already exists! delete it
002821  1  A0 01                LDY     #$01            ; set index to next line pointer high byte
002823  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002825  1  85 72                STA     <ut1_ph         ; save it
002827  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
002829  1  85 71                STA     <ut1_pl         ; save it
00282B  1  A5 AB                LDA     <Baslnh         ; get found line pointer high byte
00282D  1  85 74                STA     <ut2_ph         ; save it
00282F  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
002831  1  88                   DEY                     ; decrement index
002832  1  F1 AA                SBC     (<Baslnl),Y     ; subtract next line pointer low byte
002834  1  18                   CLC                     ; clear carry for add
002835  1  65 7B                ADC     <Svarl          ; add start of vars low byte
002837  1  85 7B                STA     <Svarl          ; save new start of vars low byte
002839  1  85 73                STA     <ut2_pl         ; save destination pointer low byte
00283B  1  A5 7C                LDA     <Svarh          ; get start of vars high byte
00283D  1  69 FF                ADC     #$FF            ; -1 + carry
00283F  1  85 7C                STA     <Svarh          ; save start of vars high byte
002841  1  E5 AB                SBC     <Baslnh         ; subtract found line pointer high byte
002843  1  AA                   TAX                     ; copy to block count
002844  1  38                   SEC                     ; set carry for subtract
002845  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
002847  1  E5 7B                SBC     <Svarl          ; subtract start of vars low byte
002849  1  A8                   TAY                     ; copy to bytes in first block count
00284A  1  B0 03                BCS     LAB_12D0        ; branch if overflow
00284C  1               
00284C  1  E8                   INX                     ; increment block count (correct for =0 loop exit)
00284D  1  C6 74                DEC     <ut2_ph         ; decrement destination high byte
00284F  1               LAB_12D0:
00284F  1  18                   CLC                     ; clear carry for add
002850  1  65 71                ADC     <ut1_pl         ; add source pointer low byte
002852  1  90 03                BCC     LAB_12D8        ; branch if no overflow
002854  1               
002854  1  C6 72                DEC     <ut1_ph         ; else decrement source pointer high byte
002856  1  18                   CLC                     ; clear carry
002857  1               
002857  1               ; close up memory to delete old line
002857  1               LAB_12D8:
002857  1  B1 71                LDA     (<ut1_pl),Y     ; get byte from source
002859  1  91 73                STA     (<ut2_pl),Y     ; copy to destination
00285B  1  C8                   INY                     ; increment index
00285C  1  D0 F9                BNE     LAB_12D8        ; while <> 0 do this block
00285E  1               
00285E  1  E6 72                INC     <ut1_ph         ; increment source pointer high byte
002860  1  E6 74                INC     <ut2_ph         ; increment destination pointer high byte
002862  1  CA                   DEX                     ; decrement block count
002863  1  D0 F2                BNE     LAB_12D8        ; loop until all done
002865  1               
002865  1               ; got new line in buffer and no existing same #
002865  1               LAB_12E6:
002865  1  AD 81 21             LDA     Ibuffs          ; get byte from start of input buffer
002868  1  F0 3F                BEQ     LAB_1319        ; if null line just go flush stack/vars and exit
00286A  1               
00286A  1               ; got new line and it isn't empty line
00286A  1  A5 85                LDA     <Ememl          ; get end of mem low byte
00286C  1  A4 86                LDY     <Ememh          ; get end of mem high byte
00286E  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
002870  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002872  1  A5 7B                LDA     <Svarl          ; get start of vars low byte	(end of BASIC)
002874  1  85 A6                STA     <Obendl         ; save old block end low byte
002876  1  A4 7C                LDY     <Svarh          ; get start of vars high byte	(end of BASIC)
002878  1  84 A7                STY     <Obendh         ; save old block end high byte
00287A  1  65 5D                ADC     <Ibptr          ; add input buffer pointer	(also buffer length)
00287C  1  90 01                BCC     LAB_1301        ; branch if no overflow from add
00287E  1               
00287E  1  C8                   INY                     ; else increment high byte
00287F  1               LAB_1301:
00287F  1  85 A4                STA     <Nbendl         ; save new block end low byte	(move to, low byte)
002881  1  84 A5                STY     <Nbendh         ; save new block end high byte
002883  1  20 F5 26             JSR     LAB_11CF        ; open up space in memory
002886  1               ; old start pointer <Ostrtl,<Ostrth set by the find line call
002886  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
002888  1  A4 80                LDY     <Earryh         ; get array mem end high byte
00288A  1  85 7B                STA     <Svarl          ; save start of vars low byte
00288C  1  84 7C                STY     <Svarh          ; save start of vars high byte
00288E  1  A4 5D                LDY     <Ibptr          ; get input buffer pointer	(also buffer length)
002890  1  88                   DEY                     ; adjust for loop type
002891  1               LAB_1311:
002891  1  B9 7D 21             LDA     Ibuffs-4,Y      ; get byte from crunched line
002894  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002896  1  88                   DEY                     ; decrement count
002897  1  C0 03                CPY     #$03            ; compare with first byte-1
002899  1  D0 F6                BNE     LAB_1311        ; continue while count <> 3
00289B  1               
00289B  1  A5 12                LDA     <Itemph         ; get line # high byte
00289D  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
00289F  1  88                   DEY                     ; decrement count
0028A0  1  A5 11                LDA     <Itempl         ; get line # low byte
0028A2  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
0028A4  1  88                   DEY                     ; decrement count
0028A5  1  A9 FF                LDA     #$FF            ; set byte to allow chain rebuild. if you didn't set this
0028A7  1               ; byte then a zero already here would stop the chain rebuild
0028A7  1               ; as it would think it was the [EOT] marker.
0028A7  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
0028A9  1               
0028A9  1               LAB_1319:
0028A9  1  20 0B 2A             JSR     LAB_1477        ; reset execution to start, clear vars and flush stack
0028AC  1  A6 79                LDX     <Smeml          ; get start of mem low byte
0028AE  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
0028B0  1  A0 01                LDY     #$01            ; index to high byte of next line pointer
0028B2  1               LAB_1325:
0028B2  1  86 71                STX     <ut1_pl         ; set line start pointer low byte
0028B4  1  85 72                STA     <ut1_ph         ; set line start pointer high byte
0028B6  1  B1 71                LDA     (<ut1_pl),Y     ; get it
0028B8  1  F0 18                BEQ     LAB_133E        ; exit if end of program
0028BA  1               
0028BA  1               ; rebuild chaining of Basic lines
0028BA  1               
0028BA  1  A0 04                LDY     #$04            ; point to first code byte of line
0028BC  1               ; there is always 1 byte + [EOL] as null entries are deleted
0028BC  1               LAB_1330:
0028BC  1  C8                   INY                     ; next code byte
0028BD  1  B1 71                LDA     (<ut1_pl),Y     ; get byte
0028BF  1  D0 FB                BNE     LAB_1330        ; loop if not [EOL]
0028C1  1               
0028C1  1  38                   SEC                     ; set carry for add + 1
0028C2  1  98                   TYA                     ; copy end index
0028C3  1  65 71                ADC     <ut1_pl         ; add to line start pointer low byte
0028C5  1  AA                   TAX                     ; copy to X
0028C6  1  A0 00                LDY     #$00            ; clear index, point to this line's next line pointer
0028C8  1  91 71                STA     (<ut1_pl),Y     ; set next line pointer low byte
0028CA  1  98                   TYA                     ; clear A
0028CB  1  65 72                ADC     <ut1_ph         ; add line start pointer high byte + carry
0028CD  1  C8                   INY                     ; increment index to high byte
0028CE  1  91 71                STA     (<ut1_pl),Y     ; save next line pointer low byte
0028D0  1  90 E0                BCC     LAB_1325        ; go do next line, branch always, carry clear
0028D2  1               
0028D2  1               
0028D2  1               LAB_133E:
0028D2  1  4C FB 27             JMP     LAB_127D        ; else we just wait for Basic command, no "Ready"
0028D5  1               
0028D5  1               ; print "? " and get BASIC input
0028D5  1               
0028D5  1               LAB_INLN:
0028D5  1               ;JSR	LAB_18E3		; print "?" character
0028D5  1  20 9A 30             JSR     LAB_18E0        ; print " "
0028D8  1  D0 18                BNE     SimpleSerialEditor; call for BASIC input and return
0028DA  1               
0028DA  1               ; receive line from keyboard
0028DA  1               
0028DA  1               ; $08 as delete key (BACKSPACE on standard keyboard)
0028DA  1               LAB_134B:
0028DA  1  20 9F 30             JSR     LAB_PRNA        ; go print the character
0028DD  1  CA                   DEX                     ; decrement the buffer counter (delete)
0028DE  1  80 14                BRA     LAB_1359
0028E0  1               
0028E0  1               ; call for BASIC input (main entry point)
0028E0  1               LAB_1357:
0028E0  1  AF 41 03 00          LDA     f:ConsoleDevice
0028E4  1  C9 00                CMP     #$00
0028E6  1  F0 0A                BEQ     SimpleSerialEditor
0028E8  1               ;	do screen editor
0028E8  1  20 70 24             JSR     ScreenEditor
0028EB  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
0028ED  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
0028EF  1  A9 00                LDA     #$00
0028F1  1  60                   RTS
0028F2  1               
0028F2  1               SimpleSerialEditor:
0028F2  1  A2 00                LDX     #$00            ; clear BASIC line buffer pointer
0028F4  1               LAB_1359:
0028F4  1  20 D3 18             JSR     V_INPT          ; call scan input device
0028F7  1  B0 FB                BCS     LAB_1359        ; loop if no byte
0028F9  1               ;BEQ	LAB_1359		; loop until valid input (ignore NULLs)
0028F9  1               
0028F9  1  C9 07                CMP     #$07            ; compare with [BELL]
0028FB  1  F0 10                BEQ     LAB_1378        ; branch if [BELL]
0028FD  1               
0028FD  1  C9 0D                CMP     #$0D            ; compare with [CR]
0028FF  1  F0 19                BEQ     LAB_1384        ; do CR/LF exit if [CR]
002901  1               
002901  1  E0 00                CPX     #$00            ; compare pointer with $00
002903  1  D0 04                BNE     LAB_1374        ; branch if not empty
002905  1               
002905  1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
002905  1               
002905  1  C9 21                CMP     #$21            ; compare with [SP]+1
002907  1  90 EB                BCC     LAB_1359        ; if < ignore character
002909  1               
002909  1               LAB_1374:
002909  1  C9 08                CMP     #$08            ; compare with [BACKSPACE] (delete last character)
00290B  1  F0 CD                BEQ     LAB_134B        ; go delete last character
00290D  1               
00290D  1               LAB_1378:
00290D  1  E0 50                CPX     #Ibuffe-Ibuffs  ; compare character count with max
00290F  1  B0 0C                BCS     LAB_138E        ; skip store and do [BELL] if buffer full
002911  1               
002911  1  9D 81 21             STA     Ibuffs,X        ; else store in buffer
002914  1  E8                   INX                     ; increment pointer
002915  1               LAB_137F:
002915  1  20 9F 30             JSR     LAB_PRNA        ; go print the character
002918  1  D0 DA                BNE     LAB_1359        ; always loop for next character
00291A  1               
00291A  1               LAB_1384:
00291A  1  4C 20 30             JMP     LAB_1866        ; do CR/LF exit to BASIC
00291D  1               
00291D  1               ; announce buffer full
00291D  1               
00291D  1               LAB_138E:
00291D  1  A9 07                LDA     #$07            ; [BELL] character into A
00291F  1  D0 F4                BNE     LAB_137F        ; go print the [BELL] but ignore input character
002921  1               ; branch always
002921  1               
002921  1               ; crunch keywords into Basic tokens
002921  1               ; position independent buffer version ..
002921  1               ; faster, dictionary search version ....
002921  1               
002921  1               LAB_13A6:
002921  1  A0 FF                LDY     #$FF            ; set save index (makes for easy math later)
002923  1               
002923  1  38                   SEC                     ; set carry for subtract
002924  1  A5 C3                LDA     <Bpntrl         ; get basic execute pointer low byte
002926  1  E9 81                SBC     #<Ibuffs        ; subtract input buffer start pointer
002928  1  AA                   TAX                     ; copy result to X (index past line # if any)
002929  1               
002929  1  86 60                STX     <Oquote         ; clear open quote/DATA flag
00292B  1               LAB_13AC:
00292B  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
00292E  1  F0 51                BEQ     LAB_13EC        ; if null save byte then exit
002930  1               
002930  1  C9 5F                CMP     #'_'            ; compare with "_"
002932  1  B0 4D                BCS     LAB_13EC        ; if >= go save byte then continue crunching
002934  1               
002934  1  C9 3C                CMP     #'<'            ; compare with "<"
002936  1  B0 0E                BCS     LAB_13CC        ; if >= go crunch now
002938  1               
002938  1  C9 30                CMP     #'0'            ; compare with "0"
00293A  1  B0 45                BCS     LAB_13EC        ; if >= go save byte then continue crunching
00293C  1               
00293C  1  85 5C                STA     <Scnquo         ; save buffer byte as search character
00293E  1  C9 22                CMP     #$22            ; is it quote character?
002940  1  F0 64                BEQ     LAB_1410        ; branch if so (copy quoted string)
002942  1               
002942  1  C9 2A                CMP     #'*'            ; compare with "*"
002944  1  90 3B                BCC     LAB_13EC        ; if < go save byte then continue crunching
002946  1               
002946  1               ; else crunch now
002946  1               LAB_13CC:
002946  1  24 60                BIT     <Oquote         ; get open quote/DATA token flag
002948  1  70 37                BVS     LAB_13EC        ; branch if b6 of <Oquote set (was DATA)
00294A  1               ; go save byte then continue crunching
00294A  1               
00294A  1  86 78                STX     <TempB          ; save buffer read index
00294C  1  84 BA                STY     <csidx          ; copy buffer save index
00294E  1  A0 7F                LDY     #<TAB_1STC      ; get keyword first character table low address
002950  1  84 73                STY     <ut2_pl         ; save pointer low byte
002952  1  A0 11                LDY     #>TAB_1STC      ; get keyword first character table high address
002954  1  84 74                STY     <ut2_ph         ; save pointer high byte
002956  1  A0 00                LDY     #$00            ; clear table pointer
002958  1               
002958  1               LAB_13D0:
002958  1  D1 73                CMP     (<ut2_pl),Y     ; compare with keyword first character table byte
00295A  1  F0 05                BEQ     LAB_13D1        ; go do word_table_chr if match
00295C  1               
00295C  1  90 21                BCC     LAB_13EA        ; if < keyword first character table byte go restore
00295E  1               ; Y and save to crunched
00295E  1               
00295E  1  C8                   INY                     ; else increment pointer
00295F  1  D0 F7                BNE     LAB_13D0        ; and loop (branch always)
002961  1               
002961  1               ; have matched first character of some keyword
002961  1               
002961  1               LAB_13D1:
002961  1  98                   TYA                     ; copy matching index
002962  1  0A                   ASL     A               ; *2 (bytes per pointer)
002963  1  AA                   TAX                     ; copy to new index
002964  1  BD 9F 11             LDA     TAB_CHRT,X      ; get keyword table pointer low byte
002967  1  85 73                STA     <ut2_pl         ; save pointer low byte
002969  1  BD A0 11             LDA     TAB_CHRT+1,X    ; get keyword table pointer high byte
00296C  1  85 74                STA     <ut2_ph         ; save pointer high byte
00296E  1               
00296E  1  A0 FF                LDY     #$FF            ; clear table pointer (make -1 for start)
002970  1               
002970  1  A6 78                LDX     <TempB          ; restore buffer read index
002972  1               
002972  1               LAB_13D6:
002972  1  C8                   INY                     ; next table byte
002973  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from table
002975  1               LAB_13D8:
002975  1  30 08                BMI     LAB_13EA        ; all bytes matched so go save token
002977  1               
002977  1  E8                   INX                     ; next buffer byte
002978  1  DD 81 21             CMP     Ibuffs,X        ; compare with byte from input buffer
00297B  1  F0 F5                BEQ     LAB_13D6        ; go compare next if match
00297D  1               
00297D  1  D0 2E                BNE     LAB_1417        ; branch if >< (not found keyword)
00297F  1               
00297F  1               LAB_13EA:
00297F  1  A4 BA                LDY     <csidx          ; restore save index
002981  1               
002981  1               ; save crunched to output
002981  1               LAB_13EC:
002981  1  E8                   INX                     ; increment buffer index (to next input byte)
002982  1  C8                   INY                     ; increment save index (to next output byte)
002983  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
002986  1  C9 00                CMP     #$00            ; set the flags, set carry
002988  1  F0 35                BEQ     LAB_142A        ; do exit if was null [EOL]
00298A  1               
00298A  1               ; A holds token or byte here
00298A  1  E9 3A                SBC     #':'            ; subtract ":" (carry set by CMP #00)
00298C  1  F0 04                BEQ     LAB_13FF        ; branch if it was ":" (is now $00)
00298E  1               
00298E  1               ; A now holds token-$3A
00298E  1  C9 49                CMP     #TK_DATA-$3A    ; compare with DATA token - $3A
002990  1  D0 02                BNE     LAB_1401        ; branch if not DATA
002992  1               
002992  1               ; token was : or DATA
002992  1               LAB_13FF:
002992  1  85 60                STA     <Oquote         ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
002994  1               LAB_1401:
002994  1  49 57                EOR     #TK_REM-$3A     ; effectively subtract REM token offset
002996  1  F0 03                BEQ     LAB_1401_A
002998  1  4C 2B 29             JMP     LAB_13AC        ; If wasn't REM then go crunch rest of line
00299B  1               
00299B  1               LAB_1401_A:
00299B  1  85 5C                STA     <Asrch          ; else was REM so set search for [EOL]
00299D  1               
00299D  1               ; loop for REM, "..." etc.
00299D  1               LAB_1408:
00299D  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
0029A0  1  F0 DF                BEQ     LAB_13EC        ; branch if null [EOL]
0029A2  1               
0029A2  1  C5 5C                CMP     <Asrch          ; compare with stored character
0029A4  1  F0 DB                BEQ     LAB_13EC        ; branch if match (end quote)
0029A6  1               
0029A6  1               ; entry for copy string in quotes, don't crunch
0029A6  1               LAB_1410:
0029A6  1  C8                   INY                     ; increment buffer save index
0029A7  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
0029AA  1  E8                   INX                     ; increment buffer read index
0029AB  1  D0 F0                BNE     LAB_1408        ; loop while <> 0 (should never be 0!)
0029AD  1               
0029AD  1               ; not found keyword this go
0029AD  1               LAB_1417:
0029AD  1  A6 78                LDX     <TempB          ; compare has failed, restore buffer index (start byte!)
0029AF  1               
0029AF  1               ; now find the end of this word in the table
0029AF  1               LAB_141B:
0029AF  1  B1 73                LDA     (<ut2_pl),Y     ; get table byte
0029B1  1  08                   PHP                     ; save status
0029B2  1  C8                   INY                     ; increment table index
0029B3  1  28                   PLP                     ; restore byte status
0029B4  1  10 F9                BPL     LAB_141B        ; if not end of keyword go do next
0029B6  1               
0029B6  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from keyword table
0029B8  1  D0 BB                BNE     LAB_13D8        ; go test next word if not zero byte (end of table)
0029BA  1               
0029BA  1               ; reached end of table with no match
0029BA  1  BD 81 21             LDA     Ibuffs,X        ; restore byte from input buffer
0029BD  1  10 C0                BPL     LAB_13EA        ; branch always (all bytes in buffer are $00-$7F)
0029BF  1               ; go save byte in output and continue crunching
0029BF  1               
0029BF  1               ; reached [EOL]
0029BF  1               LAB_142A:
0029BF  1  C8                   INY                     ; increment pointer
0029C0  1  C8                   INY                     ; increment pointer (makes it next line pointer high byte)
0029C1  1  99 81 21             STA     Ibuffs,Y        ; save [EOL] (marks [EOT] in immediate mode)
0029C4  1  C8                   INY                     ; adjust for line copy
0029C5  1  C8                   INY                     ; adjust for line copy
0029C6  1  C8                   INY                     ; adjust for line copy
0029C7  1  C6 C3                DEC     <Bpntrl         ; allow for increment (change if buffer starts at $xxFF)
0029C9  1  60                   RTS
0029CA  1               
0029CA  1               ; search Basic for temp integer line number from start of mem
0029CA  1               
0029CA  1               LAB_SSLN:
0029CA  1  A5 79                LDA     <Smeml          ; get start of mem low byte
0029CC  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
0029CE  1               
0029CE  1               ; search Basic for temp integer line number from AX
0029CE  1               ; returns carry set if found
0029CE  1               ; returns <Baslnl/<Baslnh pointer to found or next higher (not found) line
0029CE  1               
0029CE  1               ; old 541 new 507
0029CE  1               
0029CE  1               LAB_SHLN:
0029CE  1  A0 01                LDY     #$01            ; set index
0029D0  1  85 AA                STA     <Baslnl         ; save low byte as current
0029D2  1  86 AB                STX     <Baslnh         ; save high byte as current
0029D4  1  B1 AA                LDA     (<Baslnl),Y     ; get pointer high byte from addr
0029D6  1  F0 1A                BEQ     LAB_145F        ; pointer was zero so we're done, do 'not found' exit
0029D8  1               
0029D8  1  A0 03                LDY     #$03            ; set index to line # high byte
0029DA  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
0029DC  1  88                   DEY                     ; decrement index (point to low byte)
0029DD  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
0029DF  1  D0 04                BNE     LAB_1455        ; if <> skip low byte check
0029E1  1               
0029E1  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
0029E3  1  C5 11                CMP     <Itempl         ; compare with temporary integer low byte
0029E5  1               LAB_1455:
0029E5  1  B0 09                BCS     LAB_145E        ; else if temp < this line, exit (passed line#)
0029E7  1               
0029E7  1               LAB_1456:
0029E7  1  88                   DEY                     ; decrement index to next line ptr high byte
0029E8  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0029EA  1  AA                   TAX                     ; copy to X
0029EB  1  88                   DEY                     ; decrement index to next line ptr low byte
0029EC  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
0029EE  1  90 DE                BCC     LAB_SHLN        ; go search for line # in temp (<Itempl/<Itemph) from AX
0029F0  1               ; (carry always clear)
0029F0  1               
0029F0  1               LAB_145E:
0029F0  1  F0 01                BEQ     LAB_1460        ; exit if temp = found line #, carry is set
0029F2  1               
0029F2  1               LAB_145F:
0029F2  1  18                   CLC                     ; clear found flag
0029F3  1               LAB_1460:
0029F3  1  60                   RTS
0029F4  1               
0029F4  1               ; perform NEW
0029F4  1               
0029F4  1               LAB_NEW:
0029F4  1  D0 FD                BNE     LAB_1460        ; exit if not end of statement (to do syntax error)
0029F6  1               
0029F6  1               LAB_1463:
0029F6  1  A9 00                LDA     #$00            ; clear A
0029F8  1  A8                   TAY                     ; clear Y
0029F9  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, low byte
0029FB  1  C8                   INY                     ; increment index
0029FC  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, high byte
0029FE  1  18                   CLC                     ; clear carry
0029FF  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002A01  1  69 02                ADC     #$02            ; calculate end of BASIC low byte
002A03  1  85 7B                STA     <Svarl          ; save start of vars low byte
002A05  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002A07  1  69 00                ADC     #$00            ; add any carry
002A09  1  85 7C                STA     <Svarh          ; save start of vars high byte
002A0B  1               
002A0B  1               ; reset execution to start, clear vars and flush stack
002A0B  1               
002A0B  1               LAB_1477:
002A0B  1  18                   CLC                     ; clear carry
002A0C  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002A0E  1  69 FF                ADC     #$FF            ; -1
002A10  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002A12  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002A14  1  69 FF                ADC     #$FF            ; -1+carry
002A16  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002A18  1               ; "CLEAR" command gets here
002A18  1               
002A18  1               LAB_147A:
002A18  1  A5 85                LDA     <Ememl          ; get end of mem low byte
002A1A  1  A4 86                LDY     <Ememh          ; get end of mem high byte
002A1C  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
002A1E  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002A20  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
002A22  1  A4 7C                LDY     <Svarh          ; get start of vars high byte
002A24  1  85 7D                STA     <Sarryl         ; save var mem end low byte
002A26  1  84 7E                STY     <Sarryh         ; save var mem end high byte
002A28  1  85 7F                STA     <Earryl         ; save array mem end low byte
002A2A  1  84 80                STY     <Earryh         ; save array mem end high byte
002A2C  1  20 F8 2B             JSR     LAB_161A        ; perform RESTORE command
002A2F  1               
002A2F  1               ; flush stack and clear continue flag
002A2F  1               
002A2F  1               LAB_1491:
002A2F  1  A2 68                LDX     #<des_sk        ; set descriptor stack pointer
002A31  1  86 65                STX     <next_s         ; save descriptor stack pointer
002A33  1  C2 30                ACCUMULATORINDEX16
002A35  1  FA                   PLX                     ; pull return address low byte
002A36  1  A9 FF BF             LDA     #STACK          ; get the stack address
002A39  1  1B                   TCS                     ; and set the stack to it
002A3A  1  DA                   PHX
002A3B  1  E2 30                ACCUMULATORINDEX8
002A3D  1  A9 00                LDA     #$00            ; clear byte
002A3F  1  85 8C                STA     <Cpntrh         ; clear continue pointer high byte
002A41  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
002A43  1               LAB_14A6:
002A43  1  60                   RTS
002A44  1               
002A44  1               ; perform CLEAR
002A44  1               
002A44  1               LAB_CLEAR:
002A44  1  F0 D2                BEQ     LAB_147A        ; if no following token go do "CLEAR"
002A46  1               
002A46  1               ; else there was a following token (go do syntax error)
002A46  1  60                   RTS
002A47  1               
002A47  1               ; perform LIST [n][-m]
002A47  1               ; bigger, faster version (a _lot_ faster)
002A47  1               
002A47  1               LAB_LIST:
002A47  1  90 06                BCC     LAB_14BD        ; branch if next character numeric (LIST n..)
002A49  1               
002A49  1  F0 04                BEQ     LAB_14BD        ; branch if next character [NULL] (LIST)
002A4B  1               
002A4B  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
002A4D  1  D0 F4                BNE     LAB_14A6        ; exit if not - (LIST -m)
002A4F  1               
002A4F  1               ; LIST [[n][-m]]
002A4F  1               ; this bit sets the n , if present, as the start and end
002A4F  1               LAB_14BD:
002A4F  1  20 0A 2E             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002A52  1  20 CA 29             JSR     LAB_SSLN        ; search BASIC for temp integer line number
002A55  1               ; (pointer in <Baslnl/<Baslnh)
002A55  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002A59  1  F0 0D                BEQ     LAB_14D4        ; branch if no more characters
002A5B  1               
002A5B  1               ; this bit checks the - is present
002A5B  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
002A5D  1  D0 61                BNE     LAB_152B        ; return if not "-" (will be Syntax error)
002A5F  1               
002A5F  1               ; LIST [n]-m
002A5F  1               ; the - was there so set m as the end value
002A5F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002A63  1  20 0A 2E             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002A66  1  D0 58                BNE     LAB_152B        ; exit if not ok
002A68  1               
002A68  1               LAB_14D4:
002A68  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
002A6A  1  05 12                ORA     <Itemph         ; OR temporary integer high byte
002A6C  1  D0 06                BNE     LAB_14E2        ; branch if start set
002A6E  1               
002A6E  1  A9 FF                LDA     #$FF            ; set for -1
002A70  1  85 11                STA     <Itempl         ; set temporary integer low byte
002A72  1  85 12                STA     <Itemph         ; set temporary integer high byte
002A74  1               LAB_14E2:
002A74  1  A0 01                LDY     #$01            ; set index for line
002A76  1  84 60                STY     <Oquote         ; clear open quote flag
002A78  1  20 29 30             JSR     LAB_CRLF        ; print CR/LF
002A7B  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002A7D  1               ; pointer initially set by search at LAB_14BD
002A7D  1  F0 41                BEQ     LAB_152B        ; if null all done so exit
002A7F  1  20 C8 2B             JSR     LAB_1629        ; do CRTL-C check vector
002A82  1               
002A82  1  C8                   INY                     ; increment index for line
002A83  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
002A85  1  AA                   TAX                     ; copy to X
002A86  1  C8                   INY                     ; increment index
002A87  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
002A89  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002A8B  1  D0 04                BNE     LAB_14FF        ; branch if no high byte match
002A8D  1               
002A8D  1  E4 11                CPX     <Itempl         ; compare with temporary integer low byte
002A8F  1  F0 02                BEQ     LAB_1501        ; branch if = last line to do (< will pass next branch)
002A91  1               
002A91  1               LAB_14FF:                       ; else ..
002A91  1  B0 2D                BCS     LAB_152B        ; if greater all done so exit
002A93  1               
002A93  1               LAB_1501:
002A93  1  84 97                STY     <Tidx1          ; save index for line
002A95  1  20 8F 47             JSR     LAB_295E        ; print XA as unsigned integer
002A98  1  A9 20                LDA     #$20            ; space is the next character
002A9A  1               LAB_1508:
002A9A  1  A4 97                LDY     <Tidx1          ; get index for line
002A9C  1  29 7F                AND     #$7F            ; mask top out bit of character
002A9E  1               LAB_150C:
002A9E  1  20 9F 30             JSR     LAB_PRNA        ; go print the character
002AA1  1  C9 22                CMP     #$22            ; was it " character
002AA3  1  D0 06                BNE     LAB_1519        ; branch if not
002AA5  1               
002AA5  1               ; we are either entering or leaving a pair of quotes
002AA5  1  A5 60                LDA     <Oquote         ; get open quote flag
002AA7  1  49 FF                EOR     #$FF            ; toggle it
002AA9  1  85 60                STA     <Oquote         ; save it back
002AAB  1               LAB_1519:
002AAB  1  C8                   INY                     ; increment index
002AAC  1  B1 AA                LDA     (<Baslnl),Y     ; get next byte
002AAE  1  D0 11                BNE     LAB_152E        ; branch if not [EOL] (go print character)
002AB0  1  A8                   TAY                     ; else clear index
002AB1  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
002AB3  1  AA                   TAX                     ; copy to X
002AB4  1  C8                   INY                     ; increment index
002AB5  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002AB7  1  86 AA                STX     <Baslnl         ; set pointer to line low byte
002AB9  1  85 AB                STA     <Baslnh         ; set pointer to line high byte
002ABB  1  F0 03                BEQ     LAB_152B
002ABD  1  4C 74 2A             JMP     LAB_14E2        ; go do next line if not [EOT]
002AC0  1               
002AC0  1               ; else ..
002AC0  1               LAB_152B:
002AC0  1  60                   RTS
002AC1  1               
002AC1  1               LAB_152E:
002AC1  1  10 DB                BPL     LAB_150C        ; just go print it if not token byte
002AC3  1               
002AC3  1               ; else was token byte so uncrunch it (maybe)
002AC3  1  24 60                BIT     <Oquote         ; test the open quote flag
002AC5  1  30 D7                BMI     LAB_150C        ; just go print character if open quote set
002AC7  1               
002AC7  1  A2 14                LDX     #>LAB_KEYT      ; get table address high byte
002AC9  1  0A                   ASL     A               ; *2
002ACA  1  0A                   ASL     A               ; *4
002ACB  1  90 02                BCC     LAB_152F        ; branch if no carry
002ACD  1               
002ACD  1  E8                   INX                     ; else increment high byte
002ACE  1  18                   CLC                     ; clear carry for add
002ACF  1               LAB_152F:
002ACF  1  69 12                ADC     #<LAB_KEYT      ; add low byte
002AD1  1  90 01                BCC     LAB_1530        ; branch if no carry
002AD3  1               
002AD3  1  E8                   INX                     ; else increment high byte
002AD4  1               LAB_1530:
002AD4  1  85 73                STA     <ut2_pl         ; save table pointer low byte
002AD6  1  86 74                STX     <ut2_ph         ; save table pointer high byte
002AD8  1  84 97                STY     <Tidx1          ; save index for line
002ADA  1  A0 00                LDY     #$00            ; clear index
002ADC  1  B1 73                LDA     (<ut2_pl),Y     ; get length
002ADE  1  AA                   TAX                     ; copy length
002ADF  1  C8                   INY                     ; increment index
002AE0  1  B1 73                LDA     (<ut2_pl),Y     ; get 1st character
002AE2  1  CA                   DEX                     ; decrement length
002AE3  1  D0 03                BNE     LAB_1508_A
002AE5  1  4C 9A 2A             JMP     LAB_1508        ; if no more characters exit and print
002AE8  1               LAB_1508_A:
002AE8  1  20 9F 30             JSR     LAB_PRNA        ; go print the character
002AEB  1  C8                   INY                     ; increment index
002AEC  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address low byte
002AEE  1  48                   PHA                     ; save it for now
002AEF  1  C8                   INY                     ; increment index
002AF0  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address high byte
002AF2  1  A0 00                LDY     #$00
002AF4  1  85 74                STA     <ut2_ph         ; save keyword pointer high byte
002AF6  1  68                   PLA                     ; pull low byte
002AF7  1  85 73                STA     <ut2_pl         ; save keyword pointer low byte
002AF9  1               LAB_1540:
002AF9  1  B1 73                LDA     (<ut2_pl),Y     ; get character
002AFB  1  CA                   DEX                     ; decrement character count
002AFC  1  D0 03                BNE     LAB_1508_B
002AFE  1  4C 9A 2A             JMP     LAB_1508        ; if last character exit and print
002B01  1               LAB_1508_B:
002B01  1  20 9F 30             JSR     LAB_PRNA        ; go print the character
002B04  1  C8                   INY                     ; increment index
002B05  1  D0 F2                BNE     LAB_1540        ; loop for next character
002B07  1               
002B07  1               ; perform FOR
002B07  1               
002B07  1               LAB_FOR:
002B07  1  A9 80                LDA     #$80            ; set FNX
002B09  1  85 61                STA     <Sufnxf         ; set subscript/FNX flag
002B0B  1  20 6C 2E             JSR     LAB_LET         ; go do LET
002B0E  1  68                   PLA                     ; pull return address
002B0F  1  68                   PLA                     ; pull return address
002B10  1  A9 10                LDA     #$10            ; we need 16d bytes !
002B12  1  20 87 27             JSR     LAB_1212        ; check room on stack for A bytes
002B15  1  20 58 2D             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002B18  1  18                   CLC                     ; clear carry for add
002B19  1  98                   TYA                     ; copy index to A
002B1A  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002B1C  1  48                   PHA                     ; push onto stack
002B1D  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002B1F  1  69 00                ADC     #$00            ; add carry
002B21  1  48                   PHA                     ; push onto stack
002B22  1  A5 88                LDA     <Clineh         ; get current line high byte
002B24  1  48                   PHA                     ; push onto stack
002B25  1  A5 87                LDA     <Clinel         ; get current line low byte
002B27  1  48                   PHA                     ; push onto stack
002B28  1  A9 BE                LDA     #TK_TO          ; get "TO" token
002B2A  1  20 01 34             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
002B2D  1  20 DD 32             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
002B30  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002B33  1               ; else do type mismatch
002B33  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
002B35  1  09 7F                ORA     #$7F            ; set all non sign bits
002B37  1  25 AD                AND     <FAC1_1         ; and FAC1 mantissa1
002B39  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
002B3B  1  A9 46                LDA     #<LAB_159F      ; set return address low byte
002B3D  1  A0 2B                LDY     #>LAB_159F      ; set return address high byte
002B3F  1  85 71                STA     <ut1_pl         ; save return address low byte
002B41  1  84 72                STY     <ut1_ph         ; save return address high byte
002B43  1  4C 93 33             JMP     LAB_1B66        ; round FAC1 and put on stack (returns to next instruction)
002B46  1               
002B46  1               LAB_159F:
002B46  1  A9 AC                LDA     #<LAB_259C      ; set 1 pointer low addr (default step size)
002B48  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high addr
002B4A  1  20 68 44             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002B4D  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002B51  1  C9 C3                CMP     #TK_STEP        ; compare with STEP token
002B53  1  D0 07                BNE     LAB_15B3        ; jump if not "STEP"
002B55  1               
002B55  1               ;.was step so ..
002B55  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002B59  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002B5C  1               ; else do type mismatch
002B5C  1               LAB_15B3:
002B5C  1  20 74 45             JSR     LAB_27CA        ; return A=FF,C=1/-ve A=01,C=0/+ve
002B5F  1  85 B0                STA     <FAC1_s         ; set FAC1 sign (b7)
002B61  1               ; this is +1 for +ve step and -1 for -ve step, in NEXT we
002B61  1               ; compare the FOR value and the TO value and return +1 if
002B61  1               ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
002B61  1               ; here (+/-1) is then compared to that result and if they
002B61  1               ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
002B61  1               ; the loop is done
002B61  1  20 88 33             JSR     LAB_1B5B        ; push sign, round FAC1 and put on stack
002B64  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
002B66  1  48                   PHA                     ; push on stack
002B67  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
002B69  1  48                   PHA                     ; push on stack
002B6A  1  A9 81                LDA     #TK_FOR         ; get FOR token
002B6C  1  48                   PHA                     ; push on stack
002B6D  1               
002B6D  1               ; interpreter inner loop
002B6D  1               
002B6D  1               LAB_15C2:
002B6D  1  20 C8 2B             JSR     LAB_1629        ; do CRTL-C check vector
002B70  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002B72  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002B74  1               
002B74  1  A6 88                LDX     <Clineh         ; continue line is $FFxx for immediate mode
002B76  1               ; ($00xx for RUN from immediate mode)
002B76  1  E8                   INX                     ; increment it (now $00 if immediate mode)
002B77  1  F0 04                BEQ     LAB_15D1        ; branch if null (immediate mode)
002B79  1               
002B79  1  85 8B                STA     <Cpntrl         ; save continue pointer low byte
002B7B  1  84 8C                STY     <Cpntrh         ; save continue pointer high byte
002B7D  1               LAB_15D1:
002B7D  1  A0 00                LDY     #$00            ; clear index
002B7F  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
002B81  1  F0 07                BEQ     LAB_15DC        ; branch if null [EOL]
002B83  1               
002B83  1  C9 3A                CMP     #':'            ; compare with ":"
002B85  1  F0 1D                BEQ     LAB_15F6        ; branch if = (statement separator)
002B87  1               
002B87  1               LAB_15D9:
002B87  1  4C 14 34             JMP     LAB_SNER        ; else syntax error then warm start
002B8A  1               
002B8A  1               ; have reached [EOL]
002B8A  1               LAB_15DC:
002B8A  1  A0 02                LDY     #$02            ; set index
002B8C  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
002B8E  1  18                   CLC                     ; clear carry for no "BREAK" message
002B8F  1  F0 59                BEQ     LAB_1651        ; if null go to immediate mode (was immediate or [EOT]
002B91  1               ; marker)
002B91  1               
002B91  1  C8                   INY                     ; increment index
002B92  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # low byte
002B94  1  85 87                STA     <Clinel         ; save current line low byte
002B96  1  C8                   INY                     ; increment index
002B97  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # high byte
002B99  1  85 88                STA     <Clineh         ; save current line high byte
002B9B  1  98                   TYA                     ; A now = 4
002B9C  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002B9E  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002BA0  1  90 02                BCC     LAB_15F6        ; branch if no overflow
002BA2  1               
002BA2  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002BA4  1               LAB_15F6:
002BA4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002BA8  1               
002BA8  1               
002BA8  1               
002BA8  1               
002BA8  1               LAB_15F9:
002BA8  1  20 AE 2B             JSR     LAB_15FF        ; go interpret BASIC code from (<Bpntrl)
002BAB  1               LAB_15FC:
002BAB  1  4C 6D 2B             JMP     LAB_15C2        ; loop
002BAE  1               
002BAE  1               ; interpret BASIC code from (<Bpntrl)
002BAE  1               
002BAE  1               LAB_15FF:
002BAE  1  F0 56                BEQ     LAB_1628        ; exit if zero [EOL]
002BB0  1               
002BB0  1               LAB_1602:
002BB0  1  0A                   ASL     A               ; *2 bytes per vector and normalise token
002BB1  1  B0 03                BCS     LAB_1609        ; branch if was token
002BB3  1  4C 6C 2E             JMP     LAB_LET         ; else go do implied LET
002BB6  1               
002BB6  1               LAB_1609:
002BB6  1               TK_TABUSE       = (TK_TAB-$80)*2
002BB6  1  C9 78                CMP     #TK_TABUSE      ; compare normalised token * 2 with TAB
002BB8  1  B0 CD                BCS     LAB_15D9        ; branch if A>=TAB (do syntax error then warm start)
002BBA  1               ; only tokens before TAB can start a line
002BBA  1  A8                   TAY                     ; copy to index
002BBB  1  B9 39 10             LDA     LAB_CTBL+1,Y    ; get vector high byte
002BBE  1  48                   PHA                     ; onto stack
002BBF  1  B9 38 10             LDA     LAB_CTBL,Y      ; get vector low byte
002BC2  1  48                   PHA                     ; onto stack
002BC3  1  22 BC 00 00          JSL     LAB_IGBY        ; jump to increment and scan memory
002BC7  1               ; then "return" to vector
002BC7  1  60                   RTS
002BC8  1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
002BC8  1               ; key press is detected.
002BC8  1               
002BC8  1               LAB_1629:
002BC8  1  6C 03 02             JMP     (VEC_CC)        ; ctrl c check vector
002BCB  1               
002BCB  1               ; if there was a key press it gets back here ..
002BCB  1               
002BCB  1               LAB_1636:
002BCB  1  C9 03                CMP     #$03            ; compare with CTRL-C
002BCD  1               
002BCD  1               ; perform STOP
002BCD  1               
002BCD  1               LAB_STOP:
002BCD  1  B0 01                BCS     LAB_163B        ; branch if token follows STOP
002BCF  1               ; else just END
002BCF  1               ; END
002BCF  1               
002BCF  1               LAB_END:
002BCF  1  18                   CLC                     ; clear the carry, indicate a normal program end
002BD0  1               LAB_163B:
002BD0  1  D0 67                BNE     LAB_167A        ; if wasn't CTRL-C or there is a following byte return
002BD2  1               
002BD2  1  A5 C4                LDA     <Bpntrh         ; get the BASIC execute pointer high byte
002BD4  1  49 21                EOR     #>Ibuffs        ; compare with buffer address high byte (Cb unchanged)
002BD6  1  F0 10                BEQ     LAB_164F        ; branch if the BASIC pointer is in the input buffer
002BD8  1               ; (can't continue in immediate mode)
002BD8  1               
002BD8  1               ; else ..
002BD8  1  49 21                EOR     #>Ibuffs        ; correct the bits
002BDA  1  A4 C3                LDY     <Bpntrl         ; get BASIC execute pointer low byte
002BDC  1  84 8B                STY     <Cpntrl         ; save continue pointer low byte
002BDE  1  85 8C                STA     <Cpntrh         ; save continue pointer high byte
002BE0  1               LAB_1647:
002BE0  1  A5 87                LDA     <Clinel         ; get current line low byte
002BE2  1  A4 88                LDY     <Clineh         ; get current line high byte
002BE4  1  85 89                STA     <Blinel         ; save break line low byte
002BE6  1  84 8A                STY     <Blineh         ; save break line high byte
002BE8  1               LAB_164F:
002BE8  1  68                   PLA                     ; pull return address low
002BE9  1  68                   PLA                     ; pull return address high
002BEA  1               LAB_1651:
002BEA  1  90 07                BCC     LAB_165E        ; if was program end just do warm start
002BEC  1               
002BEC  1               ; else ..
002BEC  1               
002BEC  1               ;        LDA     <VIDEOMODE
002BEC  1               ;        CMP     #2
002BEC  1               ;        BEQ     LAB_1651A
002BEC  1               ;        LDX     #2
002BEC  1               ;        JSR     V_SCREEN1
002BEC  1               LAB_1651A:
002BEC  1  A9 D4                LDA     #<LAB_BMSG      ; point to "Break" low byte
002BEE  1  A0 17                LDY     #>LAB_BMSG      ; point to "Break" high byte
002BF0  1  4C E3 27             JMP     LAB_1269        ; print "Break" and do warm start
002BF3  1               
002BF3  1               LAB_165E:
002BF3  1  4C EE 27             JMP     LAB_1274        ; go do warm start
002BF6  1               
002BF6  1               ; perform RESTORE
002BF6  1               
002BF6  1               LAB_RESTORE:
002BF6  1  D0 0F                BNE     LAB_RESTOREn    ; branch if next character not null (RESTORE n)
002BF8  1               
002BF8  1               LAB_161A:
002BF8  1  38                   SEC                     ; set carry for subtract
002BF9  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002BFB  1  E9 01                SBC     #$01            ; -1
002BFD  1  A4 7A                LDY     <Smemh          ; get start of mem high byte
002BFF  1  B0 01                BCS     LAB_1624        ; branch if no underflow
002C01  1               
002C01  1               LAB_uflow:
002C01  1  88                   DEY                     ; else decrement high byte
002C02  1               LAB_1624:
002C02  1  85 8F                STA     <Dptrl          ; save DATA pointer low byte
002C04  1  84 90                STY     <Dptrh          ; save DATA pointer high byte
002C06  1               LAB_1628:
002C06  1  60                   RTS
002C07  1               
002C07  1               ; is RESTORE n
002C07  1               LAB_RESTOREn:
002C07  1  20 0A 2E             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002C0A  1  20 5B 2D             JSR     LAB_SNBL        ; scan for next BASIC line
002C0D  1  A5 88                LDA     <Clineh         ; get current line high byte
002C0F  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002C11  1  B0 0B                BCS     LAB_reset_search; branch if >= (start search from beginning)
002C13  1               
002C13  1  98                   TYA                     ; else copy line index to A
002C14  1  38                   SEC                     ; set carry (+1)
002C15  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002C17  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002C19  1  90 07                BCC     LAB_go_search   ; branch if no overflow to high byte
002C1B  1               
002C1B  1  E8                   INX                     ; increment high byte
002C1C  1  B0 04                BCS     LAB_go_search   ; branch always (can never be carry clear)
002C1E  1               
002C1E  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002C1E  1               
002C1E  1               LAB_reset_search:
002C1E  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002C20  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002C22  1               
002C22  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002C22  1               
002C22  1               LAB_go_search:
002C22  1               
002C22  1  20 CE 29             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002C25  1  B0 03                BCS     LAB_line_found  ; if carry set go set pointer
002C27  1               
002C27  1  4C 2D 2D             JMP     LAB_16F7        ; else go do "Undefined statement" error
002C2A  1               
002C2A  1               LAB_line_found:
002C2A  1               ; carry already set for subtract
002C2A  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002C2C  1  E9 01                SBC     #$01            ; -1
002C2E  1  A4 AB                LDY     <Baslnh         ; get pointer high byte
002C30  1  B0 D0                BCS     LAB_1624        ; branch if no underflow (save DATA pointer and return)
002C32  1               
002C32  1  90 CD                BCC     LAB_uflow       ; else decrement high byte then save DATA pointer and
002C34  1               ; return (branch always)
002C34  1               
002C34  1               ; perform NULL
002C34  1               
002C34  1               LAB_NULL:
002C34  1  20 8A 3F             JSR     LAB_GTBY        ; get byte parameter
002C37  1  86 0D                STX     <Nullct         ; save new NULL count
002C39  1               LAB_167A:
002C39  1  60                   RTS
002C3A  1               
002C3A  1               ; perform CONT
002C3A  1               
002C3A  1               LAB_CONT:
002C3A  1  D0 FD                BNE     LAB_167A        ; if following byte exit to do syntax error
002C3C  1               
002C3C  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002C3E  1  D0 05                BNE     LAB_166C        ; go do continue if we can
002C40  1               
002C40  1  A2 1E                LDX     #$1E            ; error code $1E ("Can't continue" error)
002C42  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
002C45  1               
002C45  1               ; we can continue so ..
002C45  1               LAB_166C:
002C45  1  A9 93                LDA     #TK_ON          ; set token for ON
002C47  1  20 A4 4C             JSR     LAB_IRQ         ; set IRQ flags
002C4A  1  A9 93                LDA     #TK_ON          ; set token for ON
002C4C  1  20 A7 4C             JSR     LAB_NMI         ; set NMI flags
002C4F  1               
002C4F  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002C51  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002C53  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002C55  1  A5 89                LDA     <Blinel         ; get break line low byte
002C57  1  A4 8A                LDY     <Blineh         ; get break line high byte
002C59  1  85 87                STA     <Clinel         ; set current line low byte
002C5B  1  84 88                STY     <Clineh         ; set current line high byte
002C5D  1  60                   RTS
002C5E  1               
002C5E  1               ; perform RUN
002C5E  1               
002C5E  1               LAB_RUN:
002C5E  1  D0 03                BNE     LAB_1696        ; branch if RUN n
002C60  1  4C 0B 2A             JMP     LAB_1477        ; reset execution to start, clear variables, flush stack and
002C63  1               ; return
002C63  1               
002C63  1               ; does RUN n
002C63  1               
002C63  1               LAB_1696:
002C63  1  20 18 2A             JSR     LAB_147A        ; go do "CLEAR"
002C66  1  F0 2F                BEQ     LAB_16B0        ; get n and do GOTO n (branch always as CLEAR sets Z=1)
002C68  1               
002C68  1               ; perform DO
002C68  1               
002C68  1               LAB_DO:
002C68  1  A9 05                LDA     #$05            ; need 5 bytes for DO
002C6A  1  20 87 27             JSR     LAB_1212        ; check room on stack for A bytes
002C6D  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002C6F  1  48                   PHA                     ; push on stack
002C70  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002C72  1  48                   PHA                     ; push on stack
002C73  1  A5 88                LDA     <Clineh         ; get current line high byte
002C75  1  48                   PHA                     ; push on stack
002C76  1  A5 87                LDA     <Clinel         ; get current line low byte
002C78  1  48                   PHA                     ; push on stack
002C79  1  A9 9C                LDA     #TK_DO          ; token for DO
002C7B  1  48                   PHA                     ; push on stack
002C7C  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002C80  1  4C 6D 2B             JMP     LAB_15C2        ; go do interpreter inner loop
002C83  1               
002C83  1               ; perform GOSUB
002C83  1               
002C83  1               LAB_GOSUB:
002C83  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
002C85  1  20 87 27             JSR     LAB_1212        ; check room on stack for A bytes
002C88  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002C8A  1  48                   PHA                     ; push on stack
002C8B  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002C8D  1  48                   PHA                     ; push on stack
002C8E  1  A5 88                LDA     <Clineh         ; get current line high byte
002C90  1  48                   PHA                     ; push on stack
002C91  1  A5 87                LDA     <Clinel         ; get current line low byte
002C93  1  48                   PHA                     ; push on stack
002C94  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
002C96  1  48                   PHA                     ; push on stack
002C97  1               LAB_16B0:
002C97  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002C9B  1  20 A1 2C             JSR     LAB_GOTO        ; perform GOTO n
002C9E  1  4C 6D 2B             JMP     LAB_15C2        ; go do interpreter inner loop
002CA1  1               ; (can't RTS, we used the stack!)
002CA1  1               
002CA1  1               ; perform GOTO
002CA1  1               
002CA1  1               LAB_GOTO:
002CA1  1  20 0A 2E             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002CA4  1  20 5B 2D             JSR     LAB_SNBL        ; scan for next BASIC line
002CA7  1  A5 88                LDA     <Clineh         ; get current line high byte
002CA9  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002CAB  1  B0 0B                BCS     LAB_16D0        ; branch if >= (start search from beginning)
002CAD  1               
002CAD  1  98                   TYA                     ; else copy line index to A
002CAE  1  38                   SEC                     ; set carry (+1)
002CAF  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002CB1  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002CB3  1  90 07                BCC     LAB_16D4        ; branch if no overflow to high byte
002CB5  1               
002CB5  1  E8                   INX                     ; increment high byte
002CB6  1  B0 04                BCS     LAB_16D4        ; branch always (can never be carry)
002CB8  1               
002CB8  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002CB8  1               
002CB8  1               LAB_16D0:
002CB8  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002CBA  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002CBC  1               
002CBC  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002CBC  1               
002CBC  1               LAB_16D4:
002CBC  1  20 CE 29             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002CBF  1  90 6C                BCC     LAB_16F7        ; if carry clear go do "Undefined statement" error
002CC1  1               ; (unspecified statement)
002CC1  1               
002CC1  1               ; carry already set for subtract
002CC1  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002CC3  1  E9 01                SBC     #$01            ; -1
002CC5  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002CC7  1  A5 AB                LDA     <Baslnh         ; get pointer high byte
002CC9  1  E9 00                SBC     #$00            ; subtract carry
002CCB  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002CCD  1               LAB_16E5:
002CCD  1  60                   RTS
002CCE  1               
002CCE  1               LAB_DONOK:
002CCE  1  A2 22                LDX     #$22            ; error code $22 ("LOOP without DO" error)
002CD0  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
002CD3  1               
002CD3  1               ; perform LOOP
002CD3  1               
002CD3  1               LAB_LOOP:
002CD3  1  A8                   TAY                     ; save following token
002CD4  1  A3 03                LDA     3,S             ; get token byte from stack
002CD6  1  C9 9C                CMP     #TK_DO          ; compare with DO token
002CD8  1  D0 F4                BNE     LAB_DONOK       ; branch if no matching DO
002CDA  1               
002CDA  1               ; FIXUP STACK
002CDA  1  C2 10                INDEX16
002CDC  1  BA                   TSX
002CDD  1  E8                   INX                     ; dump calling routine return address
002CDE  1  E8                   INX                     ; dump calling routine return address
002CDF  1  9A                   TXS                     ; correct stack
002CE0  1  E2 10                INDEX8
002CE2  1               
002CE2  1  98                   TYA                     ; get saved following token back
002CE3  1  F0 20                BEQ     LoopAlways      ; if no following token loop forever
002CE5  1               ; (stack pointer in X)
002CE5  1               
002CE5  1  C9 3A                CMP     #':'            ; could be ':'
002CE7  1  F0 1C                BEQ     LoopAlways      ; if :... loop forever
002CE9  1               
002CE9  1  E9 C4                SBC     #TK_UNTIL       ; subtract token for UNTIL, we know carry is set here
002CEB  1  AA                   TAX                     ; copy to X (if it was UNTIL then Y will be correct)
002CEC  1  F0 04                BEQ     DoRest          ; branch if was UNTIL
002CEE  1               
002CEE  1  CA                   DEX                     ; decrement result
002CEF  1  D0 64                BNE     LAB_16FC        ; if not WHILE go do syntax error and warm start
002CF1  1               ; only if the token was WHILE will this fail
002CF1  1               
002CF1  1  CA                   DEX                     ; set invert result byte
002CF2  1               DoRest:
002CF2  1  86 98                STX     <Frnxth         ; save invert result byte
002CF4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002CF8  1  20 EE 32             JSR     LAB_EVEX        ; evaluate expression
002CFB  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002CFD  1  F0 02                BEQ     DoCmp           ; if =0 go do straight compare
002CFF  1               
002CFF  1  A9 FF                LDA     #$FF            ; else set all bits
002D01  1               DoCmp:
002D01  1  45 98                EOR     <Frnxth         ; EOR with invert byte
002D03  1  D0 17                BNE     LoopDone        ; if <> 0 clear stack and back to interpreter loop
002D05  1               
002D05  1               ; loop condition wasn't met so do it again
002D05  1               LoopAlways:
002D05  1  A3 02                LDA     2,S             ; get current line low byte
002D07  1  85 87                STA     <Clinel         ; save current line low byte
002D09  1  A3 03                LDA     3,S             ; get current line high byte
002D0B  1  85 88                STA     <Clineh         ; save current line high byte
002D0D  1  A3 04                LDA     4,S             ; get BASIC execute pointer low byte
002D0F  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002D11  1  A3 05                LDA     5,S             ; get BASIC execute pointer high byte
002D13  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002D15  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002D19  1  4C 6D 2B             JMP     LAB_15C2        ; go do interpreter inner loop
002D1C  1               
002D1C  1               ; clear stack and back to interpreter loop
002D1C  1               LoopDone:
002D1C  1  C2 10                INDEX16
002D1E  1  BA                   TSX
002D1F  1  E8                   INX                     ; dump DO token
002D20  1  E8                   INX                     ; dump current line low byte
002D21  1  E8                   INX                     ; dump current line high byte
002D22  1  E8                   INX                     ; dump BASIC execute pointer low byte
002D23  1  E8                   INX                     ; dump BASIC execute pointer high byte
002D24  1  9A                   TXS                     ; correct stack
002D25  1  E2 10                INDEX8
002D27  1  4C 47 2D             JMP     LAB_DATA        ; go perform DATA (find : or [EOL])
002D2A  1               
002D2A  1               ; do the return without gosub error
002D2A  1               
002D2A  1               LAB_16F4:
002D2A  1  A2 04                LDX     #$04            ; error code $04 ("RETURN without GOSUB" error)
002D2C  1  2C                   .BYTE   $2C             ; makes next line BIT LAB_0EA2
002D2D  1               
002D2D  1               LAB_16F7:                       ; do undefined statement error
002D2D  1  A2 0E                LDX     #$0E            ; error code $0E ("Undefined statement" error)
002D2F  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
002D32  1               
002D32  1               ; perform RETURN
002D32  1               
002D32  1               LAB_RETURN:
002D32  1  D0 99                BNE     LAB_16E5        ; exit if following token (to allow syntax error)
002D34  1               
002D34  1               LAB_16E8:
002D34  1  68                   PLA                     ; dump calling routine return address
002D35  1  68                   PLA                     ; dump calling routine return address
002D36  1  68                   PLA                     ; pull token
002D37  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002D39  1  D0 EF                BNE     LAB_16F4        ; branch if no matching GOSUB
002D3B  1               
002D3B  1               LAB_16FF:
002D3B  1  68                   PLA                     ; pull current line low byte
002D3C  1  85 87                STA     <Clinel         ; save current line low byte
002D3E  1  68                   PLA                     ; pull current line high byte
002D3F  1  85 88                STA     <Clineh         ; save current line high byte
002D41  1  68                   PLA                     ; pull BASIC execute pointer low byte
002D42  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002D44  1  68                   PLA                     ; pull BASIC execute pointer high byte
002D45  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002D47  1               
002D47  1               ; now do the DATA statement as we could be returning into
002D47  1               ; the middle of an ON <var> GOSUB n,m,p,q line
002D47  1               ; (the return address used by the DATA statement is the one
002D47  1               ; pushed before the GOSUB was executed!)
002D47  1               
002D47  1               ; perform DATA
002D47  1               
002D47  1               LAB_DATA:
002D47  1  20 58 2D             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002D4A  1               
002D4A  1               ; set BASIC execute pointer
002D4A  1               LAB_170F:
002D4A  1  98                   TYA                     ; copy index to A
002D4B  1  18                   CLC                     ; clear carry for add
002D4C  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002D4E  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002D50  1  90 02                BCC     LAB_1719        ; skip next if no carry
002D52  1               
002D52  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002D54  1               LAB_1719:
002D54  1  60                   RTS
002D55  1               
002D55  1               LAB_16FC:
002D55  1  4C 14 34             JMP     LAB_SNER        ; do syntax error then warm start
002D58  1               
002D58  1               ; scan for next BASIC statement ([:] or [EOL])
002D58  1               ; returns Y as index to [:] or [EOL]
002D58  1               
002D58  1               LAB_SNBS:
002D58  1  A2 3A                LDX     #':'            ; set look for character = ":"
002D5A  1  2C                   .BYTE   $2C             ; makes next line BIT $00A2
002D5B  1               
002D5B  1               ; scan for next BASIC line
002D5B  1               ; returns Y as index to [EOL]
002D5B  1               
002D5B  1               LAB_SNBL:
002D5B  1  A2 00                LDX     #$00            ; set alt search character = [EOL]
002D5D  1  A0 00                LDY     #$00            ; set search character = [EOL]
002D5F  1  84 5C                STY     <Asrch          ; store search character
002D61  1               LAB_1725:
002D61  1  8A                   TXA                     ; get alt search character
002D62  1  45 5C                EOR     <Asrch          ; toggle search character, effectively swap with $00
002D64  1  85 5C                STA     <Asrch          ; save swapped search character
002D66  1               LAB_172D:
002D66  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
002D68  1  F0 EA                BEQ     LAB_1719        ; exit if null [EOL]
002D6A  1               
002D6A  1  C5 5C                CMP     <Asrch          ; compare with search character
002D6C  1  F0 E6                BEQ     LAB_1719        ; exit if found
002D6E  1               
002D6E  1  C8                   INY                     ; increment index
002D6F  1  C9 22                CMP     #$22            ; compare current character with open quote
002D71  1  D0 F3                BNE     LAB_172D        ; if not open quote go get next character
002D73  1               
002D73  1  F0 EC                BEQ     LAB_1725        ; if found go swap search character for alt search character
002D75  1               
002D75  1               ; perform IF
002D75  1               
002D75  1               LAB_IF:
002D75  1  20 EE 32             JSR     LAB_EVEX        ; evaluate the expression
002D78  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002D7C  1  C9 C1                CMP     #TK_THEN        ; compare with THEN token
002D7E  1  F0 12                BEQ     LAB_174B        ; if it was THEN go do IF
002D80  1               
002D80  1               ; wasn't IF .. THEN so must be IF .. GOTO
002D80  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002D82  1  D0 D1                BNE     LAB_16FC        ; if it wasn't GOTO go do syntax error
002D84  1               
002D84  1  A6 C3                LDX     <Bpntrl         ; save the basic pointer low byte
002D86  1  A4 C4                LDY     <Bpntrh         ; save the basic pointer high byte
002D88  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D8C  1  B0 C7                BCS     LAB_16FC        ; if not numeric go do syntax error
002D8E  1               
002D8E  1  86 C3                STX     <Bpntrl         ; restore the basic pointer low byte
002D90  1  84 C4                STY     <Bpntrh         ; restore the basic pointer high byte
002D92  1               LAB_174B:
002D92  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002D94  1  F0 1F                BEQ     LAB_174E        ; if the result was zero go look for an ELSE
002D96  1               
002D96  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
002D9A  1  B0 03                BCS     LAB_174D        ; if not numeric go do var or keyword
002D9C  1               
002D9C  1               LAB_174C:
002D9C  1  4C A1 2C             JMP     LAB_GOTO        ; else was numeric so do GOTO n
002D9F  1               
002D9F  1               ; is var or keyword
002D9F  1               LAB_174D:
002D9F  1  C9 90                CMP     #TK_RETURN      ; compare the byte with the token for RETURN
002DA1  1  D0 03                BNE     LAB_174G        ; if it wasn't RETURN go interpret BASIC code from (<Bpntrl)
002DA3  1               ; and return to this code to process any following code
002DA3  1               
002DA3  1  4C B0 2B             JMP     LAB_1602        ; else it was RETURN so interpret BASIC code from (<Bpntrl)
002DA6  1               ; but don't return here
002DA6  1               
002DA6  1               LAB_174G:
002DA6  1  20 AE 2B             JSR     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002DA9  1               
002DA9  1               ; the IF was executed and there may be a following ELSE so the code needs to return
002DA9  1               ; here to check and ignore the ELSE if present
002DA9  1               
002DA9  1  A0 00                LDY     #$00            ; clear the index
002DAB  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002DAD  1  C9 BD                CMP     #TK_ELSE        ; compare it with the token for ELSE
002DAF  1  D0 03                BNE     LAB_DATA_A
002DB1  1  4C 47 2D             JMP     LAB_DATA        ; if ELSE ignore the following statement
002DB4  1               
002DB4  1               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
002DB4  1               ; following ELSE will, correctly, cause a syntax error
002DB4  1               LAB_DATA_A:
002DB4  1  60                   RTS                     ; else return to the interpreter inner loop
002DB5  1               
002DB5  1               ; perform ELSE after IF
002DB5  1               
002DB5  1               LAB_174E:
002DB5  1  A0 00                LDY     #$00            ; clear the BASIC byte index
002DB7  1  A2 01                LDX     #$01            ; clear the nesting depth
002DB9  1               LAB_1750:
002DB9  1  C8                   INY                     ; increment the BASIC byte index
002DBA  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002DBC  1  F0 0F                BEQ     LAB_1753        ; if EOL go add the pointer and return
002DBE  1               
002DBE  1  C9 8D                CMP     #TK_IF          ; compare the byte with the token for IF
002DC0  1  D0 03                BNE     LAB_1752        ; if not IF token skip the depth increment
002DC2  1               
002DC2  1  E8                   INX                     ; else increment the nesting depth ..
002DC3  1  D0 F4                BNE     LAB_1750        ; .. and continue looking
002DC5  1               
002DC5  1               LAB_1752:
002DC5  1  C9 BD                CMP     #TK_ELSE        ; compare the byte with the token for ELSE
002DC7  1  D0 F0                BNE     LAB_1750        ; if not ELSE token continue looking
002DC9  1               
002DC9  1  CA                   DEX                     ; was ELSE so decrement the nesting depth
002DCA  1  D0 ED                BNE     LAB_1750        ; loop if still nested
002DCC  1               
002DCC  1  C8                   INY                     ; increment the BASIC byte index past the ELSE
002DCD  1               
002DCD  1               ; found the matching ELSE, now do <{n|statement}>
002DCD  1               
002DCD  1               LAB_1753:
002DCD  1  98                   TYA                     ; else copy line index to A
002DCE  1  18                   CLC                     ; clear carry for add
002DCF  1  65 C3                ADC     <Bpntrl         ; add the BASIC execute pointer low byte
002DD1  1  85 C3                STA     <Bpntrl         ; save the BASIC execute pointer low byte
002DD3  1  90 02                BCC     LAB_1754        ; branch if no overflow to high byte
002DD5  1               
002DD5  1  E6 C4                INC     <Bpntrh         ; else increment the BASIC execute pointer high byte
002DD7  1               LAB_1754:
002DD7  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002DDB  1  90 BF                BCC     LAB_174C        ; if numeric do GOTO n
002DDD  1               ; the code will return to the interpreter loop at the
002DDD  1               ; tail end of the GOTO <n>
002DDD  1               
002DDD  1  4C AE 2B             JMP     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002DE0  1               ; the code will return to the interpreter loop at the
002DE0  1               ; tail end of the <statement>
002DE0  1               
002DE0  1               ; perform REM, skip (rest of) line
002DE0  1               
002DE0  1               LAB_REM:
002DE0  1  20 5B 2D             JSR     LAB_SNBL        ; scan for next BASIC line
002DE3  1  4C 4A 2D             JMP     LAB_170F        ; go set BASIC execute pointer and return, branch always
002DE6  1               
002DE6  1               LAB_16FD:
002DE6  1  4C 14 34             JMP     LAB_SNER        ; do syntax error then warm start
002DE9  1               
002DE9  1               ; perform ON
002DE9  1               
002DE9  1               LAB_ON:
002DE9  1               LAB_NONM:
002DE9  1  20 8A 3F             JSR     LAB_GTBY        ; get byte parameter
002DEC  1  48                   PHA                     ; push GOTO/GOSUB token
002DED  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002DEF  1  F0 04                BEQ     LAB_176B        ; branch if GOSUB
002DF1  1               
002DF1  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002DF3  1               LAB_1767:
002DF3  1  D0 F1                BNE     LAB_16FD        ; if not GOTO do syntax error then warm start
002DF5  1               
002DF5  1               
002DF5  1               ; next character was GOTO or GOSUB
002DF5  1               
002DF5  1               LAB_176B:
002DF5  1  C6 AF                DEC     <FAC1_3         ; decrement index (byte value)
002DF7  1  D0 04                BNE     LAB_1773        ; branch if not zero
002DF9  1               
002DF9  1  68                   PLA                     ; pull GOTO/GOSUB token
002DFA  1  4C B0 2B             JMP     LAB_1602        ; go execute it
002DFD  1               
002DFD  1               LAB_1773:
002DFD  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002E01  1  20 0A 2E             JSR     LAB_GFPN        ; get fixed-point number into temp integer (skip this n)
002E04  1               ; (we could LDX #',' and JSR LAB_SNBL+2, then we
002E04  1               ; just BNE LAB_176B for the loop. should be quicker ..
002E04  1               ; no we can't, what if we meet a colon or [EOL]?)
002E04  1  C9 2C                CMP     #$2C            ; compare next character with ","
002E06  1  F0 ED                BEQ     LAB_176B        ; loop if ","
002E08  1               
002E08  1               LAB_177E:
002E08  1  68                   PLA                     ; else pull keyword token (run out of options)
002E09  1               ; also dump +/-1 pointer low byte and exit
002E09  1               LAB_177F:
002E09  1  60                   RTS
002E0A  1               
002E0A  1               ; takes n * 106 + 11 cycles where n is the number of digits
002E0A  1               
002E0A  1               ; get fixed-point number into temp integer
002E0A  1               
002E0A  1               LAB_GFPN:
002E0A  1  A2 00                LDX     #$00            ; clear reg
002E0C  1  86 11                STX     <Itempl         ; clear temporary integer low byte
002E0E  1               LAB_1785:
002E0E  1  86 12                STX     <Itemph         ; save temporary integer high byte
002E10  1  B0 F7                BCS     LAB_177F        ; return if carry set, end of scan, character was
002E12  1               ; not 0-9
002E12  1               
002E12  1  E0 19                CPX     #$19            ; compare high byte with $19
002E14  1  A8                   TAY                     ; ensure Zb = 0 if the branch is taken
002E15  1  B0 DC                BCS     LAB_1767        ; branch if >=, makes max line # 63999 because next
002E17  1               ; bit does *$0A, = 64000, compare at target will fail
002E17  1               ; and do syntax error
002E17  1               
002E17  1  E9 2F                SBC     #'0'-1          ; subtract "0", $2F + carry, from byte
002E19  1  A8                   TAY                     ; copy binary digit
002E1A  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
002E1C  1  0A                   ASL     A               ; *2 low byte
002E1D  1  26 12                ROL     <Itemph         ; *2 high byte
002E1F  1  0A                   ASL     A               ; *2 low byte
002E20  1  26 12                ROL     <Itemph         ; *2 high byte, *4
002E22  1  65 11                ADC     <Itempl         ; + low byte, *5
002E24  1  85 11                STA     <Itempl         ; save it
002E26  1  8A                   TXA                     ; get high byte copy to A
002E27  1  65 12                ADC     <Itemph         ; + high byte, *5
002E29  1  06 11                ASL     <Itempl         ; *2 low byte, *10d
002E2B  1  2A                   ROL     A               ; *2 high byte, *10d
002E2C  1  AA                   TAX                     ; copy high byte back to X
002E2D  1  98                   TYA                     ; get binary digit back
002E2E  1  65 11                ADC     <Itempl         ; add number low byte
002E30  1  85 11                STA     <Itempl         ; save number low byte
002E32  1  90 01                BCC     LAB_17B3        ; if no overflow to high byte get next character
002E34  1               
002E34  1  E8                   INX                     ; else increment high byte
002E35  1               LAB_17B3:
002E35  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002E39  1  4C 0E 2E             JMP     LAB_1785        ; loop for next character
002E3C  1               
002E3C  1               ; perform DEC
002E3C  1               
002E3C  1               LAB_DEC:
002E3C  1  A9 B0                LDA     #<LAB_2AFD      ; set -1 pointer low byte
002E3E  1  2C                   .BYTE   $2C             ; BIT abs to skip the LDA below
002E3F  1               
002E3F  1               ; perform INC
002E3F  1               
002E3F  1               LAB_INC:
002E3F  1  A9 AC                LDA     #<LAB_259C      ; set 1 pointer low byte
002E41  1               LAB_17B5:
002E41  1  48                   PHA                     ; save +/-1 pointer low byte
002E42  1               LAB_17B7:
002E42  1  20 EB 35             JSR     LAB_GVAR        ; get var address
002E45  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002E47  1  30 20                BMI     IncrErr         ; exit if string
002E49  1               
002E49  1  85 97                STA     <Lvarpl         ; save var address low byte
002E4B  1  84 98                STY     <Lvarph         ; save var address high byte
002E4D  1  20 68 44             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002E50  1  68                   PLA                     ; get +/-1 pointer low byte
002E51  1  48                   PHA                     ; save +/-1 pointer low byte
002E52  1  A0 18                LDY     #>LAB_259C      ; set +/-1 pointer high byte (both the same)
002E54  1  20 53 41             JSR     LAB_246C        ; add (AY) to FAC1
002E57  1  20 DE 44             JSR     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl)
002E5A  1               
002E5A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002E5E  1  C9 2C                CMP     #','            ; compare with ","
002E60  1  D0 A6                BNE     LAB_177E        ; exit if not "," (either end or error)
002E62  1               
002E62  1               ; was "," so another INCR variable to do
002E62  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002E66  1  4C 42 2E             JMP     LAB_17B7        ; go do next var
002E69  1               
002E69  1               IncrErr:
002E69  1  4C E9 32             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
002E6C  1               
002E6C  1               ; perform LET
002E6C  1               
002E6C  1               LAB_LET:
002E6C  1  20 EB 35             JSR     LAB_GVAR        ; get var address
002E6F  1  85 97                STA     <Lvarpl         ; save var address low byte
002E71  1  84 98                STY     <Lvarph         ; save var address high byte
002E73  1  A9 D2                LDA     #TK_EQUAL       ; get = token
002E75  1  20 01 34             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002E78  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002E7A  1  48                   PHA                     ; push data type flag
002E7B  1  20 EE 32             JSR     LAB_EVEX        ; evaluate expression
002E7E  1  68                   PLA                     ; pop data type flag
002E7F  1  2A                   ROL     A               ; set carry if type = string
002E80  1  20 E0 32             JSR     LAB_CKTM        ; type match check, set C for string
002E83  1  D0 03                BNE     LAB_17D5        ; branch if string
002E85  1               
002E85  1  4C DE 44             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002E88  1               
002E88  1               ; string LET
002E88  1               
002E88  1               LAB_17D5:
002E88  1  A0 02                LDY     #$02            ; set index to pointer high byte
002E8A  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string pointer high byte
002E8E  1  B5 AE C9 00  
002E92  1  D0 04 A2 00  
002EA0  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
002EA2  1  90 2B                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002EA4  1  D0 1B                BNE     LAB_17E6        ; branch if >
002EA6  1               ; else was equal so compare low bytes
002EA6  1  88                   DEY                     ; decrement index
002EA7  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get pointer low byte
002EAB  1  B5 AE C9 00  
002EAF  1  D0 04 A2 00  
002EBD  1  C5 81                CMP     <Sstorl         ; compare bottom of string space low byte
002EBF  1  90 0E                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002EC1  1               
002EC1  1               ; pointer was >= to bottom of string space pointer
002EC1  1               LAB_17E6:
002EC1  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002EC3  1  C4 7C                CPY     <Svarh          ; compare start of vars high byte
002EC5  1  90 08                BCC     LAB_17F4        ; branch if less (descriptor is on stack)
002EC7  1               
002EC7  1  D0 0D                BNE     LAB_17FB        ; branch if greater (descriptor is not on stack)
002EC9  1               
002EC9  1               ; else high bytes were equal so ..
002EC9  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002ECB  1  C5 7B                CMP     <Svarl          ; compare start of vars low byte
002ECD  1  B0 07                BCS     LAB_17FB        ; branch if >= (descriptor is not on stack)
002ECF  1               
002ECF  1               LAB_17F4:
002ECF  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002ED1  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002ED3  1  4C 00 2F             JMP     LAB_1811        ; clean stack, copy descriptor to variable and return
002ED6  1               
002ED6  1               ; make space and copy string
002ED6  1               LAB_17FB:
002ED6  1               
002ED6  1  A0 00                LDY     #$00            ; index to length
002ED8  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string length
002EDC  1  B5 AE C9 00  
002EE0  1  D0 04 A2 00  
002EEE  1  20 12 3A             JSR     LAB_209C        ; copy string
002EF1  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
002EF3  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
002EF5  1  85 B8                STA     <ssptr_l        ; save descriptor pointer low byte
002EF7  1  84 B9                STY     <ssptr_h        ; save descriptor pointer high byte
002EF9  1  20 70 3C             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
002EFC  1  A9 AC                LDA     #<FAC1_e        ; set descriptor pointer low byte
002EFE  1  A0 00                LDY     #>FAC1_e        ; get descriptor pointer high byte
002F00  1               
002F00  1               ; clean stack and assign value to string variable
002F00  1               LAB_1811:
002F00  1  85 9E                STA     <des_2l         ; save descriptor_2 pointer low byte
002F02  1  84 9F                STY     <des_2h         ; save descriptor_2 pointer high byte
002F04  1  20 72 3D             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
002F07  1  A0 00                LDY     #$00            ; index to length
002F09  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string length
002F0D  1  B5 9E C9 00  
002F11  1  D0 04 A2 00  
002F1F  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002F23  1  01 B5 97 C9  
002F27  1  00 D0 04 A2  
002F35  1  C8                   INY                     ; index to string pointer low byte
002F36  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer low byte
002F3A  1  B5 9E C9 00  
002F3E  1  D0 04 A2 00  
002F4C  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002F50  1  01 B5 97 C9  
002F54  1  00 D0 04 A2  
002F62  1  C8                   INY                     ; index to string pointer high byte
002F63  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer high byte
002F67  1  B5 9E C9 00  
002F6B  1  D0 04 A2 00  
002F79  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002F7D  1  01 B5 97 C9  
002F81  1  00 D0 04 A2  
002F8F  1  60                   RTS
002F90  1               
002F90  1               ; perform GET
002F90  1               
002F90  1               LAB_GET:
002F90  1  20 EB 35             JSR     LAB_GVAR        ; get var address
002F93  1  85 97                STA     <Lvarpl         ; save var address low byte
002F95  1  84 98                STY     <Lvarph         ; save var address high byte
002F97  1  20 89 4C             JSR     INGET           ; get input byte
002F9A  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002F9C  1  30 07                BMI     LAB_GETS        ; go get string character
002F9E  1               
002F9E  1               ; was numeric get
002F9E  1  A8                   TAY                     ; copy character to Y
002F9F  1  20 B6 38             JSR     LAB_1FD0        ; convert Y to byte in FAC1
002FA2  1  4C DE 44             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002FA5  1               
002FA5  1               LAB_GETS:
002FA5  1  48                   PHA                     ; save character
002FA6  1  A9 01                LDA     #$01            ; string is single byte
002FA8  1  B0 01                BCS     LAB_IsByte      ; branch if byte received
002FAA  1               
002FAA  1  68                   PLA                     ; string is null
002FAB  1               LAB_IsByte:
002FAB  1  20 1A 3A             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
002FAE  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
002FAE  1  F0 19                BEQ     LAB_NoSt        ; skip store if null string
002FB0  1               
002FB0  1  68                   PLA                     ; get character back
002FB1  1  A0 00                LDY     #$00            ; clear index
002FB3  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
002FB7  1  01 B5 AD C9  
002FBB  1  00 D0 04 A2  
002FC9  1               LAB_NoSt:
002FC9  1  20 7D 3A             JSR     LAB_RTST        ; check for space on descriptor stack then put address
002FCC  1               ; and length on descriptor stack and update stack pointers
002FCC  1               
002FCC  1  4C 88 2E             JMP     LAB_17D5        ; do string LET and return
002FCF  1               
002FCF  1               ; perform PRINT
002FCF  1               
002FCF  1               LAB_1829:
002FCF  1  20 74 30             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002FD2  1               LAB_182C:
002FD2  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002FD6  1               
002FD6  1               ; PRINT
002FD6  1               
002FD6  1               LAB_PRINT:
002FD6  1  F0 51                BEQ     LAB_CRLF        ; if nothing following just print CR/LF
002FD8  1               
002FD8  1               LAB_1831:
002FD8  1  C9 BC                CMP     #TK_TAB         ; compare with TAB( token
002FDA  1  F0 6C                BEQ     LAB_18A2        ; go do TAB/SPC
002FDC  1               
002FDC  1  C9 C0                CMP     #TK_SPC         ; compare with SPC( token
002FDE  1  F0 68                BEQ     LAB_18A2        ; go do TAB/SPC
002FE0  1               
002FE0  1  C9 2C                CMP     #','            ; compare with ","
002FE2  1  F0 4E                BEQ     LAB_188B        ; go do move to next TAB mark
002FE4  1               
002FE4  1  C9 3B                CMP     #$3B            ; compare with ";"
002FE6  1  F0 7F                BEQ     LAB_18BD        ; if ";" continue with PRINT processing
002FE8  1               
002FE8  1  20 EE 32             JSR     LAB_EVEX        ; evaluate expression
002FEB  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002FED  1  30 E0                BMI     LAB_1829        ; branch if string
002FEF  1               
002FEF  1  20 A2 47             JSR     LAB_296E        ; convert FAC1 to string
002FF2  1  20 24 3A             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002FF5  1  A0 00                LDY     #$00            ; clear index
002FF7  1               
002FF7  1               ; don't check fit if terminal width byte is zero
002FF7  1               
002FF7  1  A5 0F                LDA     <TWidth         ; get terminal width byte
002FF9  1  F0 20                BEQ     LAB_185E        ; skip check if zero
002FFB  1               
002FFB  1  8B 48 DA A2          FETCHINDIRECTY des_pl
002FFF  1  01 B5 AE C9  
003003  1  00 D0 04 A2  
003011  1  38                   SEC                     ; set carry for subtract
003012  1  E5 0E                SBC     <TPos           ; subtract terminal position
003014  1  E5 04                SBC     <TMPFLG         ; subtract string length
003016  1  B0 03                BCS     LAB_185E        ; branch if less than terminal width
003018  1               
003018  1  20 29 30             JSR     LAB_CRLF        ; else print CR/LF
00301B  1               LAB_185E:
00301B  1  20 74 30             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
00301E  1  F0 B2                BEQ     LAB_182C        ; always go continue processing line
003020  1               
003020  1               ; CR/LF return to BASIC from BASIC input handler
003020  1               
003020  1               LAB_1866:
003020  1  A9 00                LDA     #$00            ; clear byte
003022  1  9D 81 21             STA     Ibuffs,X        ; null terminate input
003025  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
003027  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
003029  1               ; print CR/LF
003029  1               
003029  1               LAB_CRLF:
003029  1  A9 0D                LDA     #$0D            ; load [CR]
00302B  1  20 9F 30             JSR     LAB_PRNA        ; go print the character
00302E  1  A9 0A                LDA     #$0A            ; load [LF]
003030  1  D0 6D                BNE     LAB_PRNA        ; go print the character and return, branch always
003032  1               LAB_188B:
003032  1  A5 0E                LDA     <TPos           ; get terminal position
003034  1  C5 10                CMP     <Iclim          ; compare with input column limit
003036  1  90 05                BCC     LAB_1897        ; branch if less
003038  1               
003038  1  20 29 30             JSR     LAB_CRLF        ; else print CR/LF (next line)
00303B  1  D0 2A                BNE     LAB_18BD        ; continue with PRINT processing (branch always)
00303D  1               
00303D  1               LAB_1897:
00303D  1  38                   SEC                     ; set carry for subtract
00303E  1               LAB_1898:
00303E  1  E5 64                SBC     <TabSiz         ; subtract TAB size
003040  1  B0 FC                BCS     LAB_1898        ; loop if result was +ve
003042  1               
003042  1  49 FF                EOR     #$FF            ; complement it
003044  1  69 01                ADC     #$01            ; +1 (twos complement)
003046  1  D0 15                BNE     LAB_18B6        ; always print A spaces (result is never $00)
003048  1               
003048  1               ; do TAB/SPC
003048  1               LAB_18A2:
003048  1  48                   PHA                     ; save token
003049  1  20 86 3F             JSR     LAB_SGBY        ; scan and get byte parameter
00304C  1  C9 29                CMP     #$29            ; is next character )
00304E  1  F0 03                BEQ     LAB_18A2aa
003050  1               ;BNE	LAB_1910		; if not do syntax error then warm start
003050  1  4C E6 30             JMP     LAB_1910        ; if not do syntax error then warm start
003053  1               LAB_18A2aa:
003053  1  68                   PLA                     ; get token back
003054  1  C9 BC                CMP     #TK_TAB         ; was it TAB ?
003056  1  D0 06                BNE     LAB_18B7        ; if not go do SPC
003058  1               
003058  1               ; calculate TAB offset
003058  1  8A                   TXA                     ; copy integer value to A
003059  1  E5 0E                SBC     <TPos           ; subtract terminal position
00305B  1  90 0A                BCC     LAB_18BD        ; branch if result was < 0 (can't TAB backwards)
00305D  1               
00305D  1               ; print A spaces
00305D  1               LAB_18B6:
00305D  1  AA                   TAX                     ; copy result to X
00305E  1               LAB_18B7:
00305E  1  8A                   TXA                     ; set flags on size for SPC
00305F  1  F0 06                BEQ     LAB_18BD        ; branch if result was = $0, already here
003061  1               
003061  1               ; print X spaces
003061  1               LAB_18BA:
003061  1  20 9A 30             JSR     LAB_18E0        ; print " "
003064  1  CA                   DEX                     ; decrement count
003065  1  D0 FA                BNE     LAB_18BA        ; loop if not all done
003067  1               
003067  1               ; continue with PRINT processing
003067  1               LAB_18BD:
003067  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00306B  1  F0 03                BEQ     LAB_18BDA
00306D  1  4C D8 2F             JMP     LAB_1831        ; if more to print go do it
003070  1               LAB_18BDA:
003070  1  60                   RTS
003071  1               
003071  1               ; print null terminated string from memory
003071  1               
003071  1               LAB_18C3:
003071  1  20 24 3A             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
003074  1               
003074  1               ; print string from <Sutill/<Sutilh
003074  1               
003074  1               LAB_18C6:
003074  1  20 01 3D             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
003077  1               ; space returns with A = length, X=$71=pointer low byte,
003077  1               ; Y=$72=pointer high byte
003077  1  A0 00                LDY     #$00            ; reset index
003079  1  AA                   TAX                     ; copy length to X
00307A  1  F0 5D                BEQ     LAB_188C        ; exit (RTS) if null string
00307C  1               LAB_18CD:
00307C  1               
00307C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get next byte
003080  1  B5 71 C9 00  
003084  1  D0 04 A2 00  
003092  1  20 9F 30             JSR     LAB_PRNA        ; go print the character
003095  1  C8                   INY                     ; increment index
003096  1  CA                   DEX                     ; decrement count
003097  1  D0 E3                BNE     LAB_18CD        ; loop if not done yet
003099  1  60                   RTS
00309A  1               
00309A  1               ; Print single format character
00309A  1               ; print " "
00309A  1               
00309A  1               LAB_18E0:
00309A  1  A9 20                LDA     #$20            ; load " "
00309C  1  2C                   .BYTE   $2C             ; change next line to BIT LAB_3FA9
00309D  1               
00309D  1               ; print "?" character
00309D  1               
00309D  1               LAB_18E3:
00309D  1  A9 3F                LDA     #$3F            ; load "?" character
00309F  1               
00309F  1               ; print character in A
00309F  1               ; now includes the null handler
00309F  1               ; also includes infinite line length code
00309F  1               ; note! some routines expect this one to exit with Zb=0
00309F  1               
00309F  1               LAB_PRNA:
00309F  1  C9 20                CMP     #' '            ; compare with " "
0030A1  1  90 19                BCC     LAB_18F9        ; branch if less (non printing)
0030A3  1               
0030A3  1               ; else printable character
0030A3  1  48                   PHA                     ; save the character
0030A4  1               
0030A4  1               ; don't check fit if terminal width byte is zero
0030A4  1               
0030A4  1  A5 0F                LDA     <TWidth         ; get terminal width
0030A6  1  D0 0A                BNE     LAB_18F0        ; branch if not zero (not infinite length)
0030A8  1               
0030A8  1               ; is "infinite line" so check TAB position
0030A8  1               
0030A8  1  A5 0E                LDA     <TPos           ; get position
0030AA  1  E5 64                SBC     <TabSiz         ; subtract TAB size, carry set by CMP #$20 above
0030AC  1  D0 0B                BNE     LAB_18F7        ; skip reset if different
0030AE  1               
0030AE  1  85 0E                STA     <TPos           ; else reset position
0030B0  1  F0 07                BEQ     LAB_18F7        ; go print character
0030B2  1               
0030B2  1               LAB_18F0:
0030B2  1  C5 0E                CMP     <TPos           ; compare with terminal character position
0030B4  1  D0 03                BNE     LAB_18F7        ; branch if not at end of line
0030B6  1               
0030B6  1  20 29 30             JSR     LAB_CRLF        ; else print CR/LF
0030B9  1               LAB_18F7:
0030B9  1  E6 0E                INC     <TPos           ; increment terminal position
0030BB  1  68                   PLA                     ; get character back
0030BC  1               LAB_18F9:
0030BC  1  20 D8 18             JSR     V_OUTP          ; output byte via output vector
0030BF  1  C9 0D                CMP     #$0D            ; compare with [CR]
0030C1  1  D0 14                BNE     LAB_188A        ; branch if not [CR]
0030C3  1               
0030C3  1               ; else print nullct nulls after the [CR]
0030C3  1  86 78                STX     <TempB          ; save buffer index
0030C5  1  A6 0D                LDX     <Nullct         ; get null count
0030C7  1  F0 0A                BEQ     LAB_1886        ; branch if no nulls
0030C9  1               
0030C9  1  A9 00                LDA     #$00            ; load [NULL]
0030CB  1               LAB_1880:
0030CB  1  20 9F 30             JSR     LAB_PRNA        ; go print the character
0030CE  1  CA                   DEX                     ; decrement count
0030CF  1  D0 FA                BNE     LAB_1880        ; loop if not all done
0030D1  1               
0030D1  1  A9 0D                LDA     #$0D            ; restore the character (and set the flags)
0030D3  1               LAB_1886:
0030D3  1  86 0E                STX     <TPos           ; clear terminal position (X always = zero when we get here)
0030D5  1  A6 78                LDX     <TempB          ; restore buffer index
0030D7  1               LAB_188A:
0030D7  1  29 FF                AND     #$FF            ; set the flags
0030D9  1               LAB_188C:
0030D9  1  60                   RTS
0030DA  1               
0030DA  1               ; handle bad input data
0030DA  1               
0030DA  1               LAB_1904:
0030DA  1  A5 62                LDA     <Imode          ; get input mode flag, $00=INPUT, $00=READ
0030DC  1  10 0B                BPL     LAB_1913        ; branch if INPUT (go do redo)
0030DE  1               
0030DE  1  A5 8D                LDA     <Dlinel         ; get current DATA line low byte
0030E0  1  A4 8E                LDY     <Dlineh         ; get current DATA line high byte
0030E2  1  85 87                STA     <Clinel         ; save current line low byte
0030E4  1  84 88                STY     <Clineh         ; save current line high byte
0030E6  1               LAB_1910:
0030E6  1  4C 14 34             JMP     LAB_SNER        ; do syntax error then warm start
0030E9  1               
0030E9  1               ; mode was INPUT
0030E9  1               LAB_1913:
0030E9  1  A9 08                LDA     #<LAB_REDO      ; point to redo message (low addr)
0030EB  1  A0 18                LDY     #>LAB_REDO      ; point to redo message (high addr)
0030ED  1  20 71 30             JSR     LAB_18C3        ; print null terminated string from memory
0030F0  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
0030F2  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
0030F4  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0030F6  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
0030F8  1  60                   RTS
0030F9  1               
0030F9  1               ; perform INPUT
0030F9  1               
0030F9  1               LAB_INPUT:
0030F9  1  C9 22                CMP     #$22            ; compare next byte with open quote
0030FB  1  D0 0B                BNE     LAB_1934        ; branch if no prompt string
0030FD  1               
0030FD  1  20 CD 33             JSR     LAB_1BC1        ; print "..." string
003100  1  A9 3B                LDA     #$3B            ; load A with ";"
003102  1  20 01 34             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003105  1  20 74 30             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
003108  1               
003108  1               ; done with prompt, now get data
003108  1               LAB_1934:
003108  1  20 BA 38             JSR     LAB_CKRN        ; check not Direct, back here if ok
00310B  1  20 D5 28             JSR     LAB_INLN        ; print "? " and get BASIC input
00310E  1  A9 00                LDA     #$00            ; set mode = INPUT
003110  1               ;CMP	Ibuffs			; test first byte in buffer
003110  1  80 06                BRA     LAB_1953        ; branch if not null input
003112  1               
003112  1               ;CLC				; was null input so clear carry to exit program
003112  1               ;JMP	LAB_1647		; go do BREAK exit
003112  1               
003112  1               ; perform READ
003112  1               
003112  1               LAB_READ:
003112  1  A6 8F                LDX     <Dptrl          ; get DATA pointer low byte
003114  1  A4 90                LDY     <Dptrh          ; get DATA pointer high byte
003116  1  A9 80                LDA     #$80            ; set mode = READ
003118  1               
003118  1               LAB_1953:
003118  1  85 62                STA     <Imode          ; set input mode flag, $00=INPUT, $80=READ
00311A  1  86 91                STX     <Rdptrl         ; save READ pointer low byte
00311C  1  84 92                STY     <Rdptrh         ; save READ pointer high byte
00311E  1               
00311E  1               ; READ or INPUT next variable from list
00311E  1               LAB_195B:
00311E  1  20 EB 35             JSR     LAB_GVAR        ; get (var) address
003121  1  85 97                STA     <Lvarpl         ; save address low byte
003123  1  84 98                STY     <Lvarph         ; save address high byte
003125  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
003127  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003129  1  85 11                STA     <Itempl         ; save as temporary integer low byte
00312B  1  84 12                STY     <Itemph         ; save as temporary integer high byte
00312D  1  A6 91                LDX     <Rdptrl         ; get READ pointer low byte
00312F  1  A4 92                LDY     <Rdptrh         ; get READ pointer high byte
003131  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
003133  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
003135  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003139  1  D0 0C                BNE     LAB_1988        ; branch if not null
00313B  1               
00313B  1               ; pointer was to null entry
00313B  1  24 62                BIT     <Imode          ; test input mode flag, $00=INPUT, $80=READ
00313D  1  30 63                BMI     LAB_19DD        ; branch if READ
00313F  1               
00313F  1               ; mode was INPUT
00313F  1               ;JSR	LAB_18E3		; print "?" character (double ? for extended input)
00313F  1               ;JSR	LAB_INLN		; print "? " and get BASIC input
00313F  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
003141  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
003143  1               LAB_1985:
003143  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003147  1               LAB_1988:
003147  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
003149  1  10 24                BPL     LAB_19B0        ; branch if numeric
00314B  1               
00314B  1               ; else get string
00314B  1  85 5B                STA     <Srchc          ; save search character
00314D  1  C9 22                CMP     #$22            ; was it " ?
00314F  1  F0 07                BEQ     LAB_1999        ; branch if so
003151  1               
003151  1  A9 3A                LDA     #':'            ; else search character is ":"
003153  1  85 5B                STA     <Srchc          ; set new search character
003155  1  A9 2C                LDA     #','            ; other search character is ","
003157  1  18                   CLC                     ; clear carry for add
003158  1               LAB_1999:
003158  1  85 5C                STA     <Asrch          ; set second search character
00315A  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
00315C  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
00315E  1               
00315E  1  69 00                ADC     #$00            ; c is =1 if we came via the BEQ LAB_1999, else =0
003160  1  90 01                BCC     LAB_19A4        ; branch if no execute pointer low byte rollover
003162  1               
003162  1  C8                   INY                     ; else increment high byte
003163  1               LAB_19A4:
003163  1  20 2A 3A             JSR     LAB_20B4        ; print <Srchc or <Asrch terminated string to <Sutill/<Sutilh
003166  1  20 0C 40             JSR     LAB_23F3        ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
003169  1  20 88 2E             JSR     LAB_17D5        ; go do string LET
00316C  1  4C 75 31             JMP     LAB_19B6        ; go check string terminator
00316F  1               
00316F  1               ; get numeric INPUT
00316F  1               LAB_19B0:
00316F  1  20 95 46             JSR     LAB_2887        ; get FAC1 from string
003172  1  20 DE 44             JSR     LAB_PFAC        ; pack FAC1 into (<Lvarpl)
003175  1               LAB_19B6:
003175  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003179  1  F0 0B                BEQ     LAB_19C5        ; branch if null (last entry)
00317B  1               
00317B  1  C9 2C                CMP     #','            ; else compare with ","
00317D  1  F0 03                BEQ     LAB_19C2        ; branch if ","
00317F  1               
00317F  1  4C DA 30             JMP     LAB_1904        ; else go handle bad input data
003182  1               
003182  1               ; got good input data
003182  1               LAB_19C2:
003182  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003186  1               LAB_19C5:
003186  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
003188  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
00318A  1  85 91                STA     <Rdptrl         ; save for now
00318C  1  84 92                STY     <Rdptrh         ; save for now
00318E  1  A5 11                LDA     <Itempl         ; get temporary integer low byte (temp BASIC execute ptr)
003190  1  A4 12                LDY     <Itemph         ; get temporary integer high byte (temp BASIC execute ptr)
003192  1  85 C3                STA     <Bpntrl         ; set BASIC execute pointer low byte
003194  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
003196  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00319A  1  F0 30                BEQ     LAB_1A03        ; if null go do extra ignored message
00319C  1               
00319C  1  20 10 34             JSR     LAB_1C01        ; else scan for "," , else do syntax error then warm start
00319F  1  4C 1E 31             JMP     LAB_195B        ; go INPUT next variable from list
0031A2  1               
0031A2  1               ; find next DATA statement or do "Out of DATA" error
0031A2  1               LAB_19DD:
0031A2  1  20 58 2D             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
0031A5  1  C8                   INY                     ; increment index
0031A6  1  AA                   TAX                     ; copy character ([:] or [EOL])
0031A7  1  D0 15                BNE     LAB_19F6        ; branch if [:]
0031A9  1               
0031A9  1  A2 06                LDX     #$06            ; set for "Out of DATA" error
0031AB  1  C8                   INY                     ; increment index, now points to next line pointer high byte
0031AC  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
0031AE  1  D0 03                BNE     LAB_19DE        ; branch if NOT end (eventually does error X)
0031B0  1  4C 6D 32             JMP     LAB_1A54
0031B3  1               LAB_19DE:
0031B3  1  C8                   INY                     ; increment index
0031B4  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # low byte
0031B6  1  85 8D                STA     <Dlinel         ; save current DATA line low byte
0031B8  1  C8                   INY                     ; increment index
0031B9  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # high byte
0031BB  1  C8                   INY                     ; increment index
0031BC  1  85 8E                STA     <Dlineh         ; save current DATA line high byte
0031BE  1               LAB_19F6:
0031BE  1  B1 C3                LDA     (<Bpntrl),Y     ; get byte
0031C0  1  C8                   INY                     ; increment index
0031C1  1  AA                   TAX                     ; copy to X
0031C2  1  20 4A 2D             JSR     LAB_170F        ; set BASIC execute pointer
0031C5  1  E0 83                CPX     #TK_DATA        ; compare with "DATA" token
0031C7  1  D0 D9                BNE     LAB_19DD        ; go find next statement if not "DATA"
0031C9  1  4C 43 31             JMP     LAB_1985        ; was "DATA" so go do next READ
0031CC  1               
0031CC  1               ; end of INPUT/READ routine
0031CC  1               
0031CC  1               LAB_1A03:
0031CC  1  A5 91                LDA     <Rdptrl         ; get temp READ pointer low byte
0031CE  1  A4 92                LDY     <Rdptrh         ; get temp READ pointer high byte
0031D0  1  A6 62                LDX     <Imode          ; get input mode flag, $00=INPUT, $80=READ
0031D2  1  10 03                BPL     LAB_1A0E        ; branch if INPUT
0031D4  1               
0031D4  1  4C 02 2C             JMP     LAB_1624        ; save AY as DATA pointer and return
0031D7  1               
0031D7  1               ; we were getting INPUT
0031D7  1               LAB_1A0E:
0031D7  1  A0 00                LDY     #$00            ; clear index
0031D9  1  8B DA A2 01          LDAINDIRECTY Rdptrl     ; get next byte
0031DD  1  B5 91 C9 00  
0031E1  1  D0 04 A2 00  
0031EF  1  D0 01                BNE     LAB_1A1B        ; error if not end of INPUT
0031F1  1               
0031F1  1  60                   RTS
0031F2  1               
0031F2  1               ; user typed too much
0031F2  1               LAB_1A1B:
0031F2  1  A9 F7                LDA     #<LAB_IMSG      ; point to extra ignored message (low addr)
0031F4  1  A0 17                LDY     #>LAB_IMSG      ; point to extra ignored message (high addr)
0031F6  1  4C 71 30             JMP     LAB_18C3        ; print null terminated string from memory and return
0031F9  1               
0031F9  1               ; search the stack for FOR activity
0031F9  1               ; exit with z=1 if FOR else exit with z=0
0031F9  1               
0031F9  1               LAB_11A1:
0031F9  1  C2 10                INDEX16
0031FB  1  BA                   TSX                     ; copy stack pointer
0031FC  1  E8                   INX                     ; +1 pass return address
0031FD  1  E8                   INX                     ; +2 pass return address
0031FE  1  E8                   INX                     ; +3 pass calling routine return address
0031FF  1  E8                   INX                     ; +4 pass calling routine return address
003200  1               LAB_11A6:
003200  1  8B                   PHB
003201  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
003203  1  48                   PHA
003204  1  AB                   PLB
003205  1  BD 01 00             LDA     a:1,X           ; get token byte from stack
003208  1  AB                   PLB
003209  1  C9 81                CMP     #TK_FOR         ; is it FOR token
00320B  1  D0 47                BNE     LAB_11CE        ; exit if not FOR token
00320D  1               
00320D  1               ; was FOR token
00320D  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
00320F  1  D0 10                BNE     LAB_11BB        ; branch if not null
003211  1               
003211  1  8B                   PHB
003212  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
003214  1  48                   PHA
003215  1  AB                   PLB
003216  1  BD 02 00             LDA     a:2,X           ; get FOR variable pointer low byte
003219  1  85 97                STA     <Frnxtl         ; save var pointer for FOR/NEXT low byte
00321B  1  BD 03 00             LDA     a:3,X           ; get FOR variable pointer high byte
00321E  1  85 98                STA     <Frnxth         ; save var pointer for FOR/NEXT high byte
003220  1  AB                   PLB
003221  1               LAB_11BB:
003221  1  8B                   PHB
003222  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
003224  1  48                   PHA
003225  1  AB                   PLB
003226  1  BD 03 00             LDA     a:3,X
003229  1  85 04                STA     <TMPFLG
00322B  1  AB                   PLB
00322C  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
00322E  1  D0 11                BNE     LAB_11C7        ; branch if no match
003230  1               
003230  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
003232  1  8B                   PHB
003233  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
003235  1  48                   PHA
003236  1  AB                   PLB
003237  1  BD 02 00             LDA     a:2,X
00323A  1  85 04                STA     <TMPFLG
00323C  1  AB                   PLB
00323D  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
00323F  1  F0 13                BEQ     LAB_11CE        ; exit if match found
003241  1               
003241  1               LAB_11C7:
003241  1  E8                   INX
003242  1  E8                   INX
003243  1  E8                   INX
003244  1  E8                   INX
003245  1  E8                   INX
003246  1  E8                   INX
003247  1  E8                   INX
003248  1  E8                   INX
003249  1  E8                   INX
00324A  1  E8                   INX
00324B  1  E8                   INX
00324C  1  E8                   INX
00324D  1  E8                   INX
00324E  1  E8                   INX
00324F  1  E8                   INX
003250  1  E8                   INX
003251  1  9A                   TXS                     ; copy back to index
003252  1  D0 AC                BNE     LAB_11A6        ; loop if not at start of stack
003254  1               LAB_11CE:
003254  1  86 FD                STX     <TEMPW
003256  1  E2 10                INDEX8
003258  1  60                   RTS
003259  1               
003259  1               ; perform NEXT
003259  1               
003259  1               LAB_NEXT:
003259  1  D0 04                BNE     LAB_1A46        ; branch if NEXT var
00325B  1               
00325B  1  A0 00                LDY     #$00            ; else clear Y
00325D  1  F0 03                BEQ     LAB_1A49        ; branch always (no variable to search for)
00325F  1               
00325F  1               ; NEXT var
00325F  1               
00325F  1               LAB_1A46:
00325F  1  20 EB 35             JSR     LAB_GVAR        ; get variable address
003262  1               LAB_1A49:
003262  1  85 97                STA     <Frnxtl         ; store variable pointer low byte
003264  1  84 98                STY     <Frnxth         ; store variable pointer high byte
003266  1               ; (both cleared if no variable defined)
003266  1  20 F9 31             JSR     LAB_11A1        ; search the stack for FOR activity
003269  1  F0 04                BEQ     LAB_1A56        ; branch if found
00326B  1               
00326B  1  A2 00                LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
00326D  1               LAB_1A54:
00326D  1  F0 7C                BEQ     LAB_1ABE        ; do error #X, then warm start
00326F  1               
00326F  1               
00326F  1               LAB_1A56:
00326F  1  C2 30                ACCUMULATORINDEX16
003271  1  A6 FD                LDX     <TEMPW
003273  1  9A                   TXS                     ; set stack pointer, X set by search, dumps return addresses
003274  1  8A                   TXA                     ; copy stack pointer
003275  1  18                   CLC                     ; CLEAR carry
003276  1               
003276  1  69 09 00             ADC     #$0009          ; point to TO var
003279  1  85 73                STA     <ut2_pl         ; save pointer to TO var for compare
00327B  1  38                   SEC
00327C  1  E9 05 00             SBC     #$0005          ; point to STEP var
00327F  1  85 FD                STA     <TEMPW
003281  1               
003281  1  E2 30                ACCUMULATORINDEX8
003283  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
003285  1               
003285  1  8B                   PHB                     ; ensure UNPACK works in stack bank not data bank
003286  1  DA                   PHX
003287  1  A2 00                LDX     #$00
003289  1  DA                   PHX
00328A  1  AB                   PLB
00328B  1  FA                   PLX
00328C  1  20 68 44             JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
00328F  1  AB                   PLB
003290  1               
003290  1  A3 08                LDA     8,S             ; get step sign
003292  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003294  1  A5 97                LDA     <Frnxtl         ; get FOR variable pointer low byte
003296  1  A4 98                LDY     <Frnxth         ; get FOR variable pointer high byte
003298  1  20 53 41             JSR     LAB_246C        ; add (FOR variable) to FAC1
00329B  1  20 DE 44             JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
00329E  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
0032A0  1               
0032A0  1  8B                   PHB                     ; ensure compare works in stack bank not data bank
0032A1  1  DA                   PHX
0032A2  1  A2 00                LDX     #$00
0032A4  1  DA                   PHX
0032A5  1  AB                   PLB
0032A6  1  FA                   PLX
0032A7  1               
0032A7  1  20 A4 45             JSR     LAB_27FA        ; compare FAC1 with (Y,<ut2_pl) (TO value)
0032AA  1  AB                   PLB
0032AB  1               
0032AB  1               
0032AB  1  C3 08                CMP     8,S             ; compare step sign
0032AD  1  F0 13                BEQ     LAB_1A9B        ; branch if = (loop complete)
0032AF  1               ;
0032AF  1               ;					; loop back and do it all again
0032AF  1  A3 0D                LDA     $0D,S           ; get FOR line low byte
0032B1  1  85 87                STA     <Clinel         ; save current line low byte
0032B3  1  A3 0E                LDA     $0E,S           ; get FOR line high byte
0032B5  1  85 88                STA     <Clineh         ; save current line high byte
0032B7  1  A3 10                LDA     $10,S           ; get BASIC execute pointer low byte
0032B9  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0032BB  1  A3 0F                LDA     $0F,S           ; get BASIC execute pointer high byte
0032BD  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
0032BF  1               LAB_1A98:
0032BF  1  4C 6D 2B             JMP     LAB_15C2        ; go do interpreter inner loop
0032C2  1               ;
0032C2  1               ;					; loop complete so carry on
0032C2  1               LAB_1A9B:
0032C2  1               
0032C2  1               
0032C2  1  C2 30                ACCUMULATORINDEX16
0032C4  1  3B                   TSC                     ; stack copy to A
0032C5  1               ;;;;;;;;;;;;;;;;;;; THIS MAY NOT BE RIGHT !@#$%^&* TAG
0032C5  1  69 0F 00             ADC     #$000F          ; add $10 ($0F+carry) to dump FOR structure
0032C8  1  1B                   TCS                     ; copy back to index
0032C9  1  E2 30                ACCUMULATORINDEX8
0032CB  1               
0032CB  1               
0032CB  1               
0032CB  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0032CF  1  C9 2C                CMP     #','            ; compare with ","
0032D1  1  D0 EC                BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
0032D3  1               
0032D3  1               ; was "," so another NEXT variable to do
0032D3  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
0032D7  1  20 5F 32             JSR     LAB_1A46        ; do NEXT (var)
0032DA  1               
0032DA  1               ; evaluate expression and check is numeric, else do type mismatch
0032DA  1               
0032DA  1               LAB_EVNM:
0032DA  1  20 EE 32             JSR     LAB_EVEX        ; evaluate expression
0032DD  1               
0032DD  1               ; check if source is numeric, else do type mismatch
0032DD  1               
0032DD  1               LAB_CTNM:
0032DD  1  18                   CLC                     ; destination is numeric
0032DE  1  24                   .BYTE   $24             ; makes next line BIT $38
0032DF  1               
0032DF  1               ; check if source is string, else do type mismatch
0032DF  1               
0032DF  1               LAB_CTST:
0032DF  1  38                   SEC                     ; required type is string
0032E0  1               
0032E0  1               ; type match check, set C for string, clear C for numeric
0032E0  1               
0032E0  1               LAB_CKTM:
0032E0  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
0032E2  1  30 03                BMI     LAB_1ABA        ; branch if data type is string
0032E4  1               
0032E4  1               ; else data type was numeric
0032E4  1  B0 03                BCS     LAB_1ABC        ; if required type is string do type mismatch error
0032E6  1               LAB_1AB9:
0032E6  1  60                   RTS
0032E7  1               
0032E7  1               ; data type was string, now check required type
0032E7  1               LAB_1ABA:
0032E7  1  B0 FD                BCS     LAB_1AB9        ; exit if required type is string
0032E9  1               
0032E9  1               ; else do type mismatch error
0032E9  1               LAB_1ABC:
0032E9  1  A2 18                LDX     #$18            ; error code $18 ("Type mismatch" error)
0032EB  1               LAB_1ABE:
0032EB  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
0032EE  1               
0032EE  1               ; evaluate expression
0032EE  1               
0032EE  1               LAB_EVEX:
0032EE  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
0032F0  1  D0 02                BNE     LAB_1AC7        ; skip next if not zero
0032F2  1               
0032F2  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
0032F4  1               LAB_1AC7:
0032F4  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
0032F6  1               
0032F6  1               LAB_EVEZ:
0032F6  1  A9 00                LDA     #$00            ; set null precedence (flag done)
0032F8  1               LAB_1ACC:
0032F8  1  48                   PHA                     ; push precedence byte
0032F9  1  A9 02                LDA     #$02            ; 2 bytes
0032FB  1  20 87 27             JSR     LAB_1212        ; check room on stack for A bytes
0032FE  1  20 DC 33             JSR     LAB_GVAL        ; get value from line
003301  1  A9 00                LDA     #$00            ; clear A
003303  1  85 9B                STA     <comp_f         ; clear compare function flag
003305  1               LAB_1ADB:
003305  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003309  1               LAB_1ADE:
003309  1  38                   SEC                     ; set carry for subtract
00330A  1  E9 D1                SBC     #TK_GT          ; subtract token for > (lowest comparison function)
00330C  1  90 18                BCC     LAB_1AFA        ; branch if < TK_GT
00330E  1               
00330E  1  C9 03                CMP     #$03            ; compare with ">" to "<" tokens
003310  1  B0 14                BCS     LAB_1AFA        ; branch if >= TK_SGN (highest evaluation function +1)
003312  1               
003312  1               ; was token for > = or < (A = 0, 1 or 2)
003312  1  C9 01                CMP     #$01            ; compare with token for =
003314  1  2A                   ROL     A               ; *2, b0 = carry (=1 if token was = or <)
003315  1               ; (A = 0, 3 or 5)
003315  1  49 01                EOR     #$01            ; toggle b0
003317  1               ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
003317  1  45 9B                EOR     <comp_f         ; EOR with compare function flag bits
003319  1  C5 9B                CMP     <comp_f         ; compare with compare function flag
00331B  1  90 68                BCC     LAB_1B53        ; if <(<comp_f) do syntax error then warm start
00331D  1               ; was more than one <, = or >)
00331D  1               
00331D  1  85 9B                STA     <comp_f         ; save new compare function flag
00331F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003323  1  4C 09 33             JMP     LAB_1ADE        ; go do next character
003326  1               
003326  1               ; token is < ">" or > "<" tokens
003326  1               LAB_1AFA:
003326  1  A6 9B                LDX     <comp_f         ; get compare function flag
003328  1  D0 2C                BNE     LAB_1B2A        ; branch if compare function
00332A  1               
00332A  1  B0 79                BCS     LAB_1B78        ; go do functions
00332C  1               
00332C  1               ; else was <  TK_GT so is operator or lower
00332C  1  69 0A                ADC     #TK_GT-TK_PLUS  ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
00332E  1  90 75                BCC     LAB_1B78        ; branch if < + operator
003330  1               
003330  1               ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
003330  1  D0 07                BNE     LAB_1B0B        ; branch if not + token
003332  1               
003332  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
003334  1  10 03                BPL     LAB_1B0B        ; branch if not string
003336  1               
003336  1               ; will only be $00 if type is string and token was +
003336  1  4C 08 3C             JMP     LAB_224D        ; add strings, string 1 is in descriptor <des_pl, string 2
003339  1               ; is in line, and return
003339  1               
003339  1               LAB_1B0B:
003339  1  85 71                STA     <ut1_pl         ; save it
00333B  1  0A                   ASL     A               ; *2
00333C  1  65 71                ADC     <ut1_pl         ; *3
00333E  1  A8                   TAY                     ; copy to index
00333F  1               LAB_1B13:
00333F  1  68                   PLA                     ; pull previous precedence
003340  1  D9 58 11             CMP     LAB_OPPT,Y      ; compare with precedence byte
003343  1  B0 65                BCS     LAB_1B7D        ; branch if A >=
003345  1               
003345  1  20 DD 32             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003348  1               LAB_1B1C:
003348  1  48                   PHA                     ; save precedence
003349  1               LAB_1B1D:
003349  1  20 71 33             JSR     LAB_1B43        ; get vector, execute function then continue evaluation
00334C  1  68                   PLA                     ; restore precedence
00334D  1  A4 99                LDY     <prstk          ; get precedence stacked flag
00334F  1  10 19                BPL     LAB_1B3C        ; branch if stacked values
003351  1               
003351  1  AA                   TAX                     ; copy precedence (set flags)
003352  1  F0 76                BEQ     LAB_1B9D        ; exit if done
003354  1               
003354  1  D0 5D                BNE     LAB_1B86        ; else pop FAC2 and return, branch always
003356  1               
003356  1               LAB_1B2A:
003356  1  26 5F                ROL     <Dtypef         ; shift data type flag into Cb
003358  1  8A                   TXA                     ; copy compare function flag
003359  1  85 5F                STA     <Dtypef         ; clear data type flag, X is 0xxx xxxx
00335B  1  2A                   ROL     A               ; shift data type into compare function byte b0
00335C  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
00335E  1  D0 02                BNE     LAB_1B34        ; branch if no underflow
003360  1               
003360  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
003362  1               LAB_1B34:
003362  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
003364  1               TK_LT_PLUS      = TK_LT-TK_PLUS
003364  1  A0 24                LDY     #TK_LT_PLUS*3   ; set offset to last operator entry
003366  1  85 9B                STA     <comp_f         ; save new compare function flag
003368  1  D0 D5                BNE     LAB_1B13        ; branch always
00336A  1               
00336A  1               LAB_1B3C:
00336A  1  D9 58 11             CMP     LAB_OPPT,Y      ;.compare with stacked function precedence
00336D  1  B0 44                BCS     LAB_1B86        ; branch if A >=, pop FAC2 and return
00336F  1               
00336F  1  90 D7                BCC     LAB_1B1C        ; branch always
003371  1               
003371  1               ;.get vector, execute function then continue evaluation
003371  1               
003371  1               LAB_1B43:
003371  1  B9 5A 11             LDA     LAB_OPPT+2,Y    ; get function vector high byte
003374  1  48                   PHA                     ; onto stack
003375  1  B9 59 11             LDA     LAB_OPPT+1,Y    ; get function vector low byte
003378  1  48                   PHA                     ; onto stack
003379  1               ; now push sign, round FAC1 and put on stack
003379  1  20 88 33             JSR     LAB_1B5B        ; function will return here, then the next RTS will call
00337C  1               ; the function
00337C  1  A5 9B                LDA     <comp_f         ; get compare function flag
00337E  1  48                   PHA                     ; push compare evaluation byte
00337F  1  B9 58 11             LDA     LAB_OPPT,Y      ; get precedence byte
003382  1  4C F8 32             JMP     LAB_1ACC        ; continue evaluating expression
003385  1               
003385  1               LAB_1B53:
003385  1  4C 14 34             JMP     LAB_SNER        ; do syntax error then warm start
003388  1               
003388  1               ; push sign, round FAC1 and put on stack
003388  1               
003388  1               LAB_1B5B:
003388  1  68                   PLA                     ; get return addr low byte
003389  1  85 71                STA     <ut1_pl         ; save it
00338B  1  E6 71                INC     <ut1_pl         ; increment it (was ret-1 pushed? yes!)
00338D  1               ; note! no check is made on the high byte! if the calling
00338D  1               ; routine assembles to a page edge then this all goes
00338D  1               ; horribly wrong !!!
00338D  1  68                   PLA                     ; get return addr high byte
00338E  1  85 72                STA     <ut1_ph         ; save it
003390  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003392  1  48                   PHA                     ; push sign
003393  1               
003393  1               ; round FAC1 and put on stack
003393  1               
003393  1               LAB_1B66:
003393  1  20 64 45             JSR     LAB_27BA        ; round FAC1
003396  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003398  1  48                   PHA                     ; push on stack
003399  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00339B  1  48                   PHA                     ; push on stack
00339C  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
00339E  1  48                   PHA                     ; push on stack
00339F  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0033A1  1  48                   PHA                     ; push on stack
0033A2  1  6C 71 00             JMP     (ut1_pl)        ; return, sort of
0033A5  1               
0033A5  1               ; do functions
0033A5  1               
0033A5  1               LAB_1B78:
0033A5  1  A0 FF                LDY     #$FF            ; flag function
0033A7  1  68                   PLA                     ; pull precedence byte
0033A8  1               LAB_1B7B:
0033A8  1  F0 20                BEQ     LAB_1B9D        ; exit if done
0033AA  1               
0033AA  1               LAB_1B7D:
0033AA  1  C9 64                CMP     #$64            ; compare previous precedence with $64
0033AC  1  F0 03                BEQ     LAB_1B84        ; branch if was $64 (< function)
0033AE  1               
0033AE  1  20 DD 32             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0033B1  1               LAB_1B84:
0033B1  1  84 99                STY     <prstk          ; save precedence stacked flag
0033B3  1               
0033B3  1               ; pop FAC2 and return
0033B3  1               LAB_1B86:
0033B3  1  68                   PLA                     ; pop byte
0033B4  1  4A                   LSR     A               ; shift out comparison evaluation lowest bit
0033B5  1  85 63                STA     <Cflag          ; save comparison evaluation flag
0033B7  1  68                   PLA                     ; pop exponent
0033B8  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
0033BA  1  68                   PLA                     ; pop mantissa1
0033BB  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
0033BD  1  68                   PLA                     ; pop mantissa2
0033BE  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
0033C0  1  68                   PLA                     ; pop mantissa3
0033C1  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
0033C3  1  68                   PLA                     ; pop sign
0033C4  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
0033C6  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
0033C8  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
0033CA  1               LAB_1B9D:
0033CA  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0033CC  1  60                   RTS
0033CD  1               
0033CD  1               ; print "..." string to string util area
0033CD  1               
0033CD  1               LAB_1BC1:
0033CD  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0033CF  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
0033D1  1  69 00                ADC     #$00            ; add carry to low byte
0033D3  1  90 01                BCC     LAB_1BCA        ; branch if no overflow
0033D5  1               
0033D5  1  C8                   INY                     ; increment high byte
0033D6  1               LAB_1BCA:
0033D6  1  20 24 3A             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
0033D9  1  4C 0C 40             JMP     LAB_23F3        ; restore BASIC execute pointer from temp and return
0033DC  1               
0033DC  1               ; get value from line
0033DC  1               
0033DC  1               LAB_GVAL:
0033DC  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0033E0  1  B0 03                BCS     LAB_1BAC        ; branch if not numeric character
0033E2  1               
0033E2  1               ; else numeric string found (e.g. 123)
0033E2  1               LAB_1BA9:
0033E2  1  4C 95 46             JMP     LAB_2887        ; get FAC1 from string and return
0033E5  1               
0033E5  1               ; get value from line .. continued
0033E5  1               
0033E5  1               ; wasn't a number so ..
0033E5  1               LAB_1BAC:
0033E5  1  AA                   TAX                     ; set the flags
0033E6  1  30 31                BMI     LAB_1BD0        ; if -ve go test token values
0033E8  1               
0033E8  1               ; else it is either a string, number, variable or (<expr>)
0033E8  1  C9 24                CMP     #'$'            ; compare with "$"
0033EA  1  F0 F6                BEQ     LAB_1BA9        ; branch if "$", hex number
0033EC  1               
0033EC  1  C9 25                CMP     #'%'            ; else compare with "%"
0033EE  1  F0 F2                BEQ     LAB_1BA9        ; branch if "%", binary number
0033F0  1               
0033F0  1  C9 2E                CMP     #'.'            ; compare with "."
0033F2  1  F0 EE                BEQ     LAB_1BA9        ; if so get FAC1 from string and return (e.g. was .123)
0033F4  1               
0033F4  1               ; it wasn't any sort of number so ..
0033F4  1  C9 22                CMP     #$22            ; compare with "
0033F6  1  F0 D5                BEQ     LAB_1BC1        ; branch if open quote
0033F8  1               
0033F8  1               ; wasn't any sort of number so ..
0033F8  1               
0033F8  1               ; evaluate expression within parentheses
0033F8  1               
0033F8  1  C9 28                CMP     #'('            ; compare with "("
0033FA  1  D0 51                BNE     LAB_1C18        ; if not "(" get (var), return value in FAC1 and $ flag
0033FC  1               
0033FC  1               LAB_1BF7:
0033FC  1  20 F6 32             JSR     LAB_EVEZ        ; evaluate expression, no decrement
0033FF  1               
0033FF  1               ; all the 'scan for' routines return the character after the sought character
0033FF  1               
0033FF  1               ; scan for ")" , else do syntax error then warm start
0033FF  1               
0033FF  1               LAB_1BFB:
0033FF  1  A9 29                LDA     #$29            ; load A with ")"
003401  1               
003401  1               ; scan for CHR$(A) , else do syntax error then warm start
003401  1               
003401  1               LAB_SCCA:
003401  1  A0 00                LDY     #$00            ; clear index
003403  1  D1 C3                CMP     (<Bpntrl),Y     ; check next byte is = A
003405  1  D0 0D                BNE     LAB_SNER        ; if not do syntax error then warm start
003407  1               
003407  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then return
00340B  1  60                   RTS
00340C  1               ; scan for "(" , else do syntax error then warm start
00340C  1               
00340C  1               LAB_1BFE:
00340C  1  A9 28                LDA     #$28            ; load A with "("
00340E  1  D0 F1                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003410  1               ; (branch always)
003410  1               
003410  1               ; scan for "," , else do syntax error then warm start
003410  1               
003410  1               LAB_1C01:
003410  1  A9 2C                LDA     #$2C            ; load A with ","
003412  1  D0 ED                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003414  1               ; (branch always)
003414  1               
003414  1               ; syntax error then warm start
003414  1               
003414  1               LAB_SNER:
003414  1  A2 02                LDX     #$02            ; error code $02 ("Syntax" error)
003416  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
003419  1               
003419  1               ; get value from line .. continued
003419  1               ; do tokens
003419  1               
003419  1               LAB_1BD0:
003419  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
00341B  1  F0 29                BEQ     LAB_1C11        ; branch if - token (do set-up for functions)
00341D  1               
00341D  1               ; wasn't -n so ..
00341D  1  C9 C7                CMP     #TK_PLUS        ; compare with token for +
00341F  1  F0 BB                BEQ     LAB_GVAL        ; branch if + token (+n = n so ignore leading +)
003421  1               
003421  1  C9 C2                CMP     #TK_NOT         ; compare with token for NOT
003423  1  D0 13                BNE     LAB_1BE7        ; branch if not token for NOT
003425  1               
003425  1               ; was NOT token
003425  1               TK_EQUAL_PLUS   = TK_EQUAL-TK_PLUS
003425  1  A0 21                LDY     #TK_EQUAL_PLUS*3; offset to NOT function
003427  1  D0 1F                BNE     LAB_1C13        ; do set-up for function then execute (branch always)
003429  1               
003429  1               ; do = compare
003429  1               
003429  1               LAB_EQUAL:
003429  1  20 EC 36             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
00342C  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00342E  1  49 FF                EOR     #$FF            ; invert it
003430  1  A8                   TAY                     ; copy it
003431  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003433  1  49 FF                EOR     #$FF            ; invert it
003435  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003438  1               
003438  1               ; get value from line .. continued
003438  1               
003438  1               ; wasn't +, -, or NOT so ..
003438  1               LAB_1BE7:
003438  1  C9 BF                CMP     #TK_FN          ; compare with token for FN
00343A  1  D0 03                BNE     LAB_1BEE        ; branch if not token for FN
00343C  1               
00343C  1  4C 07 39             JMP     LAB_201E        ; go evaluate FNx
00343F  1               
00343F  1               ; get value from line .. continued
00343F  1               
00343F  1               ; wasn't +, -, NOT or FN so ..
00343F  1               LAB_1BEE:
00343F  1  E9 D4                SBC     #TK_SGN         ; subtract with token for SGN
003441  1  B0 19                BCS     LAB_1C27        ; if a function token go do it
003443  1               
003443  1  4C 14 34             JMP     LAB_SNER        ; else do syntax error
003446  1               
003446  1               ; set-up for functions
003446  1               
003446  1               LAB_1C11:
003446  1               TK_GT_PLUS      = TK_GT-TK_PLUS
003446  1  A0 1E                LDY     #TK_GT_PLUS*3   ; set offset from base to > operator
003448  1               LAB_1C13:
003448  1  68                   PLA                     ; dump return address low byte
003449  1  68                   PLA                     ; dump return address high byte
00344A  1  4C 49 33             JMP     LAB_1B1D        ; execute function then continue evaluation
00344D  1               
00344D  1               ; variable name set-up
00344D  1               ; get (var), return value in FAC_1 and $ flag
00344D  1               
00344D  1               LAB_1C18:
00344D  1  20 EB 35             JSR     LAB_GVAR        ; get (var) address
003450  1  85 AE                STA     <FAC1_2         ; save address low byte in FAC1 mantissa2
003452  1  84 AF                STY     <FAC1_3         ; save address high byte in FAC1 mantissa3
003454  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003456  1  30 03                BMI     LAB_1C25        ; if string then return (does RTS)
003458  1               
003458  1               LAB_1C24:
003458  1  4C 68 44             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1
00345B  1               
00345B  1               LAB_1C25:
00345B  1  60                   RTS
00345C  1               
00345C  1               ; get value from line .. continued
00345C  1               ; only functions left so ..
00345C  1               
00345C  1               ; set up function references
00345C  1               
00345C  1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
00345C  1               ; to process function calls. now the function vector is computed and pushed on the stack
00345C  1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
00345C  1               ; is calculated and the routine called, if not this routine just does RTS. whichever
00345C  1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
00345C  1               ; the function code
00345C  1               
00345C  1               ; this also removes some less than elegant code that was used to bypass type checking
00345C  1               ; for functions that returned strings
00345C  1               
00345C  1               LAB_1C27:
00345C  1  0A                   ASL     A               ; *2 (2 bytes per function address)
00345D  1  A8                   TAY                     ; copy to index
00345E  1               
00345E  1  B9 05 11             LDA     LAB_FTBM,Y      ; get function jump vector high byte
003461  1  48                   PHA                     ; push functions jump vector high byte
003462  1  B9 04 11             LDA     LAB_FTBL,Y      ; get function jump vector low byte
003465  1  48                   PHA                     ; push functions jump vector low byte
003466  1               
003466  1  B9 B1 10             LDA     LAB_FTPM,Y      ; get function pre process vector high byte
003469  1  F0 05                BEQ     LAB_1C56        ; skip pre process if null vector
00346B  1               
00346B  1  48                   PHA                     ; push functions pre process vector high byte
00346C  1  B9 B0 10             LDA     LAB_FTPL,Y      ; get function pre process vector low byte
00346F  1  48                   PHA                     ; push functions pre process vector low byte
003470  1               
003470  1               LAB_1C56:
003470  1  60                   RTS                     ; do function, or pre process, call
003471  1               
003471  1               ; process string expression in parenthesis
003471  1               
003471  1               LAB_PPFS:
003471  1  20 FC 33             JSR     LAB_1BF7        ; process expression in parenthesis
003474  1  4C DF 32             JMP     LAB_CTST        ; check if source is string then do function,
003477  1               ; else do type mismatch
003477  1               
003477  1               ; process numeric expression in parenthesis
003477  1               
003477  1               LAB_PPFN:
003477  1  20 FC 33             JSR     LAB_1BF7        ; process expression in parenthesis
00347A  1  4C DD 32             JMP     LAB_CTNM        ; check if source is numeric then do function,
00347D  1               ; else do type mismatch
00347D  1               
00347D  1               ; set numeric data type and increment BASIC execute pointer
00347D  1               
00347D  1               LAB_PPBI:
00347D  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00347F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
003483  1  60                   RTS
003484  1               ; process string for LEFT$, RIGHT$ or MID$
003484  1               
003484  1               LAB_LRMS:
003484  1  20 F6 32             JSR     LAB_EVEZ        ; evaluate (should be string) expression
003487  1  20 10 34             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00348A  1  20 DF 32             JSR     LAB_CTST        ; check if source is string, else do type mismatch
00348D  1               
00348D  1  68                   PLA                     ; get function jump vector low byte
00348E  1  AA                   TAX                     ; save functions jump vector low byte
00348F  1  68                   PLA                     ; get function jump vector high byte
003490  1  A8                   TAY                     ; save functions jump vector high byte
003491  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003493  1  48                   PHA                     ; push string pointer high byte
003494  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003496  1  48                   PHA                     ; push string pointer low byte
003497  1  98                   TYA                     ; get function jump vector high byte back
003498  1  48                   PHA                     ; save functions jump vector high byte
003499  1  8A                   TXA                     ; get function jump vector low byte back
00349A  1  48                   PHA                     ; save functions jump vector low byte
00349B  1  20 8A 3F             JSR     LAB_GTBY        ; get byte parameter
00349E  1  8A                   TXA                     ; copy byte parameter to A
00349F  1  60                   RTS                     ; go do function
0034A0  1               
0034A0  1               ; process numeric expression(s) for BIN$ or HEX$
0034A0  1               
0034A0  1               LAB_BHSS:
0034A0  1  20 F6 32             JSR     LAB_EVEZ        ; process expression
0034A3  1  20 DD 32             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0034A6  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0034A8  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
0034AA  1  B0 22                BCS     LAB_BHER        ; branch if n>=2^24 (is too big)
0034AC  1               
0034AC  1  20 3F 46             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0034AF  1  A2 02                LDX     #$02            ; 3 bytes to do
0034B1  1               LAB_CFAC:
0034B1  1  B5 AD                LDA     <FAC1_1,X       ; get byte from FAC1
0034B3  1  95 11                STA     <nums_1,X       ; save byte to temp
0034B5  1  CA                   DEX                     ; decrement index
0034B6  1  10 F9                BPL     LAB_CFAC        ; copy FAC1 mantissa to temp
0034B8  1               
0034B8  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
0034BC  1  A2 00                LDX     #$00            ; set default to no leading "0"s
0034BE  1  C9 29                CMP     #')'            ; compare with close bracket
0034C0  1  F0 0B                BEQ     LAB_1C54        ; if ")" go do rest of function
0034C2  1               
0034C2  1  20 1B 40             JSR     LAB_SCGB        ; scan for "," and get byte
0034C5  1  22 C2 00 00          JSL     LAB_GBYT        ; get last byte back
0034C9  1  C9 29                CMP     #')'            ; is next character )
0034CB  1  D0 01                BNE     LAB_BHER        ; if not ")" go do error
0034CD  1               
0034CD  1               LAB_1C54:
0034CD  1  60                   RTS                     ; else do function
0034CE  1               
0034CE  1               LAB_BHER:
0034CE  1  4C 73 37             JMP     LAB_FCER        ; do function call error then warm start
0034D1  1               
0034D1  1               ; perform EOR
0034D1  1               
0034D1  1               ; added operator format is the same as AND or OR, precedence is the same as OR
0034D1  1               
0034D1  1               ; this bit worked first time but it took a while to sort out the operator table
0034D1  1               ; pointers and offsets afterwards!
0034D1  1               
0034D1  1               LAB_EOR:
0034D1  1  20 F8 34             JSR     GetFirst        ; get first integer expression (no sign check)
0034D4  1  45 5B                EOR     <XOAw_l         ; EOR with expression 1 low byte
0034D6  1  A8                   TAY                     ; save in Y
0034D7  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0034D9  1  45 5C                EOR     <XOAw_h         ; EOR with expression 1 high byte
0034DB  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0034DE  1               
0034DE  1               ; perform OR
0034DE  1               
0034DE  1               LAB_OR:
0034DE  1  20 F8 34             JSR     GetFirst        ; get first integer expression (no sign check)
0034E1  1  05 5B                ORA     <XOAw_l         ; OR with expression 1 low byte
0034E3  1  A8                   TAY                     ; save in Y
0034E4  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0034E6  1  05 5C                ORA     <XOAw_h         ; OR with expression 1 high byte
0034E8  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0034EB  1               
0034EB  1               ; perform AND
0034EB  1               
0034EB  1               LAB_AND:
0034EB  1  20 F8 34             JSR     GetFirst        ; get first integer expression (no sign check)
0034EE  1  25 5B                AND     <XOAw_l         ; AND with expression 1 low byte
0034F0  1  A8                   TAY                     ; save in Y
0034F1  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0034F3  1  25 5C                AND     <XOAw_h         ; AND with expression 1 high byte
0034F5  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0034F8  1               
0034F8  1               ; get first value for OR, AND or EOR
0034F8  1               
0034F8  1               GetFirst:
0034F8  1  20 EC 36             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0034FB  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0034FD  1  85 5C                STA     <XOAw_h         ; save it
0034FF  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003501  1  85 5B                STA     <XOAw_l         ; save it
003503  1  20 58 41             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
003506  1  20 EC 36             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
003509  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00350B  1               LAB_1C95:
00350B  1  60                   RTS
00350C  1               
00350C  1               ; perform comparisons
00350C  1               
00350C  1               ; do < compare
00350C  1               
00350C  1               LAB_LTHAN:
00350C  1  20 E0 32             JSR     LAB_CKTM        ; type match check, set C for string
00350F  1  B0 13                BCS     LAB_1CAE        ; branch if string
003511  1               
003511  1               ; do numeric < compare
003511  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
003513  1  09 7F                ORA     #$7F            ; set all non sign bits
003515  1  25 B4                AND     <FAC2_1         ; and FAC2 mantissa1 (AND in sign bit)
003517  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
003519  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
00351B  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
00351D  1  20 A2 45             JSR     LAB_27F8        ; compare FAC1 with FAC2 (AY)
003520  1  AA                   TAX                     ; copy result
003521  1  4C 55 35             JMP     LAB_1CE1        ; go evaluate result
003524  1               
003524  1               ; do string < compare
003524  1               LAB_1CAE:
003524  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
003526  1  C6 9B                DEC     <comp_f         ; clear < bit in compare function flag
003528  1  20 01 3D             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
00352B  1               ; space returns with A = length, X=pointer low byte,
00352B  1               ; Y=pointer high byte
00352B  1  85 AC                STA     <str_ln         ; save length
00352D  1  86 AD                STX     <str_pl         ; save string pointer low byte
00352F  1  84 AE                STY     <str_ph         ; save string pointer high byte
003531  1  A5 B5                LDA     <FAC2_2         ; get descriptor pointer low byte
003533  1  A4 B6                LDY     <FAC2_3         ; get descriptor pointer high byte
003535  1  20 05 3D             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003538  1               ; returns with A = length, X=pointer low byte,
003538  1               ; Y=pointer high byte
003538  1  86 B5                STX     <FAC2_2         ; save string pointer low byte
00353A  1  84 B6                STY     <FAC2_3         ; save string pointer high byte
00353C  1  AA                   TAX                     ; copy length
00353D  1  38                   SEC                     ; set carry for subtract
00353E  1  E5 AC                SBC     <str_ln         ; subtract string 1 length
003540  1  F0 08                BEQ     LAB_1CD6        ; branch if str 1 length = string 2 length
003542  1               
003542  1  A9 01                LDA     #$01            ; set str 1 length > string 2 length
003544  1  90 04                BCC     LAB_1CD6        ; branch if so
003546  1               
003546  1  A6 AC                LDX     <str_ln         ; get string 1 length
003548  1  A9 FF                LDA     #$FF            ; set str 1 length < string 2 length
00354A  1               LAB_1CD6:
00354A  1  85 B0                STA     <FAC1_s         ; save length compare
00354C  1  A0 FF                LDY     #$FF            ; set index
00354E  1  E8                   INX                     ; adjust for loop
00354F  1               LAB_1CDB:
00354F  1  C8                   INY                     ; increment index
003550  1  CA                   DEX                     ; decrement count
003551  1  D0 07                BNE     LAB_1CE6        ; branch if still bytes to do
003553  1               
003553  1  A6 B0                LDX     <FAC1_s         ; get length compare back
003555  1               LAB_1CE1:
003555  1  30 39                BMI     LAB_1CF2        ; branch if str 1 < str 2
003557  1               
003557  1  18                   CLC                     ; flag str 1 <= str 2
003558  1  90 36                BCC     LAB_1CF2        ; go evaluate result
00355A  1               
00355A  1               LAB_1CE6:
00355A  1  8B DA A2 01          LDAINDIRECTY FAC2_2     ; get string 2 byte
00355E  1  B5 B5 C9 00  
003562  1  D0 04 A2 00  
003570  1  8B 48 DA A2          CMPINDIRECTY FAC1_1     ; compare with string 1 byte
003574  1  01 B5 AD C9  
003578  1  00 D0 04 A2  
003588  1  F0 C5                BEQ     LAB_1CDB        ; loop if bytes =
00358A  1               
00358A  1  A2 FF                LDX     #$FF            ; set str 1 < string 2
00358C  1  B0 02                BCS     LAB_1CF2        ; branch if so
00358E  1               
00358E  1  A2 01                LDX     #$01            ;  set str 1 > string 2
003590  1               LAB_1CF2:
003590  1  E8                   INX                     ; x = 0, 1 or 2
003591  1  8A                   TXA                     ; copy to A
003592  1  2A                   ROL     A               ; *2 (1, 2 or 4)
003593  1  25 63                AND     <Cflag          ; AND with comparison evaluation flag
003595  1  F0 02                BEQ     LAB_1CFB        ; branch if 0 (compare is false)
003597  1               
003597  1  A9 FF                LDA     #$FF            ; else set result true
003599  1               LAB_1CFB:
003599  1  4C 85 45             JMP     LAB_27DB        ; save A as integer byte and return
00359C  1               
00359C  1               LAB_1CFE:
00359C  1  20 10 34             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00359F  1               
00359F  1               ; perform DIM
00359F  1               
00359F  1               LAB_DIM:
00359F  1  AA                   TAX                     ; copy "DIM" flag to X
0035A0  1  20 F1 35             JSR     LAB_1D10        ; search for variable
0035A3  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0035A7  1  D0 F3                BNE     LAB_1CFE        ; scan for "," and loop if not null
0035A9  1               
0035A9  1  60                   RTS
0035AA  1               
0035AA  1               ; perform << (left shift)
0035AA  1               
0035AA  1               LAB_LSHIFT:
0035AA  1  20 E0 35             JSR     GetPair         ; get integer expression and byte (no sign check)
0035AD  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
0035AF  1  A6 78                LDX     <TempB          ; get shift count
0035B1  1  F0 22                BEQ     NoShift         ; branch if zero
0035B3  1               
0035B3  1  E0 10                CPX     #$10            ; compare bit count with 16d
0035B5  1  B0 23                BCS     TooBig          ; branch if >=
0035B7  1               
0035B7  1               Ls_loop:
0035B7  1  06 AF                ASL     <FAC1_3         ; shift low byte
0035B9  1  2A                   ROL     A               ; shift high byte
0035BA  1  CA                   DEX                     ; decrement bit count
0035BB  1  D0 FA                BNE     Ls_loop         ; loop if shift not complete
0035BD  1               
0035BD  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
0035BF  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0035C2  1               
0035C2  1               ; perform >> (right shift)
0035C2  1               
0035C2  1               LAB_RSHIFT:
0035C2  1  20 E0 35             JSR     GetPair         ; get integer expression and byte (no sign check)
0035C5  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
0035C7  1  A6 78                LDX     <TempB          ; get shift count
0035C9  1  F0 0A                BEQ     NoShift         ; branch if zero
0035CB  1               
0035CB  1  E0 10                CPX     #$10            ; compare bit count with 16d
0035CD  1  B0 0B                BCS     TooBig          ; branch if >=
0035CF  1               
0035CF  1               Rs_loop:
0035CF  1  4A                   LSR     A               ; shift high byte
0035D0  1  66 AF                ROR     <FAC1_3         ; shift low byte
0035D2  1  CA                   DEX                     ; decrement bit count
0035D3  1  D0 FA                BNE     Rs_loop         ; loop if shift not complete
0035D5  1               
0035D5  1               NoShift:
0035D5  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
0035D7  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0035DA  1               
0035DA  1               TooBig:
0035DA  1  A9 00                LDA     #$00            ; clear high byte
0035DC  1  A8                   TAY                     ; copy to low byte
0035DD  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0035E0  1               
0035E0  1               GetPair:
0035E0  1  20 8D 3F             JSR     LAB_EVBY        ; evaluate byte expression, result in X
0035E3  1  86 78                STX     <TempB          ; save it
0035E5  1  20 58 41             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
0035E8  1  4C EC 36             JMP     LAB_EVIR        ; evaluate integer expression (no sign check)
0035EB  1               
0035EB  1               ; search for variable
0035EB  1               
0035EB  1               ; return pointer to variable in <Cvaral/<Cvarah
0035EB  1               
0035EB  1               LAB_GVAR:
0035EB  1  A2 00                LDX     #$00            ; set DIM flag = $00
0035ED  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory (1st character)
0035F1  1               LAB_1D10:
0035F1  1  86 5E                STX     <Defdim         ; save DIM flag
0035F3  1               LAB_1D12:
0035F3  1  85 93                STA     <Varnm1         ; save 1st character
0035F5  1  29 7F                AND     #$7F            ; clear FN flag bit
0035F7  1  20 63 36             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0035FA  1  B0 03                BCS     LAB_1D1F        ; branch if ok
0035FC  1               
0035FC  1  4C 14 34             JMP     LAB_SNER        ; else syntax error then warm start
0035FF  1               
0035FF  1               ; was variable name so ..
0035FF  1               LAB_1D1F:
0035FF  1  A2 00                LDX     #$00            ; clear 2nd character temp
003601  1  86 5F                STX     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
003603  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (2nd character)
003607  1  90 05                BCC     LAB_1D2D        ; branch if character = "0"-"9" (ok)
003609  1               
003609  1               ; 2nd character wasn't "0" to "9" so ..
003609  1  20 63 36             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
00360C  1  90 0C                BCC     LAB_1D38        ; branch if <"A" or >"Z" (go check if string)
00360E  1               
00360E  1               LAB_1D2D:
00360E  1  AA                   TAX                     ; copy 2nd character
00360F  1               
00360F  1               ; ignore further (valid) characters in the variable name
00360F  1               LAB_1D2E:
00360F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (3rd character)
003613  1  90 FA                BCC     LAB_1D2E        ; loop if character = "0"-"9" (ignore)
003615  1               
003615  1  20 63 36             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
003618  1  B0 F5                BCS     LAB_1D2E        ; loop if character = "A"-"Z" (ignore)
00361A  1               
00361A  1               ; check if string variable
00361A  1               LAB_1D38:
00361A  1  C9 24                CMP     #'$'            ; compare with "$"
00361C  1  D0 0C                BNE     LAB_1D47        ; branch if not string
00361E  1               
00361E  1               ; to introduce a new variable type (% suffix for integers say) then this branch
00361E  1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
00361E  1               
00361E  1               ; type is string
00361E  1  A9 FF                LDA     #$FF            ; set data type = string
003620  1  85 5F                STA     <Dtypef         ; set data type flag, $FF=string, $00=numeric
003622  1  8A                   TXA                     ; get 2nd character back
003623  1  09 80                ORA     #$80            ; set top bit (indicate string var)
003625  1  AA                   TAX                     ; copy back to 2nd character temp
003626  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00362A  1               
00362A  1               ; after we have determined the variable type we need to come back here to determine
00362A  1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
00362A  1               
00362A  1               
00362A  1               LAB_1D47:                       ; gets here with character after var name in A
00362A  1  86 94                STX     <Varnm2         ; save 2nd character
00362C  1  05 61                ORA     <Sufnxf         ; or with subscript/FNX flag (or FN name)
00362E  1  C9 28                CMP     #'('            ; compare with "("
003630  1  D0 03                BNE     LAB_1D53        ; branch if not "("
003632  1               
003632  1  4C FE 36             JMP     LAB_1E17        ; go find, or make, array
003635  1               
003635  1               ; either find or create var
003635  1               ; var name (1st two characters only!) is in <Varnm1,<Varnm2
003635  1               
003635  1               ; variable name wasn't var(... so look for plain var
003635  1               LAB_1D53:
003635  1  A9 00                LDA     #$00            ; clear A
003637  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
003639  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
00363B  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
00363D  1  A0 00                LDY     #$00            ; clear index
00363F  1               LAB_1D5D:
00363F  1  86 AB                STX     <Vrschh         ; save search address high byte
003641  1               LAB_1D5F:
003641  1  85 AA                STA     <Vrschl         ; save search address low byte
003643  1  E4 7E                CPX     <Sarryh         ; compare high address with var space end
003645  1  D0 04                BNE     LAB_1D69        ; skip next compare if <>
003647  1               
003647  1               ; high addresses were = so compare low addresses
003647  1  C5 7D                CMP     <Sarryl         ; compare low address with var space end
003649  1  F0 2C                BEQ     LAB_1D8B        ; if not found go make new var
00364B  1               
00364B  1               LAB_1D69:
00364B  1  A5 93                LDA     <Varnm1         ; get 1st character of var to find
00364D  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 1st character
00364F  1  D0 08                BNE     LAB_1D77        ; branch if no match
003651  1               
003651  1               ; 1st characters match so compare 2nd characters
003651  1  A5 94                LDA     <Varnm2         ; get 2nd character of var to find
003653  1  C8                   INY                     ; index to point to variable name 2nd character
003654  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 2nd character
003656  1  F0 69                BEQ     LAB_1DD7        ; branch if match (found var)
003658  1               
003658  1  88                   DEY                     ; else decrement index (now = $00)
003659  1               LAB_1D77:
003659  1  18                   CLC                     ; clear carry for add
00365A  1  A5 AA                LDA     <Vrschl         ; get search address low byte
00365C  1  69 06                ADC     #$06            ; +6 (offset to next var name)
00365E  1  90 E1                BCC     LAB_1D5F        ; loop if no overflow to high byte
003660  1               
003660  1  E8                   INX                     ; else increment high byte
003661  1  D0 DC                BNE     LAB_1D5D        ; loop always (RAM doesn't extend to $FFFF !)
003663  1               
003663  1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
003663  1               
003663  1               LAB_CASC:
003663  1  C9 61                CMP     #'a'            ; compare with "a"
003665  1  B0 0A                BCS     LAB_1D83        ; go check <"z"+1
003667  1               
003667  1               ; check byte, return C=0 if<"A" or >"Z"
003667  1               
003667  1               LAB_1D82:
003667  1  C9 41                CMP     #'A'            ; compare with "A"
003669  1  90 05                BCC     LAB_1D8A        ; exit if less
00366B  1               
00366B  1               ; carry is set
00366B  1  E9 5B                SBC     #$5B            ; subtract "Z"+1
00366D  1  38                   SEC                     ; set carry
00366E  1  E9 A5                SBC     #$A5            ; subtract $A5 (restore byte)
003670  1               ; carry clear if byte>$5A
003670  1               LAB_1D8A:
003670  1  60                   RTS
003671  1               
003671  1               LAB_1D83:
003671  1  E9 7B                SBC     #$7B            ; subtract "z"+1
003673  1  38                   SEC                     ; set carry
003674  1  E9 85                SBC     #$85            ; subtract $85 (restore byte)
003676  1               ; carry clear if byte>$7A
003676  1  60                   RTS
003677  1               
003677  1               ; reached end of variable mem without match
003677  1               ; .. so create new variable
003677  1               LAB_1D8B:
003677  1  68                   PLA                     ; pop return address low byte
003678  1  48                   PHA                     ; push return address low byte
003679  1               LAB_1C18p2      = LAB_1C18+2
003679  1  C9 4F                CMP     #<LAB_1C18p2    ; compare with expected calling routine return low byte
00367B  1  D0 05                BNE     LAB_1D98        ; if not get (var) go create new var
00367D  1               
00367D  1               ; This will only drop through if the call was from LAB_1C18 and is only called
00367D  1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
00367D  1               ; it prevents the creation of variables not assigned a value.
00367D  1               
00367D  1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
00367D  1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
00367D  1               
00367D  1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
00367D  1               
00367D  1               ; this is where you would put the undefined variable error call e.g.
00367D  1               
00367D  1               ;					; variable doesn't exist so flag error
00367D  1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
00367D  1               ;	JMP	LAB_XERR		; do error #X then warm start
00367D  1               
00367D  1               ; the above code has been tested and works a treat! (it replaces the three code lines
00367D  1               ; below)
00367D  1               
00367D  1               ; else return dummy null value
00367D  1  A9 AD                LDA     #<LAB_1D96      ; low byte point to $00,$00
00367F  1               ; (uses part of misc constants table)
00367F  1  A0 18                LDY     #>LAB_1D96      ; high byte point to $00,$00
003681  1  60                   RTS
003682  1               
003682  1               ; create new numeric variable
003682  1               LAB_1D98:
003682  1  A5 7D                LDA     <Sarryl         ; get var mem end low byte
003684  1  A4 7E                LDY     <Sarryh         ; get var mem end high byte
003686  1  85 AA                STA     <Ostrtl         ; save old block start low byte
003688  1  84 AB                STY     <Ostrth         ; save old block start high byte
00368A  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
00368C  1  A4 80                LDY     <Earryh         ; get array mem end high byte
00368E  1  85 A6                STA     <Obendl         ; save old block end low byte
003690  1  84 A7                STY     <Obendh         ; save old block end high byte
003692  1  18                   CLC                     ; clear carry for add
003693  1  69 06                ADC     #$06            ; +6 (space for one var)
003695  1  90 01                BCC     LAB_1DAE        ; branch if no overflow to high byte
003697  1               
003697  1  C8                   INY                     ; else increment high byte
003698  1               LAB_1DAE:
003698  1  85 A4                STA     <Nbendl         ; set new block end low byte
00369A  1  84 A5                STY     <Nbendh         ; set new block end high byte
00369C  1  20 F5 26             JSR     LAB_11CF        ; open up space in memory
00369F  1  A5 A4                LDA     <Nbendl         ; get new start low byte
0036A1  1  A4 A5                LDY     <Nbendh         ; get new start high byte (-$100)
0036A3  1  C8                   INY                     ; correct high byte
0036A4  1  85 7D                STA     <Sarryl         ; save new var mem end low byte
0036A6  1  84 7E                STY     <Sarryh         ; save new var mem end high byte
0036A8  1  A0 00                LDY     #$00            ; clear index
0036AA  1  A5 93                LDA     <Varnm1         ; get var name 1st character
0036AC  1  91 AA                STA     (<Vrschl),Y     ; save var name 1st character
0036AE  1  C8                   INY                     ; increment index
0036AF  1  A5 94                LDA     <Varnm2         ; get var name 2nd character
0036B1  1  91 AA                STA     (<Vrschl),Y     ; save var name 2nd character
0036B3  1  A9 00                LDA     #$00            ; clear A
0036B5  1  C8                   INY                     ; increment index
0036B6  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
0036B8  1  C8                   INY                     ; increment index
0036B9  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
0036BB  1  C8                   INY                     ; increment index
0036BC  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
0036BE  1  C8                   INY                     ; increment index
0036BF  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
0036C1  1               
0036C1  1               ; found a match for var ((<Vrschl) = ptr)
0036C1  1               LAB_1DD7:
0036C1  1  A5 AA                LDA     <Vrschl         ; get var address low byte
0036C3  1  18                   CLC                     ; clear carry for add
0036C4  1  69 02                ADC     #$02            ; +2 (offset past var name bytes)
0036C6  1  A4 AB                LDY     <Vrschh         ; get var address high byte
0036C8  1  90 01                BCC     LAB_1DE1        ; branch if no overflow from add
0036CA  1               
0036CA  1  C8                   INY                     ; else increment high byte
0036CB  1               LAB_1DE1:
0036CB  1  85 95                STA     <Cvaral         ; save current var address low byte
0036CD  1  84 96                STY     <Cvarah         ; save current var address high byte
0036CF  1  60                   RTS
0036D0  1               
0036D0  1               ; set-up array pointer (<Adatal/h) to first element in array
0036D0  1               ; set <Adatal,<Adatah to <Astrtl,<Astrth+2*<Dimcnt+#$05
0036D0  1               
0036D0  1               LAB_1DE6:
0036D0  1  A5 5D                LDA     <Dimcnt         ; get # of dimensions (1, 2 or 3)
0036D2  1  0A                   ASL     A               ; *2 (also clears the carry !)
0036D3  1  69 05                ADC     #$05            ; +5 (result is 7, 9 or 11 here)
0036D5  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
0036D7  1  A4 AB                LDY     <Astrth         ; get array pointer high byte
0036D9  1  90 01                BCC     LAB_1DF2        ; branch if no overflow
0036DB  1               
0036DB  1  C8                   INY                     ; else increment high byte
0036DC  1               LAB_1DF2:
0036DC  1  85 A4                STA     <Adatal         ; save array data pointer low byte
0036DE  1  84 A5                STY     <Adatah         ; save array data pointer high byte
0036E0  1  60                   RTS
0036E1  1               
0036E1  1               ; evaluate integer expression
0036E1  1               
0036E1  1               LAB_EVIN:
0036E1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0036E5  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0036E8  1               ; else do type mismatch
0036E8  1               
0036E8  1               ; evaluate integer expression (no check)
0036E8  1               
0036E8  1               LAB_EVPI:
0036E8  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0036EA  1  30 0D                BMI     LAB_1E12        ; do function call error if -ve
0036EC  1               
0036EC  1               ; evaluate integer expression (no sign check)
0036EC  1               
0036EC  1               LAB_EVIR:
0036EC  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0036EE  1  C9 90                CMP     #$90            ; compare with exponent = 2^16 (n>2^15)
0036F0  1  90 09                BCC     LAB_1E14        ; branch if n<2^16 (is ok)
0036F2  1               
0036F2  1  A9 B4                LDA     #<LAB_1DF7      ; set pointer low byte to -32768
0036F4  1  A0 18                LDY     #>LAB_1DF7      ; set pointer high byte to -32768
0036F6  1  20 A2 45             JSR     LAB_27F8        ; compare FAC1 with (AY)
0036F9  1               LAB_1E12:
0036F9  1  D0 78                BNE     LAB_FCER        ; if <> do function call error then warm start
0036FB  1               
0036FB  1               LAB_1E14:
0036FB  1  4C 3F 46             JMP     LAB_2831        ; convert FAC1 floating-to-fixed and return
0036FE  1               
0036FE  1               ; find or make array
0036FE  1               
0036FE  1               LAB_1E17:
0036FE  1  A5 5E                LDA     <Defdim         ; get DIM flag
003700  1  48                   PHA                     ; push it
003701  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003703  1  48                   PHA                     ; push it
003704  1  A0 00                LDY     #$00            ; clear dimensions count
003706  1               
003706  1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
003706  1               
003706  1               LAB_1E1F:
003706  1  98                   TYA                     ; copy dimensions count
003707  1  48                   PHA                     ; save it
003708  1  A5 94                LDA     <Varnm2         ; get array name 2nd byte
00370A  1  48                   PHA                     ; save it
00370B  1  A5 93                LDA     <Varnm1         ; get array name 1st byte
00370D  1  48                   PHA                     ; save it
00370E  1  20 E1 36             JSR     LAB_EVIN        ; evaluate integer expression
003711  1  68                   PLA                     ; pull array name 1st byte
003712  1  85 93                STA     <Varnm1         ; restore array name 1st byte
003714  1  68                   PLA                     ; pull array name 2nd byte
003715  1  85 94                STA     <Varnm2         ; restore array name 2nd byte
003717  1  68                   PLA                     ; pull dimensions count
003718  1  A8                   TAY                     ; restore it
003719  1  A3 02                LDA     2,S             ; get DIM flag
00371B  1  85 FD                STA     <TEMPW          ; push it
00371D  1  A3 01                LDA     1,S             ; get data type flag
00371F  1  85 FE                STA     <TEMPW+1        ; push it
003721  1  A5 AE                LDA     <FAC1_2         ; get this dimension size high byte
003723  1  83 02                STA     2,S             ; stack before flag bytes
003725  1  A5 AF                LDA     <FAC1_3         ; get this dimension size low byte
003727  1  83 01                STA     1,S             ; stack before flag bytes
003729  1  A5 FD                LDA     <TEMPW
00372B  1  48                   PHA
00372C  1  A5 FE                LDA     <TEMPW+1
00372E  1  48                   PHA
00372F  1  C8                   INY                     ; increment dimensions count
003730  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003734  1  C9 2C                CMP     #','            ; compare with ","
003736  1  F0 CE                BEQ     LAB_1E1F        ; if found go do next dimension
003738  1               
003738  1  84 5D                STY     <Dimcnt         ; store dimensions count
00373A  1  20 FF 33             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
00373D  1  68                   PLA                     ; pull data type flag
00373E  1  85 5F                STA     <Dtypef         ; restore data type flag, $FF=string, $00=numeric
003740  1  68                   PLA                     ; pull DIM flag
003741  1  85 5E                STA     <Defdim         ; restore DIM flag
003743  1  A6 7D                LDX     <Sarryl         ; get array mem start low byte
003745  1  A5 7E                LDA     <Sarryh         ; get array mem start high byte
003747  1               
003747  1               ; now check to see if we are at the end of array memory (we would be if there were
003747  1               ; no arrays).
003747  1               
003747  1               LAB_1E5C:
003747  1  86 AA                STX     <Astrtl         ; save as array start pointer low byte
003749  1  85 AB                STA     <Astrth         ; save as array start pointer high byte
00374B  1  C5 80                CMP     <Earryh         ; compare with array mem end high byte
00374D  1  D0 04                BNE     LAB_1E68        ; branch if not reached array mem end
00374F  1               
00374F  1  E4 7F                CPX     <Earryl         ; else compare with array mem end low byte
003751  1  F0 39                BEQ     LAB_1EA1        ; go build array if not found
003753  1               
003753  1               ; search for array
003753  1               LAB_1E68:
003753  1  A0 00                LDY     #$00            ; clear index
003755  1  B1 AA                LDA     (<Astrtl),Y     ; get array name first byte
003757  1  C8                   INY                     ; increment index to second name byte
003758  1  C5 93                CMP     <Varnm1         ; compare with this array name first byte
00375A  1  D0 06                BNE     LAB_1E77        ; branch if no match
00375C  1               
00375C  1  A5 94                LDA     <Varnm2         ; else get this array name second byte
00375E  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array name second byte
003760  1  F0 16                BEQ     LAB_1E8D        ; array found so branch
003762  1               
003762  1               ; no match
003762  1               LAB_1E77:
003762  1  C8                   INY                     ; increment index
003763  1  B1 AA                LDA     (<Astrtl),Y     ; get array size low byte
003765  1  18                   CLC                     ; clear carry for add
003766  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
003768  1  AA                   TAX                     ; copy low byte to X
003769  1  C8                   INY                     ; increment index
00376A  1  B1 AA                LDA     (<Astrtl),Y     ; get array size high byte
00376C  1  65 AB                ADC     <Astrth         ; add array mem pointer high byte
00376E  1  90 D7                BCC     LAB_1E5C        ; if no overflow go check next array
003770  1               ; do array bounds error
003770  1               
003770  1               LAB_1E85:
003770  1  A2 10                LDX     #$10            ; error code $10 ("Array bounds" error)
003772  1  2C                   .BYTE   $2C             ; makes next bit BIT LAB_08A2
003773  1               
003773  1               ; do function call error
003773  1               
003773  1               LAB_FCER:
003773  1  A2 08                LDX     #$08            ; error code $08 ("Function call" error)
003775  1               LAB_1E8A:
003775  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
003778  1               
003778  1               ; found array, are we trying to dimension it?
003778  1               LAB_1E8D:
003778  1  A2 12                LDX     #$12            ; set error $12 ("Double dimension" error)
00377A  1  A5 5E                LDA     <Defdim         ; get DIM flag
00377C  1  D0 F7                BNE     LAB_1E8A        ; if we are trying to dimension it do error #X, then warm
00377E  1               ; start
00377E  1               
00377E  1               ; found the array and we're not dimensioning it so we must find an element in it
00377E  1               
00377E  1  20 D0 36             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
003781  1               ; (<Astrtl,<Astrth points to start of array)
003781  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
003783  1  A0 04                LDY     #$04            ; set index to array's # of dimensions
003785  1  D1 AA                CMP     (<Astrtl),Y     ; compare with no of dimensions
003787  1  D0 E7                BNE     LAB_1E85        ; if wrong do array bounds error, could do "Wrong
003789  1               ; dimensions" error here .. if we want a different
003789  1               ; error message
003789  1               
003789  1  4C 0F 38             JMP     LAB_1F28        ; found array so go get element
00378C  1               ; (could jump to LAB_1F28 as all LAB_1F24 does is take
00378C  1               ; <Dimcnt and save it at (<Astrtl),Y which is already the
00378C  1               ; same or we would have taken the BNE)
00378C  1               
00378C  1               ; array not found, so build it
00378C  1               LAB_1EA1:
00378C  1  20 D0 36             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
00378F  1               ; (<Astrtl,<Astrth points to start of array)
00378F  1  20 9F 27             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
003792  1               ; addr to check is in AY (low/high)
003792  1  A0 00                LDY     #$00            ; clear Y (don't need to clear A)
003794  1  84 BB                STY     <Aspth          ; clear array data size high byte
003796  1  A5 93                LDA     <Varnm1         ; get variable name 1st byte
003798  1  91 AA                STA     (<Astrtl),Y     ; save array name 1st byte
00379A  1  C8                   INY                     ; increment index
00379B  1  A5 94                LDA     <Varnm2         ; get variable name 2nd byte
00379D  1  91 AA                STA     (<Astrtl),Y     ; save array name 2nd byte
00379F  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
0037A1  1  A0 04                LDY     #$04            ; index to dimension count
0037A3  1  84 BA                STY     <Asptl          ; set array data size low byte (four bytes per element)
0037A5  1  91 AA                STA     (<Astrtl),Y     ; set array's dimensions count
0037A7  1               
0037A7  1               ; now calculate the size of the data space for the array
0037A7  1  18                   CLC                     ; clear carry for add (clear on subsequent loops)
0037A8  1               LAB_1EC0:
0037A8  1  A2 0B                LDX     #$0B            ; set default dimension value low byte
0037AA  1  A9 00                LDA     #$00            ; set default dimension value high byte
0037AC  1  24 5E                BIT     <Defdim         ; test default DIM flag
0037AE  1  50 07                BVC     LAB_1ED0        ; branch if b6 of <Defdim is clear
0037B0  1               
0037B0  1  68                   PLA                     ; else pull dimension value low byte
0037B1  1  69 01                ADC     #$01            ; +1 (allow for zeroeth element)
0037B3  1  AA                   TAX                     ; copy low byte to X
0037B4  1  68                   PLA                     ; pull dimension value high byte
0037B5  1  69 00                ADC     #$00            ; add carry from low byte
0037B7  1               
0037B7  1               LAB_1ED0:
0037B7  1  C8                   INY                     ; index to dimension value high byte
0037B8  1  91 AA                STA     (<Astrtl),Y     ; save dimension value high byte
0037BA  1  C8                   INY                     ; index to dimension value high byte
0037BB  1  8A                   TXA                     ; get dimension value low byte
0037BC  1  91 AA                STA     (<Astrtl),Y     ; save dimension value low byte
0037BE  1  20 5E 38             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
0037C1  1  86 BA                STX     <Asptl          ; save array data size low byte
0037C3  1  85 BB                STA     <Aspth          ; save array data size high byte
0037C5  1  A4 71                LDY     <ut1_pl         ; restore index (saved by subroutine)
0037C7  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
0037C9  1  D0 DD                BNE     LAB_1EC0        ; loop while not = 0
0037CB  1               
0037CB  1  65 A5                ADC     <Adatah         ; add size high byte to first element high byte
0037CD  1               ; (carry is always clear here)
0037CD  1  B0 5D                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
0037CF  1               
0037CF  1  85 A5                STA     <Adatah         ; save end of array high byte
0037D1  1  A8                   TAY                     ; copy end high byte to Y
0037D2  1  8A                   TXA                     ; get array size low byte
0037D3  1  65 A4                ADC     <Adatal         ; add array start low byte
0037D5  1  90 03                BCC     LAB_1EF3        ; branch if no carry
0037D7  1               
0037D7  1  C8                   INY                     ; else increment end of array high byte
0037D8  1  F0 52                BEQ     LAB_1F45        ; if overflow go do "Out of memory" error
0037DA  1               
0037DA  1               ; set-up mostly complete, now zero the array
0037DA  1               LAB_1EF3:
0037DA  1  20 9F 27             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
0037DD  1               ; addr to check is in AY (low/high)
0037DD  1  85 7F                STA     <Earryl         ; save array mem end low byte
0037DF  1  84 80                STY     <Earryh         ; save array mem end high byte
0037E1  1  A9 00                LDA     #$00            ; clear byte for array clear
0037E3  1  E6 BB                INC     <Aspth          ; increment array size high byte (now block count)
0037E5  1  A4 BA                LDY     <Asptl          ; get array size low byte (now index to block)
0037E7  1  F0 05                BEQ     LAB_1F07        ; branch if low byte = $00
0037E9  1               
0037E9  1               LAB_1F02:
0037E9  1  88                   DEY                     ; decrement index (do 0 to n-1)
0037EA  1  91 A4                STA     (<Adatal),Y     ; zero byte
0037EC  1  D0 FB                BNE     LAB_1F02        ; loop until this block done
0037EE  1               
0037EE  1               LAB_1F07:
0037EE  1  C6 A5                DEC     <Adatah         ; decrement array pointer high byte
0037F0  1  C6 BB                DEC     <Aspth          ; decrement block count high byte
0037F2  1  D0 F5                BNE     LAB_1F02        ; loop until all blocks done
0037F4  1               
0037F4  1  E6 A5                INC     <Adatah         ; correct for last loop
0037F6  1  38                   SEC                     ; set carry for subtract
0037F7  1  A0 02                LDY     #$02            ; index to array size low byte
0037F9  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
0037FB  1  E5 AA                SBC     <Astrtl         ; subtract array start low byte
0037FD  1  91 AA                STA     (<Astrtl),Y     ; save array size low byte
0037FF  1  C8                   INY                     ; index to array size high byte
003800  1  A5 80                LDA     <Earryh         ; get array mem end high byte
003802  1  E5 AB                SBC     <Astrth         ; subtract array start high byte
003804  1  91 AA                STA     (<Astrtl),Y     ; save array size high byte
003806  1  A5 5E                LDA     <Defdim         ; get default DIM flag
003808  1  D0 53                BNE     LAB_1F7B        ; exit (RET) if this was a DIM command
00380A  1               ; else, find element
00380A  1  C8                   INY                     ; index to # of dimensions
00380B  1               
00380B  1               LAB_1F24:
00380B  1  B1 AA                LDA     (<Astrtl),Y     ; get array's dimension count
00380D  1  85 5D                STA     <Dimcnt         ; save it
00380F  1               
00380F  1               ; we have found, or built, the array. now we need to find the element
00380F  1               
00380F  1               LAB_1F28:
00380F  1  A9 00                LDA     #$00            ; clear byte
003811  1  85 BA                STA     <Asptl          ; clear array data pointer low byte
003813  1               LAB_1F2C:
003813  1  85 BB                STA     <Aspth          ; save array data pointer high byte
003815  1  C8                   INY                     ; increment index (point to array bound high byte)
003816  1  68                   PLA                     ; pull array index low byte
003817  1  AA                   TAX                     ; copy to X
003818  1  85 AE                STA     <FAC1_2         ; save index low byte to FAC1 mantissa2
00381A  1  68                   PLA                     ; pull array index high byte
00381B  1  85 AF                STA     <FAC1_3         ; save index high byte to FAC1 mantissa3
00381D  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound high byte
00381F  1  90 0E                BCC     LAB_1F48        ; branch if within bounds
003821  1               
003821  1  D0 06                BNE     LAB_1F42        ; if outside bounds do array bounds error
003823  1               
003823  1               ; else high byte was = so test low bytes
003823  1  C8                   INY                     ; index to array bound low byte
003824  1  8A                   TXA                     ; get array index low byte
003825  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound low byte
003827  1  90 07                BCC     LAB_1F49        ; branch if within bounds
003829  1               
003829  1               LAB_1F42:
003829  1  4C 70 37             JMP     LAB_1E85        ; else do array bounds error
00382C  1               
00382C  1               LAB_1F45:
00382C  1  4C CE 27             JMP     LAB_OMER        ; do "Out of memory" error then warm start
00382F  1               
00382F  1               LAB_1F48:
00382F  1  C8                   INY                     ; index to array bound low byte
003830  1               LAB_1F49:
003830  1  A5 BB                LDA     <Aspth          ; get array data pointer high byte
003832  1  05 BA                ORA     <Asptl          ; OR with array data pointer low byte
003834  1  F0 0A                BEQ     LAB_1F5A        ; branch if array data pointer = null (skip multiply)
003836  1               
003836  1  20 5E 38             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
003839  1  8A                   TXA                     ; get result low byte
00383A  1  65 AE                ADC     <FAC1_2         ; add index low byte from FAC1 mantissa2
00383C  1  AA                   TAX                     ; save result low byte
00383D  1  98                   TYA                     ; get result high byte
00383E  1  A4 71                LDY     <ut1_pl         ; restore index
003840  1               LAB_1F5A:
003840  1  65 AF                ADC     <FAC1_3         ; add index high byte from FAC1 mantissa3
003842  1  86 BA                STX     <Asptl          ; save array data pointer low byte
003844  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
003846  1  D0 CB                BNE     LAB_1F2C        ; loop if dimensions still to do
003848  1               
003848  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 2
00384A  1  2A                   ROL     A               ; array data pointer high byte * 2
00384B  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 4
00384D  1  2A                   ROL     A               ; array data pointer high byte * 4
00384E  1  A8                   TAY                     ; copy high byte
00384F  1  A5 BA                LDA     <Asptl          ; get low byte
003851  1  65 A4                ADC     <Adatal         ; add array data start pointer low byte
003853  1  85 95                STA     <Cvaral         ; save as current var address low byte
003855  1  98                   TYA                     ; get high byte back
003856  1  65 A5                ADC     <Adatah         ; add array data start pointer high byte
003858  1  85 96                STA     <Cvarah         ; save as current var address high byte
00385A  1  A8                   TAY                     ; copy high byte to Y
00385B  1  A5 95                LDA     <Cvaral         ; get current var address low byte
00385D  1               LAB_1F7B:
00385D  1  60                   RTS
00385E  1               
00385E  1               ; does XY = (<Astrtl),Y * (<Asptl)
00385E  1               
00385E  1               LAB_1F7C:
00385E  1  84 71                STY     <ut1_pl         ; save index
003860  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size low byte
003862  1  85 76                STA     <dims_l         ; save dimension size low byte
003864  1  88                   DEY                     ; decrement index
003865  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size high byte
003867  1  85 77                STA     <dims_h         ; save dimension size high byte
003869  1               
003869  1  A9 10                LDA     #$10            ; count = $10 (16 bit multiply)
00386B  1  85 A8                STA     <numbit         ; save bit count
00386D  1  A2 00                LDX     #$00            ; clear result low byte
00386F  1  A0 00                LDY     #$00            ; clear result high byte
003871  1               LAB_1F8F:
003871  1  8A                   TXA                     ; get result low byte
003872  1  0A                   ASL     A               ; *2
003873  1  AA                   TAX                     ; save result low byte
003874  1  98                   TYA                     ; get result high byte
003875  1  2A                   ROL     A               ; *2
003876  1  A8                   TAY                     ; save result high byte
003877  1  B0 B3                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
003879  1               
003879  1  06 BA                ASL     <Asptl          ; shift multiplier low byte
00387B  1  26 BB                ROL     <Aspth          ; shift multiplier high byte
00387D  1  90 11                BCC     LAB_1FA8        ; skip add if no carry
00387F  1               
00387F  1  18                   CLC                     ; else clear carry for add
003880  1  8A                   TXA                     ; get result low byte
003881  1  65 76                ADC     <dims_l         ; add dimension size low byte
003883  1  AA                   TAX                     ; save result low byte
003884  1  98                   TYA                     ; get result high byte
003885  1  65 77                ADC     <dims_h         ; add dimension size high byte
003887  1  A8                   TAY                     ; save result high byte
003888  1  B0 03                BCS     LAB_1F45_1      ; if overflow go do "Out of memory" error
00388A  1  4C 90 38             JMP     LAB_1FA8
00388D  1               LAB_1F45_1:
00388D  1  4C 2C 38             JMP     LAB_1F45
003890  1               LAB_1FA8:
003890  1  C6 A8                DEC     <numbit         ; decrement bit count
003892  1  D0 DD                BNE     LAB_1F8F        ; loop until all done
003894  1               
003894  1  60                   RTS
003895  1               
003895  1               ; perform FRE()
003895  1               
003895  1               LAB_FRE:
003895  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003897  1  10 03                BPL     LAB_1FB4        ; branch if numeric
003899  1               
003899  1  20 01 3D             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
00389C  1               ; space returns with A = length, X=$71=pointer low byte,
00389C  1               ; Y=$72=pointer high byte
00389C  1               
00389C  1               ; FRE(n) was numeric so do this
00389C  1               LAB_1FB4:
00389C  1  20 D7 3A             JSR     LAB_GARB        ; go do garbage collection
00389F  1  38                   SEC                     ; set carry for subtract
0038A0  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
0038A2  1  E5 7F                SBC     <Earryl         ; subtract array mem end low byte
0038A4  1  A8                   TAY                     ; copy result to Y
0038A5  1  A5 82                LDA     <Sstorh         ; get bottom of string space high byte
0038A7  1  E5 80                SBC     <Earryh         ; subtract array mem end high byte
0038A9  1               
0038A9  1               ; save and convert integer AY to FAC1
0038A9  1               
0038A9  1               LAB_AYFC:
0038A9  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0038AB  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0038AD  1  84 AE                STY     <FAC1_2         ; save FAC1 mantissa2
0038AF  1  A2 90                LDX     #$90            ; set exponent=2^16 (integer)
0038B1  1  4C 8D 45             JMP     LAB_27E3        ; set exp=X, clear <FAC1_3, normalise and return
0038B4  1               
0038B4  1               ; perform POS()
0038B4  1               
0038B4  1               LAB_POS:
0038B4  1  A4 0E                LDY     <TPos           ; get terminal position
0038B6  1               
0038B6  1               ; convert Y to byte in FAC1
0038B6  1               
0038B6  1               LAB_1FD0:
0038B6  1  A9 00                LDA     #$00            ; clear high byte
0038B8  1  F0 EF                BEQ     LAB_AYFC        ; always save and convert integer AY to FAC1 and return
0038BA  1               
0038BA  1               ; check not Direct (used by DEF and INPUT)
0038BA  1               
0038BA  1               LAB_CKRN:
0038BA  1  A6 88                LDX     <Clineh         ; get current line high byte
0038BC  1  E8                   INX                     ; increment it
0038BD  1  F0 03                BEQ     LAB_1FD9
0038BF  1  4C 5D 38             JMP     LAB_1F7B        ; return if can continue not direct mode
0038C2  1               
0038C2  1               ; else do illegal direct error
0038C2  1               LAB_1FD9:
0038C2  1  A2 16                LDX     #$16            ; error code $16 ("Illegal direct" error)
0038C4  1               LAB_1FDB:
0038C4  1  4C D0 27             JMP     LAB_XERR        ; go do error #X, then warm start
0038C7  1               
0038C7  1               ; perform DEF
0038C7  1               
0038C7  1               LAB_DEF:
0038C7  1  20 F8 38             JSR     LAB_200B        ; check FNx syntax
0038CA  1  85 9C                STA     <func_l         ; save function pointer low byte
0038CC  1  84 9D                STY     <func_h         ; save function pointer high byte
0038CE  1  20 BA 38             JSR     LAB_CKRN        ; check not Direct (back here if ok)
0038D1  1  20 0C 34             JSR     LAB_1BFE        ; scan for "(" , else do syntax error then warm start
0038D4  1  A9 80                LDA     #$80            ; set flag for FNx
0038D6  1  85 61                STA     <Sufnxf         ; save subscript/FNx flag
0038D8  1  20 EB 35             JSR     LAB_GVAR        ; get (var) address
0038DB  1  20 DD 32             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0038DE  1  20 FF 33             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0038E1  1  A9 D2                LDA     #TK_EQUAL       ; get = token
0038E3  1  20 01 34             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0038E6  1  A5 96                LDA     <Cvarah         ; get current var address high byte
0038E8  1  48                   PHA                     ; push it
0038E9  1  A5 95                LDA     <Cvaral         ; get current var address low byte
0038EB  1  48                   PHA                     ; push it
0038EC  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0038EE  1  48                   PHA                     ; push it
0038EF  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0038F1  1  48                   PHA                     ; push it
0038F2  1  20 47 2D             JSR     LAB_DATA        ; go perform DATA
0038F5  1  4C A4 39             JMP     LAB_207A        ; put execute pointer and variable pointer into function
0038F8  1               ; and return
0038F8  1               
0038F8  1               ; check FNx syntax
0038F8  1               
0038F8  1               LAB_200B:
0038F8  1  A9 BF                LDA     #TK_FN          ; get FN" token
0038FA  1  20 01 34             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
0038FD  1               ; return character after A
0038FD  1  09 80                ORA     #$80            ; set FN flag bit
0038FF  1  85 61                STA     <Sufnxf         ; save FN flag so array variable test fails
003901  1  20 F3 35             JSR     LAB_1D12        ; search for FN variable
003904  1  4C DD 32             JMP     LAB_CTNM        ; check if source is numeric and return, else do type
003907  1               ; mismatch
003907  1               
003907  1               ; Evaluate FNx
003907  1               LAB_201E:
003907  1  20 F8 38             JSR     LAB_200B        ; check FNx syntax
00390A  1  48                   PHA                     ; push function pointer low byte
00390B  1  98                   TYA                     ; copy function pointer high byte
00390C  1  48                   PHA                     ; push function pointer high byte
00390D  1  20 0C 34             JSR     LAB_1BFE        ; scan for "(", else do syntax error then warm start
003910  1  20 EE 32             JSR     LAB_EVEX        ; evaluate expression
003913  1  20 FF 33             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003916  1  20 DD 32             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003919  1  68                   PLA                     ; pop function pointer high byte
00391A  1  85 9D                STA     <func_h         ; restore it
00391C  1  68                   PLA                     ; pop function pointer low byte
00391D  1  85 9C                STA     <func_l         ; restore it
00391F  1  A2 20                LDX     #$20            ; error code $20 ("Undefined function" error)
003921  1  A0 03                LDY     #$03            ; index to variable pointer high byte
003923  1  B1 9C                LDA     (<func_l),Y     ; get variable pointer high byte
003925  1  F0 9D                BEQ     LAB_1FDB        ; if zero go do undefined function error
003927  1               
003927  1  85 96                STA     <Cvarah         ; save variable address high byte
003929  1  88                   DEY                     ; index to variable address low byte
00392A  1  B1 9C                LDA     (<func_l),Y     ; get variable address low byte
00392C  1  85 95                STA     <Cvaral         ; save variable address low byte
00392E  1  AA                   TAX                     ; copy address low byte
00392F  1               
00392F  1               ; now stack the function variable value before use
00392F  1  C8                   INY                     ; index to mantissa_3
003930  1               LAB_2043:
003930  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from variable
003934  1  B5 95 C9 00  
003938  1  D0 04 A2 00  
003946  1  48                   PHA                     ; stack it
003947  1  88                   DEY                     ; decrement index
003948  1  10 E6                BPL     LAB_2043        ; loop until variable stacked
00394A  1               
00394A  1  A4 96                LDY     <Cvarah         ; get variable address high byte
00394C  1  20 E2 44             JSR     LAB_2778        ; pack FAC1 (function expression value) into (XY)
00394F  1               ; (function variable), return Y=0, always
00394F  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
003951  1  48                   PHA                     ; push it
003952  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
003954  1  48                   PHA                     ; push it
003955  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer low byte
003959  1  B5 9C C9 00  
00395D  1  D0 04 A2 00  
00396B  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
00396D  1  C8                   INY                     ; index to high byte
00396E  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer high byte
003972  1  B5 9C C9 00  
003976  1  D0 04 A2 00  
003984  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003986  1  A5 96                LDA     <Cvarah         ; get variable address high byte
003988  1  48                   PHA                     ; push it
003989  1  A5 95                LDA     <Cvaral         ; get variable address low byte
00398B  1  48                   PHA                     ; push it
00398C  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00398F  1               ; else do type mismatch
00398F  1  68                   PLA                     ; pull variable address low byte
003990  1  85 9C                STA     <func_l         ; save variable address low byte
003992  1  68                   PLA                     ; pull variable address high byte
003993  1  85 9D                STA     <func_h         ; save variable address high byte
003995  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003999  1  F0 03                BEQ     LAB_2074        ; branch if null (should be [EOL] marker)
00399B  1               
00399B  1  4C 14 34             JMP     LAB_SNER        ; else syntax error then warm start
00399E  1               
00399E  1               ; restore <Bpntrl,<Bpntrh and function variable from stack
00399E  1               
00399E  1               LAB_2074:
00399E  1  68                   PLA                     ; pull BASIC execute pointer low byte
00399F  1  85 C3                STA     <Bpntrl         ; restore BASIC execute pointer low byte
0039A1  1  68                   PLA                     ; pull BASIC execute pointer high byte
0039A2  1  85 C4                STA     <Bpntrh         ; restore BASIC execute pointer high byte
0039A4  1               
0039A4  1               ; put execute pointer and variable pointer into function
0039A4  1               
0039A4  1               LAB_207A:
0039A4  1  A0 00                LDY     #$00            ; clear index
0039A6  1  68                   PLA                     ; pull BASIC execute pointer low byte
0039A7  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0039AB  1  01 B5 9C C9  
0039AF  1  00 D0 04 A2  
0039BD  1  C8                   INY                     ; increment index
0039BE  1  68                   PLA                     ; pull BASIC execute pointer high byte
0039BF  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0039C3  1  01 B5 9C C9  
0039C7  1  00 D0 04 A2  
0039D5  1  C8                   INY                     ; increment index
0039D6  1  68                   PLA                     ; pull current var address low byte
0039D7  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0039DB  1  01 B5 9C C9  
0039DF  1  00 D0 04 A2  
0039ED  1  C8                   INY                     ; increment index
0039EE  1  68                   PLA                     ; pull current var address high byte
0039EF  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0039F3  1  01 B5 9C C9  
0039F7  1  00 D0 04 A2  
003A05  1  60                   RTS
003A06  1               
003A06  1               ; perform STR$()
003A06  1               
003A06  1               LAB_STRS:
003A06  1  20 DD 32             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003A09  1  20 A2 47             JSR     LAB_296E        ; convert FAC1 to string
003A0C  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
003A0E  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
003A10  1  F0 12                BEQ     LAB_20AE        ; print null terminated string to <Sutill/<Sutilh
003A12  1               
003A12  1               ; Do string vector
003A12  1               ; copy <des_pl/h to <des_2l/h and make string space A bytes long
003A12  1               
003A12  1               LAB_209C:
003A12  1  A6 AE                LDX     <des_pl         ; get descriptor pointer low byte
003A14  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003A16  1  86 9E                STX     <des_2l         ; save descriptor pointer low byte
003A18  1  84 9F                STY     <des_2h         ; save descriptor pointer high byte
003A1A  1               
003A1A  1               ; make string space A bytes long
003A1A  1               ; A=length, X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003A1A  1               
003A1A  1               LAB_MSSP:
003A1A  1  20 A5 3A             JSR     LAB_2115        ; make space in string memory for string A long
003A1D  1               ; return X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003A1D  1  86 AD                STX     <str_pl         ; save string pointer low byte
003A1F  1  84 AE                STY     <str_ph         ; save string pointer high byte
003A21  1  85 AC                STA     <str_ln         ; save length
003A23  1  60                   RTS
003A24  1               
003A24  1               ; Scan, set up string
003A24  1               ; print " terminated string to <Sutill/<Sutilh
003A24  1               
003A24  1               LAB_20AE:
003A24  1  A2 22                LDX     #$22            ; set terminator to "
003A26  1  86 5B                STX     <Srchc          ; set search character (terminator 1)
003A28  1  86 5C                STX     <Asrch          ; set terminator 2
003A2A  1               
003A2A  1               ; print [<Srchc] or [<Asrch] terminated string to <Sutill/<Sutilh
003A2A  1               ; source is AY
003A2A  1               
003A2A  1               LAB_20B4:
003A2A  1  85 B8                STA     <ssptr_l        ; store string start low byte
003A2C  1  84 B9                STY     <ssptr_h        ; store string start high byte
003A2E  1  85 AD                STA     <str_pl         ; save string pointer low byte
003A30  1  84 AE                STY     <str_ph         ; save string pointer high byte
003A32  1  A0 FF                LDY     #$FF            ; set length to -1
003A34  1               LAB_20BE:
003A34  1  C8                   INY                     ; increment length
003A35  1               
003A35  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get byte from string
003A39  1  B5 B8 C9 00  
003A3D  1  D0 04 A2 00  
003A4B  1  C9 00                CMP     #$00
003A4D  1  F0 0C                BEQ     LAB_20CF        ; exit loop if null byte [EOS]
003A4F  1               
003A4F  1  C5 5B                CMP     <Srchc          ; compare with search character (terminator 1)
003A51  1  F0 04                BEQ     LAB_20CB        ; branch if terminator
003A53  1               
003A53  1  C5 5C                CMP     <Asrch          ; compare with terminator 2
003A55  1  D0 DD                BNE     LAB_20BE        ; loop if not terminator 2
003A57  1               
003A57  1               LAB_20CB:
003A57  1  C9 22                CMP     #$22            ; compare with "
003A59  1  F0 01                BEQ     LAB_20D0        ; branch if " (carry set if = !)
003A5B  1               
003A5B  1               LAB_20CF:
003A5B  1  18                   CLC                     ; clear carry for add (only if [EOL] terminated string)
003A5C  1               LAB_20D0:
003A5C  1  84 AC                STY     <str_ln         ; save length in FAC1 exponent
003A5E  1  98                   TYA                     ; copy length to A
003A5F  1  65 B8                ADC     <ssptr_l        ; add string start low byte
003A61  1  85 BA                STA     <Sendl          ; save string end low byte
003A63  1  A6 B9                LDX     <ssptr_h        ; get string start high byte
003A65  1  90 01                BCC     LAB_20DC        ; branch if no low byte overflow
003A67  1               
003A67  1  E8                   INX                     ; else increment high byte
003A68  1               LAB_20DC:
003A68  1  86 BB                STX     <Sendh          ; save string end high byte
003A6A  1  A5 B9                LDA     <ssptr_h        ; get string start high byte
003A6C  1               
003A6C  1               
003A6C  1               ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
003A6C  1               ; *** replace
003A6C  1               ;      CMP	#((BASICBEGIN&$FF00)>>8)  ; compare with BASICBEGIN, FORMERLY (>Ram_base) start of program memory
003A6C  1               ;      BCS   LAB_RTST          ; branch if not in utility area
003A6C  1               ; *** with
003A6C  1  F0 04                BEQ     LAB_MVST        ; fix STR$() using page zero via LAB_296E
003A6E  1  C9 21                CMP     #>Ibuffs        ; compare with location of input buffer page
003A70  1  D0 0B                BNE     LAB_RTST        ; branch if not in utility area
003A72  1               LAB_MVST:
003A72  1               ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
003A72  1               
003A72  1               
003A72  1  98                   TYA                     ; copy length to A
003A73  1  20 12 3A             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
003A76  1               ; long
003A76  1  A6 B8                LDX     <ssptr_l        ; get string start low byte
003A78  1  A4 B9                LDY     <ssptr_h        ; get string start high byte
003A7A  1  20 BA 3C             JSR     LAB_2298        ; store string A bytes long from XY to (<Sutill)
003A7D  1               ; check for space on descriptor stack then ..
003A7D  1               ; put string address and length on descriptor stack and update stack pointers
003A7D  1               
003A7D  1               LAB_RTST:
003A7D  1  A6 65                LDX     <next_s         ; get string stack pointer
003A7F  1  E0 71                CPX     #<des_sk+$09    ; compare with max+1
003A81  1  D0 05                BNE     LAB_20F8        ; branch if space on string stack
003A83  1               
003A83  1               ; else do string too complex error
003A83  1  A2 1C                LDX     #$1C            ; error code $1C ("String too complex" error)
003A85  1               LAB_20F5:
003A85  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
003A88  1               
003A88  1               ; put string address and length on descriptor stack and update stack pointers
003A88  1               
003A88  1               LAB_20F8:
003A88  1  A5 AC                LDA     <str_ln         ; get string length
003A8A  1  95 00                STA     <PLUS_0,X       ; put on string stack
003A8C  1  A5 AD                LDA     <str_pl         ; get string pointer low byte
003A8E  1  95 01                STA     <PLUS_1,X       ; put on string stack
003A90  1  A5 AE                LDA     <str_ph         ; get string pointer high byte
003A92  1  95 02                STA     <PLUS_2,X       ; put on string stack
003A94  1  A0 00                LDY     #$00            ; clear Y
003A96  1  86 AE                STX     <des_pl         ; save string descriptor pointer low byte
003A98  1  84 AF                STY     <des_ph         ; save string descriptor pointer high byte (always $00)
003A9A  1  88                   DEY                     ; Y = $FF
003A9B  1  84 5F                STY     <Dtypef         ; save data type flag, $FF=string
003A9D  1  86 66                STX     <last_sl        ; save old stack pointer (current top item)
003A9F  1  E8                   INX                     ; update stack pointer
003AA0  1  E8                   INX                     ; update stack pointer
003AA1  1  E8                   INX                     ; update stack pointer
003AA2  1  86 65                STX     <next_s         ; save new top item value
003AA4  1  60                   RTS
003AA5  1               
003AA5  1               ; Build descriptor
003AA5  1               ; make space in string memory for string A long
003AA5  1               ; return X=<Sutill=ptr low byte, Y=<Sutill=ptr high byte
003AA5  1               
003AA5  1               LAB_2115:
003AA5  1  46 60                LSR     <Gclctd         ; clear garbage collected flag (b7)
003AA7  1               
003AA7  1               ; make space for string A long
003AA7  1               LAB_2117:
003AA7  1  48                   PHA                     ; save string length
003AA8  1  49 FF                EOR     #$FF            ; complement it
003AAA  1  38                   SEC                     ; set carry for subtract (twos comp add)
003AAB  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte (subtract length)
003AAD  1  A4 82                LDY     <Sstorh         ; get bottom of string space high byte
003AAF  1  B0 01                BCS     LAB_2122        ; skip decrement if no underflow
003AB1  1               
003AB1  1  88                   DEY                     ; decrement bottom of string space high byte
003AB2  1               LAB_2122:
003AB2  1  C4 80                CPY     <Earryh         ; compare with array mem end high byte
003AB4  1  90 11                BCC     LAB_2137        ; do out of memory error if less
003AB6  1               
003AB6  1  D0 04                BNE     LAB_212C        ; if not = skip next test
003AB8  1               
003AB8  1  C5 7F                CMP     <Earryl         ; compare with array mem end low byte
003ABA  1  90 0B                BCC     LAB_2137        ; do out of memory error if less
003ABC  1               
003ABC  1               LAB_212C:
003ABC  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
003ABE  1  84 82                STY     <Sstorh         ; save bottom of string space high byte
003AC0  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003AC2  1  84 84                STY     <Sutilh         ; save string utility ptr high byte
003AC4  1  AA                   TAX                     ; copy low byte to X
003AC5  1  68                   PLA                     ; get string length back
003AC6  1  60                   RTS
003AC7  1               
003AC7  1               LAB_2137:
003AC7  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
003AC9  1  A5 60                LDA     <Gclctd         ; get garbage collected flag
003ACB  1  30 B8                BMI     LAB_20F5        ; if set then do error code X
003ACD  1               
003ACD  1  20 D7 3A             JSR     LAB_GARB        ; else go do garbage collection
003AD0  1  A9 80                LDA     #$80            ; flag for garbage collected
003AD2  1  85 60                STA     <Gclctd         ; set garbage collected flag
003AD4  1  68                   PLA                     ; pull length
003AD5  1  D0 D0                BNE     LAB_2117        ; go try again (loop always, length should never be = $00)
003AD7  1               
003AD7  1               ; garbage collection routine
003AD7  1               
003AD7  1               LAB_GARB:
003AD7  1  A6 85                LDX     <Ememl          ; get end of mem low byte
003AD9  1  A5 86                LDA     <Ememh          ; get end of mem high byte
003ADB  1               
003ADB  1               ; re-run routine from last ending
003ADB  1               
003ADB  1               LAB_214B:
003ADB  1  86 81                STX     <Sstorl         ; set string storage low byte
003ADD  1  85 82                STA     <Sstorh         ; set string storage high byte
003ADF  1  A0 00                LDY     #$00            ; clear index
003AE1  1  84 9D                STY     <garb_h         ; clear working pointer high byte (flag no strings to move)
003AE3  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
003AE5  1  A6 80                LDX     <Earryh         ; get array mem end high byte
003AE7  1  85 AA                STA     <Histrl         ; save as highest string low byte
003AE9  1  86 AB                STX     <Histrh         ; save as highest string high byte
003AEB  1  A9 68                LDA     #<des_sk        ; set descriptor stack pointer
003AED  1  85 71                STA     <ut1_pl         ; save descriptor stack pointer low byte
003AEF  1  84 72                STY     <ut1_ph         ; save descriptor stack pointer high byte ($00)
003AF1  1               LAB_2161:
003AF1  1  C5 65                CMP     <next_s         ; compare with descriptor stack pointer
003AF3  1  F0 05                BEQ     LAB_216A        ; branch if =
003AF5  1               
003AF5  1  20 5B 3B             JSR     LAB_21D7        ; go garbage collect descriptor stack
003AF8  1  F0 F7                BEQ     LAB_2161        ; loop always
003AFA  1               
003AFA  1               ; done stacked strings, now do string vars
003AFA  1               LAB_216A:
003AFA  1  06 A0                ASL     <g_step         ; set step size = $06
003AFC  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
003AFE  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
003B00  1  85 71                STA     <ut1_pl         ; save as pointer low byte
003B02  1  86 72                STX     <ut1_ph         ; save as pointer high byte
003B04  1               LAB_2176:
003B04  1  E4 7E                CPX     <Sarryh         ; compare start of arrays high byte
003B06  1  D0 04                BNE     LAB_217E        ; branch if no high byte match
003B08  1               
003B08  1  C5 7D                CMP     <Sarryl         ; else compare start of arrays low byte
003B0A  1  F0 05                BEQ     LAB_2183        ; branch if = var mem end
003B0C  1               
003B0C  1               LAB_217E:
003B0C  1  20 55 3B             JSR     LAB_21D1        ; go garbage collect strings
003B0F  1  F0 F3                BEQ     LAB_2176        ; loop always
003B11  1               
003B11  1               ; done string vars, now do string arrays
003B11  1               LAB_2183:
003B11  1  85 A4                STA     <Nbendl         ; save start of arrays low byte as working pointer
003B13  1  86 A5                STX     <Nbendh         ; save start of arrays high byte as working pointer
003B15  1  A9 04                LDA     #$04            ; set step size
003B17  1  85 A0                STA     <g_step         ; save step size
003B19  1               LAB_218B:
003B19  1  A5 A4                LDA     <Nbendl         ; get pointer low byte
003B1B  1  A6 A5                LDX     <Nbendh         ; get pointer high byte
003B1D  1               LAB_218F:
003B1D  1  E4 80                CPX     <Earryh         ; compare with array mem end high byte
003B1F  1  D0 04                BNE     LAB_219A        ; branch if not at end
003B21  1               
003B21  1  C5 7F                CMP     <Earryl         ; else compare with array mem end low byte
003B23  1  F0 75                BEQ     LAB_2216        ; tidy up and exit if at end
003B25  1               
003B25  1               LAB_219A:
003B25  1  85 71                STA     <ut1_pl         ; save pointer low byte
003B27  1  86 72                STX     <ut1_ph         ; save pointer high byte
003B29  1  A0 02                LDY     #$02            ; set index
003B2B  1  B1 71                LDA     (<ut1_pl),Y     ; get array size low byte
003B2D  1  65 A4                ADC     <Nbendl         ; add start of this array low byte
003B2F  1  85 A4                STA     <Nbendl         ; save start of next array low byte
003B31  1  C8                   INY                     ; increment index
003B32  1  B1 71                LDA     (<ut1_pl),Y     ; get array size high byte
003B34  1  65 A5                ADC     <Nbendh         ; add start of this array high byte
003B36  1  85 A5                STA     <Nbendh         ; save start of next array high byte
003B38  1  A0 01                LDY     #$01            ; set index
003B3A  1  B1 71                LDA     (<ut1_pl),Y     ; get name second byte
003B3C  1  10 DB                BPL     LAB_218B        ; skip if not string array
003B3E  1               
003B3E  1               ; was string array so ..
003B3E  1               
003B3E  1  A0 04                LDY     #$04            ; set index
003B40  1  B1 71                LDA     (<ut1_pl),Y     ; get # of dimensions
003B42  1  0A                   ASL     A               ; *2
003B43  1  69 05                ADC     #$05            ; +5 (array header size)
003B45  1  20 8D 3B             JSR     LAB_2208        ; go set up for first element
003B48  1               LAB_21C4:
003B48  1  E4 A5                CPX     <Nbendh         ; compare with start of next array high byte
003B4A  1  D0 04                BNE     LAB_21CC        ; branch if <> (go do this array)
003B4C  1               
003B4C  1  C5 A4                CMP     <Nbendl         ; else compare element pointer low byte with next array
003B4E  1               ; low byte
003B4E  1  F0 CD                BEQ     LAB_218F        ; if equal then go do next array
003B50  1               
003B50  1               LAB_21CC:
003B50  1  20 5B 3B             JSR     LAB_21D7        ; go defrag array strings
003B53  1  F0 F3                BEQ     LAB_21C4        ; go do next array string (loop always)
003B55  1               
003B55  1               ; defrag string variables
003B55  1               ; enter with XA = variable pointer
003B55  1               ; return with XA = next variable pointer
003B55  1               
003B55  1               LAB_21D1:
003B55  1  C8                   INY                     ; increment index (Y was $00)
003B56  1  B1 71                LDA     (<ut1_pl),Y     ; get var name byte 2
003B58  1  10 30                BPL     LAB_2206        ; if not string, step pointer to next var and return
003B5A  1               
003B5A  1  C8                   INY                     ; else increment index
003B5B  1               LAB_21D7:
003B5B  1  B1 71                LDA     (<ut1_pl),Y     ; get string length
003B5D  1  F0 2B                BEQ     LAB_2206        ; if null, step pointer to next string and return
003B5F  1               
003B5F  1  C8                   INY                     ; else increment index
003B60  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer low byte
003B62  1  AA                   TAX                     ; copy to X
003B63  1  C8                   INY                     ; increment index
003B64  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer high byte
003B66  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
003B68  1  90 06                BCC     LAB_21EC        ; branch if less
003B6A  1               
003B6A  1  D0 1E                BNE     LAB_2206        ; if greater, step pointer to next string and return
003B6C  1               
003B6C  1               ; high bytes were = so compare low bytes
003B6C  1  E4 81                CPX     <Sstorl         ; compare bottom of string space low byte
003B6E  1  B0 1A                BCS     LAB_2206        ; if >=, step pointer to next string and return
003B70  1               
003B70  1               ; string pointer is < string storage pointer (pos in mem)
003B70  1               LAB_21EC:
003B70  1  C5 AB                CMP     <Histrh         ; compare to highest string high byte
003B72  1  90 17                BCC     LAB_2207        ; if <, step pointer to next string and return
003B74  1               
003B74  1  D0 04                BNE     LAB_21F6        ; if > update pointers, step to next and return
003B76  1               
003B76  1               ; high bytes were = so compare low bytes
003B76  1  E4 AA                CPX     <Histrl         ; compare to highest string low byte
003B78  1  90 11                BCC     LAB_2207        ; if <, step pointer to next string and return
003B7A  1               
003B7A  1               ; string is in string memory space
003B7A  1               LAB_21F6:
003B7A  1  86 AA                STX     <Histrl         ; save as new highest string low byte
003B7C  1  85 AB                STA     <Histrh         ; save as new highest string high byte
003B7E  1  A5 71                LDA     <ut1_pl         ; get start of vars(descriptors) low byte
003B80  1  A6 72                LDX     <ut1_ph         ; get start of vars(descriptors) high byte
003B82  1  85 9C                STA     <garb_l         ; save as working pointer low byte
003B84  1  86 9D                STX     <garb_h         ; save as working pointer high byte
003B86  1  88                   DEY                     ; decrement index DIFFERS
003B87  1  88                   DEY                     ; decrement index (should point to descriptor start)
003B88  1  84 A2                STY     <g_indx         ; save index pointer
003B8A  1               
003B8A  1               ; step pointer to next string
003B8A  1               LAB_2206:
003B8A  1  18                   CLC                     ; clear carry for add
003B8B  1               LAB_2207:
003B8B  1  A5 A0                LDA     <g_step         ; get step size
003B8D  1               LAB_2208:
003B8D  1  65 71                ADC     <ut1_pl         ; add pointer low byte
003B8F  1  85 71                STA     <ut1_pl         ; save pointer low byte
003B91  1  90 02                BCC     LAB_2211        ; branch if no overflow
003B93  1               
003B93  1  E6 72                INC     <ut1_ph         ; else increment high byte
003B95  1               LAB_2211:
003B95  1  A6 72                LDX     <ut1_ph         ; get pointer high byte
003B97  1  A0 00                LDY     #$00            ; clear Y
003B99  1  60                   RTS
003B9A  1               
003B9A  1               ; search complete, now either exit or set-up and move string
003B9A  1               
003B9A  1               LAB_2216:
003B9A  1  C6 A0                DEC     <g_step         ; decrement step size (now $03 for descriptor stack)
003B9C  1  A6 9D                LDX     <garb_h         ; get string to move high byte
003B9E  1  F0 F5                BEQ     LAB_2211        ; exit if nothing to move
003BA0  1               
003BA0  1  A4 A2                LDY     <g_indx         ; get index byte back (points to descriptor)
003BA2  1  18                   CLC                     ; clear carry for add
003BA3  1  8B DA A2 01          LDAINDIRECTY garb_l     ; get string length
003BA7  1  B5 9C C9 00  
003BAB  1  D0 04 A2 00  
003BB9  1  65 AA                ADC     <Histrl         ; add highest string low byte
003BBB  1  85 A6                STA     <Obendl         ; save old block end low pointer
003BBD  1  A5 AB                LDA     <Histrh         ; get highest string high byte
003BBF  1  69 00                ADC     #$00            ; add any carry
003BC1  1  85 A7                STA     <Obendh         ; save old block end high byte
003BC3  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003BC5  1  A6 82                LDX     <Sstorh         ; get bottom of string space high byte
003BC7  1  85 A4                STA     <Nbendl         ; save new block end low byte
003BC9  1  86 A5                STX     <Nbendh         ; save new block end high byte
003BCB  1  20 FC 26             JSR     LAB_11D6        ; open up space in memory, don't set array end
003BCE  1  A4 A2                LDY     <g_indx         ; get index byte
003BD0  1  C8                   INY                     ; point to descriptor low byte
003BD1  1  A5 A4                LDA     <Nbendl         ; get string pointer low byte
003BD3  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer low byte
003BD7  1  01 B5 9C C9  
003BDB  1  00 D0 04 A2  
003BE9  1  AA                   TAX                     ; copy string pointer low byte
003BEA  1  E6 A5                INC     <Nbendh         ; correct high byte (move sets high byte -1)
003BEC  1  A5 A5                LDA     <Nbendh         ; get new string pointer high byte
003BEE  1  C8                   INY                     ; point to descriptor high byte
003BEF  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer high byte
003BF3  1  01 B5 9C C9  
003BF7  1  00 D0 04 A2  
003C05  1  4C DB 3A             JMP     LAB_214B        ; re-run routine from last ending
003C08  1               ; (but don't collect this string)
003C08  1               
003C08  1               ; concatenate
003C08  1               ; add strings, string 1 is in descriptor <des_pl, string 2 is in line
003C08  1               
003C08  1               LAB_224D:
003C08  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003C0A  1  48                   PHA                     ; put on stack
003C0B  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003C0D  1  48                   PHA                     ; put on stack
003C0E  1  20 DC 33             JSR     LAB_GVAL        ; get value from line
003C11  1  20 DF 32             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003C14  1  68                   PLA                     ; get descriptor pointer low byte back
003C15  1  85 B8                STA     <ssptr_l        ; set pointer low byte
003C17  1  68                   PLA                     ; get descriptor pointer high byte back
003C18  1  85 B9                STA     <ssptr_h        ; set pointer high byte
003C1A  1  A0 00                LDY     #$00            ; clear index
003C1C  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get length_1 from descriptor
003C20  1  B5 B8 C9 00  
003C24  1  D0 04 A2 00  
003C32  1  18                   CLC                     ; clear carry for add
003C33  1  8B 48 DA A2          ADCINDIRECTY des_pl     ; add length_2
003C37  1  01 B5 AE C9  
003C3B  1  00 D0 04 A2  
003C4C  1  90 05                BCC     LAB_226D        ; branch if no overflow
003C4E  1               
003C4E  1  A2 1A                LDX     #$1A            ; else set error code $1A ("String too long" error)
003C50  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
003C53  1               
003C53  1               LAB_226D:
003C53  1  20 12 3A             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
003C56  1               ; long
003C56  1  20 70 3C             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
003C59  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003C5B  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003C5D  1  20 05 3D             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003C60  1               ; returns with A = length, <ut1_pl = pointer low byte,
003C60  1               ; <ut1_ph = pointer high byte
003C60  1  20 BE 3C             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003C63  1  A5 B8                LDA     <ssptr_l        ;.set descriptor pointer low byte
003C65  1  A4 B9                LDY     <ssptr_h        ;.set descriptor pointer high byte
003C67  1  20 05 3D             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003C6A  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003C6A  1               ; Y=<ut1_ph=pointer high byte
003C6A  1  20 7D 3A             JSR     LAB_RTST        ; check for space on descriptor stack then put string
003C6D  1               ; address and length on descriptor stack and update stack
003C6D  1               ; pointers
003C6D  1  4C 05 33             JMP     LAB_1ADB        ;.continue evaluation
003C70  1               
003C70  1               ; copy string from descriptor (<sdescr) to (<Sutill)
003C70  1               
003C70  1               LAB_228A:
003C70  1  A0 00                LDY     #$00            ; clear index
003C72  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get string length
003C76  1  B5 B8 C9 00  
003C7A  1  D0 04 A2 00  
003C88  1  48                   PHA                     ; save on stack
003C89  1  C8                   INY                     ; increment index
003C8A  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer low byte
003C8E  1  B5 B8 C9 00  
003C92  1  D0 04 A2 00  
003CA0  1  AA                   TAX                     ; copy to X
003CA1  1  C8                   INY                     ; increment index
003CA2  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer high byte
003CA6  1  B5 B8 C9 00  
003CAA  1  D0 04 A2 00  
003CB8  1  A8                   TAY                     ; copy to Y
003CB9  1  68                   PLA                     ; get length back
003CBA  1               
003CBA  1               ; store string A bytes long from YX to (<Sutill)
003CBA  1               
003CBA  1               LAB_2298:
003CBA  1  86 71                STX     <ut1_pl         ; save source string pointer low byte
003CBC  1  84 72                STY     <ut1_ph         ; save source string pointer high byte
003CBE  1               
003CBE  1               ; store string A bytes long from (<ut1_pl) to (<Sutill)
003CBE  1               
003CBE  1               LAB_229C:
003CBE  1  AA                   TAX                     ; copy length to index (don't count with Y)
003CBF  1  F0 3C                BEQ     LAB_22B2        ; branch if = $0 (null string) no need to add zero length
003CC1  1               
003CC1  1  A0 00                LDY     #$00            ; zero pointer (copy forward)
003CC3  1               LAB_22A0:
003CC3  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get source byte
003CC7  1  B5 71 C9 00  
003CCB  1  D0 04 A2 00  
003CD9  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save destination byte
003CDD  1  01 B5 83 C9  
003CE1  1  00 D0 04 A2  
003CEF  1               
003CEF  1  C8                   INY                     ; increment index
003CF0  1  CA                   DEX                     ; decrement counter
003CF1  1  D0 D0                BNE     LAB_22A0        ; loop while <> 0
003CF3  1               
003CF3  1  98                   TYA                     ; restore length from Y
003CF4  1               LAB_22A9:
003CF4  1  18                   CLC                     ; clear carry for add
003CF5  1  65 83                ADC     <Sutill         ; add string utility ptr low byte
003CF7  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003CF9  1  90 02                BCC     LAB_22B2        ; branch if no carry
003CFB  1               
003CFB  1  E6 84                INC     <Sutilh         ; else increment string utility ptr high byte
003CFD  1               LAB_22B2:
003CFD  1  60                   RTS
003CFE  1               
003CFE  1               ; evaluate string
003CFE  1               
003CFE  1               LAB_EVST:
003CFE  1  20 DF 32             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003D01  1               
003D01  1               ; pop string off descriptor stack, or from top of string space
003D01  1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
003D01  1               
003D01  1               LAB_22B6:
003D01  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003D03  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003D05  1               
003D05  1               ; pop (YA) descriptor off stack or from top of string space
003D05  1               ; returns with A = length, X=<ut1_pl=pointer low byte, Y=<ut1_ph=pointer high byte
003D05  1               
003D05  1               LAB_22BA:
003D05  1  85 71                STA     <ut1_pl         ; save descriptor pointer low byte
003D07  1  84 72                STY     <ut1_ph         ; save descriptor pointer high byte
003D09  1  20 72 3D             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
003D0C  1  08                   PHP                     ; save status flags
003D0D  1  A0 00                LDY     #$00            ; clear index
003D0F  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get length from string descriptor
003D13  1  B5 71 C9 00  
003D17  1  D0 04 A2 00  
003D25  1  48                   PHA                     ; put on stack
003D26  1  C8                   INY                     ; increment index
003D27  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte from descriptor
003D2B  1  B5 71 C9 00  
003D2F  1  D0 04 A2 00  
003D3D  1  AA                   TAX                     ; copy to X
003D3E  1  C8                   INY                     ; increment index
003D3F  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte from descriptor
003D43  1  B5 71 C9 00  
003D47  1  D0 04 A2 00  
003D55  1  A8                   TAY                     ; copy to Y
003D56  1  68                   PLA                     ; get string length back
003D57  1  28                   PLP                     ; restore status
003D58  1  D0 13                BNE     LAB_22E6        ; branch if pointer <> <last_sl,<last_sh
003D5A  1               
003D5A  1  C4 82                CPY     <Sstorh         ; compare bottom of string space high byte
003D5C  1  D0 0F                BNE     LAB_22E6        ; branch if <>
003D5E  1               
003D5E  1  E4 81                CPX     <Sstorl         ; else compare bottom of string space low byte
003D60  1  D0 0B                BNE     LAB_22E6        ; branch if <>
003D62  1               
003D62  1  48                   PHA                     ; save string length
003D63  1  18                   CLC                     ; clear carry for add
003D64  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte
003D66  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
003D68  1  90 02                BCC     LAB_22E5        ; skip increment if no overflow
003D6A  1               
003D6A  1  E6 82                INC     <Sstorh         ; increment bottom of string space high byte
003D6C  1               LAB_22E5:
003D6C  1  68                   PLA                     ; restore string length
003D6D  1               LAB_22E6:
003D6D  1  86 71                STX     <ut1_pl         ; save string pointer low byte
003D6F  1  84 72                STY     <ut1_ph         ; save string pointer high byte
003D71  1  60                   RTS
003D72  1               
003D72  1               ; clean descriptor stack, YA = pointer
003D72  1               ; checks if AY is on the descriptor stack, if so does a stack discard
003D72  1               
003D72  1               LAB_22EB:
003D72  1  C4 67                CPY     <last_sh        ; compare pointer high byte
003D74  1  D0 0C                BNE     LAB_22FB        ; exit if <>
003D76  1               
003D76  1  C5 66                CMP     <last_sl        ; compare pointer low byte
003D78  1  D0 08                BNE     LAB_22FB        ; exit if <>
003D7A  1               
003D7A  1  85 65                STA     <next_s         ; save descriptor stack pointer
003D7C  1  E9 03                SBC     #$03            ; -3
003D7E  1  85 66                STA     <last_sl        ; save low byte -3
003D80  1  A0 00                LDY     #$00            ; clear high byte
003D82  1               LAB_22FB:
003D82  1  60                   RTS
003D83  1               
003D83  1               ; perform CHR$()
003D83  1               
003D83  1               LAB_CHRS:
003D83  1  20 8D 3F             JSR     LAB_EVBY        ; evaluate byte expression, result in X
003D86  1  8A                   TXA                     ; copy to A
003D87  1  48                   PHA                     ; save character
003D88  1  A9 01                LDA     #$01            ; string is single byte
003D8A  1  20 1A 3A             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003D8D  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003D8D  1  68                   PLA                     ; get character back
003D8E  1  A0 00                LDY     #$00            ; clear index
003D90  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
003D94  1  01 B5 AD C9  
003D98  1  00 D0 04 A2  
003DA6  1  4C 7D 3A             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003DA9  1               ; address and length on descriptor stack and update stack
003DA9  1               ; pointers
003DA9  1               
003DA9  1               ; perform LEFT$()
003DA9  1               
003DA9  1               LAB_LEFT:
003DA9  1  48                   PHA                     ; push byte parameter
003DAA  1  20 61 3E             JSR     LAB_236F        ; pull string data and byte parameter from stack
003DAD  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003DAD  1  8B 48 DA A2          CMPINDIRECTY des_2l     ; compare byte parameter with string length
003DB1  1  01 B5 9E C9  
003DB5  1  00 D0 04 A2  
003DC5  1  98                   TYA                     ; clear A
003DC6  1  F0 1F                BEQ     LAB_2316        ; go do string copy (branch always)
003DC8  1               
003DC8  1               ; perform RIGHT$()
003DC8  1               
003DC8  1               LAB_RIGHT:
003DC8  1  48                   PHA                     ; push byte parameter
003DC9  1  20 61 3E             JSR     LAB_236F        ; pull string data and byte parameter from stack
003DCC  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003DCC  1  8B 48 DA A2          FETCHINDIRECTY des_2l   ; subtract string length
003DD0  1  01 B5 9E C9  
003DD4  1  00 D0 04 A2  
003DE2  1  18                   CLC                     ; clear carry for add-1
003DE3  1  E5 04                SBC     <TMPFLG         ; REDO SBC WITH CARRY CLEARED (ARTIFACT FROM 816 CONVERSION)
003DE5  1  49 FF                EOR     #$FF            ; invert it (A=LEN(expression$)-l)
003DE7  1               
003DE7  1               LAB_2316:
003DE7  1  90 18                BCC     LAB_231C        ; branch if string length > byte parameter
003DE9  1               
003DE9  1  8B DA A2 01          LDAINDIRECTY des_2l     ; else make parameter = length
003DED  1  B5 9E C9 00  
003DF1  1  D0 04 A2 00  
003DFF  1  AA                   TAX                     ; copy to byte parameter copy
003E00  1  98                   TYA                     ; clear string start offset
003E01  1               LAB_231C:
003E01  1  48                   PHA                     ; save string start offset
003E02  1               LAB_231D:
003E02  1  8A                   TXA                     ; copy byte parameter (or string length if <)
003E03  1               LAB_231E:
003E03  1  48                   PHA                     ; save string length
003E04  1  20 1A 3A             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003E07  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003E07  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003E09  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003E0B  1  20 05 3D             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003E0E  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003E0E  1               ; Y=<ut1_ph=pointer high byte
003E0E  1  68                   PLA                     ; get string length back
003E0F  1  A8                   TAY                     ; copy length to Y
003E10  1  68                   PLA                     ; get string start offset back
003E11  1  18                   CLC                     ; clear carry for add
003E12  1  65 71                ADC     <ut1_pl         ; add start offset to string start pointer low byte
003E14  1  85 71                STA     <ut1_pl         ; save string start pointer low byte
003E16  1  90 02                BCC     LAB_2335        ; branch if no overflow
003E18  1               
003E18  1  E6 72                INC     <ut1_ph         ; else increment string start pointer high byte
003E1A  1               LAB_2335:
003E1A  1  98                   TYA                     ; copy length to A
003E1B  1  20 BE 3C             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003E1E  1  4C 7D 3A             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003E21  1               ; address and length on descriptor stack and update stack
003E21  1               ; pointers
003E21  1               
003E21  1               ; perform MID$()
003E21  1               
003E21  1               LAB_MIDS:
003E21  1  48                   PHA                     ; push byte parameter
003E22  1  A9 FF                LDA     #$FF            ; set default length = 255
003E24  1  85 AF                STA     <mids_l         ; save default length
003E26  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003E2A  1  C9 29                CMP     #')'            ; compare with ")"
003E2C  1  F0 06                BEQ     LAB_2358        ; branch if = ")" (skip second byte get)
003E2E  1               
003E2E  1  20 10 34             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003E31  1  20 8A 3F             JSR     LAB_GTBY        ; get byte parameter (use copy in <mids_l)
003E34  1               LAB_2358:
003E34  1  20 61 3E             JSR     LAB_236F        ; pull string data and byte parameter from stack
003E37  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003E37  1  CA                   DEX                     ; decrement start index
003E38  1  8A                   TXA                     ; copy to A
003E39  1  48                   PHA                     ; save string start offset
003E3A  1  8B 48 DA A2          FETCHINDIRECTY des_2l
003E3E  1  01 B5 9E C9  
003E42  1  00 D0 04 A2  
003E50  1  18                   CLC                     ; clear carry for sub-1
003E51  1  A2 00                LDX     #$00            ; clear output string length
003E53  1  E5 04                SBC     <TMPFLG         ; subtract string length
003E55  1  B0 AB                BCS     LAB_231D        ; if start>string length go do null string
003E57  1               
003E57  1  49 FF                EOR     #$FF            ; complement -length
003E59  1  C5 AF                CMP     <mids_l         ; compare byte parameter
003E5B  1  90 A6                BCC     LAB_231E        ; if length>remaining string go do RIGHT$
003E5D  1               
003E5D  1  A5 AF                LDA     <mids_l         ; get length byte
003E5F  1  B0 A2                BCS     LAB_231E        ; go do string copy (branch always)
003E61  1               
003E61  1               ; pull string data and byte parameter from stack
003E61  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003E61  1               
003E61  1               LAB_236F:
003E61  1  20 FF 33             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003E64  1  68                   PLA                     ; pull return address low byte (return address)
003E65  1  85 A2                STA     <Fnxjpl         ; save functions jump vector low byte
003E67  1  68                   PLA                     ; pull return address high byte (return address)
003E68  1  85 A3                STA     <Fnxjph         ; save functions jump vector high byte
003E6A  1  68                   PLA                     ; pull byte parameter
003E6B  1  AA                   TAX                     ; copy byte parameter to X
003E6C  1  68                   PLA                     ; pull string pointer low byte
003E6D  1  85 9E                STA     <des_2l         ; save it
003E6F  1  68                   PLA                     ; pull string pointer high byte
003E70  1  85 9F                STA     <des_2h         ; save it
003E72  1  A0 00                LDY     #$00            ; clear index
003E74  1  8A                   TXA                     ; copy byte parameter
003E75  1  D0 03 4C 83          LBEQ    LAB_23A8        ; if null do function call error then warm start
003E79  1  3F           
003E7A  1               
003E7A  1  E6 A2                INC     <Fnxjpl         ; increment function jump vector low byte
003E7C  1               ; (JSR pushes return addr-1. this is all very nice
003E7C  1               ; but will go tits up if either call is on a page
003E7C  1               ; boundary!)
003E7C  1  6C A2 00             JMP     (Fnxjpl)        ; in effect, RTS
003E7F  1               
003E7F  1               ; perform LCASE$()
003E7F  1               
003E7F  1               LAB_LCASE:
003E7F  1  20 FE 3C             JSR     LAB_EVST        ; evaluate string
003E82  1  85 AC                STA     <str_ln         ; set string length
003E84  1  A8                   TAY                     ; copy length to Y
003E85  1  D0 03 4C 12          LBEQ    NoString        ; branch if null string
003E89  1  3F           
003E8A  1               
003E8A  1  20 1A 3A             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003E8D  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003E8D  1  86 AD                STX     <str_pl         ; save string pointer low byte
003E8F  1  84 AE                STY     <str_ph         ; save string pointer high byte
003E91  1  A8                   TAY                     ; get string length back
003E92  1               
003E92  1               LC_loop:
003E92  1  88                   DEY                     ; decrement index
003E93  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003E97  1  B5 71 C9 00  
003E9B  1  D0 04 A2 00  
003EA9  1  20 67 36             JSR     LAB_1D82        ; is character "A" to "Z"
003EAC  1  90 02                BCC     NoUcase         ; branch if not upper case alpha
003EAE  1               
003EAE  1  09 20                ORA     #$20            ; convert upper to lower case
003EB0  1               NoUcase:
003EB0  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003EB4  1  01 B5 83 C9  
003EB8  1  00 D0 04 A2  
003EC6  1  98                   TYA                     ; test index
003EC7  1  D0 C9                BNE     LC_loop         ; loop if not all done
003EC9  1               
003EC9  1  F0 47                BEQ     NoString        ; tidy up and exit, branch always
003ECB  1               
003ECB  1               ; perform UCASE$()
003ECB  1               
003ECB  1               LAB_UCASE:
003ECB  1  20 FE 3C             JSR     LAB_EVST        ; evaluate string
003ECE  1  85 AC                STA     <str_ln         ; set string length
003ED0  1  A8                   TAY                     ; copy length to Y
003ED1  1  F0 3F                BEQ     NoString        ; branch if null string
003ED3  1               
003ED3  1  20 1A 3A             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003ED6  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003ED6  1  86 AD                STX     <str_pl         ; save string pointer low byte
003ED8  1  84 AE                STY     <str_ph         ; save string pointer high byte
003EDA  1  A8                   TAY                     ; get string length back
003EDB  1               
003EDB  1               UC_loop:
003EDB  1  88                   DEY                     ; decrement index
003EDC  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003EE0  1  B5 71 C9 00  
003EE4  1  D0 04 A2 00  
003EF2  1  20 63 36             JSR     LAB_CASC        ; is character "a" to "z" (or "A" to "Z")
003EF5  1  90 02                BCC     NoLcase         ; branch if not alpha
003EF7  1               
003EF7  1  29 DF                AND     #$DF            ; convert lower to upper case
003EF9  1               NoLcase:
003EF9  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003EFD  1  01 B5 83 C9  
003F01  1  00 D0 04 A2  
003F0F  1  98                   TYA                     ; test index
003F10  1  D0 C9                BNE     UC_loop         ; loop if not all done
003F12  1               
003F12  1               NoString:
003F12  1  4C 7D 3A             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003F15  1               ; address and length on descriptor stack and update stack
003F15  1               ; pointers
003F15  1               
003F15  1               ; perform SADD()
003F15  1               
003F15  1               LAB_SADD:
003F15  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003F19  1  20 EB 35             JSR     LAB_GVAR        ; get var address
003F1C  1               
003F1C  1  20 FF 33             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003F1F  1  20 DF 32             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003F22  1               
003F22  1  A0 02                LDY     #$02            ; index to string pointer high byte
003F24  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer high byte
003F28  1  B5 95 C9 00  
003F2C  1  D0 04 A2 00  
003F3A  1  AA                   TAX                     ; copy string pointer high byte to X
003F3B  1  88                   DEY                     ; index to string pointer low byte
003F3C  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer low byte
003F40  1  B5 95 C9 00  
003F44  1  D0 04 A2 00  
003F52  1  A8                   TAY                     ; copy string pointer low byte to Y
003F53  1  8A                   TXA                     ; copy string pointer high byte to A
003F54  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003F57  1               
003F57  1               ; perform LEN()
003F57  1               
003F57  1               LAB_LENS:
003F57  1  20 5D 3F             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003F5A  1  4C B6 38             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003F5D  1               
003F5D  1               ; evaluate string, get length in Y
003F5D  1               
003F5D  1               LAB_ESGL:
003F5D  1  20 FE 3C             JSR     LAB_EVST        ; evaluate string
003F60  1  A8                   TAY                     ; copy length to Y
003F61  1  60                   RTS
003F62  1               
003F62  1               ; perform ASC()
003F62  1               
003F62  1               LAB_ASC:
003F62  1  20 5D 3F             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003F65  1  F0 1C                BEQ     LAB_23A8        ; if null do function call error then warm start
003F67  1               
003F67  1  A0 00                LDY     #$00            ; set index to first character
003F69  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
003F6D  1  B5 71 C9 00  
003F71  1  D0 04 A2 00  
003F7F  1  A8                   TAY                     ; copy to Y
003F80  1  4C B6 38             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003F83  1               
003F83  1               ; do function call error then warm start
003F83  1               
003F83  1               LAB_23A8:
003F83  1  4C 73 37             JMP     LAB_FCER        ; do function call error then warm start
003F86  1               
003F86  1               ; scan and get byte parameter
003F86  1               
003F86  1               LAB_SGBY:
003F86  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003F8A  1               
003F8A  1               ; get byte parameter
003F8A  1               
003F8A  1               LAB_GTBY:
003F8A  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003F8D  1               ; else do type mismatch
003F8D  1               
003F8D  1               ; evaluate byte expression, result in X
003F8D  1               
003F8D  1               LAB_EVBY:
003F8D  1  20 E8 36             JSR     LAB_EVPI        ; evaluate integer expression (no check)
003F90  1               
003F90  1  A4 AE                LDY     <FAC1_2         ; get FAC1 mantissa2
003F92  1  D0 EF                BNE     LAB_23A8        ; if top byte <> 0 do function call error then warm start
003F94  1               
003F94  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
003F96  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003F9A  1  60                   RTS
003F9B  1               
003F9B  1               ; perform VAL()
003F9B  1               
003F9B  1               LAB_VAL:
003F9B  1  20 5D 3F             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003F9E  1  D0 03                BNE     LAB_23C5        ; branch if not null string
003FA0  1               
003FA0  1               ; string was null so set result = $00
003FA0  1  4C EB 41             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
003FA3  1               
003FA3  1               LAB_23C5:
003FA3  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
003FA5  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003FA7  1  86 BA                STX     <Btmpl          ; save BASIC execute pointer low byte
003FA9  1  84 BB                STY     <Btmph          ; save BASIC execute pointer high byte
003FAB  1  A6 71                LDX     <ut1_pl         ; get string pointer low byte
003FAD  1  86 C3                STX     <Bpntrl         ; save as BASIC execute pointer low byte
003FAF  1  18                   CLC                     ; clear carry
003FB0  1  65 71                ADC     <ut1_pl         ; add string length
003FB2  1  85 73                STA     <ut2_pl         ; save string end low byte
003FB4  1  A5 72                LDA     <ut1_ph         ; get string pointer high byte
003FB6  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003FB8  1  69 00                ADC     #$00            ; add carry to high byte
003FBA  1  85 74                STA     <ut2_ph         ; save string end high byte
003FBC  1  A0 00                LDY     #$00            ; set index to $00
003FBE  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get string end +1 byte
003FC2  1  B5 73 C9 00  
003FC6  1  D0 04 A2 00  
003FD4  1  48                   PHA                     ; push it
003FD5  1  98                   TYA                     ; clear A
003FD6  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; terminate string with $00
003FDA  1  01 B5 73 C9  
003FDE  1  00 D0 04 A2  
003FEC  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003FF0  1  20 95 46             JSR     LAB_2887        ; get FAC1 from string
003FF3  1  68                   PLA                     ; restore string end +1 byte
003FF4  1  A0 00                LDY     #$00            ; set index to zero
003FF6  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; put string end byte back
003FFA  1  01 B5 73 C9  
003FFE  1  00 D0 04 A2  
00400C  1               
00400C  1               ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
00400C  1               
00400C  1               LAB_23F3:
00400C  1  A6 BA                LDX     <Btmpl          ; get BASIC execute pointer low byte back
00400E  1  A4 BB                LDY     <Btmph          ; get BASIC execute pointer high byte back
004010  1  86 C3                STX     <Bpntrl         ; save BASIC execute pointer low byte
004012  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
004014  1  60                   RTS
004015  1               
004015  1               ; get two parameters for POKE or WAIT
004015  1               
004015  1               LAB_GADB:
004015  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
004018  1               ; else do type mismatch
004018  1  20 2E 40             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
00401B  1               
00401B  1               ; scan for "," and get byte, else do Syntax error then warm start
00401B  1               
00401B  1               LAB_SCGB:
00401B  1  20 10 34             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
00401E  1  A5 12                LDA     <Itemph         ; save temporary integer high byte
004020  1  48                   PHA                     ; on stack
004021  1  A5 11                LDA     <Itempl         ; save temporary integer low byte
004023  1  48                   PHA                     ; on stack
004024  1  20 8A 3F             JSR     LAB_GTBY        ; get byte parameter
004027  1  68                   PLA                     ; pull low byte
004028  1  85 11                STA     <Itempl         ; restore temporary integer low byte
00402A  1  68                   PLA                     ; pull high byte
00402B  1  85 12                STA     <Itemph         ; restore temporary integer high byte
00402D  1  60                   RTS
00402E  1               
00402E  1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
00402E  1               ; -ve and converts it into a right truncated integer in <Itempl and <Itemph
00402E  1               
00402E  1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
00402E  1               
00402E  1               LAB_F2FX:
00402E  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004030  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
004032  1  B0 03                BCS     LAB_23A8_1      ; do function call error then warm start
004034  1  4C 3A 40             JMP     LAB_F2FU
004037  1               LAB_23A8_1:
004037  1  4C 83 3F             JMP     LAB_23A8
00403A  1               LAB_F2FU:
00403A  1  20 3F 46             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
00403D  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00403F  1  A4 AF                LDY     <FAC1_3         ; get FAC1 mantissa3
004041  1  84 11                STY     <Itempl         ; save temporary integer low byte
004043  1  85 12                STA     <Itemph         ; save temporary integer high byte
004045  1  60                   RTS
004046  1               
004046  1               ; perform PEEK()
004046  1               
004046  1               LAB_PEEK:
004046  1  20 2E 40             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
004049  1  A2 00                LDX     #$00            ; clear index
00404B  1  8B                   PHB
00404C  1  DA A2 00 DA          SETBANK 0
004050  1  AB FA        
004052  1  A1 11                LDA     (<Itempl,X)     ; get byte via temporary integer (addr)
004054  1  AB                   PLB
004055  1  A8                   TAY                     ; copy byte to Y
004056  1  4C B6 38             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
004059  1               
004059  1               ; perform POKE
004059  1               
004059  1               LAB_POKE:
004059  1  20 15 40             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
00405C  1  8A                   TXA                     ; copy byte argument to A
00405D  1  A2 00                LDX     #$00            ; clear index
00405F  1  8B                   PHB
004060  1  DA A2 00 DA          SETBANK 0
004064  1  AB FA        
004066  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
004068  1  AB                   PLB
004069  1  60                   RTS
00406A  1               
00406A  1               ; perform SYS
00406A  1               
00406A  1               LAB_SYS:
00406A  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00406D  1               ; else do type mismatch
00406D  1  20 2E 40             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
004070  1               
004070  1  A5 11                LDA     <Itempl
004072  1  85 0B                STA     <Usrjpl
004074  1  A5 12                LDA     <Itemph
004076  1  85 0C                STA     <Usrjph
004078  1  22 0A 00 00          JSL     Usrjmp
00407C  1  60                   RTS
00407D  1               
00407D  1               ; perform SWAP
00407D  1               
00407D  1               LAB_SWAP:
00407D  1  20 EB 35             JSR     LAB_GVAR        ; get var1 address
004080  1  85 97                STA     <Lvarpl         ; save var1 address low byte
004082  1  84 98                STY     <Lvarph         ; save var1 address high byte
004084  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
004086  1  48                   PHA                     ; save data type flag
004087  1               
004087  1  20 10 34             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
00408A  1  20 EB 35             JSR     LAB_GVAR        ; get var2 address (pointer in <Cvaral/h)
00408D  1  68                   PLA                     ; pull var1 data type flag
00408E  1  45 5F                EOR     <Dtypef         ; compare with var2 data type
004090  1  10 60                BPL     SwapErr         ; exit if not both the same type
004092  1               
004092  1  A0 03                LDY     #$03            ; four bytes to swap (either value or descriptor+1)
004094  1               SwapLp:
004094  1  8B DA A2 01          LDAINDIRECTY Lvarpl     ; get byte from var1
004098  1  B5 97 C9 00  
00409C  1  D0 04 A2 00  
0040AA  1  AA                   TAX                     ; save var1 byte
0040AB  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from var2
0040AF  1  B5 95 C9 00  
0040B3  1  D0 04 A2 00  
0040C1  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; save byte to var1
0040C5  1  01 B5 97 C9  
0040C9  1  00 D0 04 A2  
0040D7  1  8A                   TXA                     ; restore var1 byte
0040D8  1  8B DA 48 A2          STAINDIRECTY Cvaral     ; save byte to var2
0040DC  1  01 B5 95 C9  
0040E0  1  00 D0 04 A2  
0040EE  1  88                   DEY                     ; decrement index
0040EF  1  10 A3                BPL     SwapLp          ; loop until done
0040F1  1               
0040F1  1  60                   RTS
0040F2  1               
0040F2  1               SwapErr:
0040F2  1  4C E9 32             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
0040F5  1               
0040F5  1               ; perform CALL
0040F5  1               
0040F5  1               LAB_CALL:
0040F5  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0040F8  1               ; else do type mismatch
0040F8  1  20 2E 40             JSR     LAB_F2FX        ; convert floating-to-fixed
0040FB  1  A9 41                LDA     #>CallExit      ; set return address high byte
0040FD  1  48                   PHA                     ; put on stack
0040FE  1  A9 03                LDA     #<CallExit-1    ; set return address low byte
004100  1  48                   PHA                     ; put on stack
004101  1  6C 11 00             JMP     (Itempl)        ; do indirect jump to user routine
004104  1               
004104  1               ; if the called routine exits correctly then it will return to here. this will then get
004104  1               ; the next byte for the interpreter and return
004104  1               
004104  1               CallExit:
004104  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
004108  1  60                   RTS
004109  1               ; perform WAIT
004109  1               
004109  1               LAB_WAIT:
004109  1  20 15 40             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
00410C  1  86 97                STX     <Frnxtl         ; save byte
00410E  1  A2 00                LDX     #$00            ; clear mask
004110  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
004114  1  F0 03                BEQ     LAB_2441        ; skip if no third argument
004116  1               
004116  1  20 1B 40             JSR     LAB_SCGB        ; scan for "," and get byte, else SN error then warm start
004119  1               LAB_2441:
004119  1  86 98                STX     <Frnxth         ; save EOR argument
00411B  1               LAB_2445:
00411B  1  8B DA A2 01          LDAINDIRECTY Itempl     ; get byte via temporary integer (addr)
00411F  1  B5 11 C9 00  
004123  1  D0 04 A2 00  
004131  1  45 98                EOR     <Frnxth         ; EOR with second argument (mask)
004133  1  25 97                AND     <Frnxtl         ; AND with first argument (byte)
004135  1  F0 E4                BEQ     LAB_2445        ; loop if result is zero
004137  1               
004137  1               LAB_244D:
004137  1  60                   RTS
004138  1               
004138  1               ; perform subtraction, FAC1 from (AY)
004138  1               
004138  1               LAB_2455:
004138  1  20 26 43             JSR     LAB_264D        ; unpack memory (AY) into FAC2
00413B  1               
00413B  1               ; perform subtraction, FAC1 from FAC2
00413B  1               
00413B  1               LAB_SUBTRACT:
00413B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00413D  1  49 FF                EOR     #$FF            ; complement it
00413F  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004141  1  45 B7                EOR     <FAC2_s         ; EOR with FAC2 sign (b7)
004143  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004145  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004147  1  4C 56 41             JMP     LAB_ADD         ; go add FAC2 to FAC1
00414A  1               
00414A  1               ; perform addition
00414A  1               
00414A  1               LAB_2467:
00414A  1  20 75 42             JSR     LAB_257B        ; shift FACX A times right (>8 shifts)
00414D  1  90 4D                BCC     LAB_24A8        ;.go subtract mantissas
00414F  1               
00414F  1               ; add 0.5 to FAC1
00414F  1               
00414F  1               LAB_244E:
00414F  1  A9 B5                LDA     #<LAB_2A96      ; set 0.5 pointer low byte
004151  1  A0 18                LDY     #>LAB_2A96      ; set 0.5 pointer high byte
004153  1               
004153  1               ; add (AY) to FAC1
004153  1               
004153  1               LAB_246C:
004153  1  20 26 43             JSR     LAB_264D        ; unpack memory (AY) into FAC2
004156  1               
004156  1               ; add FAC2 to FAC1
004156  1               
004156  1               LAB_ADD:
004156  1  D0 10                BNE     LAB_2474        ; branch if FAC1 was not zero
004158  1               
004158  1               ; copy FAC2 to FAC1
004158  1               
004158  1               LAB_279B:
004158  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
00415A  1               
00415A  1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
00415A  1               
00415A  1               LAB_279D:
00415A  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
00415C  1  A2 04                LDX     #$04            ; 4 bytes to copy
00415E  1               LAB_27A1:
00415E  1  B5 B2                LDA     <FAC1_o,X       ; get byte from FAC2,X
004160  1  95 AB                STA     <FAC1_e-1,X     ; save byte at FAC1,X
004162  1  CA                   DEX                     ; decrement count
004163  1  D0 F9                BNE     LAB_27A1        ; loop if not all done
004165  1               
004165  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
004167  1  60                   RTS
004168  1               
004168  1               ; FAC1 is non zero
004168  1               LAB_2474:
004168  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
00416A  1  86 A3                STX     <FAC2_r         ; save as FAC2 rounding byte
00416C  1  A2 B3                LDX     #<FAC2_e        ; set index to FAC2 exponent addr
00416E  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
004170  1               LAB_247C:
004170  1  A8                   TAY                     ; copy exponent
004171  1  F0 C4                BEQ     LAB_244D        ; exit if zero
004173  1  38                   SEC                     ; set carry for subtract
004174  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
004176  1  F0 24                BEQ     LAB_24A8        ; branch if = (go add mantissa)
004178  1  90 12                BCC     LAB_2498        ; branch if <
00417A  1               ; FAC2>FAC1
00417A  1  84 AC                STY     <FAC1_e         ; save FAC1 exponent
00417C  1  A4 B7                LDY     <FAC2_s         ; get FAC2 sign (b7)
00417E  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
004180  1  49 FF                EOR     #$FF            ; complement A
004182  1  69 00                ADC     #$00            ; +1 (twos complement, carry is set)
004184  1  A0 00                LDY     #$00            ; clear Y
004186  1  84 A3                STY     <FAC2_r         ; clear FAC2 rounding byte
004188  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1 exponent addr
00418A  1  D0 04                BNE     LAB_249C        ; branch always
00418C  1               LAB_2498:
00418C  1  A0 00                LDY     #$00            ; clear Y
00418E  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004190  1               LAB_249C:
004190  1  C9 F9                CMP     #$F9            ; compare exponent diff with $F9
004192  1  30 B6                BMI     LAB_2467        ; branch if range $79-$F8
004194  1  A8                   TAY                     ; copy exponent difference to Y
004195  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004197  1  56 01                LSR     <PLUS_1,X       ; shift FAC? mantissa1
004199  1  20 8C 42             JSR     LAB_2592        ; shift FACX Y times right
00419C  1               ; exponents are equal now do mantissa subtract
00419C  1               LAB_24A8:
00419C  1  24 B8                BIT     <FAC_sc         ; test sign compare (FAC1 EOR FAC2)
00419E  1  10 52                BPL     LAB_24F8        ; if = add FAC2 mantissa to FAC1 mantissa and return
0041A0  1               
0041A0  1  A0 AC                LDY     #<FAC1_e        ; set index to FAC1 exponent addr
0041A2  1  E0 B3                CPX     #<FAC2_e        ; compare X to FAC2 exponent addr
0041A4  1  F0 02                BEQ     LAB_24B4        ; branch if =
0041A6  1               
0041A6  1  A0 B3                LDY     #<FAC2_e        ; else set index to FAC2 exponent addr
0041A8  1               
0041A8  1               ; subtract smaller from bigger (take sign of bigger)
0041A8  1               LAB_24B4:
0041A8  1  38                   SEC                     ; set carry for subtract
0041A9  1  49 FF                EOR     #$FF            ; ones complement A
0041AB  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
0041AD  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
0041AF  1  DA                   PHX
0041B0  1  BB                   TYX
0041B1  1  B5 03                LDA     <PLUS_3,X       ; get FACY mantissa3
0041B3  1  FA                   PLX
0041B4  1  F5 03                SBC     <PLUS_3,X       ; subtract FACX mantissa3
0041B6  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0041B8  1  DA                   PHX
0041B9  1  BB                   TYX
0041BA  1  B5 02                LDA     <PLUS_2,x       ; get FACY mantissa2
0041BC  1  FA                   PLX
0041BD  1  F5 02                SBC     <PLUS_2,X       ; subtract FACX mantissa2
0041BF  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0041C1  1  DA                   PHX
0041C2  1  BB                   TYX
0041C3  1  B5 01                LDA     <PLUS_1,x       ; get FACY mantissa1
0041C5  1  FA                   PLX
0041C6  1  F5 01                SBC     <PLUS_1,X       ; subtract FACX mantissa1
0041C8  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0041CA  1               
0041CA  1               ; do ABS and normalise FAC1
0041CA  1               
0041CA  1               LAB_24D0:
0041CA  1  B0 03                BCS     LAB_24D5        ; branch if number is +ve
0041CC  1               
0041CC  1  20 31 42             JSR     LAB_2537        ; negate FAC1
0041CF  1               
0041CF  1               ; normalise FAC1
0041CF  1               
0041CF  1               LAB_24D5:
0041CF  1  A0 00                LDY     #$00            ; clear Y
0041D1  1  98                   TYA                     ; clear A
0041D2  1  18                   CLC                     ; clear carry for add
0041D3  1               LAB_24D9:
0041D3  1  A6 AD                LDX     <FAC1_1         ; get FAC1 mantissa1
0041D5  1  D0 3E                BNE     LAB_251B        ; if not zero normalise FAC1
0041D7  1               
0041D7  1  A6 AE                LDX     <FAC1_2         ; get FAC1 mantissa2
0041D9  1  86 AD                STX     <FAC1_1         ; save FAC1 mantissa1
0041DB  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
0041DD  1  86 AE                STX     <FAC1_2         ; save FAC1 mantissa2
0041DF  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
0041E1  1  86 AF                STX     <FAC1_3         ; save FAC1 mantissa3
0041E3  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
0041E5  1  69 08                ADC     #$08            ; add x to exponent offset
0041E7  1  C9 18                CMP     #$18            ; compare with $18 (max offset, all bits would be =0)
0041E9  1  D0 E8                BNE     LAB_24D9        ; loop if not max
0041EB  1               
0041EB  1               ; clear FAC1 exponent and sign
0041EB  1               
0041EB  1               LAB_24F1:
0041EB  1  A9 00                LDA     #$00            ; clear A
0041ED  1               LAB_24F3:
0041ED  1  85 AC                STA     <FAC1_e         ; set FAC1 exponent
0041EF  1               
0041EF  1               ; save FAC1 sign
0041EF  1               
0041EF  1               LAB_24F5:
0041EF  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0041F1  1  60                   RTS
0041F2  1               
0041F2  1               ; add FAC2 mantissa to FAC1 mantissa
0041F2  1               
0041F2  1               LAB_24F8:
0041F2  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
0041F4  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
0041F6  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0041F8  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
0041FA  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0041FC  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0041FE  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
004200  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004202  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004204  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
004206  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004208  1  B0 1A                BCS     LAB_252A        ; if carry then normalise FAC1 for C=1
00420A  1               
00420A  1  60                   RTS                     ; else just exit
00420B  1               
00420B  1               LAB_2511:
00420B  1  69 01                ADC     #$01            ; add 1 to exponent offset
00420D  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
00420F  1  26 AF                ROL     <FAC1_3         ; shift FAC1 mantissa3
004211  1  26 AE                ROL     <FAC1_2         ; shift FAC1 mantissa2
004213  1  26 AD                ROL     <FAC1_1         ; shift FAC1 mantissa1
004215  1               
004215  1               ; normalise FAC1
004215  1               
004215  1               LAB_251B:
004215  1  10 F4                BPL     LAB_2511        ; loop if not normalised
004217  1               
004217  1  38                   SEC                     ; set carry for subtract
004218  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
00421A  1  B0 CF                BCS     LAB_24F1        ; branch if underflow (set result = $0)
00421C  1               
00421C  1  49 FF                EOR     #$FF            ; complement exponent
00421E  1  69 01                ADC     #$01            ; +1 (twos complement)
004220  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004222  1               
004222  1               ; test and normalise FAC1 for C=0/1
004222  1               
004222  1               LAB_2528:
004222  1  90 0C                BCC     LAB_2536        ; exit if no overflow
004224  1               
004224  1               ; normalise FAC1 for C=1
004224  1               
004224  1               LAB_252A:
004224  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
004226  1  F0 36                BEQ     LAB_2564        ; if zero do overflow error and warm start
004228  1               
004228  1  66 AD                ROR     <FAC1_1         ; shift FAC1 mantissa1
00422A  1  66 AE                ROR     <FAC1_2         ; shift FAC1 mantissa2
00422C  1  66 AF                ROR     <FAC1_3         ; shift FAC1 mantissa3
00422E  1  66 B9                ROR     <FAC1_r         ; shift FAC1 rounding byte
004230  1               LAB_2536:
004230  1  60                   RTS
004231  1               
004231  1               ; negate FAC1
004231  1               
004231  1               LAB_2537:
004231  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004233  1  49 FF                EOR     #$FF            ; complement it
004235  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004237  1               
004237  1               ; twos complement FAC1 mantissa
004237  1               
004237  1               LAB_253D:
004237  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004239  1  49 FF                EOR     #$FF            ; complement it
00423B  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00423D  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00423F  1  49 FF                EOR     #$FF            ; complement it
004241  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004243  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004245  1  49 FF                EOR     #$FF            ; complement it
004247  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004249  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
00424B  1  49 FF                EOR     #$FF            ; complement it
00424D  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
00424F  1  E6 B9                INC     <FAC1_r         ; increment FAC1 rounding byte
004251  1  D0 0A                BNE     LAB_2563        ; exit if no overflow
004253  1               
004253  1               ; increment FAC1 mantissa
004253  1               
004253  1               LAB_2559:
004253  1  E6 AF                INC     <FAC1_3         ; increment FAC1 mantissa3
004255  1  D0 06                BNE     LAB_2563        ; finished if no rollover
004257  1               
004257  1  E6 AE                INC     <FAC1_2         ; increment FAC1 mantissa2
004259  1  D0 02                BNE     LAB_2563        ; finished if no rollover
00425B  1               
00425B  1  E6 AD                INC     <FAC1_1         ; increment FAC1 mantissa1
00425D  1               LAB_2563:
00425D  1  60                   RTS
00425E  1               
00425E  1               ; do overflow error (overflow exit)
00425E  1               
00425E  1               LAB_2564:
00425E  1  A2 0A                LDX     #$0A            ; error code $0A ("Overflow" error)
004260  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
004263  1               
004263  1               ; shift FCAtemp << A+8 times
004263  1               
004263  1               LAB_2569:
004263  1  A2 74                LDX     #<FACt_1-1      ; set offset to FACtemp
004265  1               LAB_256B:
004265  1  B4 03                LDY     <PLUS_3,X       ; get FACX mantissa3
004267  1  84 B9                STY     <FAC1_r         ; save as FAC1 rounding byte
004269  1  B4 02                LDY     <PLUS_2,X       ; get FACX mantissa2
00426B  1  94 03                STY     <PLUS_3,X       ; save FACX mantissa3
00426D  1  B4 01                LDY     <PLUS_1,X       ; get FACX mantissa1
00426F  1  94 02                STY     <PLUS_2,X       ; save FACX mantissa2
004271  1  A4 B2                LDY     <FAC1_o         ; get FAC1 overflow byte
004273  1  94 01                STY     <PLUS_1,X       ; save FACX mantissa1
004275  1               
004275  1               ; shift FACX -A times right (> 8 shifts)
004275  1               
004275  1               LAB_257B:
004275  1  69 08                ADC     #$08            ; add 8 to shift count
004277  1  30 EC                BMI     LAB_256B        ; go do 8 shift if still -ve
004279  1               
004279  1  F0 EA                BEQ     LAB_256B        ; go do 8 shift if zero
00427B  1               
00427B  1  E9 08                SBC     #$08            ; else subtract 8 again
00427D  1  A8                   TAY                     ; save count to Y
00427E  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004280  1  B0 12                BCS     LAB_259A        ;.
004282  1               
004282  1               LAB_2588:
004282  1  16 01                ASL     <PLUS_1,X       ; shift FACX mantissa1
004284  1  90 02                BCC     LAB_258E        ; branch if +ve
004286  1               
004286  1  F6 01                INC     <PLUS_1,X       ; this sets b7 eventually
004288  1               LAB_258E:
004288  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (correct for ASL)
00428A  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (put carry in b7)
00428C  1               
00428C  1               ; shift FACX Y times right
00428C  1               
00428C  1               LAB_2592:
00428C  1  76 02                ROR     <PLUS_2,X       ; shift FACX mantissa2
00428E  1  76 03                ROR     <PLUS_3,X       ; shift FACX mantissa3
004290  1  6A                   ROR     A               ; shift FACX rounding byte
004291  1  C8                   INY                     ; increment exponent diff
004292  1  D0 EE                BNE     LAB_2588        ; branch if range adjust not complete
004294  1               
004294  1               LAB_259A:
004294  1  18                   CLC                     ; just clear it
004295  1  60                   RTS
004296  1               
004296  1               ; perform LOG()
004296  1               
004296  1               LAB_LOG:
004296  1  20 74 45             JSR     LAB_27CA        ; test sign and zero
004299  1  F0 02                BEQ     LAB_25C4        ; if zero do function call error then warm start
00429B  1               
00429B  1  10 03                BPL     LAB_25C7        ; skip error if +ve
00429D  1               
00429D  1               LAB_25C4:
00429D  1  4C 73 37             JMP     LAB_FCER        ; do function call error then warm start (-ve)
0042A0  1               
0042A0  1               LAB_25C7:
0042A0  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0042A2  1  E9 7F                SBC     #$7F            ; normalise it
0042A4  1  48                   PHA                     ; save it
0042A5  1  A9 80                LDA     #$80            ; set exponent to zero
0042A7  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0042A9  1  A9 35                LDA     #<LAB_25AD      ; set 1/root2 pointer low byte
0042AB  1  A0 18                LDY     #>LAB_25AD      ; set 1/root2 pointer high byte
0042AD  1  20 53 41             JSR     LAB_246C        ; add (AY) to FAC1 (1/root2)
0042B0  1  A9 39                LDA     #<LAB_25B1      ; set root2 pointer low byte
0042B2  1  A0 18                LDY     #>LAB_25B1      ; set root2 pointer high byte
0042B4  1  20 EC 43             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
0042B7  1  A9 AC                LDA     #<LAB_259C      ; set 1 pointer low byte
0042B9  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
0042BB  1  20 38 41             JSR     LAB_2455        ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
0042BE  1  A9 28                LDA     #<LAB_25A0      ; set pointer low byte to counter
0042C0  1  A0 18                LDY     #>LAB_25A0      ; set pointer high byte to counter
0042C2  1  20 75 49             JSR     LAB_2B6E        ; ^2 then series evaluation
0042C5  1  A9 3D                LDA     #<LAB_25B5      ; set -0.5 pointer low byte
0042C7  1  A0 18                LDY     #>LAB_25B5      ; set -0.5 pointer high byte
0042C9  1  20 53 41             JSR     LAB_246C        ; add (AY) to FAC1
0042CC  1  68                   PLA                     ; restore FAC1 exponent
0042CD  1  20 3B 47             JSR     LAB_2912        ; evaluate new ASCII digit
0042D0  1  A9 41                LDA     #<LAB_25B9      ; set LOG(2) pointer low byte
0042D2  1  A0 18                LDY     #>LAB_25B9      ; set LOG(2) pointer high byte
0042D4  1               
0042D4  1               ; do convert AY, FCA1*(AY)
0042D4  1               
0042D4  1               LAB_25FB:
0042D4  1  20 26 43             JSR     LAB_264D        ; unpack memory (AY) into FAC2
0042D7  1               LAB_MULTIPLY:
0042D7  1  F0 4C                BEQ     LAB_264C        ; exit if zero
0042D9  1               
0042D9  1  20 9C 43             JSR     LAB_2673        ; test and adjust accumulators
0042DC  1  A9 00                LDA     #$00            ; clear A
0042DE  1  85 75                STA     <FACt_1         ; clear temp mantissa1
0042E0  1  85 76                STA     <FACt_2         ; clear temp mantissa2
0042E2  1  85 77                STA     <FACt_3         ; clear temp mantissa3
0042E4  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
0042E6  1  20 FB 42             JSR     LAB_2622        ; go do shift/add FAC2
0042E9  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0042EB  1  20 FB 42             JSR     LAB_2622        ; go do shift/add FAC2
0042EE  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0042F0  1  20 FB 42             JSR     LAB_2622        ; go do shift/add FAC2
0042F3  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0042F5  1  20 00 43             JSR     LAB_2627        ; go do shift/add FAC2
0042F8  1  4C 59 44             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
0042FB  1               
0042FB  1               LAB_2622:
0042FB  1  D0 03                BNE     LAB_2627        ; branch if byte <> zero
0042FD  1               
0042FD  1  4C 63 42             JMP     LAB_2569        ; shift FCAtemp << A+8 times
004300  1               
004300  1               ; else do shift and add
004300  1               LAB_2627:
004300  1  4A                   LSR     A               ; shift byte
004301  1  09 80                ORA     #$80            ; set top bit (mark for 8 times)
004303  1               LAB_262A:
004303  1  A8                   TAY                     ; copy result
004304  1  90 13                BCC     LAB_2640        ; skip next if bit was zero
004306  1               
004306  1  18                   CLC                     ; clear carry for add
004307  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
004309  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
00430B  1  85 77                STA     <FACt_3         ; save temp mantissa3
00430D  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
00430F  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
004311  1  85 76                STA     <FACt_2         ; save temp mantissa2
004313  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
004315  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
004317  1  85 75                STA     <FACt_1         ; save temp mantissa1
004319  1               LAB_2640:
004319  1  66 75                ROR     <FACt_1         ; shift temp mantissa1
00431B  1  66 76                ROR     <FACt_2         ; shift temp mantissa2
00431D  1  66 77                ROR     <FACt_3         ; shift temp mantissa3
00431F  1  66 B9                ROR     <FAC1_r         ; shift temp rounding byte
004321  1  98                   TYA                     ; get byte back
004322  1  4A                   LSR     A               ; shift byte
004323  1  D0 DE                BNE     LAB_262A        ; loop if all bits not done
004325  1               
004325  1               LAB_264C:
004325  1  60                   RTS
004326  1               
004326  1               ; unpack memory (AY) into FAC2
004326  1               
004326  1               LAB_264D:
004326  1  85 71                STA     <ut1_pl         ; save pointer low byte
004328  1  84 72                STY     <ut1_ph         ; save pointer high byte
00432A  1  A0 03                LDY     #$03            ; 4 bytes to get (0-3)
00432C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa3
004330  1  B5 71 C9 00  
004334  1  D0 04 A2 00  
004342  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004344  1  88                   DEY                     ; decrement index
004345  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa2
004349  1  B5 71 C9 00  
00434D  1  D0 04 A2 00  
00435B  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
00435D  1  88                   DEY                     ; decrement index
00435E  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa1+sign
004362  1  B5 71 C9 00  
004366  1  D0 04 A2 00  
004374  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
004376  1  45 B0                EOR     <FAC1_s         ; EOR with FAC1 sign (b7)
004378  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00437A  1  A5 B7                LDA     <FAC2_s         ; recover FAC2 sign (b7)
00437C  1  09 80                ORA     #$80            ; set 1xxx xxx (set normal bit)
00437E  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004380  1  88                   DEY                     ; decrement index
004381  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get exponent byte
004385  1  B5 71 C9 00  
004389  1  D0 04 A2 00  
004397  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
004399  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00439B  1  60                   RTS
00439C  1               
00439C  1               ; test and adjust accumulators
00439C  1               
00439C  1               LAB_2673:
00439C  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
00439E  1               LAB_2675:
00439E  1  F0 1D                BEQ     LAB_2696        ; branch if FAC2 = $00 (handle underflow)
0043A0  1               
0043A0  1  18                   CLC                     ; clear carry for add
0043A1  1  65 AC                ADC     <FAC1_e         ; add FAC1 exponent
0043A3  1  90 04                BCC     LAB_2680        ; branch if sum of exponents <$0100
0043A5  1               
0043A5  1  30 31                BMI     LAB_269B        ; do overflow error
0043A7  1               
0043A7  1  18                   CLC                     ; clear carry for the add
0043A8  1  2C                   .BYTE   $2C             ; makes next line BIT $1410
0043A9  1               LAB_2680:
0043A9  1  10 12                BPL     LAB_2696        ; if +ve go handle underflow
0043AB  1               
0043AB  1  69 80                ADC     #$80            ; adjust exponent
0043AD  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0043AF  1  D0 03                BNE     LAB_268B        ; branch if not zero
0043B1  1               
0043B1  1  4C EF 41             JMP     LAB_24F5        ; save FAC1 sign and return
0043B4  1               
0043B4  1               LAB_268B:
0043B4  1  A5 B8                LDA     <FAC_sc         ; get sign compare (FAC1 EOR FAC2)
0043B6  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0043B8  1               LAB_268F:
0043B8  1  60                   RTS
0043B9  1               
0043B9  1               ; handle overflow and underflow
0043B9  1               
0043B9  1               LAB_2690:
0043B9  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0043BB  1  10 1B                BPL     LAB_269B        ; do overflow error
0043BD  1               
0043BD  1               ; handle underflow
0043BD  1               LAB_2696:
0043BD  1  68                   PLA                     ; pop return address low byte
0043BE  1  68                   PLA                     ; pop return address high byte
0043BF  1  4C EB 41             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
0043C2  1               
0043C2  1               ; multiply by 10
0043C2  1               
0043C2  1               LAB_269E:
0043C2  1  20 55 45             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0043C5  1  AA                   TAX                     ; copy exponent (set the flags)
0043C6  1  F0 F0                BEQ     LAB_268F        ; exit if zero
0043C8  1  18                   CLC                     ; clear carry for add
0043C9  1  69 02                ADC     #$02            ; add two to exponent (*4)
0043CB  1  B0 0B                BCS     LAB_269B        ; do overflow error if > $FF
0043CD  1  A2 00                LDX     #$00            ; clear byte
0043CF  1  86 B8                STX     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
0043D1  1  20 70 41             JSR     LAB_247C        ; add FAC2 to FAC1 (*5)
0043D4  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*10)
0043D6  1  D0 E0                BNE     LAB_268F        ; if non zero just do RTS
0043D8  1               
0043D8  1               LAB_269B:
0043D8  1  4C 5E 42             JMP     LAB_2564        ; do overflow error and warm start
0043DB  1               
0043DB  1               ; divide by 10
0043DB  1               
0043DB  1               LAB_26B9:
0043DB  1  20 55 45             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0043DE  1  A9 BD                LDA     #<LAB_26B5      ; set pointer to 10d low addr
0043E0  1  A0 18                LDY     #>LAB_26B5      ; set pointer to 10d high addr
0043E2  1  A2 00                LDX     #$00            ; clear sign
0043E4  1               
0043E4  1               ; divide by (AY) (X=sign)
0043E4  1               
0043E4  1               LAB_26C2:
0043E4  1  86 B8                STX     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
0043E6  1  20 68 44             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0043E9  1  4C EF 43             JMP     LAB_DIVIDE      ; do FAC2/FAC1
0043EC  1               
0043EC  1               ; Perform divide-by
0043EC  1               ; convert AY and do (AY)/FAC1
0043EC  1               
0043EC  1               LAB_26CA:
0043EC  1  20 26 43             JSR     LAB_264D        ; unpack memory (AY) into FAC2
0043EF  1               
0043EF  1               ; Perform divide-into
0043EF  1               LAB_DIVIDE:
0043EF  1  F0 63                BEQ     LAB_2737        ; if zero go do /0 error
0043F1  1               
0043F1  1  20 64 45             JSR     LAB_27BA        ; round FAC1
0043F4  1  A9 00                LDA     #$00            ; clear A
0043F6  1  38                   SEC                     ; set carry for subtract
0043F7  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent (2s complement)
0043F9  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0043FB  1  20 9C 43             JSR     LAB_2673        ; test and adjust accumulators
0043FE  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
004400  1  F0 D6                BEQ     LAB_269B        ; if zero do overflow error
004402  1               
004402  1  A2 FF                LDX     #$FF            ; set index for pre increment
004404  1  A9 01                LDA     #$01            ; set bit to flag byte save
004406  1               LAB_26E4:
004406  1  A4 B4                LDY     <FAC2_1         ; get FAC2 mantissa1
004408  1  C4 AD                CPY     <FAC1_1         ; compare FAC1 mantissa1
00440A  1  D0 0A                BNE     LAB_26F4        ; branch if <>
00440C  1               
00440C  1  A4 B5                LDY     <FAC2_2         ; get FAC2 mantissa2
00440E  1  C4 AE                CPY     <FAC1_2         ; compare FAC1 mantissa2
004410  1  D0 04                BNE     LAB_26F4        ; branch if <>
004412  1               
004412  1  A4 B6                LDY     <FAC2_3         ; get FAC2 mantissa3
004414  1  C4 AF                CPY     <FAC1_3         ; compare FAC1 mantissa3
004416  1               LAB_26F4:
004416  1  08                   PHP                     ; save FAC2-FAC1 compare status
004417  1  2A                   ROL     A               ; shift the result byte
004418  1  90 0E                BCC     LAB_2702        ; if no carry skip the byte save
00441A  1               
00441A  1  A0 01                LDY     #$01            ; set bit to flag byte save
00441C  1  E8                   INX                     ; else increment the index to FACt
00441D  1  E0 02                CPX     #$02            ; compare with the index to <FACt_3
00441F  1  30 04                BMI     LAB_2701        ; if not last byte just go save it
004421  1               
004421  1  D0 28                BNE     LAB_272B        ; if all done go save FAC1 rounding byte, normalise and
004423  1               ; return
004423  1               
004423  1  A0 40                LDY     #$40            ; set bit to flag byte save for the rounding byte
004425  1               LAB_2701:
004425  1  95 75                STA     <FACt_1,X       ; write result byte to <FACt_1 + index
004427  1  98                   TYA                     ; copy the next save byte flag
004428  1               LAB_2702:
004428  1  28                   PLP                     ; restore FAC2-FAC1 compare status
004429  1  90 14                BCC     LAB_2704        ; if FAC2 < FAC1 then skip the subtract
00442B  1               
00442B  1  A8                   TAY                     ; save FAC2-FAC1 compare status
00442C  1  A5 B6                LDA     <FAC2_3         ; get FAC2 mantissa3
00442E  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
004430  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004432  1  A5 B5                LDA     <FAC2_2         ; get FAC2 mantissa2
004434  1  E5 AE                SBC     <FAC1_2         ; subtract FAC1 mantissa2
004436  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
004438  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
00443A  1  E5 AD                SBC     <FAC1_1         ; subtract FAC1 mantissa1
00443C  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
00443E  1  98                   TYA                     ; restore FAC2-FAC1 compare status
00443F  1               
00443F  1               ; FAC2 = FAC2*2
00443F  1               LAB_2704:
00443F  1  06 B6                ASL     <FAC2_3         ; shift FAC2 mantissa3
004441  1  26 B5                ROL     <FAC2_2         ; shift FAC2 mantissa2
004443  1  26 B4                ROL     <FAC2_1         ; shift FAC2 mantissa1
004445  1  B0 CF                BCS     LAB_26F4        ; loop with no compare
004447  1               
004447  1  30 BD                BMI     LAB_26E4        ; loop with compare
004449  1               
004449  1  10 CB                BPL     LAB_26F4        ; loop always with no compare
00444B  1               
00444B  1               ; do A<<6, save as FAC1 rounding byte, normalise and return
00444B  1               
00444B  1               LAB_272B:
00444B  1  4A                   LSR     A               ; shift b1 - b0 ..
00444C  1  6A                   ROR     A               ; ..
00444D  1  6A                   ROR     A               ; .. to b7 - b6
00444E  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
004450  1  28                   PLP                     ; dump FAC2-FAC1 compare status
004451  1  4C 59 44             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
004454  1               
004454  1               ; do "Divide by zero" error
004454  1               
004454  1               LAB_2737:
004454  1  A2 14                LDX     #$14            ; error code $14 ("Divide by zero" error)
004456  1  4C D0 27             JMP     LAB_XERR        ; do error #X, then warm start
004459  1               
004459  1               ; copy temp to FAC1 and normalise
004459  1               
004459  1               LAB_273C:
004459  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
00445B  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00445D  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
00445F  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004461  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
004463  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004465  1  4C CF 41             JMP     LAB_24D5        ; normalise FAC1 and return
004468  1               
004468  1               ; unpack memory (AY) into FAC1
004468  1               
004468  1               LAB_UFAC:
004468  1  85 71                STA     <ut1_pl         ; save pointer low byte
00446A  1  84 72                STY     <ut1_ph         ; save pointer high byte
00446C  1  A0 03                LDY     #$03            ; 4 bytes to do
00446E  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last byte
004472  1  B5 71 C9 00  
004476  1  D0 04 A2 00  
004484  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004486  1  88                   DEY                     ; decrement index
004487  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last-1 byte
00448B  1  B5 71 C9 00  
00448F  1  D0 04 A2 00  
00449D  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
00449F  1  88                   DEY                     ; decrement index
0044A0  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get second byte
0044A4  1  B5 71 C9 00  
0044A8  1  D0 04 A2 00  
0044B6  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0044B8  1  09 80                ORA     #$80            ; set 1xxx xxxx (add normal bit)
0044BA  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0044BC  1  88                   DEY                     ; decrement index
0044BD  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get first byte (exponent)
0044C1  1  B5 71 C9 00  
0044C5  1  D0 04 A2 00  
0044D3  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0044D5  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
0044D7  1  60                   RTS
0044D8  1               
0044D8  1               ; pack FAC1 into <Adatal
0044D8  1               
0044D8  1               LAB_276E:
0044D8  1  A2 A4                LDX     #<Adatal        ; set pointer low byte
0044DA  1               LAB_2770:
0044DA  1  A0 00                LDY     #>Adatal        ; set pointer high byte
0044DC  1  F0 04                BEQ     LAB_2778        ; pack FAC1 into (XY) and return
0044DE  1               
0044DE  1               ; pack FAC1 into (<Lvarpl)
0044DE  1               
0044DE  1               LAB_PFAC:
0044DE  1  A6 97                LDX     <Lvarpl         ; get destination pointer low byte
0044E0  1  A4 98                LDY     <Lvarph         ; get destination pointer high byte
0044E2  1               
0044E2  1               ; pack FAC1 into (XY)
0044E2  1               
0044E2  1               LAB_2778:
0044E2  1  20 64 45             JSR     LAB_27BA        ; round FAC1
0044E5  1  86 71                STX     <ut1_pl         ; save pointer low byte
0044E7  1  84 72                STY     <ut1_ph         ; save pointer high byte
0044E9  1  A0 03                LDY     #$03            ; set index
0044EB  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0044ED  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0044F1  1  01 B5 71 C9  
0044F5  1  00 D0 04 A2  
004503  1  88                   DEY                     ; decrement index
004504  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004506  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
00450A  1  01 B5 71 C9  
00450E  1  00 D0 04 A2  
00451C  1  88                   DEY                     ; decrement index
00451D  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00451F  1  09 7F                ORA     #$7F            ; set bits x111 1111
004521  1  25 AD                AND     <FAC1_1         ; AND in FAC1 mantissa1
004523  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
004527  1  01 B5 71 C9  
00452B  1  00 D0 04 A2  
004539  1  88                   DEY                     ; decrement index
00453A  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00453C  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
004540  1  01 B5 71 C9  
004544  1  00 D0 04 A2  
004552  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004554  1  60                   RTS
004555  1               
004555  1               ; round and copy FAC1 to FAC2
004555  1               
004555  1               LAB_27AB:
004555  1  20 64 45             JSR     LAB_27BA        ; round FAC1
004558  1               
004558  1               ; copy FAC1 to FAC2
004558  1               
004558  1               LAB_27AE:
004558  1  A2 05                LDX     #$05            ; 5 bytes to copy
00455A  1               LAB_27B0:
00455A  1  B5 AB                LDA     <FAC1_e-1,X     ; get byte from FAC1,X
00455C  1  95 B2                STA     <FAC1_o,X       ; save byte at FAC2,X
00455E  1  CA                   DEX                     ; decrement count
00455F  1  D0 F9                BNE     LAB_27B0        ; loop if not all done
004561  1               
004561  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
004563  1               LAB_27B9:
004563  1  60                   RTS
004564  1               
004564  1               ; round FAC1
004564  1               
004564  1               LAB_27BA:
004564  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004566  1  F0 FB                BEQ     LAB_27B9        ; exit if zero
004568  1               
004568  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
00456A  1  90 F7                BCC     LAB_27B9        ; exit if no overflow
00456C  1               
00456C  1               ; round FAC1 (no check)
00456C  1               
00456C  1               LAB_27C2:
00456C  1  20 53 42             JSR     LAB_2559        ; increment FAC1 mantissa
00456F  1  D0 F2                BNE     LAB_27B9        ; branch if no overflow
004571  1               
004571  1  4C 24 42             JMP     LAB_252A        ; normalise FAC1 for C=1 and return
004574  1               
004574  1               ; get FAC1 sign
004574  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
004574  1               
004574  1               LAB_27CA:
004574  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004576  1  F0 09                BEQ     LAB_27D7        ; exit if zero (already correct SGN(0)=0)
004578  1               
004578  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
004578  1               ; no = 0 check
004578  1               
004578  1               LAB_27CE:
004578  1  A5 B0                LDA     <FAC1_s         ; else get FAC1 sign (b7)
00457A  1               
00457A  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
00457A  1               ; no = 0 check, sign in A
00457A  1               
00457A  1               LAB_27D0:
00457A  1  2A                   ROL     A               ; move sign bit to carry
00457B  1  A9 FF                LDA     #$FF            ; set byte for -ve result
00457D  1  B0 02                BCS     LAB_27D7        ; return if sign was set (-ve)
00457F  1               
00457F  1  A9 01                LDA     #$01            ; else set byte for +ve result
004581  1               LAB_27D7:
004581  1  60                   RTS
004582  1               
004582  1               ; perform SGN()
004582  1               
004582  1               LAB_SGN:
004582  1  20 74 45             JSR     LAB_27CA        ; get FAC1 sign
004585  1               ; return A=$FF/-ve A=$01/+ve
004585  1               ; save A as integer byte
004585  1               
004585  1               LAB_27DB:
004585  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004587  1  A9 00                LDA     #$00            ; clear A
004589  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
00458B  1  A2 88                LDX     #$88            ; set exponent
00458D  1               
00458D  1               ; set exp=X, clearFAC1 mantissa3 and normalise
00458D  1               
00458D  1               LAB_27E3:
00458D  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
00458F  1  49 FF                EOR     #$FF            ; complement it
004591  1  2A                   ROL     A               ; sign bit into carry
004592  1               
004592  1               ; set exp=X, clearFAC1 mantissa3 and normalise
004592  1               
004592  1               LAB_STFA:
004592  1  A9 00                LDA     #$00            ; clear A
004594  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004596  1  86 AC                STX     <FAC1_e         ; set FAC1 exponent
004598  1  85 B9                STA     <FAC1_r         ; clear FAC1 rounding byte
00459A  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
00459C  1  4C CA 41             JMP     LAB_24D0        ; do ABS and normalise FAC1
00459F  1               
00459F  1               ; perform ABS()
00459F  1               
00459F  1               LAB_ABS:
00459F  1  46 B0                LSR     <FAC1_s         ; clear FAC1 sign (put zero in b7)
0045A1  1  60                   RTS
0045A2  1               
0045A2  1               ; compare FAC1 with (AY)
0045A2  1               ; returns A=$00 if FAC1 = (AY)
0045A2  1               ; returns A=$01 if FAC1 > (AY)
0045A2  1               ; returns A=$FF if FAC1 < (AY)
0045A2  1               
0045A2  1               LAB_27F8:
0045A2  1  85 73                STA     <ut2_pl         ; save pointer low byte
0045A4  1               LAB_27FA:
0045A4  1  84 74                STY     <ut2_ph         ; save pointer high byte
0045A6  1  A0 00                LDY     #$00            ; clear index
0045A8  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get exponent
0045AC  1  B5 73 C9 00  
0045B0  1  D0 04 A2 00  
0045BE  1  C8                   INY                     ; increment index
0045BF  1  AA                   TAX                     ; copy (AY) exponent to X
0045C0  1  F0 B2                BEQ     LAB_27CA        ; branch if (AY) exponent=0 and get FAC1 sign
0045C2  1               ; A=FF,C=1/-ve A=01,C=0/+ve
0045C2  1               
0045C2  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
0045C6  1  B5 73 C9 00  
0045CA  1  D0 04 A2 00  
0045D8  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
0045DA  1  30 9C                BMI     LAB_27CE        ; if signs <> do return A=FF,C=1/-ve
0045DC  1               ; A=01,C=0/+ve and return
0045DC  1               
0045DC  1  E4 AC                CPX     <FAC1_e         ; compare (AY) exponent with FAC1 exponent
0045DE  1  D0 56                BNE     LAB_2828        ; branch if different
0045E0  1               
0045E0  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
0045E4  1  B5 73 C9 00  
0045E8  1  D0 04 A2 00  
0045F6  1  09 80                ORA     #$80            ; normalise top bit
0045F8  1  C5 AD                CMP     <FAC1_1         ; compare with FAC1 mantissa1
0045FA  1  D0 3A                BNE     LAB_2828        ; branch if different
0045FC  1               
0045FC  1  C8                   INY                     ; increment index
0045FD  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa2
004601  1  B5 73 C9 00  
004605  1  D0 04 A2 00  
004613  1  C5 AE                CMP     <FAC1_2         ; compare with FAC1 mantissa2
004615  1  D0 1F                BNE     LAB_2828        ; branch if different
004617  1               
004617  1  C8                   INY                     ; increment index
004618  1  A9 7F                LDA     #$7F            ; set for 1/2 value rounding byte
00461A  1  C5 B9                CMP     <FAC1_r         ; compare with FAC1 rounding byte (set carry)
00461C  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa3
004620  1  B5 73 C9 00  
004624  1  D0 04 A2 00  
004632  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
004634  1  F0 28                BEQ     LAB_2850        ; exit if mantissa3 equal
004636  1               
004636  1               ; gets here if number <> FAC1
004636  1               
004636  1               LAB_2828:
004636  1               
004636  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004638  1  90 02                BCC     LAB_282E        ; branch if FAC1 > (AY)
00463A  1               
00463A  1  49 FF                EOR     #$FF            ; else toggle FAC1 sign
00463C  1               LAB_282E:
00463C  1  4C 7A 45             JMP     LAB_27D0        ; return A=FF,C=1/-ve A=01,C=0/+ve
00463F  1               
00463F  1               ; convert FAC1 floating-to-fixed
00463F  1               
00463F  1               LAB_2831:
00463F  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004641  1  F0 4A                BEQ     LAB_287F        ; if zero go clear FAC1 and return
004643  1               
004643  1  38                   SEC                     ; set carry for subtract
004644  1  E9 98                SBC     #$98            ; subtract maximum integer range exponent
004646  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
004648  1  10 09                BPL     LAB_2845        ; branch if FAC1 +ve
00464A  1               
00464A  1               ; FAC1 was -ve
00464A  1  AA                   TAX                     ; copy subtracted exponent
00464B  1  A9 FF                LDA     #$FF            ; overflow for -ve number
00464D  1  85 B2                STA     <FAC1_o         ; set FAC1 overflow byte
00464F  1  20 37 42             JSR     LAB_253D        ; twos complement FAC1 mantissa
004652  1  8A                   TXA                     ; restore subtracted exponent
004653  1               LAB_2845:
004653  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1
004655  1  C9 F9                CMP     #$F9            ; compare exponent result
004657  1  10 06                BPL     LAB_2851        ; if < 8 shifts shift FAC1 A times right and return
004659  1               
004659  1  20 75 42             JSR     LAB_257B        ; shift FAC1 A times right (> 8 shifts)
00465C  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
00465E  1               LAB_2850:
00465E  1  60                   RTS
00465F  1               
00465F  1               ; shift FAC1 A times right
00465F  1               
00465F  1               LAB_2851:
00465F  1  A8                   TAY                     ; copy shift count
004660  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004662  1  29 80                AND     #$80            ; mask sign bit only (x000 0000)
004664  1  46 AD                LSR     <FAC1_1         ; shift FAC1 mantissa1
004666  1  05 AD                ORA     <FAC1_1         ; OR sign in b7 FAC1 mantissa1
004668  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00466A  1  20 8C 42             JSR     LAB_2592        ; shift FAC1 Y times right
00466D  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
00466F  1  60                   RTS
004670  1               
004670  1               ; perform INT()
004670  1               
004670  1               LAB_INT:
004670  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004672  1  C9 98                CMP     #$98            ; compare with max int
004674  1  B0 1E                BCS     LAB_2886        ; exit if >= (already int, too big for fractional part!)
004676  1               
004676  1  20 3F 46             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
004679  1  84 B9                STY     <FAC1_r         ; save FAC1 rounding byte
00467B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00467D  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
00467F  1  49 80                EOR     #$80            ; toggle FAC1 sign
004681  1  2A                   ROL     A               ; shift into carry
004682  1  A9 98                LDA     #$98            ; set new exponent
004684  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004686  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004688  1  85 5B                STA     <Temp3          ; save for EXP() function
00468A  1  4C CA 41             JMP     LAB_24D0        ; do ABS and normalise FAC1
00468D  1               
00468D  1               ; clear FAC1 and return
00468D  1               
00468D  1               LAB_287F:
00468D  1  85 AD                STA     <FAC1_1         ; clear FAC1 mantissa1
00468F  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
004691  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004693  1  A8                   TAY                     ; clear Y
004694  1               LAB_2886:
004694  1  60                   RTS
004695  1               
004695  1               ; get FAC1 from string
004695  1               ; this routine now handles hex and binary values from strings
004695  1               ; starting with "$" and "%" respectively
004695  1               
004695  1               LAB_2887:
004695  1  A0 00                LDY     #$00            ; clear Y
004697  1  84 5F                STY     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
004699  1  A2 09                LDX     #$09            ; set index
00469B  1               LAB_288B:
00469B  1  94 A8                STY     <numexp,x       ; clear byte
00469D  1  CA                   DEX                     ; decrement index
00469E  1  10 FB                BPL     LAB_288B        ; loop until <numexp to <negnum (and FAC1) = $00
0046A0  1               
0046A0  1  B0 03                BCS     LAB_s28FE       ; branch if 1st NOT character numeric
0046A2  1  4C 28 47             JMP     LAB_28FE        ; branch if 1st character numeric
0046A5  1               LAB_s28FE:
0046A5  1               
0046A5  1               ; get FAC1 from string .. first character wasn't numeric
0046A5  1               
0046A5  1  C9 2D                CMP     #'-'            ; else compare with "-"
0046A7  1  D0 04                BNE     LAB_289A        ; branch if not "-"
0046A9  1               
0046A9  1  86 B1                STX     <negnum         ; set flag for -ve number (X = $FF)
0046AB  1  F0 04                BEQ     LAB_289C        ; branch always (go scan and check for hex/bin)
0046AD  1               
0046AD  1               ; get FAC1 from string .. first character wasn't numeric or -
0046AD  1               
0046AD  1               LAB_289A:
0046AD  1  C9 2B                CMP     #'+'            ; else compare with "+"
0046AF  1  D0 06                BNE     LAB_289D        ; branch if not "+" (go check for hex/bin)
0046B1  1               
0046B1  1               ; was "+" or "-" to start, so get next character
0046B1  1               
0046B1  1               LAB_289C:
0046B1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0046B5  1  90 71                BCC     LAB_28FE        ; branch if numeric character
0046B7  1               
0046B7  1               ; code here for hex and binary numbers
0046B7  1               
0046B7  1               LAB_289D:
0046B7  1  C9 24                CMP     #'$'            ; else compare with "$"
0046B9  1  D0 03                BNE     LAB_NHEX        ; branch if not "$"
0046BB  1               
0046BB  1  4C E6 4B             JMP     LAB_CHEX        ; branch if "$"
0046BE  1               
0046BE  1               LAB_NHEX:
0046BE  1  C9 25                CMP     #'%'            ; else compare with "%"
0046C0  1  D0 09                BNE     LAB_28A3        ; branch if not "%" (continue original code)
0046C2  1               
0046C2  1  4C 15 4C             JMP     LAB_CBIN        ; branch if "%"
0046C5  1               
0046C5  1               LAB_289E:
0046C5  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (ignore + or get next number)
0046C9  1               LAB_28A1:
0046C9  1  90 5D                BCC     LAB_28FE        ; branch if numeric character
0046CB  1               
0046CB  1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
0046CB  1               
0046CB  1               LAB_28A3:
0046CB  1  C9 2E                CMP     #'.'            ; else compare with "."
0046CD  1  F0 30                BEQ     LAB_28D5        ; branch if "."
0046CF  1               
0046CF  1               ; get FAC1 from string .. character wasn't numeric, -, + or .
0046CF  1               
0046CF  1  C9 45                CMP     #'E'            ; else compare with "E"
0046D1  1  D0 32                BNE     LAB_28DB        ; branch if not "E"
0046D3  1               
0046D3  1               ; was "E" so evaluate exponential part
0046D3  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0046D7  1  90 18                BCC     LAB_28C7        ; branch if numeric character
0046D9  1               
0046D9  1  C9 C8                CMP     #TK_MINUS       ; else compare with token for -
0046DB  1  F0 0E                BEQ     LAB_28C2        ; branch if token for -
0046DD  1               
0046DD  1  C9 2D                CMP     #'-'            ; else compare with "-"
0046DF  1  F0 0A                BEQ     LAB_28C2        ; branch if "-"
0046E1  1               
0046E1  1  C9 C7                CMP     #TK_PLUS        ; else compare with token for +
0046E3  1  F0 08                BEQ     LAB_28C4        ; branch if token for +
0046E5  1               
0046E5  1  C9 2B                CMP     #'+'            ; else compare with "+"
0046E7  1  F0 04                BEQ     LAB_28C4        ; branch if "+"
0046E9  1               
0046E9  1  D0 08                BNE     LAB_28C9        ; branch always
0046EB  1               
0046EB  1               LAB_28C2:
0046EB  1  66 AB                ROR     <expneg         ; set exponent -ve flag (C, which=1, into b7)
0046ED  1               LAB_28C4:
0046ED  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0046F1  1               LAB_28C7:
0046F1  1  90 5B                BCC     LAB_2925        ; branch if numeric character
0046F3  1               
0046F3  1               LAB_28C9:
0046F3  1  24 AB                BIT     <expneg         ; test exponent -ve flag
0046F5  1  10 0E                BPL     LAB_28DB        ; if +ve go evaluate exponent
0046F7  1               
0046F7  1               ; else do exponent = -exponent
0046F7  1  A9 00                LDA     #$00            ; clear result
0046F9  1  38                   SEC                     ; set carry for subtract
0046FA  1  E5 A9                SBC     <expcnt         ; subtract exponent byte
0046FC  1  4C 07 47             JMP     LAB_28DD        ; go evaluate exponent
0046FF  1               
0046FF  1               LAB_28D5:
0046FF  1  66 AA                ROR     <numdpf         ; set decimal point flag
004701  1  24 AA                BIT     <numdpf         ; test decimal point flag
004703  1  50 C0                BVC     LAB_289E        ; branch if only one decimal point so far
004705  1               
004705  1               ; evaluate exponent
004705  1               LAB_28DB:
004705  1  A5 A9                LDA     <expcnt         ; get exponent count byte
004707  1               LAB_28DD:
004707  1  38                   SEC                     ; set carry for subtract
004708  1  E5 A8                SBC     <numexp         ; subtract numerator exponent
00470A  1  85 A9                STA     <expcnt         ; save exponent count byte
00470C  1  F0 12                BEQ     LAB_28F6        ; branch if no adjustment
00470E  1               
00470E  1  10 09                BPL     LAB_28EF        ; else if +ve go do FAC1*10^<expcnt
004710  1               
004710  1               ; else go do FAC1/10^(0-<expcnt)
004710  1               LAB_28E6:
004710  1  20 DB 43             JSR     LAB_26B9        ; divide by 10
004713  1  E6 A9                INC     <expcnt         ; increment exponent count byte
004715  1  D0 F9                BNE     LAB_28E6        ; loop until all done
004717  1               
004717  1  F0 07                BEQ     LAB_28F6        ; branch always
004719  1               
004719  1               LAB_28EF:
004719  1  20 C2 43             JSR     LAB_269E        ; multiply by 10
00471C  1  C6 A9                DEC     <expcnt         ; decrement exponent count byte
00471E  1  D0 F9                BNE     LAB_28EF        ; loop until all done
004720  1               
004720  1               LAB_28F6:
004720  1  A5 B1                LDA     <negnum         ; get -ve flag
004722  1  30 01                BMI     LAB_28FB        ; if -ve do - FAC1 and return
004724  1               
004724  1  60                   RTS
004725  1               
004725  1               ; do - FAC1 and return
004725  1               
004725  1               LAB_28FB:
004725  1  4C 18 49             JMP     LAB_GTHAN       ; do - FAC1 and return
004728  1               
004728  1               ; do unsigned FAC1*10+number
004728  1               
004728  1               LAB_28FE:
004728  1  48                   PHA                     ; save character
004729  1  24 AA                BIT     <numdpf         ; test decimal point flag
00472B  1  10 02                BPL     LAB_2905        ; skip exponent increment if not set
00472D  1               
00472D  1  E6 A8                INC     <numexp         ; else increment number exponent
00472F  1               LAB_2905:
00472F  1  20 C2 43             JSR     LAB_269E        ; multiply FAC1 by 10
004732  1  68                   PLA                     ; restore character
004733  1  29 0F                AND     #$0F            ; convert to binary
004735  1  20 3B 47             JSR     LAB_2912        ; evaluate new ASCII digit
004738  1  4C C5 46             JMP     LAB_289E        ; go do next character
00473B  1               
00473B  1               ; evaluate new ASCII digit
00473B  1               
00473B  1               LAB_2912:
00473B  1  48                   PHA                     ; save digit
00473C  1  20 55 45             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00473F  1  68                   PLA                     ; restore digit
004740  1  20 85 45             JSR     LAB_27DB        ; save A as integer byte
004743  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
004745  1  45 B0                EOR     <FAC1_s         ; toggle with FAC1 sign (b7)
004747  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004749  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
00474B  1  4C 56 41             JMP     LAB_ADD         ; add FAC2 to FAC1 and return
00474E  1               
00474E  1               ; evaluate next character of exponential part of number
00474E  1               
00474E  1               LAB_2925:
00474E  1  A5 A9                LDA     <expcnt         ; get exponent count byte
004750  1  C9 0A                CMP     #$0A            ; compare with 10 decimal
004752  1  90 09                BCC     LAB_2934        ; branch if less
004754  1               
004754  1  A9 64                LDA     #$64            ; make all -ve exponents = -100 decimal (causes underflow)
004756  1  24 AB                BIT     <expneg         ; test exponent -ve flag
004758  1  30 25                BMI     LAB_2942        ; branch if -ve
00475A  1               
00475A  1  4C 5E 42             JMP     LAB_2564        ; else do overflow error
00475D  1               
00475D  1               LAB_2934:
00475D  1  0A                   ASL     A               ; * 2
00475E  1  0A                   ASL     A               ; * 4
00475F  1  65 A9                ADC     <expcnt         ; * 5
004761  1  0A                   ASL     A               ; * 10
004762  1  A0 00                LDY     #$00            ; set index
004764  1  8B 48 DA A2          ADCINDIRECTY Bpntrl     ; add character (will be $30 too much!)
004768  1  01 B5 C3 C9  
00476C  1  00 D0 04 A2  
00477D  1  E9 2F                SBC     #'0'-1          ; convert character to binary
00477F  1               LAB_2942:
00477F  1  85 A9                STA     <expcnt         ; save exponent count byte
004781  1  4C ED 46             JMP     LAB_28C4        ; go get next character
004784  1               
004784  1               ; print " in line [LINE #]"
004784  1               
004784  1               LAB_2953:
004784  1  A9 E3                LDA     #<LAB_LMSG      ; point to " in line " message low byte
004786  1  A0 17                LDY     #>LAB_LMSG      ; point to " in line " message high byte
004788  1  20 71 30             JSR     LAB_18C3        ; print null terminated string from memory
00478B  1               
00478B  1               ; print Basic line #
00478B  1  A5 88                LDA     <Clineh         ; get current line high byte
00478D  1  A6 87                LDX     <Clinel         ; get current line low byte
00478F  1               
00478F  1               ; print XA as unsigned integer
00478F  1               
00478F  1               LAB_295E:
00478F  1  85 AD                STA     <FAC1_1         ; save low byte as FAC1 mantissa1
004791  1  86 AE                STX     <FAC1_2         ; save high byte as FAC1 mantissa2
004793  1  A2 90                LDX     #$90            ; set exponent to 16d bits
004795  1  38                   SEC                     ; set integer is +ve flag
004796  1  20 92 45             JSR     LAB_STFA        ; set exp=X, clearFAC1 mantissa3 and normalise
004799  1  A0 00                LDY     #$00            ; clear index
00479B  1  98                   TYA                     ; clear A
00479C  1  20 B1 47             JSR     LAB_297B        ; convert FAC1 to string, skip sign character save
00479F  1  4C 71 30             JMP     LAB_18C3        ; print null terminated string from memory and return
0047A2  1               
0047A2  1               ; convert FAC1 to ASCII string result in (AY)
0047A2  1               ; not any more, moved scratchpad to page 0
0047A2  1               
0047A2  1               LAB_296E:
0047A2  1  A0 01                LDY     #$01            ; set index = 1
0047A4  1  A9 20                LDA     #$20            ; character = " " (assume +ve)
0047A6  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
0047A8  1  10 02                BPL     LAB_2978        ; branch if +ve
0047AA  1               
0047AA  1  A9 2D                LDA     #$2D            ; else character = "-"
0047AC  1               LAB_2978:
0047AC  1  DA                   PHX
0047AD  1  BB                   TYX
0047AE  1  95 EF                STA     <Decss,X        ; save leading character (" " or "-")
0047B0  1  FA                   PLX
0047B1  1               LAB_297B:
0047B1  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
0047B3  1  84 BA                STY     <Sendl          ; save index
0047B5  1  C8                   INY                     ; increment index
0047B6  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
0047B8  1  D0 05                BNE     LAB_2989        ; branch if FAC1<>0
0047BA  1               
0047BA  1               ; exponent was $00 so FAC1 is 0
0047BA  1  A9 30                LDA     #'0'            ; set character = "0"
0047BC  1  4C CE 48             JMP     LAB_2A89        ; save last character, [EOT] and exit
0047BF  1               
0047BF  1               ; FAC1 is some non zero value
0047BF  1               LAB_2989:
0047BF  1  A9 00                LDA     #$00            ; clear (number exponent count)
0047C1  1  E0 81                CPX     #$81            ; compare FAC1 exponent with $81 (>1.00000)
0047C3  1               
0047C3  1  B0 09                BCS     LAB_299A        ; branch if FAC1=>1
0047C5  1               
0047C5  1               ; FAC1<1
0047C5  1  A9 4D                LDA     #<LAB_294F      ; set pointer low byte to 1,000,000
0047C7  1  A0 18                LDY     #>LAB_294F      ; set pointer high byte to 1,000,000
0047C9  1  20 D4 42             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0047CC  1  A9 FA                LDA     #$FA            ; set number exponent count (-6)
0047CE  1               LAB_299A:
0047CE  1  85 A8                STA     <numexp         ; save number exponent count
0047D0  1               LAB_299C:
0047D0  1  A9 49                LDA     #<LAB_294B      ; set pointer low byte to 999999.4375 (max before sci note)
0047D2  1  A0 18                LDY     #>LAB_294B      ; set pointer high byte to 999999.4375
0047D4  1  20 A2 45             JSR     LAB_27F8        ; compare FAC1 with (AY)
0047D7  1  F0 1E                BEQ     LAB_29C3        ; exit if FAC1 = (AY)
0047D9  1  10 12                BPL     LAB_29B9        ; go do /10 if FAC1 > (AY)
0047DB  1               ; FAC1 < (AY)
0047DB  1               LAB_29A7:
0047DB  1  A9 45                LDA     #<LAB_2947      ; set pointer low byte to 99999.9375
0047DD  1  A0 18                LDY     #>LAB_2947      ; set pointer high byte to 99999.9375
0047DF  1  20 A2 45             JSR     LAB_27F8        ; compare FAC1 with (AY)
0047E2  1  F0 02                BEQ     LAB_29B2        ; branch if FAC1 = (AY) (allow decimal places)
0047E4  1  10 0E                BPL     LAB_29C0        ; branch if FAC1 > (AY) (no decimal places)
0047E6  1               ; FAC1 <= (AY)
0047E6  1               LAB_29B2:
0047E6  1  20 C2 43             JSR     LAB_269E        ; multiply by 10
0047E9  1  C6 A8                DEC     <numexp         ; decrement number exponent count
0047EB  1  D0 EE                BNE     LAB_29A7        ; go test again (branch always)
0047ED  1               
0047ED  1               LAB_29B9:
0047ED  1  20 DB 43             JSR     LAB_26B9        ; divide by 10
0047F0  1  E6 A8                INC     <numexp         ; increment number exponent count
0047F2  1  D0 DC                BNE     LAB_299C        ; go test again (branch always)
0047F4  1               
0047F4  1               ; now we have just the digits to do
0047F4  1               
0047F4  1               LAB_29C0:
0047F4  1  20 4F 41             JSR     LAB_244E        ; add 0.5 to FAC1 (round FAC1)
0047F7  1               LAB_29C3:
0047F7  1  20 3F 46             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0047FA  1  A2 01                LDX     #$01            ; set default digits before dp = 1
0047FC  1  A5 A8                LDA     <numexp         ; get number exponent count
0047FE  1  18                   CLC                     ; clear carry for add
0047FF  1  69 07                ADC     #$07            ; up to 6 digits before point
004801  1  30 09                BMI     LAB_29D8        ; if -ve then 1 digit before dp
004803  1               
004803  1  C9 08                CMP     #$08            ; A>=8 if n>=1E6
004805  1  B0 06                BCS     LAB_29D9        ; branch if >= $08
004807  1               
004807  1               ; carry is clear
004807  1  69 FF                ADC     #$FF            ; take 1 from digit count
004809  1  AA                   TAX                     ; copy to A
00480A  1  A9 02                LDA     #$02            ;.set exponent adjust
00480C  1               LAB_29D8:
00480C  1  38                   SEC                     ; set carry for subtract
00480D  1               LAB_29D9:
00480D  1  E9 02                SBC     #$02            ; -2
00480F  1  85 A9                STA     <expcnt         ;.save exponent adjust
004811  1  86 A8                STX     <numexp         ; save digits before dp count
004813  1  8A                   TXA                     ; copy to A
004814  1  F0 02                BEQ     LAB_29E4        ; branch if no digits before dp
004816  1               
004816  1  10 17                BPL     LAB_29F7        ; branch if digits before dp
004818  1               
004818  1               LAB_29E4:
004818  1  A4 BA                LDY     <Sendl          ; get output string index
00481A  1  A9 2E                LDA     #$2E            ; character "."
00481C  1  C8                   INY                     ; increment index
00481D  1  DA                   PHX
00481E  1  BB                   TYX
00481F  1  95 EF                STA     <Decss,X        ; save to output string
004821  1  FA                   PLX
004822  1  8A                   TXA                     ;.
004823  1  F0 08                BEQ     LAB_29F5        ;.
004825  1               
004825  1  A9 30                LDA     #'0'            ; character "0"
004827  1  C8                   INY                     ; increment index
004828  1  DA                   PHX
004829  1  BB                   TYX
00482A  1  95 EF                STA     <Decss,X        ; save to output string
00482C  1  FA                   PLX
00482D  1               LAB_29F5:
00482D  1  84 BA                STY     <Sendl          ; save output string index
00482F  1               LAB_29F7:
00482F  1  A0 00                LDY     #$00            ; clear index (point to 100,000)
004831  1  A2 80                LDX     #$80            ;
004833  1               LAB_29FB:
004833  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004835  1  18                   CLC                     ; clear carry for add
004836  1  79 C3 18             ADC     LAB_2A9C,Y      ; add -ve LSB
004839  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
00483B  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00483D  1  79 C2 18             ADC     LAB_2A9B,Y      ; add -ve NMSB
004840  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004842  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004844  1  79 C1 18             ADC     LAB_2A9A,Y      ; add -ve MSB
004847  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004849  1  E8                   INX                     ;
00484A  1  B0 04                BCS     LAB_2A18        ;
00484C  1               
00484C  1  10 E5                BPL     LAB_29FB        ; not -ve so try again
00484E  1               
00484E  1  30 02                BMI     LAB_2A1A        ;
004850  1               
004850  1               LAB_2A18:
004850  1  30 E1                BMI     LAB_29FB        ;
004852  1               
004852  1               LAB_2A1A:
004852  1  8A                   TXA                     ;
004853  1  90 04                BCC     LAB_2A21        ;
004855  1               
004855  1  49 FF                EOR     #$FF            ;
004857  1  69 0A                ADC     #$0A            ;
004859  1               LAB_2A21:
004859  1  69 2F                ADC     #'0'-1          ; add "0"-1 to result
00485B  1  C8                   INY                     ; increment index ..
00485C  1  C8                   INY                     ; .. to next less ..
00485D  1  C8                   INY                     ; .. power of ten
00485E  1  84 95                STY     <Cvaral         ; save as current var address low byte
004860  1  A4 BA                LDY     <Sendl          ; get output string index
004862  1  C8                   INY                     ; increment output string index
004863  1  AA                   TAX                     ; copy character to X
004864  1  29 7F                AND     #$7F            ; mask out top bit
004866  1  DA                   PHX
004867  1  BB                   TYX
004868  1  95 EF                STA     <Decss,X        ; save to output string
00486A  1  FA                   PLX
00486B  1  C6 A8                DEC     <numexp         ; decrement # of characters before the dp
00486D  1  D0 08                BNE     LAB_2A3B        ; branch if still characters to do
00486F  1               
00486F  1               ; else output the point
00486F  1  A9 2E                LDA     #$2E            ; character "."
004871  1  C8                   INY                     ; increment output string index
004872  1  DA                   PHX
004873  1  BB                   TYX
004874  1  95 EF                STA     <Decss,X        ; save to output string
004876  1  FA                   PLX
004877  1               LAB_2A3B:
004877  1  84 BA                STY     <Sendl          ; save output string index
004879  1  A4 95                LDY     <Cvaral         ; get current var address low byte
00487B  1  8A                   TXA                     ; get character back
00487C  1  49 FF                EOR     #$FF            ;
00487E  1  29 80                AND     #$80            ;
004880  1  AA                   TAX                     ;
004881  1  C0 12                CPY     #$12            ; compare index with max
004883  1  D0 AE                BNE     LAB_29FB        ; loop if not max
004885  1               
004885  1               ; now remove trailing zeroes
004885  1  A4 BA                LDY     <Sendl          ; get output string index
004887  1               LAB_2A4B:
004887  1  DA                   PHX
004888  1  BB                   TYX
004889  1  B5 EF                LDA     <Decss,X        ; get character from output string
00488B  1  FA                   PLX
00488C  1  88                   DEY                     ; decrement output string index
00488D  1  C9 30                CMP     #'0'            ; compare with "0"
00488F  1  F0 F6                BEQ     LAB_2A4B        ; loop until non "0" character found
004891  1               
004891  1  C9 2E                CMP     #'.'            ; compare with "."
004893  1  F0 01                BEQ     LAB_2A58        ; branch if was dp
004895  1               
004895  1               ; restore last character
004895  1  C8                   INY                     ; increment output string index
004896  1               LAB_2A58:
004896  1  A9 2B                LDA     #$2B            ; character "+"
004898  1  A6 A9                LDX     <expcnt         ; get exponent count
00489A  1  F0 37                BEQ     LAB_2A8C        ; if zero go set null terminator and exit
00489C  1               
00489C  1               ; exponent isn't zero so write exponent
00489C  1  10 08                BPL     LAB_2A68        ; branch if exponent count +ve
00489E  1               
00489E  1  A9 00                LDA     #$00            ; clear A
0048A0  1  38                   SEC                     ; set carry for subtract
0048A1  1  E5 A9                SBC     <expcnt         ; subtract exponent count adjust (convert -ve to +ve)
0048A3  1  AA                   TAX                     ; copy exponent count to X
0048A4  1  A9 2D                LDA     #'-'            ; character "-"
0048A6  1               LAB_2A68:
0048A6  1  DA                   PHX
0048A7  1  BB                   TYX
0048A8  1  95 F1                STA     <Decss+2,X      ; save to output string
0048AA  1  A9 45                LDA     #$45            ; character "E"
0048AC  1  95 F0                STA     <Decss+1,X      ; save exponent sign to output string
0048AE  1  FA                   PLX
0048AF  1  8A                   TXA                     ; get exponent count back
0048B0  1  A2 2F                LDX     #'0'-1          ; one less than "0" character
0048B2  1  38                   SEC                     ; set carry for subtract
0048B3  1               LAB_2A74:
0048B3  1  E8                   INX                     ; increment 10's character
0048B4  1  E9 0A                SBC     #$0A            ;.subtract 10 from exponent count
0048B6  1  B0 FB                BCS     LAB_2A74        ; loop while still >= 0
0048B8  1               
0048B8  1  69 3A                ADC     #':'            ; add character ":" ($30+$0A, result is 10 less that value)
0048BA  1  DA                   PHX
0048BB  1  BB                   TYX
0048BC  1  95 F3                STA     <Decss+4,X      ; save to output string
0048BE  1  FA                   PLX
0048BF  1  8A                   TXA                     ; copy 10's character
0048C0  1  DA                   PHX
0048C1  1  BB                   TYX
0048C2  1  95 F2                STA     <Decss+3,X      ; save to output string
0048C4  1  FA                   PLX
0048C5  1  A9 00                LDA     #$00            ; set null terminator
0048C7  1  DA                   PHX
0048C8  1  BB                   TYX
0048C9  1  95 F4                STA     <Decss+5,X      ; save to output string
0048CB  1  FA                   PLX
0048CC  1  F0 0C                BEQ     LAB_2A91        ; go set string pointer (AY) and exit (branch always)
0048CE  1               
0048CE  1               ; save last character, [EOT] and exit
0048CE  1               LAB_2A89:
0048CE  1  DA                   PHX
0048CF  1  BB                   TYX
0048D0  1  95 EF                STA     <Decss,X        ; save last character to output string
0048D2  1  FA                   PLX
0048D3  1               ; set null terminator and exit
0048D3  1               LAB_2A8C:
0048D3  1  A9 00                LDA     #$00            ; set null terminator
0048D5  1  DA                   PHX
0048D6  1  BB                   TYX
0048D7  1  95 F0                STA     <Decss+1,X      ; save after last character
0048D9  1  FA                   PLX
0048DA  1               ; set string pointer (AY) and exit
0048DA  1               LAB_2A91:
0048DA  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
0048DC  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
0048DE  1  60                   RTS
0048DF  1               
0048DF  1               ; perform power function
0048DF  1               
0048DF  1               LAB_POWER:
0048DF  1  F0 42                BEQ     LAB_EXP         ; go do  EXP()
0048E1  1               
0048E1  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
0048E3  1  D0 03                BNE     LAB_2ABF        ; branch if FAC2<>0
0048E5  1               
0048E5  1  4C ED 41             JMP     LAB_24F3        ; clear FAC1 exponent and sign and return
0048E8  1               
0048E8  1               LAB_2ABF:
0048E8  1  A2 9C                LDX     #<func_l        ; set destination pointer low byte
0048EA  1  A0 00                LDY     #>func_l        ; set destination pointer high byte
0048EC  1  20 E2 44             JSR     LAB_2778        ; pack FAC1 into (XY)
0048EF  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0048F1  1  10 0F                BPL     LAB_2AD9        ; branch if FAC2>0
0048F3  1               
0048F3  1               ; else FAC2 is -ve and can only be raised to an
0048F3  1               ; integer power which gives an x +j0 result
0048F3  1  20 70 46             JSR     LAB_INT         ; perform INT
0048F6  1  A9 9C                LDA     #<func_l        ; set source pointer low byte
0048F8  1  A0 00                LDY     #>func_l        ; set source pointer high byte
0048FA  1  20 A2 45             JSR     LAB_27F8        ; compare FAC1 with (AY)
0048FD  1  D0 03                BNE     LAB_2AD9        ; branch if FAC1 <> (AY) to allow Function Call error
0048FF  1               ; this will leave FAC1 -ve and cause a Function Call
0048FF  1               ; error when LOG() is called
0048FF  1               
0048FF  1  98                   TYA                     ; clear sign b7
004900  1  A4 5B                LDY     <Temp3          ; save mantissa 3 from INT() function as sign in Y
004902  1               ; for possible later negation, b0
004902  1               LAB_2AD9:
004902  1  20 5A 41             JSR     LAB_279D        ; save FAC1 sign and copy ABS(FAC2) to FAC1
004905  1  98                   TYA                     ; copy sign back ..
004906  1  48                   PHA                     ; .. and save it
004907  1  20 96 42             JSR     LAB_LOG         ; do LOG(n)
00490A  1  A9 9C                LDA     #<garb_l        ; set pointer low byte
00490C  1  A0 00                LDY     #>garb_l        ; set pointer high byte
00490E  1  20 D4 42             JSR     LAB_25FB        ; do convert AY, FCA1*(AY) (square the value)
004911  1  20 23 49             JSR     LAB_EXP         ; go do EXP(n)
004914  1  68                   PLA                     ; pull sign from stack
004915  1  4A                   LSR     A               ; b0 is to be tested, shift to Cb
004916  1  90 0A                BCC     LAB_2AF9        ; if no bit then exit
004918  1               
004918  1               ; Perform negation
004918  1               ; do - FAC1
004918  1               
004918  1               LAB_GTHAN:
004918  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00491A  1  F0 06                BEQ     LAB_2AF9        ; exit if <FAC1_e = $00
00491C  1               
00491C  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00491E  1  49 FF                EOR     #$FF            ; complement it
004920  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004922  1               LAB_2AF9:
004922  1  60                   RTS
004923  1               
004923  1               ; perform EXP()	(x^e)
004923  1               
004923  1               LAB_EXP:
004923  1  A9 51                LDA     #<LAB_2AFA      ; set 1.443 pointer low byte
004925  1  A0 18                LDY     #>LAB_2AFA      ; set 1.443 pointer high byte
004927  1  20 D4 42             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
00492A  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
00492C  1  69 50                ADC     #$50            ; +$50/$100
00492E  1  90 03                BCC     LAB_2B2B        ; skip rounding if no carry
004930  1               
004930  1  20 6C 45             JSR     LAB_27C2        ; round FAC1 (no check)
004933  1               LAB_2B2B:
004933  1  85 A3                STA     <FAC2_r         ; save FAC2 rounding byte
004935  1  20 58 45             JSR     LAB_27AE        ; copy FAC1 to FAC2
004938  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00493A  1  C9 88                CMP     #$88            ; compare with EXP limit (256d)
00493C  1  90 03                BCC     LAB_2B39        ; branch if less
00493E  1               
00493E  1               LAB_2B36:
00493E  1  20 B9 43             JSR     LAB_2690        ; handle overflow and underflow
004941  1               LAB_2B39:
004941  1  20 70 46             JSR     LAB_INT         ; perform INT
004944  1  A5 5B                LDA     <Temp3          ; get mantissa 3 from INT() function
004946  1  18                   CLC                     ; clear carry for add
004947  1  69 81                ADC     #$81            ; normalise +1
004949  1  F0 F3                BEQ     LAB_2B36        ; if $00 go handle overflow
00494B  1               
00494B  1  38                   SEC                     ; set carry for subtract
00494C  1  E9 01                SBC     #$01            ; now correct for exponent
00494E  1  48                   PHA                     ; save FAC2 exponent
00494F  1               
00494F  1               ; swap FAC1 and FAC2
00494F  1  A2 04                LDX     #$04            ; 4 bytes to do
004951  1               LAB_2B49:
004951  1  B5 B3                LDA     <FAC2_e,X       ; get FAC2,X
004953  1  B4 AC                LDY     <FAC1_e,X       ; get FAC1,X
004955  1  95 AC                STA     <FAC1_e,X       ; save FAC1,X
004957  1  94 B3                STY     <FAC2_e,X       ; save FAC2,X
004959  1  CA                   DEX                     ; decrement count/index
00495A  1  10 F5                BPL     LAB_2B49        ; loop if not all done
00495C  1               
00495C  1  A5 A3                LDA     <FAC2_r         ; get FAC2 rounding byte
00495E  1  85 B9                STA     <FAC1_r         ; save as FAC1 rounding byte
004960  1  20 3B 41             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
004963  1  20 18 49             JSR     LAB_GTHAN       ; do - FAC1
004966  1  A9 55                LDA     #<LAB_2AFE      ; set counter pointer low byte
004968  1  A0 18                LDY     #>LAB_2AFE      ; set counter pointer high byte
00496A  1  20 8B 49             JSR     LAB_2B84        ; go do series evaluation
00496D  1  A9 00                LDA     #$00            ; clear A
00496F  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
004971  1  68                   PLA                     ;.get saved FAC2 exponent
004972  1  4C 9E 43             JMP     LAB_2675        ; test and adjust accumulators and return
004975  1               
004975  1               ; ^2 then series evaluation
004975  1               
004975  1               LAB_2B6E:
004975  1  85 BA                STA     <Cptrl          ; save count pointer low byte
004977  1  84 BB                STY     <Cptrh          ; save count pointer high byte
004979  1  20 D8 44             JSR     LAB_276E        ; pack FAC1 into <Adatal
00497C  1  A9 A4                LDA     #<Adatal        ; set pointer low byte (Y already $00)
00497E  1  20 D4 42             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
004981  1  20 8F 49             JSR     LAB_2B88        ; go do series evaluation
004984  1  A9 A4                LDA     #<Adatal        ; pointer to original # low byte
004986  1  A0 00                LDY     #>Adatal        ; pointer to original # high byte
004988  1  4C D4 42             JMP     LAB_25FB        ; do convert AY, FCA1*(AY) and return
00498B  1               
00498B  1               ; series evaluation
00498B  1               
00498B  1               LAB_2B84:
00498B  1  85 BA                STA     <Cptrl          ; save count pointer low byte
00498D  1  84 BB                STY     <Cptrh          ; save count pointer high byte
00498F  1               LAB_2B88:
00498F  1  A2 A8                LDX     #<numexp        ; set pointer low byte
004991  1  20 DA 44             JSR     LAB_2770        ; set pointer high byte and pack FAC1 into <numexp
004994  1  8B DA A2 01          LDAINDIRECTY Cptrl      ; get constants count
004998  1  B5 BA C9 00  
00499C  1  D0 04 A2 00  
0049AA  1  85 B1                STA     <numcon         ; save constants count
0049AC  1  A4 BA                LDY     <Cptrl          ; get count pointer low byte
0049AE  1  C8                   INY                     ; increment it (now constants pointer)
0049AF  1  98                   TYA                     ; copy it
0049B0  1  D0 02                BNE     LAB_2B97        ; skip next if no overflow
0049B2  1               
0049B2  1  E6 BB                INC     <Cptrh          ; else increment high byte
0049B4  1               LAB_2B97:
0049B4  1  85 BA                STA     <Cptrl          ; save low byte
0049B6  1  A4 BB                LDY     <Cptrh          ; get high byte
0049B8  1               LAB_2B9B:
0049B8  1  20 D4 42             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0049BB  1  A5 BA                LDA     <Cptrl          ; get constants pointer low byte
0049BD  1  A4 BB                LDY     <Cptrh          ; get constants pointer high byte
0049BF  1  18                   CLC                     ; clear carry for add
0049C0  1  69 04                ADC     #$04            ; +4 to  low pointer (4 bytes per constant)
0049C2  1  90 01                BCC     LAB_2BA8        ; skip next if no overflow
0049C4  1               
0049C4  1  C8                   INY                     ; increment high byte
0049C5  1               LAB_2BA8:
0049C5  1  85 BA                STA     <Cptrl          ; save pointer low byte
0049C7  1  84 BB                STY     <Cptrh          ; save pointer high byte
0049C9  1  20 53 41             JSR     LAB_246C        ; add (AY) to FAC1
0049CC  1  A9 A8                LDA     #<numexp        ; set pointer low byte to partial @ <numexp
0049CE  1  A0 00                LDY     #>numexp        ; set pointer high byte to partial @ <numexp
0049D0  1  C6 B1                DEC     <numcon         ; decrement constants count
0049D2  1  D0 E4                BNE     LAB_2B9B        ; loop until all done
0049D4  1               
0049D4  1  60                   RTS
0049D5  1               
0049D5  1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
0049D5  1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
0049D5  1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
0049D5  1               
0049D5  1               ; Entropy = 7.997442 bits per byte
0049D5  1               ; Optimum compression would reduce these 65536 bytes by 0 percent
0049D5  1               
0049D5  1               ; Chi square distribution for 65536 samples is 232.01, and
0049D5  1               ; randomly would exceed this value 75.00 percent of the time
0049D5  1               
0049D5  1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
0049D5  1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
0049D5  1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
0049D5  1               
0049D5  1               LAB_RND:
0049D5  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0049D7  1  F0 07                BEQ     NextPRN         ; do next random # if zero
0049D9  1               
0049D9  1               ; else get seed into random number store
0049D9  1  A2 E1                LDX     #<Rbyte4        ; set PRNG pointer low byte
0049DB  1  A0 00                LDY     #$00            ; set PRNG pointer high byte
0049DD  1  20 E2 44             JSR     LAB_2778        ; pack FAC1 into (XY)
0049E0  1               NextPRN:
0049E0  1  A2 AF                LDX     #$AF            ; set EOR byte
0049E2  1  A0 13                LDY     #$13            ; do this nineteen times
0049E4  1               LoopPRN:
0049E4  1  06 E2                ASL     <Rbyte1         ; shift PRNG most significant byte
0049E6  1  26 E3                ROL     <Rbyte2         ; shift PRNG middle byte
0049E8  1  26 E4                ROL     <Rbyte3         ; shift PRNG least significant byte
0049EA  1  26 E1                ROL     <Rbyte4         ; shift PRNG extra byte
0049EC  1  90 05                BCC     Ninc1           ; branch if bit 32 clear
0049EE  1               
0049EE  1  8A                   TXA                     ; set EOR byte
0049EF  1  45 E2                EOR     <Rbyte1         ; EOR PRNG extra byte
0049F1  1  85 E2                STA     <Rbyte1         ; save new PRNG extra byte
0049F3  1               Ninc1:
0049F3  1  88                   DEY                     ; decrement loop count
0049F4  1  D0 EE                BNE     LoopPRN         ; loop if not all done
0049F6  1               
0049F6  1  A2 02                LDX     #$02            ; three bytes to copy
0049F8  1               CopyPRNG:
0049F8  1  B5 E2                LDA     <Rbyte1,X       ; get PRNG byte
0049FA  1  95 AD                STA     <FAC1_1,X       ; save FAC1 byte
0049FC  1  CA                   DEX
0049FD  1  10 F9                BPL     CopyPRNG        ; loop if not complete
0049FF  1               
0049FF  1  A9 80                LDA     #$80            ; set the exponent
004A01  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004A03  1               
004A03  1  0A                   ASL     A               ; clear A
004A04  1  85 B0                STA     <FAC1_s         ; save FAC1 sign
004A06  1               
004A06  1  4C CF 41             JMP     LAB_24D5        ; normalise FAC1 and return
004A09  1               
004A09  1               ; perform COS()
004A09  1               
004A09  1               LAB_COS:
004A09  1  A9 72                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
004A0B  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
004A0D  1  20 53 41             JSR     LAB_246C        ; add (AY) to FAC1
004A10  1               
004A10  1               ; perform SIN()
004A10  1               
004A10  1               LAB_SIN:
004A10  1  20 55 45             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004A13  1  A9 87                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
004A15  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
004A17  1  A6 B7                LDX     <FAC2_s         ; get FAC2 sign (b7)
004A19  1  20 E4 43             JSR     LAB_26C2        ; divide by (AY) (X=sign)
004A1C  1  20 55 45             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004A1F  1  20 70 46             JSR     LAB_INT         ; perform INT
004A22  1  A9 00                LDA     #$00            ; clear byte
004A24  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
004A26  1  20 3B 41             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
004A29  1  A9 B9                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
004A2B  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
004A2D  1  20 38 41             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
004A30  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004A32  1  48                   PHA                     ; save FAC1 sign
004A33  1  10 0D                BPL     LAB_2C35        ; branch if +ve
004A35  1               
004A35  1               ; FAC1 sign was -ve
004A35  1  20 4F 41             JSR     LAB_244E        ; add 0.5 to FAC1
004A38  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004A3A  1  30 09                BMI     LAB_2C38        ; branch if -ve
004A3C  1               
004A3C  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
004A3E  1  49 FF                EOR     #$FF            ; toggle flag
004A40  1  85 63                STA     <Cflag          ; save comparison evaluation flag
004A42  1               LAB_2C35:
004A42  1  20 18 49             JSR     LAB_GTHAN       ; do - FAC1
004A45  1               LAB_2C38:
004A45  1  A9 B9                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
004A47  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
004A49  1  20 53 41             JSR     LAB_246C        ; add (AY) to FAC1
004A4C  1  68                   PLA                     ; restore FAC1 sign
004A4D  1  10 03                BPL     LAB_2C45        ; branch if was +ve
004A4F  1               
004A4F  1               ; else correct FAC1
004A4F  1  20 18 49             JSR     LAB_GTHAN       ; do - FAC1
004A52  1               LAB_2C45:
004A52  1  A9 76                LDA     #<LAB_2C84      ; set pointer low byte to counter
004A54  1  A0 18                LDY     #>LAB_2C84      ; set pointer high byte to counter
004A56  1  4C 75 49             JMP     LAB_2B6E        ; ^2 then series evaluation and return
004A59  1               
004A59  1               ; perform TAN()
004A59  1               
004A59  1               LAB_TAN:
004A59  1  20 D8 44             JSR     LAB_276E        ; pack FAC1 into <Adatal
004A5C  1  A9 00                LDA     #$00            ; clear byte
004A5E  1  85 63                STA     <Cflag          ; clear comparison evaluation flag
004A60  1  20 10 4A             JSR     LAB_SIN         ; go do SIN(n)
004A63  1  A2 9C                LDX     #<func_l        ; set sin(n) pointer low byte
004A65  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
004A67  1  20 E2 44             JSR     LAB_2778        ; pack FAC1 into (XY)
004A6A  1  A9 A4                LDA     #<Adatal        ; set n pointer low addr
004A6C  1  A0 00                LDY     #>Adatal        ; set n pointer high addr
004A6E  1  20 68 44             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004A71  1  A9 00                LDA     #$00            ; clear byte
004A73  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
004A75  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
004A77  1  20 81 4A             JSR     LAB_2C74        ; save flag and go do series evaluation
004A7A  1               
004A7A  1  A9 9C                LDA     #<func_l        ; set sin(n) pointer low byte
004A7C  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
004A7E  1  4C EC 43             JMP     LAB_26CA        ; convert AY and do (AY)/FAC1
004A81  1               
004A81  1               LAB_2C74:
004A81  1  48                   PHA                     ; save comparison evaluation flag
004A82  1  4C 42 4A             JMP     LAB_2C35        ; go do series evaluation
004A85  1               
004A85  1               ; perform USR()
004A85  1               
004A85  1               LAB_USR:
004A85  1  20 0A 00             JSR     Usrjmp          ; call user code
004A88  1  4C FF 33             JMP     LAB_1BFB        ; scan for ")", else do syntax error then warm start
004A8B  1               
004A8B  1               ; perform ATN()
004A8B  1               
004A8B  1               LAB_ATN:
004A8B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004A8D  1  48                   PHA                     ; save sign
004A8E  1  10 03                BPL     LAB_2CA1        ; branch if +ve
004A90  1               
004A90  1  20 18 49             JSR     LAB_GTHAN       ; else do - FAC1
004A93  1               LAB_2CA1:
004A93  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004A95  1  48                   PHA                     ; push exponent
004A96  1  C9 81                CMP     #$81            ; compare with 1
004A98  1  90 07                BCC     LAB_2CAF        ; branch if FAC1<1
004A9A  1               
004A9A  1  A9 AC                LDA     #<LAB_259C      ; set 1 pointer low byte
004A9C  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
004A9E  1  20 EC 43             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1
004AA1  1               LAB_2CAF:
004AA1  1  A9 8B                LDA     #<LAB_2CC9      ; set pointer low byte to counter
004AA3  1  A0 18                LDY     #>LAB_2CC9      ; set pointer high byte to counter
004AA5  1  20 75 49             JSR     LAB_2B6E        ; ^2 then series evaluation
004AA8  1  68                   PLA                     ; restore old FAC1 exponent
004AA9  1  C9 81                CMP     #$81            ; compare with 1
004AAB  1  90 07                BCC     LAB_2CC2        ; branch if FAC1<1
004AAD  1               
004AAD  1  A9 72                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
004AAF  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
004AB1  1  20 38 41             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
004AB4  1               LAB_2CC2:
004AB4  1  68                   PLA                     ; restore FAC1 sign
004AB5  1  10 16                BPL     LAB_2D04        ; exit if was +ve
004AB7  1               
004AB7  1  4C 18 49             JMP     LAB_GTHAN       ; else do - FAC1 and return
004ABA  1               
004ABA  1               ; perform BITSET
004ABA  1               
004ABA  1               LAB_BITSET:
004ABA  1  20 15 40             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004ABD  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
004ABF  1  B0 20                BCS     FCError         ; branch if > 7
004AC1  1               
004AC1  1  A9 00                LDA     #$00            ; clear A
004AC3  1  38                   SEC                     ; set the carry
004AC4  1               S_Bits:
004AC4  1  2A                   ROL     A               ; shift bit
004AC5  1  CA                   DEX                     ; decrement bit number
004AC6  1  10 FC                BPL     S_Bits          ; loop if still +ve
004AC8  1               
004AC8  1  E8                   INX                     ; make X = $00
004AC9  1  01 11                ORA     (<Itempl,X)     ; or with byte via temporary integer (addr)
004ACB  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
004ACD  1               LAB_2D04:
004ACD  1  60                   RTS
004ACE  1               
004ACE  1               ; perform BITCLR
004ACE  1               
004ACE  1               LAB_BITCLR:
004ACE  1  20 15 40             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004AD1  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
004AD3  1  B0 0C                BCS     FCError         ; branch if > 7
004AD5  1               
004AD5  1  A9 FF                LDA     #$FF            ; set A
004AD7  1               S_Bitc:
004AD7  1  2A                   ROL     A               ; shift bit
004AD8  1  CA                   DEX                     ; decrement bit number
004AD9  1  10 FC                BPL     S_Bitc          ; loop if still +ve
004ADB  1               
004ADB  1  E8                   INX                     ; make X = $00
004ADC  1  21 11                AND     (<Itempl,X)     ; and with byte via temporary integer (addr)
004ADE  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
004AE0  1  60                   RTS
004AE1  1               
004AE1  1               FCError:
004AE1  1  4C 73 37             JMP     LAB_FCER        ; do function call error then warm start
004AE4  1               
004AE4  1               ; perform BITTST()
004AE4  1               
004AE4  1               LAB_BTST:
004AE4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment BASIC pointer
004AE8  1  20 15 40             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004AEB  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
004AED  1  B0 F2                BCS     FCError         ; branch if > 7
004AEF  1               
004AEF  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
004AF3  1  C9 29                CMP     #')'            ; is next character ")"
004AF5  1  F0 03                BEQ     TST_OK          ; if ")" go do rest of function
004AF7  1               
004AF7  1  4C 14 34             JMP     LAB_SNER        ; do syntax error then warm start
004AFA  1               
004AFA  1               TST_OK:
004AFA  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
004AFE  1  A9 00                LDA     #$00            ; clear A
004B00  1  38                   SEC                     ; set the carry
004B01  1               T_Bits:
004B01  1  2A                   ROL     A               ; shift bit
004B02  1  CA                   DEX                     ; decrement bit number
004B03  1  10 FC                BPL     T_Bits          ; loop if still +ve
004B05  1               
004B05  1  E8                   INX                     ; make X = $00
004B06  1  21 11                AND     (<Itempl,X)     ; AND with byte via temporary integer (addr)
004B08  1  F0 02                BEQ     LAB_NOTT        ; branch if zero (already correct)
004B0A  1               
004B0A  1  A9 FF                LDA     #$FF            ; set for -1 result
004B0C  1               LAB_NOTT:
004B0C  1  4C 85 45             JMP     LAB_27DB        ; go do SGN tail
004B0F  1               
004B0F  1               ; perform BIN$()
004B0F  1               
004B0F  1               LAB_BINS:
004B0F  1  E0 19                CPX     #$19            ; max + 1
004B11  1  B0 71                BCS     BinFErr         ; exit if too big ( > or = )
004B13  1               
004B13  1  86 78                STX     <TempB          ; save # of characters ($00 = leading zero remove)
004B15  1  A9 18                LDA     #$18            ; need A byte long space
004B17  1  20 1A 3A             JSR     LAB_MSSP        ; make string space A bytes long
004B1A  1  A0 17                LDY     #$17            ; set index
004B1C  1  A2 18                LDX     #$18            ; character count
004B1E  1               NextB1:
004B1E  1  46 11                LSR     <nums_1         ; shift highest byte
004B20  1  66 12                ROR     <nums_2         ; shift middle byte
004B22  1  66 13                ROR     <nums_3         ; shift lowest byte bit 0 to carry
004B24  1  8A                   TXA                     ; load with "0"/2
004B25  1  2A                   ROL     A               ; shift in carry
004B26  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string + index
004B2A  1  01 B5 AD C9  
004B2E  1  00 D0 04 A2  
004B3C  1  88                   DEY                     ; decrement index
004B3D  1  10 DF                BPL     NextB1          ; loop if not done
004B3F  1               
004B3F  1  A5 78                LDA     <TempB          ; get # of characters
004B41  1  F0 0A                BEQ     EndBHS          ; branch if truncate
004B43  1               
004B43  1  AA                   TAX                     ; copy length to X
004B44  1  38                   SEC                     ; set carry for add !
004B45  1  49 FF                EOR     #$FF            ; 1's complement
004B47  1  69 18                ADC     #$18            ; add 24d
004B49  1  F0 30                BEQ     GoPr2           ; if zero print whole string
004B4B  1               
004B4B  1  D0 23                BNE     GoPr1           ; else go make output string
004B4D  1               
004B4D  1               ; this is the exit code and is also used by HEX$()
004B4D  1               ; truncate string to remove leading "0"s
004B4D  1               
004B4D  1               EndBHS:
004B4D  1  A8                   TAY                     ; clear index (A=0, X=length here)
004B4E  1               NextB2:
004B4E  1  8B DA A2 01          LDAINDIRECTY str_pl     ; get character from string
004B52  1  B5 AD C9 00  
004B56  1  D0 04 A2 00  
004B64  1  C9 30                CMP     #'0'            ; compare with "0"
004B66  1  D0 07                BNE     GoPr            ; if not "0" then go print string from here
004B68  1               
004B68  1  CA                   DEX                     ; decrement character count
004B69  1  F0 03                BEQ     GoPr3           ; if zero then end of string so go print it
004B6B  1               
004B6B  1  C8                   INY                     ; else increment index
004B6C  1  10 E0                BPL     NextB2          ; loop always
004B6E  1               
004B6E  1               ; make fixed length output string - ignore overflows!
004B6E  1               
004B6E  1               GoPr3:
004B6E  1  E8                   INX                     ; need at least 1 character
004B6F  1               GoPr:
004B6F  1  98                   TYA                     ; copy result
004B70  1               GoPr1:
004B70  1  18                   CLC                     ; clear carry for add
004B71  1  65 AD                ADC     <str_pl         ; add low address
004B73  1  85 AD                STA     <str_pl         ; save low address
004B75  1  A9 00                LDA     #$00            ; do high byte
004B77  1  65 AE                ADC     <str_ph         ; add high address
004B79  1  85 AE                STA     <str_ph         ; save high address
004B7B  1               GoPr2:
004B7B  1  86 AC                STX     <str_ln         ; X holds string length
004B7D  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
004B81  1  4C 7D 3A             JMP     LAB_RTST        ; check for space on descriptor stack then put address
004B84  1               ; and length on descriptor stack and update stack pointers
004B84  1               
004B84  1               BinFErr:
004B84  1  4C 73 37             JMP     LAB_FCER        ; do function call error then warm start
004B87  1               
004B87  1               ; perform HEX$()
004B87  1               
004B87  1               LAB_HEXS:
004B87  1  E0 07                CPX     #$07            ; max + 1
004B89  1  B0 F9                BCS     BinFErr         ; exit if too big ( > or = )
004B8B  1               
004B8B  1  86 78                STX     <TempB          ; save # of characters
004B8D  1               
004B8D  1  A9 06                LDA     #$06            ; need 6 bytes for string
004B8F  1  20 1A 3A             JSR     LAB_MSSP        ; make string space A bytes long
004B92  1  A0 05                LDY     #$05            ; set string index
004B94  1               
004B94  1  F8                   SED                     ; need decimal mode for nibble convert
004B95  1  A5 13                LDA     <nums_3         ; get lowest byte
004B97  1  20 B5 4B             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004B9A  1  A5 12                LDA     <nums_2         ; get middle byte
004B9C  1  20 B5 4B             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004B9F  1  A5 11                LDA     <nums_1         ; get highest byte
004BA1  1  20 B5 4B             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004BA4  1  D8                   CLD                     ; back to binary
004BA5  1               
004BA5  1  A2 06                LDX     #$06            ; character count
004BA7  1  A5 78                LDA     <TempB          ; get # of characters
004BA9  1  F0 A2                BEQ     EndBHS          ; branch if truncate
004BAB  1               
004BAB  1  AA                   TAX                     ; copy length to X
004BAC  1  38                   SEC                     ; set carry for add !
004BAD  1  49 FF                EOR     #$FF            ; 1's complement
004BAF  1  69 06                ADC     #$06            ; add 6d
004BB1  1  F0 C8                BEQ     GoPr2           ; if zero print whole string
004BB3  1               
004BB3  1  D0 BB                BNE     GoPr1           ; else go make output string (branch always)
004BB5  1               
004BB5  1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
004BB5  1               
004BB5  1               LAB_A2HX:
004BB5  1  AA                   TAX                     ; save byte
004BB6  1  29 0F                AND     #$0F            ; mask off top bits
004BB8  1  20 C0 4B             JSR     LAB_AL2X        ; convert low nibble to ASCII and output
004BBB  1  8A                   TXA                     ; get byte back
004BBC  1  4A                   LSR     A               ; /2	shift high nibble to low nibble
004BBD  1  4A                   LSR     A               ; /4
004BBE  1  4A                   LSR     A               ; /8
004BBF  1  4A                   LSR     A               ; /16
004BC0  1               LAB_AL2X:
004BC0  1  C9 0A                CMP     #$0A            ; set carry for +1 if >9
004BC2  1  69 30                ADC     #'0'            ; add ASCII "0"
004BC4  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string
004BC8  1  01 B5 AD C9  
004BCC  1  00 D0 04 A2  
004BDA  1  88                   DEY                     ; decrement counter
004BDB  1  60                   RTS
004BDC  1               
004BDC  1               LAB_NLTO:
004BDC  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004BDE  1  A9 00                LDA     #$00            ; clear sign compare
004BE0  1               LAB_MLTE:
004BE0  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004BE2  1  8A                   TXA                     ; restore character
004BE3  1  20 3B 47             JSR     LAB_2912        ; evaluate new ASCII digit
004BE6  1               
004BE6  1               ; gets here if the first character was "$" for hex
004BE6  1               ; get hex number
004BE6  1               
004BE6  1               LAB_CHEX:
004BE6  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004BEA  1  90 0A                BCC     LAB_ISHN        ; branch if numeric character
004BEC  1               
004BEC  1  09 20                ORA     #$20            ; case convert, allow "A" to "F" and "a" to "f"
004BEE  1  E9 61                SBC     #'a'            ; subtract "a" (carry set here)
004BF0  1  C9 06                CMP     #$06            ; compare normalised with $06 (max+1)
004BF2  1  B0 2B                BCS     LAB_EXCH        ; exit if >"f" or <"0"
004BF4  1               
004BF4  1  69 0A                ADC     #$0A            ; convert to nibble
004BF6  1               LAB_ISHN:
004BF6  1  29 0F                AND     #$0F            ; convert to binary
004BF8  1  AA                   TAX                     ; save nibble
004BF9  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004BFB  1  F0 E3                BEQ     LAB_MLTE        ; skip multiply if zero
004BFD  1               
004BFD  1  69 04                ADC     #$04            ; add four to exponent (*16 - carry clear here)
004BFF  1  90 DB                BCC     LAB_NLTO        ; if no overflow do evaluate digit
004C01  1               
004C01  1               LAB_MLTO:
004C01  1  4C 5E 42             JMP     LAB_2564        ; do overflow error and warm start
004C04  1               
004C04  1               LAB_NXCH:
004C04  1  AA                   TAX                     ; save bit
004C05  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004C07  1  F0 06                BEQ     LAB_MLBT        ; skip multiply if zero
004C09  1               
004C09  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*2)
004C0B  1  F0 F4                BEQ     LAB_MLTO        ; do overflow error if = $00
004C0D  1               
004C0D  1  A9 00                LDA     #$00            ; clear sign compare
004C0F  1               LAB_MLBT:
004C0F  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004C11  1  8A                   TXA                     ; restore bit
004C12  1  20 3B 47             JSR     LAB_2912        ; evaluate new ASCII digit
004C15  1               
004C15  1               ; gets here if the first character was  "%" for binary
004C15  1               ; get binary number
004C15  1               
004C15  1               LAB_CBIN:
004C15  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004C19  1  49 30                EOR     #'0'            ; convert "0" to 0 etc.
004C1B  1  C9 02                CMP     #$02            ; compare with max+1
004C1D  1  90 E5                BCC     LAB_NXCH        ; branch exit if < 2
004C1F  1               
004C1F  1               LAB_EXCH:
004C1F  1  4C 20 47             JMP     LAB_28F6        ; evaluate -ve flag and return
004C22  1               
004C22  1               ; ctrl-c check routine. includes limited "life" byte save for INGET routine
004C22  1               ; now also the code that checks to see if an interrupt has occurred
004C22  1               
004C22  1               CTRLC:
004C22  1  AF 00 02 00          LDA     f:ccflag        ; get [CTRL-C] check flag
004C26  1  D0 21                BNE     LAB_FBA2        ; exit if inhibited
004C28  1               
004C28  1  20 D3 18             JSR     V_INPT          ; scan input device
004C2B  1  B0 11                BCS     LAB_FBA0        ; exit if buffer empty
004C2D  1               
004C2D  1  8F 01 02 00          STA     f:ccbyte        ; save received byte
004C31  1  A9 20                LDA     #$20            ; "life" timer for bytes
004C33  1  8F 02 02 00          STA     f:ccnull        ; set countdown
004C37  1  AF 01 02 00          LDA     f:ccbyte
004C3B  1  4C CB 2B             JMP     LAB_1636        ; return to BASIC
004C3E  1               
004C3E  1               LAB_FBA0:
004C3E  1  AF 02 02 00          LDA     f:ccnull        ; get countdown byte
004C42  1  F0 05                BEQ     LAB_FBA2        ; exit if finished
004C44  1  3A                   DEC     A
004C45  1  8F 02 02 00          STA     f:ccnull        ; else decrement countdown
004C49  1               LAB_FBA2:
004C49  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004C4B  1  20 58 4C             JSR     LAB_CKIN        ; go check interrupt
004C4E  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004C50  1  20 58 4C             JSR     LAB_CKIN        ; go check interrupt
004C53  1  AF 01 02 00          LDA     f:ccbyte
004C57  1               LAB_CRTS:
004C57  1  60                   RTS
004C58  1               
004C58  1               ; check whichever interrupt is indexed by X
004C58  1               
004C58  1               LAB_CKIN:
004C58  1  B5 00                LDA     <PLUS_0,X       ; get interrupt flag byte
004C5A  1  10 FB                BPL     LAB_CRTS        ; branch if interrupt not enabled
004C5C  1               
004C5C  1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
004C5C  1               ; automatically enable the interrupt when we exit
004C5C  1               
004C5C  1  0A                   ASL     A               ; move happened bit to setup bit
004C5D  1  29 40                AND     #$40            ; mask happened bits
004C5F  1  F0 F6                BEQ     LAB_CRTS        ; if no interrupt then exit
004C61  1               
004C61  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004C63  1               
004C63  1  8A                   TXA                     ; copy index ..
004C64  1  A8                   TAY                     ; .. to Y
004C65  1               
004C65  1  68                   PLA                     ; dump return address low byte, call from CTRL-C
004C66  1  68                   PLA                     ; dump return address high byte
004C67  1               
004C67  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
004C69  1  20 87 27             JSR     LAB_1212        ; check room on stack for A bytes
004C6C  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
004C6E  1  48                   PHA                     ; push on stack
004C6F  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
004C71  1  48                   PHA                     ; push on stack
004C72  1  A5 88                LDA     <Clineh         ; get current line high byte
004C74  1  48                   PHA                     ; push on stack
004C75  1  A5 87                LDA     <Clinel         ; get current line low byte
004C77  1  48                   PHA                     ; push on stack
004C78  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
004C7A  1  48                   PHA                     ; push on stack
004C7B  1  DA                   PHX
004C7C  1  BB                   TYX
004C7D  1  B5 01                LDA     <PLUS_1,X       ; get interrupt code pointer low byte
004C7F  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
004C81  1  B5 02                LDA     <PLUS_2,X       ; get interrupt code pointer high byte
004C83  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
004C85  1  FA                   PLX
004C86  1  4C 6D 2B             JMP     LAB_15C2        ; go do interpreter inner loop
004C89  1               ; can't RTS, we used the stack! the RTS from the ctrl-c
004C89  1               ; check will be taken when the RETIRQ/RETNMI/RETURN is
004C89  1               ; executed at the end of the subroutine
004C89  1               
004C89  1               ; get byte from input device, no waiting
004C89  1               ; returns with carry set if byte in A
004C89  1               
004C89  1               INGET:
004C89  1  20 D3 18             JSR     V_INPT          ; call scan input device
004C8C  1  90 0B                BCC     LAB_FB95        ; if byte go reset timer
004C8E  1               
004C8E  1  AF 02 02 00          LDA     f:ccnull        ; get countdown
004C92  1  F0 0F                BEQ     LAB_FB96        ; exit if empty
004C94  1               
004C94  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004C98  1  38                   SEC                     ; flag we got a byte
004C99  1               LAB_FB95:
004C99  1  A9 00                LDA     #$00            ; clear X
004C9B  1  8F 02 02 00          STA     f:ccnull        ; clear timer because we got a byte
004C9F  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004CA3  1               LAB_FB96:
004CA3  1  60                   RTS
004CA4  1               
004CA4  1               ; these routines only enable the interrupts if the set-up flag is set
004CA4  1               ; if not they have no effect
004CA4  1               
004CA4  1               ; perform IRQ {ON|OFF|CLEAR}
004CA4  1               
004CA4  1               LAB_IRQ:
004CA4  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004CA6  1  2C                   .BYTE   $2C             ; make next line BIT abs.
004CA7  1               
004CA7  1               ; perform NMI {ON|OFF|CLEAR}
004CA7  1               
004CA7  1               LAB_NMI:
004CA7  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004CA9  1  C9 93                CMP     #TK_ON          ; compare with token for ON
004CAB  1  F0 11                BEQ     LAB_INON        ; go turn on interrupt
004CAD  1               
004CAD  1  C9 C6                CMP     #TK_OFF         ; compare with token for OFF
004CAF  1  F0 07                BEQ     LAB_IOFF        ; go turn off interrupt
004CB1  1               
004CB1  1  49 A1                EOR     #TK_CLEAR       ; compare with token for CLEAR, A = $00 if = TK_CLEAR
004CB3  1  F0 0E                BEQ     LAB_INEX        ; go clear interrupt flags and return
004CB5  1               
004CB5  1  4C 14 34             JMP     LAB_SNER        ; do syntax error then warm start
004CB8  1               
004CB8  1               LAB_IOFF:
004CB8  1  A9 7F                LDA     #$7F            ; clear A
004CBA  1  35 00                AND     <PLUS_0,X       ; AND with interrupt setup flag
004CBC  1  10 05                BPL     LAB_INEX        ; go clear interrupt enabled flag and return
004CBE  1               
004CBE  1               LAB_INON:
004CBE  1  B5 00                LDA     <PLUS_0,X       ; get interrupt setup flag
004CC0  1  0A                   ASL     A               ; Shift bit to enabled flag
004CC1  1  15 00                ORA     <PLUS_0,X       ; OR with flag byte
004CC3  1               LAB_INEX:
004CC3  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004CC5  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer and return
004CC9  1  60                   RTS
004CCA  1               ; these routines set up the pointers and flags for the interrupt routines
004CCA  1               ; note that the interrupts are also enabled by these commands
004CCA  1               
004CCA  1               
004CCA  1               ; MAX() MIN() pre process
004CCA  1               
004CCA  1               LAB_MMPP:
004CCA  1  20 F6 32             JSR     LAB_EVEZ        ; process expression
004CCD  1  4C DD 32             JMP     LAB_CTNM        ; check if source is numeric, else do type mismatch
004CD0  1               
004CD0  1               ; perform MAX()
004CD0  1               
004CD0  1               LAB_MAX:
004CD0  1  20 00 4D             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004CD3  1               ; pull FAC2 and compare with FAC1
004CD3  1  10 FB                BPL     LAB_MAX         ; branch if no swap to do
004CD5  1               
004CD5  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004CD7  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004CD9  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004CDB  1  20 58 41             JSR     LAB_279B        ; copy FAC2 to FAC1
004CDE  1  F0 F0                BEQ     LAB_MAX         ; go do next (branch always)
004CE0  1               
004CE0  1               ; perform MIN()
004CE0  1               
004CE0  1               LAB_MIN:
004CE0  1  20 00 4D             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004CE3  1               ; pull FAC2 and compare with FAC1
004CE3  1  30 FB                BMI     LAB_MIN         ; branch if no swap to do
004CE5  1               
004CE5  1  F0 F9                BEQ     LAB_MIN         ; branch if no swap to do
004CE7  1               
004CE7  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004CE9  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004CEB  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004CED  1  20 58 41             JSR     LAB_279B        ; copy FAC2 to FAC1
004CF0  1  F0 EE                BEQ     LAB_MIN         ; go do next (branch always)
004CF2  1               
004CF2  1               ; exit routine. don't bother returning to the loop code
004CF2  1               ; check for correct exit, else so syntax error
004CF2  1               
004CF2  1               LAB_MMEC:
004CF2  1  C9 29                CMP     #')'            ; is it end of function?
004CF4  1  D0 07                BNE     LAB_MMSE        ; if not do MAX MIN syntax error
004CF6  1               
004CF6  1  68                   PLA                     ; dump return address low byte
004CF7  1  68                   PLA                     ; dump return address high byte
004CF8  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to chr past ")")
004CFC  1  60                   RTS
004CFD  1               LAB_MMSE:
004CFD  1  4C 14 34             JMP     LAB_SNER        ; do syntax error then warm start
004D00  1               
004D00  1               ; check for next, evaluate and return or exit
004D00  1               ; this is the routine that does most of the work
004D00  1               
004D00  1               LAB_PHFA:
004D00  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
004D04  1  C9 2C                CMP     #','            ; is there more ?
004D06  1  D0 EA                BNE     LAB_MMEC        ; if not go do end check
004D08  1               
004D08  1               ; push FAC1
004D08  1  20 64 45             JSR     LAB_27BA        ; round FAC1
004D0B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004D0D  1  09 7F                ORA     #$7F            ; set all non sign bits
004D0F  1  25 AD                AND     <FAC1_1         ; AND FAC1 mantissa1 (AND in sign bit)
004D11  1  48                   PHA                     ; push on stack
004D12  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004D14  1  48                   PHA                     ; push on stack
004D15  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004D17  1  48                   PHA                     ; push on stack
004D18  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004D1A  1  48                   PHA                     ; push on stack
004D1B  1               
004D1B  1  22 BC 00 00          JSL     LAB_IGBY        ; scan and get next BASIC byte (after ",")
004D1F  1  20 DA 32             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
004D22  1               ; else do type mismatch
004D22  1               
004D22  1               ; pop FAC2 (MAX/MIN expression so far)
004D22  1  68                   PLA                     ; pop exponent
004D23  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
004D25  1  68                   PLA                     ; pop mantissa3
004D26  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004D28  1  68                   PLA                     ; pop mantissa1
004D29  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
004D2B  1  68                   PLA                     ; pop sign/mantissa1
004D2C  1  85 B4                STA     <FAC2_1         ; save FAC2 sign/mantissa1
004D2E  1  85 B7                STA     <FAC2_s         ; save FAC2 sign
004D30  1               
004D30  1               ; compare FAC1 with (packed) FAC2
004D30  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
004D32  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
004D34  1  4C A2 45             JMP     LAB_27F8        ; compare FAC1 with FAC2 (AY) and return
004D37  1               ; returns A=$00 if FAC1 = (AY)
004D37  1               ; returns A=$01 if FAC1 > (AY)
004D37  1               ; returns A=$FF if FAC1 < (AY)
004D37  1               
004D37  1               ; perform WIDTH
004D37  1               
004D37  1               LAB_WDTH:
004D37  1  C9 2C                CMP     #','            ; is next byte ","
004D39  1  F0 1C                BEQ     LAB_TBSZ        ; if so do tab size
004D3B  1               
004D3B  1  20 8A 3F             JSR     LAB_GTBY        ; get byte parameter
004D3E  1  8A                   TXA                     ; copy width to A
004D3F  1  F0 0A                BEQ     LAB_NSTT        ; branch if set for infinite line
004D41  1               
004D41  1  E0 10                CPX     #$10            ; else make min width = 16d
004D43  1  90 46                BCC     TabErr          ; if less do function call error and exit
004D45  1               
004D45  1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
004D45  1               ; tab size greater than the line length.
004D45  1               
004D45  1  E4 64                CPX     <TabSiz         ; compare with tab size
004D47  1  B0 02                BCS     LAB_NSTT        ; branch if >= tab size
004D49  1               
004D49  1  86 64                STX     <TabSiz         ; else make tab size = terminal width
004D4B  1               LAB_NSTT:
004D4B  1  86 0F                STX     <TWidth         ; set the terminal width
004D4D  1  22 C2 00 00          JSL     LAB_GBYT        ; get BASIC byte back
004D51  1  F0 1A                BEQ     WExit           ; exit if no following
004D53  1               
004D53  1  C9 2C                CMP     #','            ; else is it ","
004D55  1  D0 A6                BNE     LAB_MMSE        ; if not do syntax error
004D57  1               
004D57  1               LAB_TBSZ:
004D57  1  20 86 3F             JSR     LAB_SGBY        ; scan and get byte parameter
004D5A  1  8A                   TXA                     ; copy TAB size
004D5B  1  30 2E                BMI     TabErr          ; if >127 do function call error and exit
004D5D  1               
004D5D  1  E0 01                CPX     #$01            ; compare with min-1
004D5F  1  90 2A                BCC     TabErr          ; if <=1 do function call error and exit
004D61  1               
004D61  1  A5 0F                LDA     <TWidth         ; set flags for width
004D63  1  F0 06                BEQ     LAB_SVTB        ; skip check if infinite line
004D65  1               
004D65  1  E4 0F                CPX     <TWidth         ; compare TAB with width
004D67  1  F0 02                BEQ     LAB_SVTB        ; ok if =
004D69  1               
004D69  1  B0 20                BCS     TabErr          ; branch if too big
004D6B  1               
004D6B  1               LAB_SVTB:
004D6B  1  86 64                STX     <TabSiz         ; save TAB size
004D6D  1               
004D6D  1               ; calculate tab column limit from TAB size. The <Iclim is set to the last tab
004D6D  1               ; position on a line that still has at least one whole tab width between it
004D6D  1               ; and the end of the line.
004D6D  1               
004D6D  1               WExit:
004D6D  1  A5 0F                LDA     <TWidth         ; get width
004D6F  1  F0 06                BEQ     LAB_SULP        ; branch if infinite line
004D71  1               
004D71  1  C5 64                CMP     <TabSiz         ; compare with tab size
004D73  1  B0 03                BCS     LAB_WDLP        ; branch if >= tab size
004D75  1               
004D75  1  85 64                STA     <TabSiz         ; else make tab size = terminal width
004D77  1               LAB_SULP:
004D77  1  38                   SEC                     ; set carry for subtract
004D78  1               LAB_WDLP:
004D78  1  E5 64                SBC     <TabSiz         ; subtract tab size
004D7A  1  B0 FC                BCS     LAB_WDLP        ; loop while no borrow
004D7C  1               
004D7C  1  65 64                ADC     <TabSiz         ; add tab size back
004D7E  1  18                   CLC                     ; clear carry for add
004D7F  1  65 64                ADC     <TabSiz         ; add tab size back again
004D81  1  85 10                STA     <Iclim          ; save for now
004D83  1  A5 0F                LDA     <TWidth         ; get width back
004D85  1  38                   SEC                     ; set carry for subtract
004D86  1  E5 10                SBC     <Iclim          ; subtract remainder
004D88  1  85 10                STA     <Iclim          ; save tab column limit
004D8A  1               LAB_NOSQ:
004D8A  1  60                   RTS
004D8B  1               
004D8B  1               TabErr:
004D8B  1  4C 73 37             JMP     LAB_FCER        ; do function call error then warm start
004D8E  1               
004D8E  1               ; perform SQR()
004D8E  1               
004D8E  1               LAB_SQR:
004D8E  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004D90  1  30 F9                BMI     TabErr          ; if -ve do function call error
004D92  1               
004D92  1  A5 AC                LDA     <FAC1_e         ; get exponent
004D94  1  F0 F4                BEQ     LAB_NOSQ        ; if zero just return
004D96  1               
004D96  1               ; else do root
004D96  1  20 55 45             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004D99  1  A9 00                LDA     #$00            ; clear A
004D9B  1               
004D9B  1  85 77                STA     <FACt_3         ; clear remainder
004D9D  1  85 76                STA     <FACt_2         ; ..
004D9F  1  85 75                STA     <FACt_1         ; ..
004DA1  1  85 78                STA     <TempB          ; ..
004DA3  1               
004DA3  1  85 AF                STA     <FAC1_3         ; clear root
004DA5  1  85 AE                STA     <FAC1_2         ; ..
004DA7  1  85 AD                STA     <FAC1_1         ; ..
004DA9  1               
004DA9  1  A2 18                LDX     #$18            ; 24 pairs of bits to do
004DAB  1  A5 B3                LDA     <FAC2_e         ; get exponent
004DAD  1  4A                   LSR     A               ; check odd/even
004DAE  1  B0 0E                BCS     LAB_SQE2        ; if odd only 1 shift first time
004DB0  1               
004DB0  1               LAB_SQE1:
004DB0  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004DB2  1  26 B5                ROL     <FAC2_2         ; ..
004DB4  1  26 B4                ROL     <FAC2_1         ; ..
004DB6  1  26 77                ROL     <FACt_3         ; .. into remainder
004DB8  1  26 76                ROL     <FACt_2         ; ..
004DBA  1  26 75                ROL     <FACt_1         ; ..
004DBC  1  26 78                ROL     <TempB          ; .. never overflows
004DBE  1               LAB_SQE2:
004DBE  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004DC0  1  26 B5                ROL     <FAC2_2         ; ..
004DC2  1  26 B4                ROL     <FAC2_1         ; ..
004DC4  1  26 77                ROL     <FACt_3         ; .. into remainder
004DC6  1  26 76                ROL     <FACt_2         ; ..
004DC8  1  26 75                ROL     <FACt_1         ; ..
004DCA  1  26 78                ROL     <TempB          ; .. never overflows
004DCC  1               
004DCC  1  06 AF                ASL     <FAC1_3         ; root = root * 2
004DCE  1  26 AE                ROL     <FAC1_2         ; ..
004DD0  1  26 AD                ROL     <FAC1_1         ; .. never overflows
004DD2  1               
004DD2  1  A5 AF                LDA     <FAC1_3         ; get root low byte
004DD4  1  2A                   ROL     A               ; *2
004DD5  1  85 5B                STA     <Temp3          ; save partial low byte
004DD7  1  A5 AE                LDA     <FAC1_2         ; get root low mid byte
004DD9  1  2A                   ROL     A               ; *2
004DDA  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004DDC  1  A5 AD                LDA     <FAC1_1         ; get root high mid byte
004DDE  1  2A                   ROL     A               ; *2
004DDF  1  85 5D                STA     <Temp3+2        ; save partial high mid byte
004DE1  1  A9 00                LDA     #$00            ; get root high byte (always $00)
004DE3  1  2A                   ROL     A               ; *2
004DE4  1  85 5E                STA     <Temp3+3        ; save partial high byte
004DE6  1               
004DE6  1               ; carry clear for subtract +1
004DE6  1  A5 77                LDA     <FACt_3         ; get remainder low byte
004DE8  1  E5 5B                SBC     <Temp3          ; subtract partial low byte
004DEA  1  85 5B                STA     <Temp3          ; save partial low byte
004DEC  1               
004DEC  1  A5 76                LDA     <FACt_2         ; get remainder low mid byte
004DEE  1  E5 5C                SBC     <Temp3+1        ; subtract partial low mid byte
004DF0  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004DF2  1               
004DF2  1  A5 75                LDA     <FACt_1         ; get remainder high mid byte
004DF4  1  E5 5D                SBC     <Temp3+2        ; subtract partial high mid byte
004DF6  1  A8                   TAY                     ; copy partial high mid byte
004DF7  1               
004DF7  1  A5 78                LDA     <TempB          ; get remainder high byte
004DF9  1  E5 5E                SBC     <Temp3+3        ; subtract partial high byte
004DFB  1  90 0E                BCC     LAB_SQNS        ; skip sub if remainder smaller
004DFD  1               
004DFD  1  85 78                STA     <TempB          ; save remainder high byte
004DFF  1               
004DFF  1  84 75                STY     <FACt_1         ; save remainder high mid byte
004E01  1               
004E01  1  A5 5C                LDA     <Temp3+1        ; get remainder low mid byte
004E03  1  85 76                STA     <FACt_2         ; save remainder low mid byte
004E05  1               
004E05  1  A5 5B                LDA     <Temp3          ; get partial low byte
004E07  1  85 77                STA     <FACt_3         ; save remainder low byte
004E09  1               
004E09  1  E6 AF                INC     <FAC1_3         ; increment root low byte (never any rollover)
004E0B  1               LAB_SQNS:
004E0B  1  CA                   DEX                     ; decrement bit pair count
004E0C  1  D0 A2                BNE     LAB_SQE1        ; loop if not all done
004E0E  1               LAB_SQNSA:
004E0E  1  38                   SEC                     ; set carry for subtract
004E0F  1  A5 B3                LDA     <FAC2_e         ; get exponent
004E11  1  E9 80                SBC     #$80            ; normalise
004E13  1  6A                   ROR     A               ; /2 and re-bias to $80
004E14  1  69 00                ADC     #$00            ; add bit zero back in (allow for half shift)
004E16  1  85 AC                STA     <FAC1_e         ; save it
004E18  1  4C CF 41             JMP     LAB_24D5        ; normalise FAC1 and return
004E1B  1               
004E1B  1               ; perform VARPTR()
004E1B  1               
004E1B  1               LAB_VARPTR:
004E1B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004E1F  1  20 EB 35             JSR     LAB_GVAR        ; get var address
004E22  1  20 FF 33             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
004E25  1  A4 95                LDY     <Cvaral         ; get var address low byte
004E27  1  A5 96                LDA     <Cvarah         ; get var address high byte
004E29  1  4C A9 38             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
004E2C  1               
004E2C  1               ; perform PI
004E2C  1               
004E2C  1               LAB_PI:
004E2C  1  A9 87                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
004E2E  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
004E30  1  20 68 44             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004E33  1  C6 AC                DEC     <FAC1_e         ; make result = PI
004E35  1  60                   RTS
004E36  1               
004E36  1               
004E36  1               
004E36  1               
004E36  1               
004E36  1               AA_end_basic:
004E36  1               ENDOFBASIC:
004E36  1  44 45 52 49          .BYTE   "DERIVED FROM ehBASIC"
004E3A  1  56 45 44 20  
004E3E  1  46 52 4F 4D  
004E4A  1               
004E4A  1               
004E4A  1               
004E4A  1               
004E4A  1                       .END

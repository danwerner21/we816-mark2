ca65 V2.18 - Ubuntu 2.19-1
Main file   : dbasic816.asm
Current file: dbasic816.asm

000000r 1               .P816
000000r 1               .A8
000000r 1               .I8
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.23
000000r 1               ; THIS WORK IS DERIVED FROM ehBASIC BY LEE DAVIDSON
000000r 1               ;
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixedf
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 1               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 1               ; 2.22	fixed RND() breaking the get byte routine
000000r 1               ; 2.30  CONVERT TO 65816 ADDRESS SPACE
000000r 1               
000000r 1               
000000r 1               
000000r 1                       .SEGMENT "HIGHMEM"
000000r 1               ;.ORG    0FF1000H
000000r 1                       .ORG    1000H
001000  1               BASICORG:
001000  1  4C 20 25             JMP     BASICBEGIN
001003  1               ;____________________________________________________________________________________________
001003  1               ;
001003  1               ; MACROS
001003  1               
001003  1                       .INCLUDE "macros.asm"
001003  2               ;___________________________________________________________________________________________________
001003  2               ;
001003  2               ;	USEFUL 65186 MACROS
001003  2               ;__________________________________________________________________________________________________
001003  2               
001003  2               .macro       STORECONTEXT             ; Store Complete Context at the beginning of a Sub
001003  2                       PHX
001003  2                       phy
001003  2                       pha
001003  2                       php
001003  2               .endmacro
001003  2               
001003  2               .macro       RESTORECONTEXT                 ; Restore Complete Context at the end of a Sub
001003  2                       plp
001003  2                       pla
001003  2                       ply
001003  2                       plx
001003  2               .endmacro
001003  2               
001003  2               .macro       INDEX16                         ; Set 16bit Index Registers
001003  2               		REP #$10 		; 16 bit Index registers
001003  2               		.I16
001003  2               .endmacro
001003  2               .macro       INDEX8                          ; Set 8bit Index Registers
001003  2               		SEP #$10 		; 8 bit Index registers
001003  2               		.I8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR16                  ; Set 16bit Index Registers
001003  2               		REP #$20 		; 16 bit Index registers
001003  2               		.A16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR8                   ; Set 8bit Index Registers
001003  2               		SEP #$20 		; 8 bit Index registers
001003  2               		.A8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX16             ; Set 16bit Index Registers
001003  2               		REP #$30 		; 16 bit Index registers
001003  2               		.A16
001003  2                               .I16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX8              ; Set 8bit Index Registers
001003  2               		SEP #$30 		; 8 bit Index registers
001003  2               		.A8
001003  2                               .I8
001003  2               .endmacro
001003  2               
001003  2               .macro       LDAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               	LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLB
001003  2                   LDA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       STAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   PHA
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLA
001003  2                   PLX
001003  2               	STA	(<PARM1),Y		;
001003  2               	PLB
001003  2                   STA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       SETBANK PARM1
001003  2                   PHX
001003  2               	LDX #PARM1
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               .endmacro
001003  2               
001003  2               
001003  2               .macro       FETCHINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2               .endmacro
001003  2               
001003  2               .macro       CMPINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CMP	<TMPFLG		    ;
001003  2               .endmacro
001003  2               
001003  2               .macro       ADCINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CLC
001003  2                   ADC	<TMPFLG 		;
001003  2               .endmacro
001003  2               
001003  2               .macro       LBEQ PARM1
001003  2                    bne *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBNE PARM1
001003  2                    beq *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCC PARM1
001003  2                    bcc *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCS PARM1
001003  2                    bcs *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  1               
001003  1               ; ZERO PAGE DEFINITIONS
001003  1                       .INCLUDE "zeropage.asm"
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; ZERO PAGE DEFINITIONS
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_WARM        = $00           ; BASIC warm start entry point
001003  2               Wrmjpl          = LAB_WARM+1    ; BASIC warm start vector jump low byte
001003  2               Wrmjph          = LAB_WARM+2    ; BASIC warm start vector jump high byte
001003  2               TMPFLG          = $04
001003  2               VIDEOMODE       = $06
001003  2               LOCALWORK       = $07           ; word (2 bytes)
001003  2               Usrjmp          = $0A           ; USR function JMP address
001003  2               Usrjpl          = <Usrjmp+1     ; USR function JMP vector low byte
001003  2               Usrjph          = <Usrjmp+2     ; USR function JMP vector high byte
001003  2               Nullct          = $0D           ; nulls output after each line
001003  2               TPos            = $0E           ; BASIC terminal position byte
001003  2               TWidth          = $0F           ; BASIC terminal width byte
001003  2               Iclim           = $10           ; input column limit
001003  2               Itempl          = $11           ; temporary integer low byte
001003  2               Itemph          = <Itempl+1     ; temporary integer high byte
001003  2               
001003  2               nums_1          = <Itempl       ; number to bin/hex string convert MSB
001003  2               nums_2          = <nums_1+1     ; number to bin/hex string convert
001003  2               nums_3          = <nums_1+2     ; number to bin/hex string convert LSB
001003  2               
001003  2               Srchc           = $5B           ; search character
001003  2               Temp3           = <Srchc        ; temp byte used in number routines
001003  2               Scnquo          = $5C           ; scan-between-quotes flag
001003  2               Asrch           = <Scnquo       ; alt search character
001003  2               
001003  2               XOAw_l          = <Srchc        ; eXclusive OR, OR and AND word low byte
001003  2               XOAw_h          = <Scnquo       ; eXclusive OR, OR and AND word high byte
001003  2               
001003  2               Ibptr           = $5D           ; input buffer pointer
001003  2               Dimcnt          = <Ibptr        ; # of dimensions
001003  2               Tindx           = <Ibptr        ; token index
001003  2               
001003  2               Defdim          = $5E           ; default DIM flag
001003  2               Dtypef          = $5F           ; data type flag, $FF=string, $00=numeric
001003  2               Oquote          = $60           ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
001003  2               Gclctd          = $60           ; garbage collected flag
001003  2               Sufnxf          = $61           ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
001003  2               Imode           = $62           ; input mode flag, $00=INPUT, $80=READ
001003  2               Cflag           = $63           ; comparison evaluation flag
001003  2               
001003  2               TabSiz          = $64           ; TAB step size (was input flag)
001003  2               
001003  2               next_s          = $65           ; next descriptor stack address
001003  2               ; these two bytes form a word pointer to the item
001003  2               ; currently on top of the descriptor stack
001003  2               last_sl         = $66           ; last descriptor stack address low byte
001003  2               last_sh         = $67           ; last descriptor stack address high byte (always $00)
001003  2               
001003  2               des_sk          = $68           ; descriptor stack start address (temp strings)
001003  2               
001003  2               ;			= $70		; End of descriptor stack
001003  2               
001003  2               ut1_pl          = $71           ; utility pointer 1 low byte
001003  2               ut1_ph          = <ut1_pl+1     ; utility pointer 1 high byte
001003  2               ut2_pl          = $73           ; utility pointer 2 low byte
001003  2               ut2_ph          = <ut2_pl+1     ; utility pointer 2 high byte
001003  2               
001003  2               Temp_2          = <ut1_pl       ; temp byte for block move
001003  2               
001003  2               FACt_1          = $75           ; FAC temp mantissa1
001003  2               FACt_2          = <FACt_1+1     ; FAC temp mantissa2
001003  2               FACt_3          = <FACt_2+1     ; FAC temp mantissa3
001003  2               
001003  2               dims_l          = <FACt_2       ; array dimension size low byte
001003  2               dims_h          = <FACt_3       ; array dimension size high byte
001003  2               
001003  2               TempB           = $78           ; temp page 0 byte
001003  2               
001003  2               Smeml           = $79           ; start of mem low byte		(Start-of-Basic)
001003  2               Smemh           = <Smeml+1      ; start of mem high byte	(Start-of-Basic)
001003  2               Svarl           = $7B           ; start of vars low byte	(Start-of-Variables)
001003  2               Svarh           = <Svarl+1      ; start of vars high byte	(Start-of-Variables)
001003  2               Sarryl          = $7D           ; var mem end low byte		(Start-of-Arrays)
001003  2               Sarryh          = <Sarryl+1     ; var mem end high byte		(Start-of-Arrays)
001003  2               Earryl          = $7F           ; array mem end low byte	(End-of-Arrays)
001003  2               Earryh          = <Earryl+1     ; array mem end high byte	(End-of-Arrays)
001003  2               Sstorl          = $81           ; string storage low byte	(String storage (moving down))
001003  2               Sstorh          = <Sstorl+1     ; string storage high byte	(String storage (moving down))
001003  2               Sutill          = $83           ; string utility ptr low byte
001003  2               Sutilh          = <Sutill+1     ; string utility ptr high byte
001003  2               Ememl           = $85           ; end of mem low byte		(Limit-of-memory)
001003  2               Ememh           = <Ememl+1      ; end of mem high byte		(Limit-of-memory)
001003  2               
001003  2               Clinel          = $87           ; current line low byte		(Basic line number)
001003  2               Clineh          = <Clinel+1     ; current line high byte	(Basic line number)
001003  2               Blinel          = $89           ; break line low byte		(Previous Basic line number)
001003  2               Blineh          = <Blinel+1     ; break line high byte		(Previous Basic line number)
001003  2               
001003  2               Cpntrl          = $8B           ; continue pointer low byte
001003  2               Cpntrh          = <Cpntrl+1     ; continue pointer high byte
001003  2               
001003  2               Dlinel          = $8D           ; current DATA line low byte
001003  2               Dlineh          = <Dlinel+1     ; current DATA line high byte
001003  2               
001003  2               Dptrl           = $8F           ; DATA pointer low byte
001003  2               Dptrh           = <Dptrl+1      ; DATA pointer high byte
001003  2               
001003  2               Rdptrl          = $91           ; read pointer low byte
001003  2               Rdptrh          = <Rdptrl+1     ; read pointer high byte
001003  2               
001003  2               Varnm1          = $93           ; current var name 1st byte
001003  2               Varnm2          = <Varnm1+1     ; current var name 2nd byte
001003  2               
001003  2               Cvaral          = $95           ; current var address low byte
001003  2               Cvarah          = <Cvaral+1     ; current var address high byte
001003  2               
001003  2               Frnxtl          = $97           ; var pointer for FOR/NEXT low byte
001003  2               Frnxth          = <Frnxtl+1     ; var pointer for FOR/NEXT high byte
001003  2               
001003  2               Tidx1           = <Frnxtl       ; temp line index
001003  2               
001003  2               Lvarpl          = <Frnxtl       ; let var pointer low byte
001003  2               Lvarph          = <Frnxth       ; let var pointer high byte
001003  2               
001003  2               prstk           = $99           ; precedence stacked flag
001003  2               
001003  2               comp_f          = $9B           ; compare function flag, bits 0,1 and 2 used
001003  2               ; bit 2 set if >
001003  2               ; bit 1 set if =
001003  2               ; bit 0 set if <
001003  2               
001003  2               func_l          = $9C           ; function pointer low byte
001003  2               func_h          = <func_l+1     ; function pointer high byte
001003  2               
001003  2               garb_l          = <func_l       ; garbage collection working pointer low byte
001003  2               garb_h          = <func_h       ; garbage collection working pointer high byte
001003  2               
001003  2               des_2l          = $9E           ; string descriptor_2 pointer low byte
001003  2               des_2h          = <des_2l+1     ; string descriptor_2 pointer high byte
001003  2               
001003  2               g_step          = $A0           ; garbage collect step size
001003  2               
001003  2               Fnxjmp          = $A1           ; jump vector for functions
001003  2               Fnxjpl          = <Fnxjmp+1     ; functions jump vector low byte
001003  2               Fnxjph          = <Fnxjmp+2     ; functions jump vector high byte
001003  2               
001003  2               g_indx          = <Fnxjpl       ; garbage collect temp index
001003  2               
001003  2               FAC2_r          = $A3           ; FAC2 rounding byte
001003  2               
001003  2               Adatal          = $A4           ; array data pointer low byte
001003  2               Adatah          = <Adatal+1     ; array data pointer high  byte
001003  2               
001003  2               Nbendl          = <Adatal       ; new block end pointer low byte
001003  2               Nbendh          = <Adatah       ; new block end pointer high  byte
001003  2               
001003  2               Obendl          = $A6           ; old block end pointer low byte
001003  2               Obendh          = <Obendl+1     ; old block end pointer high  byte
001003  2               
001003  2               numexp          = $A8           ; string to float number exponent count
001003  2               expcnt          = $A9           ; string to float exponent count
001003  2               
001003  2               numbit          = <numexp       ; bit count for array element calculations
001003  2               
001003  2               numdpf          = $AA           ; string to float decimal point flag
001003  2               expneg          = $AB           ; string to float eval exponent -ve flag
001003  2               
001003  2               Astrtl          = <numdpf       ; array start pointer low byte
001003  2               Astrth          = <expneg       ; array start pointer high  byte
001003  2               
001003  2               Histrl          = <numdpf       ; highest string low byte
001003  2               Histrh          = <expneg       ; highest string high  byte
001003  2               
001003  2               Baslnl          = <numdpf       ; BASIC search line pointer low byte
001003  2               Baslnh          = <expneg       ; BASIC search line pointer high  byte
001003  2               
001003  2               Fvar_l          = <numdpf       ; find/found variable pointer low byte
001003  2               Fvar_h          = <expneg       ; find/found variable pointer high  byte
001003  2               
001003  2               Ostrtl          = <numdpf       ; old block start pointer low byte
001003  2               Ostrth          = <expneg       ; old block start pointer high  byte
001003  2               
001003  2               Vrschl          = <numdpf       ; variable search pointer low byte
001003  2               Vrschh          = <expneg       ; variable search pointer high  byte
001003  2               
001003  2               FAC1_e          = $AC           ; FAC1 exponent
001003  2               FAC1_1          = <FAC1_e+1     ; FAC1 mantissa1
001003  2               FAC1_2          = <FAC1_e+2     ; FAC1 mantissa2
001003  2               FAC1_3          = <FAC1_e+3     ; FAC1 mantissa3
001003  2               FAC1_s          = <FAC1_e+4     ; FAC1 sign (b7)
001003  2               
001003  2               str_ln          = <FAC1_e       ; string length
001003  2               str_pl          = <FAC1_1       ; string pointer low byte
001003  2               str_ph          = <FAC1_2       ; string pointer high byte
001003  2               
001003  2               des_pl          = <FAC1_2       ; string descriptor pointer low byte
001003  2               des_ph          = <FAC1_3       ; string descriptor pointer high byte
001003  2               
001003  2               mids_l          = <FAC1_3       ; MID$ string temp length byte
001003  2               
001003  2               negnum          = $B1           ; string to float eval -ve flag
001003  2               numcon          = $B1           ; series evaluation constant count
001003  2               
001003  2               FAC1_o          = $B2           ; FAC1 overflow byte
001003  2               
001003  2               FAC2_e          = $B3           ; FAC2 exponent
001003  2               FAC2_1          = <FAC2_e+1     ; FAC2 mantissa1
001003  2               FAC2_2          = <FAC2_e+2     ; FAC2 mantissa2
001003  2               FAC2_3          = <FAC2_e+3     ; FAC2 mantissa3
001003  2               FAC2_s          = <FAC2_e+4     ; FAC2 sign (b7)
001003  2               
001003  2               FAC_sc          = $B8           ; FAC sign comparison, Acc#1 vs #2
001003  2               FAC1_r          = $B9           ; FAC1 rounding byte
001003  2               
001003  2               ssptr_l         = <FAC_sc       ; string start pointer low byte
001003  2               ssptr_h         = <FAC1_r       ; string start pointer high byte
001003  2               
001003  2               sdescr          = <FAC_sc       ; string descriptor pointer
001003  2               
001003  2               csidx           = $BA           ; line crunch save index
001003  2               Asptl           = <csidx        ; array size/pointer low byte
001003  2               Aspth           = $BB           ; array size/pointer high byte
001003  2               
001003  2               Btmpl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Btmph           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Cptrl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Cptrh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Sendl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Sendh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               LAB_IGBY        = $BC           ; get next BASIC byte subroutine
001003  2               
001003  2               LAB_GBYT        = $C2           ; get current BASIC byte subroutine
001003  2               Bpntrl          = $C3           ; BASIC execute (get byte) pointer low byte
001003  2               Bpntrh          = <Bpntrl+1     ; BASIC execute (get byte) pointer high byte
001003  2               Bpntrp          = <Bpntrl+2     ; BASIC execute (get byte) pointer PAGE byte
001003  2               
001003  2               ;			= $E0		; end of get BASIC char subroutine
001003  2               
001003  2               Rbyte4          = $E1           ; extra PRNG byte
001003  2               Rbyte1          = <Rbyte4+1     ; most significant PRNG byte
001003  2               Rbyte2          = <Rbyte4+2     ; middle PRNG byte
001003  2               Rbyte3          = <Rbyte4+3     ; least significant PRNG byte
001003  2               
001003  2               NmiBase         = $E5           ; NMI handler enabled/setup/triggered flags
001003  2               ; bit	function
001003  2               ; ===	========
001003  2               ; 7	interrupt enabled
001003  2               ; 6	interrupt setup
001003  2               ; 5	interrupt happened
001003  2               ;			= $E6		; NMI handler addr low byte
001003  2               ;			= $E7		; NMI handler addr high byte
001003  2               IrqBase         = $E8           ; IRQ handler enabled/setup/triggered flags
001003  2               ;			= $E9		; IRQ handler addr low byte
001003  2               ;			= $EA		; IRQ handler addr high byte
001003  2               FCBPTR          = $EB           ; POINTER TO FCB FOR FILE OPS
001003  2               
001003  2               Decss           = $EF           ; number to decimal string start
001003  2               Decssp1         = Decss+1       ; number to decimal string start
001003  2               
001003  2               TEMPW           = $FD
001003  2               ;			= $FF		; decimal string end
001003  2               
001003  2               
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; character get subroutine for zero page
001003  2               
001003  2               ; For a 1.8432MHz 6502 including the JSR and RTS
001003  2               ; fastest (>=":")	=  29 cycles =  15.7uS
001003  2               ; slowest (<":")	=  40 cycles =  21.7uS
001003  2               ; space skip	= +21 cycles = +11.4uS
001003  2               ; inc across page	=  +4 cycles =  +2.2uS
001003  2               
001003  2               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
001003  2               ; block is copied to it's destination, any non zero page address will do at assembly
001003  2               ; time, to assemble a three byte instruction.
001003  2               
001003  2               ; page 0 initialisation table from $BC
001003  2               ; increment and scan memory
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_2CEE:
001003  2  E6 C3                INC     <Bpntrl         ; increment BASIC execute pointer low byte
001005  2  D0 02                BNE     LAB_2CF4        ; branch if no carry
001007  2               ; else
001007  2  E6 C4                INC     <Bpntrh         ; increment BASIC execute pointer high byte
001009  2               
001009  2               ; page 0 initialisation table from $C2
001009  2               ; scan memory
001009  2               LAB_2CF4:
001009  2  AF FF FF FF          LDA     $FFFFFF         ; get byte to scan (addr set by call routine)
00100D  2  C9 BE                CMP     #TK_ELSE        ; compare with the token for ELSE
00100F  2  F0 0E                BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
001011  2               
001011  2  C9 3A                CMP     #':'            ; compare with ":"
001013  2  B0 0A                BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
001015  2               
001015  2  C9 20                CMP     #' '            ; compare with " "
001017  2  F0 EA                BEQ     LAB_2CEE        ; if " " go do next
001019  2               
001019  2  38                   SEC                     ; set carry for SBC
00101A  2  E9 30                SBC     #'0'            ; subtract "0"
00101C  2  38                   SEC                     ; set carry for SBC
00101D  2  E9 D0                SBC     #$D0            ; subtract -"0"
00101F  2               ; clear carry if byte = "0"-"9"
00101F  2               LAB_2D05:
00101F  2  6B                   RTL
001020  2               LAB_2CEE_END:
001020  2               ;____________________________________________________________________________________________
001020  2               ;
001020  2               ; page zero initialisation table $00-$12 inclusive
001020  2               ;____________________________________________________________________________________________
001020  2               
001020  2               StrTab:
001020  2  4C                   .BYTE   $4C             ; JMP opcode
001021  2  40 25                .WORD   LAB_COLD        ; initial warm start vector (cold start)
001023  2               
001023  2  00                   .BYTE   $00             ; these bytes are not used by BASIC
001024  2  00 00                .WORD   $0000           ;
001026  2  00 00                .WORD   $0000           ;
001028  2  00 00                .WORD   $0000           ;
00102A  2               
00102A  2  4C                   .BYTE   $4C             ; JMP opcode
00102B  2  43 36                .WORD   LAB_FCER        ; initial user function vector ("Function call" error)
00102D  2  00                   .BYTE   $00             ; default NULL count
00102E  2  00                   .BYTE   $00             ; clear terminal position
00102F  2  00                   .BYTE   $00             ; default terminal width byte
001030  2  F2                   .BYTE   $F2             ; default limit for TAB = 14
001031  2  00 22                .WORD   Ram_base        ; start of user RAM
001033  2               EndTab:
001033  2               
001033  2               ;  BASIC start-up code
001033  2               
001033  2               PG2_TABS:
001033  2  00                   .BYTE   $00             ; ctrl-c flag		-	$00 = enabled
001034  2  03                   .BYTE   $03             ; ctrl-c byte		-	GET needs this
001035  2  00                   .BYTE   $00             ; ctrl-c byte timeout	-	GET needs this
001036  2  F2 4A                .WORD   CTRLC           ; ctrl c check vector
001038  2               PG2_TABE:
001038  2               
001038  1               
001038  1               ; BASIC TOKENS
001038  1                       .INCLUDE "tokens.asm"
001038  2               ; token values needed for BASIC
001038  2               
001038  2               ; primary command tokens (can start a statement)
001038  2               
001038  2               TK_END          = $80           ; END
001038  2               TK_FOR          = TK_END+1      ; FOR token
001038  2               TK_NEXT         = TK_FOR+1      ; NEXT token
001038  2               TK_DATA         = TK_NEXT+1     ; DATA token
001038  2               TK_DIRECTORY    = TK_DATA+1     ; DISKSTATUS token
001038  2               TK_DISKSTATUS   = TK_DIRECTORY+1; DIRECTORY token
001038  2               TK_INPUT        = TK_DISKSTATUS+1; INPUT token
001038  2               TK_DIM          = TK_INPUT+1    ; DIM token
001038  2               TK_READ         = TK_DIM+1      ; READ token
001038  2               TK_LET          = TK_READ+1     ; LET token
001038  2               TK_DEC          = TK_LET+1      ; DEC token
001038  2               TK_GOTO         = TK_DEC+1      ; GOTO token
001038  2               TK_RUN          = TK_GOTO+1     ; RUN token
001038  2               TK_IF           = TK_RUN+1      ; IF token
001038  2               TK_RESTORE      = TK_IF+1       ; RESTORE token
001038  2               TK_GOSUB        = TK_RESTORE+1  ; GOSUB token
001038  2               TK_RETURN       = TK_GOSUB+1    ; RETURN token
001038  2               TK_REM          = TK_RETURN+1   ; REM token
001038  2               TK_STOP         = TK_REM+1      ; STOP token
001038  2               TK_ON           = TK_STOP+1     ; ON token
001038  2               TK_NULL         = TK_ON+1       ; NULL token
001038  2               TK_INC          = TK_NULL+1     ; INC token
001038  2               TK_WAIT         = TK_INC+1      ; WAIT token
001038  2               TK_LOAD         = TK_WAIT+1     ; LOAD token
001038  2               TK_SAVE         = TK_LOAD+1     ; SAVE token
001038  2               TK_DEF          = TK_SAVE+1     ; DEF token
001038  2               TK_POKE         = TK_DEF+1      ; POKE token
001038  2               TK_CALL         = TK_POKE+1     ; CALL token
001038  2               TK_DO           = TK_CALL+1     ; DO token
001038  2               TK_LOOP         = TK_DO+1       ; LOOP token
001038  2               TK_PRINT        = TK_LOOP+1     ; PRINT token
001038  2               TK_CONT         = TK_PRINT+1    ; CONT token
001038  2               TK_LIST         = TK_CONT+1     ; LIST token
001038  2               TK_CLEAR        = TK_LIST+1     ; CLEAR token
001038  2               TK_NEW          = TK_CLEAR+1    ; NEW token
001038  2               TK_WIDTH        = TK_NEW+1      ; WIDTH token
001038  2               TK_GET          = TK_WIDTH+1    ; GET token
001038  2               TK_SWAP         = TK_GET+1      ; SWAP token
001038  2               TK_BITSET       = TK_SWAP+1     ; BITSET token
001038  2               TK_BITCLR       = TK_BITSET+1   ; BITCLR token
001038  2               TK_MONITOR      = TK_BITCLR+1   ; MONITOR token
001038  2               TK_OPEN         = TK_MONITOR+1  ; OPEN token
001038  2               TK_CLOSE        = TK_OPEN+1     ; CLOSE token
001038  2               TK_IECINPUT     = TK_CLOSE+1    ; IECINPUT token
001038  2               TK_IECOUTPUT    = TK_IECINPUT+1 ; IECOUTPUT token
001038  2               TK_PUTN         = TK_IECOUTPUT+1; PUTN token
001038  2               TK_GETN         = TK_PUTN+1     ; GETN token
001038  2               TK_DISKCMD      = TK_GETN+1     ; DISKCMD token
001038  2               TK_SCNCLR       = TK_DISKCMD+1  ;SCNCLR token
001038  2               TK_LOCATE       = TK_SCNCLR+1   ;LOCATE token
001038  2               TK_COLOR        = TK_LOCATE+1   ;COLOR token
001038  2               TK_SPOKE        = TK_COLOR+1    ;SPOKE token
001038  2               TK_SCREEN       = TK_SPOKE+1    ;SCREEN token
001038  2               TK_PLOT         = TK_SCREEN+1   ;PLOT token
001038  2               TK_PATTERN      = TK_PLOT+1     ;PATTERN token
001038  2               TK_SYS          = TK_PATTERN+1  ;SYS token
001038  2               TK_SOUND        = TK_SYS+1      ;SOUND token
001038  2               TK_NOISE        = TK_SOUND+1    ;NOISE token
001038  2               TK_TONE         = TK_NOISE+1    ;TONE token
001038  2               TK_VOLUME       = TK_TONE+1     ;VOLUME token
001038  2               TK_VOICE        = TK_VOLUME+1   ;VOICE token
001038  2               
001038  2               ; secondary command tokens, can't start a statement
001038  2               
001038  2               TK_TAB          = TK_VOICE+1    ; TAB token
001038  2               TK_ELSE         = TK_TAB+1      ; ELSE token
001038  2               TK_TO           = TK_ELSE+1     ; TO token
001038  2               TK_FN           = TK_TO+1       ; FN token
001038  2               TK_SPC          = TK_FN+1       ; SPC token
001038  2               TK_THEN         = TK_SPC+1      ; THEN token
001038  2               TK_NOT          = TK_THEN+1     ; NOT token
001038  2               TK_STEP         = TK_NOT+1      ; STEP token
001038  2               TK_UNTIL        = TK_STEP+1     ; UNTIL token
001038  2               TK_WHILE        = TK_UNTIL+1    ; WHILE token
001038  2               TK_OFF          = TK_WHILE+1    ; OFF token
001038  2               
001038  2               ; opperator tokens
001038  2               
001038  2               TK_PLUS         = TK_OFF+1      ; + token
001038  2               TK_MINUS        = TK_PLUS+1     ; - token
001038  2               TK_MUL          = TK_MINUS+1    ; * token
001038  2               TK_DIV          = TK_MUL+1      ; / token
001038  2               TK_POWER        = TK_DIV+1      ; ^ token
001038  2               TK_AND          = TK_POWER+1    ; AND token
001038  2               TK_EOR          = TK_AND+1      ; EOR token
001038  2               TK_OR           = TK_EOR+1      ; OR token
001038  2               TK_RSHIFT       = TK_OR+1       ; RSHIFT token
001038  2               TK_LSHIFT       = TK_RSHIFT+1   ; LSHIFT token
001038  2               TK_GT           = TK_LSHIFT+1   ; > token
001038  2               TK_EQUAL        = TK_GT+1       ; = token
001038  2               TK_LT           = TK_EQUAL+1    ; < token
001038  2               
001038  2               ; functions tokens
001038  2               
001038  2               TK_SGN          = TK_LT+1       ; SGN token
001038  2               TK_INT          = TK_SGN+1      ; INT token
001038  2               TK_ABS          = TK_INT+1      ; ABS token
001038  2               TK_USR          = TK_ABS+1      ; USR token
001038  2               TK_FRE          = TK_USR+1      ; FRE token
001038  2               TK_POS          = TK_FRE+1      ; POS token
001038  2               TK_SQR          = TK_POS+1      ; SQR token
001038  2               TK_RND          = TK_SQR+1      ; RND token
001038  2               TK_LOG          = TK_RND+1      ; LOG token
001038  2               TK_EXP          = TK_LOG+1      ; EXP token
001038  2               TK_COS          = TK_EXP+1      ; COS token
001038  2               TK_SIN          = TK_COS+1      ; SIN token
001038  2               TK_TAN          = TK_SIN+1      ; TAN token
001038  2               TK_ATN          = TK_TAN+1      ; ATN token
001038  2               TK_PEEK         = TK_ATN+1      ; PEEK token
001038  2               TK_SPEEK        = TK_PEEK+1     ;SPEEK token
001038  2               TK_SADD         = TK_SPEEK+1    ; SADD token
001038  2               TK_LEN          = TK_SADD+1     ; LEN token
001038  2               TK_STRS         = TK_LEN+1      ; STR$ token
001038  2               TK_VAL          = TK_STRS+1     ; VAL token
001038  2               TK_ASC          = TK_VAL+1      ; ASC token
001038  2               TK_UCASES       = TK_ASC+1      ; UCASE$ token
001038  2               TK_LCASES       = TK_UCASES+1   ; LCASE$ token
001038  2               TK_CHRS         = TK_LCASES+1   ; CHR$ token
001038  2               TK_HEXS         = TK_CHRS+1     ; HEX$ token
001038  2               TK_BINS         = TK_HEXS+1     ; BIN$ token
001038  2               TK_BITTST       = TK_BINS+1     ; BITTST token
001038  2               TK_MAX          = TK_BITTST+1   ; MAX token
001038  2               TK_MIN          = TK_MAX+1      ; MIN token
001038  2               TK_PI           = TK_MIN+1      ; PI token
001038  2               TK_IECST        = TK_PI+1       ; IECST token
001038  2               TK_VPTR         = TK_IECST+1    ; VARPTR token
001038  2               TK_LEFTS        = TK_VPTR+1     ; LEFT$ token
001038  2               TK_RIGHTS       = TK_LEFTS+1    ; RIGHT$ token
001038  2               TK_MIDS         = TK_RIGHTS+1   ; MID$ token
001038  2               TK_CON          = TK_MIDS+1     ; CON token
001038  2               
001038  2               
001038  2               
001038  2               
001038  2               LAB_CTBL:
001038  2  9E 2A                .WORD   LAB_END-1       ; END
00103A  2  D6 29                .WORD   LAB_FOR-1       ; FOR
00103C  2  28 31                .WORD   LAB_NEXT-1      ; NEXT
00103E  2  16 2C                .WORD   LAB_DATA-1      ; DATA
001040  2  37 1A                .WORD   V_DIR-1         ; DIRECTORY
001042  2  BC 19                .WORD   V_ERR-1         ; DISKSTATUS
001044  2  C8 2F                .WORD   LAB_INPUT-1     ; INPUT
001046  2  6E 34                .WORD   LAB_DIM-1       ; DIM
001048  2  E1 2F                .WORD   LAB_READ-1      ; READ
00104A  2  3B 2D                .WORD   LAB_LET-1       ; LET
00104C  2  0B 2D                .WORD   LAB_DEC-1       ; DEC			new command
00104E  2  70 2B                .WORD   LAB_GOTO-1      ; GOTO
001050  2  2D 2B                .WORD   LAB_RUN-1       ; RUN
001052  2  44 2C                .WORD   LAB_IF-1        ; IF
001054  2  C5 2A                .WORD   LAB_RESTORE-1   ; RESTORE		modified command
001056  2  52 2B                .WORD   LAB_GOSUB-1     ; GOSUB
001058  2  01 2C                .WORD   LAB_RETURN-1    ; RETURN
00105A  2  AF 2C                .WORD   LAB_REM-1       ; REM
00105C  2  9C 2A                .WORD   LAB_STOP-1      ; STOP
00105E  2  B8 2C                .WORD   LAB_ON-1        ; ON			modified command
001060  2  03 2B                .WORD   LAB_NULL-1      ; NULL		modified command
001062  2  0E 2D                .WORD   LAB_INC-1       ; INC			new command
001064  2  D8 3F                .WORD   LAB_WAIT-1      ; WAIT
001066  2  2A 19                .WORD   V_LOAD-1        ; LOAD
001068  2  98 18                .WORD   V_SAVE-1        ; SAVE
00106A  2  96 37                .WORD   LAB_DEF-1       ; DEF
00106C  2  28 3F                .WORD   LAB_POKE-1      ; POKE
00106E  2  C4 3F                .WORD   LAB_CALL-1      ; CALL		new command
001070  2  37 2B                .WORD   LAB_DO-1        ; DO			new command
001072  2  A2 2B                .WORD   LAB_LOOP-1      ; LOOP		new command
001074  2  A5 2E                .WORD   LAB_PRINT-1     ; PRINT
001076  2  09 2B                .WORD   LAB_CONT-1      ; CONT
001078  2  16 29                .WORD   LAB_LIST-1      ; LIST
00107A  2  13 29                .WORD   LAB_CLEAR-1     ; CLEAR
00107C  2  C3 28                .WORD   LAB_NEW-1       ; NEW
00107E  2  06 4C                .WORD   LAB_WDTH-1      ; WIDTH		new command
001080  2  5F 2E                .WORD   LAB_GET-1       ; GET			new command
001082  2  4C 3F                .WORD   LAB_SWAP-1      ; SWAP		new command
001084  2  89 49                .WORD   LAB_BITSET-1    ; BITSET		new command
001086  2  9D 49                .WORD   LAB_BITCLR-1    ; BITCLR		new command
001088  2  0B 25                .WORD   LAB_MONITOR-1   ; MONITOR		MONITOR command
00108A  2  D2 1B                .WORD   V_OPEN-1        ; OPEN			OPEN command
00108C  2  55 1C                .WORD   V_CLOSE-1       ; CLOSE			CLOSE command
00108E  2  66 1C                .WORD   V_IECINPUT-1    ; IECINPUT		IECINPUT command
001090  2  7C 1C                .WORD   V_IECOUTPUT-1   ; IECOUTPUT		IECOUTPUT command
001092  2  92 1C                .WORD   V_PUTN-1        ; PUTN			PUTN command
001094  2  FE 1C                .WORD   V_GETN-1        ; GETN			GETN command
001096  2  0E 1B                .WORD   V_DISKCMD-1     ; DISKCMD		DISKCMD COMMAND
001098  2  4B 1D                .WORD   V_SCNCLR-1      ; SCNCLR		SCNCLR COMMAND
00109A  2  58 1D                .WORD   V_LOCATE-1      ; LOCATE		LOCATE COMMAND
00109C  2  70 1D                .WORD   V_COLOR-1       ; COLOR			COLOR COMMAND
00109E  2  A8 1D                .WORD   V_SPOKE-1       ; SPOKE			SPOKE COMMAND
0010A0  2  B7 1D                .WORD   V_SCREEN-1      ; SCREEN		SCREEN COMMAND
0010A2  2  24 1F                .WORD   V_PLOT-1        ; PLOT			PLOT COMMAND
0010A4  2  81 21                .WORD   V_PATTERN-1     ; PATTERN		PATTERN COMMAND
0010A6  2  39 3F                .WORD   LAB_SYS-1       ; SYS			SYS COMMAND
0010A8  2  82 21                .WORD   V_SOUND-1       ; SOUND			SOUND COMMAND
0010AA  2  D9 21                .WORD   V_NOISE-1       ; NOISE			NOISE COMMAND
0010AC  2  18 22                .WORD   V_TONE-1        ; TONE			TONE COMMAND
0010AE  2  A2 21                .WORD   V_VOLUME-1      ; VOLUME		VOLUME COMMAND
0010B0  2  B7 21                .WORD   V_VOICE-1       ; VOICE			VOICE COMMAND
0010B2  2               ; function pre process routine table
0010B2  2               
0010B2  2               LAB_FTPL:
0010B2  2               LAB_FTPM        = LAB_FTPL+$01
0010B2  2  46 33                .WORD   LAB_PPFN-1      ; SGN(n)	process numeric expression in ()
0010B4  2  46 33                .WORD   LAB_PPFN-1      ; INT(n)		"
0010B6  2  46 33                .WORD   LAB_PPFN-1      ; ABS(n)		"
0010B8  2  C5 31                .WORD   LAB_EVEZ-1      ; USR(x)	process any expression
0010BA  2  CB 32                .WORD   LAB_1BF7-1      ; FRE(x)		"
0010BC  2  CB 32                .WORD   LAB_1BF7-1      ; POS(x)		"
0010BE  2  46 33                .WORD   LAB_PPFN-1      ; SQR(n)	process numeric expression in ()
0010C0  2  46 33                .WORD   LAB_PPFN-1      ; RND(n)		"
0010C2  2  46 33                .WORD   LAB_PPFN-1      ; LOG(n)		"
0010C4  2  46 33                .WORD   LAB_PPFN-1      ; EXP(n)		"
0010C6  2  46 33                .WORD   LAB_PPFN-1      ; COS(n)		"
0010C8  2  46 33                .WORD   LAB_PPFN-1      ; SIN(n)		"
0010CA  2  46 33                .WORD   LAB_PPFN-1      ; TAN(n)		"
0010CC  2  46 33                .WORD   LAB_PPFN-1      ; ATN(n)		"
0010CE  2  46 33                .WORD   LAB_PPFN-1      ; PEEK(n)		"
0010D0  2  46 33                .WORD   LAB_PPFN-1      ; SPEEK(N)		"
0010D2  2  00 00                .WORD   $0000           ; SADD()	none
0010D4  2  40 33                .WORD   LAB_PPFS-1      ; LEN($)	process string expression in ()
0010D6  2  46 33                .WORD   LAB_PPFN-1      ; STR$(n)	process numeric expression in ()
0010D8  2  40 33                .WORD   LAB_PPFS-1      ; VAL($)	process string expression in ()
0010DA  2  40 33                .WORD   LAB_PPFS-1      ; ASC($)		"
0010DC  2  40 33                .WORD   LAB_PPFS-1      ; UCASE$($)		"
0010DE  2  40 33                .WORD   LAB_PPFS-1      ; LCASE$($)		"
0010E0  2  46 33                .WORD   LAB_PPFN-1      ; CHR$(n)	process numeric expression in ()
0010E2  2  6F 33                .WORD   LAB_BHSS-1      ; HEX$(n)		"
0010E4  2  6F 33                .WORD   LAB_BHSS-1      ; BIN$(n)		"
0010E6  2  00 00                .WORD   $0000           ; BITTST()	none
0010E8  2  99 4B                .WORD   LAB_MMPP-1      ; MAX()	process numeric expression
0010EA  2  99 4B                .WORD   LAB_MMPP-1      ; MIN()		"
0010EC  2  4C 33                .WORD   LAB_PPBI-1      ; PI		advance pointer
0010EE  2  F7 1C                .WORD   LAB_PIECST-1    ; IECST		"
0010F0  2  00 00                .WORD   $0000           ; VARPTR()	none
0010F2  2  53 33                .WORD   LAB_LRMS-1      ; LEFT$()	process string expression
0010F4  2  53 33                .WORD   LAB_LRMS-1      ; RIGHT$()		"
0010F6  2  53 33                .WORD   LAB_LRMS-1      ; MID$()		"
0010F8  2  46 33                .WORD   LAB_PPFN-1      ; CON()		"
0010FA  2               
0010FA  2               ; action addresses for functions
0010FA  2               
0010FA  2               LAB_FTBL:
0010FA  2               LAB_FTBM        = LAB_FTBL+$01
0010FA  2  51 44                .WORD   LAB_SGN-1       ; SGN()
0010FC  2  3F 45                .WORD   LAB_INT-1       ; INT()
0010FE  2  6E 44                .WORD   LAB_ABS-1       ; ABS()
001100  2  54 49                .WORD   LAB_USR-1       ; USR()
001102  2  64 37                .WORD   LAB_FRE-1       ; FRE()
001104  2  83 37                .WORD   LAB_POS-1       ; POS()
001106  2  5D 4C                .WORD   LAB_SQR-1       ; SQR()
001108  2  A4 48                .WORD   LAB_RND-1       ; RND()		modified function
00110A  2  65 41                .WORD   LAB_LOG-1       ; LOG()
00110C  2  F2 47                .WORD   LAB_EXP-1       ; EXP()
00110E  2  D8 48                .WORD   LAB_COS-1       ; COS()
001110  2  DF 48                .WORD   LAB_SIN-1       ; SIN()
001112  2  28 49                .WORD   LAB_TAN-1       ; TAN()
001114  2  5A 49                .WORD   LAB_ATN-1       ; ATN()
001116  2  15 3F                .WORD   LAB_PEEK-1      ; PEEK()
001118  2  97 1D                .WORD   V_SPEEK-1       ; SPEEK()
00111A  2  E4 3D                .WORD   LAB_SADD-1      ; SADD()		new function
00111C  2  26 3E                .WORD   LAB_LENS-1      ; LEN()
00111E  2  D5 38                .WORD   LAB_STRS-1      ; STR$()
001120  2  6A 3E                .WORD   LAB_VAL-1       ; VAL()
001122  2  31 3E                .WORD   LAB_ASC-1       ; ASC()
001124  2  9A 3D                .WORD   LAB_UCASE-1     ; UCASE$()		new function
001126  2  4E 3D                .WORD   LAB_LCASE-1     ; LCASE$()		new function
001128  2  52 3C                .WORD   LAB_CHRS-1      ; CHR$()
00112A  2  56 4A                .WORD   LAB_HEXS-1      ; HEX$()		new function
00112C  2  DE 49                .WORD   LAB_BINS-1      ; BIN$()		new function
00112E  2  B3 49                .WORD   LAB_BTST-1      ; BITTST()		new function
001130  2  9F 4B                .WORD   LAB_MAX-1       ; MAX()		new function
001132  2  AF 4B                .WORD   LAB_MIN-1       ; MIN()		new function
001134  2  FB 4C                .WORD   LAB_PI-1        ; PI			new function
001136  2  EA 1C                .WORD   LAB_IECST-1     ; IECST		new function
001138  2  EA 4C                .WORD   LAB_VARPTR-1    ; VARPTR()		new function
00113A  2  78 3C                .WORD   LAB_LEFT-1      ; LEFT$()
00113C  2  97 3C                .WORD   LAB_RIGHT-1     ; RIGHT$()
00113E  2  F0 3C                .WORD   LAB_MIDS-1      ; MID$()
001140  2  46 22                .WORD   LAB_CON-1       ; CON()
001142  2               
001142  2               ; hierarchy and action addresses for operator
001142  2               
001142  2               LAB_OPPT:
001142  2  79                   .BYTE   $79             ; +
001143  2  25 40                .WORD   LAB_ADD-1
001145  2  79                   .BYTE   $79             ; -
001146  2  0A 40                .WORD   LAB_SUBTRACT-1
001148  2  7B                   .BYTE   $7B             ; *
001149  2  A6 41                .WORD   LAB_MULTIPLY-1
00114B  2  7B                   .BYTE   $7B             ; /
00114C  2  BE 42                .WORD   LAB_DIVIDE-1
00114E  2  7F                   .BYTE   $7F             ; ^
00114F  2  AE 47                .WORD   LAB_POWER-1
001151  2  50                   .BYTE   $50             ; AND
001152  2  BA 33                .WORD   LAB_AND-1
001154  2  46                   .BYTE   $46             ; EOR			new operator
001155  2  A0 33                .WORD   LAB_EOR-1
001157  2  46                   .BYTE   $46             ; OR
001158  2  AD 33                .WORD   LAB_OR-1
00115A  2  56                   .BYTE   $56             ; >>			new operator
00115B  2  91 34                .WORD   LAB_RSHIFT-1
00115D  2  56                   .BYTE   $56             ; <<			new operator
00115E  2  79 34                .WORD   LAB_LSHIFT-1
001160  2  7D                   .BYTE   $7D             ; >
001161  2  E7 47                .WORD   LAB_GTHAN-1
001163  2  5A                   .BYTE   $5A             ; =
001164  2  F8 32                .WORD   LAB_EQUAL-1
001166  2  64                   .BYTE   $64             ; <
001167  2  DB 33                .WORD   LAB_LTHAN-1
001169  2               
001169  2               ; keywords start with ..
001169  2               ; this is the first character table and must be in alphabetic order
001169  2               
001169  2               TAB_1STC:
001169  2  2A                   .BYTE   "*"
00116A  2  2B                   .BYTE   "+"
00116B  2  2D                   .BYTE   "-"
00116C  2  2F                   .BYTE   "/"
00116D  2  3C                   .BYTE   "<"
00116E  2  3D                   .BYTE   "="
00116F  2  3E                   .BYTE   ">"
001170  2  3F                   .BYTE   "?"
001171  2  41                   .BYTE   "A"
001172  2  42                   .BYTE   "B"
001173  2  43                   .BYTE   "C"
001174  2  44                   .BYTE   "D"
001175  2  45                   .BYTE   "E"
001176  2  46                   .BYTE   "F"
001177  2  47                   .BYTE   "G"
001178  2  48                   .BYTE   "H"
001179  2  49                   .BYTE   "I"
00117A  2  4B                   .BYTE   "K"
00117B  2  4C                   .BYTE   "L"
00117C  2  4D                   .BYTE   "M"
00117D  2  4E                   .BYTE   "N"
00117E  2  4F                   .BYTE   "O"
00117F  2  50                   .BYTE   "P"
001180  2  52                   .BYTE   "R"
001181  2  53                   .BYTE   "S"
001182  2  54                   .BYTE   "T"
001183  2  55                   .BYTE   "U"
001184  2  56                   .BYTE   "V"
001185  2  57                   .BYTE   "W"
001186  2  5E                   .BYTE   "^"
001187  2  00                   .BYTE   $00             ; table terminator
001188  2               
001188  2               ; pointers to keyword tables
001188  2               
001188  2               TAB_CHRT:
001188  2  C4 11                .WORD   TAB_STAR        ; table for "*"
00118A  2  C6 11                .WORD   TAB_PLUS        ; table for "+"
00118C  2  C8 11                .WORD   TAB_MNUS        ; table for "-"
00118E  2  CA 11                .WORD   TAB_SLAS        ; table for "/"
001190  2  CC 11                .WORD   TAB_LESS        ; table for "<"
001192  2  D0 11                .WORD   TAB_EQUL        ; table for "="
001194  2  D2 11                .WORD   TAB_MORE        ; table for ">"
001196  2  D6 11                .WORD   TAB_QEST        ; table for "?"
001198  2  D8 11                .WORD   TAB_ASCA        ; table for "A"
00119A  2  E8 11                .WORD   TAB_ASCB        ; table for "B"
00119C  2  01 12                .WORD   TAB_ASCC        ; table for "C"
00119E  2  26 12                .WORD   TAB_ASCD        ; table for "D"
0011A0  2  50 12                .WORD   TAB_ASCE        ; table for "E"
0011A2  2  5F 12                .WORD   TAB_ASCF        ; table for "F"
0011A4  2  69 12                .WORD   TAB_ASCG        ; table for "G"
0011A6  2  7A 12                .WORD   TAB_ASCH        ; table for "H"
0011A8  2  80 12                .WORD   TAB_ASCI        ; table for "I"
0011AA  2  A5 12                .WORD   TAB_ASCK        ; table for "K"
0011AC  2  A5 12                .WORD   TAB_ASCL        ; table for "L"
0011AE  2  D0 12                .WORD   TAB_ASCM        ; table for "M"
0011B0  2  E5 12                .WORD   TAB_ASCN        ; table for "N"
0011B2  2  F9 12                .WORD   TAB_ASCO        ; table for "O"
0011B4  2  05 13                .WORD   TAB_ASCP        ; table for "P"
0011B6  2  29 13                .WORD   TAB_ASCR        ; table for "R"
0011B8  2  4C 13                .WORD   TAB_ASCS        ; table for "S"
0011BA  2  96 13                .WORD   TAB_ASCT        ; table for "T"
0011BC  2  A9 13                .WORD   TAB_ASCU        ; table for "U"
0011BE  2  BA 13                .WORD   TAB_ASCV        ; table for "V"
0011C0  2  D1 13                .WORD   TAB_ASCW        ; table for "W"
0011C2  2  E0 13                .WORD   TAB_POWR        ; table for "^"
0011C4  2               
0011C4  2               ; tables for each start character, note if a longer keyword with the same start
0011C4  2               ; letters as a shorter one exists then it must come first, else the list is in
0011C4  2               ; alphabetical order as follows ..
0011C4  2               
0011C4  2               ; [keyword,token
0011C4  2               ; [keyword,token]]
0011C4  2               ; end marker (#$00)
0011C4  2               
0011C4  2               TAB_STAR:
0011C4  2  CA 00                .BYTE   TK_MUL,$00      ; *
0011C6  2               TAB_PLUS:
0011C6  2  C8 00                .BYTE   TK_PLUS,$00     ; +
0011C8  2               TAB_MNUS:
0011C8  2  C9 00                .BYTE   TK_MINUS,$00    ; -
0011CA  2               TAB_SLAS:
0011CA  2  CB 00                .BYTE   TK_DIV,$00      ; /
0011CC  2               TAB_LESS:
0011CC  2               LBB_LSHIFT:
0011CC  2  3C D1                .BYTE   "<",TK_LSHIFT   ; <<	note - "<<" must come before "<"
0011CE  2  D4                   .BYTE   TK_LT           ; <
0011CF  2  00                   .BYTE   $00
0011D0  2               TAB_EQUL:
0011D0  2  D3 00                .BYTE   TK_EQUAL,$00    ; =
0011D2  2               TAB_MORE:
0011D2  2               LBB_RSHIFT:
0011D2  2  3E D0                .BYTE   ">",TK_RSHIFT   ; >>	note - ">>" must come before ">"
0011D4  2  D2                   .BYTE   TK_GT           ; >
0011D5  2  00                   .BYTE   $00
0011D6  2               TAB_QEST:
0011D6  2  9E 00                .BYTE   TK_PRINT,$00    ; ?
0011D8  2               TAB_ASCA:
0011D8  2               LBB_ABS:
0011D8  2  42 53 28 D7          .BYTE   "BS(",TK_ABS    ; ABS(
0011DC  2               LBB_AND:
0011DC  2  4E 44 CD             .BYTE   "ND",TK_AND     ; AND
0011DF  2               LBB_ASC:
0011DF  2  53 43 28 E9          .BYTE   "SC(",TK_ASC    ; ASC(
0011E3  2               LBB_ATN:
0011E3  2  54 4E 28 E2          .BYTE   "TN(",TK_ATN    ; ATN(
0011E7  2  00                   .BYTE   $00
0011E8  2               TAB_ASCB:
0011E8  2               LBB_BINS:
0011E8  2  49 4E 24 28          .BYTE   "IN$(",TK_BINS  ; BIN$(
0011EC  2  EE           
0011ED  2               LBB_BITCLR:
0011ED  2  49 54 43 4C          .BYTE   "ITCLR",TK_BITCLR; BITCLR
0011F1  2  52 A7        
0011F3  2               LBB_BITSET:
0011F3  2  49 54 53 45          .BYTE   "ITSET",TK_BITSET; BITSET
0011F7  2  54 A6        
0011F9  2               LBB_BITTST:
0011F9  2  49 54 54 53          .BYTE   "ITTST(",TK_BITTST
0011FD  2  54 28 EF     
001200  2               ; BITTST(
001200  2  00                   .BYTE   $00
001201  2               TAB_ASCC:
001201  2               LBB_CALL:
001201  2  41 4C 4C 9B          .BYTE   "ALL",TK_CALL   ; CALL
001205  2               LBB_CHRS:
001205  2  48 52 24 28          .BYTE   "HR$(",TK_CHRS  ; CHR$(
001209  2  EC           
00120A  2               LBB_CLEAR:
00120A  2  4C 45 41 52          .BYTE   "LEAR",TK_CLEAR ; CLEAR
00120E  2  A1           
00120F  2               LBB_CLOSE:
00120F  2  4C 4F 53 45          .BYTE   "LOSE",TK_CLOSE ; CLOSE
001213  2  AA           
001214  2               LBB_COLOR:
001214  2  4F 4C 4F 52          .BYTE   "OLOR",TK_COLOR ; COLOR
001218  2  B2           
001219  2               LBB_CON:
001219  2  4F 4E 28 F8          .BYTE   "ON(",TK_CON    ;CON
00121D  2               LBB_CONT:
00121D  2  4F 4E 54 9F          .BYTE   "ONT",TK_CONT   ; CONT
001221  2               LBB_COS:
001221  2  4F 53 28 DF          .BYTE   "OS(",TK_COS    ; COS(
001225  2  00                   .BYTE   $00
001226  2               TAB_ASCD:
001226  2               LBB_DATA:
001226  2  41 54 41 83          .BYTE   "ATA",TK_DATA   ; DATA
00122A  2               LBB_DEC:
00122A  2  45 43 8A             .BYTE   "EC",TK_DEC     ; DEC
00122D  2               LBB_DEF:
00122D  2  45 46 99             .BYTE   "EF",TK_DEF     ; DEF
001230  2               LBB_DIM:
001230  2  49 4D 87             .BYTE   "IM",TK_DIM     ; DIM
001233  2               LBB_DIRECTORY:
001233  2  49 52 45 43          .BYTE   "IRECTORY",TK_DIRECTORY; DIRECTORY
001237  2  54 4F 52 59  
00123B  2  84           
00123C  2               LBB_DISKCMD:
00123C  2  49 53 4B 43          .BYTE   "ISKCMD",TK_DISKCMD; DISKCMD
001240  2  4D 44 AF     
001243  2               LBB_DISKSTATUS:
001243  2  49 53 4B 53          .BYTE   "ISKSTATUS",TK_DISKSTATUS; DISKSTATUS
001247  2  54 41 54 55  
00124B  2  53 85        
00124D  2               LBB_DO:
00124D  2  4F 9C                .BYTE   "O",TK_DO       ; DO
00124F  2  00                   .BYTE   $00
001250  2               TAB_ASCE:
001250  2               LBB_ELSE:
001250  2  4C 53 45 BE          .BYTE   "LSE",TK_ELSE   ; ELSE
001254  2               LBB_END:
001254  2  4E 44 80             .BYTE   "ND",TK_END     ; END
001257  2               LBB_EOR:
001257  2  4F 52 CE             .BYTE   "OR",TK_EOR     ; EOR
00125A  2               LBB_EXP:
00125A  2  58 50 28 DE          .BYTE   "XP(",TK_EXP    ; EXP(
00125E  2  00                   .BYTE   $00
00125F  2               TAB_ASCF:
00125F  2               LBB_FN:
00125F  2  4E C0                .BYTE   "N",TK_FN       ; FN
001261  2               LBB_FOR:
001261  2  4F 52 81             .BYTE   "OR",TK_FOR     ; FOR
001264  2               LBB_FRE:
001264  2  52 45 28 D9          .BYTE   "RE(",TK_FRE    ; FRE(
001268  2  00                   .BYTE   $00
001269  2               TAB_ASCG:
001269  2               LBB_GETN:
001269  2  45 54 23 AE          .BYTE   "ET#",TK_GETN   ; GETN
00126D  2               LBB_GET:
00126D  2  45 54 A4             .BYTE   "ET",TK_GET     ; GET
001270  2               LBB_GOSUB:
001270  2  4F 53 55 42          .BYTE   "OSUB",TK_GOSUB ; GOSUB
001274  2  8F           
001275  2               LBB_GOTO:
001275  2  4F 54 4F 8B          .BYTE   "OTO",TK_GOTO   ; GOTO
001279  2  00                   .BYTE   $00
00127A  2               TAB_ASCH:
00127A  2               LBB_HEXS:
00127A  2  45 58 24 28          .BYTE   "EX$(",TK_HEXS  ; HEX$(
00127E  2  ED           
00127F  2  00                   .BYTE   $00
001280  2               TAB_ASCI:
001280  2               LBB_IECINPUT:
001280  2  45 43 49 4E          .BYTE   "ECINPUT",TK_IECINPUT; IECINPUT
001284  2  50 55 54 AB  
001288  2               LBB_IECOUTPUT:
001288  2  45 43 4F 55          .BYTE   "ECOUTPUT",TK_IECOUTPUT; IECOUTPUT
00128C  2  54 50 55 54  
001290  2  AC           
001291  2               LBB_IECST:
001291  2  45 43 53 54          .BYTE   "ECST",TK_IECST ; IECST
001295  2  F3           
001296  2               LBB_IF:
001296  2  46 8D                .BYTE   "F",TK_IF       ; IF
001298  2               LBB_INC:
001298  2  4E 43 95             .BYTE   "NC",TK_INC     ; INC
00129B  2               LBB_INPUT:
00129B  2  4E 50 55 54          .BYTE   "NPUT",TK_INPUT ; INPUT
00129F  2  86           
0012A0  2               LBB_INT:
0012A0  2  4E 54 28 D6          .BYTE   "NT(",TK_INT    ; INT(
0012A4  2  00                   .BYTE   $00
0012A5  2               TAB_ASCK:
0012A5  2               TAB_ASCL:
0012A5  2               LBB_LCASES:
0012A5  2  43 41 53 45          .BYTE   "CASE$(",TK_LCASES
0012A9  2  24 28 EB     
0012AC  2               ; LCASE$(
0012AC  2               LBB_LEFTS:
0012AC  2  45 46 54 24          .BYTE   "EFT$(",TK_LEFTS; LEFT$(
0012B0  2  28 F5        
0012B2  2               LBB_LEN:
0012B2  2  45 4E 28 E6          .BYTE   "EN(",TK_LEN    ; LEN(
0012B6  2               LBB_LET:
0012B6  2  45 54 89             .BYTE   "ET",TK_LET     ; LET
0012B9  2               LBB_LIST:
0012B9  2  49 53 54 A0          .BYTE   "IST",TK_LIST   ; LIST
0012BD  2               LBB_LOAD:
0012BD  2  4F 41 44 97          .BYTE   "OAD",TK_LOAD   ; LOAD
0012C1  2               LBB_LOCATE:
0012C1  2  4F 43 41 54          .BYTE   "OCATE",TK_LOCATE; LOCATE
0012C5  2  45 B1        
0012C7  2               LBB_LOG:
0012C7  2  4F 47 28 DD          .BYTE   "OG(",TK_LOG    ; LOG(
0012CB  2               LBB_LOOP:
0012CB  2  4F 4F 50 9D          .BYTE   "OOP",TK_LOOP   ; LOOP
0012CF  2  00                   .BYTE   $00
0012D0  2               TAB_ASCM:
0012D0  2               LBB_MAX:
0012D0  2  41 58 28 F0          .BYTE   "AX(",TK_MAX    ; MAX(
0012D4  2               LBB_MIDS:
0012D4  2  49 44 24 28          .BYTE   "ID$(",TK_MIDS  ; MID$(
0012D8  2  F7           
0012D9  2               LBB_MIN:
0012D9  2  49 4E 28 F1          .BYTE   "IN(",TK_MIN    ; MIN(
0012DD  2               LBB_MONITOR:
0012DD  2  4F 4E 49 54          .BYTE   "ONITOR",TK_MONITOR; MONITOR(
0012E1  2  4F 52 A8     
0012E4  2  00                   .BYTE   $00
0012E5  2               TAB_ASCN:
0012E5  2               LBB_NEW:
0012E5  2  45 57 A2             .BYTE   "EW",TK_NEW     ; NEW
0012E8  2               LBB_NEXT:
0012E8  2  45 58 54 82          .BYTE   "EXT",TK_NEXT   ; NEXT
0012EC  2               LBB_NOISE:
0012EC  2  4F 49 53 45          .BYTE   "OISE",TK_NOISE ; NOISE
0012F0  2  B9           
0012F1  2               LBB_NOT:
0012F1  2  4F 54 C3             .BYTE   "OT",TK_NOT     ; NOT
0012F4  2               LBB_NULL:
0012F4  2  55 4C 4C 94          .BYTE   "ULL",TK_NULL   ; NULL
0012F8  2  00                   .BYTE   $00
0012F9  2               TAB_ASCO:
0012F9  2               LBB_OFF:
0012F9  2  46 46 C7             .BYTE   "FF",TK_OFF     ; OFF
0012FC  2               LBB_ON:
0012FC  2  4E 93                .BYTE   "N",TK_ON       ; ON
0012FE  2               LBB_OPEN:
0012FE  2  50 45 4E A9          .BYTE   "PEN",TK_OPEN   ; OPEN
001302  2               LBB_OR:
001302  2  52 CF                .BYTE   "R",TK_OR       ; OR
001304  2  00                   .BYTE   $00
001305  2               TAB_ASCP:
001305  2               LBB_PATTERN:
001305  2  41 54 54 45          .BYTE   "ATTERN",TK_PATTERN; PATTERN
001309  2  52 4E B6     
00130C  2               LBB_PEEK:
00130C  2  45 45 4B 28          .BYTE   "EEK(",TK_PEEK  ; PEEK(
001310  2  E3           
001311  2               LBB_PI:
001311  2  49 F2                .BYTE   "I",TK_PI       ; PI
001313  2               LBB_PLOT:
001313  2  4C 4F 54 B5          .BYTE   "LOT",TK_PLOT   ; PLOT
001317  2               LBB_POKE:
001317  2  4F 4B 45 9A          .BYTE   "OKE",TK_POKE   ; POKE
00131B  2               LBB_POS:
00131B  2  4F 53 28 DA          .BYTE   "OS(",TK_POS    ; POS(
00131F  2               LBB_PRINT:
00131F  2  52 49 4E 54          .BYTE   "RINT",TK_PRINT ; PRINT
001323  2  9E           
001324  2               LBB_PUTN:
001324  2  55 54 23 AD          .BYTE   "UT#",TK_PUTN   ; PUTN
001328  2  00                   .BYTE   $00
001329  2               TAB_ASCR:
001329  2               LBB_READ:
001329  2  45 41 44 88          .BYTE   "EAD",TK_READ   ; READ
00132D  2               LBB_REM:
00132D  2  45 4D 91             .BYTE   "EM",TK_REM     ; REM
001330  2               LBB_RESTORE:
001330  2  45 53 54 4F          .BYTE   "ESTORE",TK_RESTORE
001334  2  52 45 8E     
001337  2               ; RESTORE
001337  2               LBB_RETURN:
001337  2  45 54 55 52          .BYTE   "ETURN",TK_RETURN; RETURN
00133B  2  4E 90        
00133D  2               LBB_RIGHTS:
00133D  2  49 47 48 54          .BYTE   "IGHT$(",TK_RIGHTS
001341  2  24 28 F6     
001344  2               ; RIGHT$(
001344  2               LBB_RND:
001344  2  4E 44 28 DC          .BYTE   "ND(",TK_RND    ; RND(
001348  2               LBB_RUN:
001348  2  55 4E 8C             .BYTE   "UN",TK_RUN     ; RUN
00134B  2  00                   .BYTE   $00
00134C  2               TAB_ASCS:
00134C  2               LBB_SADD:
00134C  2  41 44 44 28          .BYTE   "ADD(",TK_SADD  ; SADD(
001350  2  E5           
001351  2               LBB_SAVE:
001351  2  41 56 45 98          .BYTE   "AVE",TK_SAVE   ; SAVE
001355  2               LBB_SCNCLR:
001355  2  43 4E 43 4C          .BYTE   "CNCLR",TK_SCNCLR; SCNCLR
001359  2  52 B0        
00135B  2               LBB_SCREEN:
00135B  2  43 52 45 45          .BYTE   "CREEN",TK_SCREEN; SCREEN
00135F  2  4E B4        
001361  2               LBB_SGN:
001361  2  47 4E 28 D5          .BYTE   "GN(",TK_SGN    ; SGN(
001365  2               LBB_SIN:
001365  2  49 4E 28 E0          .BYTE   "IN(",TK_SIN    ; SIN(
001369  2               LBB_SOUND:
001369  2  4F 55 4E 44          .BYTE   "OUND",TK_SOUND ; SOUND
00136D  2  B8           
00136E  2               LBB_SPC:
00136E  2  50 43 28 C1          .BYTE   "PC(",TK_SPC    ; SPC(
001372  2               LBB_SPEEK:
001372  2  50 45 45 4B          .BYTE   "PEEK(",TK_SPEEK; SPEEK
001376  2  28 E4        
001378  2               LBB_SPOKE:
001378  2  50 4F 4B 45          .BYTE   "POKE",TK_SPOKE ; SPOKE
00137C  2  B3           
00137D  2               LBB_SQR:
00137D  2  51 52 28 DB          .BYTE   "QR(",TK_SQR    ; SQR(
001381  2               LBB_STEP:
001381  2  54 45 50 C4          .BYTE   "TEP",TK_STEP   ; STEP
001385  2               LBB_STOP:
001385  2  54 4F 50 92          .BYTE   "TOP",TK_STOP   ; STOP
001389  2               LBB_STRS:
001389  2  54 52 24 28          .BYTE   "TR$(",TK_STRS  ; STR$(
00138D  2  E7           
00138E  2               LBB_SWAP:
00138E  2  57 41 50 A5          .BYTE   "WAP",TK_SWAP   ; SWAP
001392  2               LBB_SYS:
001392  2  59 53 B7             .BYTE   "YS",TK_SYS     ; SYS
001395  2  00                   .BYTE   $00
001396  2               TAB_ASCT:
001396  2               LBB_TAB:
001396  2  41 42 28 BD          .BYTE   "AB(",TK_TAB    ; TAB(
00139A  2               LBB_TAN:
00139A  2  41 4E 28 E1          .BYTE   "AN(",TK_TAN    ; TAN(
00139E  2               LBB_THEN:
00139E  2  48 45 4E C2          .BYTE   "HEN",TK_THEN   ; THEN
0013A2  2               LBB_TONE:
0013A2  2  4F 4E 45 BA          .BYTE   "ONE",TK_TONE   ; TONE
0013A6  2               LBB_TO:
0013A6  2  4F BF                .BYTE   "O",TK_TO       ; TO
0013A8  2  00                   .BYTE   $00
0013A9  2               TAB_ASCU:
0013A9  2               LBB_UCASES:
0013A9  2  43 41 53 45          .BYTE   "CASE$(",TK_UCASES
0013AD  2  24 28 EA     
0013B0  2               ; UCASE$(
0013B0  2               LBB_UNTIL:
0013B0  2  4E 54 49 4C          .BYTE   "NTIL",TK_UNTIL ; UNTIL
0013B4  2  C5           
0013B5  2               LBB_USR:
0013B5  2  53 52 28 D8          .BYTE   "SR(",TK_USR    ; USR(
0013B9  2  00                   .BYTE   $00
0013BA  2               TAB_ASCV:
0013BA  2               LBB_VAL:
0013BA  2  41 4C 28 E8          .BYTE   "AL(",TK_VAL    ; VAL(
0013BE  2               LBB_VPTR:
0013BE  2  41 52 50 54          .BYTE   "ARPTR(",TK_VPTR; VARPTR(
0013C2  2  52 28 F4     
0013C5  2               LBB_VOICE:
0013C5  2  4F 49 43 45          .BYTE   "OICE",TK_VOICE ; VOICE
0013C9  2  BC           
0013CA  2               LBB_VOLUME:
0013CA  2  4F 4C 55 4D          .BYTE   "OLUME",TK_VOLUME; VOLUME
0013CE  2  45 BB        
0013D0  2               
0013D0  2  00                   .BYTE   $00
0013D1  2               TAB_ASCW:
0013D1  2               LBB_WAIT:
0013D1  2  41 49 54 96          .BYTE   "AIT",TK_WAIT   ; WAIT
0013D5  2               LBB_WHILE:
0013D5  2  48 49 4C 45          .BYTE   "HILE",TK_WHILE ; WHILE
0013D9  2  C6           
0013DA  2               LBB_WIDTH:
0013DA  2  49 44 54 48          .BYTE   "IDTH",TK_WIDTH ; WIDTH
0013DE  2  A3           
0013DF  2  00                   .BYTE   $00
0013E0  2               TAB_POWR:
0013E0  2  CC 00                .BYTE   TK_POWER,$00    ; ^
0013E2  2               
0013E2  2               ; new decode table for LIST
0013E2  2               ; Table is ..
0013E2  2               ; byte - keyword length, keyword first character
0013E2  2               ; word - pointer to rest of keyword from dictionary
0013E2  2               
0013E2  2               ; note if length is 1 then the pointer is ignored
0013E2  2               
0013E2  2               LAB_KEYT:
0013E2  2  03 45                .BYTE   3,'E'
0013E4  2  54 12                .WORD   LBB_END         ; END
0013E6  2  03 46                .BYTE   3,'F'
0013E8  2  61 12                .WORD   LBB_FOR         ; FOR
0013EA  2  04 4E                .BYTE   4,'N'
0013EC  2  E8 12                .WORD   LBB_NEXT        ; NEXT
0013EE  2  04 44                .BYTE   4,'D'
0013F0  2  26 12                .WORD   LBB_DATA        ; DATA
0013F2  2  09 44                .BYTE   9,'D'
0013F4  2  33 12                .WORD   LBB_DIRECTORY   ; DIRECTORY
0013F6  2  0A 44                .BYTE   10,'D'
0013F8  2  43 12                .WORD   LBB_DISKSTATUS  ; DISKSTATUS
0013FA  2  05 49                .BYTE   5,'I'
0013FC  2  9B 12                .WORD   LBB_INPUT       ; INPUT
0013FE  2  03 44                .BYTE   3,'D'
001400  2  30 12                .WORD   LBB_DIM         ; DIM
001402  2  04 52                .BYTE   4,'R'
001404  2  29 13                .WORD   LBB_READ        ; READ
001406  2  03 4C                .BYTE   3,'L'
001408  2  B6 12                .WORD   LBB_LET         ; LET
00140A  2  03 44                .BYTE   3,'D'
00140C  2  2A 12                .WORD   LBB_DEC         ; DEC
00140E  2  04 47                .BYTE   4,'G'
001410  2  75 12                .WORD   LBB_GOTO        ; GOTO
001412  2  03 52                .BYTE   3,'R'
001414  2  48 13                .WORD   LBB_RUN         ; RUN
001416  2  02 49                .BYTE   2,'I'
001418  2  96 12                .WORD   LBB_IF          ; IF
00141A  2  07 52                .BYTE   7,'R'
00141C  2  30 13                .WORD   LBB_RESTORE     ; RESTORE
00141E  2  05 47                .BYTE   5,'G'
001420  2  70 12                .WORD   LBB_GOSUB       ; GOSUB
001422  2  06 52                .BYTE   6,'R'
001424  2  37 13                .WORD   LBB_RETURN      ; RETURN
001426  2  03 52                .BYTE   3,'R'
001428  2  2D 13                .WORD   LBB_REM         ; REM
00142A  2  04 53                .BYTE   4,'S'
00142C  2  85 13                .WORD   LBB_STOP        ; STOP
00142E  2  02 4F                .BYTE   2,'O'
001430  2  FC 12                .WORD   LBB_ON          ; ON
001432  2  04 4E                .BYTE   4,'N'
001434  2  F4 12                .WORD   LBB_NULL        ; NULL
001436  2  03 49                .BYTE   3,'I'
001438  2  98 12                .WORD   LBB_INC         ; INC
00143A  2  04 57                .BYTE   4,'W'
00143C  2  D1 13                .WORD   LBB_WAIT        ; WAIT
00143E  2  04 4C                .BYTE   4,'L'
001440  2  BD 12                .WORD   LBB_LOAD        ; LOAD
001442  2  04 53                .BYTE   4,'S'
001444  2  51 13                .WORD   LBB_SAVE        ; SAVE
001446  2  03 44                .BYTE   3,'D'
001448  2  2D 12                .WORD   LBB_DEF         ; DEF
00144A  2  04 50                .BYTE   4,'P'
00144C  2  17 13                .WORD   LBB_POKE        ; POKE
00144E  2  04 43                .BYTE   4,'C'
001450  2  01 12                .WORD   LBB_CALL        ; CALL
001452  2  02 44                .BYTE   2,'D'
001454  2  4D 12                .WORD   LBB_DO          ; DO
001456  2  04 4C                .BYTE   4,'L'
001458  2  CB 12                .WORD   LBB_LOOP        ; LOOP
00145A  2  05 50                .BYTE   5,'P'
00145C  2  1F 13                .WORD   LBB_PRINT       ; PRINT
00145E  2  04 43                .BYTE   4,'C'
001460  2  1D 12                .WORD   LBB_CONT        ; CONT
001462  2  04 4C                .BYTE   4,'L'
001464  2  B9 12                .WORD   LBB_LIST        ; LIST
001466  2  05 43                .BYTE   5,'C'
001468  2  0A 12                .WORD   LBB_CLEAR       ; CLEAR
00146A  2  03 4E                .BYTE   3,'N'
00146C  2  E5 12                .WORD   LBB_NEW         ; NEW
00146E  2  05 57                .BYTE   5,'W'
001470  2  DA 13                .WORD   LBB_WIDTH       ; WIDTH
001472  2  03 47                .BYTE   3,'G'
001474  2  6D 12                .WORD   LBB_GET         ; GET
001476  2  04 53                .BYTE   4,'S'
001478  2  8E 13                .WORD   LBB_SWAP        ; SWAP
00147A  2  06 42                .BYTE   6,'B'
00147C  2  F3 11                .WORD   LBB_BITSET      ; BITSET
00147E  2  06 42                .BYTE   6,'B'
001480  2  ED 11                .WORD   LBB_BITCLR      ; BITCLR
001482  2  07 4D                .BYTE   7,'M'
001484  2  DD 12                .WORD   LBB_MONITOR     ; MONITOR
001486  2  04 4F                .BYTE   4,'O'
001488  2  FE 12                .WORD   LBB_OPEN        ; OPEN
00148A  2  05 43                .BYTE   5,'C'
00148C  2  0F 12                .WORD   LBB_CLOSE       ; CLOSE
00148E  2  08 49                .BYTE   8,'I'
001490  2  80 12                .WORD   LBB_IECINPUT    ; IECINPUT
001492  2  09 49                .BYTE   9,'I'
001494  2  88 12                .WORD   LBB_IECOUTPUT   ; IECOUTPUT
001496  2  04 50                .BYTE   4,'P'
001498  2  24 13                .WORD   LBB_PUTN        ; PUTN
00149A  2  04 47                .BYTE   4,'G'
00149C  2  69 12                .WORD   LBB_GETN        ; GETN
00149E  2  07 44                .BYTE   7,'D'
0014A0  2  3C 12                .WORD   LBB_DISKCMD     ; DISKCMD
0014A2  2  06 53                .BYTE   6,'S'
0014A4  2  55 13                .WORD   LBB_SCNCLR      ; SCNCLR
0014A6  2  06 4C                .BYTE   6,'L'
0014A8  2  C1 12                .WORD   LBB_LOCATE      ; LOCATE
0014AA  2  05 43                .BYTE   5,'C'
0014AC  2  14 12                .WORD   LBB_COLOR       ; COLOR
0014AE  2  05 53                .BYTE   5,'S'
0014B0  2  78 13                .WORD   LBB_SPOKE       ; SPOKE
0014B2  2  06 53                .BYTE   6,'S'
0014B4  2  5B 13                .WORD   LBB_SCREEN      ; SCREEN
0014B6  2  04 50                .BYTE   4,'P'
0014B8  2  13 13                .WORD   LBB_PLOT        ; PLOT
0014BA  2  07 50                .BYTE   7,'P'
0014BC  2  05 13                .WORD   LBB_PATTERN     ; PATTERN
0014BE  2  03 53                .BYTE   3,'S'
0014C0  2  92 13                .WORD   LBB_SYS         ; SYS
0014C2  2  05 53                .BYTE   5,'S'
0014C4  2  69 13                .WORD   LBB_SOUND       ; SOUND
0014C6  2  05 4E                .BYTE   5,'N'
0014C8  2  EC 12                .WORD   LBB_NOISE       ; NOISE
0014CA  2  04 54                .BYTE   4,'T'
0014CC  2  A2 13                .WORD   LBB_TONE        ; TONE
0014CE  2  06 56                .BYTE   6,'V'
0014D0  2  CA 13                .WORD   LBB_VOLUME      ; VOLUME
0014D2  2  05 56                .BYTE   5,'V'
0014D4  2  C5 13                .WORD   LBB_VOICE       ; VOICE
0014D6  2               
0014D6  2               ; secondary commands (can't start a statement)
0014D6  2               
0014D6  2  04 54                .BYTE   4,'T'
0014D8  2  96 13                .WORD   LBB_TAB         ; TAB
0014DA  2  04 45                .BYTE   4,'E'
0014DC  2  50 12                .WORD   LBB_ELSE        ; ELSE
0014DE  2  02 54                .BYTE   2,'T'
0014E0  2  A6 13                .WORD   LBB_TO          ; TO
0014E2  2  02 46                .BYTE   2,'F'
0014E4  2  5F 12                .WORD   LBB_FN          ; FN
0014E6  2  04 53                .BYTE   4,'S'
0014E8  2  6E 13                .WORD   LBB_SPC         ; SPC
0014EA  2  04 54                .BYTE   4,'T'
0014EC  2  9E 13                .WORD   LBB_THEN        ; THEN
0014EE  2  03 4E                .BYTE   3,'N'
0014F0  2  F1 12                .WORD   LBB_NOT         ; NOT
0014F2  2  04 53                .BYTE   4,'S'
0014F4  2  81 13                .WORD   LBB_STEP        ; STEP
0014F6  2  05 55                .BYTE   5,'U'
0014F8  2  B0 13                .WORD   LBB_UNTIL       ; UNTIL
0014FA  2  05 57                .BYTE   5,'W'
0014FC  2  D5 13                .WORD   LBB_WHILE       ; WHILE
0014FE  2  03 4F                .BYTE   3,'O'
001500  2  F9 12                .WORD   LBB_OFF         ; OFF
001502  2               
001502  2               ; opperators
001502  2               
001502  2  01 2B                .BYTE   1,'+'
001504  2  00 00                .WORD   $0000           ; +
001506  2  01 2D                .BYTE   1,'-'
001508  2  00 00                .WORD   $0000           ; -
00150A  2  01 2A                .BYTE   1,'*'
00150C  2  00 00                .WORD   $0000           ; *
00150E  2  01 2F                .BYTE   1,'/'
001510  2  00 00                .WORD   $0000           ; /
001512  2  01 5E                .BYTE   1,'^'
001514  2  00 00                .WORD   $0000           ; ^
001516  2  03 41                .BYTE   3,'A'
001518  2  DC 11                .WORD   LBB_AND         ; AND
00151A  2  03 45                .BYTE   3,'E'
00151C  2  57 12                .WORD   LBB_EOR         ; EOR
00151E  2  02 4F                .BYTE   2,'O'
001520  2  02 13                .WORD   LBB_OR          ; OR
001522  2  02 3E                .BYTE   2,'>'
001524  2  D2 11                .WORD   LBB_RSHIFT      ; >>
001526  2  02 3C                .BYTE   2,'<'
001528  2  CC 11                .WORD   LBB_LSHIFT      ; <<
00152A  2  01 3E                .BYTE   1,'>'
00152C  2  00 00                .WORD   $0000           ; >
00152E  2  01 3D                .BYTE   1,'='
001530  2  00 00                .WORD   $0000           ; =
001532  2  01 3C                .BYTE   1,'<'
001534  2  00 00                .WORD   $0000           ; <
001536  2               
001536  2               ; functions
001536  2               
001536  2  04 53                .BYTE   4,'S'           ;
001538  2  61 13                .WORD   LBB_SGN         ; SGN
00153A  2  04 49                .BYTE   4,'I'           ;
00153C  2  A0 12                .WORD   LBB_INT         ; INT
00153E  2  04 41                .BYTE   4,'A'           ;
001540  2  D8 11                .WORD   LBB_ABS         ; ABS
001542  2  04 55                .BYTE   4,'U'           ;
001544  2  B5 13                .WORD   LBB_USR         ; USR
001546  2  04 46                .BYTE   4,'F'           ;
001548  2  64 12                .WORD   LBB_FRE         ; FRE
00154A  2  04 50                .BYTE   4,'P'           ;
00154C  2  1B 13                .WORD   LBB_POS         ; POS
00154E  2  04 53                .BYTE   4,'S'           ;
001550  2  7D 13                .WORD   LBB_SQR         ; SQR
001552  2  04 52                .BYTE   4,'R'           ;
001554  2  44 13                .WORD   LBB_RND         ; RND
001556  2  04 4C                .BYTE   4,'L'           ;
001558  2  C7 12                .WORD   LBB_LOG         ; LOG
00155A  2  04 45                .BYTE   4,'E'           ;
00155C  2  5A 12                .WORD   LBB_EXP         ; EXP
00155E  2  04 43                .BYTE   4,'C'           ;
001560  2  21 12                .WORD   LBB_COS         ; COS
001562  2  04 53                .BYTE   4,'S'           ;
001564  2  65 13                .WORD   LBB_SIN         ; SIN
001566  2  04 54                .BYTE   4,'T'           ;
001568  2  9A 13                .WORD   LBB_TAN         ; TAN
00156A  2  04 41                .BYTE   4,'A'           ;
00156C  2  E3 11                .WORD   LBB_ATN         ; ATN
00156E  2  05 50                .BYTE   5,'P'           ;
001570  2  0C 13                .WORD   LBB_PEEK        ; PEEK
001572  2  06 53                .BYTE   6,'S'
001574  2  72 13                .WORD   LBB_SPEEK       ; SPEEK
001576  2  05 53                .BYTE   5,'S'           ;
001578  2  4C 13                .WORD   LBB_SADD        ; SADD
00157A  2  04 4C                .BYTE   4,'L'           ;
00157C  2  B2 12                .WORD   LBB_LEN         ; LEN
00157E  2  05 53                .BYTE   5,'S'           ;
001580  2  89 13                .WORD   LBB_STRS        ; STR$
001582  2  04 56                .BYTE   4,'V'           ;
001584  2  BA 13                .WORD   LBB_VAL         ; VAL
001586  2  04 41                .BYTE   4,'A'           ;
001588  2  DF 11                .WORD   LBB_ASC         ; ASC
00158A  2  07 55                .BYTE   7,'U'           ;
00158C  2  A9 13                .WORD   LBB_UCASES      ; UCASE$
00158E  2  07 4C                .BYTE   7,'L'           ;
001590  2  A5 12                .WORD   LBB_LCASES      ; LCASE$
001592  2  05 43                .BYTE   5,'C'           ;
001594  2  05 12                .WORD   LBB_CHRS        ; CHR$
001596  2  05 48                .BYTE   5,'H'           ;
001598  2  7A 12                .WORD   LBB_HEXS        ; HEX$
00159A  2  05 42                .BYTE   5,'B'           ;
00159C  2  E8 11                .WORD   LBB_BINS        ; BIN$
00159E  2  07 42                .BYTE   7,'B'           ;
0015A0  2  F9 11                .WORD   LBB_BITTST      ; BITTST
0015A2  2  04 4D                .BYTE   4,'M'           ;
0015A4  2  D0 12                .WORD   LBB_MAX         ; MAX
0015A6  2  04 4D                .BYTE   4,'M'           ;
0015A8  2  D9 12                .WORD   LBB_MIN         ; MIN
0015AA  2  02 50                .BYTE   2,'P'           ;
0015AC  2  11 13                .WORD   LBB_PI          ; PI
0015AE  2  05 49                .BYTE   5,'I'           ;
0015B0  2  91 12                .WORD   LBB_IECST       ; IECST
0015B2  2  05 56                .BYTE   5,'V'           ;
0015B4  2  BE 13                .WORD   LBB_VPTR        ; VARPTR
0015B6  2  06 4C                .BYTE   6,'L'           ;
0015B8  2  AC 12                .WORD   LBB_LEFTS       ; LEFT$
0015BA  2  07 52                .BYTE   7,'R'           ;
0015BC  2  3D 13                .WORD   LBB_RIGHTS      ; RIGHT$
0015BE  2  05 4D                .BYTE   5,'M'           ;
0015C0  2  D4 12                .WORD   LBB_MIDS        ; MID$
0015C2  2  04 43                .BYTE   4,'C'           ;
0015C4  2  19 12                .WORD   LBB_CON         ; CON
0015C6  2               
0015C6  1               
0015C6  1               ; DEFINITIONS
0015C6  1                       .INCLUDE "definitions.asm"
0015C6  2               PROGRAMBANK     = $FF           ; BANK THAT THE INTREPRETER LIVES IN
0015C6  2               DATABANK        = $02           ; BANK THAT THE DATA LIVES IN
0015C6  2               
0015C6  2               FNBUFFER        = $000F00       ; FILE NAME BUFFER, MUST BE IN ZERO BANK!
0015C6  2               
0015C6  2               
0015C6  2               
0015C6  2               ; offsets from a base of X or Y
0015C6  2               
0015C6  2               PLUS_0          = $00           ; X or Y plus 0
0015C6  2               PLUS_1          = $01           ; X or Y plus 1
0015C6  2               PLUS_2          = $02           ; X or Y plus 2
0015C6  2               PLUS_3          = $03           ; X or Y plus 3
0015C6  2               
0015C6  2               STACK_BOTTOM    = $B000         ; stack bottom, no offset
0015C6  2               STACK           = $BFFF         ; stack top, no offset
0015C6  2               
0015C6  2               ccflag          = $000200       ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
0015C6  2               ccbyte          = ccflag+1      ; BASIC CTRL-C byte
0015C6  2               ccnull          = ccbyte+1      ; BASIC CTRL-C byte timeout
0015C6  2               
0015C6  2               VEC_CC          = ccnull+1      ; ctrl c check vector
0015C6  2               
0015C6  2               
0015C6  2               ; Ibuffs can now be anywhere in RAM AS LONG AS IT IS BEFORE RAM_BASE AND IS NOT PAGE ALIGNED!, ensure that the max length is < $80
0015C6  2               
0015C6  2                       .IF     PROGRAMBANK=DATABANK
0015C6  2               Ibuffs              = (ENDOFBASIC&$FF00)+$181
0015C6  2                       .ELSE
0015C6  2               Ibuffs              = $2000+$181
0015C6  2               LIbuffs             = (DATABANK*$10000)+$2000+$181
0015C6  2                       .ENDIF
0015C6  2               Ibuffe          = Ibuffs+80     ; end of input buffer
0015C6  2               
0015C6  2               Ram_base        = ((Ibuffe+1)&$FF00)+$100; start of user RAM (set as needed, should be page aligned)
0015C6  2               Ram_top         = $FF00         ; end of user RAM+1 (set as needed, should be page aligned)
0015C6  2               
0015C6  1               
0015C6  1               ; MESSAGES
0015C6  1                       .INCLUDE "messages.asm"
0015C6  2               
0015C6  2               LAB_CONMSG:
0015C6  2  80 80 80 83          .BYTE   $80,$80,$80,$83,$84,$85,"  Werner Engineering 816",$0D
0015CA  2  84 85 20 20  
0015CE  2  57 65 72 6E  
0015E5  2  81 81 81 83          .BYTE   $81,$81,$81,$83,$84,$85,"  Enhanced BASIC 65816 2.3",$0D
0015E9  2  84 85 20 20  
0015ED  2  45 6E 68 61  
001606  2  82 82 82 83          .BYTE   $82,$82,$82,$83,$84,$85,00
00160A  2  84 85 00     
00160D  2               
00160D  2               LAB_SMSG:
00160D  2  20 42 79 74          .BYTE   " Bytes free",$00
001611  2  65 73 20 66  
001615  2  72 65 65 00  
001619  2               LAB_SMSG1:
001619  2  0D 0A 45 6E          .BYTE   $0D,$0A,"Enhanced BASIC 65816 2.3",$00
00161D  2  68 61 6E 63  
001621  2  65 64 20 42  
001634  2  0D 0A 44 45          .BYTE   $0D,$0A,"DERIVED FROM ehBASIC BY LEE DAVIDSON",$00
001638  2  52 49 56 45  
00163C  2  44 20 46 52  
00165B  2               
00165B  2               ; BASIC messages, mostly error messages
00165B  2               
00165B  2               LAB_BAER:
00165B  2  7F 16                .WORD   ERR_NF          ;$00 NEXT without FOR
00165D  2  90 16                .WORD   ERR_SN          ;$02 syntax
00165F  2  97 16                .WORD   ERR_RG          ;$04 RETURN without GOSUB
001661  2  AC 16                .WORD   ERR_OD          ;$06 out of data
001663  2  B8 16                .WORD   ERR_FC          ;$08 function call
001665  2  C6 16                .WORD   ERR_OV          ;$0A overflow
001667  2  CF 16                .WORD   ERR_OM          ;$0C out of memory
001669  2  DD 16                .WORD   ERR_US          ;$0E undefined statement
00166B  2  F1 16                .WORD   ERR_BS          ;$10 array bounds
00166D  2  FE 16                .WORD   ERR_DD          ;$12 double dimension array
00166F  2  0F 17                .WORD   ERR_D0          ;$14 divide by 0
001671  2  1E 17                .WORD   ERR_ID          ;$16 illegal direct
001673  2  2D 17                .WORD   ERR_TM          ;$18 type mismatch
001675  2  3B 17                .WORD   ERR_LS          ;$1A long string
001677  2  4B 17                .WORD   ERR_ST          ;$1C string too complex
001679  2  5E 17                .WORD   ERR_CN          ;$1E continue error
00167B  2  6D 17                .WORD   ERR_UF          ;$20 undefined function
00167D  2  80 17                .WORD   ERR_LD          ;$22 LOOP without DO
00167F  2               
00167F  2               ERR_NF:
00167F  2  4E 45 58 54          .BYTE   "NEXT without FOR",$00
001683  2  20 77 69 74  
001687  2  68 6F 75 74  
001690  2               ERR_SN:
001690  2  53 79 6E 74          .BYTE   "Syntax",$00
001694  2  61 78 00     
001697  2               ERR_RG:
001697  2  52 45 54 55          .BYTE   "RETURN without GOSUB",$00
00169B  2  52 4E 20 77  
00169F  2  69 74 68 6F  
0016AC  2               ERR_OD:
0016AC  2  4F 75 74 20          .BYTE   "Out of DATA",$00
0016B0  2  6F 66 20 44  
0016B4  2  41 54 41 00  
0016B8  2               ERR_FC:
0016B8  2  46 75 6E 63          .BYTE   "Function call",$00
0016BC  2  74 69 6F 6E  
0016C0  2  20 63 61 6C  
0016C6  2               ERR_OV:
0016C6  2  4F 76 65 72          .BYTE   "Overflow",$00
0016CA  2  66 6C 6F 77  
0016CE  2  00           
0016CF  2               ERR_OM:
0016CF  2  4F 75 74 20          .BYTE   "Out of memory",$00
0016D3  2  6F 66 20 6D  
0016D7  2  65 6D 6F 72  
0016DD  2               ERR_US:
0016DD  2  55 6E 64 65          .BYTE   "Undefined statement",$00
0016E1  2  66 69 6E 65  
0016E5  2  64 20 73 74  
0016F1  2               ERR_BS:
0016F1  2  41 72 72 61          .BYTE   "Array bounds",$00
0016F5  2  79 20 62 6F  
0016F9  2  75 6E 64 73  
0016FE  2               ERR_DD:
0016FE  2  44 6F 75 62          .BYTE   "Double dimension",$00
001702  2  6C 65 20 64  
001706  2  69 6D 65 6E  
00170F  2               ERR_D0:
00170F  2  44 69 76 69          .BYTE   "Divide by zero",$00
001713  2  64 65 20 62  
001717  2  79 20 7A 65  
00171E  2               ERR_ID:
00171E  2  49 6C 6C 65          .BYTE   "Illegal direct",$00
001722  2  67 61 6C 20  
001726  2  64 69 72 65  
00172D  2               ERR_TM:
00172D  2  54 79 70 65          .BYTE   "Type mismatch",$00
001731  2  20 6D 69 73  
001735  2  6D 61 74 63  
00173B  2               ERR_LS:
00173B  2  53 74 72 69          .BYTE   "String too long",$00
00173F  2  6E 67 20 74  
001743  2  6F 6F 20 6C  
00174B  2               ERR_ST:
00174B  2  53 74 72 69          .BYTE   "String too complex",$00
00174F  2  6E 67 20 74  
001753  2  6F 6F 20 63  
00175E  2               ERR_CN:
00175E  2  43 61 6E 27          .BYTE   "Can't continue",$00
001762  2  74 20 63 6F  
001766  2  6E 74 69 6E  
00176D  2               ERR_UF:
00176D  2  55 6E 64 65          .BYTE   "Undefined function",$00
001771  2  66 69 6E 65  
001775  2  64 20 66 75  
001780  2               ERR_LD:
001780  2  4C 4F 4F 50          .BYTE   "LOOP without DO",$00
001784  2  20 77 69 74  
001788  2  68 6F 75 74  
001790  2               
001790  2               LAB_BMSG:
001790  2  0D 0A 42 72          .BYTE   $0D,$0A,"Break",$00
001794  2  65 61 6B 00  
001798  2               LAB_EMSG:
001798  2  20 45 72 72          .BYTE   " Error",$00
00179C  2  6F 72 00     
00179F  2               LAB_LMSG:
00179F  2  20 69 6E 20          .BYTE   " in line ",$00
0017A3  2  6C 69 6E 65  
0017A7  2  20 00        
0017A9  2               LAB_RMSG:
0017A9  2  0D 0A 52 65          .BYTE   $0D,$0A,"Ready",$0D,$0A,$00
0017AD  2  61 64 79 0D  
0017B1  2  0A 00        
0017B3  2               
0017B3  2               LAB_IMSG:
0017B3  2  20 45 78 74          .BYTE   " Extra ignored",$0D,$0A,$00
0017B7  2  72 61 20 69  
0017BB  2  67 6E 6F 72  
0017C4  2               LAB_REDO:
0017C4  2  20 52 65 64          .BYTE   " Redo from start",$0D,$0A,$00
0017C8  2  6F 20 66 72  
0017CC  2  6F 6D 20 73  
0017D7  2               LAB_IOER:
0017D7  2  20 49 2F 4F          .BYTE   " I/O Error",$0D,$0A,$00
0017DB  2  20 45 72 72  
0017DF  2  6F 72 0D 0A  
0017E4  2               
0017E4  1               
0017E4  1               ; NUMERIC CONSTANTS
0017E4  1                       .INCLUDE "numconst.asm"
0017E4  2               ; numeric constants and series
0017E4  2               ; constants and series for LOG(n)
0017E4  2               LAB_25A0:
0017E4  2  02                   .BYTE   $02             ; counter
0017E5  2  80 19 56 62          .BYTE   $80,$19,$56,$62 ; 0.59898
0017E9  2  80 76 22 F3          .BYTE   $80,$76,$22,$F3 ; 0.96147
0017ED  2  82 38 AA 40          .BYTE   $82,$38,$AA,$40 ; 2.88539
0017F1  2               
0017F1  2               LAB_25AD:
0017F1  2  80 35 04 F3          .BYTE   $80,$35,$04,$F3 ; 0.70711	1/root 2
0017F5  2               LAB_25B1:
0017F5  2  81 35 04 F3          .BYTE   $81,$35,$04,$F3 ; 1.41421	root 2
0017F9  2               LAB_25B5:
0017F9  2  80 80 00 00          .BYTE   $80,$80,$00,$00 ; -0.5
0017FD  2               LAB_25B9:
0017FD  2  80 31 72 18          .BYTE   $80,$31,$72,$18 ; 0.69315	LOG(2)
001801  2               
001801  2               ; numeric PRINT constants
001801  2               LAB_2947:
001801  2  91 43 4F F8          .BYTE   $91,$43,$4F,$F8 ; 99999.9375 (max value with at least one decimal)
001805  2               LAB_294B:
001805  2  94 74 23 F7          .BYTE   $94,$74,$23,$F7 ; 999999.4375 (max value before scientific notation)
001809  2               LAB_294F:
001809  2  94 74 24 00          .BYTE   $94,$74,$24,$00 ; 1000000
00180D  2               
00180D  2               ; EXP(n) constants and series
00180D  2               LAB_2AFA:
00180D  2  81 38 AA 3B          .BYTE   $81,$38,$AA,$3B ; 1.4427	(1/LOG base 2 e)
001811  2               LAB_2AFE:
001811  2  06                   .BYTE   $06             ; counter
001812  2  74 63 90 8C          .BYTE   $74,$63,$90,$8C ; 2.17023e-4
001816  2  77 23 0C AB          .BYTE   $77,$23,$0C,$AB ; 0.00124
00181A  2  7A 1E 94 00          .BYTE   $7A,$1E,$94,$00 ; 0.00968
00181E  2  7C 63 42 80          .BYTE   $7C,$63,$42,$80 ; 0.05548
001822  2  7E 75 FE D0          .BYTE   $7E,$75,$FE,$D0 ; 0.24023
001826  2  80 31 72 15          .BYTE   $80,$31,$72,$15 ; 0.69315
00182A  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.00000
00182E  2               
00182E  2               ; trigonometric constants and series
00182E  2               LAB_2C78:
00182E  2  81 49 0F DB          .BYTE   $81,$49,$0F,$DB ; 1.570796371 (pi/2) as floating #
001832  2               LAB_2C84:
001832  2  04                   .BYTE   $04             ; counter
001833  2  86 1E D7 FB          .BYTE   $86,$1E,$D7,$FB ; 39.7109
001837  2  87 99 26 65          .BYTE   $87,$99,$26,$65 ;-76.575
00183B  2  87 23 34 58          .BYTE   $87,$23,$34,$58 ; 81.6022
00183F  2  86 A5 5D E1          .BYTE   $86,$A5,$5D,$E1 ;-41.3417
001843  2               LAB_2C7C:
001843  2  83 49 0F DB          .BYTE   $83,$49,$0F,$DB ; 6.28319 (2*pi) as floating #
001847  2               
001847  2               LAB_2CC9:
001847  2  08                   .BYTE   $08             ; counter
001848  2  78 3A C5 37          .BYTE   $78,$3A,$C5,$37 ; 0.00285
00184C  2  7B 83 A2 5C          .BYTE   $7B,$83,$A2,$5C ;-0.0160686
001850  2  7C 2E DD 4D          .BYTE   $7C,$2E,$DD,$4D ; 0.0426915
001854  2  7D 99 B0 1E          .BYTE   $7D,$99,$B0,$1E ;-0.0750429
001858  2  7D 59 ED 24          .BYTE   $7D,$59,$ED,$24 ; 0.106409
00185C  2  7E 91 72 00          .BYTE   $7E,$91,$72,$00 ;-0.142036
001860  2  7E 4C B9 73          .BYTE   $7E,$4C,$B9,$73 ; 0.199926
001864  2  7F AA AA 53          .BYTE   $7F,$AA,$AA,$53 ;-0.333331
001868  2               
001868  2               LAB_1D96        = *+1           ; $00,$00 used for undefined variables
001868  2               LAB_259C:
001868  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.000000, used for INC
00186C  2               LAB_2AFD:
00186C  2  81 80 00 00          .BYTE   $81,$80,$00,$00 ; -1.00000, used for DEC. must be on the same page as +1.00
001870  2               
001870  2               ; misc constants
001870  2               LAB_1DF7:
001870  2  90                   .BYTE   $90             ;-32768 (uses first three bytes from 0.5)
001871  2               LAB_2A96:
001871  2  80 00 00 00          .BYTE   $80,$00,$00,$00 ; 0.5
001875  2               LAB_2C80:
001875  2  7F 00 00 00          .BYTE   $7F,$00,$00,$00 ; 0.25
001879  2               LAB_26B5:
001879  2  84 20 00 00          .BYTE   $84,$20,$00,$00 ; 10.0000 divide by 10 constant
00187D  2               
00187D  2               ; This table is used in converting numbers to ASCII.
00187D  2               
00187D  2               LAB_2A9A:
00187D  2               LAB_2A9B        = LAB_2A9A+1
00187D  2               LAB_2A9C        = LAB_2A9B+1
00187D  2  FE 79 60             .BYTE   $FE,$79,$60     ; -100000
001880  2  00 27 10             .BYTE   $00,$27,$10     ; 10000
001883  2  FF FC 18             .BYTE   $FF,$FC,$18     ; -1000
001886  2  00 00 64             .BYTE   $00,$00,$64     ; 100
001889  2  FF FF F6             .BYTE   $FF,$FF,$F6     ; -10
00188C  2  00 00 01             .BYTE   $00,$00,$01     ; 1
00188F  2               
00188F  1               
00188F  1               ; I/O VECTORS
00188F  1                       .INCLUDE "iovect.asm"
00188F  2               ;__________________________________________________________
00188F  2               ;
00188F  2               ; BIOS JUMP TABLE (NATIVE)
00188F  2               ;__________________________________________________________
00188F  2               LPRINTVEC       = $00FD00
00188F  2               LINPVEC         = $00FD04
00188F  2               LINPWVEC        = $00FD08
00188F  2               LSetXYVEC       = $00FD0C
00188F  2               LCPYVVEC        = $00FD10
00188F  2               LSrlUpVEC       = $00FD14
00188F  2               LSetColorVEC    = $00FD18
00188F  2               LCURSORVEC      = $00FD1C
00188F  2               LUNCURSORVEC    = $00FD20
00188F  2               LWRITERTC       = $00FD24
00188F  2               LREADRTC        = $00FD28
00188F  2               LIECIN          = $00FD2C
00188F  2               LIECOUT         = $00FD30
00188F  2               LUNTALK         = $00FD34
00188F  2               LUNLSTN         = $00FD38
00188F  2               LLISTEN         = $00FD3C
00188F  2               LTALK           = $00FD40
00188F  2               LSETLFS         = $00FD44
00188F  2               LSETNAM         = $00FD48
00188F  2               LLOAD           = $00FD4C
00188F  2               LSAVE           = $00FD50
00188F  2               LIECINIT        = $00FD54
00188F  2               LIECCLCH        = $00FD58       ; close input and output channels
00188F  2               LIECOUTC        = $00FD5C       ; open a channel for output
00188F  2               LIECINPC        = $00FD60       ; open a channel for input
00188F  2               LIECOPNLF       = $00FD64       ; open a logical file
00188F  2               LIECCLSLF       = $00FD68       ; close a specified logical file
00188F  2               LClearScrVec    = $00FD6C       ; clear the  Screen
00188F  2               
00188F  2               CSRX            = $0330         ; CURRENT X POSITION
00188F  2               CSRY            = $0331         ; CURRENT Y POSITION
00188F  2               ConsoleDevice   = $0341         ; Current Console Device
00188F  2               CSRCHAR         = $0342         ; Character under the Cursor
00188F  2               VIDEOWIDTH      = $0343
00188F  2               DEFAULT_COLOR   = $0344         ; DEFAULT COLOR FOR PRINTING
00188F  2               TEMP            = $0345
00188F  2               TEMPOFFSET      = $0347
00188F  2               
00188F  2               IECSTW          = $000317
00188F  2               IECMSGM         = $00031F       ; message mode flag,
00188F  2               ; $C0 = both control and kernal messages,
00188F  2               ; $80 = control messages only,
00188F  2               ; $40 = kernal messages only,
00188F  2               ; $00 = neither control or kernal messages
00188F  2               LOADBUFL        = $000322       ; IEC buffer Pointer
00188F  2               LOADBUFH        = LOADBUFL+1
00188F  2               LOADBANK        = LOADBUFL+2    ; BANK buffer Pointer
00188F  2               IECSTRTL        = $00031D       ; IEC Start Address Pointer
00188F  2               IECSTRTH        = IECSTRTL+1
00188F  2               
00188F  2               VideoDisplayPage = $fe31
00188F  2               VideoTextMode   = $fe35
00188F  2               VideoLoresMode  = $fe36
00188F  2               VideoDoubleLores = $fe37
00188F  2               VideoHiresMode  = $fe38
00188F  2               VideoDoubleHires = $fe39
00188F  2               Video80col      = $fe3A
00188F  2               VideoMixedMode  = $fe3b
00188F  2               VideoQuadHires  = $fe3c
00188F  2               VideoMonoHires  = $fe3d
00188F  2               
00188F  2               
00188F  2               ;__________________________________________________________
00188F  2               
00188F  2               
00188F  2               
00188F  2               
00188F  2               ;___V_INPT_________________________________________________
00188F  2               ;
00188F  2               ; MAKE A BIOS CALL TO GET NON-BLOCKING CHARACTER INPUT
00188F  2               ; THIS COULD BE SERIAL OR KEYBOARD DEPENDING ON BIOS SETTING
00188F  2               ; RETURNS
00188F  2               ;   A: CHARACTER
00188F  2               ;      CARRY SET IF NO CHARACTER
00188F  2               ;
00188F  2               ;
00188F  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
00188F  2               ;__________________________________________________________
00188F  2               V_INPT:
00188F  2  22 04 FD 00          JSL     LINPVEC         ; INCHAR
001893  2  60                   RTS
001894  2               
001894  2               ;___V_OUTP_________________________________________________
001894  2               ;
001894  2               ; MAKE A BIOS CALL TO SEND CHARACTER TO OUTPUT
001894  2               ; THIS COULD BE SERIAL OR TMS9918 CHARACTER DISPLAY
001894  2               ;
001894  2               ;   A: CHARACTER
001894  2               ;
001894  2               ;
001894  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
001894  2               ;__________________________________________________________
001894  2               
001894  2               V_OUTP: ; send byte to output device
001894  2               ;        PHX
001894  2               ;        LDX     <VIDEOMODE
001894  2               ;        CPX     #0
001894  2               ;        BNE     V_OUTP1
001894  2  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001898  2               ;V_OUTP1:
001898  2               ;        PLX
001898  2  60                   RTS
001899  2               
001899  2               
001899  2                       .INCLUDE "diskcmds.asm"
001899  3               .P816
001899  3               ;___V_SAVE_________________________________________________
001899  3               ;
001899  3               ; UTILIZE BIOS TO SAVE BASIC RAM
001899  3               ;
001899  3               ; STORE CONTENTS IN RAM FROM "Smeml/h" TO "Svarl/h"-1 IN BANK "DATABANK"
001899  3               ;
001899  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
001899  3               ; THIS IS NATIVE '816 CODE
001899  3               ;__________________________________________________________
001899  3               V_SAVE: ; save BASIC program
001899  3  20 BE 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
00189C  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
00189E  3  D0 08                BNE     V_SAVE_GO       ; YES, CONTINUE ON
0018A0  3               V_SAVE_ERR:
0018A0  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
0018A2  3  20 A0 26             JSR     LAB_XERR
0018A5  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0018A8  3               V_SAVE_GO:
0018A8  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0018AC  3  A9 C0                LDA     #$C0
0018AE  3  8F 1F 03 00          STA     f:IECMSGM
0018B2  3  A0 00                LDY     #$00
0018B4  3               V_SAVE_1:
0018B4  3  8B DA A2 01          LDAINDIRECTY ssptr_l
0018B8  3  B5 B8 C9 00  
0018BC  3  D0 04 A2 00  
0018CA  3  BB                   TYX
0018CB  3  9F 00 0F 00          STA     F:FNBUFFER,X
0018CF  3  C9 00                CMP     #$00
0018D1  3  F0 07                BEQ     V_SAVE_2
0018D3  3  C9 22                CMP     #'"'
0018D5  3  F0 03                BEQ     V_SAVE_2
0018D7  3  C8                   INY
0018D8  3  D0 DA                BNE     V_SAVE_1
0018DA  3               V_SAVE_2:
0018DA  3  98                   TYA                     ; fn length
0018DB  3  A2 00                LDX     #<FNBUFFER
0018DD  3  A0 0F                LDY     #>FNBUFFER
0018DF  3  8B                   PHB
0018E0  3  DA A2 00 DA          SETBANK 0
0018E4  3  AB FA        
0018E6  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0018EA  3  AB                   PLB
0018EB  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0018EE  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0018F1  3  A0 01                LDY#1                   ; secondary address
0018F3  3  8B                   PHB
0018F4  3  DA A2 00 DA          SETBANK 0
0018F8  3  AB FA        
0018FA  3  22 44 FD 00          JSL     LSETLFS
0018FE  3  A5 7A                LDA     <Smemh
001900  3  8F 1E 03 00          STA     F:IECSTRTH
001904  3  A5 79                LDA     <Smeml
001906  3  8F 1D 03 00          STA     F:IECSTRTL
00190A  3  A5 7B                LDA     <Svarl
00190C  3  8F 22 03 00          STA     F:LOADBUFL
001910  3  A5 7C                LDA     <Svarh
001912  3  8F 23 03 00          STA     F:LOADBUFH
001916  3  A9 02                LDA     #DATABANK
001918  3  8F 24 03 00          STA     F:LOADBANK
00191C  3  22 50 FD 00          JSL     LSAVE
001920  3  AB                   PLB
001921  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001923  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001925  3  20 41 2F             JSR     LAB_18C3
001928  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00192B  3               
00192B  3               
00192B  3               
00192B  3               
00192B  3               ;___V_LOAD_________________________________________________
00192B  3               ;
00192B  3               ; UTILIZE BIOS TO LOAD BASIC RAM
00192B  3               ;
00192B  3               ; LOAD CONTENTS TO RAM "Smeml/h" BANK "DATABANK"
00192B  3               ;
00192B  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
00192B  3               ; THIS IS NATIVE '816 CODE
00192B  3               ;__________________________________________________________
00192B  3               V_LOAD: ; load BASIC program
00192B  3  20 BE 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
00192E  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001930  3  D0 08                BNE     V_LOAD_GO       ; YES, CONTINUE ON
001932  3               V_LOAD_ERR:
001932  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001934  3  20 A0 26             JSR     LAB_XERR
001937  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00193A  3               V_LOAD_GO:
00193A  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
00193E  3  A9 C0                LDA     #$C0
001940  3  8F 1F 03 00          STA     f:IECMSGM
001944  3  A0 00                LDY     #$00
001946  3               V_LOAD_1:
001946  3  8B DA A2 01          LDAINDIRECTY ssptr_l
00194A  3  B5 B8 C9 00  
00194E  3  D0 04 A2 00  
00195C  3  BB                   TYX
00195D  3  9F 00 0F 00          STA     F:FNBUFFER,X
001961  3  C9 00                CMP     #$00
001963  3  F0 07                BEQ     V_LOAD_2
001965  3  C9 22                CMP     #'"'
001967  3  F0 03                BEQ     V_LOAD_2
001969  3  C8                   INY
00196A  3  D0 DA                BNE     V_LOAD_1
00196C  3               V_LOAD_2:
00196C  3  98                   TYA                     ; fn length
00196D  3  A2 00                LDX     #<FNBUFFER
00196F  3  A0 0F                LDY     #>FNBUFFER
001971  3  8B                   PHB
001972  3  DA A2 00 DA          SETBANK 0
001976  3  AB FA        
001978  3  22 48 FD 00          JSL     LSETNAM         ; setnam
00197C  3  AB                   PLB
00197D  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001980  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001983  3  A0 01                LDY#1                   ; secondary address
001985  3  8B                   PHB
001986  3  DA A2 00 DA          SETBANK 0
00198A  3  AB FA        
00198C  3  22 44 FD 00          JSL     LSETLFS
001990  3  A5 7A                LDA     <Smemh
001992  3  8F 23 03 00          STA     F:LOADBUFH
001996  3  A5 79                LDA     <Smeml
001998  3  8F 22 03 00          STA     F:LOADBUFL
00199C  3  A9 02                LDA     #DATABANK
00199E  3  8F 24 03 00          STA     F:LOADBANK
0019A2  3  22 4C FD 00          JSL     LLOAD
0019A6  3  AF 23 03 00          LDA     F:LOADBUFH
0019AA  3  85 7C                STA     <Svarh
0019AC  3  AF 22 03 00          LDA     F:LOADBUFL
0019B0  3  85 7B                STA     <Svarl
0019B2  3  AB                   PLB
0019B3  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0019B5  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0019B7  3  20 41 2F             JSR     LAB_18C3
0019BA  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0019BD  3               
0019BD  3               
0019BD  3               ;___V_ERR___________________________________________________
0019BD  3               ;
0019BD  3               ; UTILIZE BIOS TO REPORT IEC IO CHANNEL STATUS
0019BD  3               ;
0019BD  3               ;
0019BD  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
0019BD  3               ; THIS IS NATIVE '816 CODE
0019BD  3               ;__________________________________________________________
0019BD  3               V_ERR:
0019BD  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0019C1  3  A9 C0                LDA     #$C0
0019C3  3  8F 1F 03 00          STA     f:IECMSGM
0019C7  3  A0 00                LDY     #$00
0019C9  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0019CC  3               GETIECSTATUS:
0019CC  3  8B                   PHB
0019CD  3  DA                   PHX
0019CE  3  DA A2 00 DA          SETBANK 0
0019D2  3  AB FA        
0019D4  3  A9 0D                LDA     #13
0019D6  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019DA  3  A9 0A                LDA     #10
0019DC  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019E0  3  A9 00                LDA     #0              ; fn length
0019E2  3  A2 00                LDX     #0
0019E4  3  A0 00                LDY     #0
0019E6  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0019EA  3  FA                   PLX                     ; Device Number
0019EB  3  A0 0F                LDY     #15             ; secondary address
0019ED  3  A9 0F                LDA     #15             ; LFN NUMBER
0019EF  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
0019F3  3  22 64 FD 00          JSL     LIECOPNLF
0019F7  3  B0 1E                BCS     IECERROR
0019F9  3  A2 0F                LDX     #15
0019FB  3  22 60 FD 00          JSL     LIECINPC
0019FF  3  B0 16                BCS     IECERROR
001A01  3               GETIECSTATUS_1:
001A01  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A05  3  B0 10                BCS     IECERROR
001A07  3  C9 0D                CMP     #13
001A09  3  F0 0C                BEQ     IECERROR
001A0B  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A0F  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001A13  3  4A                   LSR                     ; shift time out read ..
001A14  3  4A                   LSR                     ; .. into carry bit
001A15  3  90 EA                BCC     GETIECSTATUS_1  ; all ok, do another
001A17  3               IECERROR:
001A17  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001A1B  3  A9 0F                LDA     #15
001A1D  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001A21  3  A9 0D                LDA     #13
001A23  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A27  3  A9 0A                LDA     #10
001A29  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A2D  3  AB                   PLB
001A2E  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001A30  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001A32  3  20 41 2F             JSR     LAB_18C3
001A35  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001A38  3               
001A38  3               
001A38  3               
001A38  3               ;___V_DIR___________________________________________________
001A38  3               ;
001A38  3               ; UTILIZE BIOS TO DISPLAY DISK DIRECTORY
001A38  3               ;
001A38  3               ;
001A38  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
001A38  3               ; THIS IS NATIVE '816 CODE
001A38  3               ;__________________________________________________________
001A38  3               V_DIR:
001A38  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001A3C  3  A9 C0                LDA     #$C0
001A3E  3  8F 1F 03 00          STA     f:IECMSGM
001A42  3  A0 00                LDY     #$00
001A44  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001A47  3  8B                   PHB
001A48  3  DA                   PHX
001A49  3  A9 24                LDA     #'$'
001A4B  3  8F 00 0F 00          STA     f:FNBUFFER
001A4F  3  DA A2 00 DA          SETBANK 0
001A53  3  AB FA        
001A55  3  A9 0D                LDA     #13
001A57  3  22 00 FD 00          JSL     LPRINTVEC
001A5B  3  A9 0A                LDA     #10
001A5D  3  22 00 FD 00          JSL     LPRINTVEC
001A61  3  A9 01                LDA     #1              ; fn length
001A63  3  A2 00                LDX     #<FNBUFFER
001A65  3  A0 0F                LDY     #>FNBUFFER
001A67  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001A6B  3  FA                   PLX                     ; Device Number
001A6C  3  A0 00                LDY     #0              ; secondary address
001A6E  3  A9 0F                LDA     #15             ; LFN NUMBER
001A70  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001A74  3  22 64 FD 00          JSL     LIECOPNLF
001A78  3  B0 9D                BCS     IECERROR
001A7A  3  A2 0F                LDX     #15
001A7C  3  22 60 FD 00          JSL     LIECINPC
001A80  3  B0 95                BCS     IECERROR
001A82  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A86  3               GETIECDIRECTORY_1:
001A86  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A8A  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A8E  3  48                   PHA
001A8F  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A93  3  FA                   PLX
001A94  3  AB                   PLB
001A95  3  8B                   PHB
001A96  3  20 5F 46             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
001A99  3  DA A2 00 DA          SETBANK 0
001A9D  3  AB FA        
001A9F  3  A9 20                LDA     #' '
001AA1  3  22 00 FD 00          JSL     LPRINTVEC
001AA5  3  A9 20                LDA     #' '
001AA7  3  22 00 FD 00          JSL     LPRINTVEC
001AAB  3  22 2C FD 00          JSL     LIECIN
001AAF  3  C9 00                CMP     #$00
001AB1  3  F0 04                BEQ     GETIECDIRECTORY_2A
001AB3  3  22 00 FD 00          JSL     LPRINTVEC
001AB7  3               GETIECDIRECTORY_2A:
001AB7  3  22 2C FD 00          JSL     LIECIN
001ABB  3  C9 00                CMP     #$00
001ABD  3  F0 04                BEQ     GETIECDIRECTORY_2
001ABF  3  22 00 FD 00          JSL     LPRINTVEC
001AC3  3               GETIECDIRECTORY_2:
001AC3  3  22 2C FD 00          JSL     LIECIN          ; input ENTRY TEXT byte from the serial bus
001AC7  3  22 00 FD 00          JSL     LPRINTVEC
001ACB  3  C9 00                CMP     #$00
001ACD  3  F0 29                BEQ     GETIECDIRECTORY_3; END ENTRY
001ACF  3               
001ACF  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001AD3  3  4A                   LSR                     ; shift time out read ..
001AD4  3  4A                   LSR                     ; .. into carry bit
001AD5  3  90 EC                BCC     GETIECDIRECTORY_2; all ok, do another
001AD7  3               GETIECDIRECTORY_END:
001AD7  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001ADB  3  A9 0F                LDA     #15
001ADD  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001AE1  3  A9 0D                LDA     #13
001AE3  3  22 00 FD 00          JSL     LPRINTVEC
001AE7  3  A9 0A                LDA     #10
001AE9  3  22 00 FD 00          JSL     LPRINTVEC
001AED  3  AB                   PLB
001AEE  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001AF0  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001AF2  3  20 41 2F             JSR     LAB_18C3
001AF5  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001AF8  3               
001AF8  3               GETIECDIRECTORY_3:
001AF8  3  A9 0D                LDA     #13
001AFA  3  22 00 FD 00          JSL     LPRINTVEC
001AFE  3  A9 0A                LDA     #10
001B00  3  22 00 FD 00          JSL     LPRINTVEC
001B04  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001B08  3  C9 01                CMP     #$01
001B0A  3  D0 CB                BNE     GETIECDIRECTORY_END
001B0C  3  4C 86 1A             JMP     GETIECDIRECTORY_1
001B0F  3               
001B0F  3               
001B0F  3               ;___V_DISKCMD______________________________________________
001B0F  3               ;
001B0F  3               ; UTILIZE BIOS TO SEND A DISK COMMAND
001B0F  3               ;
001B0F  3               ;
001B0F  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (COMMAND) AND ONE NUMERIC VAR (DEVICE)
001B0F  3               ; THIS IS NATIVE '816 CODE
001B0F  3               ;__________________________________________________________
001B0F  3               V_DISKCMD:                      ; save BASIC program
001B0F  3  20 BE 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001B12  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001B14  3  D0 08                BNE     V_DISKCMD_GO    ; YES, CONTINUE ON
001B16  3               V_DISKCMD_ERR:
001B16  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001B18  3  20 A0 26             JSR     LAB_XERR
001B1B  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001B1E  3               V_DISKCMD_GO:
001B1E  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001B22  3  A9 C0                LDA     #$C0
001B24  3  8F 1F 03 00          STA     f:IECMSGM
001B28  3  20 D1 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001B2B  3               ; space returns with A = length, X=$71=pointer low byte,
001B2B  3               ; Y=$72=pointer high byte
001B2B  3  86 B8                STX     <ssptr_l
001B2D  3  84 B9                STY     <ssptr_h
001B2F  3  AA                   TAX
001B30  3  A0 00                LDY     #$00
001B32  3               V_DISKCMD_1:
001B32  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001B36  3  B5 B8 C9 00  
001B3A  3  D0 04 A2 00  
001B48  3  DA                   PHX
001B49  3  BB                   TYX
001B4A  3  9F 00 0F 00          STA     f:FNBUFFER,X
001B4E  3  FA                   PLX
001B4F  3  CA                   DEX
001B50  3  E0 00                CPX     #$00
001B52  3  F0 03                BEQ     V_DISKCMD_2
001B54  3  C8                   INY
001B55  3  D0 DB                BNE     V_DISKCMD_1
001B57  3               V_DISKCMD_2:
001B57  3  BB                   TYX
001B58  3  A9 00                LDA     #0
001B5A  3  9F 01 0F 00          STA     f:FNBUFFER+1,X
001B5E  3  8B                   PHB
001B5F  3  DA A2 00 DA          SETBANK 0
001B63  3  AB FA        
001B65  3  A9 00                LDA     #0              ; fn length
001B67  3  A2 00                LDX     #0
001B69  3  A0 00                LDY     #0
001B6B  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001B6F  3  AB                   PLB
001B70  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001B73  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER (DEVICE NUMBER), RETURN IN X
001B76  3  8B                   PHB
001B77  3  DA A2 00 DA          SETBANK 0
001B7B  3  AB FA        
001B7D  3  A0 0F                LDY     #15             ; secondary address
001B7F  3  A9 0F                LDA     #15             ; LFN NUMBER
001B81  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001B85  3  22 64 FD 00          JSL     LIECOPNLF
001B89  3  B0 27                BCS     V_DISKCMD_ERR1
001B8B  3  A2 0F                LDX     #15
001B8D  3  22 5C FD 00          JSL     LIECOUTC
001B91  3  A2 00                LDX     #$00
001B93  3               V_DISKCMD_3:
001B93  3  BF 00 0F 00          LDA     f:FNBUFFER,X
001B97  3  C9 00                CMP     #$00
001B99  3  F0 09                BEQ     V_DISKCMD_4
001B9B  3  22 30 FD 00          JSL     LIECOUT         ; OUTPUT a byte To the serial bus
001B9F  3  B0 11                BCS     V_DISKCMD_ERR1
001BA1  3               
001BA1  3  E8                   INX
001BA2  3  80 EF                BRA     V_DISKCMD_3
001BA4  3               V_DISKCMD_4:
001BA4  3  A9 0F                LDA     #15
001BA6  3  22 38 FD 00          JSL     LUNLSTN
001BAA  3  A9 0F                LDA     #15
001BAC  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BB0  3  AB                   PLB
001BB1  3  60                   RTS
001BB2  3               V_DISKCMD_ERR1:
001BB2  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001BB6  3  A9 0F                LDA     #15
001BB8  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BBC  3  A9 0D                LDA     #13
001BBE  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001BC2  3  A9 0A                LDA     #10
001BC4  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001BC8  3  AB                   PLB
001BC9  3  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001BCB  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001BCD  3  20 41 2F             JSR     LAB_18C3
001BD0  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001BD3  3               
001BD3  3               
001BD3  3               
001BD3  3               ;___V_OPEN__________________________________________________
001BD3  3               ;
001BD3  3               ; UTILIZE BIOS TO OPEN AN IEC IO CHANNEL
001BD3  3               ;
001BD3  3               ;
001BD3  3               ; BASIC COMMAND EXPECTS THREE NUMERIC VARS, AND ONE STRING
001BD3  3               ; VAR
001BD3  3               ; FILE#, DEVICE, SECONDARY ADDRESS, FILENAME
001BD3  3               ; THIS IS NATIVE '816 CODE
001BD3  3               ;__________________________________________________________
001BD3  3               V_OPEN:
001BD3  3  8B                   PHB
001BD4  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001BD8  3  A9 C0                LDA     #$C0
001BDA  3  8F 1F 03 00          STA     f:IECMSGM
001BDE  3  A0 00                LDY     #$00
001BE0  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001BE3  3  DA                   PHX
001BE4  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BE7  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001BEA  3  DA                   PHX
001BEB  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BEE  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (SECONDARY ADDRESS)
001BF1  3  DA                   PHX
001BF2  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BF5  3  20 BE 31             JSR     LAB_EVEX        ; GET THE FOURTH PARAMETER
001BF8  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001BFA  3  D0 08                BNE     V_OPEN_GO       ; YES, CONTINUE ON
001BFC  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001BFE  3  20 A0 26             JSR     LAB_XERR
001C01  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001C04  3               V_OPEN_GO:
001C04  3  20 D1 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001C07  3               ; space returns with A = length, X=$71=pointer low byte,
001C07  3               ; Y=$72=pointer high byte
001C07  3  86 B8                STX     <ssptr_l
001C09  3  84 B9                STY     <ssptr_h
001C0B  3  AA                   TAX
001C0C  3  A0 00                LDY     #$00
001C0E  3               V_OPEN_1:
001C0E  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001C12  3  B5 B8 C9 00  
001C16  3  D0 04 A2 00  
001C24  3  DA                   PHX
001C25  3  BB                   TYX
001C26  3  9F 00 0F 00          STA     f:FNBUFFER,X
001C2A  3  FA                   PLX
001C2B  3  CA                   DEX
001C2C  3  E0 00                CPX     #$00
001C2E  3  F0 03                BEQ     V_OPEN_2
001C30  3  C8                   INY
001C31  3  D0 DB                BNE     V_OPEN_1
001C33  3               V_OPEN_2:
001C33  3  C8                   INY
001C34  3  98                   TYA                     ; fn length
001C35  3  A2 00                LDX     #<FNBUFFER
001C37  3  A0 0F                LDY     #>FNBUFFER
001C39  3  DA A2 00 DA          SETBANK 0
001C3D  3  AB FA        
001C3F  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001C43  3  FA                   PLX
001C44  3  9B                   TXY                     ; secondary address
001C45  3  FA                   PLX                     ; DEVICE NUMBER
001C46  3  68                   PLA                     ; LFN NUMBER
001C47  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001C4B  3  22 64 FD 00          JSL     LIECOPNLF
001C4F  3  B0 02                BCS     V_OPEN_IECERROR
001C51  3  AB                   PLB
001C52  3  60                   RTS
001C53  3                       V_OPEN_IECERROR:
001C53  3  4C 17 1A             JMP     IECERROR
001C56  3               
001C56  3               ;___V_CLOSE________________________________________________
001C56  3               ;
001C56  3               ; UTILIZE BIOS TO CLOSE AN IEC IO CHANNEL
001C56  3               ;
001C56  3               ;
001C56  3               ; THIS IS NATIVE '816 CODE
001C56  3               ;__________________________________________________________
001C56  3               V_CLOSE:
001C56  3  8B                   PHB
001C57  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C5A  3  DA A2 00 DA          SETBANK 0
001C5E  3  AB FA        
001C60  3  8A                   TXA
001C61  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001C65  3  AB                   PLB
001C66  3  60                   RTS
001C67  3               
001C67  3               ;___V_IECINPUT_______________________________________________
001C67  3               ;
001C67  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS INPUT
001C67  3               ;
001C67  3               ;
001C67  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001C67  3               ; THIS IS NATIVE '816 CODE
001C67  3               ;__________________________________________________________
001C67  3               V_IECINPUT:
001C67  3  8B                   PHB
001C68  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C6B  3  DA A2 00 DA          SETBANK 0
001C6F  3  AB FA        
001C71  3  22 60 FD 00          JSL     LIECINPC
001C75  3  B0 02                BCS     V_IECINPUT_IECERROR
001C77  3  AB                   PLB
001C78  3  60                   RTS
001C79  3                       V_IECINPUT_IECERROR:
001C79  3  AB                   PLB
001C7A  3  4C 17 1A             JMP     IECERROR
001C7D  3               
001C7D  3               ;___V_IECOUTPUT______________________________________________
001C7D  3               ;
001C7D  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS OUTPUT
001C7D  3               ;
001C7D  3               ;
001C7D  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001C7D  3               ; THIS IS NATIVE '816 CODE
001C7D  3               ;__________________________________________________________
001C7D  3               V_IECOUTPUT:
001C7D  3  8B                   PHB
001C7E  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C81  3  DA A2 00 DA          SETBANK 0
001C85  3  AB FA        
001C87  3  22 5C FD 00          JSL     LIECOUTC
001C8B  3  B0 02                BCS     V_IECOUTPUT_IECERROR
001C8D  3  AB                   PLB
001C8E  3  60                   RTS
001C8F  3                       V_IECOUTPUT_IECERROR:
001C8F  3  AB                   PLB
001C90  3  4C 17 1A             JMP     IECERROR
001C93  3               
001C93  3               
001C93  3               ;___V_PUTN__________________________________________________
001C93  3               ;
001C93  3               ; UTILIZE BIOS TO PRINT TO AN IEC IO CHANNEL
001C93  3               ;
001C93  3               ; STARTING WITH FILE#, OUTPUT STRING
001C93  3               ; THIS IS NATIVE '816 CODE
001C93  3               ;__________________________________________________________
001C93  3               V_PUTN:
001C93  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C96  3  86 04                STX     <TMPFLG
001C98  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C9B  3               
001C9B  3  20 BE 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001C9E  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001CA0  3  D0 08                BNE     V_PUTN_GO       ; YES, CONTINUE ON
001CA2  3               V_PUTN_ERR:
001CA2  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001CA4  3  20 A0 26             JSR     LAB_XERR
001CA7  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001CAA  3               V_PUTN_GO:
001CAA  3  20 D1 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001CAD  3               ; space returns with A = length, X=$71=pointer low byte,
001CAD  3               ; Y=$72=pointer high byte
001CAD  3  86 B8                STX     <ssptr_l
001CAF  3  84 B9                STY     <ssptr_h
001CB1  3  AA                   TAX
001CB2  3  A0 00                LDY     #$00
001CB4  3               V_PUTN_1:
001CB4  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001CB8  3  B5 B8 C9 00  
001CBC  3  D0 04 A2 00  
001CCA  3  DA                   PHX
001CCB  3  5A                   PHY
001CCC  3  8B                   PHB
001CCD  3  DA A2 00 DA          SETBANK 0
001CD1  3  AB FA        
001CD3  3  A6 04                LDX     <TMPFLG
001CD5  3  48                   PHA
001CD6  3  22 30 FD 00          JSL     LIECOUT
001CDA  3  68                   PLA
001CDB  3  22 00 FD 00          JSL     LPRINTVEC
001CDF  3  AB                   PLB
001CE0  3  7A                   PLY
001CE1  3  FA                   PLX
001CE2  3  CA                   DEX
001CE3  3  E0 00                CPX     #00
001CE5  3  F0 03                BEQ     V_PUTN_2
001CE7  3  C8                   INY
001CE8  3  D0 CA                BNE     V_PUTN_1
001CEA  3               V_PUTN_2:
001CEA  3  60                   RTS
001CEB  3               
001CEB  3               
001CEB  3               
001CEB  3               ;___LAB_IECST_______________________________________________
001CEB  3               ;
001CEB  3               ; RETURN IEC STATUS BYTE
001CEB  3               ;
001CEB  3               ; THIS IS NATIVE '816 CODE
001CEB  3               ;__________________________________________________________
001CEB  3               LAB_IECST:
001CEB  3  48                   PHA
001CEC  3  AF 17 03 00          LDA     f:IECSTW        ; get IECSTW into low byte
001CF0  3  A8                   TAY
001CF1  3  68                   PLA
001CF2  3  A9 00                LDA     #0              ; NO high byte
001CF4  3  20 79 37             JSR     LAB_AYFC
001CF7  3  60                   RTS
001CF8  3               LAB_PIECST:
001CF8  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
001CFA  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
001CFE  3  60                   RTS
001CFF  3               
001CFF  3               ;___V_GETN_________________________________________________
001CFF  3               ;
001CFF  3               ; UTILIZE BIOS TO INPUT FROM AN IEC IO CHANNEL
001CFF  3               ;
001CFF  3               ; LOTS OF PARAMETERS :)  STARTING WITH FILE#
001CFF  3               ; THIS IS NATIVE '816 CODE
001CFF  3               ;__________________________________________________________
001CFF  3               V_GETN:
001CFF  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001D02  3  DA                   PHX                     ; STORE DEVICE NUMBER
001D03  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D06  3  20 BB 34             JSR     LAB_GVAR        ; get var address
001D09  3  85 97                STA     <Lvarpl         ; save var address low byte
001D0B  3  84 98                STY     <Lvarph         ; save var address high byte
001D0D  3  FA                   PLX
001D0E  3  8B                   PHB
001D0F  3  DA A2 00 DA          SETBANK 0
001D13  3  AB FA        
001D15  3  A6 04                LDX     <TMPFLG
001D17  3  22 2C FD 00          JSL     LIECIN          ; get input byte
001D1B  3  AB                   PLB
001D1C  3               
001D1C  3  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
001D1E  3  30 07                BMI     LAB_GETNS       ; go get string character
001D20  3               ; was numeric get
001D20  3  A8                   TAY                     ; copy character to Y
001D21  3  20 86 37             JSR     LAB_1FD0        ; convert Y to byte in FAC1
001D24  3  4C AE 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
001D27  3               LAB_GETNS:
001D27  3  48                   PHA
001D28  3  A9 01                LDA     #$01
001D2A  3  20 EA 38             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
001D2D  3               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
001D2D  3  68                   PLA                     ; get character back
001D2E  3  A0 00                LDY     #$00            ; clear index
001D30  3  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
001D34  3  01 B5 AD C9  
001D38  3  00 D0 04 A2  
001D46  3  20 4D 39             JSR     LAB_RTST        ; check for space on descriptor stack then put address
001D49  3               ; and length on descriptor stack and update stack pointers
001D49  3  4C 58 2D             JMP     LAB_17D5        ; do string LET and return
001D4C  3               
001D4C  2                       .INCLUDE "screencmds.asm"
001D4C  3               ;___SCNCLR_________________________________________________
001D4C  3               ;
001D4C  3               ; UTILIZE BIOS TO CLEAR SCREEN
001D4C  3               ;
001D4C  3               ;
001D4C  3               ; THIS IS NATIVE '816 CODE
001D4C  3               ;__________________________________________________________
001D4C  3               V_SCNCLR:
001D4C  3  8B                   PHB
001D4D  3  DA A2 00 DA          SETBANK 0
001D51  3  AB FA        
001D53  3  22 6C FD 00          JSL     LClearScrVec
001D57  3  AB                   PLB
001D58  3  60                   RTS
001D59  3               
001D59  3               
001D59  3               ;___LOCATE_________________________________________________
001D59  3               ;
001D59  3               ; UTILIZE BIOS TO LOCATE CURSOR
001D59  3               ;
001D59  3               ;  TAKES TWO PARAMETERS X,Y
001D59  3               ;
001D59  3               ; THIS IS NATIVE '816 CODE
001D59  3               ;__________________________________________________________
001D59  3               V_LOCATE:
001D59  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001D5C  3  DA                   PHX
001D5D  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D60  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001D63  3  7A                   PLY
001D64  3  8B                   PHB
001D65  3  DA A2 00 DA          SETBANK 0
001D69  3  AB FA        
001D6B  3  22 0C FD 00          JSL     LSetXYVEC
001D6F  3  AB                   PLB
001D70  3  60                   RTS
001D71  3               
001D71  3               ;___COLOR_________________________________________________
001D71  3               ;
001D71  3               ; UTILIZE BIOS TO SET COLORS
001D71  3               ;
001D71  3               ;  TAKES TWO PARAMETERS BACKGROUND,FOREGROUND
001D71  3               ;
001D71  3               ; THIS IS NATIVE '816 CODE
001D71  3               ;__________________________________________________________
001D71  3               V_COLOR:
001D71  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001D74  3  8A                   TXA
001D75  3  29 0F                AND     #$0F
001D77  3  48                   PHA
001D78  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D7B  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001D7E  3  8A                   TXA
001D7F  3  29 0F                AND     #$0F
001D81  3  85 04                STA     <TMPFLG
001D83  3  68                   PLA
001D84  3  18                   CLC
001D85  3  0A                   ASL
001D86  3  0A                   ASL
001D87  3  0A                   ASL
001D88  3  0A                   ASL
001D89  3  05 04                ORA     <TMPFLG
001D8B  3  8B                   PHB
001D8C  3  DA A2 00 DA          SETBANK 0
001D90  3  AB FA        
001D92  3  22 18 FD 00          JSL     LSetColorVEC
001D96  3  AB                   PLB
001D97  3  60                   RTS
001D98  3               
001D98  3               ;___V_SPEEK()______________________________________________
001D98  3               ;
001D98  3               ; GET VALUE FROM SCREEN MEMORY
001D98  3               ;
001D98  3               ;  TAKES ONE PARAMETER (ADDRESS), RETURNS VALUE
001D98  3               ;
001D98  3               ; THIS IS NATIVE '816 CODE
001D98  3               ;__________________________________________________________
001D98  3               V_SPEEK:
001D98  3  20 FE 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
001D9B  3               
001D9B  3  8B                   PHB
001D9C  3  DA A2 00 DA          SETBANK 0
001DA0  3  AB FA        
001DA2  3  B2 11                LDA     (Itempl)
001DA4  3  AB                   PLB
001DA5  3  A8                   TAY                     ; copy byte to Y
001DA6  3  4C 86 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
001DA9  3               
001DA9  3               
001DA9  3               ;___V_SPOKE_________________________________________________
001DA9  3               ;
001DA9  3               ; PUT VALUE IN SCREEN MEMORY
001DA9  3               ;
001DA9  3               ;  TAKES TWO PARAMETERS ADDRESS,VALUE
001DA9  3               ;
001DA9  3               ; THIS IS NATIVE '816 CODE
001DA9  3               ;__________________________________________________________
001DA9  3               V_SPOKE:
001DA9  3  20 E5 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
001DAC  3  8B                   PHB
001DAD  3  DA A2 00 DA          SETBANK 0
001DB1  3  AB FA        
001DB3  3  8A                   TXA
001DB4  3  92 11                STA     (Itempl)
001DB6  3  AB                   PLB
001DB7  3  60                   RTS
001DB8  3               
001DB8  3               ;___V_SCREEN_________________________________________________
001DB8  3               ;
001DB8  3               ;  SET SCREEN MODE
001DB8  3               ;
001DB8  3               ;  TAKES UP TO THREE PARAMETERS
001DB8  3               ;  FIRST PARAMETER SCREEN MODE
001DB8  3               ;  0=TEXT MODE
001DB8  3               ;  1=LORES MODE
001DB8  3               ;  2=HIRES MODE
001DB8  3               ;
001DB8  3               ;  TEXT MODE PARAMETERS
001DB8  3               ;  0=40 COLUMNS
001DB8  3               ;  1=80 COLUMNS
001DB8  3               ;
001DB8  3               ;  LORES MODE SECOND PARAMETER
001DB8  3               ;  0=SINGLE LORES
001DB8  3               ;  1=DOUBLE LORES
001DB8  3               ;  LORES MODE THIRD PARAMETER
001DB8  3               ;  0=MIXED MODE
001DB8  3               ;  1=FULL SCREEN MODE
001DB8  3               ;
001DB8  3               ;  HIRES MODE SECOND PARAMETER
001DB8  3               ;  0=SINGLE HIRES
001DB8  3               ;  1=DOUBLE HIRES
001DB8  3               ;  2=QUAD HIRES
001DB8  3               ;  3=MONO HIRES
001DB8  3               ;  HIRES MODE THIRD PARAMETER
001DB8  3               ;  0=MIXED MODE
001DB8  3               ;  1=FULL SCREEN MODE
001DB8  3               ;
001DB8  3               ; THIS IS NATIVE '816 CODE
001DB8  3               ;__________________________________________________________
001DB8  3               V_SCREEN:
001DB8  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (MODE)
001DBB  3               V_SCREEN1:
001DBB  3  86 06                STX     <VIDEOMODE
001DBD  3  E0 00                CPX     #00
001DBF  3  D0 03                BNE     *+5
001DC1  3  4C DB 1D             JMP     SETUPMODE0
001DC4  3  E0 01                CPX     #01
001DC6  3  D0 03                BNE     *+5
001DC8  3  4C 13 1E             JMP     SETUPMODE1
001DCB  3  E0 02                CPX     #02
001DCD  3  D0 03                BNE     *+5
001DCF  3  4C 79 1E             JMP     SETUPMODE2
001DD2  3               
001DD2  3  A2 02                LDX     #$02            ; SYNTAX ERROR
001DD4  3  20 A0 26             JSR     LAB_XERR
001DD7  3  4C 79 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001DDA  3  60                   RTS
001DDB  3               
001DDB  3               SETUPMODE0:                     ; TEXT MODE
001DDB  3  A9 01                LDA     #$01
001DDD  3  8F 35 FE 00          STA     F:VideoTextMode
001DE1  3  A9 02                LDA     #$02
001DE3  3  8F 36 FE 00          STA     F:VideoLoresMode
001DE7  3  8F 38 FE 00          STA     F:VideoHiresMode
001DEB  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001DEE  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001DF1  3  E0 00                CPX     #$00
001DF3  3  D0 0E                BNE     SETUPMODE0_80
001DF5  3  A9 02                LDA     #$02
001DF7  3  8F 3A FE 00          STA     F:Video80col
001DFB  3  A9 28                LDA     #40
001DFD  3  8F 43 03 00          STA     F:VIDEOWIDTH
001E01  3  80 0C                BRA     SETUPMODE0_CLEAR
001E03  3               SETUPMODE0_80:
001E03  3  A9 01                LDA     #$01
001E05  3  8F 3A FE 00          STA     F:Video80col
001E09  3  A9 50                LDA     #80
001E0B  3  8F 43 03 00          STA     F:VIDEOWIDTH
001E0F  3               SETUPMODE0_CLEAR:
001E0F  3  4C 4C 1D             JMP     V_SCNCLR
001E12  3  60                   RTS
001E13  3               
001E13  3               SETUPMODE1:                     ; LORES MODE
001E13  3  A9 01                LDA     #$01
001E15  3  8F 36 FE 00          STA     F:VideoLoresMode
001E19  3  A9 02                LDA     #$02
001E1B  3  8F 35 FE 00          STA     F:VideoTextMode
001E1F  3  8F 38 FE 00          STA     F:VideoHiresMode
001E23  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E26  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001E29  3               
001E29  3  E0 00                CPX     #$00
001E2B  3  D0 08                BNE     SETUPMODE1_DOUBLE
001E2D  3  A9 02                LDA     #$02
001E2F  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E33  3  80 0A                BRA     SETUPMODE1_CLEAR
001E35  3               SETUPMODE1_DOUBLE:
001E35  3  A9 01                LDA     #$01
001E37  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E3B  3  A9 11                LDA     #$11
001E3D  3  85 06                STA     <VIDEOMODE
001E3F  3               SETUPMODE1_CLEAR:
001E3F  3  08                   PHP                     ; Clear Lores RAM
001E40  3  8B                   PHB
001E41  3  DA A2 00 DA          SETBANK 0
001E45  3  AB FA        
001E47  3  C2 10                INDEX16
001E49  3  A9 00                LDA     #$00
001E4B  3  A2 00 00             LDX     #$0000
001E4E  3               :
001E4E  3  9D 00 20             STA     $2000,X
001E51  3  E8                   INX
001E52  3  E0 00 08             CPX     #$0800
001E55  3  D0 F7                BNE     :-
001E57  3  E2 10                INDEX8
001E59  3  AB                   PLB
001E5A  3  28                   PLP
001E5B  3  20 E0 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001E5E  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X
001E61  3  E0 00                CPX     #$00
001E63  3  D0 07                BNE     SETUPMODE1_MIXED
001E65  3  A9 02                LDA     #$02
001E67  3  8F 3B FE 00          STA     F:VideoMixedMode
001E6B  3  60                   RTS
001E6C  3               SETUPMODE1_MIXED:
001E6C  3  A9 01                LDA     #$01
001E6E  3  8F 3B FE 00          STA     F:VideoMixedMode
001E72  3  A5 06                LDA     <VIDEOMODE
001E74  3  09 80                ORA     #$80
001E76  3  85 06                STA     <VIDEOMODE
001E78  3  60                   RTS
001E79  3               
001E79  3               
001E79  3               SETUPMODE2:                     ; HIRES MODE
001E79  3  A9 01                LDA     #$01
001E7B  3  8F 38 FE 00          STA     F:VideoHiresMode
001E7F  3  A9 02                LDA     #$02
001E81  3  8F 35 FE 00          STA     F:VideoTextMode
001E85  3  8F 36 FE 00          STA     F:VideoLoresMode
001E89  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E8C  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001E8F  3               
001E8F  3  E0 00                CPX     #$00
001E91  3  D0 10                BNE     SETUPMODE2_DOUBLE
001E93  3  A9 02                LDA     #$02
001E95  3  8F 39 FE 00          STA     F:VideoDoubleHires
001E99  3  8F 3C FE 00          STA     F:VideoQuadHires
001E9D  3  8F 3D FE 00          STA     F:VideoMonoHires
001EA1  3  80 48                BRA     SETUPMODE2_CLEAR
001EA3  3               SETUPMODE2_DOUBLE:
001EA3  3  E0 01                CPX     #$01
001EA5  3  D0 16                BNE     SETUPMODE2_QUAD
001EA7  3  A9 01                LDA     #$01
001EA9  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EAD  3  A9 02                LDA     #$02
001EAF  3  8F 3C FE 00          STA     F:VideoQuadHires
001EB3  3  8F 3D FE 00          STA     F:VideoMonoHires
001EB7  3  A9 12                LDA     #$12
001EB9  3  85 06                STA     <VIDEOMODE
001EBB  3  80 2E                BRA     SETUPMODE2_CLEAR
001EBD  3               SETUPMODE2_QUAD:
001EBD  3  E0 02                CPX     #$02
001EBF  3  D0 16                BNE     SETUPMODE2_MONO
001EC1  3  A9 01                LDA     #$01
001EC3  3  8F 3C FE 00          STA     F:VideoQuadHires
001EC7  3  A9 02                LDA     #$02
001EC9  3  8F 39 FE 00          STA     F:VideoDoubleHires
001ECD  3  8F 3D FE 00          STA     F:VideoMonoHires
001ED1  3  A9 22                LDA     #$22
001ED3  3  85 06                STA     <VIDEOMODE
001ED5  3  80 14                BRA     SETUPMODE2_CLEAR
001ED7  3               SETUPMODE2_MONO:
001ED7  3  A9 01                LDA     #$01
001ED9  3  8F 3D FE 00          STA     F:VideoMonoHires
001EDD  3  A9 02                LDA     #$02
001EDF  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EE3  3  8F 3C FE 00          STA     F:VideoQuadHires
001EE7  3  A9 32                LDA     #$32
001EE9  3  85 06                STA     <VIDEOMODE
001EEB  3               
001EEB  3               SETUPMODE2_CLEAR:
001EEB  3  08                   PHP                     ; Clear Hires RAM
001EEC  3  8B                   PHB
001EED  3  DA A2 00 DA          SETBANK 0
001EF1  3  AB FA        
001EF3  3  C2 10                INDEX16
001EF5  3  A9 00                LDA     #$00
001EF7  3  A2 00 00             LDX     #$0000
001EFA  3               :
001EFA  3  9D 00 20             STA     $2000,X
001EFD  3  E8                   INX
001EFE  3  E0 00 80             CPX     #$8000
001F01  3  D0 F7                BNE     :-
001F03  3  E2 10                INDEX8
001F05  3  AB                   PLB
001F06  3  28                   PLP
001F07  3  20 E0 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001F0A  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X
001F0D  3  E0 00                CPX     #$00
001F0F  3  D0 07                BNE     SETUPMODE2_MIXED
001F11  3  A9 02                LDA     #$02
001F13  3  8F 3B FE 00          STA     F:VideoMixedMode
001F17  3  60                   RTS
001F18  3               SETUPMODE2_MIXED:
001F18  3  A9 01                LDA     #$01
001F1A  3  8F 3B FE 00          STA     F:VideoMixedMode
001F1E  3  A5 06                LDA     <VIDEOMODE
001F20  3  09 80                ORA     #$80
001F22  3  85 06                STA     <VIDEOMODE
001F24  3  60                   RTS
001F25  3               
001F25  3               
001F25  3               ;___V_PLOT__________________________________________________
001F25  3               ;
001F25  3               ;  PLOT ON SCREEN
001F25  3               ;         TAKES THREE PARAMETERS,  X,Y,COLOR
001F25  3               ;
001F25  3               ; THIS IS NATIVE '816 CODE
001F25  3               ;__________________________________________________________
001F25  3               V_PLOT:
001F25  3  A5 06                LDA     <VIDEOMODE
001F27  3  29 0F                AND     #$0F
001F29  3  C9 01                CMP     #$01
001F2B  3  F0 13                BEQ     V_PLOT_LORES
001F2D  3  A5 06                LDA     <VIDEOMODE
001F2F  3  29 2F                AND     #$2F
001F31  3  C9 02                CMP     #$02
001F33  3  D0 03 4C F6          LBEQ    V_PLOT_HIRES_COLOR
001F37  3  1F           
001F38  3  C9 22                CMP     #$22
001F3A  3  D0 03 4C BD          LBEQ    V_PLOT_HIRES_MONO
001F3E  3  20           
001F3F  3  60                   RTS
001F40  3                       V_PLOT_LORES:
001F40  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001F43  3  8A                   TXA
001F44  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
001F48  3  A9 00                LDA     #00
001F4A  3  8F 48 03 00          STA     F:TEMPOFFSET+1
001F4E  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001F51  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001F54  3                                               ; FIGURE THE BUFFER OFFSET
001F54  3  8A                   TXA                     ; GET Y COORD
001F55  3  48                   PHA                     ; STORE FOR LATER
001F56  3  4A                   LSR     A               ; THERE ARE TWO ROWS PER BYTE
001F57  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 40 OR 80 (SINGLE OR DOUBLE LORES)
001F59  3  29 FF 00             AND     #$00FF
001F5C  3  8F 45 03 00          STA     F:TEMP
001F60  3  18                   CLC
001F61  3  0A                   ASL     A
001F62  3  0A                   ASL     A
001F63  3  0A                   ASL     A
001F64  3  0A                   ASL     A
001F65  3  0A                   ASL     A
001F66  3  48                   PHA
001F67  3  AF 45 03 00          LDA     F:TEMP
001F6B  3  18                   CLC
001F6C  3  0A                   ASL     A
001F6D  3  0A                   ASL     A
001F6E  3  0A                   ASL     A
001F6F  3  8F 45 03 00          STA     F:TEMP
001F73  3  68                   PLA
001F74  3  18                   CLC
001F75  3  6F 45 03 00          ADC     F:TEMP
001F79  3  8F 45 03 00          STA     F:TEMP
001F7D  3               ; if double lores columns double it.
001F7D  3  E2 20                ACCUMULATOR8
001F7F  3  A5 06                LDA     <VIDEOMODE
001F81  3  29 10                AND     #$10
001F83  3  C9 00                CMP     #00
001F85  3  F0 0B                BEQ     :+
001F87  3  C2 20                ACCUMULATOR16
001F89  3  AF 45 03 00          LDA     F:TEMP
001F8D  3  0A                   ASL     A
001F8E  3  8F 45 03 00          STA     F:TEMP
001F92  3               :
001F92  3  C2 20                ACCUMULATOR16
001F94  3  AF 47 03 00          LDA     F:TEMPOFFSET
001F98  3  18                   CLC
001F99  3  6F 45 03 00          ADC     F:TEMP
001F9D  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
001FA1  3  E2 30                ACCUMULATORINDEX8
001FA3  3  20 E0 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001FA6  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
001FA9  3  8A                   TXA
001FAA  3  29 0F                AND     #$0F
001FAC  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
001FB0  3  68                   PLA
001FB1  3  4A                   LSR     A               ; TOP OR BOTTOM PIXEL?
001FB2  3  90 28                BCC     :+
001FB4  3                                               ; TOP PIXEL
001FB4  3  C2 30                ACCUMULATORINDEX16
001FB6  3  AF 47 03 00          LDA     F:TEMPOFFSET
001FBA  3  AA                   TAX
001FBB  3  E2 20                ACCUMULATOR8
001FBD  3  BF 00 20 00          LDA     F:$2000,X
001FC1  3  29 0F                AND     #$0F
001FC3  3  48                   PHA
001FC4  3  AF 45 03 00          LDA     F:TEMP
001FC8  3  0A                   ASL     A
001FC9  3  0A                   ASL     A
001FCA  3  0A                   ASL     A
001FCB  3  0A                   ASL     A
001FCC  3  8F 45 03 00          STA     F:TEMP
001FD0  3  68                   PLA
001FD1  3  0F 45 03 00          ORA     F:TEMP
001FD5  3  9F 00 20 00          STA     F:$2000,X
001FD9  3  E2 30                ACCUMULATORINDEX8
001FDB  3  60                   RTS
001FDC  3               :
001FDC  3               ; BOTTOM PIXEL
001FDC  3  C2 30                ACCUMULATORINDEX16
001FDE  3  AF 47 03 00          LDA     F:TEMPOFFSET
001FE2  3  AA                   TAX
001FE3  3  E2 20                ACCUMULATOR8
001FE5  3  BF 00 20 00          LDA     F:$2000,X
001FE9  3  29 F0                AND     #$F0
001FEB  3  0F 45 03 00          ORA     F:TEMP
001FEF  3  9F 00 20 00          STA     F:$2000,X
001FF3  3  E2 30                ACCUMULATORINDEX8
001FF5  3  60                   RTS
001FF6  3               V_PLOT_HIRES_COLOR:
001FF6  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001FF9  3  8A                   TXA
001FFA  3  48                   PHA
001FFB  3  4A                   LSR     A               ; 2 PIXEL PER BYTE
001FFC  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
002000  3  A9 00                LDA     #00
002002  3  8F 48 03 00          STA     F:TEMPOFFSET+1
002006  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
002009  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
00200C  3                                               ; FIGURE THE BUFFER OFFSET
00200C  3  8A                   TXA                     ; GET Y COORD
00200D  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 70 OR 140 (SINGLE OR DOUBLE HIRES)
00200F  3  29 FF 00             AND     #$00FF
002012  3  8F 45 03 00          STA     F:TEMP
002016  3  18                   CLC
002017  3  0A                   ASL     A
002018  3  0A                   ASL     A
002019  3  0A                   ASL     A
00201A  3  0A                   ASL     A
00201B  3  0A                   ASL     A
00201C  3  0A                   ASL     A
00201D  3  48                   PHA
00201E  3  AF 45 03 00          LDA     F:TEMP
002022  3  18                   CLC
002023  3  0A                   ASL     A
002024  3  0A                   ASL     A
002025  3  48                   PHA
002026  3  AF 45 03 00          LDA     F:TEMP
00202A  3  18                   CLC
00202B  3  0A                   ASL     A
00202C  3  8F 45 03 00          STA     F:TEMP
002030  3  68                   PLA
002031  3  18                   CLC
002032  3  6F 45 03 00          ADC     F:TEMP
002036  3  8F 45 03 00          STA     F:TEMP
00203A  3  68                   PLA
00203B  3  18                   CLC
00203C  3  6F 45 03 00          ADC     F:TEMP
002040  3  8F 45 03 00          STA     F:TEMP
002044  3               ; if double hires double it.
002044  3  E2 20                ACCUMULATOR8
002046  3  A5 06                LDA     <VIDEOMODE
002048  3  29 10                AND     #$10
00204A  3  C9 00                CMP     #00
00204C  3  F0 0B                BEQ     :+
00204E  3  C2 20                ACCUMULATOR16
002050  3  AF 45 03 00          LDA     F:TEMP
002054  3  0A                   ASL     A
002055  3  8F 45 03 00          STA     F:TEMP
002059  3               :
002059  3  C2 20                ACCUMULATOR16
00205B  3  AF 47 03 00          LDA     F:TEMPOFFSET
00205F  3  18                   CLC
002060  3  6F 45 03 00          ADC     F:TEMP
002064  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
002068  3  E2 30                ACCUMULATORINDEX8
00206A  3  20 E0 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
00206D  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
002070  3  8A                   TXA
002071  3  29 0F                AND     #$0F
002073  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
002077  3  68                   PLA
002078  3  4A                   LSR     A               ; LEFT OR RIGHT PIXEL?
002079  3  90 28                BCC     :+
00207B  3                                               ; LEFT PIXEL
00207B  3  C2 30                ACCUMULATORINDEX16
00207D  3  AF 47 03 00          LDA     F:TEMPOFFSET
002081  3  AA                   TAX
002082  3  E2 20                ACCUMULATOR8
002084  3  BF 00 20 00          LDA     F:$2000,X
002088  3  29 0F                AND     #$0F
00208A  3  48                   PHA
00208B  3  AF 45 03 00          LDA     F:TEMP
00208F  3  0A                   ASL     A
002090  3  0A                   ASL     A
002091  3  0A                   ASL     A
002092  3  0A                   ASL     A
002093  3  8F 45 03 00          STA     F:TEMP
002097  3  68                   PLA
002098  3  0F 45 03 00          ORA     F:TEMP
00209C  3  9F 00 20 00          STA     F:$2000,X
0020A0  3  E2 30                ACCUMULATORINDEX8
0020A2  3  60                   RTS
0020A3  3               :
0020A3  3               ; RIGHT PIXEL
0020A3  3  C2 30                ACCUMULATORINDEX16
0020A5  3  AF 47 03 00          LDA     F:TEMPOFFSET
0020A9  3  AA                   TAX
0020AA  3  E2 20                ACCUMULATOR8
0020AC  3  BF 00 20 00          LDA     F:$2000,X
0020B0  3  29 F0                AND     #$F0
0020B2  3  0F 45 03 00          ORA     F:TEMP
0020B6  3  9F 00 20 00          STA     F:$2000,X
0020BA  3  E2 30                ACCUMULATORINDEX8
0020BC  3  60                   RTS
0020BD  3               
0020BD  3               V_PLOT_HIRES_MONO:
0020BD  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
0020C0  3  8A                   TXA
0020C1  3  48                   PHA
0020C2  3  4A                   LSR     A               ; 8 PIXEL PER BYTE
0020C3  3  4A                   LSR     A
0020C4  3  4A                   LSR     A
0020C5  3               
0020C5  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
0020C9  3  A9 00                LDA     #00
0020CB  3  8F 48 03 00          STA     F:TEMPOFFSET+1
0020CF  3  20 E0 32             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0020D2  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0020D5  3                                               ; FIGURE THE BUFFER OFFSET
0020D5  3  8A                   TXA                     ; GET Y COORD
0020D6  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 35 OR 70 (MONO OR QUAD HIRES)
0020D8  3  29 FF 00             AND     #$00FF
0020DB  3  8F 45 03 00          STA     F:TEMP
0020DF  3  18                   CLC
0020E0  3  0A                   ASL     A
0020E1  3  0A                   ASL     A
0020E2  3  0A                   ASL     A
0020E3  3  0A                   ASL     A
0020E4  3  0A                   ASL     A
0020E5  3  48                   PHA
0020E6  3  AF 45 03 00          LDA     F:TEMP
0020EA  3  18                   CLC
0020EB  3  0A                   ASL     A
0020EC  3  18                   CLC
0020ED  3  6F 45 03 00          ADC     F:TEMP
0020F1  3  8F 45 03 00          STA     F:TEMP
0020F5  3  68                   PLA
0020F6  3  18                   CLC
0020F7  3  6F 45 03 00          ADC     F:TEMP
0020FB  3  8F 45 03 00          STA     F:TEMP
0020FF  3               ; if quad hires double it.
0020FF  3  E2 20                ACCUMULATOR8
002101  3  A5 06                LDA     <VIDEOMODE
002103  3  29 10                AND     #$10
002105  3  C9 00                CMP     #00
002107  3  D0 0B                BNE     :+
002109  3  C2 20                ACCUMULATOR16
00210B  3  AF 45 03 00          LDA     F:TEMP
00210F  3  0A                   ASL     A
002110  3  8F 45 03 00          STA     F:TEMP
002114  3               :
002114  3  C2 20                ACCUMULATOR16
002116  3  AF 47 03 00          LDA     F:TEMPOFFSET
00211A  3  18                   CLC
00211B  3  6F 45 03 00          ADC     F:TEMP
00211F  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
002123  3  E2 30                ACCUMULATORINDEX8
002125  3  20 E0 32             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
002128  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
00212B  3  8A                   TXA
00212C  3  29 01                AND     #$01
00212E  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
002132  3  68                   PLA
002133  3  29 07                AND     #$07            ; WHICH BIT?
002135  3  AA                   TAX
002136  3  AF 45 03 00          LDA     F:TEMP
00213A  3  C9 01                CMP     #$01
00213C  3  D0 1A                BNE     :+
00213E  3  BF 72 21 FF          LDA     F:HIRES_BIT_LOOKUP_SET,X
002142  3  48                   PHA
002143  3  C2 30                ACCUMULATORINDEX16
002145  3  AF 47 03 00          LDA     F:TEMPOFFSET
002149  3  AA                   TAX
00214A  3  E2 20                ACCUMULATOR8
00214C  3  68                   PLA
00214D  3  1F 00 20 00          ORA     F:$2000,X
002151  3  9F 00 20 00          STA     F:$2000,X
002155  3  E2 10                INDEX8
002157  3  60                   RTS
002158  3               :
002158  3  BF 7A 21 FF          LDA     F:HIRES_BIT_LOOKUP_RESET,X
00215C  3  48                   PHA
00215D  3  C2 30                ACCUMULATORINDEX16
00215F  3  AF 47 03 00          LDA     F:TEMPOFFSET
002163  3  AA                   TAX
002164  3  E2 20                ACCUMULATOR8
002166  3  68                   PLA
002167  3  3F 00 20 00          AND     F:$2000,X
00216B  3  9F 00 20 00          STA     F:$2000,X
00216F  3  E2 10                INDEX8
002171  3  60                   RTS
002172  3               HIRES_BIT_LOOKUP_S:
002172  3  80 40 20 10          .BYTE %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001
002176  3  08 04 02 01  
00217A  3               HIRES_BIT_LOOKUP_R:
00217A  3  7F BF DF EF          .BYTE %01111111,%10111111,%11011111,%11101111,%11110111,%11111011,%11111101,%11111110
00217E  3  F7 FB FD FE  
002182  3               HIRES_BIT_LOOKUP_SET= (PROGRAMBANK*$10000)+HIRES_BIT_LOOKUP_S
002182  3               HIRES_BIT_LOOKUP_RESET= (PROGRAMBANK*$10000)+HIRES_BIT_LOOKUP_R
002182  3               
002182  3               ;___V_PATTERN________________________________________________
002182  3               ;
002182  3               ;  DEFINE GRAPHICS PATTERN
002182  3               ;
002182  3               ;  TAKES 10 PARAMETERS
002182  3               ;       PATTERN NUM (0-255)
002182  3               ;       COLOR NUM (0-255)
002182  3               ;       PATTERN DATA (8 BYTES)
002182  3               ; THIS IS NATIVE '816 CODE
002182  3               ;__________________________________________________________
002182  3               V_PATTERN:
002182  3  60                   RTS
002183  3               
002183  2                       .INCLUDE "ay38910.asm"
002183  3               via1regb        = $FE10         ; Register
002183  3               via1rega        = $FE11         ; Register
002183  3               via1ddrb        = $FE12         ; Register
002183  3               via1ddra        = $FE13         ; Register
002183  3               via1t1cl        = $FE14         ; Register
002183  3               via1t1ch        = $FE15         ; Register
002183  3               via1t1ll        = $FE16         ; Register
002183  3               via1t1lh        = $FE17         ; Register
002183  3               via1t2cl        = $FE18         ; Register
002183  3               via1t2ch        = $FE19         ; Register
002183  3               via1sr          = $FE1A         ; Register
002183  3               via1acr         = $FE1B         ; Register
002183  3               via1pcr         = $FE1C         ; Register
002183  3               via1ifr         = $FE1D         ; Register
002183  3               via1ier         = $FE1E         ; Register
002183  3               via1ora         = $FE1F         ; Register
002183  3               
002183  3               
002183  3               
002183  3               ;___SOUND__________________________________________________
002183  3               ;
002183  3               ; PLAY SOUND
002183  3               ;
002183  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
002183  3               ;
002183  3               ; THIS IS NATIVE '816 CODE
002183  3               ;__________________________________________________________
002183  3               V_SOUND:
002183  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
002186  3  DA                   PHX
002187  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
00218A  3  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00218D  3               ; else do type mismatch
00218D  3  20 FE 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
002190  3               
002190  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
002191  3  29 03                AND     #$03
002193  3  18                   CLC
002194  3  0A                   ASL                     ; = *2
002195  3  48                   PHA
002196  3  A4 11                LDY     <Itempl
002198  3  20 BD 22             JSR     psgwr           ; SET LOW BYTE
00219B  3  68                   PLA
00219C  3  1A                   INC     A
00219D  3  A4 12                LDY     <Itemph
00219F  3  20 BD 22             JSR     psgwr           ; SET HIGH BYTE
0021A2  3  60                   RTS
0021A3  3               
0021A3  3               ;___VOLUME__________________________________________________
0021A3  3               ;
0021A3  3               ; SET VOLUME
0021A3  3               ;
0021A3  3               ;  TAKES TWO PARAMETERS CHANNEL,VOLUME
0021A3  3               ;
0021A3  3               ; THIS IS NATIVE '816 CODE
0021A3  3               ;__________________________________________________________
0021A3  3               V_VOLUME:
0021A3  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021A6  3  DA                   PHX
0021A7  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021AA  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (VOLUME)
0021AD  3  9B                   TXY
0021AE  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
0021AF  3  29 03                AND     #$03
0021B1  3               
0021B1  3  18                   CLC
0021B2  3  69 08                ADC     #08
0021B4  3  20 BD 22             JSR     psgwr
0021B7  3  60                   RTS
0021B8  3               
0021B8  3               
0021B8  3               ;___VOICE__________________________________________________
0021B8  3               ;
0021B8  3               ; SET VOICE
0021B8  3               ;
0021B8  3               ;  TAKES TWO PARAMETERS VOICE, ENVELOPE
0021B8  3               ;
0021B8  3               ; THIS IS NATIVE '816 CODE
0021B8  3               ;__________________________________________________________
0021B8  3               V_VOICE:
0021B8  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021BB  3  DA                   PHX
0021BC  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021BF  3  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0021C2  3               ; else do type mismatch
0021C2  3  20 FE 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
0021C5  3  7A                   PLY
0021C6  3  A9 0D                LDA     #13
0021C8  3  20 BD 22             JSR     psgwr
0021CB  3               
0021CB  3  A9 0B                LDA     #11
0021CD  3  A4 11                LDY     <Itempl
0021CF  3  20 BD 22             JSR     psgwr           ; SET LOW BYTE
0021D2  3  A9 0C                LDA     #12
0021D4  3  A4 12                LDY     <Itemph         ; SET HIGH BYTE
0021D6  3  20 BD 22             JSR     psgwr
0021D9  3               
0021D9  3  60                   RTS
0021DA  3               
0021DA  3               
0021DA  3               
0021DA  3               
0021DA  3               
0021DA  3               ;___NOISE__________________________________________________
0021DA  3               ;
0021DA  3               ; SELECT NOISE CHANNEL
0021DA  3               ;
0021DA  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
0021DA  3               ;
0021DA  3               ; THIS IS NATIVE '816 CODE
0021DA  3               ;__________________________________________________________
0021DA  3               V_NOISE:
0021DA  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021DD  3  DA                   PHX
0021DE  3  20 E0 32             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021E1  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (FREQ)
0021E4  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
0021E5  3  DA                   PHX
0021E6  3  AA                   TAX
0021E7  3               
0021E7  3  29 1F                AND     #%00011111
0021E9  3  A8                   TAY
0021EA  3  A9 06                LDA     #$06
0021EC  3  20 BD 22             JSR     psgwr           ; SET NOISE FREQ
0021EF  3               
0021EF  3  A9 07                LDA     #$07
0021F1  3  20 7B 22             JSR     psgrd           ; GET CONFIG
0021F4  3  68                   PLA
0021F5  3  5A                   PHY
0021F6  3  29 03                AND     #$03
0021F8  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
0021F9  3  68                   PLA
0021FA  3  E0 00                CPX     #$00
0021FC  3  D0 06                BNE     NOISE_1
0021FE  3  29 37                AND     #%00110111
002200  3  09 01                ORA     #%00000001
002202  3  80 0E                BRA     NOISE_3
002204  3               NOISE_1:
002204  3  E0 01                CPX     #$01
002206  3  D0 06                BNE     NOISE_2
002208  3  29 2F                AND     #%00101111
00220A  3  09 02                ORA     #%00000010
00220C  3  80 04                BRA     NOISE_3
00220E  3               NOISE_2:
00220E  3  29 1F                AND     #%00011111
002210  3  09 04                ORA     #%00000100
002212  3               NOISE_3:
002212  3  A8                   TAY
002213  3  A9 07                LDA     #$07
002215  3  20 BD 22             JSR     psgwr           ; SET LOW BYTE
002218  3  60                   RTS
002219  3               
002219  3               ;___TONE___________________________________________________
002219  3               ;
002219  3               ; SELECT TONE CHANNEL
002219  3               ;
002219  3               ;  TAKES ONE PARAMETER CHANNEL
002219  3               ;
002219  3               ; THIS IS NATIVE '816 CODE
002219  3               ;__________________________________________________________
002219  3               V_TONE:
002219  3  20 5A 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
00221C  3  DA                   PHX
00221D  3               
00221D  3  A9 07                LDA     #$07
00221F  3  20 7B 22             JSR     psgrd           ; GET CONFIG
002222  3  68                   PLA
002223  3  5A                   PHY
002224  3  29 03                AND     #$03
002226  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
002227  3  68                   PLA
002228  3  E0 00                CPX     #$00
00222A  3  D0 06                BNE     TONE_1
00222C  3  29 3E                AND     #%00111110
00222E  3  09 08                ORA     #%00001000
002230  3  80 0E                BRA     TONE_3
002232  3               TONE_1:
002232  3  E0 01                CPX     #$01
002234  3  D0 06                BNE     TONE_2
002236  3  29 3D                AND     #%00111101
002238  3  09 10                ORA     #%00010000
00223A  3  80 04                BRA     TONE_3
00223C  3               TONE_2:
00223C  3  29 3B                AND     #%00111011
00223E  3  09 20                ORA     #%00100000
002240  3               TONE_3:
002240  3  A8                   TAY
002241  3  A9 07                LDA     #$07
002243  3  20 BD 22             JSR     psgwr           ; SET LOW BYTE
002246  3  60                   RTS
002247  3               
002247  3               
002247  3               ;___CONTROLLER_______________________________________________
002247  3               ;
002247  3               ; GET JOYTICK STATUS
002247  3               ;
002247  3               ;  TAKES ONE PARAMETERS JOYSTICK#, RETURNS STATUS
002247  3               ;
002247  3               ; THIS IS NATIVE '816 CODE
002247  3               ;__________________________________________________________
002247  3               LAB_CON:
002247  3  20 FE 3E             JSR     LAB_F2FX        ; GET THE PARAMETER, RETURN IN X (controller#)
00224A  3  A5 11                LDA     <Itempl
00224C  3  29 01                AND     #$01
00224E  3  18                   CLC
00224F  3  69 0E                ADC     #14
002251  3  20 7B 22             JSR     psgrd           ; return value in y
002254  3  4C 86 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
002257  3               
002257  3               
002257  3               
002257  3               
002257  3               ;___utility functions____________________________________________
002257  3               psginit:
002257  3  A9 9C                LDA     #%10011100
002259  3  8F 13 FE 00          STA     f:via1ddra
00225D  3  A9 10                LDA     #%00010000
00225F  3  8F 11 FE 00          STA     f:via1rega
002263  3  A9 FF                LDA     #$FF
002265  3  8F 12 FE 00          STA     f:via1ddrb
002269  3  A9 00                LDA     #$00
00226B  3  8F 10 FE 00          STA     f:via1regb
00226F  3  60                   RTS
002270  3  20 FF 22             JSR     clrpsg
002273  3               
002273  3  A9 07                LDA     #7
002275  3  A0 3F                LDY     #$3F
002277  3  20 BD 22             JSR     psgwr
00227A  3  60                   RTS
00227B  3               
00227B  3               psgrd:
00227B  3  8F 10 FE 00          STA     f:via1regb      ; select register
00227F  3  A9 1C                LDA     #%00011100      ; latch address
002281  3  8F 11 FE 00          STA     f:via1rega
002285  3               
002285  3  8F 11 FE 00          STA     f:via1rega
002289  3  8F 11 FE 00          STA     f:via1rega
00228D  3               
00228D  3  A9 10                LDA     #%00010000      ; inact
00228F  3  8F 11 FE 00          STA     f:via1rega
002293  3               
002293  3  8F 11 FE 00          STA     f:via1rega
002297  3               
002297  3  A9 00                LDA     #$00
002299  3  8F 12 FE 00          STA     f:via1ddrb
00229D  3  A9 18                LDA     #%00011000      ; latch data
00229F  3  8F 11 FE 00          STA     f:via1rega
0022A3  3               
0022A3  3  8F 11 FE 00          STA     f:via1rega
0022A7  3  8F 11 FE 00          STA     f:via1rega
0022AB  3               
0022AB  3  AF 10 FE 00          LDA     f:via1regb      ; get data
0022AF  3  A8                   TAY
0022B0  3  A9 FF                LDA     #$FF
0022B2  3  8F 12 FE 00          STA     f:via1ddrb
0022B6  3  A9 10                LDA     #%00010000      ; inact
0022B8  3  8F 11 FE 00          STA     f:via1rega
0022BC  3  60                   RTS
0022BD  3               
0022BD  3               
0022BD  3               psgwr:
0022BD  3  8F 10 FE 00          STA     f:via1regb      ; select register
0022C1  3  A9 1C                LDA     #%00011100      ; latch address
0022C3  3  8F 11 FE 00          STA     f:via1rega
0022C7  3               
0022C7  3  8F 11 FE 00          STA     f:via1rega
0022CB  3  8F 11 FE 00          STA     f:via1rega
0022CF  3               
0022CF  3  A9 10                LDA     #%00010000      ; inact
0022D1  3  8F 11 FE 00          STA     f:via1rega
0022D5  3               
0022D5  3  8F 11 FE 00          STA     f:via1rega
0022D9  3  8F 11 FE 00          STA     f:via1rega
0022DD  3  98                   TYA
0022DE  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022E2  3               
0022E2  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022E6  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022EA  3               
0022EA  3  A9 14                LDA     #%00010100      ; latch data
0022EC  3  8F 11 FE 00          STA     f:via1rega
0022F0  3               
0022F0  3  8F 11 FE 00          STA     f:via1rega
0022F4  3  8F 11 FE 00          STA     f:via1rega
0022F8  3               
0022F8  3  A9 10                LDA     #%00010000      ; inact
0022FA  3  8F 11 FE 00          STA     f:via1rega
0022FE  3  60                   RTS
0022FF  3               
0022FF  3               ;
0022FF  3               ; Clear PSG registers to default
0022FF  3               ;
0022FF  3               clrpsg:
0022FF  3  DA 5A 48 08          STORECONTEXT
002303  3  E2 30                ACCUMULATORINDEX8
002305  3  A2 00                LDX     #00
002307  3  A0 00                LDY     #00
002309  3               clrpsg1:
002309  3  8A                   TXA
00230A  3  20 BD 22             JSR     psgwr           ; set register X to 0
00230D  3  E8                   INX
00230E  3  E0 11                CPX     #17
002310  3  D0 F7                BNE     clrpsg1
002312  3  28 68 7A FA          RESTORECONTEXT
002316  3  60                   RTS
002317  3               
002317  2               
002317  2               
002317  2               
002317  2               ;___TitleScreen_____________________________________________
002317  2               ;
002317  2               ; Basic Title Screen
002317  2               ;
002317  2               ; THIS IS NATIVE '816 CODE
002317  2               ;__________________________________________________________
002317  2               TitleScreen:
002317  2  20 57 22             JSR     psginit
00231A  2               
00231A  2  A9 00                LDA     #0
00231C  2  85 06                STA     <VIDEOMODE
00231E  2               
00231E  2  AF 41 03 00          LDA     f:ConsoleDevice
002322  2  C9 00                CMP     #$00
002324  2  D0 08                BNE     TitleScreen_1
002326  2  A9 19                LDA     #<LAB_SMSG1     ; point to sign-on message (low addr)
002328  2  A0 16                LDY     #>LAB_SMSG1     ; point to sign-on message (high addr)
00232A  2  20 41 2F             JSR     LAB_18C3        ; print null terminated string from memory
00232D  2  60                   RTS
00232E  2               TitleScreen_1:
00232E  2  A9 9E                LDA     #$9E
002330  2  22 18 FD 00          JSL     LSetColorVEC
002334  2  22 6C FD 00          JSL     LClearScrVec
002338  2  A9 C6                LDA     #<LAB_CONMSG    ; point to sign-on message (low addr)
00233A  2  A0 15                LDY     #>LAB_CONMSG    ; point to sign-on message (high addr)
00233C  2  20 41 2F             JSR     LAB_18C3        ; print null terminated string from memory
00233F  2  60                   RTS
002340  2               
002340  2               ;___ScreenEditor____________________________________________
002340  2               ;
002340  2               ; Basic Screen editor code
002340  2               ;
002340  2               ; THIS IS NATIVE '816 CODE
002340  2               ;__________________________________________________________
002340  2               ScreenEditor:
002340  2  48                   PHA
002341  2  DA                   PHX
002342  2  5A                   PHY
002343  2  08                   PHP
002344  2  8B                   PHB
002345  2  E2 30                ACCUMULATORINDEX8
002347  2               ; allow prepopulate of screen
002347  2               ploop:
002347  2  22 1C FD 00          JSL     LCURSORVEC
00234B  2  22 08 FD 00          JSL     LINPWVEC
00234F  2  C9 FF                CMP     #$FF
002351  2  F0 F4                BEQ     ploop
002353  2  22 20 FD 00          JSL     LUNCURSORVEC
002357  2  C9 01                CMP     #01
002359  2  F0 21                BEQ     crsrup
00235B  2  C9 02                CMP     #02
00235D  2  F0 30                BEQ     crsrdn
00235F  2  C9 1F                CMP     #$1f
002361  2  F0 53                BEQ     crsrlt
002363  2  C9 04                CMP     #$04
002365  2  D0 03 4C EA          LBEQ    crsrrt
002369  2  23           
00236A  2  C9 0A                CMP     #$0A
00236C  2  F0 D9                BEQ     ploop
00236E  2  C9 0D                CMP     #13
002370  2  D0 03 4C 09          LBEQ    pexit
002374  2  24           
002375  2               
002375  2  22 00 FD 00          JSL     LPRINTVEC
002379  2  4C 47 23             JMP     ploop
00237C  2               
00237C  2               crsrup:
00237C  2  AF 31 03 00          LDA     F:CSRY
002380  2  C9 00                CMP     #00
002382  2  F0 C3                BEQ     ploop
002384  2  AF 31 03 00          LDA     F:CSRY
002388  2  3A                   DEC     A
002389  2  8F 31 03 00          STA     F:CSRY
00238D  2  80 B8                BRA     ploop
00238F  2               crsrdn:
00238F  2  AF 31 03 00          LDA     F:CSRY
002393  2  C9 17                CMP     #23
002395  2  F0 0B                BEQ     crsrdn_1
002397  2  AF 31 03 00          LDA     F:CSRY
00239B  2  1A                   INC     A
00239C  2  8F 31 03 00          STA     F:CSRY
0023A0  2  80 A5                BRA     ploop
0023A2  2               crsrdn_1:
0023A2  2  AF 30 03 00          LDA     F:CSRX
0023A6  2  48                   PHA
0023A7  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0023AB  2  22 14 FD 00          JSL     LSrlUpVEC
0023AF  2  68                   PLA
0023B0  2  8F 30 03 00          STA     F:CSRX
0023B4  2  80 91                BRA     ploop
0023B6  2               crsrlt:
0023B6  2  AF 30 03 00          LDA     F:CSRX
0023BA  2  C9 00                CMP     #00
0023BC  2  F0 0C                BEQ     crsrlt_1
0023BE  2  AF 30 03 00          LDA     F:CSRX
0023C2  2  3A                   DEC     A
0023C3  2  8F 30 03 00          STA     F:CSRX
0023C7  2  4C 47 23             JMP     ploop
0023CA  2               crsrlt_1:
0023CA  2  AF 31 03 00          LDA     F:CSRY
0023CE  2  C9 00                CMP     #00
0023D0  2  D0 03 4C 47          LBEQ    ploop
0023D4  2  23           
0023D5  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0023D9  2  3A                   DEC     A
0023DA  2  8F 30 03 00          STA     F:CSRX
0023DE  2  AF 31 03 00          LDA     F:CSRY
0023E2  2  3A                   DEC     A
0023E3  2  8F 31 03 00          STA     F:CSRY
0023E7  2  4C 47 23             JMP     ploop
0023EA  2               crsrrt:
0023EA  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0023EE  2  3A                   DEC     A
0023EF  2  CF 30 03 00          CMP     F:CSRX
0023F3  2  F0 0C                BEQ     crsrrt_1
0023F5  2  AF 30 03 00          LDA     F:CSRX
0023F9  2  1A                   INC     A
0023FA  2  8F 30 03 00          STA     F:CSRX
0023FE  2  4C 47 23             JMP     ploop
002401  2               crsrrt_1:
002401  2  A9 00                LDA     #00
002403  2  8F 30 03 00          STA     F:CSRX
002407  2  80 86                BRA     crsrdn
002409  2               pexit:
002409  2  20 39 24             JSR     LdKbBuffer
00240C  2  A2 50                LDX     #80
00240E  2  A9 00                LDA     #$00
002410  2  9F 81 21 02          STA     f:LIbuffs,X
002414  2               TERMLOOP:
002414  2  CA                   DEX
002415  2  BF 81 21 02          LDA     f:LIbuffs,X
002419  2  C9 20                CMP     #32
00241B  2  F0 06                BEQ     TERMLOOP_B
00241D  2  C9 00                CMP     #00
00241F  2  F0 08                BEQ     TERMLOOP_C
002421  2  80 0A                BRA     TERMLOOP_A
002423  2               TERMLOOP_B:
002423  2  A9 00                LDA     #00
002425  2  9F 81 21 02          STA     f:LIbuffs,X
002429  2               TERMLOOP_C:
002429  2  E0 00                CPX     #00
00242B  2  D0 E7                BNE     TERMLOOP
00242D  2               TERMLOOP_A:
00242D  2  A9 0D                LDA     #13
00242F  2  22 00 FD 00          JSL     LPRINTVEC
002433  2  AB                   PLB
002434  2  28                   PLP
002435  2  7A                   PLY
002436  2  FA                   PLX
002437  2  68                   PLA
002438  2  60                   RTS
002439  2               
002439  2               
002439  2               LdKbBuffer:
002439  2               ; clear input buffer
002439  2  A2 51                LDX     #81
00243B  2               :
00243B  2  A9 00                LDA     #00
00243D  2  9F 80 21 02          STA     f:LIbuffs-1,X
002441  2  CA                   DEX
002442  2  D0 F7                BNE     :-
002444  2               
002444  2               ; Let's calculate the screen memory offset and store it
002444  2  20 CA 24             JSR     GetVideoAddressOffset
002447  2               
002447  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00244B  2  C9 28                CMP     #40
00244D  2  F0 03                BEQ     :+
00244F  2  4C 99 24             JMP     LdKbBuffer_1c
002452  2               :
002452  2               ; are we on the first line?  If so, we know it is not continued from the previous line
002452  2  AF 31 03 00          LDA     F:CSRY
002456  2  A8                   TAY
002457  2  C0 00                CPY     #$00
002459  2  F0 27                BEQ     LdKbBuffer_1
00245B  2               ; if prior line linked  set y-1
00245B  2  C2 30                ACCUMULATORINDEX16
00245D  2  AF 47 03 00          LDA     f:TEMPOFFSET
002461  2  AA                   TAX
002462  2  E2 20                ACCUMULATOR8
002464  2  BF FF 0F 00          LDA     F:$0FFF,X
002468  2  E2 10                INDEX8
00246A  2  C9 20                CMP     #$20
00246C  2  F0 14                BEQ     LdKbBuffer_1
00246E  2  C2 20                ACCUMULATOR16
002470  2  AF 47 03 00          LDA     f:TEMPOFFSET
002474  2  38                   SEC
002475  2  E9 28 00             SBC     #40
002478  2  8F 47 03 00          STA     f:TEMPOFFSET
00247C  2  E2 20                ACCUMULATOR8
00247E  2  A9 51                LDA     #81             ; get 80 chars
002480  2  80 1D                BRA     LdKbBuffer_1b
002482  2               ; get chars; 40 if last line char=32, 80 if not
002482  2               
002482  2               LdKbBuffer_1:
002482  2               ; is this the last line on the screen?
002482  2  C0 17                CPY     #23
002484  2  F0 17                BEQ     LdKbBuffer_1a
002486  2               ; if current line linked carries to the next set size to 80
002486  2  C2 30                ACCUMULATORINDEX16
002488  2  AF 47 03 00          LDA     f:TEMPOFFSET
00248C  2  AA                   TAX
00248D  2  E2 20                ACCUMULATOR8
00248F  2  BF 27 10 00          LDA     F:$1027,X
002493  2  E2 10                INDEX8
002495  2  C9 20                CMP     #$20
002497  2  F0 04                BEQ     LdKbBuffer_1a
002499  2               LdKbBuffer_1c:
002499  2  A9 51                LDA     #81             ; get 80 chars
00249B  2  80 02                BRA     LdKbBuffer_1b
00249D  2               LdKbBuffer_1a:
00249D  2  A9 29                LDA     #41             ; get 40 chars
00249F  2               LdKbBuffer_1b:
00249F  2  C2 30                ACCUMULATORINDEX16
0024A1  2  29 FF 00             AND     #$00FF
0024A4  2  A8                   TAY
0024A5  2  AF 47 03 00          LDA     f:TEMPOFFSET
0024A9  2  AA                   TAX
0024AA  2  A9 00 00             LDA     #$0000
0024AD  2  85 07                STA     <LOCALWORK
0024AF  2  E2 20                ACCUMULATOR8
0024B1  2               LdKbBuffer_2:
0024B1  2  BF 00 10 00          LDA     f:$1000,X
0024B5  2  DA                   PHX
0024B6  2  A6 07                LDX     <LOCALWORK
0024B8  2  9F 81 21 02          STA     f:LIbuffs,X
0024BC  2  E8                   INX
0024BD  2  86 07                STX     <LOCALWORK
0024BF  2  FA                   PLX
0024C0  2  E8                   INX
0024C1  2  88                   DEY
0024C2  2  C0 00 00             CPY     #0000
0024C5  2  D0 EA                BNE     LdKbBuffer_2
0024C7  2  E2 30                ACCUMULATORINDEX8
0024C9  2  60                   RTS
0024CA  2               
0024CA  2               .I8
0024CA  2               .A8
0024CA  2               GetVideoAddressOffset:
0024CA  2  AF 31 03 00          LDA     F:CSRY
0024CE  2  C2 30                ACCUMULATORINDEX16
0024D0  2  29 FF 00             AND     #$00FF
0024D3  2  8F 45 03 00          STA     F:TEMP
0024D7  2  18                   CLC
0024D8  2  0A                   ASL     A
0024D9  2  0A                   ASL     A
0024DA  2  0A                   ASL     A
0024DB  2  0A                   ASL     A
0024DC  2  0A                   ASL     A
0024DD  2  48                   PHA
0024DE  2  AF 45 03 00          LDA     F:TEMP
0024E2  2  18                   CLC
0024E3  2  0A                   ASL     A
0024E4  2  0A                   ASL     A
0024E5  2  0A                   ASL     A
0024E6  2  8F 45 03 00          STA     F:TEMP
0024EA  2  68                   PLA
0024EB  2  18                   CLC
0024EC  2  6F 45 03 00          ADC     F:TEMP
0024F0  2  8F 47 03 00          STA     F:TEMPOFFSET
0024F4  2               ; if 80 columns double it.
0024F4  2  E2 20                ACCUMULATOR8
0024F6  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0024FA  2  C9 28                CMP     #40
0024FC  2  F0 0B                BEQ     :+
0024FE  2  C2 20                ACCUMULATOR16
002500  2  AF 47 03 00          LDA     F:TEMPOFFSET
002504  2  0A                   ASL     A
002505  2  8F 47 03 00          STA     F:TEMPOFFSET
002509  2               :
002509  2  E2 30                ACCUMULATORINDEX8
00250B  2  60                   RTS
00250C  2               
00250C  2               
00250C  2               
00250C  2               .I8
00250C  2               .A8
00250C  2               ;___LAB_MONITOR_____________________________________________
00250C  2               ;
00250C  2               ; UTILIZE BIOS TO GO TO MONITOR
00250C  2               ;
00250C  2               ;
00250C  2               ; THIS IS NATIVE '816 CODE
00250C  2               ;__________________________________________________________
00250C  2               LAB_MONITOR:
00250C  2  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
00250D  2  18                   CLC                     ;
00250E  2  FB                   XCE                     ; SET NATIVE MODE
00250F  2  DA A2 00 DA          SETBANK 0
002513  2  AB FA        
002515  2  C2 30                ACCUMULATORINDEX16
002517  2  A9 FF BF             LDA     #STACK          ; get the stack address
00251A  2  1B                   TCS                     ; and set the stack to it
00251B  2  5C 00 E0 00          JML     $00E000
00251F  2               
00251F  1               ;
00251F  1               ;____________________________________________________________________________________________
00251F  1               
00251F  1               
00251F  1               ;   ensure CPU Context is in a known state
00251F  1  EA                   NOP                     ; FIX A CODE PAGE ALIGNMENT PROBLEM
002520  1               BASICBEGIN:
002520  1               
002520  1  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
002521  1  18                   CLC                     ;
002522  1  FB                   XCE                     ; SET NATIVE MODE
002523  1  C2 30                ACCUMULATORINDEX16
002525  1  A9 FF BF             LDA     #STACK          ; get the stack address
002528  1  1B                   TCS                     ; and set the stack to it
002529  1  A9 00 00             LDA     #$0000          ;
00252C  1  48                   PHA                     ; Set Direct Register to 0
00252D  1  2B                   PLD                     ;
00252E  1               
00252E  1                       .IF     PROGRAMBANK=DATABANK
00252E  1               
00252E  1                       .ELSE
00252E  1  A2 00 10                 LDX     #$1000
002531  1  A0 00 10                 LDY     #$1000
002534  1  A9 00 10                 LDA     #$1000
002537  1  54 02 FF                 MVN     #PROGRAMBANK,#DATABANK; COPY TABLES $1000 THROUGH $2000 PLUS OR MINUS :) TO WORKING BANK
00253A  1                       .ENDIF
00253A  1  E2 30                ACCUMULATORINDEX8
00253C  1  A9 FF                LDA     #PROGRAMBANK    ; SET DATA BANK = TO PROGRAM BANK TO ALLOW FOR INITIALIZATION FROM ROM
00253E  1  48                   PHA
00253F  1  AB                   PLB                     ;
002540  1               
002540  1               
002540  1               
002540  1               LAB_COLD:
002540  1  A2 04                LDX     #PG2_TABE-PG2_TABS-1
002542  1               ; byte count-1
002542  1               LAB_2D13:
002542  1  BD 33 10             LDA     PG2_TABS,X      ; get byte
002545  1  9F 00 02 00          STA     f:ccflag,X      ; store in page 2
002549  1  CA                   DEX                     ; decrement count
00254A  1  10 F6                BPL     LAB_2D13        ; loop if not done
00254C  1               
00254C  1  A2 FF                LDX     #$FF            ; set byte
00254E  1  86 88                STX     <Clineh         ; set current line high byte (set immediate mode)
002550  1               
002550  1  A9 4C                LDA     #$4C            ; code for JMP
002552  1  85 A1                STA     <Fnxjmp         ; save for jump vector for functions
002554  1               
002554  1               ; copy block from LAB_2CEE to $00BC - $00E0
002554  1               
002554  1  A0 1D                LDY     #LAB_2CEE_END-LAB_2CEE; set byte count
002556  1               LAB_2D4E:
002556  1  BE 02 10             LDX     LAB_2CEE-1,Y    ; get byte from table
002559  1  96 BB                STX     <LAB_IGBY-1,Y   ; save byte in page zero
00255B  1  88                   DEY                     ; decrement count
00255C  1  D0 F8                BNE     LAB_2D4E        ; loop if not all done
00255E  1               
00255E  1               ; copy block from StrTab to $0000 - $0012
00255E  1               
00255E  1               LAB_GMEM:
00255E  1  A0 12                LDY     #EndTab-StrTab-1; set byte count-1
002560  1               TabLoop:
002560  1  BE 20 10             LDX     StrTab,Y        ; get byte from table
002563  1  96 00                STX     <PLUS_0,Y       ; save byte in page zero
002565  1  88                   DEY                     ; decrement count
002566  1  10 F8                BPL     TabLoop         ; loop if not all done
002568  1               
002568  1               ; set-up start values
002568  1  A9 02                LDA     #DATABANK       ; SET DATA BANK = TO DATA BANK, ALL PROGRAM DATA IN THIS AREA
00256A  1  85 C5                STA     <Bpntrp         ; SET LAB_GBYT PAGE POINTER TO DATA BANK
00256C  1  48                   PHA
00256D  1  AB                   PLB
00256E  1               
00256E  1  A9 00                LDA     #$00            ; clear A
002570  1  85 E5                STA     <NmiBase        ; clear NMI handler enabled flag
002572  1  85 E8                STA     <IrqBase        ; clear IRQ handler enabled flag
002574  1  85 B2                STA     <FAC1_o         ; clear FAC1 overflow byte
002576  1  85 67                STA     <last_sh        ; clear descriptor stack top item pointer high byte
002578  1               
002578  1  A9 0E                LDA     #$0E            ; set default tab size
00257A  1  85 64                STA     <TabSiz         ; save it
00257C  1  A9 03                LDA     #$03            ; set garbage collect step size for descriptor stack
00257E  1  85 A0                STA     <g_step         ; save it
002580  1  A2 68                LDX     #<des_sk        ; descriptor stack start
002582  1  86 65                STX     <next_s         ; set descriptor stack pointer
002584  1               
002584  1  A9 00                LDA     #<Ram_top
002586  1  A0 FF                LDY     #>Ram_top
002588  1  85 85                STA     <Ememl          ; set end of mem low byte
00258A  1  84 86                STY     <Ememh          ; set end of mem high byte
00258C  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
00258E  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002590  1               
002590  1  A0 00                LDY     #<Ram_base      ; set start addr low byte
002592  1  A2 22                LDX     #>Ram_base      ; set start addr high byte
002594  1  84 79                STY     <Smeml          ; save start of mem low byte
002596  1  86 7A                STX     <Smemh          ; save start of mem high byte
002598  1               
002598  1  98                   TYA                     ; clear A
002599  1  91 79                STA     (<Smeml),Y      ; clear first byte
00259B  1  E6 79                INC     <Smeml          ; increment start of mem low byte
00259D  1               
00259D  1               ; DO TITLE SCREEN
00259D  1  20 17 23             JSR     TitleScreen
0025A0  1  20 F9 2E             JSR     LAB_CRLF        ; print CR/LF
0025A3  1  20 C6 28             JSR     LAB_1463        ; do "NEW" and "CLEAR"
0025A6  1  A5 85                LDA     <Ememl          ; get end of mem low byte
0025A8  1  38                   SEC                     ; set carry for subtract
0025A9  1  E5 79                SBC     <Smeml          ; subtract start of mem low byte
0025AB  1  AA                   TAX                     ; copy to X
0025AC  1  A5 86                LDA     <Ememh          ; get end of mem high byte
0025AE  1  E5 7A                SBC     <Smemh          ; subtract start of mem high byte
0025B0  1  20 5F 46             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
0025B3  1  A9 0D                LDA     #<LAB_SMSG      ; point to sign-on message (low addr)
0025B5  1  A0 16                LDY     #>LAB_SMSG      ; point to sign-on message (high addr)
0025B7  1  20 41 2F             JSR     LAB_18C3        ; print null terminated string from memory
0025BA  1  A9 BE                LDA     #<LAB_1274      ; warm start vector low byte
0025BC  1  A0 26                LDY     #>LAB_1274      ; warm start vector high byte
0025BE  1  85 01                STA     <Wrmjpl         ; save warm start vector low byte
0025C0  1  84 02                STY     <Wrmjph         ; save warm start vector high byte
0025C2  1  6C 01 00             JMP     (Wrmjpl)        ; go do warm start
0025C5  1               
0025C5  1               ; open up space in memory
0025C5  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
0025C5  1               
0025C5  1               ; <Nbendl,<Nbendh - new block end address (A/Y)
0025C5  1               ; <Obendl,<Obendh - old block end address
0025C5  1               ; <Ostrtl,<Ostrth - old block start address
0025C5  1               
0025C5  1               ; returns with ..
0025C5  1               
0025C5  1               ; <Nbendl,<Nbendh - new block start address (high byte - $100)
0025C5  1               ; <Obendl,<Obendh - old block start address (high byte - $100)
0025C5  1               ; <Ostrtl,<Ostrth - old block start address (unchanged)
0025C5  1               
0025C5  1               LAB_11CF:
0025C5  1  20 6F 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
0025C8  1               ; addr to check is in AY (low/high)
0025C8  1  85 7F                STA     <Earryl         ; save new array mem end low byte
0025CA  1  84 80                STY     <Earryh         ; save new array mem end high byte
0025CC  1               
0025CC  1               ; open up space in memory
0025CC  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
0025CC  1               ; don't set array end
0025CC  1               
0025CC  1               LAB_11D6:
0025CC  1  38                   SEC                     ; set carry for subtract
0025CD  1  A5 A6                LDA     <Obendl         ; get block end low byte
0025CF  1  E5 AA                SBC     <Ostrtl         ; subtract block start low byte
0025D1  1  A8                   TAY                     ; copy MOD(block length/$100) byte to Y
0025D2  1  A5 A7                LDA     <Obendh         ; get block end high byte
0025D4  1  E5 AB                SBC     <Ostrth         ; subtract block start high byte
0025D6  1  AA                   TAX                     ; copy block length high byte to X
0025D7  1  E8                   INX                     ; +1 to allow for count=0 exit
0025D8  1  98                   TYA                     ; copy block length low byte to A
0025D9  1  F0 74                BEQ     LAB_120A        ; branch if length low byte=0
0025DB  1               
0025DB  1               ; block is (X-1)*256+Y bytes, do the Y bytes first
0025DB  1               
0025DB  1  38                   SEC                     ; set carry for add + 1, two's complement
0025DC  1  49 FF                EOR     #$FF            ; invert low byte for subtract
0025DE  1  65 A6                ADC     <Obendl         ; add block end low byte
0025E0  1               
0025E0  1  85 A6                STA     <Obendl         ; save corrected old block end low byte
0025E2  1  B0 03                BCS     LAB_11F3        ; branch if no underflow
0025E4  1               
0025E4  1  C6 A7                DEC     <Obendh         ; else decrement block end high byte
0025E6  1  38                   SEC                     ; set carry for add + 1, two's complement
0025E7  1               LAB_11F3:
0025E7  1  98                   TYA                     ; get MOD(block length/$100) byte
0025E8  1  49 FF                EOR     #$FF            ; invert low byte for subtract
0025EA  1  65 A4                ADC     <Nbendl         ; add destination end low byte
0025EC  1  85 A4                STA     <Nbendl         ; save modified new block end low byte
0025EE  1  B0 30                BCS     LAB_1203        ; branch if no underflow
0025F0  1               
0025F0  1  C6 A5                DEC     <Nbendh         ; else decrement block end high byte
0025F2  1  90 2C                BCC     LAB_1203        ; branch always
0025F4  1               
0025F4  1               LAB_11FF:
0025F4  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
0025F8  1  B5 A6 C9 00  
0025FC  1  D0 04 A2 00  
00260A  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; copy byte to destination
00260E  1  01 B5 A4 C9  
002612  1  00 D0 04 A2  
002620  1               LAB_1203:
002620  1  88                   DEY                     ; decrement index
002621  1  D0 D1                BNE     LAB_11FF        ; loop until Y=0
002623  1               
002623  1               ; now do Y=0 indexed byte
002623  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
002627  1  B5 A6 C9 00  
00262B  1  D0 04 A2 00  
002639  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; save byte to destination
00263D  1  01 B5 A4 C9  
002641  1  00 D0 04 A2  
00264F  1               LAB_120A:
00264F  1  C6 A7                DEC     <Obendh         ; decrement source pointer high byte
002651  1  C6 A5                DEC     <Nbendh         ; decrement destination pointer high byte
002653  1  CA                   DEX                     ; decrement block count
002654  1  D0 CA                BNE     LAB_1203        ; loop until count = $0
002656  1               
002656  1  60                   RTS
002657  1               
002657  1               ; check room on stack for A bytes
002657  1               ; stack too deep? do OM error
002657  1               LAB_1212:
002657  1  C2 20                ACCUMULATOR16
002659  1  29 FF 00             AND     #$00FF
00265C  1  18                   CLC
00265D  1  69 00 B0             ADC     #STACK_BOTTOM
002660  1  85 FD                STA     <TEMPW
002662  1  3B                   TSC
002663  1  C5 FD                CMP     <TEMPW
002665  1  90 03                BCC     LAB_1213        ; if stack < limit do "Out of memory" error then warm start
002667  1  E2 20                ACCUMULATOR8
002669  1  60                   RTS
00266A  1               LAB_1213:
00266A  1  E2 20                ACCUMULATOR8
00266C  1  4C 9E 26             JMP     LAB_OMER
00266F  1               
00266F  1               ; check available memory, "Out of memory" error if no room
00266F  1               ; addr to check is in AY (low/high)
00266F  1               
00266F  1               LAB_121F:
00266F  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
002671  1  90 2A                BCC     LAB_124B        ; if less then exit (is ok)
002673  1               
002673  1  D0 04                BNE     LAB_1229        ; skip next test if greater (tested <)
002675  1               
002675  1               ; high byte was =, now do low byte
002675  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
002677  1  90 24                BCC     LAB_124B        ; if less then exit (is ok)
002679  1               
002679  1               ; addr is > string storage ptr (oops!)
002679  1               LAB_1229:
002679  1  48                   PHA                     ; push addr low byte
00267A  1  A2 08                LDX     #$08            ; set index to save <Adatal to <expneg inclusive
00267C  1  98                   TYA                     ; copy addr high byte (to push on stack)
00267D  1               
00267D  1               ; save misc numeric work area
00267D  1               LAB_122D:
00267D  1  48                   PHA                     ; push byte
00267E  1  B5 A3                LDA     <Adatal-1,X     ; get byte from <Adatal to <expneg ( ,$00 not pushed)
002680  1  CA                   DEX                     ; decrement index
002681  1  10 FA                BPL     LAB_122D        ; loop until all done
002683  1               
002683  1  20 A7 39             JSR     LAB_GARB        ; garbage collection routine
002686  1               
002686  1               ; restore misc numeric work area
002686  1  A2 00                LDX     #$00            ; clear the index to restore bytes
002688  1               LAB_1238:
002688  1  68                   PLA                     ; pop byte
002689  1  95 A4                STA     <Adatal,X       ; save byte to <Adatal to <expneg
00268B  1  E8                   INX                     ; increment index
00268C  1  E0 08                CPX     #$08            ; compare with end + 1
00268E  1  30 F8                BMI     LAB_1238        ; loop if more to do
002690  1               
002690  1  68                   PLA                     ; pop addr high byte
002691  1  A8                   TAY                     ; copy back to Y
002692  1  68                   PLA                     ; pop addr low byte
002693  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
002695  1  90 06                BCC     LAB_124B        ; if less then exit (is ok)
002697  1               
002697  1  D0 05                BNE     LAB_OMER        ; if greater do "Out of memory" error then warm start
002699  1               
002699  1               ; high byte was =, now do low byte
002699  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
00269B  1  B0 01                BCS     LAB_OMER        ; if >= do "Out of memory" error then warm start
00269D  1               
00269D  1               ; ok exit, carry clear
00269D  1               LAB_124B:
00269D  1  60                   RTS
00269E  1               
00269E  1               ; do "Out of memory" error then warm start
00269E  1               
00269E  1               LAB_OMER:
00269E  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
0026A0  1               
0026A0  1               ; do error #X, then warm start
0026A0  1               
0026A0  1               LAB_XERR:
0026A0  1  20 F9 2E             JSR     LAB_CRLF        ; print CR/LF
0026A3  1               
0026A3  1               ;        LDA     <VIDEOMODE
0026A3  1               ;        CMP     #2
0026A3  1               ;        BEQ     LAB_XERRA
0026A3  1               ;        PHX
0026A3  1               ;        LDX     #2
0026A3  1               ;        JSR     V_SCREEN1
0026A3  1               ;        PLX
0026A3  1               ;LAB_XERRA:
0026A3  1  BD 5B 16             LDA     LAB_BAER,X      ; get error message pointer low byte
0026A6  1  BC 5C 16             LDY     LAB_BAER+1,X    ; get error message pointer high byte
0026A9  1  20 41 2F             JSR     LAB_18C3        ; print null terminated string from memory
0026AC  1               
0026AC  1  20 FF 28             JSR     LAB_1491        ; flush stack and clear continue flag
0026AF  1  A9 98                LDA     #<LAB_EMSG      ; point to " Error" low addr
0026B1  1  A0 17                LDY     #>LAB_EMSG      ; point to " Error" high addr
0026B3  1               LAB_1269:
0026B3  1  20 41 2F             JSR     LAB_18C3        ; print null terminated string from memory
0026B6  1  A4 88                LDY     <Clineh         ; get current line high byte
0026B8  1  C8                   INY                     ; increment it
0026B9  1  F0 03                BEQ     LAB_1274        ; go do warm start (was immediate mode)
0026BB  1               
0026BB  1               ; else print line number
0026BB  1  20 54 46             JSR     LAB_2953        ; print " in line [LINE #]"
0026BE  1               
0026BE  1               ; BASIC warm start entry point
0026BE  1               ; wait for Basic command
0026BE  1               
0026BE  1               LAB_1274:
0026BE  1               ;        LDA     <VIDEOMODE
0026BE  1               ;        CMP     #2
0026BE  1               ;        BEQ     LAB_1274a
0026BE  1               ;        LDX     #2
0026BE  1               ;        JSR     V_SCREEN1
0026BE  1               ;LAB_1274a:
0026BE  1               ; clear ON IRQ/NMI bytes
0026BE  1  A9 00                LDA     #$00            ; clear A
0026C0  1  85 E8                STA     <IrqBase        ; clear enabled byte
0026C2  1  85 E5                STA     <NmiBase        ; clear enabled byte
0026C4  1  A9 A9                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0026C6  1  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0026C8  1               
0026C8  1  20 41 2F             JSR     LAB_18C3        ; go do print string
0026CB  1               
0026CB  1               ; wait for Basic command (no "Ready")
0026CB  1               
0026CB  1               LAB_127D:
0026CB  1  20 B0 27             JSR     LAB_1357        ; call for BASIC input
0026CE  1               LAB_1280:
0026CE  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
0026D0  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
0026D2  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0026D6  1  F0 F3                BEQ     LAB_127D        ; loop while null
0026D8  1               
0026D8  1               ; got to interpret input line now ..
0026D8  1               
0026D8  1  A2 FF                LDX     #$FF            ; current line to null value
0026DA  1  86 88                STX     <Clineh         ; set current line high byte
0026DC  1  90 06                BCC     LAB_1295        ; branch if numeric character (handle new BASIC line)
0026DE  1               
0026DE  1               ; no line number .. immediate mode
0026DE  1  20 F1 27             JSR     LAB_13A6        ; crunch keywords into Basic tokens
0026E1  1  4C 74 2A             JMP     LAB_15F6        ; go scan and interpret code
0026E4  1               
0026E4  1               ; handle new BASIC line
0026E4  1               
0026E4  1               LAB_1295:
0026E4  1               
0026E4  1  20 DA 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
0026E7  1  20 F1 27             JSR     LAB_13A6        ; crunch keywords into Basic tokens
0026EA  1  84 5D                STY     <Ibptr          ; save index pointer to end of crunched line
0026EC  1  20 9A 28             JSR     LAB_SSLN        ; search BASIC for temp integer line number
0026EF  1  90 44                BCC     LAB_12E6        ; branch if not found
0026F1  1               
0026F1  1               ; aroooogah! line # already exists! delete it
0026F1  1  A0 01                LDY     #$01            ; set index to next line pointer high byte
0026F3  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0026F5  1  85 72                STA     <ut1_ph         ; save it
0026F7  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0026F9  1  85 71                STA     <ut1_pl         ; save it
0026FB  1  A5 AB                LDA     <Baslnh         ; get found line pointer high byte
0026FD  1  85 74                STA     <ut2_ph         ; save it
0026FF  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
002701  1  88                   DEY                     ; decrement index
002702  1  F1 AA                SBC     (<Baslnl),Y     ; subtract next line pointer low byte
002704  1  18                   CLC                     ; clear carry for add
002705  1  65 7B                ADC     <Svarl          ; add start of vars low byte
002707  1  85 7B                STA     <Svarl          ; save new start of vars low byte
002709  1  85 73                STA     <ut2_pl         ; save destination pointer low byte
00270B  1  A5 7C                LDA     <Svarh          ; get start of vars high byte
00270D  1  69 FF                ADC     #$FF            ; -1 + carry
00270F  1  85 7C                STA     <Svarh          ; save start of vars high byte
002711  1  E5 AB                SBC     <Baslnh         ; subtract found line pointer high byte
002713  1  AA                   TAX                     ; copy to block count
002714  1  38                   SEC                     ; set carry for subtract
002715  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
002717  1  E5 7B                SBC     <Svarl          ; subtract start of vars low byte
002719  1  A8                   TAY                     ; copy to bytes in first block count
00271A  1  B0 03                BCS     LAB_12D0        ; branch if overflow
00271C  1               
00271C  1  E8                   INX                     ; increment block count (correct for =0 loop exit)
00271D  1  C6 74                DEC     <ut2_ph         ; decrement destination high byte
00271F  1               LAB_12D0:
00271F  1  18                   CLC                     ; clear carry for add
002720  1  65 71                ADC     <ut1_pl         ; add source pointer low byte
002722  1  90 03                BCC     LAB_12D8        ; branch if no overflow
002724  1               
002724  1  C6 72                DEC     <ut1_ph         ; else decrement source pointer high byte
002726  1  18                   CLC                     ; clear carry
002727  1               
002727  1               ; close up memory to delete old line
002727  1               LAB_12D8:
002727  1  B1 71                LDA     (<ut1_pl),Y     ; get byte from source
002729  1  91 73                STA     (<ut2_pl),Y     ; copy to destination
00272B  1  C8                   INY                     ; increment index
00272C  1  D0 F9                BNE     LAB_12D8        ; while <> 0 do this block
00272E  1               
00272E  1  E6 72                INC     <ut1_ph         ; increment source pointer high byte
002730  1  E6 74                INC     <ut2_ph         ; increment destination pointer high byte
002732  1  CA                   DEX                     ; decrement block count
002733  1  D0 F2                BNE     LAB_12D8        ; loop until all done
002735  1               
002735  1               ; got new line in buffer and no existing same #
002735  1               LAB_12E6:
002735  1  AD 81 21             LDA     Ibuffs          ; get byte from start of input buffer
002738  1  F0 3F                BEQ     LAB_1319        ; if null line just go flush stack/vars and exit
00273A  1               
00273A  1               ; got new line and it isn't empty line
00273A  1  A5 85                LDA     <Ememl          ; get end of mem low byte
00273C  1  A4 86                LDY     <Ememh          ; get end of mem high byte
00273E  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
002740  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002742  1  A5 7B                LDA     <Svarl          ; get start of vars low byte	(end of BASIC)
002744  1  85 A6                STA     <Obendl         ; save old block end low byte
002746  1  A4 7C                LDY     <Svarh          ; get start of vars high byte	(end of BASIC)
002748  1  84 A7                STY     <Obendh         ; save old block end high byte
00274A  1  65 5D                ADC     <Ibptr          ; add input buffer pointer	(also buffer length)
00274C  1  90 01                BCC     LAB_1301        ; branch if no overflow from add
00274E  1               
00274E  1  C8                   INY                     ; else increment high byte
00274F  1               LAB_1301:
00274F  1  85 A4                STA     <Nbendl         ; save new block end low byte	(move to, low byte)
002751  1  84 A5                STY     <Nbendh         ; save new block end high byte
002753  1  20 C5 25             JSR     LAB_11CF        ; open up space in memory
002756  1               ; old start pointer <Ostrtl,<Ostrth set by the find line call
002756  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
002758  1  A4 80                LDY     <Earryh         ; get array mem end high byte
00275A  1  85 7B                STA     <Svarl          ; save start of vars low byte
00275C  1  84 7C                STY     <Svarh          ; save start of vars high byte
00275E  1  A4 5D                LDY     <Ibptr          ; get input buffer pointer	(also buffer length)
002760  1  88                   DEY                     ; adjust for loop type
002761  1               LAB_1311:
002761  1  B9 7D 21             LDA     Ibuffs-4,Y      ; get byte from crunched line
002764  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002766  1  88                   DEY                     ; decrement count
002767  1  C0 03                CPY     #$03            ; compare with first byte-1
002769  1  D0 F6                BNE     LAB_1311        ; continue while count <> 3
00276B  1               
00276B  1  A5 12                LDA     <Itemph         ; get line # high byte
00276D  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
00276F  1  88                   DEY                     ; decrement count
002770  1  A5 11                LDA     <Itempl         ; get line # low byte
002772  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002774  1  88                   DEY                     ; decrement count
002775  1  A9 FF                LDA     #$FF            ; set byte to allow chain rebuild. if you didn't set this
002777  1               ; byte then a zero already here would stop the chain rebuild
002777  1               ; as it would think it was the [EOT] marker.
002777  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
002779  1               
002779  1               LAB_1319:
002779  1  20 DB 28             JSR     LAB_1477        ; reset execution to start, clear vars and flush stack
00277C  1  A6 79                LDX     <Smeml          ; get start of mem low byte
00277E  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002780  1  A0 01                LDY     #$01            ; index to high byte of next line pointer
002782  1               LAB_1325:
002782  1  86 71                STX     <ut1_pl         ; set line start pointer low byte
002784  1  85 72                STA     <ut1_ph         ; set line start pointer high byte
002786  1  B1 71                LDA     (<ut1_pl),Y     ; get it
002788  1  F0 18                BEQ     LAB_133E        ; exit if end of program
00278A  1               
00278A  1               ; rebuild chaining of Basic lines
00278A  1               
00278A  1  A0 04                LDY     #$04            ; point to first code byte of line
00278C  1               ; there is always 1 byte + [EOL] as null entries are deleted
00278C  1               LAB_1330:
00278C  1  C8                   INY                     ; next code byte
00278D  1  B1 71                LDA     (<ut1_pl),Y     ; get byte
00278F  1  D0 FB                BNE     LAB_1330        ; loop if not [EOL]
002791  1               
002791  1  38                   SEC                     ; set carry for add + 1
002792  1  98                   TYA                     ; copy end index
002793  1  65 71                ADC     <ut1_pl         ; add to line start pointer low byte
002795  1  AA                   TAX                     ; copy to X
002796  1  A0 00                LDY     #$00            ; clear index, point to this line's next line pointer
002798  1  91 71                STA     (<ut1_pl),Y     ; set next line pointer low byte
00279A  1  98                   TYA                     ; clear A
00279B  1  65 72                ADC     <ut1_ph         ; add line start pointer high byte + carry
00279D  1  C8                   INY                     ; increment index to high byte
00279E  1  91 71                STA     (<ut1_pl),Y     ; save next line pointer low byte
0027A0  1  90 E0                BCC     LAB_1325        ; go do next line, branch always, carry clear
0027A2  1               
0027A2  1               
0027A2  1               LAB_133E:
0027A2  1  4C CB 26             JMP     LAB_127D        ; else we just wait for Basic command, no "Ready"
0027A5  1               
0027A5  1               ; print "? " and get BASIC input
0027A5  1               
0027A5  1               LAB_INLN:
0027A5  1               ;JSR	LAB_18E3		; print "?" character
0027A5  1  20 6A 2F             JSR     LAB_18E0        ; print " "
0027A8  1  D0 18                BNE     SimpleSerialEditor; call for BASIC input and return
0027AA  1               
0027AA  1               ; receive line from keyboard
0027AA  1               
0027AA  1               ; $08 as delete key (BACKSPACE on standard keyboard)
0027AA  1               LAB_134B:
0027AA  1  20 6F 2F             JSR     LAB_PRNA        ; go print the character
0027AD  1  CA                   DEX                     ; decrement the buffer counter (delete)
0027AE  1  80 14                BRA     LAB_1359
0027B0  1               
0027B0  1               ; call for BASIC input (main entry point)
0027B0  1               LAB_1357:
0027B0  1  AF 41 03 00          LDA     f:ConsoleDevice
0027B4  1  C9 00                CMP     #$00
0027B6  1  F0 0A                BEQ     SimpleSerialEditor
0027B8  1               ;	do screen editor
0027B8  1  20 40 23             JSR     ScreenEditor
0027BB  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
0027BD  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
0027BF  1  A9 00                LDA     #$00
0027C1  1  60                   RTS
0027C2  1               
0027C2  1               SimpleSerialEditor:
0027C2  1  A2 00                LDX     #$00            ; clear BASIC line buffer pointer
0027C4  1               LAB_1359:
0027C4  1  20 8F 18             JSR     V_INPT          ; call scan input device
0027C7  1  B0 FB                BCS     LAB_1359        ; loop if no byte
0027C9  1               ;BEQ	LAB_1359		; loop until valid input (ignore NULLs)
0027C9  1               
0027C9  1  C9 07                CMP     #$07            ; compare with [BELL]
0027CB  1  F0 10                BEQ     LAB_1378        ; branch if [BELL]
0027CD  1               
0027CD  1  C9 0D                CMP     #$0D            ; compare with [CR]
0027CF  1  F0 19                BEQ     LAB_1384        ; do CR/LF exit if [CR]
0027D1  1               
0027D1  1  E0 00                CPX     #$00            ; compare pointer with $00
0027D3  1  D0 04                BNE     LAB_1374        ; branch if not empty
0027D5  1               
0027D5  1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
0027D5  1               
0027D5  1  C9 21                CMP     #$21            ; compare with [SP]+1
0027D7  1  90 EB                BCC     LAB_1359        ; if < ignore character
0027D9  1               
0027D9  1               LAB_1374:
0027D9  1  C9 08                CMP     #$08            ; compare with [BACKSPACE] (delete last character)
0027DB  1  F0 CD                BEQ     LAB_134B        ; go delete last character
0027DD  1               
0027DD  1               LAB_1378:
0027DD  1  E0 50                CPX     #Ibuffe-Ibuffs  ; compare character count with max
0027DF  1  B0 0C                BCS     LAB_138E        ; skip store and do [BELL] if buffer full
0027E1  1               
0027E1  1  9D 81 21             STA     Ibuffs,X        ; else store in buffer
0027E4  1  E8                   INX                     ; increment pointer
0027E5  1               LAB_137F:
0027E5  1  20 6F 2F             JSR     LAB_PRNA        ; go print the character
0027E8  1  D0 DA                BNE     LAB_1359        ; always loop for next character
0027EA  1               
0027EA  1               LAB_1384:
0027EA  1  4C F0 2E             JMP     LAB_1866        ; do CR/LF exit to BASIC
0027ED  1               
0027ED  1               ; announce buffer full
0027ED  1               
0027ED  1               LAB_138E:
0027ED  1  A9 07                LDA     #$07            ; [BELL] character into A
0027EF  1  D0 F4                BNE     LAB_137F        ; go print the [BELL] but ignore input character
0027F1  1               ; branch always
0027F1  1               
0027F1  1               ; crunch keywords into Basic tokens
0027F1  1               ; position independent buffer version ..
0027F1  1               ; faster, dictionary search version ....
0027F1  1               
0027F1  1               LAB_13A6:
0027F1  1  A0 FF                LDY     #$FF            ; set save index (makes for easy math later)
0027F3  1               
0027F3  1  38                   SEC                     ; set carry for subtract
0027F4  1  A5 C3                LDA     <Bpntrl         ; get basic execute pointer low byte
0027F6  1  E9 81                SBC     #<Ibuffs        ; subtract input buffer start pointer
0027F8  1  AA                   TAX                     ; copy result to X (index past line # if any)
0027F9  1               
0027F9  1  86 60                STX     <Oquote         ; clear open quote/DATA flag
0027FB  1               LAB_13AC:
0027FB  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
0027FE  1  F0 51                BEQ     LAB_13EC        ; if null save byte then exit
002800  1               
002800  1  C9 5F                CMP     #'_'            ; compare with "_"
002802  1  B0 4D                BCS     LAB_13EC        ; if >= go save byte then continue crunching
002804  1               
002804  1  C9 3C                CMP     #'<'            ; compare with "<"
002806  1  B0 0E                BCS     LAB_13CC        ; if >= go crunch now
002808  1               
002808  1  C9 30                CMP     #'0'            ; compare with "0"
00280A  1  B0 45                BCS     LAB_13EC        ; if >= go save byte then continue crunching
00280C  1               
00280C  1  85 5C                STA     <Scnquo         ; save buffer byte as search character
00280E  1  C9 22                CMP     #$22            ; is it quote character?
002810  1  F0 64                BEQ     LAB_1410        ; branch if so (copy quoted string)
002812  1               
002812  1  C9 2A                CMP     #'*'            ; compare with "*"
002814  1  90 3B                BCC     LAB_13EC        ; if < go save byte then continue crunching
002816  1               
002816  1               ; else crunch now
002816  1               LAB_13CC:
002816  1  24 60                BIT     <Oquote         ; get open quote/DATA token flag
002818  1  70 37                BVS     LAB_13EC        ; branch if b6 of <Oquote set (was DATA)
00281A  1               ; go save byte then continue crunching
00281A  1               
00281A  1  86 78                STX     <TempB          ; save buffer read index
00281C  1  84 BA                STY     <csidx          ; copy buffer save index
00281E  1  A0 69                LDY     #<TAB_1STC      ; get keyword first character table low address
002820  1  84 73                STY     <ut2_pl         ; save pointer low byte
002822  1  A0 11                LDY     #>TAB_1STC      ; get keyword first character table high address
002824  1  84 74                STY     <ut2_ph         ; save pointer high byte
002826  1  A0 00                LDY     #$00            ; clear table pointer
002828  1               
002828  1               LAB_13D0:
002828  1  D1 73                CMP     (<ut2_pl),Y     ; compare with keyword first character table byte
00282A  1  F0 05                BEQ     LAB_13D1        ; go do word_table_chr if match
00282C  1               
00282C  1  90 21                BCC     LAB_13EA        ; if < keyword first character table byte go restore
00282E  1               ; Y and save to crunched
00282E  1               
00282E  1  C8                   INY                     ; else increment pointer
00282F  1  D0 F7                BNE     LAB_13D0        ; and loop (branch always)
002831  1               
002831  1               ; have matched first character of some keyword
002831  1               
002831  1               LAB_13D1:
002831  1  98                   TYA                     ; copy matching index
002832  1  0A                   ASL     A               ; *2 (bytes per pointer)
002833  1  AA                   TAX                     ; copy to new index
002834  1  BD 88 11             LDA     TAB_CHRT,X      ; get keyword table pointer low byte
002837  1  85 73                STA     <ut2_pl         ; save pointer low byte
002839  1  BD 89 11             LDA     TAB_CHRT+1,X    ; get keyword table pointer high byte
00283C  1  85 74                STA     <ut2_ph         ; save pointer high byte
00283E  1               
00283E  1  A0 FF                LDY     #$FF            ; clear table pointer (make -1 for start)
002840  1               
002840  1  A6 78                LDX     <TempB          ; restore buffer read index
002842  1               
002842  1               LAB_13D6:
002842  1  C8                   INY                     ; next table byte
002843  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from table
002845  1               LAB_13D8:
002845  1  30 08                BMI     LAB_13EA        ; all bytes matched so go save token
002847  1               
002847  1  E8                   INX                     ; next buffer byte
002848  1  DD 81 21             CMP     Ibuffs,X        ; compare with byte from input buffer
00284B  1  F0 F5                BEQ     LAB_13D6        ; go compare next if match
00284D  1               
00284D  1  D0 2E                BNE     LAB_1417        ; branch if >< (not found keyword)
00284F  1               
00284F  1               LAB_13EA:
00284F  1  A4 BA                LDY     <csidx          ; restore save index
002851  1               
002851  1               ; save crunched to output
002851  1               LAB_13EC:
002851  1  E8                   INX                     ; increment buffer index (to next input byte)
002852  1  C8                   INY                     ; increment save index (to next output byte)
002853  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
002856  1  C9 00                CMP     #$00            ; set the flags, set carry
002858  1  F0 35                BEQ     LAB_142A        ; do exit if was null [EOL]
00285A  1               
00285A  1               ; A holds token or byte here
00285A  1  E9 3A                SBC     #':'            ; subtract ":" (carry set by CMP #00)
00285C  1  F0 04                BEQ     LAB_13FF        ; branch if it was ":" (is now $00)
00285E  1               
00285E  1               ; A now holds token-$3A
00285E  1  C9 49                CMP     #TK_DATA-$3A    ; compare with DATA token - $3A
002860  1  D0 02                BNE     LAB_1401        ; branch if not DATA
002862  1               
002862  1               ; token was : or DATA
002862  1               LAB_13FF:
002862  1  85 60                STA     <Oquote         ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
002864  1               LAB_1401:
002864  1  49 57                EOR     #TK_REM-$3A     ; effectively subtract REM token offset
002866  1  F0 03                BEQ     LAB_1401_A
002868  1  4C FB 27             JMP     LAB_13AC        ; If wasn't REM then go crunch rest of line
00286B  1               
00286B  1               LAB_1401_A:
00286B  1  85 5C                STA     <Asrch          ; else was REM so set search for [EOL]
00286D  1               
00286D  1               ; loop for REM, "..." etc.
00286D  1               LAB_1408:
00286D  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
002870  1  F0 DF                BEQ     LAB_13EC        ; branch if null [EOL]
002872  1               
002872  1  C5 5C                CMP     <Asrch          ; compare with stored character
002874  1  F0 DB                BEQ     LAB_13EC        ; branch if match (end quote)
002876  1               
002876  1               ; entry for copy string in quotes, don't crunch
002876  1               LAB_1410:
002876  1  C8                   INY                     ; increment buffer save index
002877  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
00287A  1  E8                   INX                     ; increment buffer read index
00287B  1  D0 F0                BNE     LAB_1408        ; loop while <> 0 (should never be 0!)
00287D  1               
00287D  1               ; not found keyword this go
00287D  1               LAB_1417:
00287D  1  A6 78                LDX     <TempB          ; compare has failed, restore buffer index (start byte!)
00287F  1               
00287F  1               ; now find the end of this word in the table
00287F  1               LAB_141B:
00287F  1  B1 73                LDA     (<ut2_pl),Y     ; get table byte
002881  1  08                   PHP                     ; save status
002882  1  C8                   INY                     ; increment table index
002883  1  28                   PLP                     ; restore byte status
002884  1  10 F9                BPL     LAB_141B        ; if not end of keyword go do next
002886  1               
002886  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from keyword table
002888  1  D0 BB                BNE     LAB_13D8        ; go test next word if not zero byte (end of table)
00288A  1               
00288A  1               ; reached end of table with no match
00288A  1  BD 81 21             LDA     Ibuffs,X        ; restore byte from input buffer
00288D  1  10 C0                BPL     LAB_13EA        ; branch always (all bytes in buffer are $00-$7F)
00288F  1               ; go save byte in output and continue crunching
00288F  1               
00288F  1               ; reached [EOL]
00288F  1               LAB_142A:
00288F  1  C8                   INY                     ; increment pointer
002890  1  C8                   INY                     ; increment pointer (makes it next line pointer high byte)
002891  1  99 81 21             STA     Ibuffs,Y        ; save [EOL] (marks [EOT] in immediate mode)
002894  1  C8                   INY                     ; adjust for line copy
002895  1  C8                   INY                     ; adjust for line copy
002896  1  C8                   INY                     ; adjust for line copy
002897  1  C6 C3                DEC     <Bpntrl         ; allow for increment (change if buffer starts at $xxFF)
002899  1  60                   RTS
00289A  1               
00289A  1               ; search Basic for temp integer line number from start of mem
00289A  1               
00289A  1               LAB_SSLN:
00289A  1  A5 79                LDA     <Smeml          ; get start of mem low byte
00289C  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
00289E  1               
00289E  1               ; search Basic for temp integer line number from AX
00289E  1               ; returns carry set if found
00289E  1               ; returns <Baslnl/<Baslnh pointer to found or next higher (not found) line
00289E  1               
00289E  1               ; old 541 new 507
00289E  1               
00289E  1               LAB_SHLN:
00289E  1  A0 01                LDY     #$01            ; set index
0028A0  1  85 AA                STA     <Baslnl         ; save low byte as current
0028A2  1  86 AB                STX     <Baslnh         ; save high byte as current
0028A4  1  B1 AA                LDA     (<Baslnl),Y     ; get pointer high byte from addr
0028A6  1  F0 1A                BEQ     LAB_145F        ; pointer was zero so we're done, do 'not found' exit
0028A8  1               
0028A8  1  A0 03                LDY     #$03            ; set index to line # high byte
0028AA  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
0028AC  1  88                   DEY                     ; decrement index (point to low byte)
0028AD  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
0028AF  1  D0 04                BNE     LAB_1455        ; if <> skip low byte check
0028B1  1               
0028B1  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
0028B3  1  C5 11                CMP     <Itempl         ; compare with temporary integer low byte
0028B5  1               LAB_1455:
0028B5  1  B0 09                BCS     LAB_145E        ; else if temp < this line, exit (passed line#)
0028B7  1               
0028B7  1               LAB_1456:
0028B7  1  88                   DEY                     ; decrement index to next line ptr high byte
0028B8  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0028BA  1  AA                   TAX                     ; copy to X
0028BB  1  88                   DEY                     ; decrement index to next line ptr low byte
0028BC  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
0028BE  1  90 DE                BCC     LAB_SHLN        ; go search for line # in temp (<Itempl/<Itemph) from AX
0028C0  1               ; (carry always clear)
0028C0  1               
0028C0  1               LAB_145E:
0028C0  1  F0 01                BEQ     LAB_1460        ; exit if temp = found line #, carry is set
0028C2  1               
0028C2  1               LAB_145F:
0028C2  1  18                   CLC                     ; clear found flag
0028C3  1               LAB_1460:
0028C3  1  60                   RTS
0028C4  1               
0028C4  1               ; perform NEW
0028C4  1               
0028C4  1               LAB_NEW:
0028C4  1  D0 FD                BNE     LAB_1460        ; exit if not end of statement (to do syntax error)
0028C6  1               
0028C6  1               LAB_1463:
0028C6  1  A9 00                LDA     #$00            ; clear A
0028C8  1  A8                   TAY                     ; clear Y
0028C9  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, low byte
0028CB  1  C8                   INY                     ; increment index
0028CC  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, high byte
0028CE  1  18                   CLC                     ; clear carry
0028CF  1  A5 79                LDA     <Smeml          ; get start of mem low byte
0028D1  1  69 02                ADC     #$02            ; calculate end of BASIC low byte
0028D3  1  85 7B                STA     <Svarl          ; save start of vars low byte
0028D5  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
0028D7  1  69 00                ADC     #$00            ; add any carry
0028D9  1  85 7C                STA     <Svarh          ; save start of vars high byte
0028DB  1               
0028DB  1               ; reset execution to start, clear vars and flush stack
0028DB  1               
0028DB  1               LAB_1477:
0028DB  1  18                   CLC                     ; clear carry
0028DC  1  A5 79                LDA     <Smeml          ; get start of mem low byte
0028DE  1  69 FF                ADC     #$FF            ; -1
0028E0  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0028E2  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
0028E4  1  69 FF                ADC     #$FF            ; -1+carry
0028E6  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
0028E8  1               ; "CLEAR" command gets here
0028E8  1               
0028E8  1               LAB_147A:
0028E8  1  A5 85                LDA     <Ememl          ; get end of mem low byte
0028EA  1  A4 86                LDY     <Ememh          ; get end of mem high byte
0028EC  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
0028EE  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
0028F0  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0028F2  1  A4 7C                LDY     <Svarh          ; get start of vars high byte
0028F4  1  85 7D                STA     <Sarryl         ; save var mem end low byte
0028F6  1  84 7E                STY     <Sarryh         ; save var mem end high byte
0028F8  1  85 7F                STA     <Earryl         ; save array mem end low byte
0028FA  1  84 80                STY     <Earryh         ; save array mem end high byte
0028FC  1  20 C8 2A             JSR     LAB_161A        ; perform RESTORE command
0028FF  1               
0028FF  1               ; flush stack and clear continue flag
0028FF  1               
0028FF  1               LAB_1491:
0028FF  1  A2 68                LDX     #<des_sk        ; set descriptor stack pointer
002901  1  86 65                STX     <next_s         ; save descriptor stack pointer
002903  1  C2 30                ACCUMULATORINDEX16
002905  1  FA                   PLX                     ; pull return address low byte
002906  1  A9 FF BF             LDA     #STACK          ; get the stack address
002909  1  1B                   TCS                     ; and set the stack to it
00290A  1  DA                   PHX
00290B  1  E2 30                ACCUMULATORINDEX8
00290D  1  A9 00                LDA     #$00            ; clear byte
00290F  1  85 8C                STA     <Cpntrh         ; clear continue pointer high byte
002911  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
002913  1               LAB_14A6:
002913  1  60                   RTS
002914  1               
002914  1               ; perform CLEAR
002914  1               
002914  1               LAB_CLEAR:
002914  1  F0 D2                BEQ     LAB_147A        ; if no following token go do "CLEAR"
002916  1               
002916  1               ; else there was a following token (go do syntax error)
002916  1  60                   RTS
002917  1               
002917  1               ; perform LIST [n][-m]
002917  1               ; bigger, faster version (a _lot_ faster)
002917  1               
002917  1               LAB_LIST:
002917  1  90 06                BCC     LAB_14BD        ; branch if next character numeric (LIST n..)
002919  1               
002919  1  F0 04                BEQ     LAB_14BD        ; branch if next character [NULL] (LIST)
00291B  1               
00291B  1  C9 C9                CMP     #TK_MINUS       ; compare with token for -
00291D  1  D0 F4                BNE     LAB_14A6        ; exit if not - (LIST -m)
00291F  1               
00291F  1               ; LIST [[n][-m]]
00291F  1               ; this bit sets the n , if present, as the start and end
00291F  1               LAB_14BD:
00291F  1  20 DA 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002922  1  20 9A 28             JSR     LAB_SSLN        ; search BASIC for temp integer line number
002925  1               ; (pointer in <Baslnl/<Baslnh)
002925  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002929  1  F0 0D                BEQ     LAB_14D4        ; branch if no more characters
00292B  1               
00292B  1               ; this bit checks the - is present
00292B  1  C9 C9                CMP     #TK_MINUS       ; compare with token for -
00292D  1  D0 61                BNE     LAB_152B        ; return if not "-" (will be Syntax error)
00292F  1               
00292F  1               ; LIST [n]-m
00292F  1               ; the - was there so set m as the end value
00292F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002933  1  20 DA 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002936  1  D0 58                BNE     LAB_152B        ; exit if not ok
002938  1               
002938  1               LAB_14D4:
002938  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
00293A  1  05 12                ORA     <Itemph         ; OR temporary integer high byte
00293C  1  D0 06                BNE     LAB_14E2        ; branch if start set
00293E  1               
00293E  1  A9 FF                LDA     #$FF            ; set for -1
002940  1  85 11                STA     <Itempl         ; set temporary integer low byte
002942  1  85 12                STA     <Itemph         ; set temporary integer high byte
002944  1               LAB_14E2:
002944  1  A0 01                LDY     #$01            ; set index for line
002946  1  84 60                STY     <Oquote         ; clear open quote flag
002948  1  20 F9 2E             JSR     LAB_CRLF        ; print CR/LF
00294B  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
00294D  1               ; pointer initially set by search at LAB_14BD
00294D  1  F0 41                BEQ     LAB_152B        ; if null all done so exit
00294F  1  20 98 2A             JSR     LAB_1629        ; do CRTL-C check vector
002952  1               
002952  1  C8                   INY                     ; increment index for line
002953  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
002955  1  AA                   TAX                     ; copy to X
002956  1  C8                   INY                     ; increment index
002957  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
002959  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
00295B  1  D0 04                BNE     LAB_14FF        ; branch if no high byte match
00295D  1               
00295D  1  E4 11                CPX     <Itempl         ; compare with temporary integer low byte
00295F  1  F0 02                BEQ     LAB_1501        ; branch if = last line to do (< will pass next branch)
002961  1               
002961  1               LAB_14FF:                       ; else ..
002961  1  B0 2D                BCS     LAB_152B        ; if greater all done so exit
002963  1               
002963  1               LAB_1501:
002963  1  84 97                STY     <Tidx1          ; save index for line
002965  1  20 5F 46             JSR     LAB_295E        ; print XA as unsigned integer
002968  1  A9 20                LDA     #$20            ; space is the next character
00296A  1               LAB_1508:
00296A  1  A4 97                LDY     <Tidx1          ; get index for line
00296C  1  29 7F                AND     #$7F            ; mask top out bit of character
00296E  1               LAB_150C:
00296E  1  20 6F 2F             JSR     LAB_PRNA        ; go print the character
002971  1  C9 22                CMP     #$22            ; was it " character
002973  1  D0 06                BNE     LAB_1519        ; branch if not
002975  1               
002975  1               ; we are either entering or leaving a pair of quotes
002975  1  A5 60                LDA     <Oquote         ; get open quote flag
002977  1  49 FF                EOR     #$FF            ; toggle it
002979  1  85 60                STA     <Oquote         ; save it back
00297B  1               LAB_1519:
00297B  1  C8                   INY                     ; increment index
00297C  1  B1 AA                LDA     (<Baslnl),Y     ; get next byte
00297E  1  D0 11                BNE     LAB_152E        ; branch if not [EOL] (go print character)
002980  1  A8                   TAY                     ; else clear index
002981  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
002983  1  AA                   TAX                     ; copy to X
002984  1  C8                   INY                     ; increment index
002985  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002987  1  86 AA                STX     <Baslnl         ; set pointer to line low byte
002989  1  85 AB                STA     <Baslnh         ; set pointer to line high byte
00298B  1  F0 03                BEQ     LAB_152B
00298D  1  4C 44 29             JMP     LAB_14E2        ; go do next line if not [EOT]
002990  1               
002990  1               ; else ..
002990  1               LAB_152B:
002990  1  60                   RTS
002991  1               
002991  1               LAB_152E:
002991  1  10 DB                BPL     LAB_150C        ; just go print it if not token byte
002993  1               
002993  1               ; else was token byte so uncrunch it (maybe)
002993  1  24 60                BIT     <Oquote         ; test the open quote flag
002995  1  30 D7                BMI     LAB_150C        ; just go print character if open quote set
002997  1               
002997  1  A2 13                LDX     #>LAB_KEYT      ; get table address high byte
002999  1  0A                   ASL     A               ; *2
00299A  1  0A                   ASL     A               ; *4
00299B  1  90 02                BCC     LAB_152F        ; branch if no carry
00299D  1               
00299D  1  E8                   INX                     ; else increment high byte
00299E  1  18                   CLC                     ; clear carry for add
00299F  1               LAB_152F:
00299F  1  69 E2                ADC     #<LAB_KEYT      ; add low byte
0029A1  1  90 01                BCC     LAB_1530        ; branch if no carry
0029A3  1               
0029A3  1  E8                   INX                     ; else increment high byte
0029A4  1               LAB_1530:
0029A4  1  85 73                STA     <ut2_pl         ; save table pointer low byte
0029A6  1  86 74                STX     <ut2_ph         ; save table pointer high byte
0029A8  1  84 97                STY     <Tidx1          ; save index for line
0029AA  1  A0 00                LDY     #$00            ; clear index
0029AC  1  B1 73                LDA     (<ut2_pl),Y     ; get length
0029AE  1  AA                   TAX                     ; copy length
0029AF  1  C8                   INY                     ; increment index
0029B0  1  B1 73                LDA     (<ut2_pl),Y     ; get 1st character
0029B2  1  CA                   DEX                     ; decrement length
0029B3  1  D0 03                BNE     LAB_1508_A
0029B5  1  4C 6A 29             JMP     LAB_1508        ; if no more characters exit and print
0029B8  1               LAB_1508_A:
0029B8  1  20 6F 2F             JSR     LAB_PRNA        ; go print the character
0029BB  1  C8                   INY                     ; increment index
0029BC  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address low byte
0029BE  1  48                   PHA                     ; save it for now
0029BF  1  C8                   INY                     ; increment index
0029C0  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address high byte
0029C2  1  A0 00                LDY     #$00
0029C4  1  85 74                STA     <ut2_ph         ; save keyword pointer high byte
0029C6  1  68                   PLA                     ; pull low byte
0029C7  1  85 73                STA     <ut2_pl         ; save keyword pointer low byte
0029C9  1               LAB_1540:
0029C9  1  B1 73                LDA     (<ut2_pl),Y     ; get character
0029CB  1  CA                   DEX                     ; decrement character count
0029CC  1  D0 03                BNE     LAB_1508_B
0029CE  1  4C 6A 29             JMP     LAB_1508        ; if last character exit and print
0029D1  1               LAB_1508_B:
0029D1  1  20 6F 2F             JSR     LAB_PRNA        ; go print the character
0029D4  1  C8                   INY                     ; increment index
0029D5  1  D0 F2                BNE     LAB_1540        ; loop for next character
0029D7  1               
0029D7  1               ; perform FOR
0029D7  1               
0029D7  1               LAB_FOR:
0029D7  1  A9 80                LDA     #$80            ; set FNX
0029D9  1  85 61                STA     <Sufnxf         ; set subscript/FNX flag
0029DB  1  20 3C 2D             JSR     LAB_LET         ; go do LET
0029DE  1  68                   PLA                     ; pull return address
0029DF  1  68                   PLA                     ; pull return address
0029E0  1  A9 10                LDA     #$10            ; we need 16d bytes !
0029E2  1  20 57 26             JSR     LAB_1212        ; check room on stack for A bytes
0029E5  1  20 28 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
0029E8  1  18                   CLC                     ; clear carry for add
0029E9  1  98                   TYA                     ; copy index to A
0029EA  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
0029EC  1  48                   PHA                     ; push onto stack
0029ED  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0029EF  1  69 00                ADC     #$00            ; add carry
0029F1  1  48                   PHA                     ; push onto stack
0029F2  1  A5 88                LDA     <Clineh         ; get current line high byte
0029F4  1  48                   PHA                     ; push onto stack
0029F5  1  A5 87                LDA     <Clinel         ; get current line low byte
0029F7  1  48                   PHA                     ; push onto stack
0029F8  1  A9 BF                LDA     #TK_TO          ; get "TO" token
0029FA  1  20 D1 32             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
0029FD  1  20 AD 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
002A00  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002A03  1               ; else do type mismatch
002A03  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
002A05  1  09 7F                ORA     #$7F            ; set all non sign bits
002A07  1  25 AD                AND     <FAC1_1         ; and FAC1 mantissa1
002A09  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
002A0B  1  A9 16                LDA     #<LAB_159F      ; set return address low byte
002A0D  1  A0 2A                LDY     #>LAB_159F      ; set return address high byte
002A0F  1  85 71                STA     <ut1_pl         ; save return address low byte
002A11  1  84 72                STY     <ut1_ph         ; save return address high byte
002A13  1  4C 63 32             JMP     LAB_1B66        ; round FAC1 and put on stack (returns to next instruction)
002A16  1               
002A16  1               LAB_159F:
002A16  1  A9 68                LDA     #<LAB_259C      ; set 1 pointer low addr (default step size)
002A18  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high addr
002A1A  1  20 38 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002A1D  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002A21  1  C9 C4                CMP     #TK_STEP        ; compare with STEP token
002A23  1  D0 07                BNE     LAB_15B3        ; jump if not "STEP"
002A25  1               
002A25  1               ;.was step so ..
002A25  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002A29  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002A2C  1               ; else do type mismatch
002A2C  1               LAB_15B3:
002A2C  1  20 44 44             JSR     LAB_27CA        ; return A=FF,C=1/-ve A=01,C=0/+ve
002A2F  1  85 B0                STA     <FAC1_s         ; set FAC1 sign (b7)
002A31  1               ; this is +1 for +ve step and -1 for -ve step, in NEXT we
002A31  1               ; compare the FOR value and the TO value and return +1 if
002A31  1               ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
002A31  1               ; here (+/-1) is then compared to that result and if they
002A31  1               ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
002A31  1               ; the loop is done
002A31  1  20 58 32             JSR     LAB_1B5B        ; push sign, round FAC1 and put on stack
002A34  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
002A36  1  48                   PHA                     ; push on stack
002A37  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
002A39  1  48                   PHA                     ; push on stack
002A3A  1  A9 81                LDA     #TK_FOR         ; get FOR token
002A3C  1  48                   PHA                     ; push on stack
002A3D  1               
002A3D  1               ; interpreter inner loop
002A3D  1               
002A3D  1               LAB_15C2:
002A3D  1  20 98 2A             JSR     LAB_1629        ; do CRTL-C check vector
002A40  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002A42  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002A44  1               
002A44  1  A6 88                LDX     <Clineh         ; continue line is $FFxx for immediate mode
002A46  1               ; ($00xx for RUN from immediate mode)
002A46  1  E8                   INX                     ; increment it (now $00 if immediate mode)
002A47  1  F0 04                BEQ     LAB_15D1        ; branch if null (immediate mode)
002A49  1               
002A49  1  85 8B                STA     <Cpntrl         ; save continue pointer low byte
002A4B  1  84 8C                STY     <Cpntrh         ; save continue pointer high byte
002A4D  1               LAB_15D1:
002A4D  1  A0 00                LDY     #$00            ; clear index
002A4F  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
002A51  1  F0 07                BEQ     LAB_15DC        ; branch if null [EOL]
002A53  1               
002A53  1  C9 3A                CMP     #':'            ; compare with ":"
002A55  1  F0 1D                BEQ     LAB_15F6        ; branch if = (statement separator)
002A57  1               
002A57  1               LAB_15D9:
002A57  1  4C E4 32             JMP     LAB_SNER        ; else syntax error then warm start
002A5A  1               
002A5A  1               ; have reached [EOL]
002A5A  1               LAB_15DC:
002A5A  1  A0 02                LDY     #$02            ; set index
002A5C  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
002A5E  1  18                   CLC                     ; clear carry for no "BREAK" message
002A5F  1  F0 59                BEQ     LAB_1651        ; if null go to immediate mode (was immediate or [EOT]
002A61  1               ; marker)
002A61  1               
002A61  1  C8                   INY                     ; increment index
002A62  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # low byte
002A64  1  85 87                STA     <Clinel         ; save current line low byte
002A66  1  C8                   INY                     ; increment index
002A67  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # high byte
002A69  1  85 88                STA     <Clineh         ; save current line high byte
002A6B  1  98                   TYA                     ; A now = 4
002A6C  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002A6E  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002A70  1  90 02                BCC     LAB_15F6        ; branch if no overflow
002A72  1               
002A72  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002A74  1               LAB_15F6:
002A74  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002A78  1               
002A78  1               
002A78  1               
002A78  1               
002A78  1               LAB_15F9:
002A78  1  20 7E 2A             JSR     LAB_15FF        ; go interpret BASIC code from (<Bpntrl)
002A7B  1               LAB_15FC:
002A7B  1  4C 3D 2A             JMP     LAB_15C2        ; loop
002A7E  1               
002A7E  1               ; interpret BASIC code from (<Bpntrl)
002A7E  1               
002A7E  1               LAB_15FF:
002A7E  1  F0 56                BEQ     LAB_1628        ; exit if zero [EOL]
002A80  1               
002A80  1               LAB_1602:
002A80  1  0A                   ASL     A               ; *2 bytes per vector and normalise token
002A81  1  B0 03                BCS     LAB_1609        ; branch if was token
002A83  1  4C 3C 2D             JMP     LAB_LET         ; else go do implied LET
002A86  1               
002A86  1               LAB_1609:
002A86  1               TK_TABUSE       = (TK_TAB-$80)*2
002A86  1  C9 7A                CMP     #TK_TABUSE      ; compare normalised token * 2 with TAB
002A88  1  B0 CD                BCS     LAB_15D9        ; branch if A>=TAB (do syntax error then warm start)
002A8A  1               ; only tokens before TAB can start a line
002A8A  1  A8                   TAY                     ; copy to index
002A8B  1  B9 39 10             LDA     LAB_CTBL+1,Y    ; get vector high byte
002A8E  1  48                   PHA                     ; onto stack
002A8F  1  B9 38 10             LDA     LAB_CTBL,Y      ; get vector low byte
002A92  1  48                   PHA                     ; onto stack
002A93  1  22 BC 00 00          JSL     LAB_IGBY        ; jump to increment and scan memory
002A97  1               ; then "return" to vector
002A97  1  60                   RTS
002A98  1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
002A98  1               ; key press is detected.
002A98  1               
002A98  1               LAB_1629:
002A98  1  6C 03 02             JMP     (VEC_CC)        ; ctrl c check vector
002A9B  1               
002A9B  1               ; if there was a key press it gets back here ..
002A9B  1               
002A9B  1               LAB_1636:
002A9B  1  C9 03                CMP     #$03            ; compare with CTRL-C
002A9D  1               
002A9D  1               ; perform STOP
002A9D  1               
002A9D  1               LAB_STOP:
002A9D  1  B0 01                BCS     LAB_163B        ; branch if token follows STOP
002A9F  1               ; else just END
002A9F  1               ; END
002A9F  1               
002A9F  1               LAB_END:
002A9F  1  18                   CLC                     ; clear the carry, indicate a normal program end
002AA0  1               LAB_163B:
002AA0  1  D0 67                BNE     LAB_167A        ; if wasn't CTRL-C or there is a following byte return
002AA2  1               
002AA2  1  A5 C4                LDA     <Bpntrh         ; get the BASIC execute pointer high byte
002AA4  1  49 21                EOR     #>Ibuffs        ; compare with buffer address high byte (Cb unchanged)
002AA6  1  F0 10                BEQ     LAB_164F        ; branch if the BASIC pointer is in the input buffer
002AA8  1               ; (can't continue in immediate mode)
002AA8  1               
002AA8  1               ; else ..
002AA8  1  49 21                EOR     #>Ibuffs        ; correct the bits
002AAA  1  A4 C3                LDY     <Bpntrl         ; get BASIC execute pointer low byte
002AAC  1  84 8B                STY     <Cpntrl         ; save continue pointer low byte
002AAE  1  85 8C                STA     <Cpntrh         ; save continue pointer high byte
002AB0  1               LAB_1647:
002AB0  1  A5 87                LDA     <Clinel         ; get current line low byte
002AB2  1  A4 88                LDY     <Clineh         ; get current line high byte
002AB4  1  85 89                STA     <Blinel         ; save break line low byte
002AB6  1  84 8A                STY     <Blineh         ; save break line high byte
002AB8  1               LAB_164F:
002AB8  1  68                   PLA                     ; pull return address low
002AB9  1  68                   PLA                     ; pull return address high
002ABA  1               LAB_1651:
002ABA  1  90 07                BCC     LAB_165E        ; if was program end just do warm start
002ABC  1               
002ABC  1               ; else ..
002ABC  1               
002ABC  1               ;        LDA     <VIDEOMODE
002ABC  1               ;        CMP     #2
002ABC  1               ;        BEQ     LAB_1651A
002ABC  1               ;        LDX     #2
002ABC  1               ;        JSR     V_SCREEN1
002ABC  1               LAB_1651A:
002ABC  1  A9 90                LDA     #<LAB_BMSG      ; point to "Break" low byte
002ABE  1  A0 17                LDY     #>LAB_BMSG      ; point to "Break" high byte
002AC0  1  4C B3 26             JMP     LAB_1269        ; print "Break" and do warm start
002AC3  1               
002AC3  1               LAB_165E:
002AC3  1  4C BE 26             JMP     LAB_1274        ; go do warm start
002AC6  1               
002AC6  1               ; perform RESTORE
002AC6  1               
002AC6  1               LAB_RESTORE:
002AC6  1  D0 0F                BNE     LAB_RESTOREn    ; branch if next character not null (RESTORE n)
002AC8  1               
002AC8  1               LAB_161A:
002AC8  1  38                   SEC                     ; set carry for subtract
002AC9  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002ACB  1  E9 01                SBC     #$01            ; -1
002ACD  1  A4 7A                LDY     <Smemh          ; get start of mem high byte
002ACF  1  B0 01                BCS     LAB_1624        ; branch if no underflow
002AD1  1               
002AD1  1               LAB_uflow:
002AD1  1  88                   DEY                     ; else decrement high byte
002AD2  1               LAB_1624:
002AD2  1  85 8F                STA     <Dptrl          ; save DATA pointer low byte
002AD4  1  84 90                STY     <Dptrh          ; save DATA pointer high byte
002AD6  1               LAB_1628:
002AD6  1  60                   RTS
002AD7  1               
002AD7  1               ; is RESTORE n
002AD7  1               LAB_RESTOREn:
002AD7  1  20 DA 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002ADA  1  20 2B 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002ADD  1  A5 88                LDA     <Clineh         ; get current line high byte
002ADF  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002AE1  1  B0 0B                BCS     LAB_reset_search; branch if >= (start search from beginning)
002AE3  1               
002AE3  1  98                   TYA                     ; else copy line index to A
002AE4  1  38                   SEC                     ; set carry (+1)
002AE5  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002AE7  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002AE9  1  90 07                BCC     LAB_go_search   ; branch if no overflow to high byte
002AEB  1               
002AEB  1  E8                   INX                     ; increment high byte
002AEC  1  B0 04                BCS     LAB_go_search   ; branch always (can never be carry clear)
002AEE  1               
002AEE  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002AEE  1               
002AEE  1               LAB_reset_search:
002AEE  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002AF0  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002AF2  1               
002AF2  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002AF2  1               
002AF2  1               LAB_go_search:
002AF2  1               
002AF2  1  20 9E 28             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002AF5  1  B0 03                BCS     LAB_line_found  ; if carry set go set pointer
002AF7  1               
002AF7  1  4C FD 2B             JMP     LAB_16F7        ; else go do "Undefined statement" error
002AFA  1               
002AFA  1               LAB_line_found:
002AFA  1               ; carry already set for subtract
002AFA  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002AFC  1  E9 01                SBC     #$01            ; -1
002AFE  1  A4 AB                LDY     <Baslnh         ; get pointer high byte
002B00  1  B0 D0                BCS     LAB_1624        ; branch if no underflow (save DATA pointer and return)
002B02  1               
002B02  1  90 CD                BCC     LAB_uflow       ; else decrement high byte then save DATA pointer and
002B04  1               ; return (branch always)
002B04  1               
002B04  1               ; perform NULL
002B04  1               
002B04  1               LAB_NULL:
002B04  1  20 5A 3E             JSR     LAB_GTBY        ; get byte parameter
002B07  1  86 0D                STX     <Nullct         ; save new NULL count
002B09  1               LAB_167A:
002B09  1  60                   RTS
002B0A  1               
002B0A  1               ; perform CONT
002B0A  1               
002B0A  1               LAB_CONT:
002B0A  1  D0 FD                BNE     LAB_167A        ; if following byte exit to do syntax error
002B0C  1               
002B0C  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002B0E  1  D0 05                BNE     LAB_166C        ; go do continue if we can
002B10  1               
002B10  1  A2 1E                LDX     #$1E            ; error code $1E ("Can't continue" error)
002B12  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
002B15  1               
002B15  1               ; we can continue so ..
002B15  1               LAB_166C:
002B15  1  A9 93                LDA     #TK_ON          ; set token for ON
002B17  1  20 74 4B             JSR     LAB_IRQ         ; set IRQ flags
002B1A  1  A9 93                LDA     #TK_ON          ; set token for ON
002B1C  1  20 77 4B             JSR     LAB_NMI         ; set NMI flags
002B1F  1               
002B1F  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002B21  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002B23  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002B25  1  A5 89                LDA     <Blinel         ; get break line low byte
002B27  1  A4 8A                LDY     <Blineh         ; get break line high byte
002B29  1  85 87                STA     <Clinel         ; set current line low byte
002B2B  1  84 88                STY     <Clineh         ; set current line high byte
002B2D  1  60                   RTS
002B2E  1               
002B2E  1               ; perform RUN
002B2E  1               
002B2E  1               LAB_RUN:
002B2E  1  D0 03                BNE     LAB_1696        ; branch if RUN n
002B30  1  4C DB 28             JMP     LAB_1477        ; reset execution to start, clear variables, flush stack and
002B33  1               ; return
002B33  1               
002B33  1               ; does RUN n
002B33  1               
002B33  1               LAB_1696:
002B33  1  20 E8 28             JSR     LAB_147A        ; go do "CLEAR"
002B36  1  F0 2F                BEQ     LAB_16B0        ; get n and do GOTO n (branch always as CLEAR sets Z=1)
002B38  1               
002B38  1               ; perform DO
002B38  1               
002B38  1               LAB_DO:
002B38  1  A9 05                LDA     #$05            ; need 5 bytes for DO
002B3A  1  20 57 26             JSR     LAB_1212        ; check room on stack for A bytes
002B3D  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002B3F  1  48                   PHA                     ; push on stack
002B40  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002B42  1  48                   PHA                     ; push on stack
002B43  1  A5 88                LDA     <Clineh         ; get current line high byte
002B45  1  48                   PHA                     ; push on stack
002B46  1  A5 87                LDA     <Clinel         ; get current line low byte
002B48  1  48                   PHA                     ; push on stack
002B49  1  A9 9C                LDA     #TK_DO          ; token for DO
002B4B  1  48                   PHA                     ; push on stack
002B4C  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002B50  1  4C 3D 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002B53  1               
002B53  1               ; perform GOSUB
002B53  1               
002B53  1               LAB_GOSUB:
002B53  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
002B55  1  20 57 26             JSR     LAB_1212        ; check room on stack for A bytes
002B58  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002B5A  1  48                   PHA                     ; push on stack
002B5B  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002B5D  1  48                   PHA                     ; push on stack
002B5E  1  A5 88                LDA     <Clineh         ; get current line high byte
002B60  1  48                   PHA                     ; push on stack
002B61  1  A5 87                LDA     <Clinel         ; get current line low byte
002B63  1  48                   PHA                     ; push on stack
002B64  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
002B66  1  48                   PHA                     ; push on stack
002B67  1               LAB_16B0:
002B67  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002B6B  1  20 71 2B             JSR     LAB_GOTO        ; perform GOTO n
002B6E  1  4C 3D 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002B71  1               ; (can't RTS, we used the stack!)
002B71  1               
002B71  1               ; perform GOTO
002B71  1               
002B71  1               LAB_GOTO:
002B71  1  20 DA 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002B74  1  20 2B 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002B77  1  A5 88                LDA     <Clineh         ; get current line high byte
002B79  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002B7B  1  B0 0B                BCS     LAB_16D0        ; branch if >= (start search from beginning)
002B7D  1               
002B7D  1  98                   TYA                     ; else copy line index to A
002B7E  1  38                   SEC                     ; set carry (+1)
002B7F  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002B81  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002B83  1  90 07                BCC     LAB_16D4        ; branch if no overflow to high byte
002B85  1               
002B85  1  E8                   INX                     ; increment high byte
002B86  1  B0 04                BCS     LAB_16D4        ; branch always (can never be carry)
002B88  1               
002B88  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002B88  1               
002B88  1               LAB_16D0:
002B88  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002B8A  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002B8C  1               
002B8C  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002B8C  1               
002B8C  1               LAB_16D4:
002B8C  1  20 9E 28             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002B8F  1  90 6C                BCC     LAB_16F7        ; if carry clear go do "Undefined statement" error
002B91  1               ; (unspecified statement)
002B91  1               
002B91  1               ; carry already set for subtract
002B91  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002B93  1  E9 01                SBC     #$01            ; -1
002B95  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002B97  1  A5 AB                LDA     <Baslnh         ; get pointer high byte
002B99  1  E9 00                SBC     #$00            ; subtract carry
002B9B  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002B9D  1               LAB_16E5:
002B9D  1  60                   RTS
002B9E  1               
002B9E  1               LAB_DONOK:
002B9E  1  A2 22                LDX     #$22            ; error code $22 ("LOOP without DO" error)
002BA0  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
002BA3  1               
002BA3  1               ; perform LOOP
002BA3  1               
002BA3  1               LAB_LOOP:
002BA3  1  A8                   TAY                     ; save following token
002BA4  1  A3 03                LDA     3,S             ; get token byte from stack
002BA6  1  C9 9C                CMP     #TK_DO          ; compare with DO token
002BA8  1  D0 F4                BNE     LAB_DONOK       ; branch if no matching DO
002BAA  1               
002BAA  1               ; FIXUP STACK
002BAA  1  C2 10                INDEX16
002BAC  1  BA                   TSX
002BAD  1  E8                   INX                     ; dump calling routine return address
002BAE  1  E8                   INX                     ; dump calling routine return address
002BAF  1  9A                   TXS                     ; correct stack
002BB0  1  E2 10                INDEX8
002BB2  1               
002BB2  1  98                   TYA                     ; get saved following token back
002BB3  1  F0 20                BEQ     LoopAlways      ; if no following token loop forever
002BB5  1               ; (stack pointer in X)
002BB5  1               
002BB5  1  C9 3A                CMP     #':'            ; could be ':'
002BB7  1  F0 1C                BEQ     LoopAlways      ; if :... loop forever
002BB9  1               
002BB9  1  E9 C5                SBC     #TK_UNTIL       ; subtract token for UNTIL, we know carry is set here
002BBB  1  AA                   TAX                     ; copy to X (if it was UNTIL then Y will be correct)
002BBC  1  F0 04                BEQ     DoRest          ; branch if was UNTIL
002BBE  1               
002BBE  1  CA                   DEX                     ; decrement result
002BBF  1  D0 64                BNE     LAB_16FC        ; if not WHILE go do syntax error and warm start
002BC1  1               ; only if the token was WHILE will this fail
002BC1  1               
002BC1  1  CA                   DEX                     ; set invert result byte
002BC2  1               DoRest:
002BC2  1  86 98                STX     <Frnxth         ; save invert result byte
002BC4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002BC8  1  20 BE 31             JSR     LAB_EVEX        ; evaluate expression
002BCB  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002BCD  1  F0 02                BEQ     DoCmp           ; if =0 go do straight compare
002BCF  1               
002BCF  1  A9 FF                LDA     #$FF            ; else set all bits
002BD1  1               DoCmp:
002BD1  1  45 98                EOR     <Frnxth         ; EOR with invert byte
002BD3  1  D0 17                BNE     LoopDone        ; if <> 0 clear stack and back to interpreter loop
002BD5  1               
002BD5  1               ; loop condition wasn't met so do it again
002BD5  1               LoopAlways:
002BD5  1  A3 02                LDA     2,S             ; get current line low byte
002BD7  1  85 87                STA     <Clinel         ; save current line low byte
002BD9  1  A3 03                LDA     3,S             ; get current line high byte
002BDB  1  85 88                STA     <Clineh         ; save current line high byte
002BDD  1  A3 04                LDA     4,S             ; get BASIC execute pointer low byte
002BDF  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002BE1  1  A3 05                LDA     5,S             ; get BASIC execute pointer high byte
002BE3  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002BE5  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002BE9  1  4C 3D 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002BEC  1               
002BEC  1               ; clear stack and back to interpreter loop
002BEC  1               LoopDone:
002BEC  1  C2 10                INDEX16
002BEE  1  BA                   TSX
002BEF  1  E8                   INX                     ; dump DO token
002BF0  1  E8                   INX                     ; dump current line low byte
002BF1  1  E8                   INX                     ; dump current line high byte
002BF2  1  E8                   INX                     ; dump BASIC execute pointer low byte
002BF3  1  E8                   INX                     ; dump BASIC execute pointer high byte
002BF4  1  9A                   TXS                     ; correct stack
002BF5  1  E2 10                INDEX8
002BF7  1  4C 17 2C             JMP     LAB_DATA        ; go perform DATA (find : or [EOL])
002BFA  1               
002BFA  1               ; do the return without gosub error
002BFA  1               
002BFA  1               LAB_16F4:
002BFA  1  A2 04                LDX     #$04            ; error code $04 ("RETURN without GOSUB" error)
002BFC  1  2C                   .BYTE   $2C             ; makes next line BIT LAB_0EA2
002BFD  1               
002BFD  1               LAB_16F7:                       ; do undefined statement error
002BFD  1  A2 0E                LDX     #$0E            ; error code $0E ("Undefined statement" error)
002BFF  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
002C02  1               
002C02  1               ; perform RETURN
002C02  1               
002C02  1               LAB_RETURN:
002C02  1  D0 99                BNE     LAB_16E5        ; exit if following token (to allow syntax error)
002C04  1               
002C04  1               LAB_16E8:
002C04  1  68                   PLA                     ; dump calling routine return address
002C05  1  68                   PLA                     ; dump calling routine return address
002C06  1  68                   PLA                     ; pull token
002C07  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002C09  1  D0 EF                BNE     LAB_16F4        ; branch if no matching GOSUB
002C0B  1               
002C0B  1               LAB_16FF:
002C0B  1  68                   PLA                     ; pull current line low byte
002C0C  1  85 87                STA     <Clinel         ; save current line low byte
002C0E  1  68                   PLA                     ; pull current line high byte
002C0F  1  85 88                STA     <Clineh         ; save current line high byte
002C11  1  68                   PLA                     ; pull BASIC execute pointer low byte
002C12  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002C14  1  68                   PLA                     ; pull BASIC execute pointer high byte
002C15  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002C17  1               
002C17  1               ; now do the DATA statement as we could be returning into
002C17  1               ; the middle of an ON <var> GOSUB n,m,p,q line
002C17  1               ; (the return address used by the DATA statement is the one
002C17  1               ; pushed before the GOSUB was executed!)
002C17  1               
002C17  1               ; perform DATA
002C17  1               
002C17  1               LAB_DATA:
002C17  1  20 28 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002C1A  1               
002C1A  1               ; set BASIC execute pointer
002C1A  1               LAB_170F:
002C1A  1  98                   TYA                     ; copy index to A
002C1B  1  18                   CLC                     ; clear carry for add
002C1C  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002C1E  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002C20  1  90 02                BCC     LAB_1719        ; skip next if no carry
002C22  1               
002C22  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002C24  1               LAB_1719:
002C24  1  60                   RTS
002C25  1               
002C25  1               LAB_16FC:
002C25  1  4C E4 32             JMP     LAB_SNER        ; do syntax error then warm start
002C28  1               
002C28  1               ; scan for next BASIC statement ([:] or [EOL])
002C28  1               ; returns Y as index to [:] or [EOL]
002C28  1               
002C28  1               LAB_SNBS:
002C28  1  A2 3A                LDX     #':'            ; set look for character = ":"
002C2A  1  2C                   .BYTE   $2C             ; makes next line BIT $00A2
002C2B  1               
002C2B  1               ; scan for next BASIC line
002C2B  1               ; returns Y as index to [EOL]
002C2B  1               
002C2B  1               LAB_SNBL:
002C2B  1  A2 00                LDX     #$00            ; set alt search character = [EOL]
002C2D  1  A0 00                LDY     #$00            ; set search character = [EOL]
002C2F  1  84 5C                STY     <Asrch          ; store search character
002C31  1               LAB_1725:
002C31  1  8A                   TXA                     ; get alt search character
002C32  1  45 5C                EOR     <Asrch          ; toggle search character, effectively swap with $00
002C34  1  85 5C                STA     <Asrch          ; save swapped search character
002C36  1               LAB_172D:
002C36  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
002C38  1  F0 EA                BEQ     LAB_1719        ; exit if null [EOL]
002C3A  1               
002C3A  1  C5 5C                CMP     <Asrch          ; compare with search character
002C3C  1  F0 E6                BEQ     LAB_1719        ; exit if found
002C3E  1               
002C3E  1  C8                   INY                     ; increment index
002C3F  1  C9 22                CMP     #$22            ; compare current character with open quote
002C41  1  D0 F3                BNE     LAB_172D        ; if not open quote go get next character
002C43  1               
002C43  1  F0 EC                BEQ     LAB_1725        ; if found go swap search character for alt search character
002C45  1               
002C45  1               ; perform IF
002C45  1               
002C45  1               LAB_IF:
002C45  1  20 BE 31             JSR     LAB_EVEX        ; evaluate the expression
002C48  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002C4C  1  C9 C2                CMP     #TK_THEN        ; compare with THEN token
002C4E  1  F0 12                BEQ     LAB_174B        ; if it was THEN go do IF
002C50  1               
002C50  1               ; wasn't IF .. THEN so must be IF .. GOTO
002C50  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002C52  1  D0 D1                BNE     LAB_16FC        ; if it wasn't GOTO go do syntax error
002C54  1               
002C54  1  A6 C3                LDX     <Bpntrl         ; save the basic pointer low byte
002C56  1  A4 C4                LDY     <Bpntrh         ; save the basic pointer high byte
002C58  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002C5C  1  B0 C7                BCS     LAB_16FC        ; if not numeric go do syntax error
002C5E  1               
002C5E  1  86 C3                STX     <Bpntrl         ; restore the basic pointer low byte
002C60  1  84 C4                STY     <Bpntrh         ; restore the basic pointer high byte
002C62  1               LAB_174B:
002C62  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002C64  1  F0 1F                BEQ     LAB_174E        ; if the result was zero go look for an ELSE
002C66  1               
002C66  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
002C6A  1  B0 03                BCS     LAB_174D        ; if not numeric go do var or keyword
002C6C  1               
002C6C  1               LAB_174C:
002C6C  1  4C 71 2B             JMP     LAB_GOTO        ; else was numeric so do GOTO n
002C6F  1               
002C6F  1               ; is var or keyword
002C6F  1               LAB_174D:
002C6F  1  C9 90                CMP     #TK_RETURN      ; compare the byte with the token for RETURN
002C71  1  D0 03                BNE     LAB_174G        ; if it wasn't RETURN go interpret BASIC code from (<Bpntrl)
002C73  1               ; and return to this code to process any following code
002C73  1               
002C73  1  4C 80 2A             JMP     LAB_1602        ; else it was RETURN so interpret BASIC code from (<Bpntrl)
002C76  1               ; but don't return here
002C76  1               
002C76  1               LAB_174G:
002C76  1  20 7E 2A             JSR     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002C79  1               
002C79  1               ; the IF was executed and there may be a following ELSE so the code needs to return
002C79  1               ; here to check and ignore the ELSE if present
002C79  1               
002C79  1  A0 00                LDY     #$00            ; clear the index
002C7B  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002C7D  1  C9 BE                CMP     #TK_ELSE        ; compare it with the token for ELSE
002C7F  1  D0 03                BNE     LAB_DATA_A
002C81  1  4C 17 2C             JMP     LAB_DATA        ; if ELSE ignore the following statement
002C84  1               
002C84  1               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
002C84  1               ; following ELSE will, correctly, cause a syntax error
002C84  1               LAB_DATA_A:
002C84  1  60                   RTS                     ; else return to the interpreter inner loop
002C85  1               
002C85  1               ; perform ELSE after IF
002C85  1               
002C85  1               LAB_174E:
002C85  1  A0 00                LDY     #$00            ; clear the BASIC byte index
002C87  1  A2 01                LDX     #$01            ; clear the nesting depth
002C89  1               LAB_1750:
002C89  1  C8                   INY                     ; increment the BASIC byte index
002C8A  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002C8C  1  F0 0F                BEQ     LAB_1753        ; if EOL go add the pointer and return
002C8E  1               
002C8E  1  C9 8D                CMP     #TK_IF          ; compare the byte with the token for IF
002C90  1  D0 03                BNE     LAB_1752        ; if not IF token skip the depth increment
002C92  1               
002C92  1  E8                   INX                     ; else increment the nesting depth ..
002C93  1  D0 F4                BNE     LAB_1750        ; .. and continue looking
002C95  1               
002C95  1               LAB_1752:
002C95  1  C9 BE                CMP     #TK_ELSE        ; compare the byte with the token for ELSE
002C97  1  D0 F0                BNE     LAB_1750        ; if not ELSE token continue looking
002C99  1               
002C99  1  CA                   DEX                     ; was ELSE so decrement the nesting depth
002C9A  1  D0 ED                BNE     LAB_1750        ; loop if still nested
002C9C  1               
002C9C  1  C8                   INY                     ; increment the BASIC byte index past the ELSE
002C9D  1               
002C9D  1               ; found the matching ELSE, now do <{n|statement}>
002C9D  1               
002C9D  1               LAB_1753:
002C9D  1  98                   TYA                     ; else copy line index to A
002C9E  1  18                   CLC                     ; clear carry for add
002C9F  1  65 C3                ADC     <Bpntrl         ; add the BASIC execute pointer low byte
002CA1  1  85 C3                STA     <Bpntrl         ; save the BASIC execute pointer low byte
002CA3  1  90 02                BCC     LAB_1754        ; branch if no overflow to high byte
002CA5  1               
002CA5  1  E6 C4                INC     <Bpntrh         ; else increment the BASIC execute pointer high byte
002CA7  1               LAB_1754:
002CA7  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002CAB  1  90 BF                BCC     LAB_174C        ; if numeric do GOTO n
002CAD  1               ; the code will return to the interpreter loop at the
002CAD  1               ; tail end of the GOTO <n>
002CAD  1               
002CAD  1  4C 7E 2A             JMP     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002CB0  1               ; the code will return to the interpreter loop at the
002CB0  1               ; tail end of the <statement>
002CB0  1               
002CB0  1               ; perform REM, skip (rest of) line
002CB0  1               
002CB0  1               LAB_REM:
002CB0  1  20 2B 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002CB3  1  4C 1A 2C             JMP     LAB_170F        ; go set BASIC execute pointer and return, branch always
002CB6  1               
002CB6  1               LAB_16FD:
002CB6  1  4C E4 32             JMP     LAB_SNER        ; do syntax error then warm start
002CB9  1               
002CB9  1               ; perform ON
002CB9  1               
002CB9  1               LAB_ON:
002CB9  1               LAB_NONM:
002CB9  1  20 5A 3E             JSR     LAB_GTBY        ; get byte parameter
002CBC  1  48                   PHA                     ; push GOTO/GOSUB token
002CBD  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002CBF  1  F0 04                BEQ     LAB_176B        ; branch if GOSUB
002CC1  1               
002CC1  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002CC3  1               LAB_1767:
002CC3  1  D0 F1                BNE     LAB_16FD        ; if not GOTO do syntax error then warm start
002CC5  1               
002CC5  1               
002CC5  1               ; next character was GOTO or GOSUB
002CC5  1               
002CC5  1               LAB_176B:
002CC5  1  C6 AF                DEC     <FAC1_3         ; decrement index (byte value)
002CC7  1  D0 04                BNE     LAB_1773        ; branch if not zero
002CC9  1               
002CC9  1  68                   PLA                     ; pull GOTO/GOSUB token
002CCA  1  4C 80 2A             JMP     LAB_1602        ; go execute it
002CCD  1               
002CCD  1               LAB_1773:
002CCD  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002CD1  1  20 DA 2C             JSR     LAB_GFPN        ; get fixed-point number into temp integer (skip this n)
002CD4  1               ; (we could LDX #',' and JSR LAB_SNBL+2, then we
002CD4  1               ; just BNE LAB_176B for the loop. should be quicker ..
002CD4  1               ; no we can't, what if we meet a colon or [EOL]?)
002CD4  1  C9 2C                CMP     #$2C            ; compare next character with ","
002CD6  1  F0 ED                BEQ     LAB_176B        ; loop if ","
002CD8  1               
002CD8  1               LAB_177E:
002CD8  1  68                   PLA                     ; else pull keyword token (run out of options)
002CD9  1               ; also dump +/-1 pointer low byte and exit
002CD9  1               LAB_177F:
002CD9  1  60                   RTS
002CDA  1               
002CDA  1               ; takes n * 106 + 11 cycles where n is the number of digits
002CDA  1               
002CDA  1               ; get fixed-point number into temp integer
002CDA  1               
002CDA  1               LAB_GFPN:
002CDA  1  A2 00                LDX     #$00            ; clear reg
002CDC  1  86 11                STX     <Itempl         ; clear temporary integer low byte
002CDE  1               LAB_1785:
002CDE  1  86 12                STX     <Itemph         ; save temporary integer high byte
002CE0  1  B0 F7                BCS     LAB_177F        ; return if carry set, end of scan, character was
002CE2  1               ; not 0-9
002CE2  1               
002CE2  1  E0 19                CPX     #$19            ; compare high byte with $19
002CE4  1  A8                   TAY                     ; ensure Zb = 0 if the branch is taken
002CE5  1  B0 DC                BCS     LAB_1767        ; branch if >=, makes max line # 63999 because next
002CE7  1               ; bit does *$0A, = 64000, compare at target will fail
002CE7  1               ; and do syntax error
002CE7  1               
002CE7  1  E9 2F                SBC     #'0'-1          ; subtract "0", $2F + carry, from byte
002CE9  1  A8                   TAY                     ; copy binary digit
002CEA  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
002CEC  1  0A                   ASL     A               ; *2 low byte
002CED  1  26 12                ROL     <Itemph         ; *2 high byte
002CEF  1  0A                   ASL     A               ; *2 low byte
002CF0  1  26 12                ROL     <Itemph         ; *2 high byte, *4
002CF2  1  65 11                ADC     <Itempl         ; + low byte, *5
002CF4  1  85 11                STA     <Itempl         ; save it
002CF6  1  8A                   TXA                     ; get high byte copy to A
002CF7  1  65 12                ADC     <Itemph         ; + high byte, *5
002CF9  1  06 11                ASL     <Itempl         ; *2 low byte, *10d
002CFB  1  2A                   ROL     A               ; *2 high byte, *10d
002CFC  1  AA                   TAX                     ; copy high byte back to X
002CFD  1  98                   TYA                     ; get binary digit back
002CFE  1  65 11                ADC     <Itempl         ; add number low byte
002D00  1  85 11                STA     <Itempl         ; save number low byte
002D02  1  90 01                BCC     LAB_17B3        ; if no overflow to high byte get next character
002D04  1               
002D04  1  E8                   INX                     ; else increment high byte
002D05  1               LAB_17B3:
002D05  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D09  1  4C DE 2C             JMP     LAB_1785        ; loop for next character
002D0C  1               
002D0C  1               ; perform DEC
002D0C  1               
002D0C  1               LAB_DEC:
002D0C  1  A9 6C                LDA     #<LAB_2AFD      ; set -1 pointer low byte
002D0E  1  2C                   .BYTE   $2C             ; BIT abs to skip the LDA below
002D0F  1               
002D0F  1               ; perform INC
002D0F  1               
002D0F  1               LAB_INC:
002D0F  1  A9 68                LDA     #<LAB_259C      ; set 1 pointer low byte
002D11  1               LAB_17B5:
002D11  1  48                   PHA                     ; save +/-1 pointer low byte
002D12  1               LAB_17B7:
002D12  1  20 BB 34             JSR     LAB_GVAR        ; get var address
002D15  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002D17  1  30 20                BMI     IncrErr         ; exit if string
002D19  1               
002D19  1  85 97                STA     <Lvarpl         ; save var address low byte
002D1B  1  84 98                STY     <Lvarph         ; save var address high byte
002D1D  1  20 38 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002D20  1  68                   PLA                     ; get +/-1 pointer low byte
002D21  1  48                   PHA                     ; save +/-1 pointer low byte
002D22  1  A0 18                LDY     #>LAB_259C      ; set +/-1 pointer high byte (both the same)
002D24  1  20 23 40             JSR     LAB_246C        ; add (AY) to FAC1
002D27  1  20 AE 43             JSR     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl)
002D2A  1               
002D2A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002D2E  1  C9 2C                CMP     #','            ; compare with ","
002D30  1  D0 A6                BNE     LAB_177E        ; exit if not "," (either end or error)
002D32  1               
002D32  1               ; was "," so another INCR variable to do
002D32  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D36  1  4C 12 2D             JMP     LAB_17B7        ; go do next var
002D39  1               
002D39  1               IncrErr:
002D39  1  4C B9 31             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
002D3C  1               
002D3C  1               ; perform LET
002D3C  1               
002D3C  1               LAB_LET:
002D3C  1  20 BB 34             JSR     LAB_GVAR        ; get var address
002D3F  1  85 97                STA     <Lvarpl         ; save var address low byte
002D41  1  84 98                STY     <Lvarph         ; save var address high byte
002D43  1  A9 D3                LDA     #TK_EQUAL       ; get = token
002D45  1  20 D1 32             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002D48  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002D4A  1  48                   PHA                     ; push data type flag
002D4B  1  20 BE 31             JSR     LAB_EVEX        ; evaluate expression
002D4E  1  68                   PLA                     ; pop data type flag
002D4F  1  2A                   ROL     A               ; set carry if type = string
002D50  1  20 B0 31             JSR     LAB_CKTM        ; type match check, set C for string
002D53  1  D0 03                BNE     LAB_17D5        ; branch if string
002D55  1               
002D55  1  4C AE 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002D58  1               
002D58  1               ; string LET
002D58  1               
002D58  1               LAB_17D5:
002D58  1  A0 02                LDY     #$02            ; set index to pointer high byte
002D5A  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string pointer high byte
002D5E  1  B5 AE C9 00  
002D62  1  D0 04 A2 00  
002D70  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
002D72  1  90 2B                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002D74  1  D0 1B                BNE     LAB_17E6        ; branch if >
002D76  1               ; else was equal so compare low bytes
002D76  1  88                   DEY                     ; decrement index
002D77  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get pointer low byte
002D7B  1  B5 AE C9 00  
002D7F  1  D0 04 A2 00  
002D8D  1  C5 81                CMP     <Sstorl         ; compare bottom of string space low byte
002D8F  1  90 0E                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002D91  1               
002D91  1               ; pointer was >= to bottom of string space pointer
002D91  1               LAB_17E6:
002D91  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002D93  1  C4 7C                CPY     <Svarh          ; compare start of vars high byte
002D95  1  90 08                BCC     LAB_17F4        ; branch if less (descriptor is on stack)
002D97  1               
002D97  1  D0 0D                BNE     LAB_17FB        ; branch if greater (descriptor is not on stack)
002D99  1               
002D99  1               ; else high bytes were equal so ..
002D99  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002D9B  1  C5 7B                CMP     <Svarl          ; compare start of vars low byte
002D9D  1  B0 07                BCS     LAB_17FB        ; branch if >= (descriptor is not on stack)
002D9F  1               
002D9F  1               LAB_17F4:
002D9F  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002DA1  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002DA3  1  4C D0 2D             JMP     LAB_1811        ; clean stack, copy descriptor to variable and return
002DA6  1               
002DA6  1               ; make space and copy string
002DA6  1               LAB_17FB:
002DA6  1               
002DA6  1  A0 00                LDY     #$00            ; index to length
002DA8  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string length
002DAC  1  B5 AE C9 00  
002DB0  1  D0 04 A2 00  
002DBE  1  20 E2 38             JSR     LAB_209C        ; copy string
002DC1  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
002DC3  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
002DC5  1  85 B8                STA     <ssptr_l        ; save descriptor pointer low byte
002DC7  1  84 B9                STY     <ssptr_h        ; save descriptor pointer high byte
002DC9  1  20 40 3B             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
002DCC  1  A9 AC                LDA     #<FAC1_e        ; set descriptor pointer low byte
002DCE  1  A0 00                LDY     #>FAC1_e        ; get descriptor pointer high byte
002DD0  1               
002DD0  1               ; clean stack and assign value to string variable
002DD0  1               LAB_1811:
002DD0  1  85 9E                STA     <des_2l         ; save descriptor_2 pointer low byte
002DD2  1  84 9F                STY     <des_2h         ; save descriptor_2 pointer high byte
002DD4  1  20 42 3C             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
002DD7  1  A0 00                LDY     #$00            ; index to length
002DD9  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string length
002DDD  1  B5 9E C9 00  
002DE1  1  D0 04 A2 00  
002DEF  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002DF3  1  01 B5 97 C9  
002DF7  1  00 D0 04 A2  
002E05  1  C8                   INY                     ; index to string pointer low byte
002E06  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer low byte
002E0A  1  B5 9E C9 00  
002E0E  1  D0 04 A2 00  
002E1C  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002E20  1  01 B5 97 C9  
002E24  1  00 D0 04 A2  
002E32  1  C8                   INY                     ; index to string pointer high byte
002E33  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer high byte
002E37  1  B5 9E C9 00  
002E3B  1  D0 04 A2 00  
002E49  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002E4D  1  01 B5 97 C9  
002E51  1  00 D0 04 A2  
002E5F  1  60                   RTS
002E60  1               
002E60  1               ; perform GET
002E60  1               
002E60  1               LAB_GET:
002E60  1  20 BB 34             JSR     LAB_GVAR        ; get var address
002E63  1  85 97                STA     <Lvarpl         ; save var address low byte
002E65  1  84 98                STY     <Lvarph         ; save var address high byte
002E67  1  20 59 4B             JSR     INGET           ; get input byte
002E6A  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002E6C  1  30 07                BMI     LAB_GETS        ; go get string character
002E6E  1               
002E6E  1               ; was numeric get
002E6E  1  A8                   TAY                     ; copy character to Y
002E6F  1  20 86 37             JSR     LAB_1FD0        ; convert Y to byte in FAC1
002E72  1  4C AE 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002E75  1               
002E75  1               LAB_GETS:
002E75  1  48                   PHA                     ; save character
002E76  1  A9 01                LDA     #$01            ; string is single byte
002E78  1  B0 01                BCS     LAB_IsByte      ; branch if byte received
002E7A  1               
002E7A  1  68                   PLA                     ; string is null
002E7B  1               LAB_IsByte:
002E7B  1  20 EA 38             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
002E7E  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
002E7E  1  F0 19                BEQ     LAB_NoSt        ; skip store if null string
002E80  1               
002E80  1  68                   PLA                     ; get character back
002E81  1  A0 00                LDY     #$00            ; clear index
002E83  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
002E87  1  01 B5 AD C9  
002E8B  1  00 D0 04 A2  
002E99  1               LAB_NoSt:
002E99  1  20 4D 39             JSR     LAB_RTST        ; check for space on descriptor stack then put address
002E9C  1               ; and length on descriptor stack and update stack pointers
002E9C  1               
002E9C  1  4C 58 2D             JMP     LAB_17D5        ; do string LET and return
002E9F  1               
002E9F  1               ; perform PRINT
002E9F  1               
002E9F  1               LAB_1829:
002E9F  1  20 44 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002EA2  1               LAB_182C:
002EA2  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002EA6  1               
002EA6  1               ; PRINT
002EA6  1               
002EA6  1               LAB_PRINT:
002EA6  1  F0 51                BEQ     LAB_CRLF        ; if nothing following just print CR/LF
002EA8  1               
002EA8  1               LAB_1831:
002EA8  1  C9 BD                CMP     #TK_TAB         ; compare with TAB( token
002EAA  1  F0 6C                BEQ     LAB_18A2        ; go do TAB/SPC
002EAC  1               
002EAC  1  C9 C1                CMP     #TK_SPC         ; compare with SPC( token
002EAE  1  F0 68                BEQ     LAB_18A2        ; go do TAB/SPC
002EB0  1               
002EB0  1  C9 2C                CMP     #','            ; compare with ","
002EB2  1  F0 4E                BEQ     LAB_188B        ; go do move to next TAB mark
002EB4  1               
002EB4  1  C9 3B                CMP     #$3B            ; compare with ";"
002EB6  1  F0 7F                BEQ     LAB_18BD        ; if ";" continue with PRINT processing
002EB8  1               
002EB8  1  20 BE 31             JSR     LAB_EVEX        ; evaluate expression
002EBB  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002EBD  1  30 E0                BMI     LAB_1829        ; branch if string
002EBF  1               
002EBF  1  20 72 46             JSR     LAB_296E        ; convert FAC1 to string
002EC2  1  20 F4 38             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002EC5  1  A0 00                LDY     #$00            ; clear index
002EC7  1               
002EC7  1               ; don't check fit if terminal width byte is zero
002EC7  1               
002EC7  1  A5 0F                LDA     <TWidth         ; get terminal width byte
002EC9  1  F0 20                BEQ     LAB_185E        ; skip check if zero
002ECB  1               
002ECB  1  8B 48 DA A2          FETCHINDIRECTY des_pl
002ECF  1  01 B5 AE C9  
002ED3  1  00 D0 04 A2  
002EE1  1  38                   SEC                     ; set carry for subtract
002EE2  1  E5 0E                SBC     <TPos           ; subtract terminal position
002EE4  1  E5 04                SBC     <TMPFLG         ; subtract string length
002EE6  1  B0 03                BCS     LAB_185E        ; branch if less than terminal width
002EE8  1               
002EE8  1  20 F9 2E             JSR     LAB_CRLF        ; else print CR/LF
002EEB  1               LAB_185E:
002EEB  1  20 44 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002EEE  1  F0 B2                BEQ     LAB_182C        ; always go continue processing line
002EF0  1               
002EF0  1               ; CR/LF return to BASIC from BASIC input handler
002EF0  1               
002EF0  1               LAB_1866:
002EF0  1  A9 00                LDA     #$00            ; clear byte
002EF2  1  9D 81 21             STA     Ibuffs,X        ; null terminate input
002EF5  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
002EF7  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
002EF9  1               ; print CR/LF
002EF9  1               
002EF9  1               LAB_CRLF:
002EF9  1  A9 0D                LDA     #$0D            ; load [CR]
002EFB  1  20 6F 2F             JSR     LAB_PRNA        ; go print the character
002EFE  1  A9 0A                LDA     #$0A            ; load [LF]
002F00  1  D0 6D                BNE     LAB_PRNA        ; go print the character and return, branch always
002F02  1               LAB_188B:
002F02  1  A5 0E                LDA     <TPos           ; get terminal position
002F04  1  C5 10                CMP     <Iclim          ; compare with input column limit
002F06  1  90 05                BCC     LAB_1897        ; branch if less
002F08  1               
002F08  1  20 F9 2E             JSR     LAB_CRLF        ; else print CR/LF (next line)
002F0B  1  D0 2A                BNE     LAB_18BD        ; continue with PRINT processing (branch always)
002F0D  1               
002F0D  1               LAB_1897:
002F0D  1  38                   SEC                     ; set carry for subtract
002F0E  1               LAB_1898:
002F0E  1  E5 64                SBC     <TabSiz         ; subtract TAB size
002F10  1  B0 FC                BCS     LAB_1898        ; loop if result was +ve
002F12  1               
002F12  1  49 FF                EOR     #$FF            ; complement it
002F14  1  69 01                ADC     #$01            ; +1 (twos complement)
002F16  1  D0 15                BNE     LAB_18B6        ; always print A spaces (result is never $00)
002F18  1               
002F18  1               ; do TAB/SPC
002F18  1               LAB_18A2:
002F18  1  48                   PHA                     ; save token
002F19  1  20 56 3E             JSR     LAB_SGBY        ; scan and get byte parameter
002F1C  1  C9 29                CMP     #$29            ; is next character )
002F1E  1  F0 03                BEQ     LAB_18A2aa
002F20  1               ;BNE	LAB_1910		; if not do syntax error then warm start
002F20  1  4C B6 2F             JMP     LAB_1910        ; if not do syntax error then warm start
002F23  1               LAB_18A2aa:
002F23  1  68                   PLA                     ; get token back
002F24  1  C9 BD                CMP     #TK_TAB         ; was it TAB ?
002F26  1  D0 06                BNE     LAB_18B7        ; if not go do SPC
002F28  1               
002F28  1               ; calculate TAB offset
002F28  1  8A                   TXA                     ; copy integer value to A
002F29  1  E5 0E                SBC     <TPos           ; subtract terminal position
002F2B  1  90 0A                BCC     LAB_18BD        ; branch if result was < 0 (can't TAB backwards)
002F2D  1               
002F2D  1               ; print A spaces
002F2D  1               LAB_18B6:
002F2D  1  AA                   TAX                     ; copy result to X
002F2E  1               LAB_18B7:
002F2E  1  8A                   TXA                     ; set flags on size for SPC
002F2F  1  F0 06                BEQ     LAB_18BD        ; branch if result was = $0, already here
002F31  1               
002F31  1               ; print X spaces
002F31  1               LAB_18BA:
002F31  1  20 6A 2F             JSR     LAB_18E0        ; print " "
002F34  1  CA                   DEX                     ; decrement count
002F35  1  D0 FA                BNE     LAB_18BA        ; loop if not all done
002F37  1               
002F37  1               ; continue with PRINT processing
002F37  1               LAB_18BD:
002F37  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002F3B  1  F0 03                BEQ     LAB_18BDA
002F3D  1  4C A8 2E             JMP     LAB_1831        ; if more to print go do it
002F40  1               LAB_18BDA:
002F40  1  60                   RTS
002F41  1               
002F41  1               ; print null terminated string from memory
002F41  1               
002F41  1               LAB_18C3:
002F41  1  20 F4 38             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002F44  1               
002F44  1               ; print string from <Sutill/<Sutilh
002F44  1               
002F44  1               LAB_18C6:
002F44  1  20 D1 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
002F47  1               ; space returns with A = length, X=$71=pointer low byte,
002F47  1               ; Y=$72=pointer high byte
002F47  1  A0 00                LDY     #$00            ; reset index
002F49  1  AA                   TAX                     ; copy length to X
002F4A  1  F0 5D                BEQ     LAB_188C        ; exit (RTS) if null string
002F4C  1               LAB_18CD:
002F4C  1               
002F4C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get next byte
002F50  1  B5 71 C9 00  
002F54  1  D0 04 A2 00  
002F62  1  20 6F 2F             JSR     LAB_PRNA        ; go print the character
002F65  1  C8                   INY                     ; increment index
002F66  1  CA                   DEX                     ; decrement count
002F67  1  D0 E3                BNE     LAB_18CD        ; loop if not done yet
002F69  1  60                   RTS
002F6A  1               
002F6A  1               ; Print single format character
002F6A  1               ; print " "
002F6A  1               
002F6A  1               LAB_18E0:
002F6A  1  A9 20                LDA     #$20            ; load " "
002F6C  1  2C                   .BYTE   $2C             ; change next line to BIT LAB_3FA9
002F6D  1               
002F6D  1               ; print "?" character
002F6D  1               
002F6D  1               LAB_18E3:
002F6D  1  A9 3F                LDA     #$3F            ; load "?" character
002F6F  1               
002F6F  1               ; print character in A
002F6F  1               ; now .includes the null handler
002F6F  1               ; also .includes infinite line length code
002F6F  1               ; note! some routines expect this one to exit with Zb=0
002F6F  1               
002F6F  1               LAB_PRNA:
002F6F  1  C9 20                CMP     #' '            ; compare with " "
002F71  1  90 19                BCC     LAB_18F9        ; branch if less (non printing)
002F73  1               
002F73  1               ; else printable character
002F73  1  48                   PHA                     ; save the character
002F74  1               
002F74  1               ; don't check fit if terminal width byte is zero
002F74  1               
002F74  1  A5 0F                LDA     <TWidth         ; get terminal width
002F76  1  D0 0A                BNE     LAB_18F0        ; branch if not zero (not infinite length)
002F78  1               
002F78  1               ; is "infinite line" so check TAB position
002F78  1               
002F78  1  A5 0E                LDA     <TPos           ; get position
002F7A  1  E5 64                SBC     <TabSiz         ; subtract TAB size, carry set by CMP #$20 above
002F7C  1  D0 0B                BNE     LAB_18F7        ; skip reset if different
002F7E  1               
002F7E  1  85 0E                STA     <TPos           ; else reset position
002F80  1  F0 07                BEQ     LAB_18F7        ; go print character
002F82  1               
002F82  1               LAB_18F0:
002F82  1  C5 0E                CMP     <TPos           ; compare with terminal character position
002F84  1  D0 03                BNE     LAB_18F7        ; branch if not at end of line
002F86  1               
002F86  1  20 F9 2E             JSR     LAB_CRLF        ; else print CR/LF
002F89  1               LAB_18F7:
002F89  1  E6 0E                INC     <TPos           ; increment terminal position
002F8B  1  68                   PLA                     ; get character back
002F8C  1               LAB_18F9:
002F8C  1  20 94 18             JSR     V_OUTP          ; output byte via output vector
002F8F  1  C9 0D                CMP     #$0D            ; compare with [CR]
002F91  1  D0 14                BNE     LAB_188A        ; branch if not [CR]
002F93  1               
002F93  1               ; else print nullct nulls after the [CR]
002F93  1  86 78                STX     <TempB          ; save buffer index
002F95  1  A6 0D                LDX     <Nullct         ; get null count
002F97  1  F0 0A                BEQ     LAB_1886        ; branch if no nulls
002F99  1               
002F99  1  A9 00                LDA     #$00            ; load [NULL]
002F9B  1               LAB_1880:
002F9B  1  20 6F 2F             JSR     LAB_PRNA        ; go print the character
002F9E  1  CA                   DEX                     ; decrement count
002F9F  1  D0 FA                BNE     LAB_1880        ; loop if not all done
002FA1  1               
002FA1  1  A9 0D                LDA     #$0D            ; restore the character (and set the flags)
002FA3  1               LAB_1886:
002FA3  1  86 0E                STX     <TPos           ; clear terminal position (X always = zero when we get here)
002FA5  1  A6 78                LDX     <TempB          ; restore buffer index
002FA7  1               LAB_188A:
002FA7  1  29 FF                AND     #$FF            ; set the flags
002FA9  1               LAB_188C:
002FA9  1  60                   RTS
002FAA  1               
002FAA  1               ; handle bad input data
002FAA  1               
002FAA  1               LAB_1904:
002FAA  1  A5 62                LDA     <Imode          ; get input mode flag, $00=INPUT, $00=READ
002FAC  1  10 0B                BPL     LAB_1913        ; branch if INPUT (go do redo)
002FAE  1               
002FAE  1  A5 8D                LDA     <Dlinel         ; get current DATA line low byte
002FB0  1  A4 8E                LDY     <Dlineh         ; get current DATA line high byte
002FB2  1  85 87                STA     <Clinel         ; save current line low byte
002FB4  1  84 88                STY     <Clineh         ; save current line high byte
002FB6  1               LAB_1910:
002FB6  1  4C E4 32             JMP     LAB_SNER        ; do syntax error then warm start
002FB9  1               
002FB9  1               ; mode was INPUT
002FB9  1               LAB_1913:
002FB9  1  A9 C4                LDA     #<LAB_REDO      ; point to redo message (low addr)
002FBB  1  A0 17                LDY     #>LAB_REDO      ; point to redo message (high addr)
002FBD  1  20 41 2F             JSR     LAB_18C3        ; print null terminated string from memory
002FC0  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002FC2  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002FC4  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002FC6  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002FC8  1  60                   RTS
002FC9  1               
002FC9  1               ; perform INPUT
002FC9  1               
002FC9  1               LAB_INPUT:
002FC9  1  C9 22                CMP     #$22            ; compare next byte with open quote
002FCB  1  D0 0B                BNE     LAB_1934        ; branch if no prompt string
002FCD  1               
002FCD  1  20 9D 32             JSR     LAB_1BC1        ; print "..." string
002FD0  1  A9 3B                LDA     #$3B            ; load A with ";"
002FD2  1  20 D1 32             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002FD5  1  20 44 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002FD8  1               
002FD8  1               ; done with prompt, now get data
002FD8  1               LAB_1934:
002FD8  1  20 8A 37             JSR     LAB_CKRN        ; check not Direct, back here if ok
002FDB  1  20 A5 27             JSR     LAB_INLN        ; print "? " and get BASIC input
002FDE  1  A9 00                LDA     #$00            ; set mode = INPUT
002FE0  1               ;CMP	Ibuffs			; test first byte in buffer
002FE0  1  80 06                BRA     LAB_1953        ; branch if not null input
002FE2  1               
002FE2  1               ;CLC				; was null input so clear carry to exit program
002FE2  1               ;JMP	LAB_1647		; go do BREAK exit
002FE2  1               
002FE2  1               ; perform READ
002FE2  1               
002FE2  1               LAB_READ:
002FE2  1  A6 8F                LDX     <Dptrl          ; get DATA pointer low byte
002FE4  1  A4 90                LDY     <Dptrh          ; get DATA pointer high byte
002FE6  1  A9 80                LDA     #$80            ; set mode = READ
002FE8  1               
002FE8  1               LAB_1953:
002FE8  1  85 62                STA     <Imode          ; set input mode flag, $00=INPUT, $80=READ
002FEA  1  86 91                STX     <Rdptrl         ; save READ pointer low byte
002FEC  1  84 92                STY     <Rdptrh         ; save READ pointer high byte
002FEE  1               
002FEE  1               ; READ or INPUT next variable from list
002FEE  1               LAB_195B:
002FEE  1  20 BB 34             JSR     LAB_GVAR        ; get (var) address
002FF1  1  85 97                STA     <Lvarpl         ; save address low byte
002FF3  1  84 98                STY     <Lvarph         ; save address high byte
002FF5  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002FF7  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002FF9  1  85 11                STA     <Itempl         ; save as temporary integer low byte
002FFB  1  84 12                STY     <Itemph         ; save as temporary integer high byte
002FFD  1  A6 91                LDX     <Rdptrl         ; get READ pointer low byte
002FFF  1  A4 92                LDY     <Rdptrh         ; get READ pointer high byte
003001  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
003003  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
003005  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003009  1  D0 0C                BNE     LAB_1988        ; branch if not null
00300B  1               
00300B  1               ; pointer was to null entry
00300B  1  24 62                BIT     <Imode          ; test input mode flag, $00=INPUT, $80=READ
00300D  1  30 63                BMI     LAB_19DD        ; branch if READ
00300F  1               
00300F  1               ; mode was INPUT
00300F  1               ;JSR	LAB_18E3		; print "?" character (double ? for extended input)
00300F  1               ;JSR	LAB_INLN		; print "? " and get BASIC input
00300F  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
003011  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
003013  1               LAB_1985:
003013  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003017  1               LAB_1988:
003017  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
003019  1  10 24                BPL     LAB_19B0        ; branch if numeric
00301B  1               
00301B  1               ; else get string
00301B  1  85 5B                STA     <Srchc          ; save search character
00301D  1  C9 22                CMP     #$22            ; was it " ?
00301F  1  F0 07                BEQ     LAB_1999        ; branch if so
003021  1               
003021  1  A9 3A                LDA     #':'            ; else search character is ":"
003023  1  85 5B                STA     <Srchc          ; set new search character
003025  1  A9 2C                LDA     #','            ; other search character is ","
003027  1  18                   CLC                     ; clear carry for add
003028  1               LAB_1999:
003028  1  85 5C                STA     <Asrch          ; set second search character
00302A  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
00302C  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
00302E  1               
00302E  1  69 00                ADC     #$00            ; c is =1 if we came via the BEQ LAB_1999, else =0
003030  1  90 01                BCC     LAB_19A4        ; branch if no execute pointer low byte rollover
003032  1               
003032  1  C8                   INY                     ; else increment high byte
003033  1               LAB_19A4:
003033  1  20 FA 38             JSR     LAB_20B4        ; print <Srchc or <Asrch terminated string to <Sutill/<Sutilh
003036  1  20 DC 3E             JSR     LAB_23F3        ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
003039  1  20 58 2D             JSR     LAB_17D5        ; go do string LET
00303C  1  4C 45 30             JMP     LAB_19B6        ; go check string terminator
00303F  1               
00303F  1               ; get numeric INPUT
00303F  1               LAB_19B0:
00303F  1  20 65 45             JSR     LAB_2887        ; get FAC1 from string
003042  1  20 AE 43             JSR     LAB_PFAC        ; pack FAC1 into (<Lvarpl)
003045  1               LAB_19B6:
003045  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003049  1  F0 0B                BEQ     LAB_19C5        ; branch if null (last entry)
00304B  1               
00304B  1  C9 2C                CMP     #','            ; else compare with ","
00304D  1  F0 03                BEQ     LAB_19C2        ; branch if ","
00304F  1               
00304F  1  4C AA 2F             JMP     LAB_1904        ; else go handle bad input data
003052  1               
003052  1               ; got good input data
003052  1               LAB_19C2:
003052  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003056  1               LAB_19C5:
003056  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
003058  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
00305A  1  85 91                STA     <Rdptrl         ; save for now
00305C  1  84 92                STY     <Rdptrh         ; save for now
00305E  1  A5 11                LDA     <Itempl         ; get temporary integer low byte (temp BASIC execute ptr)
003060  1  A4 12                LDY     <Itemph         ; get temporary integer high byte (temp BASIC execute ptr)
003062  1  85 C3                STA     <Bpntrl         ; set BASIC execute pointer low byte
003064  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
003066  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00306A  1  F0 30                BEQ     LAB_1A03        ; if null go do extra ignored message
00306C  1               
00306C  1  20 E0 32             JSR     LAB_1C01        ; else scan for "," , else do syntax error then warm start
00306F  1  4C EE 2F             JMP     LAB_195B        ; go INPUT next variable from list
003072  1               
003072  1               ; find next DATA statement or do "Out of DATA" error
003072  1               LAB_19DD:
003072  1  20 28 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
003075  1  C8                   INY                     ; increment index
003076  1  AA                   TAX                     ; copy character ([:] or [EOL])
003077  1  D0 15                BNE     LAB_19F6        ; branch if [:]
003079  1               
003079  1  A2 06                LDX     #$06            ; set for "Out of DATA" error
00307B  1  C8                   INY                     ; increment index, now points to next line pointer high byte
00307C  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
00307E  1  D0 03                BNE     LAB_19DE        ; branch if NOT end (eventually does error X)
003080  1  4C 3D 31             JMP     LAB_1A54
003083  1               LAB_19DE:
003083  1  C8                   INY                     ; increment index
003084  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # low byte
003086  1  85 8D                STA     <Dlinel         ; save current DATA line low byte
003088  1  C8                   INY                     ; increment index
003089  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # high byte
00308B  1  C8                   INY                     ; increment index
00308C  1  85 8E                STA     <Dlineh         ; save current DATA line high byte
00308E  1               LAB_19F6:
00308E  1  B1 C3                LDA     (<Bpntrl),Y     ; get byte
003090  1  C8                   INY                     ; increment index
003091  1  AA                   TAX                     ; copy to X
003092  1  20 1A 2C             JSR     LAB_170F        ; set BASIC execute pointer
003095  1  E0 83                CPX     #TK_DATA        ; compare with "DATA" token
003097  1  D0 D9                BNE     LAB_19DD        ; go find next statement if not "DATA"
003099  1  4C 13 30             JMP     LAB_1985        ; was "DATA" so go do next READ
00309C  1               
00309C  1               ; end of INPUT/READ routine
00309C  1               
00309C  1               LAB_1A03:
00309C  1  A5 91                LDA     <Rdptrl         ; get temp READ pointer low byte
00309E  1  A4 92                LDY     <Rdptrh         ; get temp READ pointer high byte
0030A0  1  A6 62                LDX     <Imode          ; get input mode flag, $00=INPUT, $80=READ
0030A2  1  10 03                BPL     LAB_1A0E        ; branch if INPUT
0030A4  1               
0030A4  1  4C D2 2A             JMP     LAB_1624        ; save AY as DATA pointer and return
0030A7  1               
0030A7  1               ; we were getting INPUT
0030A7  1               LAB_1A0E:
0030A7  1  A0 00                LDY     #$00            ; clear index
0030A9  1  8B DA A2 01          LDAINDIRECTY Rdptrl     ; get next byte
0030AD  1  B5 91 C9 00  
0030B1  1  D0 04 A2 00  
0030BF  1  D0 01                BNE     LAB_1A1B        ; error if not end of INPUT
0030C1  1               
0030C1  1  60                   RTS
0030C2  1               
0030C2  1               ; user typed too much
0030C2  1               LAB_1A1B:
0030C2  1  A9 B3                LDA     #<LAB_IMSG      ; point to extra ignored message (low addr)
0030C4  1  A0 17                LDY     #>LAB_IMSG      ; point to extra ignored message (high addr)
0030C6  1  4C 41 2F             JMP     LAB_18C3        ; print null terminated string from memory and return
0030C9  1               
0030C9  1               ; search the stack for FOR activity
0030C9  1               ; exit with z=1 if FOR else exit with z=0
0030C9  1               
0030C9  1               LAB_11A1:
0030C9  1  C2 10                INDEX16
0030CB  1  BA                   TSX                     ; copy stack pointer
0030CC  1  E8                   INX                     ; +1 pass return address
0030CD  1  E8                   INX                     ; +2 pass return address
0030CE  1  E8                   INX                     ; +3 pass calling routine return address
0030CF  1  E8                   INX                     ; +4 pass calling routine return address
0030D0  1               LAB_11A6:
0030D0  1  8B                   PHB
0030D1  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
0030D3  1  48                   PHA
0030D4  1  AB                   PLB
0030D5  1  BD 01 00             LDA     a:1,X           ; get token byte from stack
0030D8  1  AB                   PLB
0030D9  1  C9 81                CMP     #TK_FOR         ; is it FOR token
0030DB  1  D0 47                BNE     LAB_11CE        ; exit if not FOR token
0030DD  1               
0030DD  1               ; was FOR token
0030DD  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
0030DF  1  D0 10                BNE     LAB_11BB        ; branch if not null
0030E1  1               
0030E1  1  8B                   PHB
0030E2  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
0030E4  1  48                   PHA
0030E5  1  AB                   PLB
0030E6  1  BD 02 00             LDA     a:2,X           ; get FOR variable pointer low byte
0030E9  1  85 97                STA     <Frnxtl         ; save var pointer for FOR/NEXT low byte
0030EB  1  BD 03 00             LDA     a:3,X           ; get FOR variable pointer high byte
0030EE  1  85 98                STA     <Frnxth         ; save var pointer for FOR/NEXT high byte
0030F0  1  AB                   PLB
0030F1  1               LAB_11BB:
0030F1  1  8B                   PHB
0030F2  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
0030F4  1  48                   PHA
0030F5  1  AB                   PLB
0030F6  1  BD 03 00             LDA     a:3,X
0030F9  1  85 04                STA     <TMPFLG
0030FB  1  AB                   PLB
0030FC  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
0030FE  1  D0 11                BNE     LAB_11C7        ; branch if no match
003100  1               
003100  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
003102  1  8B                   PHB
003103  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
003105  1  48                   PHA
003106  1  AB                   PLB
003107  1  BD 02 00             LDA     a:2,X
00310A  1  85 04                STA     <TMPFLG
00310C  1  AB                   PLB
00310D  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
00310F  1  F0 13                BEQ     LAB_11CE        ; exit if match found
003111  1               
003111  1               LAB_11C7:
003111  1  E8                   INX
003112  1  E8                   INX
003113  1  E8                   INX
003114  1  E8                   INX
003115  1  E8                   INX
003116  1  E8                   INX
003117  1  E8                   INX
003118  1  E8                   INX
003119  1  E8                   INX
00311A  1  E8                   INX
00311B  1  E8                   INX
00311C  1  E8                   INX
00311D  1  E8                   INX
00311E  1  E8                   INX
00311F  1  E8                   INX
003120  1  E8                   INX
003121  1  9A                   TXS                     ; copy back to index
003122  1  D0 AC                BNE     LAB_11A6        ; loop if not at start of stack
003124  1               LAB_11CE:
003124  1  86 FD                STX     <TEMPW
003126  1  E2 10                INDEX8
003128  1  60                   RTS
003129  1               
003129  1               ; perform NEXT
003129  1               
003129  1               LAB_NEXT:
003129  1  D0 04                BNE     LAB_1A46        ; branch if NEXT var
00312B  1               
00312B  1  A0 00                LDY     #$00            ; else clear Y
00312D  1  F0 03                BEQ     LAB_1A49        ; branch always (no variable to search for)
00312F  1               
00312F  1               ; NEXT var
00312F  1               
00312F  1               LAB_1A46:
00312F  1  20 BB 34             JSR     LAB_GVAR        ; get variable address
003132  1               LAB_1A49:
003132  1  85 97                STA     <Frnxtl         ; store variable pointer low byte
003134  1  84 98                STY     <Frnxth         ; store variable pointer high byte
003136  1               ; (both cleared if no variable defined)
003136  1  20 C9 30             JSR     LAB_11A1        ; search the stack for FOR activity
003139  1  F0 04                BEQ     LAB_1A56        ; branch if found
00313B  1               
00313B  1  A2 00                LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
00313D  1               LAB_1A54:
00313D  1  F0 7C                BEQ     LAB_1ABE        ; do error #X, then warm start
00313F  1               
00313F  1               
00313F  1               LAB_1A56:
00313F  1  C2 30                ACCUMULATORINDEX16
003141  1  A6 FD                LDX     <TEMPW
003143  1  9A                   TXS                     ; set stack pointer, X set by search, dumps return addresses
003144  1  8A                   TXA                     ; copy stack pointer
003145  1  18                   CLC                     ; CLEAR carry
003146  1               
003146  1  69 09 00             ADC     #$0009          ; point to TO var
003149  1  85 73                STA     <ut2_pl         ; save pointer to TO var for compare
00314B  1  38                   SEC
00314C  1  E9 05 00             SBC     #$0005          ; point to STEP var
00314F  1  85 FD                STA     <TEMPW
003151  1               
003151  1  E2 30                ACCUMULATORINDEX8
003153  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
003155  1               
003155  1  8B                   PHB                     ; ensure UNPACK works in stack bank not data bank
003156  1  DA                   PHX
003157  1  A2 00                LDX     #$00
003159  1  DA                   PHX
00315A  1  AB                   PLB
00315B  1  FA                   PLX
00315C  1  20 38 43             JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
00315F  1  AB                   PLB
003160  1               
003160  1  A3 08                LDA     8,S             ; get step sign
003162  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003164  1  A5 97                LDA     <Frnxtl         ; get FOR variable pointer low byte
003166  1  A4 98                LDY     <Frnxth         ; get FOR variable pointer high byte
003168  1  20 23 40             JSR     LAB_246C        ; add (FOR variable) to FAC1
00316B  1  20 AE 43             JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
00316E  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
003170  1               
003170  1  8B                   PHB                     ; ensure compare works in stack bank not data bank
003171  1  DA                   PHX
003172  1  A2 00                LDX     #$00
003174  1  DA                   PHX
003175  1  AB                   PLB
003176  1  FA                   PLX
003177  1               
003177  1  20 74 44             JSR     LAB_27FA        ; compare FAC1 with (Y,<ut2_pl) (TO value)
00317A  1  AB                   PLB
00317B  1               
00317B  1               
00317B  1  C3 08                CMP     8,S             ; compare step sign
00317D  1  F0 13                BEQ     LAB_1A9B        ; branch if = (loop complete)
00317F  1               ;
00317F  1               ;					; loop back and do it all again
00317F  1  A3 0D                LDA     $0D,S           ; get FOR line low byte
003181  1  85 87                STA     <Clinel         ; save current line low byte
003183  1  A3 0E                LDA     $0E,S           ; get FOR line high byte
003185  1  85 88                STA     <Clineh         ; save current line high byte
003187  1  A3 10                LDA     $10,S           ; get BASIC execute pointer low byte
003189  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
00318B  1  A3 0F                LDA     $0F,S           ; get BASIC execute pointer high byte
00318D  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
00318F  1               LAB_1A98:
00318F  1  4C 3D 2A             JMP     LAB_15C2        ; go do interpreter inner loop
003192  1               ;
003192  1               ;					; loop complete so carry on
003192  1               LAB_1A9B:
003192  1               
003192  1               
003192  1  C2 30                ACCUMULATORINDEX16
003194  1  3B                   TSC                     ; stack copy to A
003195  1               ;;;;;;;;;;;;;;;;;;; THIS MAY NOT BE RIGHT !@#$%^&* TAG
003195  1  69 0F 00             ADC     #$000F          ; add $10 ($0F+carry) to dump FOR structure
003198  1  1B                   TCS                     ; copy back to index
003199  1  E2 30                ACCUMULATORINDEX8
00319B  1               
00319B  1               
00319B  1               
00319B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00319F  1  C9 2C                CMP     #','            ; compare with ","
0031A1  1  D0 EC                BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
0031A3  1               
0031A3  1               ; was "," so another NEXT variable to do
0031A3  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
0031A7  1  20 2F 31             JSR     LAB_1A46        ; do NEXT (var)
0031AA  1               
0031AA  1               ; evaluate expression and check is numeric, else do type mismatch
0031AA  1               
0031AA  1               LAB_EVNM:
0031AA  1  20 BE 31             JSR     LAB_EVEX        ; evaluate expression
0031AD  1               
0031AD  1               ; check if source is numeric, else do type mismatch
0031AD  1               
0031AD  1               LAB_CTNM:
0031AD  1  18                   CLC                     ; destination is numeric
0031AE  1  24                   .BYTE   $24             ; makes next line BIT $38
0031AF  1               
0031AF  1               ; check if source is string, else do type mismatch
0031AF  1               
0031AF  1               LAB_CTST:
0031AF  1  38                   SEC                     ; required type is string
0031B0  1               
0031B0  1               ; type match check, set C for string, clear C for numeric
0031B0  1               
0031B0  1               LAB_CKTM:
0031B0  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
0031B2  1  30 03                BMI     LAB_1ABA        ; branch if data type is string
0031B4  1               
0031B4  1               ; else data type was numeric
0031B4  1  B0 03                BCS     LAB_1ABC        ; if required type is string do type mismatch error
0031B6  1               LAB_1AB9:
0031B6  1  60                   RTS
0031B7  1               
0031B7  1               ; data type was string, now check required type
0031B7  1               LAB_1ABA:
0031B7  1  B0 FD                BCS     LAB_1AB9        ; exit if required type is string
0031B9  1               
0031B9  1               ; else do type mismatch error
0031B9  1               LAB_1ABC:
0031B9  1  A2 18                LDX     #$18            ; error code $18 ("Type mismatch" error)
0031BB  1               LAB_1ABE:
0031BB  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
0031BE  1               
0031BE  1               ; evaluate expression
0031BE  1               
0031BE  1               LAB_EVEX:
0031BE  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
0031C0  1  D0 02                BNE     LAB_1AC7        ; skip next if not zero
0031C2  1               
0031C2  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
0031C4  1               LAB_1AC7:
0031C4  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
0031C6  1               
0031C6  1               LAB_EVEZ:
0031C6  1  A9 00                LDA     #$00            ; set null precedence (flag done)
0031C8  1               LAB_1ACC:
0031C8  1  48                   PHA                     ; push precedence byte
0031C9  1  A9 02                LDA     #$02            ; 2 bytes
0031CB  1  20 57 26             JSR     LAB_1212        ; check room on stack for A bytes
0031CE  1  20 AC 32             JSR     LAB_GVAL        ; get value from line
0031D1  1  A9 00                LDA     #$00            ; clear A
0031D3  1  85 9B                STA     <comp_f         ; clear compare function flag
0031D5  1               LAB_1ADB:
0031D5  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0031D9  1               LAB_1ADE:
0031D9  1  38                   SEC                     ; set carry for subtract
0031DA  1  E9 D2                SBC     #TK_GT          ; subtract token for > (lowest comparison function)
0031DC  1  90 18                BCC     LAB_1AFA        ; branch if < TK_GT
0031DE  1               
0031DE  1  C9 03                CMP     #$03            ; compare with ">" to "<" tokens
0031E0  1  B0 14                BCS     LAB_1AFA        ; branch if >= TK_SGN (highest evaluation function +1)
0031E2  1               
0031E2  1               ; was token for > = or < (A = 0, 1 or 2)
0031E2  1  C9 01                CMP     #$01            ; compare with token for =
0031E4  1  2A                   ROL     A               ; *2, b0 = carry (=1 if token was = or <)
0031E5  1               ; (A = 0, 3 or 5)
0031E5  1  49 01                EOR     #$01            ; toggle b0
0031E7  1               ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
0031E7  1  45 9B                EOR     <comp_f         ; EOR with compare function flag bits
0031E9  1  C5 9B                CMP     <comp_f         ; compare with compare function flag
0031EB  1  90 68                BCC     LAB_1B53        ; if <(<comp_f) do syntax error then warm start
0031ED  1               ; was more than one <, = or >)
0031ED  1               
0031ED  1  85 9B                STA     <comp_f         ; save new compare function flag
0031EF  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0031F3  1  4C D9 31             JMP     LAB_1ADE        ; go do next character
0031F6  1               
0031F6  1               ; token is < ">" or > "<" tokens
0031F6  1               LAB_1AFA:
0031F6  1  A6 9B                LDX     <comp_f         ; get compare function flag
0031F8  1  D0 2C                BNE     LAB_1B2A        ; branch if compare function
0031FA  1               
0031FA  1  B0 79                BCS     LAB_1B78        ; go do functions
0031FC  1               
0031FC  1               ; else was <  TK_GT so is operator or lower
0031FC  1  69 0A                ADC     #TK_GT-TK_PLUS  ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
0031FE  1  90 75                BCC     LAB_1B78        ; branch if < + operator
003200  1               
003200  1               ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
003200  1  D0 07                BNE     LAB_1B0B        ; branch if not + token
003202  1               
003202  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
003204  1  10 03                BPL     LAB_1B0B        ; branch if not string
003206  1               
003206  1               ; will only be $00 if type is string and token was +
003206  1  4C D8 3A             JMP     LAB_224D        ; add strings, string 1 is in descriptor <des_pl, string 2
003209  1               ; is in line, and return
003209  1               
003209  1               LAB_1B0B:
003209  1  85 71                STA     <ut1_pl         ; save it
00320B  1  0A                   ASL     A               ; *2
00320C  1  65 71                ADC     <ut1_pl         ; *3
00320E  1  A8                   TAY                     ; copy to index
00320F  1               LAB_1B13:
00320F  1  68                   PLA                     ; pull previous precedence
003210  1  D9 42 11             CMP     LAB_OPPT,Y      ; compare with precedence byte
003213  1  B0 65                BCS     LAB_1B7D        ; branch if A >=
003215  1               
003215  1  20 AD 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003218  1               LAB_1B1C:
003218  1  48                   PHA                     ; save precedence
003219  1               LAB_1B1D:
003219  1  20 41 32             JSR     LAB_1B43        ; get vector, execute function then continue evaluation
00321C  1  68                   PLA                     ; restore precedence
00321D  1  A4 99                LDY     <prstk          ; get precedence stacked flag
00321F  1  10 19                BPL     LAB_1B3C        ; branch if stacked values
003221  1               
003221  1  AA                   TAX                     ; copy precedence (set flags)
003222  1  F0 76                BEQ     LAB_1B9D        ; exit if done
003224  1               
003224  1  D0 5D                BNE     LAB_1B86        ; else pop FAC2 and return, branch always
003226  1               
003226  1               LAB_1B2A:
003226  1  26 5F                ROL     <Dtypef         ; shift data type flag into Cb
003228  1  8A                   TXA                     ; copy compare function flag
003229  1  85 5F                STA     <Dtypef         ; clear data type flag, X is 0xxx xxxx
00322B  1  2A                   ROL     A               ; shift data type into compare function byte b0
00322C  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
00322E  1  D0 02                BNE     LAB_1B34        ; branch if no underflow
003230  1               
003230  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
003232  1               LAB_1B34:
003232  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
003234  1               TK_LT_PLUS      = TK_LT-TK_PLUS
003234  1  A0 24                LDY     #TK_LT_PLUS*3   ; set offset to last operator entry
003236  1  85 9B                STA     <comp_f         ; save new compare function flag
003238  1  D0 D5                BNE     LAB_1B13        ; branch always
00323A  1               
00323A  1               LAB_1B3C:
00323A  1  D9 42 11             CMP     LAB_OPPT,Y      ;.compare with stacked function precedence
00323D  1  B0 44                BCS     LAB_1B86        ; branch if A >=, pop FAC2 and return
00323F  1               
00323F  1  90 D7                BCC     LAB_1B1C        ; branch always
003241  1               
003241  1               ;.get vector, execute function then continue evaluation
003241  1               
003241  1               LAB_1B43:
003241  1  B9 44 11             LDA     LAB_OPPT+2,Y    ; get function vector high byte
003244  1  48                   PHA                     ; onto stack
003245  1  B9 43 11             LDA     LAB_OPPT+1,Y    ; get function vector low byte
003248  1  48                   PHA                     ; onto stack
003249  1               ; now push sign, round FAC1 and put on stack
003249  1  20 58 32             JSR     LAB_1B5B        ; function will return here, then the next RTS will call
00324C  1               ; the function
00324C  1  A5 9B                LDA     <comp_f         ; get compare function flag
00324E  1  48                   PHA                     ; push compare evaluation byte
00324F  1  B9 42 11             LDA     LAB_OPPT,Y      ; get precedence byte
003252  1  4C C8 31             JMP     LAB_1ACC        ; continue evaluating expression
003255  1               
003255  1               LAB_1B53:
003255  1  4C E4 32             JMP     LAB_SNER        ; do syntax error then warm start
003258  1               
003258  1               ; push sign, round FAC1 and put on stack
003258  1               
003258  1               LAB_1B5B:
003258  1  68                   PLA                     ; get return addr low byte
003259  1  85 71                STA     <ut1_pl         ; save it
00325B  1  E6 71                INC     <ut1_pl         ; increment it (was ret-1 pushed? yes!)
00325D  1               ; note! no check is made on the high byte! if the calling
00325D  1               ; routine assembles to a page edge then this all goes
00325D  1               ; horribly wrong !!!
00325D  1  68                   PLA                     ; get return addr high byte
00325E  1  85 72                STA     <ut1_ph         ; save it
003260  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003262  1  48                   PHA                     ; push sign
003263  1               
003263  1               ; round FAC1 and put on stack
003263  1               
003263  1               LAB_1B66:
003263  1  20 34 44             JSR     LAB_27BA        ; round FAC1
003266  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003268  1  48                   PHA                     ; push on stack
003269  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00326B  1  48                   PHA                     ; push on stack
00326C  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
00326E  1  48                   PHA                     ; push on stack
00326F  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003271  1  48                   PHA                     ; push on stack
003272  1  6C 71 00             JMP     (ut1_pl)        ; return, sort of
003275  1               
003275  1               ; do functions
003275  1               
003275  1               LAB_1B78:
003275  1  A0 FF                LDY     #$FF            ; flag function
003277  1  68                   PLA                     ; pull precedence byte
003278  1               LAB_1B7B:
003278  1  F0 20                BEQ     LAB_1B9D        ; exit if done
00327A  1               
00327A  1               LAB_1B7D:
00327A  1  C9 64                CMP     #$64            ; compare previous precedence with $64
00327C  1  F0 03                BEQ     LAB_1B84        ; branch if was $64 (< function)
00327E  1               
00327E  1  20 AD 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003281  1               LAB_1B84:
003281  1  84 99                STY     <prstk          ; save precedence stacked flag
003283  1               
003283  1               ; pop FAC2 and return
003283  1               LAB_1B86:
003283  1  68                   PLA                     ; pop byte
003284  1  4A                   LSR     A               ; shift out comparison evaluation lowest bit
003285  1  85 63                STA     <Cflag          ; save comparison evaluation flag
003287  1  68                   PLA                     ; pop exponent
003288  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
00328A  1  68                   PLA                     ; pop mantissa1
00328B  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
00328D  1  68                   PLA                     ; pop mantissa2
00328E  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
003290  1  68                   PLA                     ; pop mantissa3
003291  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
003293  1  68                   PLA                     ; pop sign
003294  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
003296  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
003298  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00329A  1               LAB_1B9D:
00329A  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00329C  1  60                   RTS
00329D  1               
00329D  1               ; print "..." string to string util area
00329D  1               
00329D  1               LAB_1BC1:
00329D  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
00329F  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
0032A1  1  69 00                ADC     #$00            ; add carry to low byte
0032A3  1  90 01                BCC     LAB_1BCA        ; branch if no overflow
0032A5  1               
0032A5  1  C8                   INY                     ; increment high byte
0032A6  1               LAB_1BCA:
0032A6  1  20 F4 38             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
0032A9  1  4C DC 3E             JMP     LAB_23F3        ; restore BASIC execute pointer from temp and return
0032AC  1               
0032AC  1               ; get value from line
0032AC  1               
0032AC  1               LAB_GVAL:
0032AC  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0032B0  1  B0 03                BCS     LAB_1BAC        ; branch if not numeric character
0032B2  1               
0032B2  1               ; else numeric string found (e.g. 123)
0032B2  1               LAB_1BA9:
0032B2  1  4C 65 45             JMP     LAB_2887        ; get FAC1 from string and return
0032B5  1               
0032B5  1               ; get value from line .. continued
0032B5  1               
0032B5  1               ; wasn't a number so ..
0032B5  1               LAB_1BAC:
0032B5  1  AA                   TAX                     ; set the flags
0032B6  1  30 31                BMI     LAB_1BD0        ; if -ve go test token values
0032B8  1               
0032B8  1               ; else it is either a string, number, variable or (<expr>)
0032B8  1  C9 24                CMP     #'$'            ; compare with "$"
0032BA  1  F0 F6                BEQ     LAB_1BA9        ; branch if "$", hex number
0032BC  1               
0032BC  1  C9 25                CMP     #'%'            ; else compare with "%"
0032BE  1  F0 F2                BEQ     LAB_1BA9        ; branch if "%", binary number
0032C0  1               
0032C0  1  C9 2E                CMP     #'.'            ; compare with "."
0032C2  1  F0 EE                BEQ     LAB_1BA9        ; if so get FAC1 from string and return (e.g. was .123)
0032C4  1               
0032C4  1               ; it wasn't any sort of number so ..
0032C4  1  C9 22                CMP     #$22            ; compare with "
0032C6  1  F0 D5                BEQ     LAB_1BC1        ; branch if open quote
0032C8  1               
0032C8  1               ; wasn't any sort of number so ..
0032C8  1               
0032C8  1               ; evaluate expression within parentheses
0032C8  1               
0032C8  1  C9 28                CMP     #'('            ; compare with "("
0032CA  1  D0 51                BNE     LAB_1C18        ; if not "(" get (var), return value in FAC1 and $ flag
0032CC  1               
0032CC  1               LAB_1BF7:
0032CC  1  20 C6 31             JSR     LAB_EVEZ        ; evaluate expression, no decrement
0032CF  1               
0032CF  1               ; all the 'scan for' routines return the character after the sought character
0032CF  1               
0032CF  1               ; scan for ")" , else do syntax error then warm start
0032CF  1               
0032CF  1               LAB_1BFB:
0032CF  1  A9 29                LDA     #$29            ; load A with ")"
0032D1  1               
0032D1  1               ; scan for CHR$(A) , else do syntax error then warm start
0032D1  1               
0032D1  1               LAB_SCCA:
0032D1  1  A0 00                LDY     #$00            ; clear index
0032D3  1  D1 C3                CMP     (<Bpntrl),Y     ; check next byte is = A
0032D5  1  D0 0D                BNE     LAB_SNER        ; if not do syntax error then warm start
0032D7  1               
0032D7  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then return
0032DB  1  60                   RTS
0032DC  1               ; scan for "(" , else do syntax error then warm start
0032DC  1               
0032DC  1               LAB_1BFE:
0032DC  1  A9 28                LDA     #$28            ; load A with "("
0032DE  1  D0 F1                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0032E0  1               ; (branch always)
0032E0  1               
0032E0  1               ; scan for "," , else do syntax error then warm start
0032E0  1               
0032E0  1               LAB_1C01:
0032E0  1  A9 2C                LDA     #$2C            ; load A with ","
0032E2  1  D0 ED                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0032E4  1               ; (branch always)
0032E4  1               
0032E4  1               ; syntax error then warm start
0032E4  1               
0032E4  1               LAB_SNER:
0032E4  1  A2 02                LDX     #$02            ; error code $02 ("Syntax" error)
0032E6  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
0032E9  1               
0032E9  1               ; get value from line .. continued
0032E9  1               ; do tokens
0032E9  1               
0032E9  1               LAB_1BD0:
0032E9  1  C9 C9                CMP     #TK_MINUS       ; compare with token for -
0032EB  1  F0 29                BEQ     LAB_1C11        ; branch if - token (do set-up for functions)
0032ED  1               
0032ED  1               ; wasn't -n so ..
0032ED  1  C9 C8                CMP     #TK_PLUS        ; compare with token for +
0032EF  1  F0 BB                BEQ     LAB_GVAL        ; branch if + token (+n = n so ignore leading +)
0032F1  1               
0032F1  1  C9 C3                CMP     #TK_NOT         ; compare with token for NOT
0032F3  1  D0 13                BNE     LAB_1BE7        ; branch if not token for NOT
0032F5  1               
0032F5  1               ; was NOT token
0032F5  1               TK_EQUAL_PLUS   = TK_EQUAL-TK_PLUS
0032F5  1  A0 21                LDY     #TK_EQUAL_PLUS*3; offset to NOT function
0032F7  1  D0 1F                BNE     LAB_1C13        ; do set-up for function then execute (branch always)
0032F9  1               
0032F9  1               ; do = compare
0032F9  1               
0032F9  1               LAB_EQUAL:
0032F9  1  20 BC 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0032FC  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0032FE  1  49 FF                EOR     #$FF            ; invert it
003300  1  A8                   TAY                     ; copy it
003301  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003303  1  49 FF                EOR     #$FF            ; invert it
003305  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003308  1               
003308  1               ; get value from line .. continued
003308  1               
003308  1               ; wasn't +, -, or NOT so ..
003308  1               LAB_1BE7:
003308  1  C9 C0                CMP     #TK_FN          ; compare with token for FN
00330A  1  D0 03                BNE     LAB_1BEE        ; branch if not token for FN
00330C  1               
00330C  1  4C D7 37             JMP     LAB_201E        ; go evaluate FNx
00330F  1               
00330F  1               ; get value from line .. continued
00330F  1               
00330F  1               ; wasn't +, -, NOT or FN so ..
00330F  1               LAB_1BEE:
00330F  1  E9 D5                SBC     #TK_SGN         ; subtract with token for SGN
003311  1  B0 19                BCS     LAB_1C27        ; if a function token go do it
003313  1               
003313  1  4C E4 32             JMP     LAB_SNER        ; else do syntax error
003316  1               
003316  1               ; set-up for functions
003316  1               
003316  1               LAB_1C11:
003316  1               TK_GT_PLUS      = TK_GT-TK_PLUS
003316  1  A0 1E                LDY     #TK_GT_PLUS*3   ; set offset from base to > operator
003318  1               LAB_1C13:
003318  1  68                   PLA                     ; dump return address low byte
003319  1  68                   PLA                     ; dump return address high byte
00331A  1  4C 19 32             JMP     LAB_1B1D        ; execute function then continue evaluation
00331D  1               
00331D  1               ; variable name set-up
00331D  1               ; get (var), return value in FAC_1 and $ flag
00331D  1               
00331D  1               LAB_1C18:
00331D  1  20 BB 34             JSR     LAB_GVAR        ; get (var) address
003320  1  85 AE                STA     <FAC1_2         ; save address low byte in FAC1 mantissa2
003322  1  84 AF                STY     <FAC1_3         ; save address high byte in FAC1 mantissa3
003324  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003326  1  30 03                BMI     LAB_1C25        ; if string then return (does RTS)
003328  1               
003328  1               LAB_1C24:
003328  1  4C 38 43             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1
00332B  1               
00332B  1               LAB_1C25:
00332B  1  60                   RTS
00332C  1               
00332C  1               ; get value from line .. continued
00332C  1               ; only functions left so ..
00332C  1               
00332C  1               ; set up function references
00332C  1               
00332C  1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
00332C  1               ; to process function calls. now the function vector is computed and pushed on the stack
00332C  1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
00332C  1               ; is calculated and the routine called, if not this routine just does RTS. whichever
00332C  1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
00332C  1               ; the function code
00332C  1               
00332C  1               ; this also removes some less than elegant code that was used to bypass type checking
00332C  1               ; for functions that returned strings
00332C  1               
00332C  1               LAB_1C27:
00332C  1  0A                   ASL     A               ; *2 (2 bytes per function address)
00332D  1  A8                   TAY                     ; copy to index
00332E  1               
00332E  1  B9 FB 10             LDA     LAB_FTBM,Y      ; get function jump vector high byte
003331  1  48                   PHA                     ; push functions jump vector high byte
003332  1  B9 FA 10             LDA     LAB_FTBL,Y      ; get function jump vector low byte
003335  1  48                   PHA                     ; push functions jump vector low byte
003336  1               
003336  1  B9 B3 10             LDA     LAB_FTPM,Y      ; get function pre process vector high byte
003339  1  F0 05                BEQ     LAB_1C56        ; skip pre process if null vector
00333B  1               
00333B  1  48                   PHA                     ; push functions pre process vector high byte
00333C  1  B9 B2 10             LDA     LAB_FTPL,Y      ; get function pre process vector low byte
00333F  1  48                   PHA                     ; push functions pre process vector low byte
003340  1               
003340  1               LAB_1C56:
003340  1  60                   RTS                     ; do function, or pre process, call
003341  1               
003341  1               ; process string expression in parenthesis
003341  1               
003341  1               LAB_PPFS:
003341  1  20 CC 32             JSR     LAB_1BF7        ; process expression in parenthesis
003344  1  4C AF 31             JMP     LAB_CTST        ; check if source is string then do function,
003347  1               ; else do type mismatch
003347  1               
003347  1               ; process numeric expression in parenthesis
003347  1               
003347  1               LAB_PPFN:
003347  1  20 CC 32             JSR     LAB_1BF7        ; process expression in parenthesis
00334A  1  4C AD 31             JMP     LAB_CTNM        ; check if source is numeric then do function,
00334D  1               ; else do type mismatch
00334D  1               
00334D  1               ; set numeric data type and increment BASIC execute pointer
00334D  1               
00334D  1               LAB_PPBI:
00334D  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00334F  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
003353  1  60                   RTS
003354  1               ; process string for LEFT$, RIGHT$ or MID$
003354  1               
003354  1               LAB_LRMS:
003354  1  20 C6 31             JSR     LAB_EVEZ        ; evaluate (should be string) expression
003357  1  20 E0 32             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00335A  1  20 AF 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
00335D  1               
00335D  1  68                   PLA                     ; get function jump vector low byte
00335E  1  AA                   TAX                     ; save functions jump vector low byte
00335F  1  68                   PLA                     ; get function jump vector high byte
003360  1  A8                   TAY                     ; save functions jump vector high byte
003361  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003363  1  48                   PHA                     ; push string pointer high byte
003364  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003366  1  48                   PHA                     ; push string pointer low byte
003367  1  98                   TYA                     ; get function jump vector high byte back
003368  1  48                   PHA                     ; save functions jump vector high byte
003369  1  8A                   TXA                     ; get function jump vector low byte back
00336A  1  48                   PHA                     ; save functions jump vector low byte
00336B  1  20 5A 3E             JSR     LAB_GTBY        ; get byte parameter
00336E  1  8A                   TXA                     ; copy byte parameter to A
00336F  1  60                   RTS                     ; go do function
003370  1               
003370  1               ; process numeric expression(s) for BIN$ or HEX$
003370  1               
003370  1               LAB_BHSS:
003370  1  20 C6 31             JSR     LAB_EVEZ        ; process expression
003373  1  20 AD 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
003376  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003378  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
00337A  1  B0 22                BCS     LAB_BHER        ; branch if n>=2^24 (is too big)
00337C  1               
00337C  1  20 0F 45             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
00337F  1  A2 02                LDX     #$02            ; 3 bytes to do
003381  1               LAB_CFAC:
003381  1  B5 AD                LDA     <FAC1_1,X       ; get byte from FAC1
003383  1  95 11                STA     <nums_1,X       ; save byte to temp
003385  1  CA                   DEX                     ; decrement index
003386  1  10 F9                BPL     LAB_CFAC        ; copy FAC1 mantissa to temp
003388  1               
003388  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
00338C  1  A2 00                LDX     #$00            ; set default to no leading "0"s
00338E  1  C9 29                CMP     #')'            ; compare with close bracket
003390  1  F0 0B                BEQ     LAB_1C54        ; if ")" go do rest of function
003392  1               
003392  1  20 EB 3E             JSR     LAB_SCGB        ; scan for "," and get byte
003395  1  22 C2 00 00          JSL     LAB_GBYT        ; get last byte back
003399  1  C9 29                CMP     #')'            ; is next character )
00339B  1  D0 01                BNE     LAB_BHER        ; if not ")" go do error
00339D  1               
00339D  1               LAB_1C54:
00339D  1  60                   RTS                     ; else do function
00339E  1               
00339E  1               LAB_BHER:
00339E  1  4C 43 36             JMP     LAB_FCER        ; do function call error then warm start
0033A1  1               
0033A1  1               ; perform EOR
0033A1  1               
0033A1  1               ; added operator format is the same as AND or OR, precedence is the same as OR
0033A1  1               
0033A1  1               ; this bit worked first time but it took a while to sort out the operator table
0033A1  1               ; pointers and offsets afterwards!
0033A1  1               
0033A1  1               LAB_EOR:
0033A1  1  20 C8 33             JSR     GetFirst        ; get first integer expression (no sign check)
0033A4  1  45 5B                EOR     <XOAw_l         ; EOR with expression 1 low byte
0033A6  1  A8                   TAY                     ; save in Y
0033A7  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033A9  1  45 5C                EOR     <XOAw_h         ; EOR with expression 1 high byte
0033AB  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0033AE  1               
0033AE  1               ; perform OR
0033AE  1               
0033AE  1               LAB_OR:
0033AE  1  20 C8 33             JSR     GetFirst        ; get first integer expression (no sign check)
0033B1  1  05 5B                ORA     <XOAw_l         ; OR with expression 1 low byte
0033B3  1  A8                   TAY                     ; save in Y
0033B4  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033B6  1  05 5C                ORA     <XOAw_h         ; OR with expression 1 high byte
0033B8  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0033BB  1               
0033BB  1               ; perform AND
0033BB  1               
0033BB  1               LAB_AND:
0033BB  1  20 C8 33             JSR     GetFirst        ; get first integer expression (no sign check)
0033BE  1  25 5B                AND     <XOAw_l         ; AND with expression 1 low byte
0033C0  1  A8                   TAY                     ; save in Y
0033C1  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033C3  1  25 5C                AND     <XOAw_h         ; AND with expression 1 high byte
0033C5  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0033C8  1               
0033C8  1               ; get first value for OR, AND or EOR
0033C8  1               
0033C8  1               GetFirst:
0033C8  1  20 BC 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0033CB  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033CD  1  85 5C                STA     <XOAw_h         ; save it
0033CF  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0033D1  1  85 5B                STA     <XOAw_l         ; save it
0033D3  1  20 28 40             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
0033D6  1  20 BC 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
0033D9  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0033DB  1               LAB_1C95:
0033DB  1  60                   RTS
0033DC  1               
0033DC  1               ; perform comparisons
0033DC  1               
0033DC  1               ; do < compare
0033DC  1               
0033DC  1               LAB_LTHAN:
0033DC  1  20 B0 31             JSR     LAB_CKTM        ; type match check, set C for string
0033DF  1  B0 13                BCS     LAB_1CAE        ; branch if string
0033E1  1               
0033E1  1               ; do numeric < compare
0033E1  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0033E3  1  09 7F                ORA     #$7F            ; set all non sign bits
0033E5  1  25 B4                AND     <FAC2_1         ; and FAC2 mantissa1 (AND in sign bit)
0033E7  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
0033E9  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
0033EB  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
0033ED  1  20 72 44             JSR     LAB_27F8        ; compare FAC1 with FAC2 (AY)
0033F0  1  AA                   TAX                     ; copy result
0033F1  1  4C 25 34             JMP     LAB_1CE1        ; go evaluate result
0033F4  1               
0033F4  1               ; do string < compare
0033F4  1               LAB_1CAE:
0033F4  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0033F6  1  C6 9B                DEC     <comp_f         ; clear < bit in compare function flag
0033F8  1  20 D1 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
0033FB  1               ; space returns with A = length, X=pointer low byte,
0033FB  1               ; Y=pointer high byte
0033FB  1  85 AC                STA     <str_ln         ; save length
0033FD  1  86 AD                STX     <str_pl         ; save string pointer low byte
0033FF  1  84 AE                STY     <str_ph         ; save string pointer high byte
003401  1  A5 B5                LDA     <FAC2_2         ; get descriptor pointer low byte
003403  1  A4 B6                LDY     <FAC2_3         ; get descriptor pointer high byte
003405  1  20 D5 3B             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003408  1               ; returns with A = length, X=pointer low byte,
003408  1               ; Y=pointer high byte
003408  1  86 B5                STX     <FAC2_2         ; save string pointer low byte
00340A  1  84 B6                STY     <FAC2_3         ; save string pointer high byte
00340C  1  AA                   TAX                     ; copy length
00340D  1  38                   SEC                     ; set carry for subtract
00340E  1  E5 AC                SBC     <str_ln         ; subtract string 1 length
003410  1  F0 08                BEQ     LAB_1CD6        ; branch if str 1 length = string 2 length
003412  1               
003412  1  A9 01                LDA     #$01            ; set str 1 length > string 2 length
003414  1  90 04                BCC     LAB_1CD6        ; branch if so
003416  1               
003416  1  A6 AC                LDX     <str_ln         ; get string 1 length
003418  1  A9 FF                LDA     #$FF            ; set str 1 length < string 2 length
00341A  1               LAB_1CD6:
00341A  1  85 B0                STA     <FAC1_s         ; save length compare
00341C  1  A0 FF                LDY     #$FF            ; set index
00341E  1  E8                   INX                     ; adjust for loop
00341F  1               LAB_1CDB:
00341F  1  C8                   INY                     ; increment index
003420  1  CA                   DEX                     ; decrement count
003421  1  D0 07                BNE     LAB_1CE6        ; branch if still bytes to do
003423  1               
003423  1  A6 B0                LDX     <FAC1_s         ; get length compare back
003425  1               LAB_1CE1:
003425  1  30 39                BMI     LAB_1CF2        ; branch if str 1 < str 2
003427  1               
003427  1  18                   CLC                     ; flag str 1 <= str 2
003428  1  90 36                BCC     LAB_1CF2        ; go evaluate result
00342A  1               
00342A  1               LAB_1CE6:
00342A  1  8B DA A2 01          LDAINDIRECTY FAC2_2     ; get string 2 byte
00342E  1  B5 B5 C9 00  
003432  1  D0 04 A2 00  
003440  1  8B 48 DA A2          CMPINDIRECTY FAC1_1     ; compare with string 1 byte
003444  1  01 B5 AD C9  
003448  1  00 D0 04 A2  
003458  1  F0 C5                BEQ     LAB_1CDB        ; loop if bytes =
00345A  1               
00345A  1  A2 FF                LDX     #$FF            ; set str 1 < string 2
00345C  1  B0 02                BCS     LAB_1CF2        ; branch if so
00345E  1               
00345E  1  A2 01                LDX     #$01            ;  set str 1 > string 2
003460  1               LAB_1CF2:
003460  1  E8                   INX                     ; x = 0, 1 or 2
003461  1  8A                   TXA                     ; copy to A
003462  1  2A                   ROL     A               ; *2 (1, 2 or 4)
003463  1  25 63                AND     <Cflag          ; AND with comparison evaluation flag
003465  1  F0 02                BEQ     LAB_1CFB        ; branch if 0 (compare is false)
003467  1               
003467  1  A9 FF                LDA     #$FF            ; else set result true
003469  1               LAB_1CFB:
003469  1  4C 55 44             JMP     LAB_27DB        ; save A as integer byte and return
00346C  1               
00346C  1               LAB_1CFE:
00346C  1  20 E0 32             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00346F  1               
00346F  1               ; perform DIM
00346F  1               
00346F  1               LAB_DIM:
00346F  1  AA                   TAX                     ; copy "DIM" flag to X
003470  1  20 C1 34             JSR     LAB_1D10        ; search for variable
003473  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003477  1  D0 F3                BNE     LAB_1CFE        ; scan for "," and loop if not null
003479  1               
003479  1  60                   RTS
00347A  1               
00347A  1               ; perform << (left shift)
00347A  1               
00347A  1               LAB_LSHIFT:
00347A  1  20 B0 34             JSR     GetPair         ; get integer expression and byte (no sign check)
00347D  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
00347F  1  A6 78                LDX     <TempB          ; get shift count
003481  1  F0 22                BEQ     NoShift         ; branch if zero
003483  1               
003483  1  E0 10                CPX     #$10            ; compare bit count with 16d
003485  1  B0 23                BCS     TooBig          ; branch if >=
003487  1               
003487  1               Ls_loop:
003487  1  06 AF                ASL     <FAC1_3         ; shift low byte
003489  1  2A                   ROL     A               ; shift high byte
00348A  1  CA                   DEX                     ; decrement bit count
00348B  1  D0 FA                BNE     Ls_loop         ; loop if shift not complete
00348D  1               
00348D  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
00348F  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003492  1               
003492  1               ; perform >> (right shift)
003492  1               
003492  1               LAB_RSHIFT:
003492  1  20 B0 34             JSR     GetPair         ; get integer expression and byte (no sign check)
003495  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
003497  1  A6 78                LDX     <TempB          ; get shift count
003499  1  F0 0A                BEQ     NoShift         ; branch if zero
00349B  1               
00349B  1  E0 10                CPX     #$10            ; compare bit count with 16d
00349D  1  B0 0B                BCS     TooBig          ; branch if >=
00349F  1               
00349F  1               Rs_loop:
00349F  1  4A                   LSR     A               ; shift high byte
0034A0  1  66 AF                ROR     <FAC1_3         ; shift low byte
0034A2  1  CA                   DEX                     ; decrement bit count
0034A3  1  D0 FA                BNE     Rs_loop         ; loop if shift not complete
0034A5  1               
0034A5  1               NoShift:
0034A5  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
0034A7  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0034AA  1               
0034AA  1               TooBig:
0034AA  1  A9 00                LDA     #$00            ; clear high byte
0034AC  1  A8                   TAY                     ; copy to low byte
0034AD  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0034B0  1               
0034B0  1               GetPair:
0034B0  1  20 5D 3E             JSR     LAB_EVBY        ; evaluate byte expression, result in X
0034B3  1  86 78                STX     <TempB          ; save it
0034B5  1  20 28 40             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
0034B8  1  4C BC 35             JMP     LAB_EVIR        ; evaluate integer expression (no sign check)
0034BB  1               
0034BB  1               ; search for variable
0034BB  1               
0034BB  1               ; return pointer to variable in <Cvaral/<Cvarah
0034BB  1               
0034BB  1               LAB_GVAR:
0034BB  1  A2 00                LDX     #$00            ; set DIM flag = $00
0034BD  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory (1st character)
0034C1  1               LAB_1D10:
0034C1  1  86 5E                STX     <Defdim         ; save DIM flag
0034C3  1               LAB_1D12:
0034C3  1  85 93                STA     <Varnm1         ; save 1st character
0034C5  1  29 7F                AND     #$7F            ; clear FN flag bit
0034C7  1  20 33 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0034CA  1  B0 03                BCS     LAB_1D1F        ; branch if ok
0034CC  1               
0034CC  1  4C E4 32             JMP     LAB_SNER        ; else syntax error then warm start
0034CF  1               
0034CF  1               ; was variable name so ..
0034CF  1               LAB_1D1F:
0034CF  1  A2 00                LDX     #$00            ; clear 2nd character temp
0034D1  1  86 5F                STX     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0034D3  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (2nd character)
0034D7  1  90 05                BCC     LAB_1D2D        ; branch if character = "0"-"9" (ok)
0034D9  1               
0034D9  1               ; 2nd character wasn't "0" to "9" so ..
0034D9  1  20 33 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0034DC  1  90 0C                BCC     LAB_1D38        ; branch if <"A" or >"Z" (go check if string)
0034DE  1               
0034DE  1               LAB_1D2D:
0034DE  1  AA                   TAX                     ; copy 2nd character
0034DF  1               
0034DF  1               ; ignore further (valid) characters in the variable name
0034DF  1               LAB_1D2E:
0034DF  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (3rd character)
0034E3  1  90 FA                BCC     LAB_1D2E        ; loop if character = "0"-"9" (ignore)
0034E5  1               
0034E5  1  20 33 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0034E8  1  B0 F5                BCS     LAB_1D2E        ; loop if character = "A"-"Z" (ignore)
0034EA  1               
0034EA  1               ; check if string variable
0034EA  1               LAB_1D38:
0034EA  1  C9 24                CMP     #'$'            ; compare with "$"
0034EC  1  D0 0C                BNE     LAB_1D47        ; branch if not string
0034EE  1               
0034EE  1               ; to introduce a new variable type (% suffix for integers say) then this branch
0034EE  1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
0034EE  1               
0034EE  1               ; type is string
0034EE  1  A9 FF                LDA     #$FF            ; set data type = string
0034F0  1  85 5F                STA     <Dtypef         ; set data type flag, $FF=string, $00=numeric
0034F2  1  8A                   TXA                     ; get 2nd character back
0034F3  1  09 80                ORA     #$80            ; set top bit (indicate string var)
0034F5  1  AA                   TAX                     ; copy back to 2nd character temp
0034F6  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0034FA  1               
0034FA  1               ; after we have determined the variable type we need to come back here to determine
0034FA  1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
0034FA  1               
0034FA  1               
0034FA  1               LAB_1D47:                       ; gets here with character after var name in A
0034FA  1  86 94                STX     <Varnm2         ; save 2nd character
0034FC  1  05 61                ORA     <Sufnxf         ; or with subscript/FNX flag (or FN name)
0034FE  1  C9 28                CMP     #'('            ; compare with "("
003500  1  D0 03                BNE     LAB_1D53        ; branch if not "("
003502  1               
003502  1  4C CE 35             JMP     LAB_1E17        ; go find, or make, array
003505  1               
003505  1               ; either find or create var
003505  1               ; var name (1st two characters only!) is in <Varnm1,<Varnm2
003505  1               
003505  1               ; variable name wasn't var(... so look for plain var
003505  1               LAB_1D53:
003505  1  A9 00                LDA     #$00            ; clear A
003507  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
003509  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
00350B  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
00350D  1  A0 00                LDY     #$00            ; clear index
00350F  1               LAB_1D5D:
00350F  1  86 AB                STX     <Vrschh         ; save search address high byte
003511  1               LAB_1D5F:
003511  1  85 AA                STA     <Vrschl         ; save search address low byte
003513  1  E4 7E                CPX     <Sarryh         ; compare high address with var space end
003515  1  D0 04                BNE     LAB_1D69        ; skip next compare if <>
003517  1               
003517  1               ; high addresses were = so compare low addresses
003517  1  C5 7D                CMP     <Sarryl         ; compare low address with var space end
003519  1  F0 2C                BEQ     LAB_1D8B        ; if not found go make new var
00351B  1               
00351B  1               LAB_1D69:
00351B  1  A5 93                LDA     <Varnm1         ; get 1st character of var to find
00351D  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 1st character
00351F  1  D0 08                BNE     LAB_1D77        ; branch if no match
003521  1               
003521  1               ; 1st characters match so compare 2nd characters
003521  1  A5 94                LDA     <Varnm2         ; get 2nd character of var to find
003523  1  C8                   INY                     ; index to point to variable name 2nd character
003524  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 2nd character
003526  1  F0 69                BEQ     LAB_1DD7        ; branch if match (found var)
003528  1               
003528  1  88                   DEY                     ; else decrement index (now = $00)
003529  1               LAB_1D77:
003529  1  18                   CLC                     ; clear carry for add
00352A  1  A5 AA                LDA     <Vrschl         ; get search address low byte
00352C  1  69 06                ADC     #$06            ; +6 (offset to next var name)
00352E  1  90 E1                BCC     LAB_1D5F        ; loop if no overflow to high byte
003530  1               
003530  1  E8                   INX                     ; else increment high byte
003531  1  D0 DC                BNE     LAB_1D5D        ; loop always (RAM doesn't extend to $FFFF !)
003533  1               
003533  1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
003533  1               
003533  1               LAB_CASC:
003533  1  C9 61                CMP     #'a'            ; compare with "a"
003535  1  B0 0A                BCS     LAB_1D83        ; go check <"z"+1
003537  1               
003537  1               ; check byte, return C=0 if<"A" or >"Z"
003537  1               
003537  1               LAB_1D82:
003537  1  C9 41                CMP     #'A'            ; compare with "A"
003539  1  90 05                BCC     LAB_1D8A        ; exit if less
00353B  1               
00353B  1               ; carry is set
00353B  1  E9 5B                SBC     #$5B            ; subtract "Z"+1
00353D  1  38                   SEC                     ; set carry
00353E  1  E9 A5                SBC     #$A5            ; subtract $A5 (restore byte)
003540  1               ; carry clear if byte>$5A
003540  1               LAB_1D8A:
003540  1  60                   RTS
003541  1               
003541  1               LAB_1D83:
003541  1  E9 7B                SBC     #$7B            ; subtract "z"+1
003543  1  38                   SEC                     ; set carry
003544  1  E9 85                SBC     #$85            ; subtract $85 (restore byte)
003546  1               ; carry clear if byte>$7A
003546  1  60                   RTS
003547  1               
003547  1               ; reached end of variable mem without match
003547  1               ; .. so create new variable
003547  1               LAB_1D8B:
003547  1  68                   PLA                     ; pop return address low byte
003548  1  48                   PHA                     ; push return address low byte
003549  1               LAB_1C18p2      = LAB_1C18+2
003549  1  C9 1F                CMP     #<LAB_1C18p2    ; compare with expected calling routine return low byte
00354B  1  D0 05                BNE     LAB_1D98        ; if not get (var) go create new var
00354D  1               
00354D  1               ; This will only drop through if the call was from LAB_1C18 and is only called
00354D  1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
00354D  1               ; it prevents the creation of variables not assigned a value.
00354D  1               
00354D  1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
00354D  1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
00354D  1               
00354D  1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
00354D  1               
00354D  1               ; this is where you would put the undefined variable error call e.g.
00354D  1               
00354D  1               ;					; variable doesn't exist so flag error
00354D  1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
00354D  1               ;	JMP	LAB_XERR		; do error #X then warm start
00354D  1               
00354D  1               ; the above code has been tested and works a treat! (it replaces the three code lines
00354D  1               ; below)
00354D  1               
00354D  1               ; else return dummy null value
00354D  1  A9 69                LDA     #<LAB_1D96      ; low byte point to $00,$00
00354F  1               ; (uses part of misc constants table)
00354F  1  A0 18                LDY     #>LAB_1D96      ; high byte point to $00,$00
003551  1  60                   RTS
003552  1               
003552  1               ; create new numeric variable
003552  1               LAB_1D98:
003552  1  A5 7D                LDA     <Sarryl         ; get var mem end low byte
003554  1  A4 7E                LDY     <Sarryh         ; get var mem end high byte
003556  1  85 AA                STA     <Ostrtl         ; save old block start low byte
003558  1  84 AB                STY     <Ostrth         ; save old block start high byte
00355A  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
00355C  1  A4 80                LDY     <Earryh         ; get array mem end high byte
00355E  1  85 A6                STA     <Obendl         ; save old block end low byte
003560  1  84 A7                STY     <Obendh         ; save old block end high byte
003562  1  18                   CLC                     ; clear carry for add
003563  1  69 06                ADC     #$06            ; +6 (space for one var)
003565  1  90 01                BCC     LAB_1DAE        ; branch if no overflow to high byte
003567  1               
003567  1  C8                   INY                     ; else increment high byte
003568  1               LAB_1DAE:
003568  1  85 A4                STA     <Nbendl         ; set new block end low byte
00356A  1  84 A5                STY     <Nbendh         ; set new block end high byte
00356C  1  20 C5 25             JSR     LAB_11CF        ; open up space in memory
00356F  1  A5 A4                LDA     <Nbendl         ; get new start low byte
003571  1  A4 A5                LDY     <Nbendh         ; get new start high byte (-$100)
003573  1  C8                   INY                     ; correct high byte
003574  1  85 7D                STA     <Sarryl         ; save new var mem end low byte
003576  1  84 7E                STY     <Sarryh         ; save new var mem end high byte
003578  1  A0 00                LDY     #$00            ; clear index
00357A  1  A5 93                LDA     <Varnm1         ; get var name 1st character
00357C  1  91 AA                STA     (<Vrschl),Y     ; save var name 1st character
00357E  1  C8                   INY                     ; increment index
00357F  1  A5 94                LDA     <Varnm2         ; get var name 2nd character
003581  1  91 AA                STA     (<Vrschl),Y     ; save var name 2nd character
003583  1  A9 00                LDA     #$00            ; clear A
003585  1  C8                   INY                     ; increment index
003586  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
003588  1  C8                   INY                     ; increment index
003589  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
00358B  1  C8                   INY                     ; increment index
00358C  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
00358E  1  C8                   INY                     ; increment index
00358F  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
003591  1               
003591  1               ; found a match for var ((<Vrschl) = ptr)
003591  1               LAB_1DD7:
003591  1  A5 AA                LDA     <Vrschl         ; get var address low byte
003593  1  18                   CLC                     ; clear carry for add
003594  1  69 02                ADC     #$02            ; +2 (offset past var name bytes)
003596  1  A4 AB                LDY     <Vrschh         ; get var address high byte
003598  1  90 01                BCC     LAB_1DE1        ; branch if no overflow from add
00359A  1               
00359A  1  C8                   INY                     ; else increment high byte
00359B  1               LAB_1DE1:
00359B  1  85 95                STA     <Cvaral         ; save current var address low byte
00359D  1  84 96                STY     <Cvarah         ; save current var address high byte
00359F  1  60                   RTS
0035A0  1               
0035A0  1               ; set-up array pointer (<Adatal/h) to first element in array
0035A0  1               ; set <Adatal,<Adatah to <Astrtl,<Astrth+2*<Dimcnt+#$05
0035A0  1               
0035A0  1               LAB_1DE6:
0035A0  1  A5 5D                LDA     <Dimcnt         ; get # of dimensions (1, 2 or 3)
0035A2  1  0A                   ASL     A               ; *2 (also clears the carry !)
0035A3  1  69 05                ADC     #$05            ; +5 (result is 7, 9 or 11 here)
0035A5  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
0035A7  1  A4 AB                LDY     <Astrth         ; get array pointer high byte
0035A9  1  90 01                BCC     LAB_1DF2        ; branch if no overflow
0035AB  1               
0035AB  1  C8                   INY                     ; else increment high byte
0035AC  1               LAB_1DF2:
0035AC  1  85 A4                STA     <Adatal         ; save array data pointer low byte
0035AE  1  84 A5                STY     <Adatah         ; save array data pointer high byte
0035B0  1  60                   RTS
0035B1  1               
0035B1  1               ; evaluate integer expression
0035B1  1               
0035B1  1               LAB_EVIN:
0035B1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0035B5  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0035B8  1               ; else do type mismatch
0035B8  1               
0035B8  1               ; evaluate integer expression (no check)
0035B8  1               
0035B8  1               LAB_EVPI:
0035B8  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0035BA  1  30 0D                BMI     LAB_1E12        ; do function call error if -ve
0035BC  1               
0035BC  1               ; evaluate integer expression (no sign check)
0035BC  1               
0035BC  1               LAB_EVIR:
0035BC  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0035BE  1  C9 90                CMP     #$90            ; compare with exponent = 2^16 (n>2^15)
0035C0  1  90 09                BCC     LAB_1E14        ; branch if n<2^16 (is ok)
0035C2  1               
0035C2  1  A9 70                LDA     #<LAB_1DF7      ; set pointer low byte to -32768
0035C4  1  A0 18                LDY     #>LAB_1DF7      ; set pointer high byte to -32768
0035C6  1  20 72 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0035C9  1               LAB_1E12:
0035C9  1  D0 78                BNE     LAB_FCER        ; if <> do function call error then warm start
0035CB  1               
0035CB  1               LAB_1E14:
0035CB  1  4C 0F 45             JMP     LAB_2831        ; convert FAC1 floating-to-fixed and return
0035CE  1               
0035CE  1               ; find or make array
0035CE  1               
0035CE  1               LAB_1E17:
0035CE  1  A5 5E                LDA     <Defdim         ; get DIM flag
0035D0  1  48                   PHA                     ; push it
0035D1  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
0035D3  1  48                   PHA                     ; push it
0035D4  1  A0 00                LDY     #$00            ; clear dimensions count
0035D6  1               
0035D6  1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
0035D6  1               
0035D6  1               LAB_1E1F:
0035D6  1  98                   TYA                     ; copy dimensions count
0035D7  1  48                   PHA                     ; save it
0035D8  1  A5 94                LDA     <Varnm2         ; get array name 2nd byte
0035DA  1  48                   PHA                     ; save it
0035DB  1  A5 93                LDA     <Varnm1         ; get array name 1st byte
0035DD  1  48                   PHA                     ; save it
0035DE  1  20 B1 35             JSR     LAB_EVIN        ; evaluate integer expression
0035E1  1  68                   PLA                     ; pull array name 1st byte
0035E2  1  85 93                STA     <Varnm1         ; restore array name 1st byte
0035E4  1  68                   PLA                     ; pull array name 2nd byte
0035E5  1  85 94                STA     <Varnm2         ; restore array name 2nd byte
0035E7  1  68                   PLA                     ; pull dimensions count
0035E8  1  A8                   TAY                     ; restore it
0035E9  1  A3 02                LDA     2,S             ; get DIM flag
0035EB  1  85 FD                STA     <TEMPW          ; push it
0035ED  1  A3 01                LDA     1,S             ; get data type flag
0035EF  1  85 FE                STA     <TEMPW+1        ; push it
0035F1  1  A5 AE                LDA     <FAC1_2         ; get this dimension size high byte
0035F3  1  83 02                STA     2,S             ; stack before flag bytes
0035F5  1  A5 AF                LDA     <FAC1_3         ; get this dimension size low byte
0035F7  1  83 01                STA     1,S             ; stack before flag bytes
0035F9  1  A5 FD                LDA     <TEMPW
0035FB  1  48                   PHA
0035FC  1  A5 FE                LDA     <TEMPW+1
0035FE  1  48                   PHA
0035FF  1  C8                   INY                     ; increment dimensions count
003600  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003604  1  C9 2C                CMP     #','            ; compare with ","
003606  1  F0 CE                BEQ     LAB_1E1F        ; if found go do next dimension
003608  1               
003608  1  84 5D                STY     <Dimcnt         ; store dimensions count
00360A  1  20 CF 32             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
00360D  1  68                   PLA                     ; pull data type flag
00360E  1  85 5F                STA     <Dtypef         ; restore data type flag, $FF=string, $00=numeric
003610  1  68                   PLA                     ; pull DIM flag
003611  1  85 5E                STA     <Defdim         ; restore DIM flag
003613  1  A6 7D                LDX     <Sarryl         ; get array mem start low byte
003615  1  A5 7E                LDA     <Sarryh         ; get array mem start high byte
003617  1               
003617  1               ; now check to see if we are at the end of array memory (we would be if there were
003617  1               ; no arrays).
003617  1               
003617  1               LAB_1E5C:
003617  1  86 AA                STX     <Astrtl         ; save as array start pointer low byte
003619  1  85 AB                STA     <Astrth         ; save as array start pointer high byte
00361B  1  C5 80                CMP     <Earryh         ; compare with array mem end high byte
00361D  1  D0 04                BNE     LAB_1E68        ; branch if not reached array mem end
00361F  1               
00361F  1  E4 7F                CPX     <Earryl         ; else compare with array mem end low byte
003621  1  F0 39                BEQ     LAB_1EA1        ; go build array if not found
003623  1               
003623  1               ; search for array
003623  1               LAB_1E68:
003623  1  A0 00                LDY     #$00            ; clear index
003625  1  B1 AA                LDA     (<Astrtl),Y     ; get array name first byte
003627  1  C8                   INY                     ; increment index to second name byte
003628  1  C5 93                CMP     <Varnm1         ; compare with this array name first byte
00362A  1  D0 06                BNE     LAB_1E77        ; branch if no match
00362C  1               
00362C  1  A5 94                LDA     <Varnm2         ; else get this array name second byte
00362E  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array name second byte
003630  1  F0 16                BEQ     LAB_1E8D        ; array found so branch
003632  1               
003632  1               ; no match
003632  1               LAB_1E77:
003632  1  C8                   INY                     ; increment index
003633  1  B1 AA                LDA     (<Astrtl),Y     ; get array size low byte
003635  1  18                   CLC                     ; clear carry for add
003636  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
003638  1  AA                   TAX                     ; copy low byte to X
003639  1  C8                   INY                     ; increment index
00363A  1  B1 AA                LDA     (<Astrtl),Y     ; get array size high byte
00363C  1  65 AB                ADC     <Astrth         ; add array mem pointer high byte
00363E  1  90 D7                BCC     LAB_1E5C        ; if no overflow go check next array
003640  1               ; do array bounds error
003640  1               
003640  1               LAB_1E85:
003640  1  A2 10                LDX     #$10            ; error code $10 ("Array bounds" error)
003642  1  2C                   .BYTE   $2C             ; makes next bit BIT LAB_08A2
003643  1               
003643  1               ; do function call error
003643  1               
003643  1               LAB_FCER:
003643  1  A2 08                LDX     #$08            ; error code $08 ("Function call" error)
003645  1               LAB_1E8A:
003645  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
003648  1               
003648  1               ; found array, are we trying to dimension it?
003648  1               LAB_1E8D:
003648  1  A2 12                LDX     #$12            ; set error $12 ("Double dimension" error)
00364A  1  A5 5E                LDA     <Defdim         ; get DIM flag
00364C  1  D0 F7                BNE     LAB_1E8A        ; if we are trying to dimension it do error #X, then warm
00364E  1               ; start
00364E  1               
00364E  1               ; found the array and we're not dimensioning it so we must find an element in it
00364E  1               
00364E  1  20 A0 35             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
003651  1               ; (<Astrtl,<Astrth points to start of array)
003651  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
003653  1  A0 04                LDY     #$04            ; set index to array's # of dimensions
003655  1  D1 AA                CMP     (<Astrtl),Y     ; compare with no of dimensions
003657  1  D0 E7                BNE     LAB_1E85        ; if wrong do array bounds error, could do "Wrong
003659  1               ; dimensions" error here .. if we want a different
003659  1               ; error message
003659  1               
003659  1  4C DF 36             JMP     LAB_1F28        ; found array so go get element
00365C  1               ; (could jump to LAB_1F28 as all LAB_1F24 does is take
00365C  1               ; <Dimcnt and save it at (<Astrtl),Y which is already the
00365C  1               ; same or we would have taken the BNE)
00365C  1               
00365C  1               ; array not found, so build it
00365C  1               LAB_1EA1:
00365C  1  20 A0 35             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
00365F  1               ; (<Astrtl,<Astrth points to start of array)
00365F  1  20 6F 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
003662  1               ; addr to check is in AY (low/high)
003662  1  A0 00                LDY     #$00            ; clear Y (don't need to clear A)
003664  1  84 BB                STY     <Aspth          ; clear array data size high byte
003666  1  A5 93                LDA     <Varnm1         ; get variable name 1st byte
003668  1  91 AA                STA     (<Astrtl),Y     ; save array name 1st byte
00366A  1  C8                   INY                     ; increment index
00366B  1  A5 94                LDA     <Varnm2         ; get variable name 2nd byte
00366D  1  91 AA                STA     (<Astrtl),Y     ; save array name 2nd byte
00366F  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
003671  1  A0 04                LDY     #$04            ; index to dimension count
003673  1  84 BA                STY     <Asptl          ; set array data size low byte (four bytes per element)
003675  1  91 AA                STA     (<Astrtl),Y     ; set array's dimensions count
003677  1               
003677  1               ; now calculate the size of the data space for the array
003677  1  18                   CLC                     ; clear carry for add (clear on subsequent loops)
003678  1               LAB_1EC0:
003678  1  A2 0B                LDX     #$0B            ; set default dimension value low byte
00367A  1  A9 00                LDA     #$00            ; set default dimension value high byte
00367C  1  24 5E                BIT     <Defdim         ; test default DIM flag
00367E  1  50 07                BVC     LAB_1ED0        ; branch if b6 of <Defdim is clear
003680  1               
003680  1  68                   PLA                     ; else pull dimension value low byte
003681  1  69 01                ADC     #$01            ; +1 (allow for zeroeth element)
003683  1  AA                   TAX                     ; copy low byte to X
003684  1  68                   PLA                     ; pull dimension value high byte
003685  1  69 00                ADC     #$00            ; add carry from low byte
003687  1               
003687  1               LAB_1ED0:
003687  1  C8                   INY                     ; index to dimension value high byte
003688  1  91 AA                STA     (<Astrtl),Y     ; save dimension value high byte
00368A  1  C8                   INY                     ; index to dimension value high byte
00368B  1  8A                   TXA                     ; get dimension value low byte
00368C  1  91 AA                STA     (<Astrtl),Y     ; save dimension value low byte
00368E  1  20 2E 37             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
003691  1  86 BA                STX     <Asptl          ; save array data size low byte
003693  1  85 BB                STA     <Aspth          ; save array data size high byte
003695  1  A4 71                LDY     <ut1_pl         ; restore index (saved by subroutine)
003697  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
003699  1  D0 DD                BNE     LAB_1EC0        ; loop while not = 0
00369B  1               
00369B  1  65 A5                ADC     <Adatah         ; add size high byte to first element high byte
00369D  1               ; (carry is always clear here)
00369D  1  B0 5D                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
00369F  1               
00369F  1  85 A5                STA     <Adatah         ; save end of array high byte
0036A1  1  A8                   TAY                     ; copy end high byte to Y
0036A2  1  8A                   TXA                     ; get array size low byte
0036A3  1  65 A4                ADC     <Adatal         ; add array start low byte
0036A5  1  90 03                BCC     LAB_1EF3        ; branch if no carry
0036A7  1               
0036A7  1  C8                   INY                     ; else increment end of array high byte
0036A8  1  F0 52                BEQ     LAB_1F45        ; if overflow go do "Out of memory" error
0036AA  1               
0036AA  1               ; set-up mostly complete, now zero the array
0036AA  1               LAB_1EF3:
0036AA  1  20 6F 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
0036AD  1               ; addr to check is in AY (low/high)
0036AD  1  85 7F                STA     <Earryl         ; save array mem end low byte
0036AF  1  84 80                STY     <Earryh         ; save array mem end high byte
0036B1  1  A9 00                LDA     #$00            ; clear byte for array clear
0036B3  1  E6 BB                INC     <Aspth          ; increment array size high byte (now block count)
0036B5  1  A4 BA                LDY     <Asptl          ; get array size low byte (now index to block)
0036B7  1  F0 05                BEQ     LAB_1F07        ; branch if low byte = $00
0036B9  1               
0036B9  1               LAB_1F02:
0036B9  1  88                   DEY                     ; decrement index (do 0 to n-1)
0036BA  1  91 A4                STA     (<Adatal),Y     ; zero byte
0036BC  1  D0 FB                BNE     LAB_1F02        ; loop until this block done
0036BE  1               
0036BE  1               LAB_1F07:
0036BE  1  C6 A5                DEC     <Adatah         ; decrement array pointer high byte
0036C0  1  C6 BB                DEC     <Aspth          ; decrement block count high byte
0036C2  1  D0 F5                BNE     LAB_1F02        ; loop until all blocks done
0036C4  1               
0036C4  1  E6 A5                INC     <Adatah         ; correct for last loop
0036C6  1  38                   SEC                     ; set carry for subtract
0036C7  1  A0 02                LDY     #$02            ; index to array size low byte
0036C9  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
0036CB  1  E5 AA                SBC     <Astrtl         ; subtract array start low byte
0036CD  1  91 AA                STA     (<Astrtl),Y     ; save array size low byte
0036CF  1  C8                   INY                     ; index to array size high byte
0036D0  1  A5 80                LDA     <Earryh         ; get array mem end high byte
0036D2  1  E5 AB                SBC     <Astrth         ; subtract array start high byte
0036D4  1  91 AA                STA     (<Astrtl),Y     ; save array size high byte
0036D6  1  A5 5E                LDA     <Defdim         ; get default DIM flag
0036D8  1  D0 53                BNE     LAB_1F7B        ; exit (RET) if this was a DIM command
0036DA  1               ; else, find element
0036DA  1  C8                   INY                     ; index to # of dimensions
0036DB  1               
0036DB  1               LAB_1F24:
0036DB  1  B1 AA                LDA     (<Astrtl),Y     ; get array's dimension count
0036DD  1  85 5D                STA     <Dimcnt         ; save it
0036DF  1               
0036DF  1               ; we have found, or built, the array. now we need to find the element
0036DF  1               
0036DF  1               LAB_1F28:
0036DF  1  A9 00                LDA     #$00            ; clear byte
0036E1  1  85 BA                STA     <Asptl          ; clear array data pointer low byte
0036E3  1               LAB_1F2C:
0036E3  1  85 BB                STA     <Aspth          ; save array data pointer high byte
0036E5  1  C8                   INY                     ; increment index (point to array bound high byte)
0036E6  1  68                   PLA                     ; pull array index low byte
0036E7  1  AA                   TAX                     ; copy to X
0036E8  1  85 AE                STA     <FAC1_2         ; save index low byte to FAC1 mantissa2
0036EA  1  68                   PLA                     ; pull array index high byte
0036EB  1  85 AF                STA     <FAC1_3         ; save index high byte to FAC1 mantissa3
0036ED  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound high byte
0036EF  1  90 0E                BCC     LAB_1F48        ; branch if within bounds
0036F1  1               
0036F1  1  D0 06                BNE     LAB_1F42        ; if outside bounds do array bounds error
0036F3  1               
0036F3  1               ; else high byte was = so test low bytes
0036F3  1  C8                   INY                     ; index to array bound low byte
0036F4  1  8A                   TXA                     ; get array index low byte
0036F5  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound low byte
0036F7  1  90 07                BCC     LAB_1F49        ; branch if within bounds
0036F9  1               
0036F9  1               LAB_1F42:
0036F9  1  4C 40 36             JMP     LAB_1E85        ; else do array bounds error
0036FC  1               
0036FC  1               LAB_1F45:
0036FC  1  4C 9E 26             JMP     LAB_OMER        ; do "Out of memory" error then warm start
0036FF  1               
0036FF  1               LAB_1F48:
0036FF  1  C8                   INY                     ; index to array bound low byte
003700  1               LAB_1F49:
003700  1  A5 BB                LDA     <Aspth          ; get array data pointer high byte
003702  1  05 BA                ORA     <Asptl          ; OR with array data pointer low byte
003704  1  F0 0A                BEQ     LAB_1F5A        ; branch if array data pointer = null (skip multiply)
003706  1               
003706  1  20 2E 37             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
003709  1  8A                   TXA                     ; get result low byte
00370A  1  65 AE                ADC     <FAC1_2         ; add index low byte from FAC1 mantissa2
00370C  1  AA                   TAX                     ; save result low byte
00370D  1  98                   TYA                     ; get result high byte
00370E  1  A4 71                LDY     <ut1_pl         ; restore index
003710  1               LAB_1F5A:
003710  1  65 AF                ADC     <FAC1_3         ; add index high byte from FAC1 mantissa3
003712  1  86 BA                STX     <Asptl          ; save array data pointer low byte
003714  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
003716  1  D0 CB                BNE     LAB_1F2C        ; loop if dimensions still to do
003718  1               
003718  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 2
00371A  1  2A                   ROL     A               ; array data pointer high byte * 2
00371B  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 4
00371D  1  2A                   ROL     A               ; array data pointer high byte * 4
00371E  1  A8                   TAY                     ; copy high byte
00371F  1  A5 BA                LDA     <Asptl          ; get low byte
003721  1  65 A4                ADC     <Adatal         ; add array data start pointer low byte
003723  1  85 95                STA     <Cvaral         ; save as current var address low byte
003725  1  98                   TYA                     ; get high byte back
003726  1  65 A5                ADC     <Adatah         ; add array data start pointer high byte
003728  1  85 96                STA     <Cvarah         ; save as current var address high byte
00372A  1  A8                   TAY                     ; copy high byte to Y
00372B  1  A5 95                LDA     <Cvaral         ; get current var address low byte
00372D  1               LAB_1F7B:
00372D  1  60                   RTS
00372E  1               
00372E  1               ; does XY = (<Astrtl),Y * (<Asptl)
00372E  1               
00372E  1               LAB_1F7C:
00372E  1  84 71                STY     <ut1_pl         ; save index
003730  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size low byte
003732  1  85 76                STA     <dims_l         ; save dimension size low byte
003734  1  88                   DEY                     ; decrement index
003735  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size high byte
003737  1  85 77                STA     <dims_h         ; save dimension size high byte
003739  1               
003739  1  A9 10                LDA     #$10            ; count = $10 (16 bit multiply)
00373B  1  85 A8                STA     <numbit         ; save bit count
00373D  1  A2 00                LDX     #$00            ; clear result low byte
00373F  1  A0 00                LDY     #$00            ; clear result high byte
003741  1               LAB_1F8F:
003741  1  8A                   TXA                     ; get result low byte
003742  1  0A                   ASL     A               ; *2
003743  1  AA                   TAX                     ; save result low byte
003744  1  98                   TYA                     ; get result high byte
003745  1  2A                   ROL     A               ; *2
003746  1  A8                   TAY                     ; save result high byte
003747  1  B0 B3                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
003749  1               
003749  1  06 BA                ASL     <Asptl          ; shift multiplier low byte
00374B  1  26 BB                ROL     <Aspth          ; shift multiplier high byte
00374D  1  90 11                BCC     LAB_1FA8        ; skip add if no carry
00374F  1               
00374F  1  18                   CLC                     ; else clear carry for add
003750  1  8A                   TXA                     ; get result low byte
003751  1  65 76                ADC     <dims_l         ; add dimension size low byte
003753  1  AA                   TAX                     ; save result low byte
003754  1  98                   TYA                     ; get result high byte
003755  1  65 77                ADC     <dims_h         ; add dimension size high byte
003757  1  A8                   TAY                     ; save result high byte
003758  1  B0 03                BCS     LAB_1F45_1      ; if overflow go do "Out of memory" error
00375A  1  4C 60 37             JMP     LAB_1FA8
00375D  1               LAB_1F45_1:
00375D  1  4C FC 36             JMP     LAB_1F45
003760  1               LAB_1FA8:
003760  1  C6 A8                DEC     <numbit         ; decrement bit count
003762  1  D0 DD                BNE     LAB_1F8F        ; loop until all done
003764  1               
003764  1  60                   RTS
003765  1               
003765  1               ; perform FRE()
003765  1               
003765  1               LAB_FRE:
003765  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003767  1  10 03                BPL     LAB_1FB4        ; branch if numeric
003769  1               
003769  1  20 D1 3B             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
00376C  1               ; space returns with A = length, X=$71=pointer low byte,
00376C  1               ; Y=$72=pointer high byte
00376C  1               
00376C  1               ; FRE(n) was numeric so do this
00376C  1               LAB_1FB4:
00376C  1  20 A7 39             JSR     LAB_GARB        ; go do garbage collection
00376F  1  38                   SEC                     ; set carry for subtract
003770  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003772  1  E5 7F                SBC     <Earryl         ; subtract array mem end low byte
003774  1  A8                   TAY                     ; copy result to Y
003775  1  A5 82                LDA     <Sstorh         ; get bottom of string space high byte
003777  1  E5 80                SBC     <Earryh         ; subtract array mem end high byte
003779  1               
003779  1               ; save and convert integer AY to FAC1
003779  1               
003779  1               LAB_AYFC:
003779  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00377B  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00377D  1  84 AE                STY     <FAC1_2         ; save FAC1 mantissa2
00377F  1  A2 90                LDX     #$90            ; set exponent=2^16 (integer)
003781  1  4C 5D 44             JMP     LAB_27E3        ; set exp=X, clear <FAC1_3, normalise and return
003784  1               
003784  1               ; perform POS()
003784  1               
003784  1               LAB_POS:
003784  1  A4 0E                LDY     <TPos           ; get terminal position
003786  1               
003786  1               ; convert Y to byte in FAC1
003786  1               
003786  1               LAB_1FD0:
003786  1  A9 00                LDA     #$00            ; clear high byte
003788  1  F0 EF                BEQ     LAB_AYFC        ; always save and convert integer AY to FAC1 and return
00378A  1               
00378A  1               ; check not Direct (used by DEF and INPUT)
00378A  1               
00378A  1               LAB_CKRN:
00378A  1  A6 88                LDX     <Clineh         ; get current line high byte
00378C  1  E8                   INX                     ; increment it
00378D  1  F0 03                BEQ     LAB_1FD9
00378F  1  4C 2D 37             JMP     LAB_1F7B        ; return if can continue not direct mode
003792  1               
003792  1               ; else do illegal direct error
003792  1               LAB_1FD9:
003792  1  A2 16                LDX     #$16            ; error code $16 ("Illegal direct" error)
003794  1               LAB_1FDB:
003794  1  4C A0 26             JMP     LAB_XERR        ; go do error #X, then warm start
003797  1               
003797  1               ; perform DEF
003797  1               
003797  1               LAB_DEF:
003797  1  20 C8 37             JSR     LAB_200B        ; check FNx syntax
00379A  1  85 9C                STA     <func_l         ; save function pointer low byte
00379C  1  84 9D                STY     <func_h         ; save function pointer high byte
00379E  1  20 8A 37             JSR     LAB_CKRN        ; check not Direct (back here if ok)
0037A1  1  20 DC 32             JSR     LAB_1BFE        ; scan for "(" , else do syntax error then warm start
0037A4  1  A9 80                LDA     #$80            ; set flag for FNx
0037A6  1  85 61                STA     <Sufnxf         ; save subscript/FNx flag
0037A8  1  20 BB 34             JSR     LAB_GVAR        ; get (var) address
0037AB  1  20 AD 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0037AE  1  20 CF 32             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0037B1  1  A9 D3                LDA     #TK_EQUAL       ; get = token
0037B3  1  20 D1 32             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0037B6  1  A5 96                LDA     <Cvarah         ; get current var address high byte
0037B8  1  48                   PHA                     ; push it
0037B9  1  A5 95                LDA     <Cvaral         ; get current var address low byte
0037BB  1  48                   PHA                     ; push it
0037BC  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0037BE  1  48                   PHA                     ; push it
0037BF  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0037C1  1  48                   PHA                     ; push it
0037C2  1  20 17 2C             JSR     LAB_DATA        ; go perform DATA
0037C5  1  4C 74 38             JMP     LAB_207A        ; put execute pointer and variable pointer into function
0037C8  1               ; and return
0037C8  1               
0037C8  1               ; check FNx syntax
0037C8  1               
0037C8  1               LAB_200B:
0037C8  1  A9 C0                LDA     #TK_FN          ; get FN" token
0037CA  1  20 D1 32             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
0037CD  1               ; return character after A
0037CD  1  09 80                ORA     #$80            ; set FN flag bit
0037CF  1  85 61                STA     <Sufnxf         ; save FN flag so array variable test fails
0037D1  1  20 C3 34             JSR     LAB_1D12        ; search for FN variable
0037D4  1  4C AD 31             JMP     LAB_CTNM        ; check if source is numeric and return, else do type
0037D7  1               ; mismatch
0037D7  1               
0037D7  1               ; Evaluate FNx
0037D7  1               LAB_201E:
0037D7  1  20 C8 37             JSR     LAB_200B        ; check FNx syntax
0037DA  1  48                   PHA                     ; push function pointer low byte
0037DB  1  98                   TYA                     ; copy function pointer high byte
0037DC  1  48                   PHA                     ; push function pointer high byte
0037DD  1  20 DC 32             JSR     LAB_1BFE        ; scan for "(", else do syntax error then warm start
0037E0  1  20 BE 31             JSR     LAB_EVEX        ; evaluate expression
0037E3  1  20 CF 32             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
0037E6  1  20 AD 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0037E9  1  68                   PLA                     ; pop function pointer high byte
0037EA  1  85 9D                STA     <func_h         ; restore it
0037EC  1  68                   PLA                     ; pop function pointer low byte
0037ED  1  85 9C                STA     <func_l         ; restore it
0037EF  1  A2 20                LDX     #$20            ; error code $20 ("Undefined function" error)
0037F1  1  A0 03                LDY     #$03            ; index to variable pointer high byte
0037F3  1  B1 9C                LDA     (<func_l),Y     ; get variable pointer high byte
0037F5  1  F0 9D                BEQ     LAB_1FDB        ; if zero go do undefined function error
0037F7  1               
0037F7  1  85 96                STA     <Cvarah         ; save variable address high byte
0037F9  1  88                   DEY                     ; index to variable address low byte
0037FA  1  B1 9C                LDA     (<func_l),Y     ; get variable address low byte
0037FC  1  85 95                STA     <Cvaral         ; save variable address low byte
0037FE  1  AA                   TAX                     ; copy address low byte
0037FF  1               
0037FF  1               ; now stack the function variable value before use
0037FF  1  C8                   INY                     ; index to mantissa_3
003800  1               LAB_2043:
003800  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from variable
003804  1  B5 95 C9 00  
003808  1  D0 04 A2 00  
003816  1  48                   PHA                     ; stack it
003817  1  88                   DEY                     ; decrement index
003818  1  10 E6                BPL     LAB_2043        ; loop until variable stacked
00381A  1               
00381A  1  A4 96                LDY     <Cvarah         ; get variable address high byte
00381C  1  20 B2 43             JSR     LAB_2778        ; pack FAC1 (function expression value) into (XY)
00381F  1               ; (function variable), return Y=0, always
00381F  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
003821  1  48                   PHA                     ; push it
003822  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
003824  1  48                   PHA                     ; push it
003825  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer low byte
003829  1  B5 9C C9 00  
00382D  1  D0 04 A2 00  
00383B  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
00383D  1  C8                   INY                     ; index to high byte
00383E  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer high byte
003842  1  B5 9C C9 00  
003846  1  D0 04 A2 00  
003854  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003856  1  A5 96                LDA     <Cvarah         ; get variable address high byte
003858  1  48                   PHA                     ; push it
003859  1  A5 95                LDA     <Cvaral         ; get variable address low byte
00385B  1  48                   PHA                     ; push it
00385C  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00385F  1               ; else do type mismatch
00385F  1  68                   PLA                     ; pull variable address low byte
003860  1  85 9C                STA     <func_l         ; save variable address low byte
003862  1  68                   PLA                     ; pull variable address high byte
003863  1  85 9D                STA     <func_h         ; save variable address high byte
003865  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003869  1  F0 03                BEQ     LAB_2074        ; branch if null (should be [EOL] marker)
00386B  1               
00386B  1  4C E4 32             JMP     LAB_SNER        ; else syntax error then warm start
00386E  1               
00386E  1               ; restore <Bpntrl,<Bpntrh and function variable from stack
00386E  1               
00386E  1               LAB_2074:
00386E  1  68                   PLA                     ; pull BASIC execute pointer low byte
00386F  1  85 C3                STA     <Bpntrl         ; restore BASIC execute pointer low byte
003871  1  68                   PLA                     ; pull BASIC execute pointer high byte
003872  1  85 C4                STA     <Bpntrh         ; restore BASIC execute pointer high byte
003874  1               
003874  1               ; put execute pointer and variable pointer into function
003874  1               
003874  1               LAB_207A:
003874  1  A0 00                LDY     #$00            ; clear index
003876  1  68                   PLA                     ; pull BASIC execute pointer low byte
003877  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
00387B  1  01 B5 9C C9  
00387F  1  00 D0 04 A2  
00388D  1  C8                   INY                     ; increment index
00388E  1  68                   PLA                     ; pull BASIC execute pointer high byte
00388F  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
003893  1  01 B5 9C C9  
003897  1  00 D0 04 A2  
0038A5  1  C8                   INY                     ; increment index
0038A6  1  68                   PLA                     ; pull current var address low byte
0038A7  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0038AB  1  01 B5 9C C9  
0038AF  1  00 D0 04 A2  
0038BD  1  C8                   INY                     ; increment index
0038BE  1  68                   PLA                     ; pull current var address high byte
0038BF  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0038C3  1  01 B5 9C C9  
0038C7  1  00 D0 04 A2  
0038D5  1  60                   RTS
0038D6  1               
0038D6  1               ; perform STR$()
0038D6  1               
0038D6  1               LAB_STRS:
0038D6  1  20 AD 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0038D9  1  20 72 46             JSR     LAB_296E        ; convert FAC1 to string
0038DC  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
0038DE  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
0038E0  1  F0 12                BEQ     LAB_20AE        ; print null terminated string to <Sutill/<Sutilh
0038E2  1               
0038E2  1               ; Do string vector
0038E2  1               ; copy <des_pl/h to <des_2l/h and make string space A bytes long
0038E2  1               
0038E2  1               LAB_209C:
0038E2  1  A6 AE                LDX     <des_pl         ; get descriptor pointer low byte
0038E4  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
0038E6  1  86 9E                STX     <des_2l         ; save descriptor pointer low byte
0038E8  1  84 9F                STY     <des_2h         ; save descriptor pointer high byte
0038EA  1               
0038EA  1               ; make string space A bytes long
0038EA  1               ; A=length, X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
0038EA  1               
0038EA  1               LAB_MSSP:
0038EA  1  20 75 39             JSR     LAB_2115        ; make space in string memory for string A long
0038ED  1               ; return X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
0038ED  1  86 AD                STX     <str_pl         ; save string pointer low byte
0038EF  1  84 AE                STY     <str_ph         ; save string pointer high byte
0038F1  1  85 AC                STA     <str_ln         ; save length
0038F3  1  60                   RTS
0038F4  1               
0038F4  1               ; Scan, set up string
0038F4  1               ; print " terminated string to <Sutill/<Sutilh
0038F4  1               
0038F4  1               LAB_20AE:
0038F4  1  A2 22                LDX     #$22            ; set terminator to "
0038F6  1  86 5B                STX     <Srchc          ; set search character (terminator 1)
0038F8  1  86 5C                STX     <Asrch          ; set terminator 2
0038FA  1               
0038FA  1               ; print [<Srchc] or [<Asrch] terminated string to <Sutill/<Sutilh
0038FA  1               ; source is AY
0038FA  1               
0038FA  1               LAB_20B4:
0038FA  1  85 B8                STA     <ssptr_l        ; store string start low byte
0038FC  1  84 B9                STY     <ssptr_h        ; store string start high byte
0038FE  1  85 AD                STA     <str_pl         ; save string pointer low byte
003900  1  84 AE                STY     <str_ph         ; save string pointer high byte
003902  1  A0 FF                LDY     #$FF            ; set length to -1
003904  1               LAB_20BE:
003904  1  C8                   INY                     ; increment length
003905  1               
003905  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get byte from string
003909  1  B5 B8 C9 00  
00390D  1  D0 04 A2 00  
00391B  1  C9 00                CMP     #$00
00391D  1  F0 0C                BEQ     LAB_20CF        ; exit loop if null byte [EOS]
00391F  1               
00391F  1  C5 5B                CMP     <Srchc          ; compare with search character (terminator 1)
003921  1  F0 04                BEQ     LAB_20CB        ; branch if terminator
003923  1               
003923  1  C5 5C                CMP     <Asrch          ; compare with terminator 2
003925  1  D0 DD                BNE     LAB_20BE        ; loop if not terminator 2
003927  1               
003927  1               LAB_20CB:
003927  1  C9 22                CMP     #$22            ; compare with "
003929  1  F0 01                BEQ     LAB_20D0        ; branch if " (carry set if = !)
00392B  1               
00392B  1               LAB_20CF:
00392B  1  18                   CLC                     ; clear carry for add (only if [EOL] terminated string)
00392C  1               LAB_20D0:
00392C  1  84 AC                STY     <str_ln         ; save length in FAC1 exponent
00392E  1  98                   TYA                     ; copy length to A
00392F  1  65 B8                ADC     <ssptr_l        ; add string start low byte
003931  1  85 BA                STA     <Sendl          ; save string end low byte
003933  1  A6 B9                LDX     <ssptr_h        ; get string start high byte
003935  1  90 01                BCC     LAB_20DC        ; branch if no low byte overflow
003937  1               
003937  1  E8                   INX                     ; else increment high byte
003938  1               LAB_20DC:
003938  1  86 BB                STX     <Sendh          ; save string end high byte
00393A  1  A5 B9                LDA     <ssptr_h        ; get string start high byte
00393C  1               
00393C  1               
00393C  1               ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
00393C  1               ; *** replace
00393C  1               ;      CMP	#((BASICBEGIN&$FF00)>>8)  ; compare with BASICBEGIN, FORMERLY (>Ram_base) start of program memory
00393C  1               ;      BCS   LAB_RTST          ; branch if not in utility area
00393C  1               ; *** with
00393C  1  F0 04                BEQ     LAB_MVST        ; fix STR$() using page zero via LAB_296E
00393E  1  C9 21                CMP     #>Ibuffs        ; compare with location of input buffer page
003940  1  D0 0B                BNE     LAB_RTST        ; branch if not in utility area
003942  1               LAB_MVST:
003942  1               ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
003942  1               
003942  1               
003942  1  98                   TYA                     ; copy length to A
003943  1  20 E2 38             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
003946  1               ; long
003946  1  A6 B8                LDX     <ssptr_l        ; get string start low byte
003948  1  A4 B9                LDY     <ssptr_h        ; get string start high byte
00394A  1  20 8A 3B             JSR     LAB_2298        ; store string A bytes long from XY to (<Sutill)
00394D  1               ; check for space on descriptor stack then ..
00394D  1               ; put string address and length on descriptor stack and update stack pointers
00394D  1               
00394D  1               LAB_RTST:
00394D  1  A6 65                LDX     <next_s         ; get string stack pointer
00394F  1  E0 71                CPX     #<des_sk+$09    ; compare with max+1
003951  1  D0 05                BNE     LAB_20F8        ; branch if space on string stack
003953  1               
003953  1               ; else do string too complex error
003953  1  A2 1C                LDX     #$1C            ; error code $1C ("String too complex" error)
003955  1               LAB_20F5:
003955  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
003958  1               
003958  1               ; put string address and length on descriptor stack and update stack pointers
003958  1               
003958  1               LAB_20F8:
003958  1  A5 AC                LDA     <str_ln         ; get string length
00395A  1  95 00                STA     <PLUS_0,X       ; put on string stack
00395C  1  A5 AD                LDA     <str_pl         ; get string pointer low byte
00395E  1  95 01                STA     <PLUS_1,X       ; put on string stack
003960  1  A5 AE                LDA     <str_ph         ; get string pointer high byte
003962  1  95 02                STA     <PLUS_2,X       ; put on string stack
003964  1  A0 00                LDY     #$00            ; clear Y
003966  1  86 AE                STX     <des_pl         ; save string descriptor pointer low byte
003968  1  84 AF                STY     <des_ph         ; save string descriptor pointer high byte (always $00)
00396A  1  88                   DEY                     ; Y = $FF
00396B  1  84 5F                STY     <Dtypef         ; save data type flag, $FF=string
00396D  1  86 66                STX     <last_sl        ; save old stack pointer (current top item)
00396F  1  E8                   INX                     ; update stack pointer
003970  1  E8                   INX                     ; update stack pointer
003971  1  E8                   INX                     ; update stack pointer
003972  1  86 65                STX     <next_s         ; save new top item value
003974  1  60                   RTS
003975  1               
003975  1               ; Build descriptor
003975  1               ; make space in string memory for string A long
003975  1               ; return X=<Sutill=ptr low byte, Y=<Sutill=ptr high byte
003975  1               
003975  1               LAB_2115:
003975  1  46 60                LSR     <Gclctd         ; clear garbage collected flag (b7)
003977  1               
003977  1               ; make space for string A long
003977  1               LAB_2117:
003977  1  48                   PHA                     ; save string length
003978  1  49 FF                EOR     #$FF            ; complement it
00397A  1  38                   SEC                     ; set carry for subtract (twos comp add)
00397B  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte (subtract length)
00397D  1  A4 82                LDY     <Sstorh         ; get bottom of string space high byte
00397F  1  B0 01                BCS     LAB_2122        ; skip decrement if no underflow
003981  1               
003981  1  88                   DEY                     ; decrement bottom of string space high byte
003982  1               LAB_2122:
003982  1  C4 80                CPY     <Earryh         ; compare with array mem end high byte
003984  1  90 11                BCC     LAB_2137        ; do out of memory error if less
003986  1               
003986  1  D0 04                BNE     LAB_212C        ; if not = skip next test
003988  1               
003988  1  C5 7F                CMP     <Earryl         ; compare with array mem end low byte
00398A  1  90 0B                BCC     LAB_2137        ; do out of memory error if less
00398C  1               
00398C  1               LAB_212C:
00398C  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
00398E  1  84 82                STY     <Sstorh         ; save bottom of string space high byte
003990  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003992  1  84 84                STY     <Sutilh         ; save string utility ptr high byte
003994  1  AA                   TAX                     ; copy low byte to X
003995  1  68                   PLA                     ; get string length back
003996  1  60                   RTS
003997  1               
003997  1               LAB_2137:
003997  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
003999  1  A5 60                LDA     <Gclctd         ; get garbage collected flag
00399B  1  30 B8                BMI     LAB_20F5        ; if set then do error code X
00399D  1               
00399D  1  20 A7 39             JSR     LAB_GARB        ; else go do garbage collection
0039A0  1  A9 80                LDA     #$80            ; flag for garbage collected
0039A2  1  85 60                STA     <Gclctd         ; set garbage collected flag
0039A4  1  68                   PLA                     ; pull length
0039A5  1  D0 D0                BNE     LAB_2117        ; go try again (loop always, length should never be = $00)
0039A7  1               
0039A7  1               ; garbage collection routine
0039A7  1               
0039A7  1               LAB_GARB:
0039A7  1  A6 85                LDX     <Ememl          ; get end of mem low byte
0039A9  1  A5 86                LDA     <Ememh          ; get end of mem high byte
0039AB  1               
0039AB  1               ; re-run routine from last ending
0039AB  1               
0039AB  1               LAB_214B:
0039AB  1  86 81                STX     <Sstorl         ; set string storage low byte
0039AD  1  85 82                STA     <Sstorh         ; set string storage high byte
0039AF  1  A0 00                LDY     #$00            ; clear index
0039B1  1  84 9D                STY     <garb_h         ; clear working pointer high byte (flag no strings to move)
0039B3  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
0039B5  1  A6 80                LDX     <Earryh         ; get array mem end high byte
0039B7  1  85 AA                STA     <Histrl         ; save as highest string low byte
0039B9  1  86 AB                STX     <Histrh         ; save as highest string high byte
0039BB  1  A9 68                LDA     #<des_sk        ; set descriptor stack pointer
0039BD  1  85 71                STA     <ut1_pl         ; save descriptor stack pointer low byte
0039BF  1  84 72                STY     <ut1_ph         ; save descriptor stack pointer high byte ($00)
0039C1  1               LAB_2161:
0039C1  1  C5 65                CMP     <next_s         ; compare with descriptor stack pointer
0039C3  1  F0 05                BEQ     LAB_216A        ; branch if =
0039C5  1               
0039C5  1  20 2B 3A             JSR     LAB_21D7        ; go garbage collect descriptor stack
0039C8  1  F0 F7                BEQ     LAB_2161        ; loop always
0039CA  1               
0039CA  1               ; done stacked strings, now do string vars
0039CA  1               LAB_216A:
0039CA  1  06 A0                ASL     <g_step         ; set step size = $06
0039CC  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
0039CE  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
0039D0  1  85 71                STA     <ut1_pl         ; save as pointer low byte
0039D2  1  86 72                STX     <ut1_ph         ; save as pointer high byte
0039D4  1               LAB_2176:
0039D4  1  E4 7E                CPX     <Sarryh         ; compare start of arrays high byte
0039D6  1  D0 04                BNE     LAB_217E        ; branch if no high byte match
0039D8  1               
0039D8  1  C5 7D                CMP     <Sarryl         ; else compare start of arrays low byte
0039DA  1  F0 05                BEQ     LAB_2183        ; branch if = var mem end
0039DC  1               
0039DC  1               LAB_217E:
0039DC  1  20 25 3A             JSR     LAB_21D1        ; go garbage collect strings
0039DF  1  F0 F3                BEQ     LAB_2176        ; loop always
0039E1  1               
0039E1  1               ; done string vars, now do string arrays
0039E1  1               LAB_2183:
0039E1  1  85 A4                STA     <Nbendl         ; save start of arrays low byte as working pointer
0039E3  1  86 A5                STX     <Nbendh         ; save start of arrays high byte as working pointer
0039E5  1  A9 04                LDA     #$04            ; set step size
0039E7  1  85 A0                STA     <g_step         ; save step size
0039E9  1               LAB_218B:
0039E9  1  A5 A4                LDA     <Nbendl         ; get pointer low byte
0039EB  1  A6 A5                LDX     <Nbendh         ; get pointer high byte
0039ED  1               LAB_218F:
0039ED  1  E4 80                CPX     <Earryh         ; compare with array mem end high byte
0039EF  1  D0 04                BNE     LAB_219A        ; branch if not at end
0039F1  1               
0039F1  1  C5 7F                CMP     <Earryl         ; else compare with array mem end low byte
0039F3  1  F0 75                BEQ     LAB_2216        ; tidy up and exit if at end
0039F5  1               
0039F5  1               LAB_219A:
0039F5  1  85 71                STA     <ut1_pl         ; save pointer low byte
0039F7  1  86 72                STX     <ut1_ph         ; save pointer high byte
0039F9  1  A0 02                LDY     #$02            ; set index
0039FB  1  B1 71                LDA     (<ut1_pl),Y     ; get array size low byte
0039FD  1  65 A4                ADC     <Nbendl         ; add start of this array low byte
0039FF  1  85 A4                STA     <Nbendl         ; save start of next array low byte
003A01  1  C8                   INY                     ; increment index
003A02  1  B1 71                LDA     (<ut1_pl),Y     ; get array size high byte
003A04  1  65 A5                ADC     <Nbendh         ; add start of this array high byte
003A06  1  85 A5                STA     <Nbendh         ; save start of next array high byte
003A08  1  A0 01                LDY     #$01            ; set index
003A0A  1  B1 71                LDA     (<ut1_pl),Y     ; get name second byte
003A0C  1  10 DB                BPL     LAB_218B        ; skip if not string array
003A0E  1               
003A0E  1               ; was string array so ..
003A0E  1               
003A0E  1  A0 04                LDY     #$04            ; set index
003A10  1  B1 71                LDA     (<ut1_pl),Y     ; get # of dimensions
003A12  1  0A                   ASL     A               ; *2
003A13  1  69 05                ADC     #$05            ; +5 (array header size)
003A15  1  20 5D 3A             JSR     LAB_2208        ; go set up for first element
003A18  1               LAB_21C4:
003A18  1  E4 A5                CPX     <Nbendh         ; compare with start of next array high byte
003A1A  1  D0 04                BNE     LAB_21CC        ; branch if <> (go do this array)
003A1C  1               
003A1C  1  C5 A4                CMP     <Nbendl         ; else compare element pointer low byte with next array
003A1E  1               ; low byte
003A1E  1  F0 CD                BEQ     LAB_218F        ; if equal then go do next array
003A20  1               
003A20  1               LAB_21CC:
003A20  1  20 2B 3A             JSR     LAB_21D7        ; go defrag array strings
003A23  1  F0 F3                BEQ     LAB_21C4        ; go do next array string (loop always)
003A25  1               
003A25  1               ; defrag string variables
003A25  1               ; enter with XA = variable pointer
003A25  1               ; return with XA = next variable pointer
003A25  1               
003A25  1               LAB_21D1:
003A25  1  C8                   INY                     ; increment index (Y was $00)
003A26  1  B1 71                LDA     (<ut1_pl),Y     ; get var name byte 2
003A28  1  10 30                BPL     LAB_2206        ; if not string, step pointer to next var and return
003A2A  1               
003A2A  1  C8                   INY                     ; else increment index
003A2B  1               LAB_21D7:
003A2B  1  B1 71                LDA     (<ut1_pl),Y     ; get string length
003A2D  1  F0 2B                BEQ     LAB_2206        ; if null, step pointer to next string and return
003A2F  1               
003A2F  1  C8                   INY                     ; else increment index
003A30  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer low byte
003A32  1  AA                   TAX                     ; copy to X
003A33  1  C8                   INY                     ; increment index
003A34  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer high byte
003A36  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
003A38  1  90 06                BCC     LAB_21EC        ; branch if less
003A3A  1               
003A3A  1  D0 1E                BNE     LAB_2206        ; if greater, step pointer to next string and return
003A3C  1               
003A3C  1               ; high bytes were = so compare low bytes
003A3C  1  E4 81                CPX     <Sstorl         ; compare bottom of string space low byte
003A3E  1  B0 1A                BCS     LAB_2206        ; if >=, step pointer to next string and return
003A40  1               
003A40  1               ; string pointer is < string storage pointer (pos in mem)
003A40  1               LAB_21EC:
003A40  1  C5 AB                CMP     <Histrh         ; compare to highest string high byte
003A42  1  90 17                BCC     LAB_2207        ; if <, step pointer to next string and return
003A44  1               
003A44  1  D0 04                BNE     LAB_21F6        ; if > update pointers, step to next and return
003A46  1               
003A46  1               ; high bytes were = so compare low bytes
003A46  1  E4 AA                CPX     <Histrl         ; compare to highest string low byte
003A48  1  90 11                BCC     LAB_2207        ; if <, step pointer to next string and return
003A4A  1               
003A4A  1               ; string is in string memory space
003A4A  1               LAB_21F6:
003A4A  1  86 AA                STX     <Histrl         ; save as new highest string low byte
003A4C  1  85 AB                STA     <Histrh         ; save as new highest string high byte
003A4E  1  A5 71                LDA     <ut1_pl         ; get start of vars(descriptors) low byte
003A50  1  A6 72                LDX     <ut1_ph         ; get start of vars(descriptors) high byte
003A52  1  85 9C                STA     <garb_l         ; save as working pointer low byte
003A54  1  86 9D                STX     <garb_h         ; save as working pointer high byte
003A56  1  88                   DEY                     ; decrement index DIFFERS
003A57  1  88                   DEY                     ; decrement index (should point to descriptor start)
003A58  1  84 A2                STY     <g_indx         ; save index pointer
003A5A  1               
003A5A  1               ; step pointer to next string
003A5A  1               LAB_2206:
003A5A  1  18                   CLC                     ; clear carry for add
003A5B  1               LAB_2207:
003A5B  1  A5 A0                LDA     <g_step         ; get step size
003A5D  1               LAB_2208:
003A5D  1  65 71                ADC     <ut1_pl         ; add pointer low byte
003A5F  1  85 71                STA     <ut1_pl         ; save pointer low byte
003A61  1  90 02                BCC     LAB_2211        ; branch if no overflow
003A63  1               
003A63  1  E6 72                INC     <ut1_ph         ; else increment high byte
003A65  1               LAB_2211:
003A65  1  A6 72                LDX     <ut1_ph         ; get pointer high byte
003A67  1  A0 00                LDY     #$00            ; clear Y
003A69  1  60                   RTS
003A6A  1               
003A6A  1               ; search complete, now either exit or set-up and move string
003A6A  1               
003A6A  1               LAB_2216:
003A6A  1  C6 A0                DEC     <g_step         ; decrement step size (now $03 for descriptor stack)
003A6C  1  A6 9D                LDX     <garb_h         ; get string to move high byte
003A6E  1  F0 F5                BEQ     LAB_2211        ; exit if nothing to move
003A70  1               
003A70  1  A4 A2                LDY     <g_indx         ; get index byte back (points to descriptor)
003A72  1  18                   CLC                     ; clear carry for add
003A73  1  8B DA A2 01          LDAINDIRECTY garb_l     ; get string length
003A77  1  B5 9C C9 00  
003A7B  1  D0 04 A2 00  
003A89  1  65 AA                ADC     <Histrl         ; add highest string low byte
003A8B  1  85 A6                STA     <Obendl         ; save old block end low pointer
003A8D  1  A5 AB                LDA     <Histrh         ; get highest string high byte
003A8F  1  69 00                ADC     #$00            ; add any carry
003A91  1  85 A7                STA     <Obendh         ; save old block end high byte
003A93  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003A95  1  A6 82                LDX     <Sstorh         ; get bottom of string space high byte
003A97  1  85 A4                STA     <Nbendl         ; save new block end low byte
003A99  1  86 A5                STX     <Nbendh         ; save new block end high byte
003A9B  1  20 CC 25             JSR     LAB_11D6        ; open up space in memory, don't set array end
003A9E  1  A4 A2                LDY     <g_indx         ; get index byte
003AA0  1  C8                   INY                     ; point to descriptor low byte
003AA1  1  A5 A4                LDA     <Nbendl         ; get string pointer low byte
003AA3  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer low byte
003AA7  1  01 B5 9C C9  
003AAB  1  00 D0 04 A2  
003AB9  1  AA                   TAX                     ; copy string pointer low byte
003ABA  1  E6 A5                INC     <Nbendh         ; correct high byte (move sets high byte -1)
003ABC  1  A5 A5                LDA     <Nbendh         ; get new string pointer high byte
003ABE  1  C8                   INY                     ; point to descriptor high byte
003ABF  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer high byte
003AC3  1  01 B5 9C C9  
003AC7  1  00 D0 04 A2  
003AD5  1  4C AB 39             JMP     LAB_214B        ; re-run routine from last ending
003AD8  1               ; (but don't collect this string)
003AD8  1               
003AD8  1               ; concatenate
003AD8  1               ; add strings, string 1 is in descriptor <des_pl, string 2 is in line
003AD8  1               
003AD8  1               LAB_224D:
003AD8  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003ADA  1  48                   PHA                     ; put on stack
003ADB  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003ADD  1  48                   PHA                     ; put on stack
003ADE  1  20 AC 32             JSR     LAB_GVAL        ; get value from line
003AE1  1  20 AF 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003AE4  1  68                   PLA                     ; get descriptor pointer low byte back
003AE5  1  85 B8                STA     <ssptr_l        ; set pointer low byte
003AE7  1  68                   PLA                     ; get descriptor pointer high byte back
003AE8  1  85 B9                STA     <ssptr_h        ; set pointer high byte
003AEA  1  A0 00                LDY     #$00            ; clear index
003AEC  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get length_1 from descriptor
003AF0  1  B5 B8 C9 00  
003AF4  1  D0 04 A2 00  
003B02  1  18                   CLC                     ; clear carry for add
003B03  1  8B 48 DA A2          ADCINDIRECTY des_pl     ; add length_2
003B07  1  01 B5 AE C9  
003B0B  1  00 D0 04 A2  
003B1C  1  90 05                BCC     LAB_226D        ; branch if no overflow
003B1E  1               
003B1E  1  A2 1A                LDX     #$1A            ; else set error code $1A ("String too long" error)
003B20  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
003B23  1               
003B23  1               LAB_226D:
003B23  1  20 E2 38             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
003B26  1               ; long
003B26  1  20 40 3B             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
003B29  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003B2B  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003B2D  1  20 D5 3B             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003B30  1               ; returns with A = length, <ut1_pl = pointer low byte,
003B30  1               ; <ut1_ph = pointer high byte
003B30  1  20 8E 3B             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003B33  1  A5 B8                LDA     <ssptr_l        ;.set descriptor pointer low byte
003B35  1  A4 B9                LDY     <ssptr_h        ;.set descriptor pointer high byte
003B37  1  20 D5 3B             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003B3A  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003B3A  1               ; Y=<ut1_ph=pointer high byte
003B3A  1  20 4D 39             JSR     LAB_RTST        ; check for space on descriptor stack then put string
003B3D  1               ; address and length on descriptor stack and update stack
003B3D  1               ; pointers
003B3D  1  4C D5 31             JMP     LAB_1ADB        ;.continue evaluation
003B40  1               
003B40  1               ; copy string from descriptor (<sdescr) to (<Sutill)
003B40  1               
003B40  1               LAB_228A:
003B40  1  A0 00                LDY     #$00            ; clear index
003B42  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get string length
003B46  1  B5 B8 C9 00  
003B4A  1  D0 04 A2 00  
003B58  1  48                   PHA                     ; save on stack
003B59  1  C8                   INY                     ; increment index
003B5A  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer low byte
003B5E  1  B5 B8 C9 00  
003B62  1  D0 04 A2 00  
003B70  1  AA                   TAX                     ; copy to X
003B71  1  C8                   INY                     ; increment index
003B72  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer high byte
003B76  1  B5 B8 C9 00  
003B7A  1  D0 04 A2 00  
003B88  1  A8                   TAY                     ; copy to Y
003B89  1  68                   PLA                     ; get length back
003B8A  1               
003B8A  1               ; store string A bytes long from YX to (<Sutill)
003B8A  1               
003B8A  1               LAB_2298:
003B8A  1  86 71                STX     <ut1_pl         ; save source string pointer low byte
003B8C  1  84 72                STY     <ut1_ph         ; save source string pointer high byte
003B8E  1               
003B8E  1               ; store string A bytes long from (<ut1_pl) to (<Sutill)
003B8E  1               
003B8E  1               LAB_229C:
003B8E  1  AA                   TAX                     ; copy length to index (don't count with Y)
003B8F  1  F0 3C                BEQ     LAB_22B2        ; branch if = $0 (null string) no need to add zero length
003B91  1               
003B91  1  A0 00                LDY     #$00            ; zero pointer (copy forward)
003B93  1               LAB_22A0:
003B93  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get source byte
003B97  1  B5 71 C9 00  
003B9B  1  D0 04 A2 00  
003BA9  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save destination byte
003BAD  1  01 B5 83 C9  
003BB1  1  00 D0 04 A2  
003BBF  1               
003BBF  1  C8                   INY                     ; increment index
003BC0  1  CA                   DEX                     ; decrement counter
003BC1  1  D0 D0                BNE     LAB_22A0        ; loop while <> 0
003BC3  1               
003BC3  1  98                   TYA                     ; restore length from Y
003BC4  1               LAB_22A9:
003BC4  1  18                   CLC                     ; clear carry for add
003BC5  1  65 83                ADC     <Sutill         ; add string utility ptr low byte
003BC7  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003BC9  1  90 02                BCC     LAB_22B2        ; branch if no carry
003BCB  1               
003BCB  1  E6 84                INC     <Sutilh         ; else increment string utility ptr high byte
003BCD  1               LAB_22B2:
003BCD  1  60                   RTS
003BCE  1               
003BCE  1               ; evaluate string
003BCE  1               
003BCE  1               LAB_EVST:
003BCE  1  20 AF 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003BD1  1               
003BD1  1               ; pop string off descriptor stack, or from top of string space
003BD1  1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
003BD1  1               
003BD1  1               LAB_22B6:
003BD1  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003BD3  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003BD5  1               
003BD5  1               ; pop (YA) descriptor off stack or from top of string space
003BD5  1               ; returns with A = length, X=<ut1_pl=pointer low byte, Y=<ut1_ph=pointer high byte
003BD5  1               
003BD5  1               LAB_22BA:
003BD5  1  85 71                STA     <ut1_pl         ; save descriptor pointer low byte
003BD7  1  84 72                STY     <ut1_ph         ; save descriptor pointer high byte
003BD9  1  20 42 3C             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
003BDC  1  08                   PHP                     ; save status flags
003BDD  1  A0 00                LDY     #$00            ; clear index
003BDF  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get length from string descriptor
003BE3  1  B5 71 C9 00  
003BE7  1  D0 04 A2 00  
003BF5  1  48                   PHA                     ; put on stack
003BF6  1  C8                   INY                     ; increment index
003BF7  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte from descriptor
003BFB  1  B5 71 C9 00  
003BFF  1  D0 04 A2 00  
003C0D  1  AA                   TAX                     ; copy to X
003C0E  1  C8                   INY                     ; increment index
003C0F  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte from descriptor
003C13  1  B5 71 C9 00  
003C17  1  D0 04 A2 00  
003C25  1  A8                   TAY                     ; copy to Y
003C26  1  68                   PLA                     ; get string length back
003C27  1  28                   PLP                     ; restore status
003C28  1  D0 13                BNE     LAB_22E6        ; branch if pointer <> <last_sl,<last_sh
003C2A  1               
003C2A  1  C4 82                CPY     <Sstorh         ; compare bottom of string space high byte
003C2C  1  D0 0F                BNE     LAB_22E6        ; branch if <>
003C2E  1               
003C2E  1  E4 81                CPX     <Sstorl         ; else compare bottom of string space low byte
003C30  1  D0 0B                BNE     LAB_22E6        ; branch if <>
003C32  1               
003C32  1  48                   PHA                     ; save string length
003C33  1  18                   CLC                     ; clear carry for add
003C34  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte
003C36  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
003C38  1  90 02                BCC     LAB_22E5        ; skip increment if no overflow
003C3A  1               
003C3A  1  E6 82                INC     <Sstorh         ; increment bottom of string space high byte
003C3C  1               LAB_22E5:
003C3C  1  68                   PLA                     ; restore string length
003C3D  1               LAB_22E6:
003C3D  1  86 71                STX     <ut1_pl         ; save string pointer low byte
003C3F  1  84 72                STY     <ut1_ph         ; save string pointer high byte
003C41  1  60                   RTS
003C42  1               
003C42  1               ; clean descriptor stack, YA = pointer
003C42  1               ; checks if AY is on the descriptor stack, if so does a stack discard
003C42  1               
003C42  1               LAB_22EB:
003C42  1  C4 67                CPY     <last_sh        ; compare pointer high byte
003C44  1  D0 0C                BNE     LAB_22FB        ; exit if <>
003C46  1               
003C46  1  C5 66                CMP     <last_sl        ; compare pointer low byte
003C48  1  D0 08                BNE     LAB_22FB        ; exit if <>
003C4A  1               
003C4A  1  85 65                STA     <next_s         ; save descriptor stack pointer
003C4C  1  E9 03                SBC     #$03            ; -3
003C4E  1  85 66                STA     <last_sl        ; save low byte -3
003C50  1  A0 00                LDY     #$00            ; clear high byte
003C52  1               LAB_22FB:
003C52  1  60                   RTS
003C53  1               
003C53  1               ; perform CHR$()
003C53  1               
003C53  1               LAB_CHRS:
003C53  1  20 5D 3E             JSR     LAB_EVBY        ; evaluate byte expression, result in X
003C56  1  8A                   TXA                     ; copy to A
003C57  1  48                   PHA                     ; save character
003C58  1  A9 01                LDA     #$01            ; string is single byte
003C5A  1  20 EA 38             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003C5D  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003C5D  1  68                   PLA                     ; get character back
003C5E  1  A0 00                LDY     #$00            ; clear index
003C60  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
003C64  1  01 B5 AD C9  
003C68  1  00 D0 04 A2  
003C76  1  4C 4D 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003C79  1               ; address and length on descriptor stack and update stack
003C79  1               ; pointers
003C79  1               
003C79  1               ; perform LEFT$()
003C79  1               
003C79  1               LAB_LEFT:
003C79  1  48                   PHA                     ; push byte parameter
003C7A  1  20 31 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003C7D  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003C7D  1  8B 48 DA A2          CMPINDIRECTY des_2l     ; compare byte parameter with string length
003C81  1  01 B5 9E C9  
003C85  1  00 D0 04 A2  
003C95  1  98                   TYA                     ; clear A
003C96  1  F0 1F                BEQ     LAB_2316        ; go do string copy (branch always)
003C98  1               
003C98  1               ; perform RIGHT$()
003C98  1               
003C98  1               LAB_RIGHT:
003C98  1  48                   PHA                     ; push byte parameter
003C99  1  20 31 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003C9C  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003C9C  1  8B 48 DA A2          FETCHINDIRECTY des_2l   ; subtract string length
003CA0  1  01 B5 9E C9  
003CA4  1  00 D0 04 A2  
003CB2  1  18                   CLC                     ; clear carry for add-1
003CB3  1  E5 04                SBC     <TMPFLG         ; REDO SBC WITH CARRY CLEARED (ARTIFACT FROM 816 CONVERSION)
003CB5  1  49 FF                EOR     #$FF            ; invert it (A=LEN(expression$)-l)
003CB7  1               
003CB7  1               LAB_2316:
003CB7  1  90 18                BCC     LAB_231C        ; branch if string length > byte parameter
003CB9  1               
003CB9  1  8B DA A2 01          LDAINDIRECTY des_2l     ; else make parameter = length
003CBD  1  B5 9E C9 00  
003CC1  1  D0 04 A2 00  
003CCF  1  AA                   TAX                     ; copy to byte parameter copy
003CD0  1  98                   TYA                     ; clear string start offset
003CD1  1               LAB_231C:
003CD1  1  48                   PHA                     ; save string start offset
003CD2  1               LAB_231D:
003CD2  1  8A                   TXA                     ; copy byte parameter (or string length if <)
003CD3  1               LAB_231E:
003CD3  1  48                   PHA                     ; save string length
003CD4  1  20 EA 38             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003CD7  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003CD7  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003CD9  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003CDB  1  20 D5 3B             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003CDE  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003CDE  1               ; Y=<ut1_ph=pointer high byte
003CDE  1  68                   PLA                     ; get string length back
003CDF  1  A8                   TAY                     ; copy length to Y
003CE0  1  68                   PLA                     ; get string start offset back
003CE1  1  18                   CLC                     ; clear carry for add
003CE2  1  65 71                ADC     <ut1_pl         ; add start offset to string start pointer low byte
003CE4  1  85 71                STA     <ut1_pl         ; save string start pointer low byte
003CE6  1  90 02                BCC     LAB_2335        ; branch if no overflow
003CE8  1               
003CE8  1  E6 72                INC     <ut1_ph         ; else increment string start pointer high byte
003CEA  1               LAB_2335:
003CEA  1  98                   TYA                     ; copy length to A
003CEB  1  20 8E 3B             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003CEE  1  4C 4D 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003CF1  1               ; address and length on descriptor stack and update stack
003CF1  1               ; pointers
003CF1  1               
003CF1  1               ; perform MID$()
003CF1  1               
003CF1  1               LAB_MIDS:
003CF1  1  48                   PHA                     ; push byte parameter
003CF2  1  A9 FF                LDA     #$FF            ; set default length = 255
003CF4  1  85 AF                STA     <mids_l         ; save default length
003CF6  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003CFA  1  C9 29                CMP     #')'            ; compare with ")"
003CFC  1  F0 06                BEQ     LAB_2358        ; branch if = ")" (skip second byte get)
003CFE  1               
003CFE  1  20 E0 32             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003D01  1  20 5A 3E             JSR     LAB_GTBY        ; get byte parameter (use copy in <mids_l)
003D04  1               LAB_2358:
003D04  1  20 31 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003D07  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003D07  1  CA                   DEX                     ; decrement start index
003D08  1  8A                   TXA                     ; copy to A
003D09  1  48                   PHA                     ; save string start offset
003D0A  1  8B 48 DA A2          FETCHINDIRECTY des_2l
003D0E  1  01 B5 9E C9  
003D12  1  00 D0 04 A2  
003D20  1  18                   CLC                     ; clear carry for sub-1
003D21  1  A2 00                LDX     #$00            ; clear output string length
003D23  1  E5 04                SBC     <TMPFLG         ; subtract string length
003D25  1  B0 AB                BCS     LAB_231D        ; if start>string length go do null string
003D27  1               
003D27  1  49 FF                EOR     #$FF            ; complement -length
003D29  1  C5 AF                CMP     <mids_l         ; compare byte parameter
003D2B  1  90 A6                BCC     LAB_231E        ; if length>remaining string go do RIGHT$
003D2D  1               
003D2D  1  A5 AF                LDA     <mids_l         ; get length byte
003D2F  1  B0 A2                BCS     LAB_231E        ; go do string copy (branch always)
003D31  1               
003D31  1               ; pull string data and byte parameter from stack
003D31  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003D31  1               
003D31  1               LAB_236F:
003D31  1  20 CF 32             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003D34  1  68                   PLA                     ; pull return address low byte (return address)
003D35  1  85 A2                STA     <Fnxjpl         ; save functions jump vector low byte
003D37  1  68                   PLA                     ; pull return address high byte (return address)
003D38  1  85 A3                STA     <Fnxjph         ; save functions jump vector high byte
003D3A  1  68                   PLA                     ; pull byte parameter
003D3B  1  AA                   TAX                     ; copy byte parameter to X
003D3C  1  68                   PLA                     ; pull string pointer low byte
003D3D  1  85 9E                STA     <des_2l         ; save it
003D3F  1  68                   PLA                     ; pull string pointer high byte
003D40  1  85 9F                STA     <des_2h         ; save it
003D42  1  A0 00                LDY     #$00            ; clear index
003D44  1  8A                   TXA                     ; copy byte parameter
003D45  1  D0 03 4C 53          LBEQ    LAB_23A8        ; if null do function call error then warm start
003D49  1  3E           
003D4A  1               
003D4A  1  E6 A2                INC     <Fnxjpl         ; increment function jump vector low byte
003D4C  1               ; (JSR pushes return addr-1. this is all very nice
003D4C  1               ; but will go tits up if either call is on a page
003D4C  1               ; boundary!)
003D4C  1  6C A2 00             JMP     (Fnxjpl)        ; in effect, RTS
003D4F  1               
003D4F  1               ; perform LCASE$()
003D4F  1               
003D4F  1               LAB_LCASE:
003D4F  1  20 CE 3B             JSR     LAB_EVST        ; evaluate string
003D52  1  85 AC                STA     <str_ln         ; set string length
003D54  1  A8                   TAY                     ; copy length to Y
003D55  1  D0 03 4C E2          LBEQ    NoString        ; branch if null string
003D59  1  3D           
003D5A  1               
003D5A  1  20 EA 38             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003D5D  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003D5D  1  86 AD                STX     <str_pl         ; save string pointer low byte
003D5F  1  84 AE                STY     <str_ph         ; save string pointer high byte
003D61  1  A8                   TAY                     ; get string length back
003D62  1               
003D62  1               LC_loop:
003D62  1  88                   DEY                     ; decrement index
003D63  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003D67  1  B5 71 C9 00  
003D6B  1  D0 04 A2 00  
003D79  1  20 37 35             JSR     LAB_1D82        ; is character "A" to "Z"
003D7C  1  90 02                BCC     NoUcase         ; branch if not upper case alpha
003D7E  1               
003D7E  1  09 20                ORA     #$20            ; convert upper to lower case
003D80  1               NoUcase:
003D80  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003D84  1  01 B5 83 C9  
003D88  1  00 D0 04 A2  
003D96  1  98                   TYA                     ; test index
003D97  1  D0 C9                BNE     LC_loop         ; loop if not all done
003D99  1               
003D99  1  F0 47                BEQ     NoString        ; tidy up and exit, branch always
003D9B  1               
003D9B  1               ; perform UCASE$()
003D9B  1               
003D9B  1               LAB_UCASE:
003D9B  1  20 CE 3B             JSR     LAB_EVST        ; evaluate string
003D9E  1  85 AC                STA     <str_ln         ; set string length
003DA0  1  A8                   TAY                     ; copy length to Y
003DA1  1  F0 3F                BEQ     NoString        ; branch if null string
003DA3  1               
003DA3  1  20 EA 38             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003DA6  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003DA6  1  86 AD                STX     <str_pl         ; save string pointer low byte
003DA8  1  84 AE                STY     <str_ph         ; save string pointer high byte
003DAA  1  A8                   TAY                     ; get string length back
003DAB  1               
003DAB  1               UC_loop:
003DAB  1  88                   DEY                     ; decrement index
003DAC  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003DB0  1  B5 71 C9 00  
003DB4  1  D0 04 A2 00  
003DC2  1  20 33 35             JSR     LAB_CASC        ; is character "a" to "z" (or "A" to "Z")
003DC5  1  90 02                BCC     NoLcase         ; branch if not alpha
003DC7  1               
003DC7  1  29 DF                AND     #$DF            ; convert lower to upper case
003DC9  1               NoLcase:
003DC9  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003DCD  1  01 B5 83 C9  
003DD1  1  00 D0 04 A2  
003DDF  1  98                   TYA                     ; test index
003DE0  1  D0 C9                BNE     UC_loop         ; loop if not all done
003DE2  1               
003DE2  1               NoString:
003DE2  1  4C 4D 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003DE5  1               ; address and length on descriptor stack and update stack
003DE5  1               ; pointers
003DE5  1               
003DE5  1               ; perform SADD()
003DE5  1               
003DE5  1               LAB_SADD:
003DE5  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003DE9  1  20 BB 34             JSR     LAB_GVAR        ; get var address
003DEC  1               
003DEC  1  20 CF 32             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003DEF  1  20 AF 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003DF2  1               
003DF2  1  A0 02                LDY     #$02            ; index to string pointer high byte
003DF4  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer high byte
003DF8  1  B5 95 C9 00  
003DFC  1  D0 04 A2 00  
003E0A  1  AA                   TAX                     ; copy string pointer high byte to X
003E0B  1  88                   DEY                     ; index to string pointer low byte
003E0C  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer low byte
003E10  1  B5 95 C9 00  
003E14  1  D0 04 A2 00  
003E22  1  A8                   TAY                     ; copy string pointer low byte to Y
003E23  1  8A                   TXA                     ; copy string pointer high byte to A
003E24  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003E27  1               
003E27  1               ; perform LEN()
003E27  1               
003E27  1               LAB_LENS:
003E27  1  20 2D 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003E2A  1  4C 86 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003E2D  1               
003E2D  1               ; evaluate string, get length in Y
003E2D  1               
003E2D  1               LAB_ESGL:
003E2D  1  20 CE 3B             JSR     LAB_EVST        ; evaluate string
003E30  1  A8                   TAY                     ; copy length to Y
003E31  1  60                   RTS
003E32  1               
003E32  1               ; perform ASC()
003E32  1               
003E32  1               LAB_ASC:
003E32  1  20 2D 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003E35  1  F0 1C                BEQ     LAB_23A8        ; if null do function call error then warm start
003E37  1               
003E37  1  A0 00                LDY     #$00            ; set index to first character
003E39  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
003E3D  1  B5 71 C9 00  
003E41  1  D0 04 A2 00  
003E4F  1  A8                   TAY                     ; copy to Y
003E50  1  4C 86 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003E53  1               
003E53  1               ; do function call error then warm start
003E53  1               
003E53  1               LAB_23A8:
003E53  1  4C 43 36             JMP     LAB_FCER        ; do function call error then warm start
003E56  1               
003E56  1               ; scan and get byte parameter
003E56  1               
003E56  1               LAB_SGBY:
003E56  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003E5A  1               
003E5A  1               ; get byte parameter
003E5A  1               
003E5A  1               LAB_GTBY:
003E5A  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003E5D  1               ; else do type mismatch
003E5D  1               
003E5D  1               ; evaluate byte expression, result in X
003E5D  1               
003E5D  1               LAB_EVBY:
003E5D  1  20 B8 35             JSR     LAB_EVPI        ; evaluate integer expression (no check)
003E60  1               
003E60  1  A4 AE                LDY     <FAC1_2         ; get FAC1 mantissa2
003E62  1  D0 EF                BNE     LAB_23A8        ; if top byte <> 0 do function call error then warm start
003E64  1               
003E64  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
003E66  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003E6A  1  60                   RTS
003E6B  1               
003E6B  1               ; perform VAL()
003E6B  1               
003E6B  1               LAB_VAL:
003E6B  1  20 2D 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003E6E  1  D0 03                BNE     LAB_23C5        ; branch if not null string
003E70  1               
003E70  1               ; string was null so set result = $00
003E70  1  4C BB 40             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
003E73  1               
003E73  1               LAB_23C5:
003E73  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
003E75  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003E77  1  86 BA                STX     <Btmpl          ; save BASIC execute pointer low byte
003E79  1  84 BB                STY     <Btmph          ; save BASIC execute pointer high byte
003E7B  1  A6 71                LDX     <ut1_pl         ; get string pointer low byte
003E7D  1  86 C3                STX     <Bpntrl         ; save as BASIC execute pointer low byte
003E7F  1  18                   CLC                     ; clear carry
003E80  1  65 71                ADC     <ut1_pl         ; add string length
003E82  1  85 73                STA     <ut2_pl         ; save string end low byte
003E84  1  A5 72                LDA     <ut1_ph         ; get string pointer high byte
003E86  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003E88  1  69 00                ADC     #$00            ; add carry to high byte
003E8A  1  85 74                STA     <ut2_ph         ; save string end high byte
003E8C  1  A0 00                LDY     #$00            ; set index to $00
003E8E  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get string end +1 byte
003E92  1  B5 73 C9 00  
003E96  1  D0 04 A2 00  
003EA4  1  48                   PHA                     ; push it
003EA5  1  98                   TYA                     ; clear A
003EA6  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; terminate string with $00
003EAA  1  01 B5 73 C9  
003EAE  1  00 D0 04 A2  
003EBC  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003EC0  1  20 65 45             JSR     LAB_2887        ; get FAC1 from string
003EC3  1  68                   PLA                     ; restore string end +1 byte
003EC4  1  A0 00                LDY     #$00            ; set index to zero
003EC6  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; put string end byte back
003ECA  1  01 B5 73 C9  
003ECE  1  00 D0 04 A2  
003EDC  1               
003EDC  1               ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
003EDC  1               
003EDC  1               LAB_23F3:
003EDC  1  A6 BA                LDX     <Btmpl          ; get BASIC execute pointer low byte back
003EDE  1  A4 BB                LDY     <Btmph          ; get BASIC execute pointer high byte back
003EE0  1  86 C3                STX     <Bpntrl         ; save BASIC execute pointer low byte
003EE2  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
003EE4  1  60                   RTS
003EE5  1               
003EE5  1               ; get two parameters for POKE or WAIT
003EE5  1               
003EE5  1               LAB_GADB:
003EE5  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003EE8  1               ; else do type mismatch
003EE8  1  20 FE 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003EEB  1               
003EEB  1               ; scan for "," and get byte, else do Syntax error then warm start
003EEB  1               
003EEB  1               LAB_SCGB:
003EEB  1  20 E0 32             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003EEE  1  A5 12                LDA     <Itemph         ; save temporary integer high byte
003EF0  1  48                   PHA                     ; on stack
003EF1  1  A5 11                LDA     <Itempl         ; save temporary integer low byte
003EF3  1  48                   PHA                     ; on stack
003EF4  1  20 5A 3E             JSR     LAB_GTBY        ; get byte parameter
003EF7  1  68                   PLA                     ; pull low byte
003EF8  1  85 11                STA     <Itempl         ; restore temporary integer low byte
003EFA  1  68                   PLA                     ; pull high byte
003EFB  1  85 12                STA     <Itemph         ; restore temporary integer high byte
003EFD  1  60                   RTS
003EFE  1               
003EFE  1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
003EFE  1               ; -ve and converts it into a right truncated integer in <Itempl and <Itemph
003EFE  1               
003EFE  1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
003EFE  1               
003EFE  1               LAB_F2FX:
003EFE  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003F00  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
003F02  1  B0 03                BCS     LAB_23A8_1      ; do function call error then warm start
003F04  1  4C 0A 3F             JMP     LAB_F2FU
003F07  1               LAB_23A8_1:
003F07  1  4C 53 3E             JMP     LAB_23A8
003F0A  1               LAB_F2FU:
003F0A  1  20 0F 45             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
003F0D  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003F0F  1  A4 AF                LDY     <FAC1_3         ; get FAC1 mantissa3
003F11  1  84 11                STY     <Itempl         ; save temporary integer low byte
003F13  1  85 12                STA     <Itemph         ; save temporary integer high byte
003F15  1  60                   RTS
003F16  1               
003F16  1               ; perform PEEK()
003F16  1               
003F16  1               LAB_PEEK:
003F16  1  20 FE 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003F19  1  A2 00                LDX     #$00            ; clear index
003F1B  1  8B                   PHB
003F1C  1  DA A2 00 DA          SETBANK 0
003F20  1  AB FA        
003F22  1  A1 11                LDA     (<Itempl,X)     ; get byte via temporary integer (addr)
003F24  1  AB                   PLB
003F25  1  A8                   TAY                     ; copy byte to Y
003F26  1  4C 86 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003F29  1               
003F29  1               ; perform POKE
003F29  1               
003F29  1               LAB_POKE:
003F29  1  20 E5 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003F2C  1  8A                   TXA                     ; copy byte argument to A
003F2D  1  A2 00                LDX     #$00            ; clear index
003F2F  1  8B                   PHB
003F30  1  DA A2 00 DA          SETBANK 0
003F34  1  AB FA        
003F36  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
003F38  1  AB                   PLB
003F39  1  60                   RTS
003F3A  1               
003F3A  1               ; perform SYS
003F3A  1               
003F3A  1               LAB_SYS:
003F3A  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003F3D  1               ; else do type mismatch
003F3D  1  20 FE 3E             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003F40  1               
003F40  1  A5 11                LDA     <Itempl
003F42  1  85 0B                STA     <Usrjpl
003F44  1  A5 12                LDA     <Itemph
003F46  1  85 0C                STA     <Usrjph
003F48  1  22 0A 00 00          JSL     Usrjmp
003F4C  1  60                   RTS
003F4D  1               
003F4D  1               ; perform SWAP
003F4D  1               
003F4D  1               LAB_SWAP:
003F4D  1  20 BB 34             JSR     LAB_GVAR        ; get var1 address
003F50  1  85 97                STA     <Lvarpl         ; save var1 address low byte
003F52  1  84 98                STY     <Lvarph         ; save var1 address high byte
003F54  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003F56  1  48                   PHA                     ; save data type flag
003F57  1               
003F57  1  20 E0 32             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003F5A  1  20 BB 34             JSR     LAB_GVAR        ; get var2 address (pointer in <Cvaral/h)
003F5D  1  68                   PLA                     ; pull var1 data type flag
003F5E  1  45 5F                EOR     <Dtypef         ; compare with var2 data type
003F60  1  10 60                BPL     SwapErr         ; exit if not both the same type
003F62  1               
003F62  1  A0 03                LDY     #$03            ; four bytes to swap (either value or descriptor+1)
003F64  1               SwapLp:
003F64  1  8B DA A2 01          LDAINDIRECTY Lvarpl     ; get byte from var1
003F68  1  B5 97 C9 00  
003F6C  1  D0 04 A2 00  
003F7A  1  AA                   TAX                     ; save var1 byte
003F7B  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from var2
003F7F  1  B5 95 C9 00  
003F83  1  D0 04 A2 00  
003F91  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; save byte to var1
003F95  1  01 B5 97 C9  
003F99  1  00 D0 04 A2  
003FA7  1  8A                   TXA                     ; restore var1 byte
003FA8  1  8B DA 48 A2          STAINDIRECTY Cvaral     ; save byte to var2
003FAC  1  01 B5 95 C9  
003FB0  1  00 D0 04 A2  
003FBE  1  88                   DEY                     ; decrement index
003FBF  1  10 A3                BPL     SwapLp          ; loop until done
003FC1  1               
003FC1  1  60                   RTS
003FC2  1               
003FC2  1               SwapErr:
003FC2  1  4C B9 31             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
003FC5  1               
003FC5  1               ; perform CALL
003FC5  1               
003FC5  1               LAB_CALL:
003FC5  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003FC8  1               ; else do type mismatch
003FC8  1  20 FE 3E             JSR     LAB_F2FX        ; convert floating-to-fixed
003FCB  1  A9 3F                LDA     #>CallExit      ; set return address high byte
003FCD  1  48                   PHA                     ; put on stack
003FCE  1  A9 D3                LDA     #<CallExit-1    ; set return address low byte
003FD0  1  48                   PHA                     ; put on stack
003FD1  1  6C 11 00             JMP     (Itempl)        ; do indirect jump to user routine
003FD4  1               
003FD4  1               ; if the called routine exits correctly then it will return to here. this will then get
003FD4  1               ; the next byte for the interpreter and return
003FD4  1               
003FD4  1               CallExit:
003FD4  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003FD8  1  60                   RTS
003FD9  1               ; perform WAIT
003FD9  1               
003FD9  1               LAB_WAIT:
003FD9  1  20 E5 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003FDC  1  86 97                STX     <Frnxtl         ; save byte
003FDE  1  A2 00                LDX     #$00            ; clear mask
003FE0  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003FE4  1  F0 03                BEQ     LAB_2441        ; skip if no third argument
003FE6  1               
003FE6  1  20 EB 3E             JSR     LAB_SCGB        ; scan for "," and get byte, else SN error then warm start
003FE9  1               LAB_2441:
003FE9  1  86 98                STX     <Frnxth         ; save EOR argument
003FEB  1               LAB_2445:
003FEB  1  8B DA A2 01          LDAINDIRECTY Itempl     ; get byte via temporary integer (addr)
003FEF  1  B5 11 C9 00  
003FF3  1  D0 04 A2 00  
004001  1  45 98                EOR     <Frnxth         ; EOR with second argument (mask)
004003  1  25 97                AND     <Frnxtl         ; AND with first argument (byte)
004005  1  F0 E4                BEQ     LAB_2445        ; loop if result is zero
004007  1               
004007  1               LAB_244D:
004007  1  60                   RTS
004008  1               
004008  1               ; perform subtraction, FAC1 from (AY)
004008  1               
004008  1               LAB_2455:
004008  1  20 F6 41             JSR     LAB_264D        ; unpack memory (AY) into FAC2
00400B  1               
00400B  1               ; perform subtraction, FAC1 from FAC2
00400B  1               
00400B  1               LAB_SUBTRACT:
00400B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00400D  1  49 FF                EOR     #$FF            ; complement it
00400F  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004011  1  45 B7                EOR     <FAC2_s         ; EOR with FAC2 sign (b7)
004013  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004015  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004017  1  4C 26 40             JMP     LAB_ADD         ; go add FAC2 to FAC1
00401A  1               
00401A  1               ; perform addition
00401A  1               
00401A  1               LAB_2467:
00401A  1  20 45 41             JSR     LAB_257B        ; shift FACX A times right (>8 shifts)
00401D  1  90 4D                BCC     LAB_24A8        ;.go subtract mantissas
00401F  1               
00401F  1               ; add 0.5 to FAC1
00401F  1               
00401F  1               LAB_244E:
00401F  1  A9 71                LDA     #<LAB_2A96      ; set 0.5 pointer low byte
004021  1  A0 18                LDY     #>LAB_2A96      ; set 0.5 pointer high byte
004023  1               
004023  1               ; add (AY) to FAC1
004023  1               
004023  1               LAB_246C:
004023  1  20 F6 41             JSR     LAB_264D        ; unpack memory (AY) into FAC2
004026  1               
004026  1               ; add FAC2 to FAC1
004026  1               
004026  1               LAB_ADD:
004026  1  D0 10                BNE     LAB_2474        ; branch if FAC1 was not zero
004028  1               
004028  1               ; copy FAC2 to FAC1
004028  1               
004028  1               LAB_279B:
004028  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
00402A  1               
00402A  1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
00402A  1               
00402A  1               LAB_279D:
00402A  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
00402C  1  A2 04                LDX     #$04            ; 4 bytes to copy
00402E  1               LAB_27A1:
00402E  1  B5 B2                LDA     <FAC1_o,X       ; get byte from FAC2,X
004030  1  95 AB                STA     <FAC1_e-1,X     ; save byte at FAC1,X
004032  1  CA                   DEX                     ; decrement count
004033  1  D0 F9                BNE     LAB_27A1        ; loop if not all done
004035  1               
004035  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
004037  1  60                   RTS
004038  1               
004038  1               ; FAC1 is non zero
004038  1               LAB_2474:
004038  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
00403A  1  86 A3                STX     <FAC2_r         ; save as FAC2 rounding byte
00403C  1  A2 B3                LDX     #<FAC2_e        ; set index to FAC2 exponent addr
00403E  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
004040  1               LAB_247C:
004040  1  A8                   TAY                     ; copy exponent
004041  1  F0 C4                BEQ     LAB_244D        ; exit if zero
004043  1  38                   SEC                     ; set carry for subtract
004044  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
004046  1  F0 24                BEQ     LAB_24A8        ; branch if = (go add mantissa)
004048  1  90 12                BCC     LAB_2498        ; branch if <
00404A  1               ; FAC2>FAC1
00404A  1  84 AC                STY     <FAC1_e         ; save FAC1 exponent
00404C  1  A4 B7                LDY     <FAC2_s         ; get FAC2 sign (b7)
00404E  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
004050  1  49 FF                EOR     #$FF            ; complement A
004052  1  69 00                ADC     #$00            ; +1 (twos complement, carry is set)
004054  1  A0 00                LDY     #$00            ; clear Y
004056  1  84 A3                STY     <FAC2_r         ; clear FAC2 rounding byte
004058  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1 exponent addr
00405A  1  D0 04                BNE     LAB_249C        ; branch always
00405C  1               LAB_2498:
00405C  1  A0 00                LDY     #$00            ; clear Y
00405E  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004060  1               LAB_249C:
004060  1  C9 F9                CMP     #$F9            ; compare exponent diff with $F9
004062  1  30 B6                BMI     LAB_2467        ; branch if range $79-$F8
004064  1  A8                   TAY                     ; copy exponent difference to Y
004065  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004067  1  56 01                LSR     <PLUS_1,X       ; shift FAC? mantissa1
004069  1  20 5C 41             JSR     LAB_2592        ; shift FACX Y times right
00406C  1               ; exponents are equal now do mantissa subtract
00406C  1               LAB_24A8:
00406C  1  24 B8                BIT     <FAC_sc         ; test sign compare (FAC1 EOR FAC2)
00406E  1  10 52                BPL     LAB_24F8        ; if = add FAC2 mantissa to FAC1 mantissa and return
004070  1               
004070  1  A0 AC                LDY     #<FAC1_e        ; set index to FAC1 exponent addr
004072  1  E0 B3                CPX     #<FAC2_e        ; compare X to FAC2 exponent addr
004074  1  F0 02                BEQ     LAB_24B4        ; branch if =
004076  1               
004076  1  A0 B3                LDY     #<FAC2_e        ; else set index to FAC2 exponent addr
004078  1               
004078  1               ; subtract smaller from bigger (take sign of bigger)
004078  1               LAB_24B4:
004078  1  38                   SEC                     ; set carry for subtract
004079  1  49 FF                EOR     #$FF            ; ones complement A
00407B  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
00407D  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
00407F  1  DA                   PHX
004080  1  BB                   TYX
004081  1  B5 03                LDA     <PLUS_3,X       ; get FACY mantissa3
004083  1  FA                   PLX
004084  1  F5 03                SBC     <PLUS_3,X       ; subtract FACX mantissa3
004086  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004088  1  DA                   PHX
004089  1  BB                   TYX
00408A  1  B5 02                LDA     <PLUS_2,x       ; get FACY mantissa2
00408C  1  FA                   PLX
00408D  1  F5 02                SBC     <PLUS_2,X       ; subtract FACX mantissa2
00408F  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004091  1  DA                   PHX
004092  1  BB                   TYX
004093  1  B5 01                LDA     <PLUS_1,x       ; get FACY mantissa1
004095  1  FA                   PLX
004096  1  F5 01                SBC     <PLUS_1,X       ; subtract FACX mantissa1
004098  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00409A  1               
00409A  1               ; do ABS and normalise FAC1
00409A  1               
00409A  1               LAB_24D0:
00409A  1  B0 03                BCS     LAB_24D5        ; branch if number is +ve
00409C  1               
00409C  1  20 01 41             JSR     LAB_2537        ; negate FAC1
00409F  1               
00409F  1               ; normalise FAC1
00409F  1               
00409F  1               LAB_24D5:
00409F  1  A0 00                LDY     #$00            ; clear Y
0040A1  1  98                   TYA                     ; clear A
0040A2  1  18                   CLC                     ; clear carry for add
0040A3  1               LAB_24D9:
0040A3  1  A6 AD                LDX     <FAC1_1         ; get FAC1 mantissa1
0040A5  1  D0 3E                BNE     LAB_251B        ; if not zero normalise FAC1
0040A7  1               
0040A7  1  A6 AE                LDX     <FAC1_2         ; get FAC1 mantissa2
0040A9  1  86 AD                STX     <FAC1_1         ; save FAC1 mantissa1
0040AB  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
0040AD  1  86 AE                STX     <FAC1_2         ; save FAC1 mantissa2
0040AF  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
0040B1  1  86 AF                STX     <FAC1_3         ; save FAC1 mantissa3
0040B3  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
0040B5  1  69 08                ADC     #$08            ; add x to exponent offset
0040B7  1  C9 18                CMP     #$18            ; compare with $18 (max offset, all bits would be =0)
0040B9  1  D0 E8                BNE     LAB_24D9        ; loop if not max
0040BB  1               
0040BB  1               ; clear FAC1 exponent and sign
0040BB  1               
0040BB  1               LAB_24F1:
0040BB  1  A9 00                LDA     #$00            ; clear A
0040BD  1               LAB_24F3:
0040BD  1  85 AC                STA     <FAC1_e         ; set FAC1 exponent
0040BF  1               
0040BF  1               ; save FAC1 sign
0040BF  1               
0040BF  1               LAB_24F5:
0040BF  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0040C1  1  60                   RTS
0040C2  1               
0040C2  1               ; add FAC2 mantissa to FAC1 mantissa
0040C2  1               
0040C2  1               LAB_24F8:
0040C2  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
0040C4  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
0040C6  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0040C8  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
0040CA  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0040CC  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0040CE  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
0040D0  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0040D2  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0040D4  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
0040D6  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0040D8  1  B0 1A                BCS     LAB_252A        ; if carry then normalise FAC1 for C=1
0040DA  1               
0040DA  1  60                   RTS                     ; else just exit
0040DB  1               
0040DB  1               LAB_2511:
0040DB  1  69 01                ADC     #$01            ; add 1 to exponent offset
0040DD  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
0040DF  1  26 AF                ROL     <FAC1_3         ; shift FAC1 mantissa3
0040E1  1  26 AE                ROL     <FAC1_2         ; shift FAC1 mantissa2
0040E3  1  26 AD                ROL     <FAC1_1         ; shift FAC1 mantissa1
0040E5  1               
0040E5  1               ; normalise FAC1
0040E5  1               
0040E5  1               LAB_251B:
0040E5  1  10 F4                BPL     LAB_2511        ; loop if not normalised
0040E7  1               
0040E7  1  38                   SEC                     ; set carry for subtract
0040E8  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
0040EA  1  B0 CF                BCS     LAB_24F1        ; branch if underflow (set result = $0)
0040EC  1               
0040EC  1  49 FF                EOR     #$FF            ; complement exponent
0040EE  1  69 01                ADC     #$01            ; +1 (twos complement)
0040F0  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0040F2  1               
0040F2  1               ; test and normalise FAC1 for C=0/1
0040F2  1               
0040F2  1               LAB_2528:
0040F2  1  90 0C                BCC     LAB_2536        ; exit if no overflow
0040F4  1               
0040F4  1               ; normalise FAC1 for C=1
0040F4  1               
0040F4  1               LAB_252A:
0040F4  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
0040F6  1  F0 36                BEQ     LAB_2564        ; if zero do overflow error and warm start
0040F8  1               
0040F8  1  66 AD                ROR     <FAC1_1         ; shift FAC1 mantissa1
0040FA  1  66 AE                ROR     <FAC1_2         ; shift FAC1 mantissa2
0040FC  1  66 AF                ROR     <FAC1_3         ; shift FAC1 mantissa3
0040FE  1  66 B9                ROR     <FAC1_r         ; shift FAC1 rounding byte
004100  1               LAB_2536:
004100  1  60                   RTS
004101  1               
004101  1               ; negate FAC1
004101  1               
004101  1               LAB_2537:
004101  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004103  1  49 FF                EOR     #$FF            ; complement it
004105  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004107  1               
004107  1               ; twos complement FAC1 mantissa
004107  1               
004107  1               LAB_253D:
004107  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004109  1  49 FF                EOR     #$FF            ; complement it
00410B  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00410D  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00410F  1  49 FF                EOR     #$FF            ; complement it
004111  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004113  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004115  1  49 FF                EOR     #$FF            ; complement it
004117  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004119  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
00411B  1  49 FF                EOR     #$FF            ; complement it
00411D  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
00411F  1  E6 B9                INC     <FAC1_r         ; increment FAC1 rounding byte
004121  1  D0 0A                BNE     LAB_2563        ; exit if no overflow
004123  1               
004123  1               ; increment FAC1 mantissa
004123  1               
004123  1               LAB_2559:
004123  1  E6 AF                INC     <FAC1_3         ; increment FAC1 mantissa3
004125  1  D0 06                BNE     LAB_2563        ; finished if no rollover
004127  1               
004127  1  E6 AE                INC     <FAC1_2         ; increment FAC1 mantissa2
004129  1  D0 02                BNE     LAB_2563        ; finished if no rollover
00412B  1               
00412B  1  E6 AD                INC     <FAC1_1         ; increment FAC1 mantissa1
00412D  1               LAB_2563:
00412D  1  60                   RTS
00412E  1               
00412E  1               ; do overflow error (overflow exit)
00412E  1               
00412E  1               LAB_2564:
00412E  1  A2 0A                LDX     #$0A            ; error code $0A ("Overflow" error)
004130  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
004133  1               
004133  1               ; shift FCAtemp << A+8 times
004133  1               
004133  1               LAB_2569:
004133  1  A2 74                LDX     #<FACt_1-1      ; set offset to FACtemp
004135  1               LAB_256B:
004135  1  B4 03                LDY     <PLUS_3,X       ; get FACX mantissa3
004137  1  84 B9                STY     <FAC1_r         ; save as FAC1 rounding byte
004139  1  B4 02                LDY     <PLUS_2,X       ; get FACX mantissa2
00413B  1  94 03                STY     <PLUS_3,X       ; save FACX mantissa3
00413D  1  B4 01                LDY     <PLUS_1,X       ; get FACX mantissa1
00413F  1  94 02                STY     <PLUS_2,X       ; save FACX mantissa2
004141  1  A4 B2                LDY     <FAC1_o         ; get FAC1 overflow byte
004143  1  94 01                STY     <PLUS_1,X       ; save FACX mantissa1
004145  1               
004145  1               ; shift FACX -A times right (> 8 shifts)
004145  1               
004145  1               LAB_257B:
004145  1  69 08                ADC     #$08            ; add 8 to shift count
004147  1  30 EC                BMI     LAB_256B        ; go do 8 shift if still -ve
004149  1               
004149  1  F0 EA                BEQ     LAB_256B        ; go do 8 shift if zero
00414B  1               
00414B  1  E9 08                SBC     #$08            ; else subtract 8 again
00414D  1  A8                   TAY                     ; save count to Y
00414E  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004150  1  B0 12                BCS     LAB_259A        ;.
004152  1               
004152  1               LAB_2588:
004152  1  16 01                ASL     <PLUS_1,X       ; shift FACX mantissa1
004154  1  90 02                BCC     LAB_258E        ; branch if +ve
004156  1               
004156  1  F6 01                INC     <PLUS_1,X       ; this sets b7 eventually
004158  1               LAB_258E:
004158  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (correct for ASL)
00415A  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (put carry in b7)
00415C  1               
00415C  1               ; shift FACX Y times right
00415C  1               
00415C  1               LAB_2592:
00415C  1  76 02                ROR     <PLUS_2,X       ; shift FACX mantissa2
00415E  1  76 03                ROR     <PLUS_3,X       ; shift FACX mantissa3
004160  1  6A                   ROR     A               ; shift FACX rounding byte
004161  1  C8                   INY                     ; increment exponent diff
004162  1  D0 EE                BNE     LAB_2588        ; branch if range adjust not complete
004164  1               
004164  1               LAB_259A:
004164  1  18                   CLC                     ; just clear it
004165  1  60                   RTS
004166  1               
004166  1               ; perform LOG()
004166  1               
004166  1               LAB_LOG:
004166  1  20 44 44             JSR     LAB_27CA        ; test sign and zero
004169  1  F0 02                BEQ     LAB_25C4        ; if zero do function call error then warm start
00416B  1               
00416B  1  10 03                BPL     LAB_25C7        ; skip error if +ve
00416D  1               
00416D  1               LAB_25C4:
00416D  1  4C 43 36             JMP     LAB_FCER        ; do function call error then warm start (-ve)
004170  1               
004170  1               LAB_25C7:
004170  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004172  1  E9 7F                SBC     #$7F            ; normalise it
004174  1  48                   PHA                     ; save it
004175  1  A9 80                LDA     #$80            ; set exponent to zero
004177  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004179  1  A9 F1                LDA     #<LAB_25AD      ; set 1/root2 pointer low byte
00417B  1  A0 17                LDY     #>LAB_25AD      ; set 1/root2 pointer high byte
00417D  1  20 23 40             JSR     LAB_246C        ; add (AY) to FAC1 (1/root2)
004180  1  A9 F5                LDA     #<LAB_25B1      ; set root2 pointer low byte
004182  1  A0 17                LDY     #>LAB_25B1      ; set root2 pointer high byte
004184  1  20 BC 42             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
004187  1  A9 68                LDA     #<LAB_259C      ; set 1 pointer low byte
004189  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
00418B  1  20 08 40             JSR     LAB_2455        ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
00418E  1  A9 E4                LDA     #<LAB_25A0      ; set pointer low byte to counter
004190  1  A0 17                LDY     #>LAB_25A0      ; set pointer high byte to counter
004192  1  20 45 48             JSR     LAB_2B6E        ; ^2 then series evaluation
004195  1  A9 F9                LDA     #<LAB_25B5      ; set -0.5 pointer low byte
004197  1  A0 17                LDY     #>LAB_25B5      ; set -0.5 pointer high byte
004199  1  20 23 40             JSR     LAB_246C        ; add (AY) to FAC1
00419C  1  68                   PLA                     ; restore FAC1 exponent
00419D  1  20 0B 46             JSR     LAB_2912        ; evaluate new ASCII digit
0041A0  1  A9 FD                LDA     #<LAB_25B9      ; set LOG(2) pointer low byte
0041A2  1  A0 17                LDY     #>LAB_25B9      ; set LOG(2) pointer high byte
0041A4  1               
0041A4  1               ; do convert AY, FCA1*(AY)
0041A4  1               
0041A4  1               LAB_25FB:
0041A4  1  20 F6 41             JSR     LAB_264D        ; unpack memory (AY) into FAC2
0041A7  1               LAB_MULTIPLY:
0041A7  1  F0 4C                BEQ     LAB_264C        ; exit if zero
0041A9  1               
0041A9  1  20 6C 42             JSR     LAB_2673        ; test and adjust accumulators
0041AC  1  A9 00                LDA     #$00            ; clear A
0041AE  1  85 75                STA     <FACt_1         ; clear temp mantissa1
0041B0  1  85 76                STA     <FACt_2         ; clear temp mantissa2
0041B2  1  85 77                STA     <FACt_3         ; clear temp mantissa3
0041B4  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
0041B6  1  20 CB 41             JSR     LAB_2622        ; go do shift/add FAC2
0041B9  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0041BB  1  20 CB 41             JSR     LAB_2622        ; go do shift/add FAC2
0041BE  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0041C0  1  20 CB 41             JSR     LAB_2622        ; go do shift/add FAC2
0041C3  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0041C5  1  20 D0 41             JSR     LAB_2627        ; go do shift/add FAC2
0041C8  1  4C 29 43             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
0041CB  1               
0041CB  1               LAB_2622:
0041CB  1  D0 03                BNE     LAB_2627        ; branch if byte <> zero
0041CD  1               
0041CD  1  4C 33 41             JMP     LAB_2569        ; shift FCAtemp << A+8 times
0041D0  1               
0041D0  1               ; else do shift and add
0041D0  1               LAB_2627:
0041D0  1  4A                   LSR     A               ; shift byte
0041D1  1  09 80                ORA     #$80            ; set top bit (mark for 8 times)
0041D3  1               LAB_262A:
0041D3  1  A8                   TAY                     ; copy result
0041D4  1  90 13                BCC     LAB_2640        ; skip next if bit was zero
0041D6  1               
0041D6  1  18                   CLC                     ; clear carry for add
0041D7  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
0041D9  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
0041DB  1  85 77                STA     <FACt_3         ; save temp mantissa3
0041DD  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
0041DF  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
0041E1  1  85 76                STA     <FACt_2         ; save temp mantissa2
0041E3  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
0041E5  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
0041E7  1  85 75                STA     <FACt_1         ; save temp mantissa1
0041E9  1               LAB_2640:
0041E9  1  66 75                ROR     <FACt_1         ; shift temp mantissa1
0041EB  1  66 76                ROR     <FACt_2         ; shift temp mantissa2
0041ED  1  66 77                ROR     <FACt_3         ; shift temp mantissa3
0041EF  1  66 B9                ROR     <FAC1_r         ; shift temp rounding byte
0041F1  1  98                   TYA                     ; get byte back
0041F2  1  4A                   LSR     A               ; shift byte
0041F3  1  D0 DE                BNE     LAB_262A        ; loop if all bits not done
0041F5  1               
0041F5  1               LAB_264C:
0041F5  1  60                   RTS
0041F6  1               
0041F6  1               ; unpack memory (AY) into FAC2
0041F6  1               
0041F6  1               LAB_264D:
0041F6  1  85 71                STA     <ut1_pl         ; save pointer low byte
0041F8  1  84 72                STY     <ut1_ph         ; save pointer high byte
0041FA  1  A0 03                LDY     #$03            ; 4 bytes to get (0-3)
0041FC  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa3
004200  1  B5 71 C9 00  
004204  1  D0 04 A2 00  
004212  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004214  1  88                   DEY                     ; decrement index
004215  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa2
004219  1  B5 71 C9 00  
00421D  1  D0 04 A2 00  
00422B  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
00422D  1  88                   DEY                     ; decrement index
00422E  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa1+sign
004232  1  B5 71 C9 00  
004236  1  D0 04 A2 00  
004244  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
004246  1  45 B0                EOR     <FAC1_s         ; EOR with FAC1 sign (b7)
004248  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00424A  1  A5 B7                LDA     <FAC2_s         ; recover FAC2 sign (b7)
00424C  1  09 80                ORA     #$80            ; set 1xxx xxx (set normal bit)
00424E  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004250  1  88                   DEY                     ; decrement index
004251  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get exponent byte
004255  1  B5 71 C9 00  
004259  1  D0 04 A2 00  
004267  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
004269  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00426B  1  60                   RTS
00426C  1               
00426C  1               ; test and adjust accumulators
00426C  1               
00426C  1               LAB_2673:
00426C  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
00426E  1               LAB_2675:
00426E  1  F0 1D                BEQ     LAB_2696        ; branch if FAC2 = $00 (handle underflow)
004270  1               
004270  1  18                   CLC                     ; clear carry for add
004271  1  65 AC                ADC     <FAC1_e         ; add FAC1 exponent
004273  1  90 04                BCC     LAB_2680        ; branch if sum of exponents <$0100
004275  1               
004275  1  30 31                BMI     LAB_269B        ; do overflow error
004277  1               
004277  1  18                   CLC                     ; clear carry for the add
004278  1  2C                   .BYTE   $2C             ; makes next line BIT $1410
004279  1               LAB_2680:
004279  1  10 12                BPL     LAB_2696        ; if +ve go handle underflow
00427B  1               
00427B  1  69 80                ADC     #$80            ; adjust exponent
00427D  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
00427F  1  D0 03                BNE     LAB_268B        ; branch if not zero
004281  1               
004281  1  4C BF 40             JMP     LAB_24F5        ; save FAC1 sign and return
004284  1               
004284  1               LAB_268B:
004284  1  A5 B8                LDA     <FAC_sc         ; get sign compare (FAC1 EOR FAC2)
004286  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004288  1               LAB_268F:
004288  1  60                   RTS
004289  1               
004289  1               ; handle overflow and underflow
004289  1               
004289  1               LAB_2690:
004289  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00428B  1  10 1B                BPL     LAB_269B        ; do overflow error
00428D  1               
00428D  1               ; handle underflow
00428D  1               LAB_2696:
00428D  1  68                   PLA                     ; pop return address low byte
00428E  1  68                   PLA                     ; pop return address high byte
00428F  1  4C BB 40             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
004292  1               
004292  1               ; multiply by 10
004292  1               
004292  1               LAB_269E:
004292  1  20 25 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004295  1  AA                   TAX                     ; copy exponent (set the flags)
004296  1  F0 F0                BEQ     LAB_268F        ; exit if zero
004298  1  18                   CLC                     ; clear carry for add
004299  1  69 02                ADC     #$02            ; add two to exponent (*4)
00429B  1  B0 0B                BCS     LAB_269B        ; do overflow error if > $FF
00429D  1  A2 00                LDX     #$00            ; clear byte
00429F  1  86 B8                STX     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
0042A1  1  20 40 40             JSR     LAB_247C        ; add FAC2 to FAC1 (*5)
0042A4  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*10)
0042A6  1  D0 E0                BNE     LAB_268F        ; if non zero just do RTS
0042A8  1               
0042A8  1               LAB_269B:
0042A8  1  4C 2E 41             JMP     LAB_2564        ; do overflow error and warm start
0042AB  1               
0042AB  1               ; divide by 10
0042AB  1               
0042AB  1               LAB_26B9:
0042AB  1  20 25 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0042AE  1  A9 79                LDA     #<LAB_26B5      ; set pointer to 10d low addr
0042B0  1  A0 18                LDY     #>LAB_26B5      ; set pointer to 10d high addr
0042B2  1  A2 00                LDX     #$00            ; clear sign
0042B4  1               
0042B4  1               ; divide by (AY) (X=sign)
0042B4  1               
0042B4  1               LAB_26C2:
0042B4  1  86 B8                STX     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
0042B6  1  20 38 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0042B9  1  4C BF 42             JMP     LAB_DIVIDE      ; do FAC2/FAC1
0042BC  1               
0042BC  1               ; Perform divide-by
0042BC  1               ; convert AY and do (AY)/FAC1
0042BC  1               
0042BC  1               LAB_26CA:
0042BC  1  20 F6 41             JSR     LAB_264D        ; unpack memory (AY) into FAC2
0042BF  1               
0042BF  1               ; Perform divide-into
0042BF  1               LAB_DIVIDE:
0042BF  1  F0 63                BEQ     LAB_2737        ; if zero go do /0 error
0042C1  1               
0042C1  1  20 34 44             JSR     LAB_27BA        ; round FAC1
0042C4  1  A9 00                LDA     #$00            ; clear A
0042C6  1  38                   SEC                     ; set carry for subtract
0042C7  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent (2s complement)
0042C9  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0042CB  1  20 6C 42             JSR     LAB_2673        ; test and adjust accumulators
0042CE  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
0042D0  1  F0 D6                BEQ     LAB_269B        ; if zero do overflow error
0042D2  1               
0042D2  1  A2 FF                LDX     #$FF            ; set index for pre increment
0042D4  1  A9 01                LDA     #$01            ; set bit to flag byte save
0042D6  1               LAB_26E4:
0042D6  1  A4 B4                LDY     <FAC2_1         ; get FAC2 mantissa1
0042D8  1  C4 AD                CPY     <FAC1_1         ; compare FAC1 mantissa1
0042DA  1  D0 0A                BNE     LAB_26F4        ; branch if <>
0042DC  1               
0042DC  1  A4 B5                LDY     <FAC2_2         ; get FAC2 mantissa2
0042DE  1  C4 AE                CPY     <FAC1_2         ; compare FAC1 mantissa2
0042E0  1  D0 04                BNE     LAB_26F4        ; branch if <>
0042E2  1               
0042E2  1  A4 B6                LDY     <FAC2_3         ; get FAC2 mantissa3
0042E4  1  C4 AF                CPY     <FAC1_3         ; compare FAC1 mantissa3
0042E6  1               LAB_26F4:
0042E6  1  08                   PHP                     ; save FAC2-FAC1 compare status
0042E7  1  2A                   ROL     A               ; shift the result byte
0042E8  1  90 0E                BCC     LAB_2702        ; if no carry skip the byte save
0042EA  1               
0042EA  1  A0 01                LDY     #$01            ; set bit to flag byte save
0042EC  1  E8                   INX                     ; else increment the index to FACt
0042ED  1  E0 02                CPX     #$02            ; compare with the index to <FACt_3
0042EF  1  30 04                BMI     LAB_2701        ; if not last byte just go save it
0042F1  1               
0042F1  1  D0 28                BNE     LAB_272B        ; if all done go save FAC1 rounding byte, normalise and
0042F3  1               ; return
0042F3  1               
0042F3  1  A0 40                LDY     #$40            ; set bit to flag byte save for the rounding byte
0042F5  1               LAB_2701:
0042F5  1  95 75                STA     <FACt_1,X       ; write result byte to <FACt_1 + index
0042F7  1  98                   TYA                     ; copy the next save byte flag
0042F8  1               LAB_2702:
0042F8  1  28                   PLP                     ; restore FAC2-FAC1 compare status
0042F9  1  90 14                BCC     LAB_2704        ; if FAC2 < FAC1 then skip the subtract
0042FB  1               
0042FB  1  A8                   TAY                     ; save FAC2-FAC1 compare status
0042FC  1  A5 B6                LDA     <FAC2_3         ; get FAC2 mantissa3
0042FE  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
004300  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004302  1  A5 B5                LDA     <FAC2_2         ; get FAC2 mantissa2
004304  1  E5 AE                SBC     <FAC1_2         ; subtract FAC1 mantissa2
004306  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
004308  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
00430A  1  E5 AD                SBC     <FAC1_1         ; subtract FAC1 mantissa1
00430C  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
00430E  1  98                   TYA                     ; restore FAC2-FAC1 compare status
00430F  1               
00430F  1               ; FAC2 = FAC2*2
00430F  1               LAB_2704:
00430F  1  06 B6                ASL     <FAC2_3         ; shift FAC2 mantissa3
004311  1  26 B5                ROL     <FAC2_2         ; shift FAC2 mantissa2
004313  1  26 B4                ROL     <FAC2_1         ; shift FAC2 mantissa1
004315  1  B0 CF                BCS     LAB_26F4        ; loop with no compare
004317  1               
004317  1  30 BD                BMI     LAB_26E4        ; loop with compare
004319  1               
004319  1  10 CB                BPL     LAB_26F4        ; loop always with no compare
00431B  1               
00431B  1               ; do A<<6, save as FAC1 rounding byte, normalise and return
00431B  1               
00431B  1               LAB_272B:
00431B  1  4A                   LSR     A               ; shift b1 - b0 ..
00431C  1  6A                   ROR     A               ; ..
00431D  1  6A                   ROR     A               ; .. to b7 - b6
00431E  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
004320  1  28                   PLP                     ; dump FAC2-FAC1 compare status
004321  1  4C 29 43             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
004324  1               
004324  1               ; do "Divide by zero" error
004324  1               
004324  1               LAB_2737:
004324  1  A2 14                LDX     #$14            ; error code $14 ("Divide by zero" error)
004326  1  4C A0 26             JMP     LAB_XERR        ; do error #X, then warm start
004329  1               
004329  1               ; copy temp to FAC1 and normalise
004329  1               
004329  1               LAB_273C:
004329  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
00432B  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00432D  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
00432F  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004331  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
004333  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004335  1  4C 9F 40             JMP     LAB_24D5        ; normalise FAC1 and return
004338  1               
004338  1               ; unpack memory (AY) into FAC1
004338  1               
004338  1               LAB_UFAC:
004338  1  85 71                STA     <ut1_pl         ; save pointer low byte
00433A  1  84 72                STY     <ut1_ph         ; save pointer high byte
00433C  1  A0 03                LDY     #$03            ; 4 bytes to do
00433E  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last byte
004342  1  B5 71 C9 00  
004346  1  D0 04 A2 00  
004354  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004356  1  88                   DEY                     ; decrement index
004357  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last-1 byte
00435B  1  B5 71 C9 00  
00435F  1  D0 04 A2 00  
00436D  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
00436F  1  88                   DEY                     ; decrement index
004370  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get second byte
004374  1  B5 71 C9 00  
004378  1  D0 04 A2 00  
004386  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004388  1  09 80                ORA     #$80            ; set 1xxx xxxx (add normal bit)
00438A  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00438C  1  88                   DEY                     ; decrement index
00438D  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get first byte (exponent)
004391  1  B5 71 C9 00  
004395  1  D0 04 A2 00  
0043A3  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0043A5  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
0043A7  1  60                   RTS
0043A8  1               
0043A8  1               ; pack FAC1 into <Adatal
0043A8  1               
0043A8  1               LAB_276E:
0043A8  1  A2 A4                LDX     #<Adatal        ; set pointer low byte
0043AA  1               LAB_2770:
0043AA  1  A0 00                LDY     #>Adatal        ; set pointer high byte
0043AC  1  F0 04                BEQ     LAB_2778        ; pack FAC1 into (XY) and return
0043AE  1               
0043AE  1               ; pack FAC1 into (<Lvarpl)
0043AE  1               
0043AE  1               LAB_PFAC:
0043AE  1  A6 97                LDX     <Lvarpl         ; get destination pointer low byte
0043B0  1  A4 98                LDY     <Lvarph         ; get destination pointer high byte
0043B2  1               
0043B2  1               ; pack FAC1 into (XY)
0043B2  1               
0043B2  1               LAB_2778:
0043B2  1  20 34 44             JSR     LAB_27BA        ; round FAC1
0043B5  1  86 71                STX     <ut1_pl         ; save pointer low byte
0043B7  1  84 72                STY     <ut1_ph         ; save pointer high byte
0043B9  1  A0 03                LDY     #$03            ; set index
0043BB  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0043BD  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0043C1  1  01 B5 71 C9  
0043C5  1  00 D0 04 A2  
0043D3  1  88                   DEY                     ; decrement index
0043D4  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0043D6  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0043DA  1  01 B5 71 C9  
0043DE  1  00 D0 04 A2  
0043EC  1  88                   DEY                     ; decrement index
0043ED  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0043EF  1  09 7F                ORA     #$7F            ; set bits x111 1111
0043F1  1  25 AD                AND     <FAC1_1         ; AND in FAC1 mantissa1
0043F3  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0043F7  1  01 B5 71 C9  
0043FB  1  00 D0 04 A2  
004409  1  88                   DEY                     ; decrement index
00440A  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00440C  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
004410  1  01 B5 71 C9  
004414  1  00 D0 04 A2  
004422  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004424  1  60                   RTS
004425  1               
004425  1               ; round and copy FAC1 to FAC2
004425  1               
004425  1               LAB_27AB:
004425  1  20 34 44             JSR     LAB_27BA        ; round FAC1
004428  1               
004428  1               ; copy FAC1 to FAC2
004428  1               
004428  1               LAB_27AE:
004428  1  A2 05                LDX     #$05            ; 5 bytes to copy
00442A  1               LAB_27B0:
00442A  1  B5 AB                LDA     <FAC1_e-1,X     ; get byte from FAC1,X
00442C  1  95 B2                STA     <FAC1_o,X       ; save byte at FAC2,X
00442E  1  CA                   DEX                     ; decrement count
00442F  1  D0 F9                BNE     LAB_27B0        ; loop if not all done
004431  1               
004431  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
004433  1               LAB_27B9:
004433  1  60                   RTS
004434  1               
004434  1               ; round FAC1
004434  1               
004434  1               LAB_27BA:
004434  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004436  1  F0 FB                BEQ     LAB_27B9        ; exit if zero
004438  1               
004438  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
00443A  1  90 F7                BCC     LAB_27B9        ; exit if no overflow
00443C  1               
00443C  1               ; round FAC1 (no check)
00443C  1               
00443C  1               LAB_27C2:
00443C  1  20 23 41             JSR     LAB_2559        ; increment FAC1 mantissa
00443F  1  D0 F2                BNE     LAB_27B9        ; branch if no overflow
004441  1               
004441  1  4C F4 40             JMP     LAB_252A        ; normalise FAC1 for C=1 and return
004444  1               
004444  1               ; get FAC1 sign
004444  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
004444  1               
004444  1               LAB_27CA:
004444  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004446  1  F0 09                BEQ     LAB_27D7        ; exit if zero (already correct SGN(0)=0)
004448  1               
004448  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
004448  1               ; no = 0 check
004448  1               
004448  1               LAB_27CE:
004448  1  A5 B0                LDA     <FAC1_s         ; else get FAC1 sign (b7)
00444A  1               
00444A  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
00444A  1               ; no = 0 check, sign in A
00444A  1               
00444A  1               LAB_27D0:
00444A  1  2A                   ROL     A               ; move sign bit to carry
00444B  1  A9 FF                LDA     #$FF            ; set byte for -ve result
00444D  1  B0 02                BCS     LAB_27D7        ; return if sign was set (-ve)
00444F  1               
00444F  1  A9 01                LDA     #$01            ; else set byte for +ve result
004451  1               LAB_27D7:
004451  1  60                   RTS
004452  1               
004452  1               ; perform SGN()
004452  1               
004452  1               LAB_SGN:
004452  1  20 44 44             JSR     LAB_27CA        ; get FAC1 sign
004455  1               ; return A=$FF/-ve A=$01/+ve
004455  1               ; save A as integer byte
004455  1               
004455  1               LAB_27DB:
004455  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004457  1  A9 00                LDA     #$00            ; clear A
004459  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
00445B  1  A2 88                LDX     #$88            ; set exponent
00445D  1               
00445D  1               ; set exp=X, clearFAC1 mantissa3 and normalise
00445D  1               
00445D  1               LAB_27E3:
00445D  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
00445F  1  49 FF                EOR     #$FF            ; complement it
004461  1  2A                   ROL     A               ; sign bit into carry
004462  1               
004462  1               ; set exp=X, clearFAC1 mantissa3 and normalise
004462  1               
004462  1               LAB_STFA:
004462  1  A9 00                LDA     #$00            ; clear A
004464  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004466  1  86 AC                STX     <FAC1_e         ; set FAC1 exponent
004468  1  85 B9                STA     <FAC1_r         ; clear FAC1 rounding byte
00446A  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
00446C  1  4C 9A 40             JMP     LAB_24D0        ; do ABS and normalise FAC1
00446F  1               
00446F  1               ; perform ABS()
00446F  1               
00446F  1               LAB_ABS:
00446F  1  46 B0                LSR     <FAC1_s         ; clear FAC1 sign (put zero in b7)
004471  1  60                   RTS
004472  1               
004472  1               ; compare FAC1 with (AY)
004472  1               ; returns A=$00 if FAC1 = (AY)
004472  1               ; returns A=$01 if FAC1 > (AY)
004472  1               ; returns A=$FF if FAC1 < (AY)
004472  1               
004472  1               LAB_27F8:
004472  1  85 73                STA     <ut2_pl         ; save pointer low byte
004474  1               LAB_27FA:
004474  1  84 74                STY     <ut2_ph         ; save pointer high byte
004476  1  A0 00                LDY     #$00            ; clear index
004478  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get exponent
00447C  1  B5 73 C9 00  
004480  1  D0 04 A2 00  
00448E  1  C8                   INY                     ; increment index
00448F  1  AA                   TAX                     ; copy (AY) exponent to X
004490  1  F0 B2                BEQ     LAB_27CA        ; branch if (AY) exponent=0 and get FAC1 sign
004492  1               ; A=FF,C=1/-ve A=01,C=0/+ve
004492  1               
004492  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
004496  1  B5 73 C9 00  
00449A  1  D0 04 A2 00  
0044A8  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
0044AA  1  30 9C                BMI     LAB_27CE        ; if signs <> do return A=FF,C=1/-ve
0044AC  1               ; A=01,C=0/+ve and return
0044AC  1               
0044AC  1  E4 AC                CPX     <FAC1_e         ; compare (AY) exponent with FAC1 exponent
0044AE  1  D0 56                BNE     LAB_2828        ; branch if different
0044B0  1               
0044B0  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
0044B4  1  B5 73 C9 00  
0044B8  1  D0 04 A2 00  
0044C6  1  09 80                ORA     #$80            ; normalise top bit
0044C8  1  C5 AD                CMP     <FAC1_1         ; compare with FAC1 mantissa1
0044CA  1  D0 3A                BNE     LAB_2828        ; branch if different
0044CC  1               
0044CC  1  C8                   INY                     ; increment index
0044CD  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa2
0044D1  1  B5 73 C9 00  
0044D5  1  D0 04 A2 00  
0044E3  1  C5 AE                CMP     <FAC1_2         ; compare with FAC1 mantissa2
0044E5  1  D0 1F                BNE     LAB_2828        ; branch if different
0044E7  1               
0044E7  1  C8                   INY                     ; increment index
0044E8  1  A9 7F                LDA     #$7F            ; set for 1/2 value rounding byte
0044EA  1  C5 B9                CMP     <FAC1_r         ; compare with FAC1 rounding byte (set carry)
0044EC  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa3
0044F0  1  B5 73 C9 00  
0044F4  1  D0 04 A2 00  
004502  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
004504  1  F0 28                BEQ     LAB_2850        ; exit if mantissa3 equal
004506  1               
004506  1               ; gets here if number <> FAC1
004506  1               
004506  1               LAB_2828:
004506  1               
004506  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004508  1  90 02                BCC     LAB_282E        ; branch if FAC1 > (AY)
00450A  1               
00450A  1  49 FF                EOR     #$FF            ; else toggle FAC1 sign
00450C  1               LAB_282E:
00450C  1  4C 4A 44             JMP     LAB_27D0        ; return A=FF,C=1/-ve A=01,C=0/+ve
00450F  1               
00450F  1               ; convert FAC1 floating-to-fixed
00450F  1               
00450F  1               LAB_2831:
00450F  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004511  1  F0 4A                BEQ     LAB_287F        ; if zero go clear FAC1 and return
004513  1               
004513  1  38                   SEC                     ; set carry for subtract
004514  1  E9 98                SBC     #$98            ; subtract maximum integer range exponent
004516  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
004518  1  10 09                BPL     LAB_2845        ; branch if FAC1 +ve
00451A  1               
00451A  1               ; FAC1 was -ve
00451A  1  AA                   TAX                     ; copy subtracted exponent
00451B  1  A9 FF                LDA     #$FF            ; overflow for -ve number
00451D  1  85 B2                STA     <FAC1_o         ; set FAC1 overflow byte
00451F  1  20 07 41             JSR     LAB_253D        ; twos complement FAC1 mantissa
004522  1  8A                   TXA                     ; restore subtracted exponent
004523  1               LAB_2845:
004523  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1
004525  1  C9 F9                CMP     #$F9            ; compare exponent result
004527  1  10 06                BPL     LAB_2851        ; if < 8 shifts shift FAC1 A times right and return
004529  1               
004529  1  20 45 41             JSR     LAB_257B        ; shift FAC1 A times right (> 8 shifts)
00452C  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
00452E  1               LAB_2850:
00452E  1  60                   RTS
00452F  1               
00452F  1               ; shift FAC1 A times right
00452F  1               
00452F  1               LAB_2851:
00452F  1  A8                   TAY                     ; copy shift count
004530  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004532  1  29 80                AND     #$80            ; mask sign bit only (x000 0000)
004534  1  46 AD                LSR     <FAC1_1         ; shift FAC1 mantissa1
004536  1  05 AD                ORA     <FAC1_1         ; OR sign in b7 FAC1 mantissa1
004538  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00453A  1  20 5C 41             JSR     LAB_2592        ; shift FAC1 Y times right
00453D  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
00453F  1  60                   RTS
004540  1               
004540  1               ; perform INT()
004540  1               
004540  1               LAB_INT:
004540  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004542  1  C9 98                CMP     #$98            ; compare with max int
004544  1  B0 1E                BCS     LAB_2886        ; exit if >= (already int, too big for fractional part!)
004546  1               
004546  1  20 0F 45             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
004549  1  84 B9                STY     <FAC1_r         ; save FAC1 rounding byte
00454B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00454D  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
00454F  1  49 80                EOR     #$80            ; toggle FAC1 sign
004551  1  2A                   ROL     A               ; shift into carry
004552  1  A9 98                LDA     #$98            ; set new exponent
004554  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004556  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004558  1  85 5B                STA     <Temp3          ; save for EXP() function
00455A  1  4C 9A 40             JMP     LAB_24D0        ; do ABS and normalise FAC1
00455D  1               
00455D  1               ; clear FAC1 and return
00455D  1               
00455D  1               LAB_287F:
00455D  1  85 AD                STA     <FAC1_1         ; clear FAC1 mantissa1
00455F  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
004561  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004563  1  A8                   TAY                     ; clear Y
004564  1               LAB_2886:
004564  1  60                   RTS
004565  1               
004565  1               ; get FAC1 from string
004565  1               ; this routine now handles hex and binary values from strings
004565  1               ; starting with "$" and "%" respectively
004565  1               
004565  1               LAB_2887:
004565  1  A0 00                LDY     #$00            ; clear Y
004567  1  84 5F                STY     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
004569  1  A2 09                LDX     #$09            ; set index
00456B  1               LAB_288B:
00456B  1  94 A8                STY     <numexp,x       ; clear byte
00456D  1  CA                   DEX                     ; decrement index
00456E  1  10 FB                BPL     LAB_288B        ; loop until <numexp to <negnum (and FAC1) = $00
004570  1               
004570  1  B0 03                BCS     LAB_s28FE       ; branch if 1st NOT character numeric
004572  1  4C F8 45             JMP     LAB_28FE        ; branch if 1st character numeric
004575  1               LAB_s28FE:
004575  1               
004575  1               ; get FAC1 from string .. first character wasn't numeric
004575  1               
004575  1  C9 2D                CMP     #'-'            ; else compare with "-"
004577  1  D0 04                BNE     LAB_289A        ; branch if not "-"
004579  1               
004579  1  86 B1                STX     <negnum         ; set flag for -ve number (X = $FF)
00457B  1  F0 04                BEQ     LAB_289C        ; branch always (go scan and check for hex/bin)
00457D  1               
00457D  1               ; get FAC1 from string .. first character wasn't numeric or -
00457D  1               
00457D  1               LAB_289A:
00457D  1  C9 2B                CMP     #'+'            ; else compare with "+"
00457F  1  D0 06                BNE     LAB_289D        ; branch if not "+" (go check for hex/bin)
004581  1               
004581  1               ; was "+" or "-" to start, so get next character
004581  1               
004581  1               LAB_289C:
004581  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004585  1  90 71                BCC     LAB_28FE        ; branch if numeric character
004587  1               
004587  1               ; code here for hex and binary numbers
004587  1               
004587  1               LAB_289D:
004587  1  C9 24                CMP     #'$'            ; else compare with "$"
004589  1  D0 03                BNE     LAB_NHEX        ; branch if not "$"
00458B  1               
00458B  1  4C B6 4A             JMP     LAB_CHEX        ; branch if "$"
00458E  1               
00458E  1               LAB_NHEX:
00458E  1  C9 25                CMP     #'%'            ; else compare with "%"
004590  1  D0 09                BNE     LAB_28A3        ; branch if not "%" (continue original code)
004592  1               
004592  1  4C E5 4A             JMP     LAB_CBIN        ; branch if "%"
004595  1               
004595  1               LAB_289E:
004595  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (ignore + or get next number)
004599  1               LAB_28A1:
004599  1  90 5D                BCC     LAB_28FE        ; branch if numeric character
00459B  1               
00459B  1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
00459B  1               
00459B  1               LAB_28A3:
00459B  1  C9 2E                CMP     #'.'            ; else compare with "."
00459D  1  F0 30                BEQ     LAB_28D5        ; branch if "."
00459F  1               
00459F  1               ; get FAC1 from string .. character wasn't numeric, -, + or .
00459F  1               
00459F  1  C9 45                CMP     #'E'            ; else compare with "E"
0045A1  1  D0 32                BNE     LAB_28DB        ; branch if not "E"
0045A3  1               
0045A3  1               ; was "E" so evaluate exponential part
0045A3  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0045A7  1  90 18                BCC     LAB_28C7        ; branch if numeric character
0045A9  1               
0045A9  1  C9 C9                CMP     #TK_MINUS       ; else compare with token for -
0045AB  1  F0 0E                BEQ     LAB_28C2        ; branch if token for -
0045AD  1               
0045AD  1  C9 2D                CMP     #'-'            ; else compare with "-"
0045AF  1  F0 0A                BEQ     LAB_28C2        ; branch if "-"
0045B1  1               
0045B1  1  C9 C8                CMP     #TK_PLUS        ; else compare with token for +
0045B3  1  F0 08                BEQ     LAB_28C4        ; branch if token for +
0045B5  1               
0045B5  1  C9 2B                CMP     #'+'            ; else compare with "+"
0045B7  1  F0 04                BEQ     LAB_28C4        ; branch if "+"
0045B9  1               
0045B9  1  D0 08                BNE     LAB_28C9        ; branch always
0045BB  1               
0045BB  1               LAB_28C2:
0045BB  1  66 AB                ROR     <expneg         ; set exponent -ve flag (C, which=1, into b7)
0045BD  1               LAB_28C4:
0045BD  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0045C1  1               LAB_28C7:
0045C1  1  90 5B                BCC     LAB_2925        ; branch if numeric character
0045C3  1               
0045C3  1               LAB_28C9:
0045C3  1  24 AB                BIT     <expneg         ; test exponent -ve flag
0045C5  1  10 0E                BPL     LAB_28DB        ; if +ve go evaluate exponent
0045C7  1               
0045C7  1               ; else do exponent = -exponent
0045C7  1  A9 00                LDA     #$00            ; clear result
0045C9  1  38                   SEC                     ; set carry for subtract
0045CA  1  E5 A9                SBC     <expcnt         ; subtract exponent byte
0045CC  1  4C D7 45             JMP     LAB_28DD        ; go evaluate exponent
0045CF  1               
0045CF  1               LAB_28D5:
0045CF  1  66 AA                ROR     <numdpf         ; set decimal point flag
0045D1  1  24 AA                BIT     <numdpf         ; test decimal point flag
0045D3  1  50 C0                BVC     LAB_289E        ; branch if only one decimal point so far
0045D5  1               
0045D5  1               ; evaluate exponent
0045D5  1               LAB_28DB:
0045D5  1  A5 A9                LDA     <expcnt         ; get exponent count byte
0045D7  1               LAB_28DD:
0045D7  1  38                   SEC                     ; set carry for subtract
0045D8  1  E5 A8                SBC     <numexp         ; subtract numerator exponent
0045DA  1  85 A9                STA     <expcnt         ; save exponent count byte
0045DC  1  F0 12                BEQ     LAB_28F6        ; branch if no adjustment
0045DE  1               
0045DE  1  10 09                BPL     LAB_28EF        ; else if +ve go do FAC1*10^<expcnt
0045E0  1               
0045E0  1               ; else go do FAC1/10^(0-<expcnt)
0045E0  1               LAB_28E6:
0045E0  1  20 AB 42             JSR     LAB_26B9        ; divide by 10
0045E3  1  E6 A9                INC     <expcnt         ; increment exponent count byte
0045E5  1  D0 F9                BNE     LAB_28E6        ; loop until all done
0045E7  1               
0045E7  1  F0 07                BEQ     LAB_28F6        ; branch always
0045E9  1               
0045E9  1               LAB_28EF:
0045E9  1  20 92 42             JSR     LAB_269E        ; multiply by 10
0045EC  1  C6 A9                DEC     <expcnt         ; decrement exponent count byte
0045EE  1  D0 F9                BNE     LAB_28EF        ; loop until all done
0045F0  1               
0045F0  1               LAB_28F6:
0045F0  1  A5 B1                LDA     <negnum         ; get -ve flag
0045F2  1  30 01                BMI     LAB_28FB        ; if -ve do - FAC1 and return
0045F4  1               
0045F4  1  60                   RTS
0045F5  1               
0045F5  1               ; do - FAC1 and return
0045F5  1               
0045F5  1               LAB_28FB:
0045F5  1  4C E8 47             JMP     LAB_GTHAN       ; do - FAC1 and return
0045F8  1               
0045F8  1               ; do unsigned FAC1*10+number
0045F8  1               
0045F8  1               LAB_28FE:
0045F8  1  48                   PHA                     ; save character
0045F9  1  24 AA                BIT     <numdpf         ; test decimal point flag
0045FB  1  10 02                BPL     LAB_2905        ; skip exponent increment if not set
0045FD  1               
0045FD  1  E6 A8                INC     <numexp         ; else increment number exponent
0045FF  1               LAB_2905:
0045FF  1  20 92 42             JSR     LAB_269E        ; multiply FAC1 by 10
004602  1  68                   PLA                     ; restore character
004603  1  29 0F                AND     #$0F            ; convert to binary
004605  1  20 0B 46             JSR     LAB_2912        ; evaluate new ASCII digit
004608  1  4C 95 45             JMP     LAB_289E        ; go do next character
00460B  1               
00460B  1               ; evaluate new ASCII digit
00460B  1               
00460B  1               LAB_2912:
00460B  1  48                   PHA                     ; save digit
00460C  1  20 25 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
00460F  1  68                   PLA                     ; restore digit
004610  1  20 55 44             JSR     LAB_27DB        ; save A as integer byte
004613  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
004615  1  45 B0                EOR     <FAC1_s         ; toggle with FAC1 sign (b7)
004617  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004619  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
00461B  1  4C 26 40             JMP     LAB_ADD         ; add FAC2 to FAC1 and return
00461E  1               
00461E  1               ; evaluate next character of exponential part of number
00461E  1               
00461E  1               LAB_2925:
00461E  1  A5 A9                LDA     <expcnt         ; get exponent count byte
004620  1  C9 0A                CMP     #$0A            ; compare with 10 decimal
004622  1  90 09                BCC     LAB_2934        ; branch if less
004624  1               
004624  1  A9 64                LDA     #$64            ; make all -ve exponents = -100 decimal (causes underflow)
004626  1  24 AB                BIT     <expneg         ; test exponent -ve flag
004628  1  30 25                BMI     LAB_2942        ; branch if -ve
00462A  1               
00462A  1  4C 2E 41             JMP     LAB_2564        ; else do overflow error
00462D  1               
00462D  1               LAB_2934:
00462D  1  0A                   ASL     A               ; * 2
00462E  1  0A                   ASL     A               ; * 4
00462F  1  65 A9                ADC     <expcnt         ; * 5
004631  1  0A                   ASL     A               ; * 10
004632  1  A0 00                LDY     #$00            ; set index
004634  1  8B 48 DA A2          ADCINDIRECTY Bpntrl     ; add character (will be $30 too much!)
004638  1  01 B5 C3 C9  
00463C  1  00 D0 04 A2  
00464D  1  E9 2F                SBC     #'0'-1          ; convert character to binary
00464F  1               LAB_2942:
00464F  1  85 A9                STA     <expcnt         ; save exponent count byte
004651  1  4C BD 45             JMP     LAB_28C4        ; go get next character
004654  1               
004654  1               ; print " in line [LINE #]"
004654  1               
004654  1               LAB_2953:
004654  1  A9 9F                LDA     #<LAB_LMSG      ; point to " in line " message low byte
004656  1  A0 17                LDY     #>LAB_LMSG      ; point to " in line " message high byte
004658  1  20 41 2F             JSR     LAB_18C3        ; print null terminated string from memory
00465B  1               
00465B  1               ; print Basic line #
00465B  1  A5 88                LDA     <Clineh         ; get current line high byte
00465D  1  A6 87                LDX     <Clinel         ; get current line low byte
00465F  1               
00465F  1               ; print XA as unsigned integer
00465F  1               
00465F  1               LAB_295E:
00465F  1  85 AD                STA     <FAC1_1         ; save low byte as FAC1 mantissa1
004661  1  86 AE                STX     <FAC1_2         ; save high byte as FAC1 mantissa2
004663  1  A2 90                LDX     #$90            ; set exponent to 16d bits
004665  1  38                   SEC                     ; set integer is +ve flag
004666  1  20 62 44             JSR     LAB_STFA        ; set exp=X, clearFAC1 mantissa3 and normalise
004669  1  A0 00                LDY     #$00            ; clear index
00466B  1  98                   TYA                     ; clear A
00466C  1  20 81 46             JSR     LAB_297B        ; convert FAC1 to string, skip sign character save
00466F  1  4C 41 2F             JMP     LAB_18C3        ; print null terminated string from memory and return
004672  1               
004672  1               ; convert FAC1 to ASCII string result in (AY)
004672  1               ; not any more, moved scratchpad to page 0
004672  1               
004672  1               LAB_296E:
004672  1  A0 01                LDY     #$01            ; set index = 1
004674  1  A9 20                LDA     #$20            ; character = " " (assume +ve)
004676  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
004678  1  10 02                BPL     LAB_2978        ; branch if +ve
00467A  1               
00467A  1  A9 2D                LDA     #$2D            ; else character = "-"
00467C  1               LAB_2978:
00467C  1  DA                   PHX
00467D  1  BB                   TYX
00467E  1  95 EF                STA     <Decss,X        ; save leading character (" " or "-")
004680  1  FA                   PLX
004681  1               LAB_297B:
004681  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
004683  1  84 BA                STY     <Sendl          ; save index
004685  1  C8                   INY                     ; increment index
004686  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
004688  1  D0 05                BNE     LAB_2989        ; branch if FAC1<>0
00468A  1               
00468A  1               ; exponent was $00 so FAC1 is 0
00468A  1  A9 30                LDA     #'0'            ; set character = "0"
00468C  1  4C 9E 47             JMP     LAB_2A89        ; save last character, [EOT] and exit
00468F  1               
00468F  1               ; FAC1 is some non zero value
00468F  1               LAB_2989:
00468F  1  A9 00                LDA     #$00            ; clear (number exponent count)
004691  1  E0 81                CPX     #$81            ; compare FAC1 exponent with $81 (>1.00000)
004693  1               
004693  1  B0 09                BCS     LAB_299A        ; branch if FAC1=>1
004695  1               
004695  1               ; FAC1<1
004695  1  A9 09                LDA     #<LAB_294F      ; set pointer low byte to 1,000,000
004697  1  A0 18                LDY     #>LAB_294F      ; set pointer high byte to 1,000,000
004699  1  20 A4 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
00469C  1  A9 FA                LDA     #$FA            ; set number exponent count (-6)
00469E  1               LAB_299A:
00469E  1  85 A8                STA     <numexp         ; save number exponent count
0046A0  1               LAB_299C:
0046A0  1  A9 05                LDA     #<LAB_294B      ; set pointer low byte to 999999.4375 (max before sci note)
0046A2  1  A0 18                LDY     #>LAB_294B      ; set pointer high byte to 999999.4375
0046A4  1  20 72 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0046A7  1  F0 1E                BEQ     LAB_29C3        ; exit if FAC1 = (AY)
0046A9  1  10 12                BPL     LAB_29B9        ; go do /10 if FAC1 > (AY)
0046AB  1               ; FAC1 < (AY)
0046AB  1               LAB_29A7:
0046AB  1  A9 01                LDA     #<LAB_2947      ; set pointer low byte to 99999.9375
0046AD  1  A0 18                LDY     #>LAB_2947      ; set pointer high byte to 99999.9375
0046AF  1  20 72 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0046B2  1  F0 02                BEQ     LAB_29B2        ; branch if FAC1 = (AY) (allow decimal places)
0046B4  1  10 0E                BPL     LAB_29C0        ; branch if FAC1 > (AY) (no decimal places)
0046B6  1               ; FAC1 <= (AY)
0046B6  1               LAB_29B2:
0046B6  1  20 92 42             JSR     LAB_269E        ; multiply by 10
0046B9  1  C6 A8                DEC     <numexp         ; decrement number exponent count
0046BB  1  D0 EE                BNE     LAB_29A7        ; go test again (branch always)
0046BD  1               
0046BD  1               LAB_29B9:
0046BD  1  20 AB 42             JSR     LAB_26B9        ; divide by 10
0046C0  1  E6 A8                INC     <numexp         ; increment number exponent count
0046C2  1  D0 DC                BNE     LAB_299C        ; go test again (branch always)
0046C4  1               
0046C4  1               ; now we have just the digits to do
0046C4  1               
0046C4  1               LAB_29C0:
0046C4  1  20 1F 40             JSR     LAB_244E        ; add 0.5 to FAC1 (round FAC1)
0046C7  1               LAB_29C3:
0046C7  1  20 0F 45             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0046CA  1  A2 01                LDX     #$01            ; set default digits before dp = 1
0046CC  1  A5 A8                LDA     <numexp         ; get number exponent count
0046CE  1  18                   CLC                     ; clear carry for add
0046CF  1  69 07                ADC     #$07            ; up to 6 digits before point
0046D1  1  30 09                BMI     LAB_29D8        ; if -ve then 1 digit before dp
0046D3  1               
0046D3  1  C9 08                CMP     #$08            ; A>=8 if n>=1E6
0046D5  1  B0 06                BCS     LAB_29D9        ; branch if >= $08
0046D7  1               
0046D7  1               ; carry is clear
0046D7  1  69 FF                ADC     #$FF            ; take 1 from digit count
0046D9  1  AA                   TAX                     ; copy to A
0046DA  1  A9 02                LDA     #$02            ;.set exponent adjust
0046DC  1               LAB_29D8:
0046DC  1  38                   SEC                     ; set carry for subtract
0046DD  1               LAB_29D9:
0046DD  1  E9 02                SBC     #$02            ; -2
0046DF  1  85 A9                STA     <expcnt         ;.save exponent adjust
0046E1  1  86 A8                STX     <numexp         ; save digits before dp count
0046E3  1  8A                   TXA                     ; copy to A
0046E4  1  F0 02                BEQ     LAB_29E4        ; branch if no digits before dp
0046E6  1               
0046E6  1  10 17                BPL     LAB_29F7        ; branch if digits before dp
0046E8  1               
0046E8  1               LAB_29E4:
0046E8  1  A4 BA                LDY     <Sendl          ; get output string index
0046EA  1  A9 2E                LDA     #$2E            ; character "."
0046EC  1  C8                   INY                     ; increment index
0046ED  1  DA                   PHX
0046EE  1  BB                   TYX
0046EF  1  95 EF                STA     <Decss,X        ; save to output string
0046F1  1  FA                   PLX
0046F2  1  8A                   TXA                     ;.
0046F3  1  F0 08                BEQ     LAB_29F5        ;.
0046F5  1               
0046F5  1  A9 30                LDA     #'0'            ; character "0"
0046F7  1  C8                   INY                     ; increment index
0046F8  1  DA                   PHX
0046F9  1  BB                   TYX
0046FA  1  95 EF                STA     <Decss,X        ; save to output string
0046FC  1  FA                   PLX
0046FD  1               LAB_29F5:
0046FD  1  84 BA                STY     <Sendl          ; save output string index
0046FF  1               LAB_29F7:
0046FF  1  A0 00                LDY     #$00            ; clear index (point to 100,000)
004701  1  A2 80                LDX     #$80            ;
004703  1               LAB_29FB:
004703  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004705  1  18                   CLC                     ; clear carry for add
004706  1  79 7F 18             ADC     LAB_2A9C,Y      ; add -ve LSB
004709  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
00470B  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00470D  1  79 7E 18             ADC     LAB_2A9B,Y      ; add -ve NMSB
004710  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004712  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004714  1  79 7D 18             ADC     LAB_2A9A,Y      ; add -ve MSB
004717  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004719  1  E8                   INX                     ;
00471A  1  B0 04                BCS     LAB_2A18        ;
00471C  1               
00471C  1  10 E5                BPL     LAB_29FB        ; not -ve so try again
00471E  1               
00471E  1  30 02                BMI     LAB_2A1A        ;
004720  1               
004720  1               LAB_2A18:
004720  1  30 E1                BMI     LAB_29FB        ;
004722  1               
004722  1               LAB_2A1A:
004722  1  8A                   TXA                     ;
004723  1  90 04                BCC     LAB_2A21        ;
004725  1               
004725  1  49 FF                EOR     #$FF            ;
004727  1  69 0A                ADC     #$0A            ;
004729  1               LAB_2A21:
004729  1  69 2F                ADC     #'0'-1          ; add "0"-1 to result
00472B  1  C8                   INY                     ; increment index ..
00472C  1  C8                   INY                     ; .. to next less ..
00472D  1  C8                   INY                     ; .. power of ten
00472E  1  84 95                STY     <Cvaral         ; save as current var address low byte
004730  1  A4 BA                LDY     <Sendl          ; get output string index
004732  1  C8                   INY                     ; increment output string index
004733  1  AA                   TAX                     ; copy character to X
004734  1  29 7F                AND     #$7F            ; mask out top bit
004736  1  DA                   PHX
004737  1  BB                   TYX
004738  1  95 EF                STA     <Decss,X        ; save to output string
00473A  1  FA                   PLX
00473B  1  C6 A8                DEC     <numexp         ; decrement # of characters before the dp
00473D  1  D0 08                BNE     LAB_2A3B        ; branch if still characters to do
00473F  1               
00473F  1               ; else output the point
00473F  1  A9 2E                LDA     #$2E            ; character "."
004741  1  C8                   INY                     ; increment output string index
004742  1  DA                   PHX
004743  1  BB                   TYX
004744  1  95 EF                STA     <Decss,X        ; save to output string
004746  1  FA                   PLX
004747  1               LAB_2A3B:
004747  1  84 BA                STY     <Sendl          ; save output string index
004749  1  A4 95                LDY     <Cvaral         ; get current var address low byte
00474B  1  8A                   TXA                     ; get character back
00474C  1  49 FF                EOR     #$FF            ;
00474E  1  29 80                AND     #$80            ;
004750  1  AA                   TAX                     ;
004751  1  C0 12                CPY     #$12            ; compare index with max
004753  1  D0 AE                BNE     LAB_29FB        ; loop if not max
004755  1               
004755  1               ; now remove trailing zeroes
004755  1  A4 BA                LDY     <Sendl          ; get output string index
004757  1               LAB_2A4B:
004757  1  DA                   PHX
004758  1  BB                   TYX
004759  1  B5 EF                LDA     <Decss,X        ; get character from output string
00475B  1  FA                   PLX
00475C  1  88                   DEY                     ; decrement output string index
00475D  1  C9 30                CMP     #'0'            ; compare with "0"
00475F  1  F0 F6                BEQ     LAB_2A4B        ; loop until non "0" character found
004761  1               
004761  1  C9 2E                CMP     #'.'            ; compare with "."
004763  1  F0 01                BEQ     LAB_2A58        ; branch if was dp
004765  1               
004765  1               ; restore last character
004765  1  C8                   INY                     ; increment output string index
004766  1               LAB_2A58:
004766  1  A9 2B                LDA     #$2B            ; character "+"
004768  1  A6 A9                LDX     <expcnt         ; get exponent count
00476A  1  F0 37                BEQ     LAB_2A8C        ; if zero go set null terminator and exit
00476C  1               
00476C  1               ; exponent isn't zero so write exponent
00476C  1  10 08                BPL     LAB_2A68        ; branch if exponent count +ve
00476E  1               
00476E  1  A9 00                LDA     #$00            ; clear A
004770  1  38                   SEC                     ; set carry for subtract
004771  1  E5 A9                SBC     <expcnt         ; subtract exponent count adjust (convert -ve to +ve)
004773  1  AA                   TAX                     ; copy exponent count to X
004774  1  A9 2D                LDA     #'-'            ; character "-"
004776  1               LAB_2A68:
004776  1  DA                   PHX
004777  1  BB                   TYX
004778  1  95 F1                STA     <Decss+2,X      ; save to output string
00477A  1  A9 45                LDA     #$45            ; character "E"
00477C  1  95 F0                STA     <Decss+1,X      ; save exponent sign to output string
00477E  1  FA                   PLX
00477F  1  8A                   TXA                     ; get exponent count back
004780  1  A2 2F                LDX     #'0'-1          ; one less than "0" character
004782  1  38                   SEC                     ; set carry for subtract
004783  1               LAB_2A74:
004783  1  E8                   INX                     ; increment 10's character
004784  1  E9 0A                SBC     #$0A            ;.subtract 10 from exponent count
004786  1  B0 FB                BCS     LAB_2A74        ; loop while still >= 0
004788  1               
004788  1  69 3A                ADC     #':'            ; add character ":" ($30+$0A, result is 10 less that value)
00478A  1  DA                   PHX
00478B  1  BB                   TYX
00478C  1  95 F3                STA     <Decss+4,X      ; save to output string
00478E  1  FA                   PLX
00478F  1  8A                   TXA                     ; copy 10's character
004790  1  DA                   PHX
004791  1  BB                   TYX
004792  1  95 F2                STA     <Decss+3,X      ; save to output string
004794  1  FA                   PLX
004795  1  A9 00                LDA     #$00            ; set null terminator
004797  1  DA                   PHX
004798  1  BB                   TYX
004799  1  95 F4                STA     <Decss+5,X      ; save to output string
00479B  1  FA                   PLX
00479C  1  F0 0C                BEQ     LAB_2A91        ; go set string pointer (AY) and exit (branch always)
00479E  1               
00479E  1               ; save last character, [EOT] and exit
00479E  1               LAB_2A89:
00479E  1  DA                   PHX
00479F  1  BB                   TYX
0047A0  1  95 EF                STA     <Decss,X        ; save last character to output string
0047A2  1  FA                   PLX
0047A3  1               ; set null terminator and exit
0047A3  1               LAB_2A8C:
0047A3  1  A9 00                LDA     #$00            ; set null terminator
0047A5  1  DA                   PHX
0047A6  1  BB                   TYX
0047A7  1  95 F0                STA     <Decss+1,X      ; save after last character
0047A9  1  FA                   PLX
0047AA  1               ; set string pointer (AY) and exit
0047AA  1               LAB_2A91:
0047AA  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
0047AC  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
0047AE  1  60                   RTS
0047AF  1               
0047AF  1               ; perform power function
0047AF  1               
0047AF  1               LAB_POWER:
0047AF  1  F0 42                BEQ     LAB_EXP         ; go do  EXP()
0047B1  1               
0047B1  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
0047B3  1  D0 03                BNE     LAB_2ABF        ; branch if FAC2<>0
0047B5  1               
0047B5  1  4C BD 40             JMP     LAB_24F3        ; clear FAC1 exponent and sign and return
0047B8  1               
0047B8  1               LAB_2ABF:
0047B8  1  A2 9C                LDX     #<func_l        ; set destination pointer low byte
0047BA  1  A0 00                LDY     #>func_l        ; set destination pointer high byte
0047BC  1  20 B2 43             JSR     LAB_2778        ; pack FAC1 into (XY)
0047BF  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0047C1  1  10 0F                BPL     LAB_2AD9        ; branch if FAC2>0
0047C3  1               
0047C3  1               ; else FAC2 is -ve and can only be raised to an
0047C3  1               ; integer power which gives an x +j0 result
0047C3  1  20 40 45             JSR     LAB_INT         ; perform INT
0047C6  1  A9 9C                LDA     #<func_l        ; set source pointer low byte
0047C8  1  A0 00                LDY     #>func_l        ; set source pointer high byte
0047CA  1  20 72 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0047CD  1  D0 03                BNE     LAB_2AD9        ; branch if FAC1 <> (AY) to allow Function Call error
0047CF  1               ; this will leave FAC1 -ve and cause a Function Call
0047CF  1               ; error when LOG() is called
0047CF  1               
0047CF  1  98                   TYA                     ; clear sign b7
0047D0  1  A4 5B                LDY     <Temp3          ; save mantissa 3 from INT() function as sign in Y
0047D2  1               ; for possible later negation, b0
0047D2  1               LAB_2AD9:
0047D2  1  20 2A 40             JSR     LAB_279D        ; save FAC1 sign and copy ABS(FAC2) to FAC1
0047D5  1  98                   TYA                     ; copy sign back ..
0047D6  1  48                   PHA                     ; .. and save it
0047D7  1  20 66 41             JSR     LAB_LOG         ; do LOG(n)
0047DA  1  A9 9C                LDA     #<garb_l        ; set pointer low byte
0047DC  1  A0 00                LDY     #>garb_l        ; set pointer high byte
0047DE  1  20 A4 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY) (square the value)
0047E1  1  20 F3 47             JSR     LAB_EXP         ; go do EXP(n)
0047E4  1  68                   PLA                     ; pull sign from stack
0047E5  1  4A                   LSR     A               ; b0 is to be tested, shift to Cb
0047E6  1  90 0A                BCC     LAB_2AF9        ; if no bit then exit
0047E8  1               
0047E8  1               ; Perform negation
0047E8  1               ; do - FAC1
0047E8  1               
0047E8  1               LAB_GTHAN:
0047E8  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0047EA  1  F0 06                BEQ     LAB_2AF9        ; exit if <FAC1_e = $00
0047EC  1               
0047EC  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0047EE  1  49 FF                EOR     #$FF            ; complement it
0047F0  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0047F2  1               LAB_2AF9:
0047F2  1  60                   RTS
0047F3  1               
0047F3  1               ; perform EXP()	(x^e)
0047F3  1               
0047F3  1               LAB_EXP:
0047F3  1  A9 0D                LDA     #<LAB_2AFA      ; set 1.443 pointer low byte
0047F5  1  A0 18                LDY     #>LAB_2AFA      ; set 1.443 pointer high byte
0047F7  1  20 A4 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0047FA  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
0047FC  1  69 50                ADC     #$50            ; +$50/$100
0047FE  1  90 03                BCC     LAB_2B2B        ; skip rounding if no carry
004800  1               
004800  1  20 3C 44             JSR     LAB_27C2        ; round FAC1 (no check)
004803  1               LAB_2B2B:
004803  1  85 A3                STA     <FAC2_r         ; save FAC2 rounding byte
004805  1  20 28 44             JSR     LAB_27AE        ; copy FAC1 to FAC2
004808  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00480A  1  C9 88                CMP     #$88            ; compare with EXP limit (256d)
00480C  1  90 03                BCC     LAB_2B39        ; branch if less
00480E  1               
00480E  1               LAB_2B36:
00480E  1  20 89 42             JSR     LAB_2690        ; handle overflow and underflow
004811  1               LAB_2B39:
004811  1  20 40 45             JSR     LAB_INT         ; perform INT
004814  1  A5 5B                LDA     <Temp3          ; get mantissa 3 from INT() function
004816  1  18                   CLC                     ; clear carry for add
004817  1  69 81                ADC     #$81            ; normalise +1
004819  1  F0 F3                BEQ     LAB_2B36        ; if $00 go handle overflow
00481B  1               
00481B  1  38                   SEC                     ; set carry for subtract
00481C  1  E9 01                SBC     #$01            ; now correct for exponent
00481E  1  48                   PHA                     ; save FAC2 exponent
00481F  1               
00481F  1               ; swap FAC1 and FAC2
00481F  1  A2 04                LDX     #$04            ; 4 bytes to do
004821  1               LAB_2B49:
004821  1  B5 B3                LDA     <FAC2_e,X       ; get FAC2,X
004823  1  B4 AC                LDY     <FAC1_e,X       ; get FAC1,X
004825  1  95 AC                STA     <FAC1_e,X       ; save FAC1,X
004827  1  94 B3                STY     <FAC2_e,X       ; save FAC2,X
004829  1  CA                   DEX                     ; decrement count/index
00482A  1  10 F5                BPL     LAB_2B49        ; loop if not all done
00482C  1               
00482C  1  A5 A3                LDA     <FAC2_r         ; get FAC2 rounding byte
00482E  1  85 B9                STA     <FAC1_r         ; save as FAC1 rounding byte
004830  1  20 0B 40             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
004833  1  20 E8 47             JSR     LAB_GTHAN       ; do - FAC1
004836  1  A9 11                LDA     #<LAB_2AFE      ; set counter pointer low byte
004838  1  A0 18                LDY     #>LAB_2AFE      ; set counter pointer high byte
00483A  1  20 5B 48             JSR     LAB_2B84        ; go do series evaluation
00483D  1  A9 00                LDA     #$00            ; clear A
00483F  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
004841  1  68                   PLA                     ;.get saved FAC2 exponent
004842  1  4C 6E 42             JMP     LAB_2675        ; test and adjust accumulators and return
004845  1               
004845  1               ; ^2 then series evaluation
004845  1               
004845  1               LAB_2B6E:
004845  1  85 BA                STA     <Cptrl          ; save count pointer low byte
004847  1  84 BB                STY     <Cptrh          ; save count pointer high byte
004849  1  20 A8 43             JSR     LAB_276E        ; pack FAC1 into <Adatal
00484C  1  A9 A4                LDA     #<Adatal        ; set pointer low byte (Y already $00)
00484E  1  20 A4 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
004851  1  20 5F 48             JSR     LAB_2B88        ; go do series evaluation
004854  1  A9 A4                LDA     #<Adatal        ; pointer to original # low byte
004856  1  A0 00                LDY     #>Adatal        ; pointer to original # high byte
004858  1  4C A4 41             JMP     LAB_25FB        ; do convert AY, FCA1*(AY) and return
00485B  1               
00485B  1               ; series evaluation
00485B  1               
00485B  1               LAB_2B84:
00485B  1  85 BA                STA     <Cptrl          ; save count pointer low byte
00485D  1  84 BB                STY     <Cptrh          ; save count pointer high byte
00485F  1               LAB_2B88:
00485F  1  A2 A8                LDX     #<numexp        ; set pointer low byte
004861  1  20 AA 43             JSR     LAB_2770        ; set pointer high byte and pack FAC1 into <numexp
004864  1  8B DA A2 01          LDAINDIRECTY Cptrl      ; get constants count
004868  1  B5 BA C9 00  
00486C  1  D0 04 A2 00  
00487A  1  85 B1                STA     <numcon         ; save constants count
00487C  1  A4 BA                LDY     <Cptrl          ; get count pointer low byte
00487E  1  C8                   INY                     ; increment it (now constants pointer)
00487F  1  98                   TYA                     ; copy it
004880  1  D0 02                BNE     LAB_2B97        ; skip next if no overflow
004882  1               
004882  1  E6 BB                INC     <Cptrh          ; else increment high byte
004884  1               LAB_2B97:
004884  1  85 BA                STA     <Cptrl          ; save low byte
004886  1  A4 BB                LDY     <Cptrh          ; get high byte
004888  1               LAB_2B9B:
004888  1  20 A4 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
00488B  1  A5 BA                LDA     <Cptrl          ; get constants pointer low byte
00488D  1  A4 BB                LDY     <Cptrh          ; get constants pointer high byte
00488F  1  18                   CLC                     ; clear carry for add
004890  1  69 04                ADC     #$04            ; +4 to  low pointer (4 bytes per constant)
004892  1  90 01                BCC     LAB_2BA8        ; skip next if no overflow
004894  1               
004894  1  C8                   INY                     ; increment high byte
004895  1               LAB_2BA8:
004895  1  85 BA                STA     <Cptrl          ; save pointer low byte
004897  1  84 BB                STY     <Cptrh          ; save pointer high byte
004899  1  20 23 40             JSR     LAB_246C        ; add (AY) to FAC1
00489C  1  A9 A8                LDA     #<numexp        ; set pointer low byte to partial @ <numexp
00489E  1  A0 00                LDY     #>numexp        ; set pointer high byte to partial @ <numexp
0048A0  1  C6 B1                DEC     <numcon         ; decrement constants count
0048A2  1  D0 E4                BNE     LAB_2B9B        ; loop until all done
0048A4  1               
0048A4  1  60                   RTS
0048A5  1               
0048A5  1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
0048A5  1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
0048A5  1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
0048A5  1               
0048A5  1               ; Entropy = 7.997442 bits per byte
0048A5  1               ; Optimum compression would reduce these 65536 bytes by 0 percent
0048A5  1               
0048A5  1               ; Chi square distribution for 65536 samples is 232.01, and
0048A5  1               ; randomly would exceed this value 75.00 percent of the time
0048A5  1               
0048A5  1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
0048A5  1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
0048A5  1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
0048A5  1               
0048A5  1               LAB_RND:
0048A5  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0048A7  1  F0 07                BEQ     NextPRN         ; do next random # if zero
0048A9  1               
0048A9  1               ; else get seed into random number store
0048A9  1  A2 E1                LDX     #<Rbyte4        ; set PRNG pointer low byte
0048AB  1  A0 00                LDY     #$00            ; set PRNG pointer high byte
0048AD  1  20 B2 43             JSR     LAB_2778        ; pack FAC1 into (XY)
0048B0  1               NextPRN:
0048B0  1  A2 AF                LDX     #$AF            ; set EOR byte
0048B2  1  A0 13                LDY     #$13            ; do this nineteen times
0048B4  1               LoopPRN:
0048B4  1  06 E2                ASL     <Rbyte1         ; shift PRNG most significant byte
0048B6  1  26 E3                ROL     <Rbyte2         ; shift PRNG middle byte
0048B8  1  26 E4                ROL     <Rbyte3         ; shift PRNG least significant byte
0048BA  1  26 E1                ROL     <Rbyte4         ; shift PRNG extra byte
0048BC  1  90 05                BCC     Ninc1           ; branch if bit 32 clear
0048BE  1               
0048BE  1  8A                   TXA                     ; set EOR byte
0048BF  1  45 E2                EOR     <Rbyte1         ; EOR PRNG extra byte
0048C1  1  85 E2                STA     <Rbyte1         ; save new PRNG extra byte
0048C3  1               Ninc1:
0048C3  1  88                   DEY                     ; decrement loop count
0048C4  1  D0 EE                BNE     LoopPRN         ; loop if not all done
0048C6  1               
0048C6  1  A2 02                LDX     #$02            ; three bytes to copy
0048C8  1               CopyPRNG:
0048C8  1  B5 E2                LDA     <Rbyte1,X       ; get PRNG byte
0048CA  1  95 AD                STA     <FAC1_1,X       ; save FAC1 byte
0048CC  1  CA                   DEX
0048CD  1  10 F9                BPL     CopyPRNG        ; loop if not complete
0048CF  1               
0048CF  1  A9 80                LDA     #$80            ; set the exponent
0048D1  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0048D3  1               
0048D3  1  0A                   ASL     A               ; clear A
0048D4  1  85 B0                STA     <FAC1_s         ; save FAC1 sign
0048D6  1               
0048D6  1  4C 9F 40             JMP     LAB_24D5        ; normalise FAC1 and return
0048D9  1               
0048D9  1               ; perform COS()
0048D9  1               
0048D9  1               LAB_COS:
0048D9  1  A9 2E                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
0048DB  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
0048DD  1  20 23 40             JSR     LAB_246C        ; add (AY) to FAC1
0048E0  1               
0048E0  1               ; perform SIN()
0048E0  1               
0048E0  1               LAB_SIN:
0048E0  1  20 25 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0048E3  1  A9 43                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
0048E5  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
0048E7  1  A6 B7                LDX     <FAC2_s         ; get FAC2 sign (b7)
0048E9  1  20 B4 42             JSR     LAB_26C2        ; divide by (AY) (X=sign)
0048EC  1  20 25 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0048EF  1  20 40 45             JSR     LAB_INT         ; perform INT
0048F2  1  A9 00                LDA     #$00            ; clear byte
0048F4  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
0048F6  1  20 0B 40             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
0048F9  1  A9 75                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
0048FB  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
0048FD  1  20 08 40             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
004900  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004902  1  48                   PHA                     ; save FAC1 sign
004903  1  10 0D                BPL     LAB_2C35        ; branch if +ve
004905  1               
004905  1               ; FAC1 sign was -ve
004905  1  20 1F 40             JSR     LAB_244E        ; add 0.5 to FAC1
004908  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00490A  1  30 09                BMI     LAB_2C38        ; branch if -ve
00490C  1               
00490C  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
00490E  1  49 FF                EOR     #$FF            ; toggle flag
004910  1  85 63                STA     <Cflag          ; save comparison evaluation flag
004912  1               LAB_2C35:
004912  1  20 E8 47             JSR     LAB_GTHAN       ; do - FAC1
004915  1               LAB_2C38:
004915  1  A9 75                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
004917  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
004919  1  20 23 40             JSR     LAB_246C        ; add (AY) to FAC1
00491C  1  68                   PLA                     ; restore FAC1 sign
00491D  1  10 03                BPL     LAB_2C45        ; branch if was +ve
00491F  1               
00491F  1               ; else correct FAC1
00491F  1  20 E8 47             JSR     LAB_GTHAN       ; do - FAC1
004922  1               LAB_2C45:
004922  1  A9 32                LDA     #<LAB_2C84      ; set pointer low byte to counter
004924  1  A0 18                LDY     #>LAB_2C84      ; set pointer high byte to counter
004926  1  4C 45 48             JMP     LAB_2B6E        ; ^2 then series evaluation and return
004929  1               
004929  1               ; perform TAN()
004929  1               
004929  1               LAB_TAN:
004929  1  20 A8 43             JSR     LAB_276E        ; pack FAC1 into <Adatal
00492C  1  A9 00                LDA     #$00            ; clear byte
00492E  1  85 63                STA     <Cflag          ; clear comparison evaluation flag
004930  1  20 E0 48             JSR     LAB_SIN         ; go do SIN(n)
004933  1  A2 9C                LDX     #<func_l        ; set sin(n) pointer low byte
004935  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
004937  1  20 B2 43             JSR     LAB_2778        ; pack FAC1 into (XY)
00493A  1  A9 A4                LDA     #<Adatal        ; set n pointer low addr
00493C  1  A0 00                LDY     #>Adatal        ; set n pointer high addr
00493E  1  20 38 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004941  1  A9 00                LDA     #$00            ; clear byte
004943  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
004945  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
004947  1  20 51 49             JSR     LAB_2C74        ; save flag and go do series evaluation
00494A  1               
00494A  1  A9 9C                LDA     #<func_l        ; set sin(n) pointer low byte
00494C  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
00494E  1  4C BC 42             JMP     LAB_26CA        ; convert AY and do (AY)/FAC1
004951  1               
004951  1               LAB_2C74:
004951  1  48                   PHA                     ; save comparison evaluation flag
004952  1  4C 12 49             JMP     LAB_2C35        ; go do series evaluation
004955  1               
004955  1               ; perform USR()
004955  1               
004955  1               LAB_USR:
004955  1  20 0A 00             JSR     Usrjmp          ; call user code
004958  1  4C CF 32             JMP     LAB_1BFB        ; scan for ")", else do syntax error then warm start
00495B  1               
00495B  1               ; perform ATN()
00495B  1               
00495B  1               LAB_ATN:
00495B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00495D  1  48                   PHA                     ; save sign
00495E  1  10 03                BPL     LAB_2CA1        ; branch if +ve
004960  1               
004960  1  20 E8 47             JSR     LAB_GTHAN       ; else do - FAC1
004963  1               LAB_2CA1:
004963  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004965  1  48                   PHA                     ; push exponent
004966  1  C9 81                CMP     #$81            ; compare with 1
004968  1  90 07                BCC     LAB_2CAF        ; branch if FAC1<1
00496A  1               
00496A  1  A9 68                LDA     #<LAB_259C      ; set 1 pointer low byte
00496C  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
00496E  1  20 BC 42             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1
004971  1               LAB_2CAF:
004971  1  A9 47                LDA     #<LAB_2CC9      ; set pointer low byte to counter
004973  1  A0 18                LDY     #>LAB_2CC9      ; set pointer high byte to counter
004975  1  20 45 48             JSR     LAB_2B6E        ; ^2 then series evaluation
004978  1  68                   PLA                     ; restore old FAC1 exponent
004979  1  C9 81                CMP     #$81            ; compare with 1
00497B  1  90 07                BCC     LAB_2CC2        ; branch if FAC1<1
00497D  1               
00497D  1  A9 2E                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
00497F  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
004981  1  20 08 40             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
004984  1               LAB_2CC2:
004984  1  68                   PLA                     ; restore FAC1 sign
004985  1  10 16                BPL     LAB_2D04        ; exit if was +ve
004987  1               
004987  1  4C E8 47             JMP     LAB_GTHAN       ; else do - FAC1 and return
00498A  1               
00498A  1               ; perform BITSET
00498A  1               
00498A  1               LAB_BITSET:
00498A  1  20 E5 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
00498D  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
00498F  1  B0 20                BCS     FCError         ; branch if > 7
004991  1               
004991  1  A9 00                LDA     #$00            ; clear A
004993  1  38                   SEC                     ; set the carry
004994  1               S_Bits:
004994  1  2A                   ROL     A               ; shift bit
004995  1  CA                   DEX                     ; decrement bit number
004996  1  10 FC                BPL     S_Bits          ; loop if still +ve
004998  1               
004998  1  E8                   INX                     ; make X = $00
004999  1  01 11                ORA     (<Itempl,X)     ; or with byte via temporary integer (addr)
00499B  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
00499D  1               LAB_2D04:
00499D  1  60                   RTS
00499E  1               
00499E  1               ; perform BITCLR
00499E  1               
00499E  1               LAB_BITCLR:
00499E  1  20 E5 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
0049A1  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
0049A3  1  B0 0C                BCS     FCError         ; branch if > 7
0049A5  1               
0049A5  1  A9 FF                LDA     #$FF            ; set A
0049A7  1               S_Bitc:
0049A7  1  2A                   ROL     A               ; shift bit
0049A8  1  CA                   DEX                     ; decrement bit number
0049A9  1  10 FC                BPL     S_Bitc          ; loop if still +ve
0049AB  1               
0049AB  1  E8                   INX                     ; make X = $00
0049AC  1  21 11                AND     (<Itempl,X)     ; and with byte via temporary integer (addr)
0049AE  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
0049B0  1  60                   RTS
0049B1  1               
0049B1  1               FCError:
0049B1  1  4C 43 36             JMP     LAB_FCER        ; do function call error then warm start
0049B4  1               
0049B4  1               ; perform BITTST()
0049B4  1               
0049B4  1               LAB_BTST:
0049B4  1  22 BC 00 00          JSL     LAB_IGBY        ; increment BASIC pointer
0049B8  1  20 E5 3E             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
0049BB  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
0049BD  1  B0 F2                BCS     FCError         ; branch if > 7
0049BF  1               
0049BF  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
0049C3  1  C9 29                CMP     #')'            ; is next character ")"
0049C5  1  F0 03                BEQ     TST_OK          ; if ")" go do rest of function
0049C7  1               
0049C7  1  4C E4 32             JMP     LAB_SNER        ; do syntax error then warm start
0049CA  1               
0049CA  1               TST_OK:
0049CA  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
0049CE  1  A9 00                LDA     #$00            ; clear A
0049D0  1  38                   SEC                     ; set the carry
0049D1  1               T_Bits:
0049D1  1  2A                   ROL     A               ; shift bit
0049D2  1  CA                   DEX                     ; decrement bit number
0049D3  1  10 FC                BPL     T_Bits          ; loop if still +ve
0049D5  1               
0049D5  1  E8                   INX                     ; make X = $00
0049D6  1  21 11                AND     (<Itempl,X)     ; AND with byte via temporary integer (addr)
0049D8  1  F0 02                BEQ     LAB_NOTT        ; branch if zero (already correct)
0049DA  1               
0049DA  1  A9 FF                LDA     #$FF            ; set for -1 result
0049DC  1               LAB_NOTT:
0049DC  1  4C 55 44             JMP     LAB_27DB        ; go do SGN tail
0049DF  1               
0049DF  1               ; perform BIN$()
0049DF  1               
0049DF  1               LAB_BINS:
0049DF  1  E0 19                CPX     #$19            ; max + 1
0049E1  1  B0 71                BCS     BinFErr         ; exit if too big ( > or = )
0049E3  1               
0049E3  1  86 78                STX     <TempB          ; save # of characters ($00 = leading zero remove)
0049E5  1  A9 18                LDA     #$18            ; need A byte long space
0049E7  1  20 EA 38             JSR     LAB_MSSP        ; make string space A bytes long
0049EA  1  A0 17                LDY     #$17            ; set index
0049EC  1  A2 18                LDX     #$18            ; character count
0049EE  1               NextB1:
0049EE  1  46 11                LSR     <nums_1         ; shift highest byte
0049F0  1  66 12                ROR     <nums_2         ; shift middle byte
0049F2  1  66 13                ROR     <nums_3         ; shift lowest byte bit 0 to carry
0049F4  1  8A                   TXA                     ; load with "0"/2
0049F5  1  2A                   ROL     A               ; shift in carry
0049F6  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string + index
0049FA  1  01 B5 AD C9  
0049FE  1  00 D0 04 A2  
004A0C  1  88                   DEY                     ; decrement index
004A0D  1  10 DF                BPL     NextB1          ; loop if not done
004A0F  1               
004A0F  1  A5 78                LDA     <TempB          ; get # of characters
004A11  1  F0 0A                BEQ     EndBHS          ; branch if truncate
004A13  1               
004A13  1  AA                   TAX                     ; copy length to X
004A14  1  38                   SEC                     ; set carry for add !
004A15  1  49 FF                EOR     #$FF            ; 1's complement
004A17  1  69 18                ADC     #$18            ; add 24d
004A19  1  F0 30                BEQ     GoPr2           ; if zero print whole string
004A1B  1               
004A1B  1  D0 23                BNE     GoPr1           ; else go make output string
004A1D  1               
004A1D  1               ; this is the exit code and is also used by HEX$()
004A1D  1               ; truncate string to remove leading "0"s
004A1D  1               
004A1D  1               EndBHS:
004A1D  1  A8                   TAY                     ; clear index (A=0, X=length here)
004A1E  1               NextB2:
004A1E  1  8B DA A2 01          LDAINDIRECTY str_pl     ; get character from string
004A22  1  B5 AD C9 00  
004A26  1  D0 04 A2 00  
004A34  1  C9 30                CMP     #'0'            ; compare with "0"
004A36  1  D0 07                BNE     GoPr            ; if not "0" then go print string from here
004A38  1               
004A38  1  CA                   DEX                     ; decrement character count
004A39  1  F0 03                BEQ     GoPr3           ; if zero then end of string so go print it
004A3B  1               
004A3B  1  C8                   INY                     ; else increment index
004A3C  1  10 E0                BPL     NextB2          ; loop always
004A3E  1               
004A3E  1               ; make fixed length output string - ignore overflows!
004A3E  1               
004A3E  1               GoPr3:
004A3E  1  E8                   INX                     ; need at least 1 character
004A3F  1               GoPr:
004A3F  1  98                   TYA                     ; copy result
004A40  1               GoPr1:
004A40  1  18                   CLC                     ; clear carry for add
004A41  1  65 AD                ADC     <str_pl         ; add low address
004A43  1  85 AD                STA     <str_pl         ; save low address
004A45  1  A9 00                LDA     #$00            ; do high byte
004A47  1  65 AE                ADC     <str_ph         ; add high address
004A49  1  85 AE                STA     <str_ph         ; save high address
004A4B  1               GoPr2:
004A4B  1  86 AC                STX     <str_ln         ; X holds string length
004A4D  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
004A51  1  4C 4D 39             JMP     LAB_RTST        ; check for space on descriptor stack then put address
004A54  1               ; and length on descriptor stack and update stack pointers
004A54  1               
004A54  1               BinFErr:
004A54  1  4C 43 36             JMP     LAB_FCER        ; do function call error then warm start
004A57  1               
004A57  1               ; perform HEX$()
004A57  1               
004A57  1               LAB_HEXS:
004A57  1  E0 07                CPX     #$07            ; max + 1
004A59  1  B0 F9                BCS     BinFErr         ; exit if too big ( > or = )
004A5B  1               
004A5B  1  86 78                STX     <TempB          ; save # of characters
004A5D  1               
004A5D  1  A9 06                LDA     #$06            ; need 6 bytes for string
004A5F  1  20 EA 38             JSR     LAB_MSSP        ; make string space A bytes long
004A62  1  A0 05                LDY     #$05            ; set string index
004A64  1               
004A64  1  F8                   SED                     ; need decimal mode for nibble convert
004A65  1  A5 13                LDA     <nums_3         ; get lowest byte
004A67  1  20 85 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004A6A  1  A5 12                LDA     <nums_2         ; get middle byte
004A6C  1  20 85 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004A6F  1  A5 11                LDA     <nums_1         ; get highest byte
004A71  1  20 85 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004A74  1  D8                   CLD                     ; back to binary
004A75  1               
004A75  1  A2 06                LDX     #$06            ; character count
004A77  1  A5 78                LDA     <TempB          ; get # of characters
004A79  1  F0 A2                BEQ     EndBHS          ; branch if truncate
004A7B  1               
004A7B  1  AA                   TAX                     ; copy length to X
004A7C  1  38                   SEC                     ; set carry for add !
004A7D  1  49 FF                EOR     #$FF            ; 1's complement
004A7F  1  69 06                ADC     #$06            ; add 6d
004A81  1  F0 C8                BEQ     GoPr2           ; if zero print whole string
004A83  1               
004A83  1  D0 BB                BNE     GoPr1           ; else go make output string (branch always)
004A85  1               
004A85  1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
004A85  1               
004A85  1               LAB_A2HX:
004A85  1  AA                   TAX                     ; save byte
004A86  1  29 0F                AND     #$0F            ; mask off top bits
004A88  1  20 90 4A             JSR     LAB_AL2X        ; convert low nibble to ASCII and output
004A8B  1  8A                   TXA                     ; get byte back
004A8C  1  4A                   LSR     A               ; /2	shift high nibble to low nibble
004A8D  1  4A                   LSR     A               ; /4
004A8E  1  4A                   LSR     A               ; /8
004A8F  1  4A                   LSR     A               ; /16
004A90  1               LAB_AL2X:
004A90  1  C9 0A                CMP     #$0A            ; set carry for +1 if >9
004A92  1  69 30                ADC     #'0'            ; add ASCII "0"
004A94  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string
004A98  1  01 B5 AD C9  
004A9C  1  00 D0 04 A2  
004AAA  1  88                   DEY                     ; decrement counter
004AAB  1  60                   RTS
004AAC  1               
004AAC  1               LAB_NLTO:
004AAC  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004AAE  1  A9 00                LDA     #$00            ; clear sign compare
004AB0  1               LAB_MLTE:
004AB0  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004AB2  1  8A                   TXA                     ; restore character
004AB3  1  20 0B 46             JSR     LAB_2912        ; evaluate new ASCII digit
004AB6  1               
004AB6  1               ; gets here if the first character was "$" for hex
004AB6  1               ; get hex number
004AB6  1               
004AB6  1               LAB_CHEX:
004AB6  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004ABA  1  90 0A                BCC     LAB_ISHN        ; branch if numeric character
004ABC  1               
004ABC  1  09 20                ORA     #$20            ; case convert, allow "A" to "F" and "a" to "f"
004ABE  1  E9 61                SBC     #'a'            ; subtract "a" (carry set here)
004AC0  1  C9 06                CMP     #$06            ; compare normalised with $06 (max+1)
004AC2  1  B0 2B                BCS     LAB_EXCH        ; exit if >"f" or <"0"
004AC4  1               
004AC4  1  69 0A                ADC     #$0A            ; convert to nibble
004AC6  1               LAB_ISHN:
004AC6  1  29 0F                AND     #$0F            ; convert to binary
004AC8  1  AA                   TAX                     ; save nibble
004AC9  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004ACB  1  F0 E3                BEQ     LAB_MLTE        ; skip multiply if zero
004ACD  1               
004ACD  1  69 04                ADC     #$04            ; add four to exponent (*16 - carry clear here)
004ACF  1  90 DB                BCC     LAB_NLTO        ; if no overflow do evaluate digit
004AD1  1               
004AD1  1               LAB_MLTO:
004AD1  1  4C 2E 41             JMP     LAB_2564        ; do overflow error and warm start
004AD4  1               
004AD4  1               LAB_NXCH:
004AD4  1  AA                   TAX                     ; save bit
004AD5  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004AD7  1  F0 06                BEQ     LAB_MLBT        ; skip multiply if zero
004AD9  1               
004AD9  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*2)
004ADB  1  F0 F4                BEQ     LAB_MLTO        ; do overflow error if = $00
004ADD  1               
004ADD  1  A9 00                LDA     #$00            ; clear sign compare
004ADF  1               LAB_MLBT:
004ADF  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004AE1  1  8A                   TXA                     ; restore bit
004AE2  1  20 0B 46             JSR     LAB_2912        ; evaluate new ASCII digit
004AE5  1               
004AE5  1               ; gets here if the first character was  "%" for binary
004AE5  1               ; get binary number
004AE5  1               
004AE5  1               LAB_CBIN:
004AE5  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004AE9  1  49 30                EOR     #'0'            ; convert "0" to 0 etc.
004AEB  1  C9 02                CMP     #$02            ; compare with max+1
004AED  1  90 E5                BCC     LAB_NXCH        ; branch exit if < 2
004AEF  1               
004AEF  1               LAB_EXCH:
004AEF  1  4C F0 45             JMP     LAB_28F6        ; evaluate -ve flag and return
004AF2  1               
004AF2  1               ; ctrl-c check routine. .includes limited "life" byte save for INGET routine
004AF2  1               ; now also the code that checks to see if an interrupt has occurred
004AF2  1               
004AF2  1               CTRLC:
004AF2  1  AF 00 02 00          LDA     f:ccflag        ; get [CTRL-C] check flag
004AF6  1  D0 21                BNE     LAB_FBA2        ; exit if inhibited
004AF8  1               
004AF8  1  20 8F 18             JSR     V_INPT          ; scan input device
004AFB  1  B0 11                BCS     LAB_FBA0        ; exit if buffer empty
004AFD  1               
004AFD  1  8F 01 02 00          STA     f:ccbyte        ; save received byte
004B01  1  A9 20                LDA     #$20            ; "life" timer for bytes
004B03  1  8F 02 02 00          STA     f:ccnull        ; set countdown
004B07  1  AF 01 02 00          LDA     f:ccbyte
004B0B  1  4C 9B 2A             JMP     LAB_1636        ; return to BASIC
004B0E  1               
004B0E  1               LAB_FBA0:
004B0E  1  AF 02 02 00          LDA     f:ccnull        ; get countdown byte
004B12  1  F0 05                BEQ     LAB_FBA2        ; exit if finished
004B14  1  3A                   DEC     A
004B15  1  8F 02 02 00          STA     f:ccnull        ; else decrement countdown
004B19  1               LAB_FBA2:
004B19  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004B1B  1  20 28 4B             JSR     LAB_CKIN        ; go check interrupt
004B1E  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004B20  1  20 28 4B             JSR     LAB_CKIN        ; go check interrupt
004B23  1  AF 01 02 00          LDA     f:ccbyte
004B27  1               LAB_CRTS:
004B27  1  60                   RTS
004B28  1               
004B28  1               ; check whichever interrupt is indexed by X
004B28  1               
004B28  1               LAB_CKIN:
004B28  1  B5 00                LDA     <PLUS_0,X       ; get interrupt flag byte
004B2A  1  10 FB                BPL     LAB_CRTS        ; branch if interrupt not enabled
004B2C  1               
004B2C  1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
004B2C  1               ; automatically enable the interrupt when we exit
004B2C  1               
004B2C  1  0A                   ASL     A               ; move happened bit to setup bit
004B2D  1  29 40                AND     #$40            ; mask happened bits
004B2F  1  F0 F6                BEQ     LAB_CRTS        ; if no interrupt then exit
004B31  1               
004B31  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004B33  1               
004B33  1  8A                   TXA                     ; copy index ..
004B34  1  A8                   TAY                     ; .. to Y
004B35  1               
004B35  1  68                   PLA                     ; dump return address low byte, call from CTRL-C
004B36  1  68                   PLA                     ; dump return address high byte
004B37  1               
004B37  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
004B39  1  20 57 26             JSR     LAB_1212        ; check room on stack for A bytes
004B3C  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
004B3E  1  48                   PHA                     ; push on stack
004B3F  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
004B41  1  48                   PHA                     ; push on stack
004B42  1  A5 88                LDA     <Clineh         ; get current line high byte
004B44  1  48                   PHA                     ; push on stack
004B45  1  A5 87                LDA     <Clinel         ; get current line low byte
004B47  1  48                   PHA                     ; push on stack
004B48  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
004B4A  1  48                   PHA                     ; push on stack
004B4B  1  DA                   PHX
004B4C  1  BB                   TYX
004B4D  1  B5 01                LDA     <PLUS_1,X       ; get interrupt code pointer low byte
004B4F  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
004B51  1  B5 02                LDA     <PLUS_2,X       ; get interrupt code pointer high byte
004B53  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
004B55  1  FA                   PLX
004B56  1  4C 3D 2A             JMP     LAB_15C2        ; go do interpreter inner loop
004B59  1               ; can't RTS, we used the stack! the RTS from the ctrl-c
004B59  1               ; check will be taken when the RETIRQ/RETNMI/RETURN is
004B59  1               ; executed at the end of the subroutine
004B59  1               
004B59  1               ; get byte from input device, no waiting
004B59  1               ; returns with carry set if byte in A
004B59  1               
004B59  1               INGET:
004B59  1  20 8F 18             JSR     V_INPT          ; call scan input device
004B5C  1  90 0B                BCC     LAB_FB95        ; if byte go reset timer
004B5E  1               
004B5E  1  AF 02 02 00          LDA     f:ccnull        ; get countdown
004B62  1  F0 0F                BEQ     LAB_FB96        ; exit if empty
004B64  1               
004B64  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004B68  1  38                   SEC                     ; flag we got a byte
004B69  1               LAB_FB95:
004B69  1  A9 00                LDA     #$00            ; clear X
004B6B  1  8F 02 02 00          STA     f:ccnull        ; clear timer because we got a byte
004B6F  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004B73  1               LAB_FB96:
004B73  1  60                   RTS
004B74  1               
004B74  1               ; these routines only enable the interrupts if the set-up flag is set
004B74  1               ; if not they have no effect
004B74  1               
004B74  1               ; perform IRQ {ON|OFF|CLEAR}
004B74  1               
004B74  1               LAB_IRQ:
004B74  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004B76  1  2C                   .BYTE   $2C             ; make next line BIT abs.
004B77  1               
004B77  1               ; perform NMI {ON|OFF|CLEAR}
004B77  1               
004B77  1               LAB_NMI:
004B77  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004B79  1  C9 93                CMP     #TK_ON          ; compare with token for ON
004B7B  1  F0 11                BEQ     LAB_INON        ; go turn on interrupt
004B7D  1               
004B7D  1  C9 C7                CMP     #TK_OFF         ; compare with token for OFF
004B7F  1  F0 07                BEQ     LAB_IOFF        ; go turn off interrupt
004B81  1               
004B81  1  49 A1                EOR     #TK_CLEAR       ; compare with token for CLEAR, A = $00 if = TK_CLEAR
004B83  1  F0 0E                BEQ     LAB_INEX        ; go clear interrupt flags and return
004B85  1               
004B85  1  4C E4 32             JMP     LAB_SNER        ; do syntax error then warm start
004B88  1               
004B88  1               LAB_IOFF:
004B88  1  A9 7F                LDA     #$7F            ; clear A
004B8A  1  35 00                AND     <PLUS_0,X       ; AND with interrupt setup flag
004B8C  1  10 05                BPL     LAB_INEX        ; go clear interrupt enabled flag and return
004B8E  1               
004B8E  1               LAB_INON:
004B8E  1  B5 00                LDA     <PLUS_0,X       ; get interrupt setup flag
004B90  1  0A                   ASL     A               ; Shift bit to enabled flag
004B91  1  15 00                ORA     <PLUS_0,X       ; OR with flag byte
004B93  1               LAB_INEX:
004B93  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004B95  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer and return
004B99  1  60                   RTS
004B9A  1               ; these routines set up the pointers and flags for the interrupt routines
004B9A  1               ; note that the interrupts are also enabled by these commands
004B9A  1               
004B9A  1               
004B9A  1               ; MAX() MIN() pre process
004B9A  1               
004B9A  1               LAB_MMPP:
004B9A  1  20 C6 31             JSR     LAB_EVEZ        ; process expression
004B9D  1  4C AD 31             JMP     LAB_CTNM        ; check if source is numeric, else do type mismatch
004BA0  1               
004BA0  1               ; perform MAX()
004BA0  1               
004BA0  1               LAB_MAX:
004BA0  1  20 D0 4B             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004BA3  1               ; pull FAC2 and compare with FAC1
004BA3  1  10 FB                BPL     LAB_MAX         ; branch if no swap to do
004BA5  1               
004BA5  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004BA7  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004BA9  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004BAB  1  20 28 40             JSR     LAB_279B        ; copy FAC2 to FAC1
004BAE  1  F0 F0                BEQ     LAB_MAX         ; go do next (branch always)
004BB0  1               
004BB0  1               ; perform MIN()
004BB0  1               
004BB0  1               LAB_MIN:
004BB0  1  20 D0 4B             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004BB3  1               ; pull FAC2 and compare with FAC1
004BB3  1  30 FB                BMI     LAB_MIN         ; branch if no swap to do
004BB5  1               
004BB5  1  F0 F9                BEQ     LAB_MIN         ; branch if no swap to do
004BB7  1               
004BB7  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004BB9  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004BBB  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004BBD  1  20 28 40             JSR     LAB_279B        ; copy FAC2 to FAC1
004BC0  1  F0 EE                BEQ     LAB_MIN         ; go do next (branch always)
004BC2  1               
004BC2  1               ; exit routine. don't bother returning to the loop code
004BC2  1               ; check for correct exit, else so syntax error
004BC2  1               
004BC2  1               LAB_MMEC:
004BC2  1  C9 29                CMP     #')'            ; is it end of function?
004BC4  1  D0 07                BNE     LAB_MMSE        ; if not do MAX MIN syntax error
004BC6  1               
004BC6  1  68                   PLA                     ; dump return address low byte
004BC7  1  68                   PLA                     ; dump return address high byte
004BC8  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to chr past ")")
004BCC  1  60                   RTS
004BCD  1               LAB_MMSE:
004BCD  1  4C E4 32             JMP     LAB_SNER        ; do syntax error then warm start
004BD0  1               
004BD0  1               ; check for next, evaluate and return or exit
004BD0  1               ; this is the routine that does most of the work
004BD0  1               
004BD0  1               LAB_PHFA:
004BD0  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
004BD4  1  C9 2C                CMP     #','            ; is there more ?
004BD6  1  D0 EA                BNE     LAB_MMEC        ; if not go do end check
004BD8  1               
004BD8  1               ; push FAC1
004BD8  1  20 34 44             JSR     LAB_27BA        ; round FAC1
004BDB  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004BDD  1  09 7F                ORA     #$7F            ; set all non sign bits
004BDF  1  25 AD                AND     <FAC1_1         ; AND FAC1 mantissa1 (AND in sign bit)
004BE1  1  48                   PHA                     ; push on stack
004BE2  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004BE4  1  48                   PHA                     ; push on stack
004BE5  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004BE7  1  48                   PHA                     ; push on stack
004BE8  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004BEA  1  48                   PHA                     ; push on stack
004BEB  1               
004BEB  1  22 BC 00 00          JSL     LAB_IGBY        ; scan and get next BASIC byte (after ",")
004BEF  1  20 AA 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
004BF2  1               ; else do type mismatch
004BF2  1               
004BF2  1               ; pop FAC2 (MAX/MIN expression so far)
004BF2  1  68                   PLA                     ; pop exponent
004BF3  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
004BF5  1  68                   PLA                     ; pop mantissa3
004BF6  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004BF8  1  68                   PLA                     ; pop mantissa1
004BF9  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
004BFB  1  68                   PLA                     ; pop sign/mantissa1
004BFC  1  85 B4                STA     <FAC2_1         ; save FAC2 sign/mantissa1
004BFE  1  85 B7                STA     <FAC2_s         ; save FAC2 sign
004C00  1               
004C00  1               ; compare FAC1 with (packed) FAC2
004C00  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
004C02  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
004C04  1  4C 72 44             JMP     LAB_27F8        ; compare FAC1 with FAC2 (AY) and return
004C07  1               ; returns A=$00 if FAC1 = (AY)
004C07  1               ; returns A=$01 if FAC1 > (AY)
004C07  1               ; returns A=$FF if FAC1 < (AY)
004C07  1               
004C07  1               ; perform WIDTH
004C07  1               
004C07  1               LAB_WDTH:
004C07  1  C9 2C                CMP     #','            ; is next byte ","
004C09  1  F0 1C                BEQ     LAB_TBSZ        ; if so do tab size
004C0B  1               
004C0B  1  20 5A 3E             JSR     LAB_GTBY        ; get byte parameter
004C0E  1  8A                   TXA                     ; copy width to A
004C0F  1  F0 0A                BEQ     LAB_NSTT        ; branch if set for infinite line
004C11  1               
004C11  1  E0 10                CPX     #$10            ; else make min width = 16d
004C13  1  90 46                BCC     TabErr          ; if less do function call error and exit
004C15  1               
004C15  1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
004C15  1               ; tab size greater than the line length.
004C15  1               
004C15  1  E4 64                CPX     <TabSiz         ; compare with tab size
004C17  1  B0 02                BCS     LAB_NSTT        ; branch if >= tab size
004C19  1               
004C19  1  86 64                STX     <TabSiz         ; else make tab size = terminal width
004C1B  1               LAB_NSTT:
004C1B  1  86 0F                STX     <TWidth         ; set the terminal width
004C1D  1  22 C2 00 00          JSL     LAB_GBYT        ; get BASIC byte back
004C21  1  F0 1A                BEQ     WExit           ; exit if no following
004C23  1               
004C23  1  C9 2C                CMP     #','            ; else is it ","
004C25  1  D0 A6                BNE     LAB_MMSE        ; if not do syntax error
004C27  1               
004C27  1               LAB_TBSZ:
004C27  1  20 56 3E             JSR     LAB_SGBY        ; scan and get byte parameter
004C2A  1  8A                   TXA                     ; copy TAB size
004C2B  1  30 2E                BMI     TabErr          ; if >127 do function call error and exit
004C2D  1               
004C2D  1  E0 01                CPX     #$01            ; compare with min-1
004C2F  1  90 2A                BCC     TabErr          ; if <=1 do function call error and exit
004C31  1               
004C31  1  A5 0F                LDA     <TWidth         ; set flags for width
004C33  1  F0 06                BEQ     LAB_SVTB        ; skip check if infinite line
004C35  1               
004C35  1  E4 0F                CPX     <TWidth         ; compare TAB with width
004C37  1  F0 02                BEQ     LAB_SVTB        ; ok if =
004C39  1               
004C39  1  B0 20                BCS     TabErr          ; branch if too big
004C3B  1               
004C3B  1               LAB_SVTB:
004C3B  1  86 64                STX     <TabSiz         ; save TAB size
004C3D  1               
004C3D  1               ; calculate tab column limit from TAB size. The <Iclim is set to the last tab
004C3D  1               ; position on a line that still has at least one whole tab width between it
004C3D  1               ; and the end of the line.
004C3D  1               
004C3D  1               WExit:
004C3D  1  A5 0F                LDA     <TWidth         ; get width
004C3F  1  F0 06                BEQ     LAB_SULP        ; branch if infinite line
004C41  1               
004C41  1  C5 64                CMP     <TabSiz         ; compare with tab size
004C43  1  B0 03                BCS     LAB_WDLP        ; branch if >= tab size
004C45  1               
004C45  1  85 64                STA     <TabSiz         ; else make tab size = terminal width
004C47  1               LAB_SULP:
004C47  1  38                   SEC                     ; set carry for subtract
004C48  1               LAB_WDLP:
004C48  1  E5 64                SBC     <TabSiz         ; subtract tab size
004C4A  1  B0 FC                BCS     LAB_WDLP        ; loop while no borrow
004C4C  1               
004C4C  1  65 64                ADC     <TabSiz         ; add tab size back
004C4E  1  18                   CLC                     ; clear carry for add
004C4F  1  65 64                ADC     <TabSiz         ; add tab size back again
004C51  1  85 10                STA     <Iclim          ; save for now
004C53  1  A5 0F                LDA     <TWidth         ; get width back
004C55  1  38                   SEC                     ; set carry for subtract
004C56  1  E5 10                SBC     <Iclim          ; subtract remainder
004C58  1  85 10                STA     <Iclim          ; save tab column limit
004C5A  1               LAB_NOSQ:
004C5A  1  60                   RTS
004C5B  1               
004C5B  1               TabErr:
004C5B  1  4C 43 36             JMP     LAB_FCER        ; do function call error then warm start
004C5E  1               
004C5E  1               ; perform SQR()
004C5E  1               
004C5E  1               LAB_SQR:
004C5E  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004C60  1  30 F9                BMI     TabErr          ; if -ve do function call error
004C62  1               
004C62  1  A5 AC                LDA     <FAC1_e         ; get exponent
004C64  1  F0 F4                BEQ     LAB_NOSQ        ; if zero just return
004C66  1               
004C66  1               ; else do root
004C66  1  20 25 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004C69  1  A9 00                LDA     #$00            ; clear A
004C6B  1               
004C6B  1  85 77                STA     <FACt_3         ; clear remainder
004C6D  1  85 76                STA     <FACt_2         ; ..
004C6F  1  85 75                STA     <FACt_1         ; ..
004C71  1  85 78                STA     <TempB          ; ..
004C73  1               
004C73  1  85 AF                STA     <FAC1_3         ; clear root
004C75  1  85 AE                STA     <FAC1_2         ; ..
004C77  1  85 AD                STA     <FAC1_1         ; ..
004C79  1               
004C79  1  A2 18                LDX     #$18            ; 24 pairs of bits to do
004C7B  1  A5 B3                LDA     <FAC2_e         ; get exponent
004C7D  1  4A                   LSR     A               ; check odd/even
004C7E  1  B0 0E                BCS     LAB_SQE2        ; if odd only 1 shift first time
004C80  1               
004C80  1               LAB_SQE1:
004C80  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004C82  1  26 B5                ROL     <FAC2_2         ; ..
004C84  1  26 B4                ROL     <FAC2_1         ; ..
004C86  1  26 77                ROL     <FACt_3         ; .. into remainder
004C88  1  26 76                ROL     <FACt_2         ; ..
004C8A  1  26 75                ROL     <FACt_1         ; ..
004C8C  1  26 78                ROL     <TempB          ; .. never overflows
004C8E  1               LAB_SQE2:
004C8E  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004C90  1  26 B5                ROL     <FAC2_2         ; ..
004C92  1  26 B4                ROL     <FAC2_1         ; ..
004C94  1  26 77                ROL     <FACt_3         ; .. into remainder
004C96  1  26 76                ROL     <FACt_2         ; ..
004C98  1  26 75                ROL     <FACt_1         ; ..
004C9A  1  26 78                ROL     <TempB          ; .. never overflows
004C9C  1               
004C9C  1  06 AF                ASL     <FAC1_3         ; root = root * 2
004C9E  1  26 AE                ROL     <FAC1_2         ; ..
004CA0  1  26 AD                ROL     <FAC1_1         ; .. never overflows
004CA2  1               
004CA2  1  A5 AF                LDA     <FAC1_3         ; get root low byte
004CA4  1  2A                   ROL     A               ; *2
004CA5  1  85 5B                STA     <Temp3          ; save partial low byte
004CA7  1  A5 AE                LDA     <FAC1_2         ; get root low mid byte
004CA9  1  2A                   ROL     A               ; *2
004CAA  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004CAC  1  A5 AD                LDA     <FAC1_1         ; get root high mid byte
004CAE  1  2A                   ROL     A               ; *2
004CAF  1  85 5D                STA     <Temp3+2        ; save partial high mid byte
004CB1  1  A9 00                LDA     #$00            ; get root high byte (always $00)
004CB3  1  2A                   ROL     A               ; *2
004CB4  1  85 5E                STA     <Temp3+3        ; save partial high byte
004CB6  1               
004CB6  1               ; carry clear for subtract +1
004CB6  1  A5 77                LDA     <FACt_3         ; get remainder low byte
004CB8  1  E5 5B                SBC     <Temp3          ; subtract partial low byte
004CBA  1  85 5B                STA     <Temp3          ; save partial low byte
004CBC  1               
004CBC  1  A5 76                LDA     <FACt_2         ; get remainder low mid byte
004CBE  1  E5 5C                SBC     <Temp3+1        ; subtract partial low mid byte
004CC0  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004CC2  1               
004CC2  1  A5 75                LDA     <FACt_1         ; get remainder high mid byte
004CC4  1  E5 5D                SBC     <Temp3+2        ; subtract partial high mid byte
004CC6  1  A8                   TAY                     ; copy partial high mid byte
004CC7  1               
004CC7  1  A5 78                LDA     <TempB          ; get remainder high byte
004CC9  1  E5 5E                SBC     <Temp3+3        ; subtract partial high byte
004CCB  1  90 0E                BCC     LAB_SQNS        ; skip sub if remainder smaller
004CCD  1               
004CCD  1  85 78                STA     <TempB          ; save remainder high byte
004CCF  1               
004CCF  1  84 75                STY     <FACt_1         ; save remainder high mid byte
004CD1  1               
004CD1  1  A5 5C                LDA     <Temp3+1        ; get remainder low mid byte
004CD3  1  85 76                STA     <FACt_2         ; save remainder low mid byte
004CD5  1               
004CD5  1  A5 5B                LDA     <Temp3          ; get partial low byte
004CD7  1  85 77                STA     <FACt_3         ; save remainder low byte
004CD9  1               
004CD9  1  E6 AF                INC     <FAC1_3         ; increment root low byte (never any rollover)
004CDB  1               LAB_SQNS:
004CDB  1  CA                   DEX                     ; decrement bit pair count
004CDC  1  D0 A2                BNE     LAB_SQE1        ; loop if not all done
004CDE  1               LAB_SQNSA:
004CDE  1  38                   SEC                     ; set carry for subtract
004CDF  1  A5 B3                LDA     <FAC2_e         ; get exponent
004CE1  1  E9 80                SBC     #$80            ; normalise
004CE3  1  6A                   ROR     A               ; /2 and re-bias to $80
004CE4  1  69 00                ADC     #$00            ; add bit zero back in (allow for half shift)
004CE6  1  85 AC                STA     <FAC1_e         ; save it
004CE8  1  4C 9F 40             JMP     LAB_24D5        ; normalise FAC1 and return
004CEB  1               
004CEB  1               ; perform VARPTR()
004CEB  1               
004CEB  1               LAB_VARPTR:
004CEB  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004CEF  1  20 BB 34             JSR     LAB_GVAR        ; get var address
004CF2  1  20 CF 32             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
004CF5  1  A4 95                LDY     <Cvaral         ; get var address low byte
004CF7  1  A5 96                LDA     <Cvarah         ; get var address high byte
004CF9  1  4C 79 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
004CFC  1               
004CFC  1               ; perform PI
004CFC  1               
004CFC  1               LAB_PI:
004CFC  1  A9 43                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
004CFE  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
004D00  1  20 38 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004D03  1  C6 AC                DEC     <FAC1_e         ; make result = PI
004D05  1  60                   RTS
004D06  1               
004D06  1               
004D06  1               
004D06  1               
004D06  1               
004D06  1               AA_end_basic:
004D06  1               ENDOFBASIC:
004D06  1  44 45 52 49          .BYTE   "DERIVED FROM ehBASIC"
004D0A  1  56 45 44 20  
004D0E  1  46 52 4F 4D  
004D1A  1               
004D1A  1               
004D1A  1               
004D1A  1               
004D1A  1                       .END

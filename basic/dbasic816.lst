ca65 V2.18 - Ubuntu 2.19-1
Main file   : dbasic816.asm
Current file: dbasic816.asm

000000r 1               .P816
000000r 1               .A8
000000r 1               .I8
000000r 1               ; Enhanced BASIC to assemble under 6502 simulator, $ver 2.23
000000r 1               ; THIS WORK IS DERIVED FROM ehBASIC BY LEE DAVIDSON
000000r 1               ;
000000r 1               ; $E7E1 $E7CF $E7C6 $E7D3 $E7D1 $E7D5 $E7CF $E81E $E825
000000r 1               
000000r 1               ; 2.00	new revision numbers start here
000000r 1               ; 2.01	fixed LCASE$() and UCASE$()
000000r 1               ; 2.02	new get value routine done
000000r 1               ; 2.03	changed RND() to galoise method
000000r 1               ; 2.04	fixed SPC()
000000r 1               ; 2.05	new get value routine fixedf
000000r 1               ; 2.06	changed USR() code
000000r 1               ; 2.07	fixed STR$()
000000r 1               ; 2.08	changed INPUT and READ to remove need for $00 start to input buffer
000000r 1               ; 2.09	fixed RND()
000000r 1               ; 2.10	integrated missed changes from an earlier version
000000r 1               ; 2.20	added ELSE to IF .. THEN and fixed IF .. GOTO <statement> to cause error
000000r 1               ; 2.21	fixed IF .. THEN RETURN to not cause error
000000r 1               ; 2.22	fixed RND() breaking the get byte routine
000000r 1               ; 2.30  CONVERT TO 65816 ADDRESS SPACE
000000r 1               
000000r 1               
000000r 1               
000000r 1                       .SEGMENT "HIGHMEM"
000000r 1               ;.ORG    0FF1000H
000000r 1                       .ORG    1000H
001000  1               BASICORG:
001000  1  4C 55 25             JMP     BASICBEGIN
001003  1               ;____________________________________________________________________________________________
001003  1               ;
001003  1               ; MACROS
001003  1               
001003  1                       .INCLUDE "macros.asm"
001003  2               ;___________________________________________________________________________________________________
001003  2               ;
001003  2               ;	USEFUL 65186 MACROS
001003  2               ;__________________________________________________________________________________________________
001003  2               
001003  2               .macro       STORECONTEXT             ; Store Complete Context at the beginning of a Sub
001003  2                       PHX
001003  2                       phy
001003  2                       pha
001003  2                       php
001003  2               .endmacro
001003  2               
001003  2               .macro       RESTORECONTEXT                 ; Restore Complete Context at the end of a Sub
001003  2                       plp
001003  2                       pla
001003  2                       ply
001003  2                       plx
001003  2               .endmacro
001003  2               
001003  2               .macro       INDEX16                         ; Set 16bit Index Registers
001003  2               		REP #$10 		; 16 bit Index registers
001003  2               		.I16
001003  2               .endmacro
001003  2               .macro       INDEX8                          ; Set 8bit Index Registers
001003  2               		SEP #$10 		; 8 bit Index registers
001003  2               		.I8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR16                  ; Set 16bit Index Registers
001003  2               		REP #$20 		; 16 bit Index registers
001003  2               		.A16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATOR8                   ; Set 8bit Index Registers
001003  2               		SEP #$20 		; 8 bit Index registers
001003  2               		.A8
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX16             ; Set 16bit Index Registers
001003  2               		REP #$30 		; 16 bit Index registers
001003  2               		.A16
001003  2                               .I16
001003  2               .endmacro
001003  2               
001003  2               .macro       ACCUMULATORINDEX8              ; Set 8bit Index Registers
001003  2               		SEP #$30 		; 8 bit Index registers
001003  2               		.A8
001003  2                               .I8
001003  2               .endmacro
001003  2               
001003  2               .macro       LDAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               	LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLB
001003  2                   LDA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       STAINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHX
001003  2                   PHA
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLA
001003  2                   PLX
001003  2               	STA	(<PARM1),Y		;
001003  2               	PLB
001003  2                   STA <TMPFLG
001003  2               .endmacro
001003  2               
001003  2               .macro       SETBANK PARM1
001003  2                   PHX
001003  2               	LDX #PARM1
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2               .endmacro
001003  2               
001003  2               
001003  2               .macro       FETCHINDIRECTY PARM1
001003  2                   PHB
001003  2               	PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2               .endmacro
001003  2               
001003  2               .macro       CMPINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CMP	<TMPFLG		    ;
001003  2               .endmacro
001003  2               
001003  2               .macro       ADCINDIRECTY PARM1
001003  2                   PHB
001003  2                   PHA
001003  2                   PHX
001003  2                   LDX #$01
001003  2                   LDA <PARM1,X
001003  2                   CMP #$00
001003  2                   BNE *+6
001003  2               	LDX #00
001003  2               	PHX
001003  2               	PLB
001003  2                   PLX
001003  2                   LDA	(<PARM1),Y		;
001003  2                   STA <TMPFLG
001003  2                   PLA
001003  2                   PLB
001003  2                   CLC
001003  2                   ADC	<TMPFLG 		;
001003  2               .endmacro
001003  2               
001003  2               .macro       LBEQ PARM1
001003  2                    bne *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBNE PARM1
001003  2                    beq *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCC PARM1
001003  2                    bcc *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  2               .macro       LBCS PARM1
001003  2                    bcs *+4
001003  2                    bra *+5
001003  2                    jmp PARM1
001003  2               .endmacro
001003  2               
001003  1               
001003  1               ; ZERO PAGE DEFINITIONS
001003  1                       .INCLUDE "zeropage.asm"
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; ZERO PAGE DEFINITIONS
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_WARM        = $00           ; BASIC warm start entry point
001003  2               Wrmjpl          = LAB_WARM+1    ; BASIC warm start vector jump low byte
001003  2               Wrmjph          = LAB_WARM+2    ; BASIC warm start vector jump high byte
001003  2               TMPFLG          = $04
001003  2               VIDEOMODE       = $06
001003  2               LOCALWORK       = $07           ; word (2 bytes)
001003  2               Usrjmp          = $0A           ; USR function JMP address
001003  2               Usrjpl          = <Usrjmp+1     ; USR function JMP vector low byte
001003  2               Usrjph          = <Usrjmp+2     ; USR function JMP vector high byte
001003  2               Nullct          = $0D           ; nulls output after each line
001003  2               TPos            = $0E           ; BASIC terminal position byte
001003  2               TWidth          = $0F           ; BASIC terminal width byte
001003  2               Iclim           = $10           ; input column limit
001003  2               Itempl          = $11           ; temporary integer low byte
001003  2               Itemph          = <Itempl+1     ; temporary integer high byte
001003  2               
001003  2               nums_1          = <Itempl       ; number to bin/hex string convert MSB
001003  2               nums_2          = <nums_1+1     ; number to bin/hex string convert
001003  2               nums_3          = <nums_1+2     ; number to bin/hex string convert LSB
001003  2               
001003  2               Srchc           = $5B           ; search character
001003  2               Temp3           = <Srchc        ; temp byte used in number routines
001003  2               Scnquo          = $5C           ; scan-between-quotes flag
001003  2               Asrch           = <Scnquo       ; alt search character
001003  2               
001003  2               XOAw_l          = <Srchc        ; eXclusive OR, OR and AND word low byte
001003  2               XOAw_h          = <Scnquo       ; eXclusive OR, OR and AND word high byte
001003  2               
001003  2               Ibptr           = $5D           ; input buffer pointer
001003  2               Dimcnt          = <Ibptr        ; # of dimensions
001003  2               Tindx           = <Ibptr        ; token index
001003  2               
001003  2               Defdim          = $5E           ; default DIM flag
001003  2               Dtypef          = $5F           ; data type flag, $FF=string, $00=numeric
001003  2               Oquote          = $60           ; open quote flag (b7) (Flag: DATA scan; LIST quote; memory)
001003  2               Gclctd          = $60           ; garbage collected flag
001003  2               Sufnxf          = $61           ; subscript/FNX flag, 1xxx xxx = FN(0xxx xxx)
001003  2               Imode           = $62           ; input mode flag, $00=INPUT, $80=READ
001003  2               Cflag           = $63           ; comparison evaluation flag
001003  2               
001003  2               TabSiz          = $64           ; TAB step size (was input flag)
001003  2               
001003  2               next_s          = $65           ; next descriptor stack address
001003  2               ; these two bytes form a word pointer to the item
001003  2               ; currently on top of the descriptor stack
001003  2               last_sl         = $66           ; last descriptor stack address low byte
001003  2               last_sh         = $67           ; last descriptor stack address high byte (always $00)
001003  2               
001003  2               des_sk          = $68           ; descriptor stack start address (temp strings)
001003  2               
001003  2               ;			= $70		; End of descriptor stack
001003  2               
001003  2               ut1_pl          = $71           ; utility pointer 1 low byte
001003  2               ut1_ph          = <ut1_pl+1     ; utility pointer 1 high byte
001003  2               ut2_pl          = $73           ; utility pointer 2 low byte
001003  2               ut2_ph          = <ut2_pl+1     ; utility pointer 2 high byte
001003  2               
001003  2               Temp_2          = <ut1_pl       ; temp byte for block move
001003  2               
001003  2               FACt_1          = $75           ; FAC temp mantissa1
001003  2               FACt_2          = <FACt_1+1     ; FAC temp mantissa2
001003  2               FACt_3          = <FACt_2+1     ; FAC temp mantissa3
001003  2               
001003  2               dims_l          = <FACt_2       ; array dimension size low byte
001003  2               dims_h          = <FACt_3       ; array dimension size high byte
001003  2               
001003  2               TempB           = $78           ; temp page 0 byte
001003  2               
001003  2               Smeml           = $79           ; start of mem low byte		(Start-of-Basic)
001003  2               Smemh           = <Smeml+1      ; start of mem high byte	(Start-of-Basic)
001003  2               Svarl           = $7B           ; start of vars low byte	(Start-of-Variables)
001003  2               Svarh           = <Svarl+1      ; start of vars high byte	(Start-of-Variables)
001003  2               Sarryl          = $7D           ; var mem end low byte		(Start-of-Arrays)
001003  2               Sarryh          = <Sarryl+1     ; var mem end high byte		(Start-of-Arrays)
001003  2               Earryl          = $7F           ; array mem end low byte	(End-of-Arrays)
001003  2               Earryh          = <Earryl+1     ; array mem end high byte	(End-of-Arrays)
001003  2               Sstorl          = $81           ; string storage low byte	(String storage (moving down))
001003  2               Sstorh          = <Sstorl+1     ; string storage high byte	(String storage (moving down))
001003  2               Sutill          = $83           ; string utility ptr low byte
001003  2               Sutilh          = <Sutill+1     ; string utility ptr high byte
001003  2               Ememl           = $85           ; end of mem low byte		(Limit-of-memory)
001003  2               Ememh           = <Ememl+1      ; end of mem high byte		(Limit-of-memory)
001003  2               
001003  2               Clinel          = $87           ; current line low byte		(Basic line number)
001003  2               Clineh          = <Clinel+1     ; current line high byte	(Basic line number)
001003  2               Blinel          = $89           ; break line low byte		(Previous Basic line number)
001003  2               Blineh          = <Blinel+1     ; break line high byte		(Previous Basic line number)
001003  2               
001003  2               Cpntrl          = $8B           ; continue pointer low byte
001003  2               Cpntrh          = <Cpntrl+1     ; continue pointer high byte
001003  2               
001003  2               Dlinel          = $8D           ; current DATA line low byte
001003  2               Dlineh          = <Dlinel+1     ; current DATA line high byte
001003  2               
001003  2               Dptrl           = $8F           ; DATA pointer low byte
001003  2               Dptrh           = <Dptrl+1      ; DATA pointer high byte
001003  2               
001003  2               Rdptrl          = $91           ; read pointer low byte
001003  2               Rdptrh          = <Rdptrl+1     ; read pointer high byte
001003  2               
001003  2               Varnm1          = $93           ; current var name 1st byte
001003  2               Varnm2          = <Varnm1+1     ; current var name 2nd byte
001003  2               
001003  2               Cvaral          = $95           ; current var address low byte
001003  2               Cvarah          = <Cvaral+1     ; current var address high byte
001003  2               
001003  2               Frnxtl          = $97           ; var pointer for FOR/NEXT low byte
001003  2               Frnxth          = <Frnxtl+1     ; var pointer for FOR/NEXT high byte
001003  2               
001003  2               Tidx1           = <Frnxtl       ; temp line index
001003  2               
001003  2               Lvarpl          = <Frnxtl       ; let var pointer low byte
001003  2               Lvarph          = <Frnxth       ; let var pointer high byte
001003  2               
001003  2               prstk           = $99           ; precedence stacked flag
001003  2               
001003  2               comp_f          = $9B           ; compare function flag, bits 0,1 and 2 used
001003  2               ; bit 2 set if >
001003  2               ; bit 1 set if =
001003  2               ; bit 0 set if <
001003  2               
001003  2               func_l          = $9C           ; function pointer low byte
001003  2               func_h          = <func_l+1     ; function pointer high byte
001003  2               
001003  2               garb_l          = <func_l       ; garbage collection working pointer low byte
001003  2               garb_h          = <func_h       ; garbage collection working pointer high byte
001003  2               
001003  2               des_2l          = $9E           ; string descriptor_2 pointer low byte
001003  2               des_2h          = <des_2l+1     ; string descriptor_2 pointer high byte
001003  2               
001003  2               g_step          = $A0           ; garbage collect step size
001003  2               
001003  2               Fnxjmp          = $A1           ; jump vector for functions
001003  2               Fnxjpl          = <Fnxjmp+1     ; functions jump vector low byte
001003  2               Fnxjph          = <Fnxjmp+2     ; functions jump vector high byte
001003  2               
001003  2               g_indx          = <Fnxjpl       ; garbage collect temp index
001003  2               
001003  2               FAC2_r          = $A3           ; FAC2 rounding byte
001003  2               
001003  2               Adatal          = $A4           ; array data pointer low byte
001003  2               Adatah          = <Adatal+1     ; array data pointer high  byte
001003  2               
001003  2               Nbendl          = <Adatal       ; new block end pointer low byte
001003  2               Nbendh          = <Adatah       ; new block end pointer high  byte
001003  2               
001003  2               Obendl          = $A6           ; old block end pointer low byte
001003  2               Obendh          = <Obendl+1     ; old block end pointer high  byte
001003  2               
001003  2               numexp          = $A8           ; string to float number exponent count
001003  2               expcnt          = $A9           ; string to float exponent count
001003  2               
001003  2               numbit          = <numexp       ; bit count for array element calculations
001003  2               
001003  2               numdpf          = $AA           ; string to float decimal point flag
001003  2               expneg          = $AB           ; string to float eval exponent -ve flag
001003  2               
001003  2               Astrtl          = <numdpf       ; array start pointer low byte
001003  2               Astrth          = <expneg       ; array start pointer high  byte
001003  2               
001003  2               Histrl          = <numdpf       ; highest string low byte
001003  2               Histrh          = <expneg       ; highest string high  byte
001003  2               
001003  2               Baslnl          = <numdpf       ; BASIC search line pointer low byte
001003  2               Baslnh          = <expneg       ; BASIC search line pointer high  byte
001003  2               
001003  2               Fvar_l          = <numdpf       ; find/found variable pointer low byte
001003  2               Fvar_h          = <expneg       ; find/found variable pointer high  byte
001003  2               
001003  2               Ostrtl          = <numdpf       ; old block start pointer low byte
001003  2               Ostrth          = <expneg       ; old block start pointer high  byte
001003  2               
001003  2               Vrschl          = <numdpf       ; variable search pointer low byte
001003  2               Vrschh          = <expneg       ; variable search pointer high  byte
001003  2               
001003  2               FAC1_e          = $AC           ; FAC1 exponent
001003  2               FAC1_1          = <FAC1_e+1     ; FAC1 mantissa1
001003  2               FAC1_2          = <FAC1_e+2     ; FAC1 mantissa2
001003  2               FAC1_3          = <FAC1_e+3     ; FAC1 mantissa3
001003  2               FAC1_s          = <FAC1_e+4     ; FAC1 sign (b7)
001003  2               
001003  2               str_ln          = <FAC1_e       ; string length
001003  2               str_pl          = <FAC1_1       ; string pointer low byte
001003  2               str_ph          = <FAC1_2       ; string pointer high byte
001003  2               
001003  2               des_pl          = <FAC1_2       ; string descriptor pointer low byte
001003  2               des_ph          = <FAC1_3       ; string descriptor pointer high byte
001003  2               
001003  2               mids_l          = <FAC1_3       ; MID$ string temp length byte
001003  2               
001003  2               negnum          = $B1           ; string to float eval -ve flag
001003  2               numcon          = $B1           ; series evaluation constant count
001003  2               
001003  2               FAC1_o          = $B2           ; FAC1 overflow byte
001003  2               
001003  2               FAC2_e          = $B3           ; FAC2 exponent
001003  2               FAC2_1          = <FAC2_e+1     ; FAC2 mantissa1
001003  2               FAC2_2          = <FAC2_e+2     ; FAC2 mantissa2
001003  2               FAC2_3          = <FAC2_e+3     ; FAC2 mantissa3
001003  2               FAC2_s          = <FAC2_e+4     ; FAC2 sign (b7)
001003  2               
001003  2               FAC_sc          = $B8           ; FAC sign comparison, Acc#1 vs #2
001003  2               FAC1_r          = $B9           ; FAC1 rounding byte
001003  2               
001003  2               ssptr_l         = <FAC_sc       ; string start pointer low byte
001003  2               ssptr_h         = <FAC1_r       ; string start pointer high byte
001003  2               
001003  2               sdescr          = <FAC_sc       ; string descriptor pointer
001003  2               
001003  2               csidx           = $BA           ; line crunch save index
001003  2               Asptl           = <csidx        ; array size/pointer low byte
001003  2               Aspth           = $BB           ; array size/pointer high byte
001003  2               
001003  2               Btmpl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Btmph           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Cptrl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Cptrh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               Sendl           = <Asptl        ; BASIC pointer temp low byte
001003  2               Sendh           = <Aspth        ; BASIC pointer temp low byte
001003  2               
001003  2               LAB_IGBY        = $BC           ; get next BASIC byte subroutine
001003  2               
001003  2               LAB_GBYT        = $C2           ; get current BASIC byte subroutine
001003  2               Bpntrl          = $C3           ; BASIC execute (get byte) pointer low byte
001003  2               Bpntrh          = <Bpntrl+1     ; BASIC execute (get byte) pointer high byte
001003  2               Bpntrp          = <Bpntrl+2     ; BASIC execute (get byte) pointer PAGE byte
001003  2               
001003  2               ;			= $E0		; end of get BASIC char subroutine
001003  2               
001003  2               Rbyte4          = $E1           ; extra PRNG byte
001003  2               Rbyte1          = <Rbyte4+1     ; most significant PRNG byte
001003  2               Rbyte2          = <Rbyte4+2     ; middle PRNG byte
001003  2               Rbyte3          = <Rbyte4+3     ; least significant PRNG byte
001003  2               
001003  2               NmiBase         = $E5           ; NMI handler enabled/setup/triggered flags
001003  2               ; bit	function
001003  2               ; ===	========
001003  2               ; 7	interrupt enabled
001003  2               ; 6	interrupt setup
001003  2               ; 5	interrupt happened
001003  2               ;			= $E6		; NMI handler addr low byte
001003  2               ;			= $E7		; NMI handler addr high byte
001003  2               IrqBase         = $E8           ; IRQ handler enabled/setup/triggered flags
001003  2               ;			= $E9		; IRQ handler addr low byte
001003  2               ;			= $EA		; IRQ handler addr high byte
001003  2               FCBPTR          = $EB           ; POINTER TO FCB FOR FILE OPS
001003  2               
001003  2               Decss           = $EF           ; number to decimal string start
001003  2               Decssp1         = Decss+1       ; number to decimal string start
001003  2               
001003  2               TEMPW           = $FD
001003  2               ;			= $FF		; decimal string end
001003  2               
001003  2               
001003  2               ;____________________________________________________________________________________________
001003  2               ;
001003  2               ; character get subroutine for zero page
001003  2               
001003  2               ; For a 1.8432MHz 6502 including the JSR and RTS
001003  2               ; fastest (>=":")	=  29 cycles =  15.7uS
001003  2               ; slowest (<":")	=  40 cycles =  21.7uS
001003  2               ; space skip	= +21 cycles = +11.4uS
001003  2               ; inc across page	=  +4 cycles =  +2.2uS
001003  2               
001003  2               ; the target address for the LDA at LAB_2CF4 becomes the BASIC execute pointer once the
001003  2               ; block is copied to it's destination, any non zero page address will do at assembly
001003  2               ; time, to assemble a three byte instruction.
001003  2               
001003  2               ; page 0 initialisation table from $BC
001003  2               ; increment and scan memory
001003  2               ;____________________________________________________________________________________________
001003  2               
001003  2               LAB_2CEE:
001003  2  E6 C3                INC     <Bpntrl         ; increment BASIC execute pointer low byte
001005  2  D0 02                BNE     LAB_2CF4        ; branch if no carry
001007  2               ; else
001007  2  E6 C4                INC     <Bpntrh         ; increment BASIC execute pointer high byte
001009  2               
001009  2               ; page 0 initialisation table from $C2
001009  2               ; scan memory
001009  2               LAB_2CF4:
001009  2  AF FF FF FF          LDA     $FFFFFF         ; get byte to scan (addr set by call routine)
00100D  2  C9 BD                CMP     #TK_ELSE        ; compare with the token for ELSE
00100F  2  F0 0E                BEQ     LAB_2D05        ; exit if ELSE, not numeric, carry set
001011  2               
001011  2  C9 3A                CMP     #':'            ; compare with ":"
001013  2  B0 0A                BCS     LAB_2D05        ; exit if >= ":", not numeric, carry set
001015  2               
001015  2  C9 20                CMP     #' '            ; compare with " "
001017  2  F0 EA                BEQ     LAB_2CEE        ; if " " go do next
001019  2               
001019  2  38                   SEC                     ; set carry for SBC
00101A  2  E9 30                SBC     #'0'            ; subtract "0"
00101C  2  38                   SEC                     ; set carry for SBC
00101D  2  E9 D0                SBC     #$D0            ; subtract -"0"
00101F  2               ; clear carry if byte = "0"-"9"
00101F  2               LAB_2D05:
00101F  2  6B                   RTL
001020  2               LAB_2CEE_END:
001020  2               ;____________________________________________________________________________________________
001020  2               ;
001020  2               ; page zero initialisation table $00-$12 inclusive
001020  2               ;____________________________________________________________________________________________
001020  2               
001020  2               StrTab:
001020  2  4C                   .BYTE   $4C             ; JMP opcode
001021  2  75 25                .WORD   LAB_COLD        ; initial warm start vector (cold start)
001023  2               
001023  2  00                   .BYTE   $00             ; these bytes are not used by BASIC
001024  2  00 00                .WORD   $0000           ;
001026  2  00 00                .WORD   $0000           ;
001028  2  00 00                .WORD   $0000           ;
00102A  2               
00102A  2  4C                   .BYTE   $4C             ; JMP opcode
00102B  2  78 36                .WORD   LAB_FCER        ; initial user function vector ("Function call" error)
00102D  2  00                   .BYTE   $00             ; default NULL count
00102E  2  00                   .BYTE   $00             ; clear terminal position
00102F  2  00                   .BYTE   $00             ; default terminal width byte
001030  2  F2                   .BYTE   $F2             ; default limit for TAB = 14
001031  2  00 22                .WORD   Ram_base        ; start of user RAM
001033  2               EndTab:
001033  2               
001033  2               ;  BASIC start-up code
001033  2               
001033  2               PG2_TABS:
001033  2  00                   .BYTE   $00             ; ctrl-c flag		-	$00 = enabled
001034  2  03                   .BYTE   $03             ; ctrl-c byte		-	GET needs this
001035  2  00                   .BYTE   $00             ; ctrl-c byte timeout	-	GET needs this
001036  2  27 4B                .WORD   CTRLC           ; ctrl c check vector
001038  2               PG2_TABE:
001038  2               
001038  1               
001038  1               ; BASIC TOKENS
001038  1                       .INCLUDE "tokens.asm"
001038  2               ; token values needed for BASIC
001038  2               
001038  2               ; primary command tokens (can start a statement)
001038  2               
001038  2               TK_END          = $80           ; END
001038  2               TK_FOR          = TK_END+1      ; FOR token
001038  2               TK_NEXT         = TK_FOR+1      ; NEXT token
001038  2               TK_DATA         = TK_NEXT+1     ; DATA token
001038  2               TK_DIRECTORY    = TK_DATA+1     ; DISKSTATUS token
001038  2               TK_DISKSTATUS   = TK_DIRECTORY+1; DIRECTORY token
001038  2               TK_INPUT        = TK_DISKSTATUS+1; INPUT token
001038  2               TK_DIM          = TK_INPUT+1    ; DIM token
001038  2               TK_READ         = TK_DIM+1      ; READ token
001038  2               TK_LET          = TK_READ+1     ; LET token
001038  2               TK_DEC          = TK_LET+1      ; DEC token
001038  2               TK_GOTO         = TK_DEC+1      ; GOTO token
001038  2               TK_RUN          = TK_GOTO+1     ; RUN token
001038  2               TK_IF           = TK_RUN+1      ; IF token
001038  2               TK_RESTORE      = TK_IF+1       ; RESTORE token
001038  2               TK_GOSUB        = TK_RESTORE+1  ; GOSUB token
001038  2               TK_RETURN       = TK_GOSUB+1    ; RETURN token
001038  2               TK_REM          = TK_RETURN+1   ; REM token
001038  2               TK_STOP         = TK_REM+1      ; STOP token
001038  2               TK_ON           = TK_STOP+1     ; ON token
001038  2               TK_NULL         = TK_ON+1       ; NULL token
001038  2               TK_INC          = TK_NULL+1     ; INC token
001038  2               TK_WAIT         = TK_INC+1      ; WAIT token
001038  2               TK_LOAD         = TK_WAIT+1     ; LOAD token
001038  2               TK_SAVE         = TK_LOAD+1     ; SAVE token
001038  2               TK_DEF          = TK_SAVE+1     ; DEF token
001038  2               TK_POKE         = TK_DEF+1      ; POKE token
001038  2               TK_CALL         = TK_POKE+1     ; CALL token
001038  2               TK_DO           = TK_CALL+1     ; DO token
001038  2               TK_LOOP         = TK_DO+1       ; LOOP token
001038  2               TK_PRINT        = TK_LOOP+1     ; PRINT token
001038  2               TK_CONT         = TK_PRINT+1    ; CONT token
001038  2               TK_LIST         = TK_CONT+1     ; LIST token
001038  2               TK_CLEAR        = TK_LIST+1     ; CLEAR token
001038  2               TK_NEW          = TK_CLEAR+1    ; NEW token
001038  2               TK_WIDTH        = TK_NEW+1      ; WIDTH token
001038  2               TK_GET          = TK_WIDTH+1    ; GET token
001038  2               TK_SWAP         = TK_GET+1      ; SWAP token
001038  2               TK_BITSET       = TK_SWAP+1     ; BITSET token
001038  2               TK_BITCLR       = TK_BITSET+1   ; BITCLR token
001038  2               TK_MONITOR      = TK_BITCLR+1   ; MONITOR token
001038  2               TK_OPEN         = TK_MONITOR+1  ; OPEN token
001038  2               TK_CLOSE        = TK_OPEN+1     ; CLOSE token
001038  2               TK_IECINPUT     = TK_CLOSE+1    ; IECINPUT token
001038  2               TK_IECOUTPUT    = TK_IECINPUT+1 ; IECOUTPUT token
001038  2               TK_PUTN         = TK_IECOUTPUT+1; PUTN token
001038  2               TK_GETN         = TK_PUTN+1     ; GETN token
001038  2               TK_DISKCMD      = TK_GETN+1     ; DISKCMD token
001038  2               TK_SCNCLR       = TK_DISKCMD+1  ;SCNCLR token
001038  2               TK_LOCATE       = TK_SCNCLR+1   ;LOCATE token
001038  2               TK_COLOR        = TK_LOCATE+1   ;COLOR token
001038  2               TK_SCREEN       = TK_COLOR+1    ;SCREEN token
001038  2               TK_PLOT         = TK_SCREEN+1   ;PLOT token
001038  2               TK_PATTERN      = TK_PLOT+1     ;PATTERN token
001038  2               TK_SYS          = TK_PATTERN+1  ;SYS token
001038  2               TK_SOUND        = TK_SYS+1      ;SOUND token
001038  2               TK_NOISE        = TK_SOUND+1    ;NOISE token
001038  2               TK_TONE         = TK_NOISE+1    ;TONE token
001038  2               TK_VOLUME       = TK_TONE+1     ;VOLUME token
001038  2               TK_VOICE        = TK_VOLUME+1   ;VOICE token
001038  2               
001038  2               ; secondary command tokens, can't start a statement
001038  2               
001038  2               TK_TAB          = TK_VOICE+1    ; TAB token
001038  2               TK_ELSE         = TK_TAB+1      ; ELSE token
001038  2               TK_TO           = TK_ELSE+1     ; TO token
001038  2               TK_FN           = TK_TO+1       ; FN token
001038  2               TK_SPC          = TK_FN+1       ; SPC token
001038  2               TK_THEN         = TK_SPC+1      ; THEN token
001038  2               TK_NOT          = TK_THEN+1     ; NOT token
001038  2               TK_STEP         = TK_NOT+1      ; STEP token
001038  2               TK_UNTIL        = TK_STEP+1     ; UNTIL token
001038  2               TK_WHILE        = TK_UNTIL+1    ; WHILE token
001038  2               TK_OFF          = TK_WHILE+1    ; OFF token
001038  2               
001038  2               ; opperator tokens
001038  2               
001038  2               TK_PLUS         = TK_OFF+1      ; + token
001038  2               TK_MINUS        = TK_PLUS+1     ; - token
001038  2               TK_MUL          = TK_MINUS+1    ; * token
001038  2               TK_DIV          = TK_MUL+1      ; / token
001038  2               TK_POWER        = TK_DIV+1      ; ^ token
001038  2               TK_AND          = TK_POWER+1    ; AND token
001038  2               TK_EOR          = TK_AND+1      ; EOR token
001038  2               TK_OR           = TK_EOR+1      ; OR token
001038  2               TK_RSHIFT       = TK_OR+1       ; RSHIFT token
001038  2               TK_LSHIFT       = TK_RSHIFT+1   ; LSHIFT token
001038  2               TK_GT           = TK_LSHIFT+1   ; > token
001038  2               TK_EQUAL        = TK_GT+1       ; = token
001038  2               TK_LT           = TK_EQUAL+1    ; < token
001038  2               
001038  2               ; functions tokens
001038  2               
001038  2               TK_SGN          = TK_LT+1       ; SGN token
001038  2               TK_INT          = TK_SGN+1      ; INT token
001038  2               TK_ABS          = TK_INT+1      ; ABS token
001038  2               TK_USR          = TK_ABS+1      ; USR token
001038  2               TK_FRE          = TK_USR+1      ; FRE token
001038  2               TK_POS          = TK_FRE+1      ; POS token
001038  2               TK_SQR          = TK_POS+1      ; SQR token
001038  2               TK_RND          = TK_SQR+1      ; RND token
001038  2               TK_LOG          = TK_RND+1      ; LOG token
001038  2               TK_EXP          = TK_LOG+1      ; EXP token
001038  2               TK_COS          = TK_EXP+1      ; COS token
001038  2               TK_SIN          = TK_COS+1      ; SIN token
001038  2               TK_TAN          = TK_SIN+1      ; TAN token
001038  2               TK_ATN          = TK_TAN+1      ; ATN token
001038  2               TK_PEEK         = TK_ATN+1      ; PEEK token
001038  2               TK_SADD         = TK_PEEK+1     ; SADD token
001038  2               TK_LEN          = TK_SADD+1     ; LEN token
001038  2               TK_STRS         = TK_LEN+1      ; STR$ token
001038  2               TK_VAL          = TK_STRS+1     ; VAL token
001038  2               TK_ASC          = TK_VAL+1      ; ASC token
001038  2               TK_UCASES       = TK_ASC+1      ; UCASE$ token
001038  2               TK_LCASES       = TK_UCASES+1   ; LCASE$ token
001038  2               TK_CHRS         = TK_LCASES+1   ; CHR$ token
001038  2               TK_HEXS         = TK_CHRS+1     ; HEX$ token
001038  2               TK_BINS         = TK_HEXS+1     ; BIN$ token
001038  2               TK_BITTST       = TK_BINS+1     ; BITTST token
001038  2               TK_MAX          = TK_BITTST+1   ; MAX token
001038  2               TK_MIN          = TK_MAX+1      ; MIN token
001038  2               TK_PI           = TK_MIN+1      ; PI token
001038  2               TK_IECST        = TK_PI+1       ; IECST token
001038  2               TK_SECOND       = TK_IECST+1    ; SECOND token
001038  2               TK_VPTR         = TK_SECOND+1   ; VARPTR token
001038  2               TK_LEFTS        = TK_VPTR+1     ; LEFT$ token
001038  2               TK_RIGHTS       = TK_LEFTS+1    ; RIGHT$ token
001038  2               TK_MIDS         = TK_RIGHTS+1   ; MID$ token
001038  2               TK_CON          = TK_MIDS+1     ; CON token
001038  2               
001038  2               
001038  2               
001038  2               
001038  2               LAB_CTBL:
001038  2  D3 2A                .WORD   LAB_END-1       ; END
00103A  2  0B 2A                .WORD   LAB_FOR-1       ; FOR
00103C  2  5D 31                .WORD   LAB_NEXT-1      ; NEXT
00103E  2  4B 2C                .WORD   LAB_DATA-1      ; DATA
001040  2  2C 1A                .WORD   V_DIR-1         ; DIRECTORY
001042  2  B1 19                .WORD   V_ERR-1         ; DISKSTATUS
001044  2  FD 2F                .WORD   LAB_INPUT-1     ; INPUT
001046  2  A3 34                .WORD   LAB_DIM-1       ; DIM
001048  2  16 30                .WORD   LAB_READ-1      ; READ
00104A  2  70 2D                .WORD   LAB_LET-1       ; LET
00104C  2  40 2D                .WORD   LAB_DEC-1       ; DEC			new command
00104E  2  A5 2B                .WORD   LAB_GOTO-1      ; GOTO
001050  2  62 2B                .WORD   LAB_RUN-1       ; RUN
001052  2  79 2C                .WORD   LAB_IF-1        ; IF
001054  2  FA 2A                .WORD   LAB_RESTORE-1   ; RESTORE		modified command
001056  2  87 2B                .WORD   LAB_GOSUB-1     ; GOSUB
001058  2  36 2C                .WORD   LAB_RETURN-1    ; RETURN
00105A  2  E4 2C                .WORD   LAB_REM-1       ; REM
00105C  2  D1 2A                .WORD   LAB_STOP-1      ; STOP
00105E  2  ED 2C                .WORD   LAB_ON-1        ; ON			modified command
001060  2  38 2B                .WORD   LAB_NULL-1      ; NULL		modified command
001062  2  43 2D                .WORD   LAB_INC-1       ; INC			new command
001064  2  0D 40                .WORD   LAB_WAIT-1      ; WAIT
001066  2  1F 19                .WORD   V_LOAD-1        ; LOAD
001068  2  8D 18                .WORD   V_SAVE-1        ; SAVE
00106A  2  CB 37                .WORD   LAB_DEF-1       ; DEF
00106C  2  5D 3F                .WORD   LAB_POKE-1      ; POKE
00106E  2  F9 3F                .WORD   LAB_CALL-1      ; CALL		new command
001070  2  6C 2B                .WORD   LAB_DO-1        ; DO			new command
001072  2  D7 2B                .WORD   LAB_LOOP-1      ; LOOP		new command
001074  2  DA 2E                .WORD   LAB_PRINT-1     ; PRINT
001076  2  3E 2B                .WORD   LAB_CONT-1      ; CONT
001078  2  4B 29                .WORD   LAB_LIST-1      ; LIST
00107A  2  48 29                .WORD   LAB_CLEAR-1     ; CLEAR
00107C  2  F8 28                .WORD   LAB_NEW-1       ; NEW
00107E  2  3B 4C                .WORD   LAB_WDTH-1      ; WIDTH		new command
001080  2  94 2E                .WORD   LAB_GET-1       ; GET			new command
001082  2  81 3F                .WORD   LAB_SWAP-1      ; SWAP		new command
001084  2  BE 49                .WORD   LAB_BITSET-1    ; BITSET		new command
001086  2  D2 49                .WORD   LAB_BITCLR-1    ; BITCLR		new command
001088  2  40 25                .WORD   LAB_MONITOR-1   ; MONITOR		MONITOR command
00108A  2  C7 1B                .WORD   V_OPEN-1        ; OPEN			OPEN command
00108C  2  4A 1C                .WORD   V_CLOSE-1       ; CLOSE			CLOSE command
00108E  2  5B 1C                .WORD   V_IECINPUT-1    ; IECINPUT		IECINPUT command
001090  2  71 1C                .WORD   V_IECOUTPUT-1   ; IECOUTPUT		IECOUTPUT command
001092  2  87 1C                .WORD   V_PUTN-1        ; PUTN			PUTN command
001094  2  F3 1C                .WORD   V_GETN-1        ; GETN			GETN command
001096  2  03 1B                .WORD   V_DISKCMD-1     ; DISKCMD		DISKCMD COMMAND
001098  2  40 1D                .WORD   V_SCNCLR-1      ; SCNCLR		SCNCLR COMMAND
00109A  2  4D 1D                .WORD   V_LOCATE-1      ; LOCATE		LOCATE COMMAND
00109C  2  65 1D                .WORD   V_COLOR-1       ; COLOR			COLOR COMMAND
00109E  2  8C 1D                .WORD   V_SCREEN-1      ; SCREEN		SCREEN COMMAND
0010A0  2  F9 1E                .WORD   V_PLOT-1        ; PLOT			PLOT COMMAND
0010A2  2  56 21                .WORD   V_PATTERN-1     ; PATTERN		PATTERN COMMAND
0010A4  2  6E 3F                .WORD   LAB_SYS-1       ; SYS			SYS COMMAND
0010A6  2  73 21                .WORD   V_SOUND-1       ; SOUND			SOUND COMMAND
0010A8  2  CA 21                .WORD   V_NOISE-1       ; NOISE			NOISE COMMAND
0010AA  2  09 22                .WORD   V_TONE-1        ; TONE			TONE COMMAND
0010AC  2  93 21                .WORD   V_VOLUME-1      ; VOLUME		VOLUME COMMAND
0010AE  2  A8 21                .WORD   V_VOICE-1       ; VOICE			VOICE COMMAND
0010B0  2               ; function pre process routine table
0010B0  2               
0010B0  2               LAB_FTPL:
0010B0  2               LAB_FTPM        = LAB_FTPL+$01
0010B0  2  7B 33                .WORD   LAB_PPFN-1      ; SGN(n)	process numeric expression in ()
0010B2  2  7B 33                .WORD   LAB_PPFN-1      ; INT(n)		"
0010B4  2  7B 33                .WORD   LAB_PPFN-1      ; ABS(n)		"
0010B6  2  FA 31                .WORD   LAB_EVEZ-1      ; USR(x)	process any expression
0010B8  2  00 33                .WORD   LAB_1BF7-1      ; FRE(x)		"
0010BA  2  00 33                .WORD   LAB_1BF7-1      ; POS(x)		"
0010BC  2  7B 33                .WORD   LAB_PPFN-1      ; SQR(n)	process numeric expression in ()
0010BE  2  7B 33                .WORD   LAB_PPFN-1      ; RND(n)		"
0010C0  2  7B 33                .WORD   LAB_PPFN-1      ; LOG(n)		"
0010C2  2  7B 33                .WORD   LAB_PPFN-1      ; EXP(n)		"
0010C4  2  7B 33                .WORD   LAB_PPFN-1      ; COS(n)		"
0010C6  2  7B 33                .WORD   LAB_PPFN-1      ; SIN(n)		"
0010C8  2  7B 33                .WORD   LAB_PPFN-1      ; TAN(n)		"
0010CA  2  7B 33                .WORD   LAB_PPFN-1      ; ATN(n)		"
0010CC  2  7B 33                .WORD   LAB_PPFN-1      ; PEEK(n)		"
0010CE  2  00 00                .WORD   $0000           ; SADD()	none
0010D0  2  75 33                .WORD   LAB_PPFS-1      ; LEN($)	process string expression in ()
0010D2  2  7B 33                .WORD   LAB_PPFN-1      ; STR$(n)	process numeric expression in ()
0010D4  2  75 33                .WORD   LAB_PPFS-1      ; VAL($)	process string expression in ()
0010D6  2  75 33                .WORD   LAB_PPFS-1      ; ASC($)		"
0010D8  2  75 33                .WORD   LAB_PPFS-1      ; UCASE$($)		"
0010DA  2  75 33                .WORD   LAB_PPFS-1      ; LCASE$($)		"
0010DC  2  7B 33                .WORD   LAB_PPFN-1      ; CHR$(n)	process numeric expression in ()
0010DE  2  A4 33                .WORD   LAB_BHSS-1      ; HEX$(n)		"
0010E0  2  A4 33                .WORD   LAB_BHSS-1      ; BIN$(n)		"
0010E2  2  00 00                .WORD   $0000           ; BITTST()	none
0010E4  2  CE 4B                .WORD   LAB_MMPP-1      ; MAX()	process numeric expression
0010E6  2  CE 4B                .WORD   LAB_MMPP-1      ; MIN()		"
0010E8  2  81 33                .WORD   LAB_PPBI-1      ; PI		advance pointer
0010EA  2  EC 1C                .WORD   LAB_PIECST-1    ; IECST		"
0010EC  2  44 23                .WORD   LAB_PSECOND-1   ; SECOND	"
0010EE  2  00 00                .WORD   $0000           ; VARPTR()	none
0010F0  2  88 33                .WORD   LAB_LRMS-1      ; LEFT$()	process string expression
0010F2  2  88 33                .WORD   LAB_LRMS-1      ; RIGHT$()		"
0010F4  2  88 33                .WORD   LAB_LRMS-1      ; MID$()		"
0010F6  2  7B 33                .WORD   LAB_PPFN-1      ; CON()		"
0010F8  2               
0010F8  2               ; action addresses for functions
0010F8  2               
0010F8  2               LAB_FTBL:
0010F8  2               LAB_FTBM        = LAB_FTBL+$01
0010F8  2  86 44                .WORD   LAB_SGN-1       ; SGN()
0010FA  2  74 45                .WORD   LAB_INT-1       ; INT()
0010FC  2  A3 44                .WORD   LAB_ABS-1       ; ABS()
0010FE  2  89 49                .WORD   LAB_USR-1       ; USR()
001100  2  99 37                .WORD   LAB_FRE-1       ; FRE()
001102  2  B8 37                .WORD   LAB_POS-1       ; POS()
001104  2  92 4C                .WORD   LAB_SQR-1       ; SQR()
001106  2  D9 48                .WORD   LAB_RND-1       ; RND()		modified function
001108  2  9A 41                .WORD   LAB_LOG-1       ; LOG()
00110A  2  27 48                .WORD   LAB_EXP-1       ; EXP()
00110C  2  0D 49                .WORD   LAB_COS-1       ; COS()
00110E  2  14 49                .WORD   LAB_SIN-1       ; SIN()
001110  2  5D 49                .WORD   LAB_TAN-1       ; TAN()
001112  2  8F 49                .WORD   LAB_ATN-1       ; ATN()
001114  2  4A 3F                .WORD   LAB_PEEK-1      ; PEEK()
001116  2  19 3E                .WORD   LAB_SADD-1      ; SADD()		new function
001118  2  5B 3E                .WORD   LAB_LENS-1      ; LEN()
00111A  2  0A 39                .WORD   LAB_STRS-1      ; STR$()
00111C  2  9F 3E                .WORD   LAB_VAL-1       ; VAL()
00111E  2  66 3E                .WORD   LAB_ASC-1       ; ASC()
001120  2  CF 3D                .WORD   LAB_UCASE-1     ; UCASE$()		new function
001122  2  83 3D                .WORD   LAB_LCASE-1     ; LCASE$()		new function
001124  2  87 3C                .WORD   LAB_CHRS-1      ; CHR$()
001126  2  8B 4A                .WORD   LAB_HEXS-1      ; HEX$()		new function
001128  2  13 4A                .WORD   LAB_BINS-1      ; BIN$()		new function
00112A  2  E8 49                .WORD   LAB_BTST-1      ; BITTST()		new function
00112C  2  D4 4B                .WORD   LAB_MAX-1       ; MAX()		new function
00112E  2  E4 4B                .WORD   LAB_MIN-1       ; MIN()		new function
001130  2  30 4D                .WORD   LAB_PI-1        ; PI			new function
001132  2  DF 1C                .WORD   LAB_IECST-1     ; IECST		new function
001134  2  07 23                .WORD   LAB_SECOND-1    ; SECOND	new function
001136  2  1F 4D                .WORD   LAB_VARPTR-1    ; VARPTR()		new function
001138  2  AD 3C                .WORD   LAB_LEFT-1      ; LEFT$()
00113A  2  CC 3C                .WORD   LAB_RIGHT-1     ; RIGHT$()
00113C  2  25 3D                .WORD   LAB_MIDS-1      ; MID$()
00113E  2  37 22                .WORD   LAB_CON-1       ; CON()
001140  2               
001140  2               ; hierarchy and action addresses for operator
001140  2               
001140  2               LAB_OPPT:
001140  2  79                   .BYTE   $79             ; +
001141  2  5A 40                .WORD   LAB_ADD-1
001143  2  79                   .BYTE   $79             ; -
001144  2  3F 40                .WORD   LAB_SUBTRACT-1
001146  2  7B                   .BYTE   $7B             ; *
001147  2  DB 41                .WORD   LAB_MULTIPLY-1
001149  2  7B                   .BYTE   $7B             ; /
00114A  2  F3 42                .WORD   LAB_DIVIDE-1
00114C  2  7F                   .BYTE   $7F             ; ^
00114D  2  E3 47                .WORD   LAB_POWER-1
00114F  2  50                   .BYTE   $50             ; AND
001150  2  EF 33                .WORD   LAB_AND-1
001152  2  46                   .BYTE   $46             ; EOR			new operator
001153  2  D5 33                .WORD   LAB_EOR-1
001155  2  46                   .BYTE   $46             ; OR
001156  2  E2 33                .WORD   LAB_OR-1
001158  2  56                   .BYTE   $56             ; >>			new operator
001159  2  C6 34                .WORD   LAB_RSHIFT-1
00115B  2  56                   .BYTE   $56             ; <<			new operator
00115C  2  AE 34                .WORD   LAB_LSHIFT-1
00115E  2  7D                   .BYTE   $7D             ; >
00115F  2  1C 48                .WORD   LAB_GTHAN-1
001161  2  5A                   .BYTE   $5A             ; =
001162  2  2D 33                .WORD   LAB_EQUAL-1
001164  2  64                   .BYTE   $64             ; <
001165  2  10 34                .WORD   LAB_LTHAN-1
001167  2               
001167  2               ; keywords start with ..
001167  2               ; this is the first character table and must be in alphabetic order
001167  2               
001167  2               TAB_1STC:
001167  2  2A                   .BYTE   "*"
001168  2  2B                   .BYTE   "+"
001169  2  2D                   .BYTE   "-"
00116A  2  2F                   .BYTE   "/"
00116B  2  3C                   .BYTE   "<"
00116C  2  3D                   .BYTE   "="
00116D  2  3E                   .BYTE   ">"
00116E  2  3F                   .BYTE   "?"
00116F  2  41                   .BYTE   "A"
001170  2  42                   .BYTE   "B"
001171  2  43                   .BYTE   "C"
001172  2  44                   .BYTE   "D"
001173  2  45                   .BYTE   "E"
001174  2  46                   .BYTE   "F"
001175  2  47                   .BYTE   "G"
001176  2  48                   .BYTE   "H"
001177  2  49                   .BYTE   "I"
001178  2  4B                   .BYTE   "K"
001179  2  4C                   .BYTE   "L"
00117A  2  4D                   .BYTE   "M"
00117B  2  4E                   .BYTE   "N"
00117C  2  4F                   .BYTE   "O"
00117D  2  50                   .BYTE   "P"
00117E  2  52                   .BYTE   "R"
00117F  2  53                   .BYTE   "S"
001180  2  54                   .BYTE   "T"
001181  2  55                   .BYTE   "U"
001182  2  56                   .BYTE   "V"
001183  2  57                   .BYTE   "W"
001184  2  5E                   .BYTE   "^"
001185  2  00                   .BYTE   $00             ; table terminator
001186  2               
001186  2               ; pointers to keyword tables
001186  2               
001186  2               TAB_CHRT:
001186  2  C2 11                .WORD   TAB_STAR        ; table for "*"
001188  2  C4 11                .WORD   TAB_PLUS        ; table for "+"
00118A  2  C6 11                .WORD   TAB_MNUS        ; table for "-"
00118C  2  C8 11                .WORD   TAB_SLAS        ; table for "/"
00118E  2  CA 11                .WORD   TAB_LESS        ; table for "<"
001190  2  CE 11                .WORD   TAB_EQUL        ; table for "="
001192  2  D0 11                .WORD   TAB_MORE        ; table for ">"
001194  2  D4 11                .WORD   TAB_QEST        ; table for "?"
001196  2  D6 11                .WORD   TAB_ASCA        ; table for "A"
001198  2  E6 11                .WORD   TAB_ASCB        ; table for "B"
00119A  2  FF 11                .WORD   TAB_ASCC        ; table for "C"
00119C  2  24 12                .WORD   TAB_ASCD        ; table for "D"
00119E  2  4E 12                .WORD   TAB_ASCE        ; table for "E"
0011A0  2  5D 12                .WORD   TAB_ASCF        ; table for "F"
0011A2  2  67 12                .WORD   TAB_ASCG        ; table for "G"
0011A4  2  78 12                .WORD   TAB_ASCH        ; table for "H"
0011A6  2  7E 12                .WORD   TAB_ASCI        ; table for "I"
0011A8  2  A3 12                .WORD   TAB_ASCK        ; table for "K"
0011AA  2  A3 12                .WORD   TAB_ASCL        ; table for "L"
0011AC  2  CE 12                .WORD   TAB_ASCM        ; table for "M"
0011AE  2  E3 12                .WORD   TAB_ASCN        ; table for "N"
0011B0  2  F7 12                .WORD   TAB_ASCO        ; table for "O"
0011B2  2  03 13                .WORD   TAB_ASCP        ; table for "P"
0011B4  2  27 13                .WORD   TAB_ASCR        ; table for "R"
0011B6  2  4A 13                .WORD   TAB_ASCS        ; table for "S"
0011B8  2  8F 13                .WORD   TAB_ASCT        ; table for "T"
0011BA  2  A2 13                .WORD   TAB_ASCU        ; table for "U"
0011BC  2  B3 13                .WORD   TAB_ASCV        ; table for "V"
0011BE  2  CA 13                .WORD   TAB_ASCW        ; table for "W"
0011C0  2  D9 13                .WORD   TAB_POWR        ; table for "^"
0011C2  2               
0011C2  2               ; tables for each start character, note if a longer keyword with the same start
0011C2  2               ; letters as a shorter one exists then it must come first, else the list is in
0011C2  2               ; alphabetical order as follows ..
0011C2  2               
0011C2  2               ; [keyword,token
0011C2  2               ; [keyword,token]]
0011C2  2               ; end marker (#$00)
0011C2  2               
0011C2  2               TAB_STAR:
0011C2  2  C9 00                .BYTE   TK_MUL,$00      ; *
0011C4  2               TAB_PLUS:
0011C4  2  C7 00                .BYTE   TK_PLUS,$00     ; +
0011C6  2               TAB_MNUS:
0011C6  2  C8 00                .BYTE   TK_MINUS,$00    ; -
0011C8  2               TAB_SLAS:
0011C8  2  CA 00                .BYTE   TK_DIV,$00      ; /
0011CA  2               TAB_LESS:
0011CA  2               LBB_LSHIFT:
0011CA  2  3C D0                .BYTE   "<",TK_LSHIFT   ; <<	note - "<<" must come before "<"
0011CC  2  D3                   .BYTE   TK_LT           ; <
0011CD  2  00                   .BYTE   $00
0011CE  2               TAB_EQUL:
0011CE  2  D2 00                .BYTE   TK_EQUAL,$00    ; =
0011D0  2               TAB_MORE:
0011D0  2               LBB_RSHIFT:
0011D0  2  3E CF                .BYTE   ">",TK_RSHIFT   ; >>	note - ">>" must come before ">"
0011D2  2  D1                   .BYTE   TK_GT           ; >
0011D3  2  00                   .BYTE   $00
0011D4  2               TAB_QEST:
0011D4  2  9E 00                .BYTE   TK_PRINT,$00    ; ?
0011D6  2               TAB_ASCA:
0011D6  2               LBB_ABS:
0011D6  2  42 53 28 D6          .BYTE   "BS(",TK_ABS    ; ABS(
0011DA  2               LBB_AND:
0011DA  2  4E 44 CC             .BYTE   "ND",TK_AND     ; AND
0011DD  2               LBB_ASC:
0011DD  2  53 43 28 E7          .BYTE   "SC(",TK_ASC    ; ASC(
0011E1  2               LBB_ATN:
0011E1  2  54 4E 28 E1          .BYTE   "TN(",TK_ATN    ; ATN(
0011E5  2  00                   .BYTE   $00
0011E6  2               TAB_ASCB:
0011E6  2               LBB_BINS:
0011E6  2  49 4E 24 28          .BYTE   "IN$(",TK_BINS  ; BIN$(
0011EA  2  EC           
0011EB  2               LBB_BITCLR:
0011EB  2  49 54 43 4C          .BYTE   "ITCLR",TK_BITCLR; BITCLR
0011EF  2  52 A7        
0011F1  2               LBB_BITSET:
0011F1  2  49 54 53 45          .BYTE   "ITSET",TK_BITSET; BITSET
0011F5  2  54 A6        
0011F7  2               LBB_BITTST:
0011F7  2  49 54 54 53          .BYTE   "ITTST(",TK_BITTST
0011FB  2  54 28 ED     
0011FE  2               ; BITTST(
0011FE  2  00                   .BYTE   $00
0011FF  2               TAB_ASCC:
0011FF  2               LBB_CALL:
0011FF  2  41 4C 4C 9B          .BYTE   "ALL",TK_CALL   ; CALL
001203  2               LBB_CHRS:
001203  2  48 52 24 28          .BYTE   "HR$(",TK_CHRS  ; CHR$(
001207  2  EA           
001208  2               LBB_CLEAR:
001208  2  4C 45 41 52          .BYTE   "LEAR",TK_CLEAR ; CLEAR
00120C  2  A1           
00120D  2               LBB_CLOSE:
00120D  2  4C 4F 53 45          .BYTE   "LOSE",TK_CLOSE ; CLOSE
001211  2  AA           
001212  2               LBB_COLOR:
001212  2  4F 4C 4F 52          .BYTE   "OLOR",TK_COLOR ; COLOR
001216  2  B2           
001217  2               LBB_CON:
001217  2  4F 4E 28 F7          .BYTE   "ON(",TK_CON    ;CON
00121B  2               LBB_CONT:
00121B  2  4F 4E 54 9F          .BYTE   "ONT",TK_CONT   ; CONT
00121F  2               LBB_COS:
00121F  2  4F 53 28 DE          .BYTE   "OS(",TK_COS    ; COS(
001223  2  00                   .BYTE   $00
001224  2               TAB_ASCD:
001224  2               LBB_DATA:
001224  2  41 54 41 83          .BYTE   "ATA",TK_DATA   ; DATA
001228  2               LBB_DEC:
001228  2  45 43 8A             .BYTE   "EC",TK_DEC     ; DEC
00122B  2               LBB_DEF:
00122B  2  45 46 99             .BYTE   "EF",TK_DEF     ; DEF
00122E  2               LBB_DIM:
00122E  2  49 4D 87             .BYTE   "IM",TK_DIM     ; DIM
001231  2               LBB_DIRECTORY:
001231  2  49 52 45 43          .BYTE   "IRECTORY",TK_DIRECTORY; DIRECTORY
001235  2  54 4F 52 59  
001239  2  84           
00123A  2               LBB_DISKCMD:
00123A  2  49 53 4B 43          .BYTE   "ISKCMD",TK_DISKCMD; DISKCMD
00123E  2  4D 44 AF     
001241  2               LBB_DISKSTATUS:
001241  2  49 53 4B 53          .BYTE   "ISKSTATUS",TK_DISKSTATUS; DISKSTATUS
001245  2  54 41 54 55  
001249  2  53 85        
00124B  2               LBB_DO:
00124B  2  4F 9C                .BYTE   "O",TK_DO       ; DO
00124D  2  00                   .BYTE   $00
00124E  2               TAB_ASCE:
00124E  2               LBB_ELSE:
00124E  2  4C 53 45 BD          .BYTE   "LSE",TK_ELSE   ; ELSE
001252  2               LBB_END:
001252  2  4E 44 80             .BYTE   "ND",TK_END     ; END
001255  2               LBB_EOR:
001255  2  4F 52 CD             .BYTE   "OR",TK_EOR     ; EOR
001258  2               LBB_EXP:
001258  2  58 50 28 DD          .BYTE   "XP(",TK_EXP    ; EXP(
00125C  2  00                   .BYTE   $00
00125D  2               TAB_ASCF:
00125D  2               LBB_FN:
00125D  2  4E BF                .BYTE   "N",TK_FN       ; FN
00125F  2               LBB_FOR:
00125F  2  4F 52 81             .BYTE   "OR",TK_FOR     ; FOR
001262  2               LBB_FRE:
001262  2  52 45 28 D8          .BYTE   "RE(",TK_FRE    ; FRE(
001266  2  00                   .BYTE   $00
001267  2               TAB_ASCG:
001267  2               LBB_GETN:
001267  2  45 54 23 AE          .BYTE   "ET#",TK_GETN   ; GETN
00126B  2               LBB_GET:
00126B  2  45 54 A4             .BYTE   "ET",TK_GET     ; GET
00126E  2               LBB_GOSUB:
00126E  2  4F 53 55 42          .BYTE   "OSUB",TK_GOSUB ; GOSUB
001272  2  8F           
001273  2               LBB_GOTO:
001273  2  4F 54 4F 8B          .BYTE   "OTO",TK_GOTO   ; GOTO
001277  2  00                   .BYTE   $00
001278  2               TAB_ASCH:
001278  2               LBB_HEXS:
001278  2  45 58 24 28          .BYTE   "EX$(",TK_HEXS  ; HEX$(
00127C  2  EB           
00127D  2  00                   .BYTE   $00
00127E  2               TAB_ASCI:
00127E  2               LBB_IECINPUT:
00127E  2  45 43 49 4E          .BYTE   "ECINPUT",TK_IECINPUT; IECINPUT
001282  2  50 55 54 AB  
001286  2               LBB_IECOUTPUT:
001286  2  45 43 4F 55          .BYTE   "ECOUTPUT",TK_IECOUTPUT; IECOUTPUT
00128A  2  54 50 55 54  
00128E  2  AC           
00128F  2               LBB_IECST:
00128F  2  45 43 53 54          .BYTE   "ECST",TK_IECST ; IECST
001293  2  F1           
001294  2               LBB_IF:
001294  2  46 8D                .BYTE   "F",TK_IF       ; IF
001296  2               LBB_INC:
001296  2  4E 43 95             .BYTE   "NC",TK_INC     ; INC
001299  2               LBB_INPUT:
001299  2  4E 50 55 54          .BYTE   "NPUT",TK_INPUT ; INPUT
00129D  2  86           
00129E  2               LBB_INT:
00129E  2  4E 54 28 D5          .BYTE   "NT(",TK_INT    ; INT(
0012A2  2  00                   .BYTE   $00
0012A3  2               TAB_ASCK:
0012A3  2               TAB_ASCL:
0012A3  2               LBB_LCASES:
0012A3  2  43 41 53 45          .BYTE   "CASE$(",TK_LCASES
0012A7  2  24 28 E9     
0012AA  2               ; LCASE$(
0012AA  2               LBB_LEFTS:
0012AA  2  45 46 54 24          .BYTE   "EFT$(",TK_LEFTS; LEFT$(
0012AE  2  28 F4        
0012B0  2               LBB_LEN:
0012B0  2  45 4E 28 E4          .BYTE   "EN(",TK_LEN    ; LEN(
0012B4  2               LBB_LET:
0012B4  2  45 54 89             .BYTE   "ET",TK_LET     ; LET
0012B7  2               LBB_LIST:
0012B7  2  49 53 54 A0          .BYTE   "IST",TK_LIST   ; LIST
0012BB  2               LBB_LOAD:
0012BB  2  4F 41 44 97          .BYTE   "OAD",TK_LOAD   ; LOAD
0012BF  2               LBB_LOCATE:
0012BF  2  4F 43 41 54          .BYTE   "OCATE",TK_LOCATE; LOCATE
0012C3  2  45 B1        
0012C5  2               LBB_LOG:
0012C5  2  4F 47 28 DC          .BYTE   "OG(",TK_LOG    ; LOG(
0012C9  2               LBB_LOOP:
0012C9  2  4F 4F 50 9D          .BYTE   "OOP",TK_LOOP   ; LOOP
0012CD  2  00                   .BYTE   $00
0012CE  2               TAB_ASCM:
0012CE  2               LBB_MAX:
0012CE  2  41 58 28 EE          .BYTE   "AX(",TK_MAX    ; MAX(
0012D2  2               LBB_MIDS:
0012D2  2  49 44 24 28          .BYTE   "ID$(",TK_MIDS  ; MID$(
0012D6  2  F6           
0012D7  2               LBB_MIN:
0012D7  2  49 4E 28 EF          .BYTE   "IN(",TK_MIN    ; MIN(
0012DB  2               LBB_MONITOR:
0012DB  2  4F 4E 49 54          .BYTE   "ONITOR",TK_MONITOR; MONITOR(
0012DF  2  4F 52 A8     
0012E2  2  00                   .BYTE   $00
0012E3  2               TAB_ASCN:
0012E3  2               LBB_NEW:
0012E3  2  45 57 A2             .BYTE   "EW",TK_NEW     ; NEW
0012E6  2               LBB_NEXT:
0012E6  2  45 58 54 82          .BYTE   "EXT",TK_NEXT   ; NEXT
0012EA  2               LBB_NOISE:
0012EA  2  4F 49 53 45          .BYTE   "OISE",TK_NOISE ; NOISE
0012EE  2  B8           
0012EF  2               LBB_NOT:
0012EF  2  4F 54 C2             .BYTE   "OT",TK_NOT     ; NOT
0012F2  2               LBB_NULL:
0012F2  2  55 4C 4C 94          .BYTE   "ULL",TK_NULL   ; NULL
0012F6  2  00                   .BYTE   $00
0012F7  2               TAB_ASCO:
0012F7  2               LBB_OFF:
0012F7  2  46 46 C6             .BYTE   "FF",TK_OFF     ; OFF
0012FA  2               LBB_ON:
0012FA  2  4E 93                .BYTE   "N",TK_ON       ; ON
0012FC  2               LBB_OPEN:
0012FC  2  50 45 4E A9          .BYTE   "PEN",TK_OPEN   ; OPEN
001300  2               LBB_OR:
001300  2  52 CE                .BYTE   "R",TK_OR       ; OR
001302  2  00                   .BYTE   $00
001303  2               TAB_ASCP:
001303  2               LBB_PATTERN:
001303  2  41 54 54 45          .BYTE   "ATTERN",TK_PATTERN; PATTERN
001307  2  52 4E B5     
00130A  2               LBB_PEEK:
00130A  2  45 45 4B 28          .BYTE   "EEK(",TK_PEEK  ; PEEK(
00130E  2  E2           
00130F  2               LBB_PI:
00130F  2  49 F0                .BYTE   "I",TK_PI       ; PI
001311  2               LBB_PLOT:
001311  2  4C 4F 54 B4          .BYTE   "LOT",TK_PLOT   ; PLOT
001315  2               LBB_POKE:
001315  2  4F 4B 45 9A          .BYTE   "OKE",TK_POKE   ; POKE
001319  2               LBB_POS:
001319  2  4F 53 28 D9          .BYTE   "OS(",TK_POS    ; POS(
00131D  2               LBB_PRINT:
00131D  2  52 49 4E 54          .BYTE   "RINT",TK_PRINT ; PRINT
001321  2  9E           
001322  2               LBB_PUTN:
001322  2  55 54 23 AD          .BYTE   "UT#",TK_PUTN   ; PUTN
001326  2  00                   .BYTE   $00
001327  2               TAB_ASCR:
001327  2               LBB_READ:
001327  2  45 41 44 88          .BYTE   "EAD",TK_READ   ; READ
00132B  2               LBB_REM:
00132B  2  45 4D 91             .BYTE   "EM",TK_REM     ; REM
00132E  2               LBB_RESTORE:
00132E  2  45 53 54 4F          .BYTE   "ESTORE",TK_RESTORE
001332  2  52 45 8E     
001335  2               ; RESTORE
001335  2               LBB_RETURN:
001335  2  45 54 55 52          .BYTE   "ETURN",TK_RETURN; RETURN
001339  2  4E 90        
00133B  2               LBB_RIGHTS:
00133B  2  49 47 48 54          .BYTE   "IGHT$(",TK_RIGHTS
00133F  2  24 28 F5     
001342  2               ; RIGHT$(
001342  2               LBB_RND:
001342  2  4E 44 28 DB          .BYTE   "ND(",TK_RND    ; RND(
001346  2               LBB_RUN:
001346  2  55 4E 8C             .BYTE   "UN",TK_RUN     ; RUN
001349  2  00                   .BYTE   $00
00134A  2               TAB_ASCS:
00134A  2               LBB_SADD:
00134A  2  41 44 44 28          .BYTE   "ADD(",TK_SADD  ; SADD(
00134E  2  E3           
00134F  2               LBB_SAVE:
00134F  2  41 56 45 98          .BYTE   "AVE",TK_SAVE   ; SAVE
001353  2               LBB_SCNCLR:
001353  2  43 4E 43 4C          .BYTE   "CNCLR",TK_SCNCLR ; SCNCLR
001357  2  52 B0        
001359  2               LBB_SCREEN:
001359  2  43 52 45 45          .BYTE   "CREEN",TK_SCREEN ; SCREEN
00135D  2  4E B3        
00135F  2               LBB_SECOND:
00135F  2  45 43 4F 4E          .BYTE   "ECOND",TK_SECOND   ; SECOND
001363  2  44 F2        
001365  2               LBB_SGN:
001365  2  47 4E 28 D4          .BYTE   "GN(",TK_SGN    ; SGN(
001369  2               LBB_SIN:
001369  2  49 4E 28 DF          .BYTE   "IN(",TK_SIN    ; SIN(
00136D  2               LBB_SOUND:
00136D  2  4F 55 4E 44          .BYTE   "OUND",TK_SOUND ; SOUND
001371  2  B7           
001372  2               LBB_SPC:
001372  2  50 43 28 C0          .BYTE   "PC(",TK_SPC    ; SPC(
001376  2               LBB_SQR:
001376  2  51 52 28 DA          .BYTE   "QR(",TK_SQR    ; SQR(
00137A  2               LBB_STEP:
00137A  2  54 45 50 C3          .BYTE   "TEP",TK_STEP   ; STEP
00137E  2               LBB_STOP:
00137E  2  54 4F 50 92          .BYTE   "TOP",TK_STOP   ; STOP
001382  2               LBB_STRS:
001382  2  54 52 24 28          .BYTE   "TR$(",TK_STRS  ; STR$(
001386  2  E5           
001387  2               LBB_SWAP:
001387  2  57 41 50 A5          .BYTE   "WAP",TK_SWAP   ; SWAP
00138B  2               LBB_SYS:
00138B  2  59 53 B6             .BYTE   "YS",TK_SYS     ; SYS
00138E  2  00                   .BYTE   $00
00138F  2               TAB_ASCT:
00138F  2               LBB_TAB:
00138F  2  41 42 28 BC          .BYTE   "AB(",TK_TAB    ; TAB(
001393  2               LBB_TAN:
001393  2  41 4E 28 E0          .BYTE   "AN(",TK_TAN    ; TAN(
001397  2               LBB_THEN:
001397  2  48 45 4E C1          .BYTE   "HEN",TK_THEN   ; THEN
00139B  2               LBB_TONE:
00139B  2  4F 4E 45 B9          .BYTE   "ONE",TK_TONE   ; TONE
00139F  2               LBB_TO:
00139F  2  4F BE                .BYTE   "O",TK_TO       ; TO
0013A1  2  00                   .BYTE   $00
0013A2  2               TAB_ASCU:
0013A2  2               LBB_UCASES:
0013A2  2  43 41 53 45          .BYTE   "CASE$(",TK_UCASES
0013A6  2  24 28 E8     
0013A9  2               ; UCASE$(
0013A9  2               LBB_UNTIL:
0013A9  2  4E 54 49 4C          .BYTE   "NTIL",TK_UNTIL ; UNTIL
0013AD  2  C4           
0013AE  2               LBB_USR:
0013AE  2  53 52 28 D7          .BYTE   "SR(",TK_USR    ; USR(
0013B2  2  00                   .BYTE   $00
0013B3  2               TAB_ASCV:
0013B3  2               LBB_VAL:
0013B3  2  41 4C 28 E6          .BYTE   "AL(",TK_VAL    ; VAL(
0013B7  2               LBB_VPTR:
0013B7  2  41 52 50 54          .BYTE   "ARPTR(",TK_VPTR; VARPTR(
0013BB  2  52 28 F3     
0013BE  2               LBB_VOICE:
0013BE  2  4F 49 43 45          .BYTE   "OICE",TK_VOICE ; VOICE
0013C2  2  BB           
0013C3  2               LBB_VOLUME:
0013C3  2  4F 4C 55 4D          .BYTE   "OLUME",TK_VOLUME; VOLUME
0013C7  2  45 BA        
0013C9  2               
0013C9  2  00                   .BYTE   $00
0013CA  2               TAB_ASCW:
0013CA  2               LBB_WAIT:
0013CA  2  41 49 54 96          .BYTE   "AIT",TK_WAIT   ; WAIT
0013CE  2               LBB_WHILE:
0013CE  2  48 49 4C 45          .BYTE   "HILE",TK_WHILE ; WHILE
0013D2  2  C5           
0013D3  2               LBB_WIDTH:
0013D3  2  49 44 54 48          .BYTE   "IDTH",TK_WIDTH ; WIDTH
0013D7  2  A3           
0013D8  2  00                   .BYTE   $00
0013D9  2               TAB_POWR:
0013D9  2  CB 00                .BYTE   TK_POWER,$00    ; ^
0013DB  2               
0013DB  2               ; new decode table for LIST
0013DB  2               ; Table is ..
0013DB  2               ; byte - keyword length, keyword first character
0013DB  2               ; word - pointer to rest of keyword from dictionary
0013DB  2               
0013DB  2               ; note if length is 1 then the pointer is ignored
0013DB  2               
0013DB  2               LAB_KEYT:
0013DB  2  03 45                .BYTE   3,'E'
0013DD  2  52 12                .WORD   LBB_END         ; END
0013DF  2  03 46                .BYTE   3,'F'
0013E1  2  5F 12                .WORD   LBB_FOR         ; FOR
0013E3  2  04 4E                .BYTE   4,'N'
0013E5  2  E6 12                .WORD   LBB_NEXT        ; NEXT
0013E7  2  04 44                .BYTE   4,'D'
0013E9  2  24 12                .WORD   LBB_DATA        ; DATA
0013EB  2  09 44                .BYTE   9,'D'
0013ED  2  31 12                .WORD   LBB_DIRECTORY   ; DIRECTORY
0013EF  2  0A 44                .BYTE   10,'D'
0013F1  2  41 12                .WORD   LBB_DISKSTATUS  ; DISKSTATUS
0013F3  2  05 49                .BYTE   5,'I'
0013F5  2  99 12                .WORD   LBB_INPUT       ; INPUT
0013F7  2  03 44                .BYTE   3,'D'
0013F9  2  2E 12                .WORD   LBB_DIM         ; DIM
0013FB  2  04 52                .BYTE   4,'R'
0013FD  2  27 13                .WORD   LBB_READ        ; READ
0013FF  2  03 4C                .BYTE   3,'L'
001401  2  B4 12                .WORD   LBB_LET         ; LET
001403  2  03 44                .BYTE   3,'D'
001405  2  28 12                .WORD   LBB_DEC         ; DEC
001407  2  04 47                .BYTE   4,'G'
001409  2  73 12                .WORD   LBB_GOTO        ; GOTO
00140B  2  03 52                .BYTE   3,'R'
00140D  2  46 13                .WORD   LBB_RUN         ; RUN
00140F  2  02 49                .BYTE   2,'I'
001411  2  94 12                .WORD   LBB_IF          ; IF
001413  2  07 52                .BYTE   7,'R'
001415  2  2E 13                .WORD   LBB_RESTORE     ; RESTORE
001417  2  05 47                .BYTE   5,'G'
001419  2  6E 12                .WORD   LBB_GOSUB       ; GOSUB
00141B  2  06 52                .BYTE   6,'R'
00141D  2  35 13                .WORD   LBB_RETURN      ; RETURN
00141F  2  03 52                .BYTE   3,'R'
001421  2  2B 13                .WORD   LBB_REM         ; REM
001423  2  04 53                .BYTE   4,'S'
001425  2  7E 13                .WORD   LBB_STOP        ; STOP
001427  2  02 4F                .BYTE   2,'O'
001429  2  FA 12                .WORD   LBB_ON          ; ON
00142B  2  04 4E                .BYTE   4,'N'
00142D  2  F2 12                .WORD   LBB_NULL        ; NULL
00142F  2  03 49                .BYTE   3,'I'
001431  2  96 12                .WORD   LBB_INC         ; INC
001433  2  04 57                .BYTE   4,'W'
001435  2  CA 13                .WORD   LBB_WAIT        ; WAIT
001437  2  04 4C                .BYTE   4,'L'
001439  2  BB 12                .WORD   LBB_LOAD        ; LOAD
00143B  2  04 53                .BYTE   4,'S'
00143D  2  4F 13                .WORD   LBB_SAVE        ; SAVE
00143F  2  03 44                .BYTE   3,'D'
001441  2  2B 12                .WORD   LBB_DEF         ; DEF
001443  2  04 50                .BYTE   4,'P'
001445  2  15 13                .WORD   LBB_POKE        ; POKE
001447  2  04 43                .BYTE   4,'C'
001449  2  FF 11                .WORD   LBB_CALL        ; CALL
00144B  2  02 44                .BYTE   2,'D'
00144D  2  4B 12                .WORD   LBB_DO          ; DO
00144F  2  04 4C                .BYTE   4,'L'
001451  2  C9 12                .WORD   LBB_LOOP        ; LOOP
001453  2  05 50                .BYTE   5,'P'
001455  2  1D 13                .WORD   LBB_PRINT       ; PRINT
001457  2  04 43                .BYTE   4,'C'
001459  2  1B 12                .WORD   LBB_CONT        ; CONT
00145B  2  04 4C                .BYTE   4,'L'
00145D  2  B7 12                .WORD   LBB_LIST        ; LIST
00145F  2  05 43                .BYTE   5,'C'
001461  2  08 12                .WORD   LBB_CLEAR       ; CLEAR
001463  2  03 4E                .BYTE   3,'N'
001465  2  E3 12                .WORD   LBB_NEW         ; NEW
001467  2  05 57                .BYTE   5,'W'
001469  2  D3 13                .WORD   LBB_WIDTH       ; WIDTH
00146B  2  03 47                .BYTE   3,'G'
00146D  2  6B 12                .WORD   LBB_GET         ; GET
00146F  2  04 53                .BYTE   4,'S'
001471  2  87 13                .WORD   LBB_SWAP        ; SWAP
001473  2  06 42                .BYTE   6,'B'
001475  2  F1 11                .WORD   LBB_BITSET      ; BITSET
001477  2  06 42                .BYTE   6,'B'
001479  2  EB 11                .WORD   LBB_BITCLR      ; BITCLR
00147B  2  07 4D                .BYTE   7,'M'
00147D  2  DB 12                .WORD   LBB_MONITOR     ; MONITOR
00147F  2  04 4F                .BYTE   4,'O'
001481  2  FC 12                .WORD   LBB_OPEN        ; OPEN
001483  2  05 43                .BYTE   5,'C'
001485  2  0D 12                .WORD   LBB_CLOSE       ; CLOSE
001487  2  08 49                .BYTE   8,'I'
001489  2  7E 12                .WORD   LBB_IECINPUT    ; IECINPUT
00148B  2  09 49                .BYTE   9,'I'
00148D  2  86 12                .WORD   LBB_IECOUTPUT   ; IECOUTPUT
00148F  2  04 50                .BYTE   4,'P'
001491  2  22 13                .WORD   LBB_PUTN        ; PUTN
001493  2  04 47                .BYTE   4,'G'
001495  2  67 12                .WORD   LBB_GETN        ; GETN
001497  2  07 44                .BYTE   7,'D'
001499  2  3A 12                .WORD   LBB_DISKCMD     ; DISKCMD
00149B  2  06 53                .BYTE   6,'S'
00149D  2  53 13                .WORD   LBB_SCNCLR      ; SCNCLR
00149F  2  06 4C                .BYTE   6,'L'
0014A1  2  BF 12                .WORD   LBB_LOCATE      ; LOCATE
0014A3  2  05 43                .BYTE   5,'C'
0014A5  2  12 12                .WORD   LBB_COLOR       ; COLOR
0014A7  2  06 53                .BYTE   6,'S'
0014A9  2  59 13                .WORD   LBB_SCREEN      ; SCREEN
0014AB  2  04 50                .BYTE   4,'P'
0014AD  2  11 13                .WORD   LBB_PLOT        ; PLOT
0014AF  2  07 50                .BYTE   7,'P'
0014B1  2  03 13                .WORD   LBB_PATTERN     ; PATTERN
0014B3  2  03 53                .BYTE   3,'S'
0014B5  2  8B 13                .WORD   LBB_SYS         ; SYS
0014B7  2  05 53                .BYTE   5,'S'
0014B9  2  6D 13                .WORD   LBB_SOUND       ; SOUND
0014BB  2  05 4E                .BYTE   5,'N'
0014BD  2  EA 12                .WORD   LBB_NOISE       ; NOISE
0014BF  2  04 54                .BYTE   4,'T'
0014C1  2  9B 13                .WORD   LBB_TONE        ; TONE
0014C3  2  06 56                .BYTE   6,'V'
0014C5  2  C3 13                .WORD   LBB_VOLUME      ; VOLUME
0014C7  2  05 56                .BYTE   5,'V'
0014C9  2  BE 13                .WORD   LBB_VOICE       ; VOICE
0014CB  2               
0014CB  2               ; secondary commands (can't start a statement)
0014CB  2               
0014CB  2  04 54                .BYTE   4,'T'
0014CD  2  8F 13                .WORD   LBB_TAB         ; TAB
0014CF  2  04 45                .BYTE   4,'E'
0014D1  2  4E 12                .WORD   LBB_ELSE        ; ELSE
0014D3  2  02 54                .BYTE   2,'T'
0014D5  2  9F 13                .WORD   LBB_TO          ; TO
0014D7  2  02 46                .BYTE   2,'F'
0014D9  2  5D 12                .WORD   LBB_FN          ; FN
0014DB  2  04 53                .BYTE   4,'S'
0014DD  2  72 13                .WORD   LBB_SPC         ; SPC
0014DF  2  04 54                .BYTE   4,'T'
0014E1  2  97 13                .WORD   LBB_THEN        ; THEN
0014E3  2  03 4E                .BYTE   3,'N'
0014E5  2  EF 12                .WORD   LBB_NOT         ; NOT
0014E7  2  04 53                .BYTE   4,'S'
0014E9  2  7A 13                .WORD   LBB_STEP        ; STEP
0014EB  2  05 55                .BYTE   5,'U'
0014ED  2  A9 13                .WORD   LBB_UNTIL       ; UNTIL
0014EF  2  05 57                .BYTE   5,'W'
0014F1  2  CE 13                .WORD   LBB_WHILE       ; WHILE
0014F3  2  03 4F                .BYTE   3,'O'
0014F5  2  F7 12                .WORD   LBB_OFF         ; OFF
0014F7  2               
0014F7  2               ; opperators
0014F7  2               
0014F7  2  01 2B                .BYTE   1,'+'
0014F9  2  00 00                .WORD   $0000           ; +
0014FB  2  01 2D                .BYTE   1,'-'
0014FD  2  00 00                .WORD   $0000           ; -
0014FF  2  01 2A                .BYTE   1,'*'
001501  2  00 00                .WORD   $0000           ; *
001503  2  01 2F                .BYTE   1,'/'
001505  2  00 00                .WORD   $0000           ; /
001507  2  01 5E                .BYTE   1,'^'
001509  2  00 00                .WORD   $0000           ; ^
00150B  2  03 41                .BYTE   3,'A'
00150D  2  DA 11                .WORD   LBB_AND         ; AND
00150F  2  03 45                .BYTE   3,'E'
001511  2  55 12                .WORD   LBB_EOR         ; EOR
001513  2  02 4F                .BYTE   2,'O'
001515  2  00 13                .WORD   LBB_OR          ; OR
001517  2  02 3E                .BYTE   2,'>'
001519  2  D0 11                .WORD   LBB_RSHIFT      ; >>
00151B  2  02 3C                .BYTE   2,'<'
00151D  2  CA 11                .WORD   LBB_LSHIFT      ; <<
00151F  2  01 3E                .BYTE   1,'>'
001521  2  00 00                .WORD   $0000           ; >
001523  2  01 3D                .BYTE   1,'='
001525  2  00 00                .WORD   $0000           ; =
001527  2  01 3C                .BYTE   1,'<'
001529  2  00 00                .WORD   $0000           ; <
00152B  2               
00152B  2               ; functions
00152B  2               
00152B  2  04 53                .BYTE   4,'S'           ;
00152D  2  65 13                .WORD   LBB_SGN         ; SGN
00152F  2  04 49                .BYTE   4,'I'           ;
001531  2  9E 12                .WORD   LBB_INT         ; INT
001533  2  04 41                .BYTE   4,'A'           ;
001535  2  D6 11                .WORD   LBB_ABS         ; ABS
001537  2  04 55                .BYTE   4,'U'           ;
001539  2  AE 13                .WORD   LBB_USR         ; USR
00153B  2  04 46                .BYTE   4,'F'           ;
00153D  2  62 12                .WORD   LBB_FRE         ; FRE
00153F  2  04 50                .BYTE   4,'P'           ;
001541  2  19 13                .WORD   LBB_POS         ; POS
001543  2  04 53                .BYTE   4,'S'           ;
001545  2  76 13                .WORD   LBB_SQR         ; SQR
001547  2  04 52                .BYTE   4,'R'           ;
001549  2  42 13                .WORD   LBB_RND         ; RND
00154B  2  04 4C                .BYTE   4,'L'           ;
00154D  2  C5 12                .WORD   LBB_LOG         ; LOG
00154F  2  04 45                .BYTE   4,'E'           ;
001551  2  58 12                .WORD   LBB_EXP         ; EXP
001553  2  04 43                .BYTE   4,'C'           ;
001555  2  1F 12                .WORD   LBB_COS         ; COS
001557  2  04 53                .BYTE   4,'S'           ;
001559  2  69 13                .WORD   LBB_SIN         ; SIN
00155B  2  04 54                .BYTE   4,'T'           ;
00155D  2  93 13                .WORD   LBB_TAN         ; TAN
00155F  2  04 41                .BYTE   4,'A'           ;
001561  2  E1 11                .WORD   LBB_ATN         ; ATN
001563  2  05 50                .BYTE   5,'P'           ;
001565  2  0A 13                .WORD   LBB_PEEK        ; PEEK
001567  2  05 53                .BYTE   5,'S'           ;
001569  2  4A 13                .WORD   LBB_SADD        ; SADD
00156B  2  04 4C                .BYTE   4,'L'           ;
00156D  2  B0 12                .WORD   LBB_LEN         ; LEN
00156F  2  05 53                .BYTE   5,'S'           ;
001571  2  82 13                .WORD   LBB_STRS        ; STR$
001573  2  04 56                .BYTE   4,'V'           ;
001575  2  B3 13                .WORD   LBB_VAL         ; VAL
001577  2  04 41                .BYTE   4,'A'           ;
001579  2  DD 11                .WORD   LBB_ASC         ; ASC
00157B  2  07 55                .BYTE   7,'U'           ;
00157D  2  A2 13                .WORD   LBB_UCASES      ; UCASE$
00157F  2  07 4C                .BYTE   7,'L'           ;
001581  2  A3 12                .WORD   LBB_LCASES      ; LCASE$
001583  2  05 43                .BYTE   5,'C'           ;
001585  2  03 12                .WORD   LBB_CHRS        ; CHR$
001587  2  05 48                .BYTE   5,'H'           ;
001589  2  78 12                .WORD   LBB_HEXS        ; HEX$
00158B  2  05 42                .BYTE   5,'B'           ;
00158D  2  E6 11                .WORD   LBB_BINS        ; BIN$
00158F  2  07 42                .BYTE   7,'B'           ;
001591  2  F7 11                .WORD   LBB_BITTST      ; BITTST
001593  2  04 4D                .BYTE   4,'M'           ;
001595  2  CE 12                .WORD   LBB_MAX         ; MAX
001597  2  04 4D                .BYTE   4,'M'           ;
001599  2  D7 12                .WORD   LBB_MIN         ; MIN
00159B  2  02 50                .BYTE   2,'P'           ;
00159D  2  0F 13                .WORD   LBB_PI          ; PI
00159F  2  05 49                .BYTE   5,'I'           ;
0015A1  2  8F 12                .WORD   LBB_IECST       ; IECST
0015A3  2  06 53                .BYTE   6,'S'           ;
0015A5  2  5F 13                .WORD   LBB_SECOND      ; SECOND
0015A7  2  05 56                .BYTE   5,'V'           ;
0015A9  2  B7 13                .WORD   LBB_VPTR        ; VARPTR
0015AB  2  06 4C                .BYTE   6,'L'           ;
0015AD  2  AA 12                .WORD   LBB_LEFTS       ; LEFT$
0015AF  2  07 52                .BYTE   7,'R'           ;
0015B1  2  3B 13                .WORD   LBB_RIGHTS      ; RIGHT$
0015B3  2  05 4D                .BYTE   5,'M'           ;
0015B5  2  D2 12                .WORD   LBB_MIDS        ; MID$
0015B7  2  04 43                .BYTE   4,'C'           ;
0015B9  2  17 12                .WORD   LBB_CON         ; CON
0015BB  2               
0015BB  1               
0015BB  1               ; DEFINITIONS
0015BB  1                       .INCLUDE "definitions.asm"
0015BB  2               PROGRAMBANK     = $FF           ; BANK THAT THE INTREPRETER LIVES IN
0015BB  2               DATABANK        = $02           ; BANK THAT THE DATA LIVES IN
0015BB  2               
0015BB  2               FNBUFFER        = $000F00       ; FILE NAME BUFFER, MUST BE IN ZERO BANK!
0015BB  2               
0015BB  2               
0015BB  2               
0015BB  2               ; offsets from a base of X or Y
0015BB  2               
0015BB  2               PLUS_0          = $00           ; X or Y plus 0
0015BB  2               PLUS_1          = $01           ; X or Y plus 1
0015BB  2               PLUS_2          = $02           ; X or Y plus 2
0015BB  2               PLUS_3          = $03           ; X or Y plus 3
0015BB  2               
0015BB  2               STACK_BOTTOM    = $B000         ; stack bottom, no offset
0015BB  2               STACK           = $BFFF         ; stack top, no offset
0015BB  2               
0015BB  2               ccflag          = $000200       ; BASIC CTRL-C flag, 00 = enabled, 01 = dis
0015BB  2               ccbyte          = ccflag+1      ; BASIC CTRL-C byte
0015BB  2               ccnull          = ccbyte+1      ; BASIC CTRL-C byte timeout
0015BB  2               
0015BB  2               VEC_CC          = ccnull+1      ; ctrl c check vector
0015BB  2               
0015BB  2               
0015BB  2               ; Ibuffs can now be anywhere in RAM AS LONG AS IT IS BEFORE RAM_BASE AND IS NOT PAGE ALIGNED!, ensure that the max length is < $80
0015BB  2               
0015BB  2                       .IF     PROGRAMBANK=DATABANK
0015BB  2               Ibuffs              = (ENDOFBASIC&$FF00)+$181
0015BB  2                       .ELSE
0015BB  2               Ibuffs              = $2000+$181
0015BB  2               LIbuffs             = (DATABANK*$10000)+$2000+$181
0015BB  2                       .ENDIF
0015BB  2               Ibuffe          = Ibuffs+80     ; end of input buffer
0015BB  2               
0015BB  2               Ram_base        = ((Ibuffe+1)&$FF00)+$100; start of user RAM (set as needed, should be page aligned)
0015BB  2               Ram_top         = $FF00         ; end of user RAM+1 (set as needed, should be page aligned)
0015BB  2               
0015BB  1               
0015BB  1               ; MESSAGES
0015BB  1                       .INCLUDE "messages.asm"
0015BB  2               
0015BB  2               LAB_CONMSG:
0015BB  2  80 80 80 83          .BYTE   $80,$80,$80,$83,$84,$85,"  Werner Engineering 816",$0D
0015BF  2  84 85 20 20  
0015C3  2  57 65 72 6E  
0015DA  2  81 81 81 83          .BYTE   $81,$81,$81,$83,$84,$85,"  Enhanced BASIC 65816 2.3",$0D
0015DE  2  84 85 20 20  
0015E2  2  45 6E 68 61  
0015FB  2  82 82 82 83          .BYTE   $82,$82,$82,$83,$84,$85,00
0015FF  2  84 85 00     
001602  2               
001602  2               LAB_SMSG:
001602  2  20 42 79 74          .BYTE   " Bytes free",$00
001606  2  65 73 20 66  
00160A  2  72 65 65 00  
00160E  2               LAB_SMSG1:
00160E  2  0D 0A 45 6E          .BYTE   $0D,$0A,"Enhanced BASIC 65816 2.3",$00
001612  2  68 61 6E 63  
001616  2  65 64 20 42  
001629  2  0D 0A 44 45          .BYTE   $0D,$0A,"DERIVED FROM ehBASIC BY LEE DAVIDSON",$00
00162D  2  52 49 56 45  
001631  2  44 20 46 52  
001650  2               
001650  2               ; BASIC messages, mostly error messages
001650  2               
001650  2               LAB_BAER:
001650  2  74 16                .WORD   ERR_NF          ;$00 NEXT without FOR
001652  2  85 16                .WORD   ERR_SN          ;$02 syntax
001654  2  8C 16                .WORD   ERR_RG          ;$04 RETURN without GOSUB
001656  2  A1 16                .WORD   ERR_OD          ;$06 out of data
001658  2  AD 16                .WORD   ERR_FC          ;$08 function call
00165A  2  BB 16                .WORD   ERR_OV          ;$0A overflow
00165C  2  C4 16                .WORD   ERR_OM          ;$0C out of memory
00165E  2  D2 16                .WORD   ERR_US          ;$0E undefined statement
001660  2  E6 16                .WORD   ERR_BS          ;$10 array bounds
001662  2  F3 16                .WORD   ERR_DD          ;$12 double dimension array
001664  2  04 17                .WORD   ERR_D0          ;$14 divide by 0
001666  2  13 17                .WORD   ERR_ID          ;$16 illegal direct
001668  2  22 17                .WORD   ERR_TM          ;$18 type mismatch
00166A  2  30 17                .WORD   ERR_LS          ;$1A long string
00166C  2  40 17                .WORD   ERR_ST          ;$1C string too complex
00166E  2  53 17                .WORD   ERR_CN          ;$1E continue error
001670  2  62 17                .WORD   ERR_UF          ;$20 undefined function
001672  2  75 17                .WORD   ERR_LD          ;$22 LOOP without DO
001674  2               
001674  2               ERR_NF:
001674  2  4E 45 58 54          .BYTE   "NEXT without FOR",$00
001678  2  20 77 69 74  
00167C  2  68 6F 75 74  
001685  2               ERR_SN:
001685  2  53 79 6E 74          .BYTE   "Syntax",$00
001689  2  61 78 00     
00168C  2               ERR_RG:
00168C  2  52 45 54 55          .BYTE   "RETURN without GOSUB",$00
001690  2  52 4E 20 77  
001694  2  69 74 68 6F  
0016A1  2               ERR_OD:
0016A1  2  4F 75 74 20          .BYTE   "Out of DATA",$00
0016A5  2  6F 66 20 44  
0016A9  2  41 54 41 00  
0016AD  2               ERR_FC:
0016AD  2  46 75 6E 63          .BYTE   "Function call",$00
0016B1  2  74 69 6F 6E  
0016B5  2  20 63 61 6C  
0016BB  2               ERR_OV:
0016BB  2  4F 76 65 72          .BYTE   "Overflow",$00
0016BF  2  66 6C 6F 77  
0016C3  2  00           
0016C4  2               ERR_OM:
0016C4  2  4F 75 74 20          .BYTE   "Out of memory",$00
0016C8  2  6F 66 20 6D  
0016CC  2  65 6D 6F 72  
0016D2  2               ERR_US:
0016D2  2  55 6E 64 65          .BYTE   "Undefined statement",$00
0016D6  2  66 69 6E 65  
0016DA  2  64 20 73 74  
0016E6  2               ERR_BS:
0016E6  2  41 72 72 61          .BYTE   "Array bounds",$00
0016EA  2  79 20 62 6F  
0016EE  2  75 6E 64 73  
0016F3  2               ERR_DD:
0016F3  2  44 6F 75 62          .BYTE   "Double dimension",$00
0016F7  2  6C 65 20 64  
0016FB  2  69 6D 65 6E  
001704  2               ERR_D0:
001704  2  44 69 76 69          .BYTE   "Divide by zero",$00
001708  2  64 65 20 62  
00170C  2  79 20 7A 65  
001713  2               ERR_ID:
001713  2  49 6C 6C 65          .BYTE   "Illegal direct",$00
001717  2  67 61 6C 20  
00171B  2  64 69 72 65  
001722  2               ERR_TM:
001722  2  54 79 70 65          .BYTE   "Type mismatch",$00
001726  2  20 6D 69 73  
00172A  2  6D 61 74 63  
001730  2               ERR_LS:
001730  2  53 74 72 69          .BYTE   "String too long",$00
001734  2  6E 67 20 74  
001738  2  6F 6F 20 6C  
001740  2               ERR_ST:
001740  2  53 74 72 69          .BYTE   "String too complex",$00
001744  2  6E 67 20 74  
001748  2  6F 6F 20 63  
001753  2               ERR_CN:
001753  2  43 61 6E 27          .BYTE   "Can't continue",$00
001757  2  74 20 63 6F  
00175B  2  6E 74 69 6E  
001762  2               ERR_UF:
001762  2  55 6E 64 65          .BYTE   "Undefined function",$00
001766  2  66 69 6E 65  
00176A  2  64 20 66 75  
001775  2               ERR_LD:
001775  2  4C 4F 4F 50          .BYTE   "LOOP without DO",$00
001779  2  20 77 69 74  
00177D  2  68 6F 75 74  
001785  2               
001785  2               LAB_BMSG:
001785  2  0D 0A 42 72          .BYTE   $0D,$0A,"Break",$00
001789  2  65 61 6B 00  
00178D  2               LAB_EMSG:
00178D  2  20 45 72 72          .BYTE   " Error",$00
001791  2  6F 72 00     
001794  2               LAB_LMSG:
001794  2  20 69 6E 20          .BYTE   " in line ",$00
001798  2  6C 69 6E 65  
00179C  2  20 00        
00179E  2               LAB_RMSG:
00179E  2  0D 0A 52 65          .BYTE   $0D,$0A,"Ready",$0D,$0A,$00
0017A2  2  61 64 79 0D  
0017A6  2  0A 00        
0017A8  2               
0017A8  2               LAB_IMSG:
0017A8  2  20 45 78 74          .BYTE   " Extra ignored",$0D,$0A,$00
0017AC  2  72 61 20 69  
0017B0  2  67 6E 6F 72  
0017B9  2               LAB_REDO:
0017B9  2  20 52 65 64          .BYTE   " Redo from start",$0D,$0A,$00
0017BD  2  6F 20 66 72  
0017C1  2  6F 6D 20 73  
0017CC  2               LAB_IOER:
0017CC  2  20 49 2F 4F          .BYTE   " I/O Error",$0D,$0A,$00
0017D0  2  20 45 72 72  
0017D4  2  6F 72 0D 0A  
0017D9  2               
0017D9  1               
0017D9  1               ; NUMERIC CONSTANTS
0017D9  1                       .INCLUDE "numconst.asm"
0017D9  2               ; numeric constants and series
0017D9  2               ; constants and series for LOG(n)
0017D9  2               LAB_25A0:
0017D9  2  02                   .BYTE   $02             ; counter
0017DA  2  80 19 56 62          .BYTE   $80,$19,$56,$62 ; 0.59898
0017DE  2  80 76 22 F3          .BYTE   $80,$76,$22,$F3 ; 0.96147
0017E2  2  82 38 AA 40          .BYTE   $82,$38,$AA,$40 ; 2.88539
0017E6  2               
0017E6  2               LAB_25AD:
0017E6  2  80 35 04 F3          .BYTE   $80,$35,$04,$F3 ; 0.70711	1/root 2
0017EA  2               LAB_25B1:
0017EA  2  81 35 04 F3          .BYTE   $81,$35,$04,$F3 ; 1.41421	root 2
0017EE  2               LAB_25B5:
0017EE  2  80 80 00 00          .BYTE   $80,$80,$00,$00 ; -0.5
0017F2  2               LAB_25B9:
0017F2  2  80 31 72 18          .BYTE   $80,$31,$72,$18 ; 0.69315	LOG(2)
0017F6  2               
0017F6  2               ; numeric PRINT constants
0017F6  2               LAB_2947:
0017F6  2  91 43 4F F8          .BYTE   $91,$43,$4F,$F8 ; 99999.9375 (max value with at least one decimal)
0017FA  2               LAB_294B:
0017FA  2  94 74 23 F7          .BYTE   $94,$74,$23,$F7 ; 999999.4375 (max value before scientific notation)
0017FE  2               LAB_294F:
0017FE  2  94 74 24 00          .BYTE   $94,$74,$24,$00 ; 1000000
001802  2               
001802  2               ; EXP(n) constants and series
001802  2               LAB_2AFA:
001802  2  81 38 AA 3B          .BYTE   $81,$38,$AA,$3B ; 1.4427	(1/LOG base 2 e)
001806  2               LAB_2AFE:
001806  2  06                   .BYTE   $06             ; counter
001807  2  74 63 90 8C          .BYTE   $74,$63,$90,$8C ; 2.17023e-4
00180B  2  77 23 0C AB          .BYTE   $77,$23,$0C,$AB ; 0.00124
00180F  2  7A 1E 94 00          .BYTE   $7A,$1E,$94,$00 ; 0.00968
001813  2  7C 63 42 80          .BYTE   $7C,$63,$42,$80 ; 0.05548
001817  2  7E 75 FE D0          .BYTE   $7E,$75,$FE,$D0 ; 0.24023
00181B  2  80 31 72 15          .BYTE   $80,$31,$72,$15 ; 0.69315
00181F  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.00000
001823  2               
001823  2               ; trigonometric constants and series
001823  2               LAB_2C78:
001823  2  81 49 0F DB          .BYTE   $81,$49,$0F,$DB ; 1.570796371 (pi/2) as floating #
001827  2               LAB_2C84:
001827  2  04                   .BYTE   $04             ; counter
001828  2  86 1E D7 FB          .BYTE   $86,$1E,$D7,$FB ; 39.7109
00182C  2  87 99 26 65          .BYTE   $87,$99,$26,$65 ;-76.575
001830  2  87 23 34 58          .BYTE   $87,$23,$34,$58 ; 81.6022
001834  2  86 A5 5D E1          .BYTE   $86,$A5,$5D,$E1 ;-41.3417
001838  2               LAB_2C7C:
001838  2  83 49 0F DB          .BYTE   $83,$49,$0F,$DB ; 6.28319 (2*pi) as floating #
00183C  2               
00183C  2               LAB_2CC9:
00183C  2  08                   .BYTE   $08             ; counter
00183D  2  78 3A C5 37          .BYTE   $78,$3A,$C5,$37 ; 0.00285
001841  2  7B 83 A2 5C          .BYTE   $7B,$83,$A2,$5C ;-0.0160686
001845  2  7C 2E DD 4D          .BYTE   $7C,$2E,$DD,$4D ; 0.0426915
001849  2  7D 99 B0 1E          .BYTE   $7D,$99,$B0,$1E ;-0.0750429
00184D  2  7D 59 ED 24          .BYTE   $7D,$59,$ED,$24 ; 0.106409
001851  2  7E 91 72 00          .BYTE   $7E,$91,$72,$00 ;-0.142036
001855  2  7E 4C B9 73          .BYTE   $7E,$4C,$B9,$73 ; 0.199926
001859  2  7F AA AA 53          .BYTE   $7F,$AA,$AA,$53 ;-0.333331
00185D  2               
00185D  2               LAB_1D96        = *+1           ; $00,$00 used for undefined variables
00185D  2               LAB_259C:
00185D  2  81 00 00 00          .BYTE   $81,$00,$00,$00 ; 1.000000, used for INC
001861  2               LAB_2AFD:
001861  2  81 80 00 00          .BYTE   $81,$80,$00,$00 ; -1.00000, used for DEC. must be on the same page as +1.00
001865  2               
001865  2               ; misc constants
001865  2               LAB_1DF7:
001865  2  90                   .BYTE   $90             ;-32768 (uses first three bytes from 0.5)
001866  2               LAB_2A96:
001866  2  80 00 00 00          .BYTE   $80,$00,$00,$00 ; 0.5
00186A  2               LAB_2C80:
00186A  2  7F 00 00 00          .BYTE   $7F,$00,$00,$00 ; 0.25
00186E  2               LAB_26B5:
00186E  2  84 20 00 00          .BYTE   $84,$20,$00,$00 ; 10.0000 divide by 10 constant
001872  2               
001872  2               ; This table is used in converting numbers to ASCII.
001872  2               
001872  2               LAB_2A9A:
001872  2               LAB_2A9B        = LAB_2A9A+1
001872  2               LAB_2A9C        = LAB_2A9B+1
001872  2  FE 79 60             .BYTE   $FE,$79,$60     ; -100000
001875  2  00 27 10             .BYTE   $00,$27,$10     ; 10000
001878  2  FF FC 18             .BYTE   $FF,$FC,$18     ; -1000
00187B  2  00 00 64             .BYTE   $00,$00,$64     ; 100
00187E  2  FF FF F6             .BYTE   $FF,$FF,$F6     ; -10
001881  2  00 00 01             .BYTE   $00,$00,$01     ; 1
001884  2               
001884  1               
001884  1               ; I/O VECTORS
001884  1                       .INCLUDE "iovect.asm"
001884  2               ;__________________________________________________________
001884  2               ;
001884  2               ; BIOS JUMP TABLE (NATIVE)
001884  2               ;__________________________________________________________
001884  2               LPRINTVEC       = $00FD00
001884  2               LINPVEC         = $00FD04
001884  2               LINPWVEC        = $00FD08
001884  2               LSetXYVEC       = $00FD0C
001884  2               LCPYVVEC        = $00FD10
001884  2               LSrlUpVEC       = $00FD14
001884  2               LSetColorVEC    = $00FD18
001884  2               LCURSORVEC      = $00FD1C
001884  2               LUNCURSORVEC    = $00FD20
001884  2               LWRITERTC       = $00FD24
001884  2               LREADRTC        = $00FD28
001884  2               LIECIN          = $00FD2C
001884  2               LIECOUT         = $00FD30
001884  2               LUNTALK         = $00FD34
001884  2               LUNLSTN         = $00FD38
001884  2               LLISTEN         = $00FD3C
001884  2               LTALK           = $00FD40
001884  2               LSETLFS         = $00FD44
001884  2               LSETNAM         = $00FD48
001884  2               LLOAD           = $00FD4C
001884  2               LSAVE           = $00FD50
001884  2               LIECINIT        = $00FD54
001884  2               LIECCLCH        = $00FD58       ; close input and output channels
001884  2               LIECOUTC        = $00FD5C       ; open a channel for output
001884  2               LIECINPC        = $00FD60       ; open a channel for input
001884  2               LIECOPNLF       = $00FD64       ; open a logical file
001884  2               LIECCLSLF       = $00FD68       ; close a specified logical file
001884  2               LClearScrVec    = $00FD6C       ; clear the  Screen
001884  2               
001884  2               CSRX            = $0330         ; CURRENT X POSITION
001884  2               CSRY            = $0331         ; CURRENT Y POSITION
001884  2               ConsoleDevice   = $0341         ; Current Console Device
001884  2               CSRCHAR         = $0342         ; Character under the Cursor
001884  2               VIDEOWIDTH      = $0343
001884  2               DEFAULT_COLOR   = $0344         ; DEFAULT COLOR FOR PRINTING
001884  2               TEMP            = $0345
001884  2               TEMPOFFSET      = $0347
001884  2               
001884  2               IECSTW          = $000317
001884  2               IECMSGM         = $00031F       ; message mode flag,
001884  2               ; $C0 = both control and kernal messages,
001884  2               ; $80 = control messages only,
001884  2               ; $40 = kernal messages only,
001884  2               ; $00 = neither control or kernal messages
001884  2               LOADBUFL        = $000322       ; IEC buffer Pointer
001884  2               LOADBUFH        = LOADBUFL+1
001884  2               LOADBANK        = LOADBUFL+2    ; BANK buffer Pointer
001884  2               IECSTRTL        = $00031D       ; IEC Start Address Pointer
001884  2               IECSTRTH        = IECSTRTL+1
001884  2               
001884  2               VideoDisplayPage = $fe31
001884  2               VideoCharGenOffset = $FE32
001884  2               VideoCharGenData = $fe33
001884  2               VideoTextMode   = $fe35
001884  2               VideoLoresMode  = $fe36
001884  2               VideoDoubleLores = $fe37
001884  2               VideoHiresMode  = $fe38
001884  2               VideoDoubleHires = $fe39
001884  2               Video80col      = $fe3A
001884  2               VideoMixedMode  = $fe3b
001884  2               VideoQuadHires  = $fe3c
001884  2               VideoMonoHires  = $fe3d
001884  2               
001884  2               RTCA            = $FE08         ;   RTC Address REGISTER.
001884  2               RTC             = $FE09         ;   RTC Data REGISTER.
001884  2               
001884  2               ;__________________________________________________________
001884  2               
001884  2               
001884  2               
001884  2               
001884  2               ;___V_INPT_________________________________________________
001884  2               ;
001884  2               ; MAKE A BIOS CALL TO GET NON-BLOCKING CHARACTER INPUT
001884  2               ; THIS COULD BE SERIAL OR KEYBOARD DEPENDING ON BIOS SETTING
001884  2               ; RETURNS
001884  2               ;   A: CHARACTER
001884  2               ;      CARRY SET IF NO CHARACTER
001884  2               ;
001884  2               ;
001884  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
001884  2               ;__________________________________________________________
001884  2               V_INPT:
001884  2  22 04 FD 00          JSL     LINPVEC         ; INCHAR
001888  2  60                   RTS
001889  2               
001889  2               ;___V_OUTP_________________________________________________
001889  2               ;
001889  2               ; MAKE A BIOS CALL TO SEND CHARACTER TO OUTPUT
001889  2               ; THIS COULD BE SERIAL OR TMS9918 CHARACTER DISPLAY
001889  2               ;
001889  2               ;   A: CHARACTER
001889  2               ;
001889  2               ;
001889  2               ;   NOTE THAT BIOS IS IN BANK 0, SO A LONG BRANCH IS REQUIRED
001889  2               ;__________________________________________________________
001889  2               
001889  2               V_OUTP: ; send byte to output device
001889  2               ;        PHX
001889  2               ;        LDX     <VIDEOMODE
001889  2               ;        CPX     #0
001889  2               ;        BNE     V_OUTP1
001889  2  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
00188D  2               ;V_OUTP1:
00188D  2               ;        PLX
00188D  2  60                   RTS
00188E  2               
00188E  2               
00188E  2                       .INCLUDE "diskcmds.asm"
00188E  3               .P816
00188E  3               ;___V_SAVE_________________________________________________
00188E  3               ;
00188E  3               ; UTILIZE BIOS TO SAVE BASIC RAM
00188E  3               ;
00188E  3               ; STORE CONTENTS IN RAM FROM "Smeml/h" TO "Svarl/h"-1 IN BANK "DATABANK"
00188E  3               ;
00188E  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
00188E  3               ; THIS IS NATIVE '816 CODE
00188E  3               ;__________________________________________________________
00188E  3               V_SAVE: ; save BASIC program
00188E  3  20 F3 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001891  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001893  3  D0 08                BNE     V_SAVE_GO       ; YES, CONTINUE ON
001895  3               V_SAVE_ERR:
001895  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001897  3  20 D5 26             JSR     LAB_XERR
00189A  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00189D  3               V_SAVE_GO:
00189D  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0018A1  3  A9 C0                LDA     #$C0
0018A3  3  8F 1F 03 00          STA     f:IECMSGM
0018A7  3  A0 00                LDY     #$00
0018A9  3               V_SAVE_1:
0018A9  3  8B DA A2 01          LDAINDIRECTY ssptr_l
0018AD  3  B5 B8 C9 00  
0018B1  3  D0 04 A2 00  
0018BF  3  BB                   TYX
0018C0  3  9F 00 0F 00          STA     F:FNBUFFER,X
0018C4  3  C9 00                CMP     #$00
0018C6  3  F0 07                BEQ     V_SAVE_2
0018C8  3  C9 22                CMP     #'"'
0018CA  3  F0 03                BEQ     V_SAVE_2
0018CC  3  C8                   INY
0018CD  3  D0 DA                BNE     V_SAVE_1
0018CF  3               V_SAVE_2:
0018CF  3  98                   TYA                     ; fn length
0018D0  3  A2 00                LDX     #<FNBUFFER
0018D2  3  A0 0F                LDY     #>FNBUFFER
0018D4  3  8B                   PHB
0018D5  3  DA A2 00 DA          SETBANK 0
0018D9  3  AB FA        
0018DB  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0018DF  3  AB                   PLB
0018E0  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0018E3  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0018E6  3  A0 01                LDY#1                   ; secondary address
0018E8  3  8B                   PHB
0018E9  3  DA A2 00 DA          SETBANK 0
0018ED  3  AB FA        
0018EF  3  22 44 FD 00          JSL     LSETLFS
0018F3  3  A5 7A                LDA     <Smemh
0018F5  3  8F 1E 03 00          STA     F:IECSTRTH
0018F9  3  A5 79                LDA     <Smeml
0018FB  3  8F 1D 03 00          STA     F:IECSTRTL
0018FF  3  A5 7B                LDA     <Svarl
001901  3  8F 22 03 00          STA     F:LOADBUFL
001905  3  A5 7C                LDA     <Svarh
001907  3  8F 23 03 00          STA     F:LOADBUFH
00190B  3  A9 02                LDA     #DATABANK
00190D  3  8F 24 03 00          STA     F:LOADBANK
001911  3  22 50 FD 00          JSL     LSAVE
001915  3  AB                   PLB
001916  3  A9 9E                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001918  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
00191A  3  20 76 2F             JSR     LAB_18C3
00191D  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001920  3               
001920  3               
001920  3               
001920  3               
001920  3               ;___V_LOAD_________________________________________________
001920  3               ;
001920  3               ; UTILIZE BIOS TO LOAD BASIC RAM
001920  3               ;
001920  3               ; LOAD CONTENTS TO RAM "Smeml/h" BANK "DATABANK"
001920  3               ;
001920  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (FILENAME) AND ONE NUMERIC VAR (DEVICE)
001920  3               ; THIS IS NATIVE '816 CODE
001920  3               ;__________________________________________________________
001920  3               V_LOAD: ; load BASIC program
001920  3  20 F3 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001923  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001925  3  D0 08                BNE     V_LOAD_GO       ; YES, CONTINUE ON
001927  3               V_LOAD_ERR:
001927  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001929  3  20 D5 26             JSR     LAB_XERR
00192C  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
00192F  3               V_LOAD_GO:
00192F  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001933  3  A9 C0                LDA     #$C0
001935  3  8F 1F 03 00          STA     f:IECMSGM
001939  3  A0 00                LDY     #$00
00193B  3               V_LOAD_1:
00193B  3  8B DA A2 01          LDAINDIRECTY ssptr_l
00193F  3  B5 B8 C9 00  
001943  3  D0 04 A2 00  
001951  3  BB                   TYX
001952  3  9F 00 0F 00          STA     F:FNBUFFER,X
001956  3  C9 00                CMP     #$00
001958  3  F0 07                BEQ     V_LOAD_2
00195A  3  C9 22                CMP     #'"'
00195C  3  F0 03                BEQ     V_LOAD_2
00195E  3  C8                   INY
00195F  3  D0 DA                BNE     V_LOAD_1
001961  3               V_LOAD_2:
001961  3  98                   TYA                     ; fn length
001962  3  A2 00                LDX     #<FNBUFFER
001964  3  A0 0F                LDY     #>FNBUFFER
001966  3  8B                   PHB
001967  3  DA A2 00 DA          SETBANK 0
00196B  3  AB FA        
00196D  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001971  3  AB                   PLB
001972  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001975  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001978  3  A0 01                LDY#1                   ; secondary address
00197A  3  8B                   PHB
00197B  3  DA A2 00 DA          SETBANK 0
00197F  3  AB FA        
001981  3  22 44 FD 00          JSL     LSETLFS
001985  3  A5 7A                LDA     <Smemh
001987  3  8F 23 03 00          STA     F:LOADBUFH
00198B  3  A5 79                LDA     <Smeml
00198D  3  8F 22 03 00          STA     F:LOADBUFL
001991  3  A9 02                LDA     #DATABANK
001993  3  8F 24 03 00          STA     F:LOADBANK
001997  3  22 4C FD 00          JSL     LLOAD
00199B  3  AF 23 03 00          LDA     F:LOADBUFH
00199F  3  85 7C                STA     <Svarh
0019A1  3  AF 22 03 00          LDA     F:LOADBUFL
0019A5  3  85 7B                STA     <Svarl
0019A7  3  AB                   PLB
0019A8  3  A9 9E                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0019AA  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0019AC  3  20 76 2F             JSR     LAB_18C3
0019AF  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
0019B2  3               
0019B2  3               
0019B2  3               ;___V_ERR___________________________________________________
0019B2  3               ;
0019B2  3               ; UTILIZE BIOS TO REPORT IEC IO CHANNEL STATUS
0019B2  3               ;
0019B2  3               ;
0019B2  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
0019B2  3               ; THIS IS NATIVE '816 CODE
0019B2  3               ;__________________________________________________________
0019B2  3               V_ERR:
0019B2  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
0019B6  3  A9 C0                LDA     #$C0
0019B8  3  8F 1F 03 00          STA     f:IECMSGM
0019BC  3  A0 00                LDY     #$00
0019BE  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0019C1  3               GETIECSTATUS:
0019C1  3  8B                   PHB
0019C2  3  DA                   PHX
0019C3  3  DA A2 00 DA          SETBANK 0
0019C7  3  AB FA        
0019C9  3  A9 0D                LDA     #13
0019CB  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019CF  3  A9 0A                LDA     #10
0019D1  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
0019D5  3  A9 00                LDA     #0              ; fn length
0019D7  3  A2 00                LDX     #0
0019D9  3  A0 00                LDY     #0
0019DB  3  22 48 FD 00          JSL     LSETNAM         ; setnam
0019DF  3  FA                   PLX                     ; Device Number
0019E0  3  A0 0F                LDY     #15             ; secondary address
0019E2  3  A9 0F                LDA     #15             ; LFN NUMBER
0019E4  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
0019E8  3  22 64 FD 00          JSL     LIECOPNLF
0019EC  3  B0 1E                BCS     IECERROR
0019EE  3  A2 0F                LDX     #15
0019F0  3  22 60 FD 00          JSL     LIECINPC
0019F4  3  B0 16                BCS     IECERROR
0019F6  3               GETIECSTATUS_1:
0019F6  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
0019FA  3  B0 10                BCS     IECERROR
0019FC  3  C9 0D                CMP     #13
0019FE  3  F0 0C                BEQ     IECERROR
001A00  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A04  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001A08  3  4A                   LSR                     ; shift time out read ..
001A09  3  4A                   LSR                     ; .. into carry bit
001A0A  3  90 EA                BCC     GETIECSTATUS_1  ; all ok, do another
001A0C  3               IECERROR:
001A0C  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001A10  3  A9 0F                LDA     #15
001A12  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001A16  3  A9 0D                LDA     #13
001A18  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A1C  3  A9 0A                LDA     #10
001A1E  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001A22  3  AB                   PLB
001A23  3  A9 9E                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001A25  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001A27  3  20 76 2F             JSR     LAB_18C3
001A2A  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001A2D  3               
001A2D  3               
001A2D  3               
001A2D  3               ;___V_DIR___________________________________________________
001A2D  3               ;
001A2D  3               ; UTILIZE BIOS TO DISPLAY DISK DIRECTORY
001A2D  3               ;
001A2D  3               ;
001A2D  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VAR (DEVICE)
001A2D  3               ; THIS IS NATIVE '816 CODE
001A2D  3               ;__________________________________________________________
001A2D  3               V_DIR:
001A2D  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001A31  3  A9 C0                LDA     #$C0
001A33  3  8F 1F 03 00          STA     f:IECMSGM
001A37  3  A0 00                LDY     #$00
001A39  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001A3C  3  8B                   PHB
001A3D  3  DA                   PHX
001A3E  3  A9 24                LDA     #'$'
001A40  3  8F 00 0F 00          STA     f:FNBUFFER
001A44  3  DA A2 00 DA          SETBANK 0
001A48  3  AB FA        
001A4A  3  A9 0D                LDA     #13
001A4C  3  22 00 FD 00          JSL     LPRINTVEC
001A50  3  A9 0A                LDA     #10
001A52  3  22 00 FD 00          JSL     LPRINTVEC
001A56  3  A9 01                LDA     #1              ; fn length
001A58  3  A2 00                LDX     #<FNBUFFER
001A5A  3  A0 0F                LDY     #>FNBUFFER
001A5C  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001A60  3  FA                   PLX                     ; Device Number
001A61  3  A0 00                LDY     #0              ; secondary address
001A63  3  A9 0F                LDA     #15             ; LFN NUMBER
001A65  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001A69  3  22 64 FD 00          JSL     LIECOPNLF
001A6D  3  B0 9D                BCS     IECERROR
001A6F  3  A2 0F                LDX     #15
001A71  3  22 60 FD 00          JSL     LIECINPC
001A75  3  B0 95                BCS     IECERROR
001A77  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A7B  3               GETIECDIRECTORY_1:
001A7B  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A7F  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A83  3  48                   PHA
001A84  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001A88  3  FA                   PLX
001A89  3  AB                   PLB
001A8A  3  8B                   PHB
001A8B  3  20 94 46             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
001A8E  3  DA A2 00 DA          SETBANK 0
001A92  3  AB FA        
001A94  3  A9 20                LDA     #' '
001A96  3  22 00 FD 00          JSL     LPRINTVEC
001A9A  3  A9 20                LDA     #' '
001A9C  3  22 00 FD 00          JSL     LPRINTVEC
001AA0  3  22 2C FD 00          JSL     LIECIN
001AA4  3  C9 00                CMP     #$00
001AA6  3  F0 04                BEQ     GETIECDIRECTORY_2A
001AA8  3  22 00 FD 00          JSL     LPRINTVEC
001AAC  3               GETIECDIRECTORY_2A:
001AAC  3  22 2C FD 00          JSL     LIECIN
001AB0  3  C9 00                CMP     #$00
001AB2  3  F0 04                BEQ     GETIECDIRECTORY_2
001AB4  3  22 00 FD 00          JSL     LPRINTVEC
001AB8  3               GETIECDIRECTORY_2:
001AB8  3  22 2C FD 00          JSL     LIECIN          ; input ENTRY TEXT byte from the serial bus
001ABC  3  22 00 FD 00          JSL     LPRINTVEC
001AC0  3  C9 00                CMP     #$00
001AC2  3  F0 29                BEQ     GETIECDIRECTORY_3; END ENTRY
001AC4  3               
001AC4  3  AF 17 03 00          LDA     f:IECSTW        ; get serial status byte
001AC8  3  4A                   LSR                     ; shift time out read ..
001AC9  3  4A                   LSR                     ; .. into carry bit
001ACA  3  90 EC                BCC     GETIECDIRECTORY_2; all ok, do another
001ACC  3               GETIECDIRECTORY_END:
001ACC  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001AD0  3  A9 0F                LDA     #15
001AD2  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001AD6  3  A9 0D                LDA     #13
001AD8  3  22 00 FD 00          JSL     LPRINTVEC
001ADC  3  A9 0A                LDA     #10
001ADE  3  22 00 FD 00          JSL     LPRINTVEC
001AE2  3  AB                   PLB
001AE3  3  A9 9E                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001AE5  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001AE7  3  20 76 2F             JSR     LAB_18C3
001AEA  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001AED  3               
001AED  3               GETIECDIRECTORY_3:
001AED  3  A9 0D                LDA     #13
001AEF  3  22 00 FD 00          JSL     LPRINTVEC
001AF3  3  A9 0A                LDA     #10
001AF5  3  22 00 FD 00          JSL     LPRINTVEC
001AF9  3  22 2C FD 00          JSL     LIECIN          ; input a byte from the serial bus
001AFD  3  C9 01                CMP     #$01
001AFF  3  D0 CB                BNE     GETIECDIRECTORY_END
001B01  3  4C 7B 1A             JMP     GETIECDIRECTORY_1
001B04  3               
001B04  3               
001B04  3               ;___V_DISKCMD______________________________________________
001B04  3               ;
001B04  3               ; UTILIZE BIOS TO SEND A DISK COMMAND
001B04  3               ;
001B04  3               ;
001B04  3               ; BASIC COMMAND EXPECTS ONE STRING VAR (COMMAND) AND ONE NUMERIC VAR (DEVICE)
001B04  3               ; THIS IS NATIVE '816 CODE
001B04  3               ;__________________________________________________________
001B04  3               V_DISKCMD:                      ; save BASIC program
001B04  3  20 F3 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001B07  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001B09  3  D0 08                BNE     V_DISKCMD_GO    ; YES, CONTINUE ON
001B0B  3               V_DISKCMD_ERR:
001B0B  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001B0D  3  20 D5 26             JSR     LAB_XERR
001B10  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001B13  3               V_DISKCMD_GO:
001B13  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001B17  3  A9 C0                LDA     #$C0
001B19  3  8F 1F 03 00          STA     f:IECMSGM
001B1D  3  20 06 3C             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001B20  3               ; space returns with A = length, X=$71=pointer low byte,
001B20  3               ; Y=$72=pointer high byte
001B20  3  86 B8                STX     <ssptr_l
001B22  3  84 B9                STY     <ssptr_h
001B24  3  AA                   TAX
001B25  3  A0 00                LDY     #$00
001B27  3               V_DISKCMD_1:
001B27  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001B2B  3  B5 B8 C9 00  
001B2F  3  D0 04 A2 00  
001B3D  3  DA                   PHX
001B3E  3  BB                   TYX
001B3F  3  9F 00 0F 00          STA     f:FNBUFFER,X
001B43  3  FA                   PLX
001B44  3  CA                   DEX
001B45  3  E0 00                CPX     #$00
001B47  3  F0 03                BEQ     V_DISKCMD_2
001B49  3  C8                   INY
001B4A  3  D0 DB                BNE     V_DISKCMD_1
001B4C  3               V_DISKCMD_2:
001B4C  3  BB                   TYX
001B4D  3  A9 00                LDA     #0
001B4F  3  9F 01 0F 00          STA     f:FNBUFFER+1,X
001B53  3  8B                   PHB
001B54  3  DA A2 00 DA          SETBANK 0
001B58  3  AB FA        
001B5A  3  A9 00                LDA     #0              ; fn length
001B5C  3  A2 00                LDX     #0
001B5E  3  A0 00                LDY     #0
001B60  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001B64  3  AB                   PLB
001B65  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001B68  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER (DEVICE NUMBER), RETURN IN X
001B6B  3  8B                   PHB
001B6C  3  DA A2 00 DA          SETBANK 0
001B70  3  AB FA        
001B72  3  A0 0F                LDY     #15             ; secondary address
001B74  3  A9 0F                LDA     #15             ; LFN NUMBER
001B76  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001B7A  3  22 64 FD 00          JSL     LIECOPNLF
001B7E  3  B0 27                BCS     V_DISKCMD_ERR1
001B80  3  A2 0F                LDX     #15
001B82  3  22 5C FD 00          JSL     LIECOUTC
001B86  3  A2 00                LDX     #$00
001B88  3               V_DISKCMD_3:
001B88  3  BF 00 0F 00          LDA     f:FNBUFFER,X
001B8C  3  C9 00                CMP     #$00
001B8E  3  F0 09                BEQ     V_DISKCMD_4
001B90  3  22 30 FD 00          JSL     LIECOUT         ; OUTPUT a byte To the serial bus
001B94  3  B0 11                BCS     V_DISKCMD_ERR1
001B96  3               
001B96  3  E8                   INX
001B97  3  80 EF                BRA     V_DISKCMD_3
001B99  3               V_DISKCMD_4:
001B99  3  A9 0F                LDA     #15
001B9B  3  22 38 FD 00          JSL     LUNLSTN
001B9F  3  A9 0F                LDA     #15
001BA1  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BA5  3  AB                   PLB
001BA6  3  60                   RTS
001BA7  3               V_DISKCMD_ERR1:
001BA7  3  22 58 FD 00          JSL     LIECCLCH        ; close input and output channels
001BAB  3  A9 0F                LDA     #15
001BAD  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001BB1  3  A9 0D                LDA     #13
001BB3  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001BB7  3  A9 0A                LDA     #10
001BB9  3  22 00 FD 00          JSL     LPRINTVEC       ; OUTCHAR
001BBD  3  AB                   PLB
001BBE  3  A9 9E                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
001BC0  3  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
001BC2  3  20 76 2F             JSR     LAB_18C3
001BC5  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001BC8  3               
001BC8  3               
001BC8  3               
001BC8  3               ;___V_OPEN__________________________________________________
001BC8  3               ;
001BC8  3               ; UTILIZE BIOS TO OPEN AN IEC IO CHANNEL
001BC8  3               ;
001BC8  3               ;
001BC8  3               ; BASIC COMMAND EXPECTS THREE NUMERIC VARS, AND ONE STRING
001BC8  3               ; VAR
001BC8  3               ; FILE#, DEVICE, SECONDARY ADDRESS, FILENAME
001BC8  3               ; THIS IS NATIVE '816 CODE
001BC8  3               ;__________________________________________________________
001BC8  3               V_OPEN:
001BC8  3  8B                   PHB
001BC9  3  22 54 FD 00          JSL     LIECINIT        ; INIT IEC BUS
001BCD  3  A9 C0                LDA     #$C0
001BCF  3  8F 1F 03 00          STA     f:IECMSGM
001BD3  3  A0 00                LDY     #$00
001BD5  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001BD8  3  DA                   PHX
001BD9  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BDC  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (DEVICE)
001BDF  3  DA                   PHX
001BE0  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BE3  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (SECONDARY ADDRESS)
001BE6  3  DA                   PHX
001BE7  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001BEA  3  20 F3 31             JSR     LAB_EVEX        ; GET THE FOURTH PARAMETER
001BED  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001BEF  3  D0 08                BNE     V_OPEN_GO       ; YES, CONTINUE ON
001BF1  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001BF3  3  20 D5 26             JSR     LAB_XERR
001BF6  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001BF9  3               V_OPEN_GO:
001BF9  3  20 06 3C             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001BFC  3               ; space returns with A = length, X=$71=pointer low byte,
001BFC  3               ; Y=$72=pointer high byte
001BFC  3  86 B8                STX     <ssptr_l
001BFE  3  84 B9                STY     <ssptr_h
001C00  3  AA                   TAX
001C01  3  A0 00                LDY     #$00
001C03  3               V_OPEN_1:
001C03  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001C07  3  B5 B8 C9 00  
001C0B  3  D0 04 A2 00  
001C19  3  DA                   PHX
001C1A  3  BB                   TYX
001C1B  3  9F 00 0F 00          STA     f:FNBUFFER,X
001C1F  3  FA                   PLX
001C20  3  CA                   DEX
001C21  3  E0 00                CPX     #$00
001C23  3  F0 03                BEQ     V_OPEN_2
001C25  3  C8                   INY
001C26  3  D0 DB                BNE     V_OPEN_1
001C28  3               V_OPEN_2:
001C28  3  C8                   INY
001C29  3  98                   TYA                     ; fn length
001C2A  3  A2 00                LDX     #<FNBUFFER
001C2C  3  A0 0F                LDY     #>FNBUFFER
001C2E  3  DA A2 00 DA          SETBANK 0
001C32  3  AB FA        
001C34  3  22 48 FD 00          JSL     LSETNAM         ; setnam
001C38  3  FA                   PLX
001C39  3  9B                   TXY                     ; secondary address
001C3A  3  FA                   PLX                     ; DEVICE NUMBER
001C3B  3  68                   PLA                     ; LFN NUMBER
001C3C  3  22 44 FD 00          JSL     LSETLFS         ;setlfs
001C40  3  22 64 FD 00          JSL     LIECOPNLF
001C44  3  B0 02                BCS     V_OPEN_IECERROR
001C46  3  AB                   PLB
001C47  3  60                   RTS
001C48  3                       V_OPEN_IECERROR:
001C48  3  4C 0C 1A             JMP     IECERROR
001C4B  3               
001C4B  3               ;___V_CLOSE________________________________________________
001C4B  3               ;
001C4B  3               ; UTILIZE BIOS TO CLOSE AN IEC IO CHANNEL
001C4B  3               ;
001C4B  3               ;
001C4B  3               ; THIS IS NATIVE '816 CODE
001C4B  3               ;__________________________________________________________
001C4B  3               V_CLOSE:
001C4B  3  8B                   PHB
001C4C  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C4F  3  DA A2 00 DA          SETBANK 0
001C53  3  AB FA        
001C55  3  8A                   TXA
001C56  3  22 68 FD 00          JSL     LIECCLSLF       ; close a specified logical file
001C5A  3  AB                   PLB
001C5B  3  60                   RTS
001C5C  3               
001C5C  3               ;___V_IECINPUT_______________________________________________
001C5C  3               ;
001C5C  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS INPUT
001C5C  3               ;
001C5C  3               ;
001C5C  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001C5C  3               ; THIS IS NATIVE '816 CODE
001C5C  3               ;__________________________________________________________
001C5C  3               V_IECINPUT:
001C5C  3  8B                   PHB
001C5D  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C60  3  DA A2 00 DA          SETBANK 0
001C64  3  AB FA        
001C66  3  22 60 FD 00          JSL     LIECINPC
001C6A  3  B0 02                BCS     V_IECINPUT_IECERROR
001C6C  3  AB                   PLB
001C6D  3  60                   RTS
001C6E  3                       V_IECINPUT_IECERROR:
001C6E  3  AB                   PLB
001C6F  3  4C 0C 1A             JMP     IECERROR
001C72  3               
001C72  3               ;___V_IECOUTPUT______________________________________________
001C72  3               ;
001C72  3               ; UTILIZE BIOS TO USE OPEN AN IEC CHANNEL AS OUTPUT
001C72  3               ;
001C72  3               ;
001C72  3               ; BASIC COMMAND EXPECTS ONE NUMERIC VARS, FILE#
001C72  3               ; THIS IS NATIVE '816 CODE
001C72  3               ;__________________________________________________________
001C72  3               V_IECOUTPUT:
001C72  3  8B                   PHB
001C73  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C76  3  DA A2 00 DA          SETBANK 0
001C7A  3  AB FA        
001C7C  3  22 5C FD 00          JSL     LIECOUTC
001C80  3  B0 02                BCS     V_IECOUTPUT_IECERROR
001C82  3  AB                   PLB
001C83  3  60                   RTS
001C84  3                       V_IECOUTPUT_IECERROR:
001C84  3  AB                   PLB
001C85  3  4C 0C 1A             JMP     IECERROR
001C88  3               
001C88  3               
001C88  3               ;___V_PUTN__________________________________________________
001C88  3               ;
001C88  3               ; UTILIZE BIOS TO PRINT TO AN IEC IO CHANNEL
001C88  3               ;
001C88  3               ; STARTING WITH FILE#, OUTPUT STRING
001C88  3               ; THIS IS NATIVE '816 CODE
001C88  3               ;__________________________________________________________
001C88  3               V_PUTN:
001C88  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001C8B  3  86 04                STX     <TMPFLG
001C8D  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001C90  3               
001C90  3  20 F3 31             JSR     LAB_EVEX        ; GET THE FIRST PARAMETER
001C93  3  A5 5F                LDA     <Dtypef         ; IS IT A STRING?
001C95  3  D0 08                BNE     V_PUTN_GO       ; YES, CONTINUE ON
001C97  3               V_PUTN_ERR:
001C97  3  A2 02                LDX     #$02            ; NOPE, SYNTAX ERROR
001C99  3  20 D5 26             JSR     LAB_XERR
001C9C  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001C9F  3               V_PUTN_GO:
001C9F  3  20 06 3C             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
001CA2  3               ; space returns with A = length, X=$71=pointer low byte,
001CA2  3               ; Y=$72=pointer high byte
001CA2  3  86 B8                STX     <ssptr_l
001CA4  3  84 B9                STY     <ssptr_h
001CA6  3  AA                   TAX
001CA7  3  A0 00                LDY     #$00
001CA9  3               V_PUTN_1:
001CA9  3  8B DA A2 01          LDAINDIRECTY ssptr_l
001CAD  3  B5 B8 C9 00  
001CB1  3  D0 04 A2 00  
001CBF  3  DA                   PHX
001CC0  3  5A                   PHY
001CC1  3  8B                   PHB
001CC2  3  DA A2 00 DA          SETBANK 0
001CC6  3  AB FA        
001CC8  3  A6 04                LDX     <TMPFLG
001CCA  3  48                   PHA
001CCB  3  22 30 FD 00          JSL     LIECOUT
001CCF  3  68                   PLA
001CD0  3  22 00 FD 00          JSL     LPRINTVEC
001CD4  3  AB                   PLB
001CD5  3  7A                   PLY
001CD6  3  FA                   PLX
001CD7  3  CA                   DEX
001CD8  3  E0 00                CPX     #00
001CDA  3  F0 03                BEQ     V_PUTN_2
001CDC  3  C8                   INY
001CDD  3  D0 CA                BNE     V_PUTN_1
001CDF  3               V_PUTN_2:
001CDF  3  60                   RTS
001CE0  3               
001CE0  3               
001CE0  3               
001CE0  3               ;___LAB_IECST_______________________________________________
001CE0  3               ;
001CE0  3               ; RETURN IEC STATUS BYTE
001CE0  3               ;
001CE0  3               ; THIS IS NATIVE '816 CODE
001CE0  3               ;__________________________________________________________
001CE0  3               LAB_IECST:
001CE0  3  48                   PHA
001CE1  3  AF 17 03 00          LDA     f:IECSTW        ; get IECSTW into low byte
001CE5  3  A8                   TAY
001CE6  3  68                   PLA
001CE7  3  A9 00                LDA     #0              ; NO high byte
001CE9  3  20 AE 37             JSR     LAB_AYFC
001CEC  3  60                   RTS
001CED  3               LAB_PIECST:
001CED  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
001CEF  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
001CF3  3  60                   RTS
001CF4  3               
001CF4  3               ;___V_GETN_________________________________________________
001CF4  3               ;
001CF4  3               ; UTILIZE BIOS TO INPUT FROM AN IEC IO CHANNEL
001CF4  3               ;
001CF4  3               ; LOTS OF PARAMETERS :)  STARTING WITH FILE#
001CF4  3               ; THIS IS NATIVE '816 CODE
001CF4  3               ;__________________________________________________________
001CF4  3               V_GETN:
001CF4  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (FILE#)
001CF7  3  DA                   PHX                     ; STORE DEVICE NUMBER
001CF8  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001CFB  3  20 F0 34             JSR     LAB_GVAR        ; get var address
001CFE  3  85 97                STA     <Lvarpl         ; save var address low byte
001D00  3  84 98                STY     <Lvarph         ; save var address high byte
001D02  3  FA                   PLX
001D03  3  8B                   PHB
001D04  3  DA A2 00 DA          SETBANK 0
001D08  3  AB FA        
001D0A  3  A6 04                LDX     <TMPFLG
001D0C  3  22 2C FD 00          JSL     LIECIN          ; get input byte
001D10  3  AB                   PLB
001D11  3               
001D11  3  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
001D13  3  30 07                BMI     LAB_GETNS       ; go get string character
001D15  3               ; was numeric get
001D15  3  A8                   TAY                     ; copy character to Y
001D16  3  20 BB 37             JSR     LAB_1FD0        ; convert Y to byte in FAC1
001D19  3  4C E3 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
001D1C  3               LAB_GETNS:
001D1C  3  48                   PHA
001D1D  3  A9 01                LDA     #$01
001D1F  3  20 1F 39             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
001D22  3               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
001D22  3  68                   PLA                     ; get character back
001D23  3  A0 00                LDY     #$00            ; clear index
001D25  3  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
001D29  3  01 B5 AD C9  
001D2D  3  00 D0 04 A2  
001D3B  3  20 82 39             JSR     LAB_RTST        ; check for space on descriptor stack then put address
001D3E  3               ; and length on descriptor stack and update stack pointers
001D3E  3  4C 8D 2D             JMP     LAB_17D5        ; do string LET and return
001D41  3               
001D41  2                       .INCLUDE "screencmds.asm"
001D41  3               ;___SCNCLR_________________________________________________
001D41  3               ;
001D41  3               ; UTILIZE BIOS TO CLEAR SCREEN
001D41  3               ;
001D41  3               ;
001D41  3               ; THIS IS NATIVE '816 CODE
001D41  3               ;__________________________________________________________
001D41  3               V_SCNCLR:
001D41  3  8B                   PHB
001D42  3  DA A2 00 DA          SETBANK 0
001D46  3  AB FA        
001D48  3  22 6C FD 00          JSL     LClearScrVec
001D4C  3  AB                   PLB
001D4D  3  60                   RTS
001D4E  3               
001D4E  3               
001D4E  3               ;___LOCATE_________________________________________________
001D4E  3               ;
001D4E  3               ; UTILIZE BIOS TO LOCATE CURSOR
001D4E  3               ;
001D4E  3               ;  TAKES TWO PARAMETERS X,Y
001D4E  3               ;
001D4E  3               ; THIS IS NATIVE '816 CODE
001D4E  3               ;__________________________________________________________
001D4E  3               V_LOCATE:
001D4E  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001D51  3  DA                   PHX
001D52  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D55  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001D58  3  7A                   PLY
001D59  3  8B                   PHB
001D5A  3  DA A2 00 DA          SETBANK 0
001D5E  3  AB FA        
001D60  3  22 0C FD 00          JSL     LSetXYVEC
001D64  3  AB                   PLB
001D65  3  60                   RTS
001D66  3               
001D66  3               ;___COLOR_________________________________________________
001D66  3               ;
001D66  3               ; UTILIZE BIOS TO SET COLORS
001D66  3               ;
001D66  3               ;  TAKES TWO PARAMETERS BACKGROUND,FOREGROUND
001D66  3               ;
001D66  3               ; THIS IS NATIVE '816 CODE
001D66  3               ;__________________________________________________________
001D66  3               V_COLOR:
001D66  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001D69  3  8A                   TXA
001D6A  3  29 0F                AND     #$0F
001D6C  3  48                   PHA
001D6D  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
001D70  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001D73  3  8A                   TXA
001D74  3  29 0F                AND     #$0F
001D76  3  85 04                STA     <TMPFLG
001D78  3  68                   PLA
001D79  3  18                   CLC
001D7A  3  0A                   ASL
001D7B  3  0A                   ASL
001D7C  3  0A                   ASL
001D7D  3  0A                   ASL
001D7E  3  05 04                ORA     <TMPFLG
001D80  3  8B                   PHB
001D81  3  DA A2 00 DA          SETBANK 0
001D85  3  AB FA        
001D87  3  22 18 FD 00          JSL     LSetColorVEC
001D8B  3  AB                   PLB
001D8C  3  60                   RTS
001D8D  3               
001D8D  3               ;___V_SCREEN_________________________________________________
001D8D  3               ;
001D8D  3               ;  SET SCREEN MODE
001D8D  3               ;
001D8D  3               ;  TAKES UP TO THREE PARAMETERS
001D8D  3               ;  FIRST PARAMETER SCREEN MODE
001D8D  3               ;  0=TEXT MODE
001D8D  3               ;  1=LORES MODE
001D8D  3               ;  2=HIRES MODE
001D8D  3               ;
001D8D  3               ;  TEXT MODE PARAMETERS
001D8D  3               ;  0=40 COLUMNS
001D8D  3               ;  1=80 COLUMNS
001D8D  3               ;
001D8D  3               ;  LORES MODE SECOND PARAMETER
001D8D  3               ;  0=SINGLE LORES
001D8D  3               ;  1=DOUBLE LORES
001D8D  3               ;  LORES MODE THIRD PARAMETER
001D8D  3               ;  0=MIXED MODE
001D8D  3               ;  1=FULL SCREEN MODE
001D8D  3               ;
001D8D  3               ;  HIRES MODE SECOND PARAMETER
001D8D  3               ;  0=SINGLE HIRES
001D8D  3               ;  1=DOUBLE HIRES
001D8D  3               ;  2=QUAD HIRES
001D8D  3               ;  3=MONO HIRES
001D8D  3               ;  HIRES MODE THIRD PARAMETER
001D8D  3               ;  0=MIXED MODE
001D8D  3               ;  1=FULL SCREEN MODE
001D8D  3               ;
001D8D  3               ; THIS IS NATIVE '816 CODE
001D8D  3               ;__________________________________________________________
001D8D  3               V_SCREEN:
001D8D  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (MODE)
001D90  3               V_SCREEN1:
001D90  3  86 06                STX     <VIDEOMODE
001D92  3  E0 00                CPX     #00
001D94  3  D0 03                BNE     *+5
001D96  3  4C B0 1D             JMP     SETUPMODE0
001D99  3  E0 01                CPX     #01
001D9B  3  D0 03                BNE     *+5
001D9D  3  4C E8 1D             JMP     SETUPMODE1
001DA0  3  E0 02                CPX     #02
001DA2  3  D0 03                BNE     *+5
001DA4  3  4C 4E 1E             JMP     SETUPMODE2
001DA7  3               
001DA7  3  A2 02                LDX     #$02            ; SYNTAX ERROR
001DA9  3  20 D5 26             JSR     LAB_XERR
001DAC  3  4C AE 27             JMP     LAB_1319        ; RESET VARS, STACK AND RETURN CONTROL TO BASIC
001DAF  3  60                   RTS
001DB0  3               
001DB0  3               SETUPMODE0:                     ; TEXT MODE
001DB0  3  A9 01                LDA     #$01
001DB2  3  8F 35 FE 00          STA     F:VideoTextMode
001DB6  3  A9 02                LDA     #$02
001DB8  3  8F 36 FE 00          STA     F:VideoLoresMode
001DBC  3  8F 38 FE 00          STA     F:VideoHiresMode
001DC0  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001DC3  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001DC6  3  E0 00                CPX     #$00
001DC8  3  D0 0E                BNE     SETUPMODE0_80
001DCA  3  A9 02                LDA     #$02
001DCC  3  8F 3A FE 00          STA     F:Video80col
001DD0  3  A9 28                LDA     #40
001DD2  3  8F 43 03 00          STA     F:VIDEOWIDTH
001DD6  3  80 0C                BRA     SETUPMODE0_CLEAR
001DD8  3               SETUPMODE0_80:
001DD8  3  A9 01                LDA     #$01
001DDA  3  8F 3A FE 00          STA     F:Video80col
001DDE  3  A9 50                LDA     #80
001DE0  3  8F 43 03 00          STA     F:VIDEOWIDTH
001DE4  3               SETUPMODE0_CLEAR:
001DE4  3  4C 41 1D             JMP     V_SCNCLR
001DE7  3  60                   RTS
001DE8  3               
001DE8  3               SETUPMODE1:                     ; LORES MODE
001DE8  3  A9 01                LDA     #$01
001DEA  3  8F 36 FE 00          STA     F:VideoLoresMode
001DEE  3  A9 02                LDA     #$02
001DF0  3  8F 35 FE 00          STA     F:VideoTextMode
001DF4  3  8F 38 FE 00          STA     F:VideoHiresMode
001DF8  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001DFB  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001DFE  3               
001DFE  3  E0 00                CPX     #$00
001E00  3  D0 08                BNE     SETUPMODE1_DOUBLE
001E02  3  A9 02                LDA     #$02
001E04  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E08  3  80 0A                BRA     SETUPMODE1_CLEAR
001E0A  3               SETUPMODE1_DOUBLE:
001E0A  3  A9 01                LDA     #$01
001E0C  3  8F 37 FE 00          STA     F:VideoDoubleLores
001E10  3  A9 11                LDA     #$11
001E12  3  85 06                STA     <VIDEOMODE
001E14  3               SETUPMODE1_CLEAR:
001E14  3  08                   PHP                     ; Clear Lores RAM
001E15  3  8B                   PHB
001E16  3  DA A2 00 DA          SETBANK 0
001E1A  3  AB FA        
001E1C  3  C2 10                INDEX16
001E1E  3  A9 00                LDA     #$00
001E20  3  A2 00 00             LDX     #$0000
001E23  3               :
001E23  3  9D 00 20             STA     $2000,X
001E26  3  E8                   INX
001E27  3  E0 00 08             CPX     #$0800
001E2A  3  D0 F7                BNE     :-
001E2C  3  E2 10                INDEX8
001E2E  3  AB                   PLB
001E2F  3  28                   PLP
001E30  3  20 15 33             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001E33  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X
001E36  3  E0 00                CPX     #$00
001E38  3  D0 07                BNE     SETUPMODE1_MIXED
001E3A  3  A9 02                LDA     #$02
001E3C  3  8F 3B FE 00          STA     F:VideoMixedMode
001E40  3  60                   RTS
001E41  3               SETUPMODE1_MIXED:
001E41  3  A9 01                LDA     #$01
001E43  3  8F 3B FE 00          STA     F:VideoMixedMode
001E47  3  A5 06                LDA     <VIDEOMODE
001E49  3  09 80                ORA     #$80
001E4B  3  85 06                STA     <VIDEOMODE
001E4D  3  60                   RTS
001E4E  3               
001E4E  3               
001E4E  3               SETUPMODE2:                     ; HIRES MODE
001E4E  3  A9 01                LDA     #$01
001E50  3  8F 38 FE 00          STA     F:VideoHiresMode
001E54  3  A9 02                LDA     #$02
001E56  3  8F 35 FE 00          STA     F:VideoTextMode
001E5A  3  8F 36 FE 00          STA     F:VideoLoresMode
001E5E  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001E61  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001E64  3               
001E64  3  E0 00                CPX     #$00
001E66  3  D0 10                BNE     SETUPMODE2_DOUBLE
001E68  3  A9 02                LDA     #$02
001E6A  3  8F 39 FE 00          STA     F:VideoDoubleHires
001E6E  3  8F 3C FE 00          STA     F:VideoQuadHires
001E72  3  8F 3D FE 00          STA     F:VideoMonoHires
001E76  3  80 48                BRA     SETUPMODE2_CLEAR
001E78  3               SETUPMODE2_DOUBLE:
001E78  3  E0 01                CPX     #$01
001E7A  3  D0 16                BNE     SETUPMODE2_QUAD
001E7C  3  A9 01                LDA     #$01
001E7E  3  8F 39 FE 00          STA     F:VideoDoubleHires
001E82  3  A9 02                LDA     #$02
001E84  3  8F 3C FE 00          STA     F:VideoQuadHires
001E88  3  8F 3D FE 00          STA     F:VideoMonoHires
001E8C  3  A9 12                LDA     #$12
001E8E  3  85 06                STA     <VIDEOMODE
001E90  3  80 2E                BRA     SETUPMODE2_CLEAR
001E92  3               SETUPMODE2_QUAD:
001E92  3  E0 02                CPX     #$02
001E94  3  D0 16                BNE     SETUPMODE2_MONO
001E96  3  A9 01                LDA     #$01
001E98  3  8F 3C FE 00          STA     F:VideoQuadHires
001E9C  3  A9 02                LDA     #$02
001E9E  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EA2  3  8F 3D FE 00          STA     F:VideoMonoHires
001EA6  3  A9 22                LDA     #$22
001EA8  3  85 06                STA     <VIDEOMODE
001EAA  3  80 14                BRA     SETUPMODE2_CLEAR
001EAC  3               SETUPMODE2_MONO:
001EAC  3  A9 01                LDA     #$01
001EAE  3  8F 3D FE 00          STA     F:VideoMonoHires
001EB2  3  A9 02                LDA     #$02
001EB4  3  8F 39 FE 00          STA     F:VideoDoubleHires
001EB8  3  8F 3C FE 00          STA     F:VideoQuadHires
001EBC  3  A9 32                LDA     #$32
001EBE  3  85 06                STA     <VIDEOMODE
001EC0  3               
001EC0  3               SETUPMODE2_CLEAR:
001EC0  3  08                   PHP                     ; Clear Hires RAM
001EC1  3  8B                   PHB
001EC2  3  DA A2 00 DA          SETBANK 0
001EC6  3  AB FA        
001EC8  3  C2 10                INDEX16
001ECA  3  A9 00                LDA     #$00
001ECC  3  A2 00 00             LDX     #$0000
001ECF  3               :
001ECF  3  9D 00 20             STA     $2000,X
001ED2  3  E8                   INX
001ED3  3  E0 00 80             CPX     #$8000
001ED6  3  D0 F7                BNE     :-
001ED8  3  E2 10                INDEX8
001EDA  3  AB                   PLB
001EDB  3  28                   PLP
001EDC  3  20 15 33             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001EDF  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X
001EE2  3  E0 00                CPX     #$00
001EE4  3  D0 07                BNE     SETUPMODE2_MIXED
001EE6  3  A9 02                LDA     #$02
001EE8  3  8F 3B FE 00          STA     F:VideoMixedMode
001EEC  3  60                   RTS
001EED  3               SETUPMODE2_MIXED:
001EED  3  A9 01                LDA     #$01
001EEF  3  8F 3B FE 00          STA     F:VideoMixedMode
001EF3  3  A5 06                LDA     <VIDEOMODE
001EF5  3  09 80                ORA     #$80
001EF7  3  85 06                STA     <VIDEOMODE
001EF9  3  60                   RTS
001EFA  3               
001EFA  3               
001EFA  3               ;___V_PLOT__________________________________________________
001EFA  3               ;
001EFA  3               ;  PLOT ON SCREEN
001EFA  3               ;         TAKES THREE PARAMETERS,  X,Y,COLOR
001EFA  3               ;
001EFA  3               ; THIS IS NATIVE '816 CODE
001EFA  3               ;__________________________________________________________
001EFA  3               V_PLOT:
001EFA  3  A5 06                LDA     <VIDEOMODE
001EFC  3  29 0F                AND     #$0F
001EFE  3  C9 01                CMP     #$01
001F00  3  F0 13                BEQ     V_PLOT_LORES
001F02  3  A5 06                LDA     <VIDEOMODE
001F04  3  29 2F                AND     #$2F
001F06  3  C9 02                CMP     #$02
001F08  3  D0 03 4C CB          LBEQ    V_PLOT_HIRES_COLOR
001F0C  3  1F           
001F0D  3  C9 22                CMP     #$22
001F0F  3  D0 03 4C 92          LBEQ    V_PLOT_HIRES_MONO
001F13  3  20           
001F14  3  60                   RTS
001F15  3                       V_PLOT_LORES:
001F15  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001F18  3  8A                   TXA
001F19  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
001F1D  3  A9 00                LDA     #00
001F1F  3  8F 48 03 00          STA     F:TEMPOFFSET+1
001F23  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001F26  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001F29  3                                               ; FIGURE THE BUFFER OFFSET
001F29  3  8A                   TXA                     ; GET Y COORD
001F2A  3  48                   PHA                     ; STORE FOR LATER
001F2B  3  4A                   LSR     A               ; THERE ARE TWO ROWS PER BYTE
001F2C  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 40 OR 80 (SINGLE OR DOUBLE LORES)
001F2E  3  29 FF 00             AND     #$00FF
001F31  3  8F 45 03 00          STA     F:TEMP
001F35  3  18                   CLC
001F36  3  0A                   ASL     A
001F37  3  0A                   ASL     A
001F38  3  0A                   ASL     A
001F39  3  0A                   ASL     A
001F3A  3  0A                   ASL     A
001F3B  3  48                   PHA
001F3C  3  AF 45 03 00          LDA     F:TEMP
001F40  3  18                   CLC
001F41  3  0A                   ASL     A
001F42  3  0A                   ASL     A
001F43  3  0A                   ASL     A
001F44  3  8F 45 03 00          STA     F:TEMP
001F48  3  68                   PLA
001F49  3  18                   CLC
001F4A  3  6F 45 03 00          ADC     F:TEMP
001F4E  3  8F 45 03 00          STA     F:TEMP
001F52  3               ; if double lores columns double it.
001F52  3  E2 20                ACCUMULATOR8
001F54  3  A5 06                LDA     <VIDEOMODE
001F56  3  29 10                AND     #$10
001F58  3  C9 00                CMP     #00
001F5A  3  F0 0B                BEQ     :+
001F5C  3  C2 20                ACCUMULATOR16
001F5E  3  AF 45 03 00          LDA     F:TEMP
001F62  3  0A                   ASL     A
001F63  3  8F 45 03 00          STA     F:TEMP
001F67  3               :
001F67  3  C2 20                ACCUMULATOR16
001F69  3  AF 47 03 00          LDA     F:TEMPOFFSET
001F6D  3  18                   CLC
001F6E  3  6F 45 03 00          ADC     F:TEMP
001F72  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
001F76  3  E2 30                ACCUMULATORINDEX8
001F78  3  20 15 33             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
001F7B  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
001F7E  3  8A                   TXA
001F7F  3  29 0F                AND     #$0F
001F81  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
001F85  3  68                   PLA
001F86  3  4A                   LSR     A               ; TOP OR BOTTOM PIXEL?
001F87  3  90 28                BCC     :+
001F89  3                                               ; TOP PIXEL
001F89  3  C2 30                ACCUMULATORINDEX16
001F8B  3  AF 47 03 00          LDA     F:TEMPOFFSET
001F8F  3  AA                   TAX
001F90  3  E2 20                ACCUMULATOR8
001F92  3  BF 00 20 00          LDA     F:$2000,X
001F96  3  29 0F                AND     #$0F
001F98  3  48                   PHA
001F99  3  AF 45 03 00          LDA     F:TEMP
001F9D  3  0A                   ASL     A
001F9E  3  0A                   ASL     A
001F9F  3  0A                   ASL     A
001FA0  3  0A                   ASL     A
001FA1  3  8F 45 03 00          STA     F:TEMP
001FA5  3  68                   PLA
001FA6  3  0F 45 03 00          ORA     F:TEMP
001FAA  3  9F 00 20 00          STA     F:$2000,X
001FAE  3  E2 30                ACCUMULATORINDEX8
001FB0  3  60                   RTS
001FB1  3               :
001FB1  3               ; BOTTOM PIXEL
001FB1  3  C2 30                ACCUMULATORINDEX16
001FB3  3  AF 47 03 00          LDA     F:TEMPOFFSET
001FB7  3  AA                   TAX
001FB8  3  E2 20                ACCUMULATOR8
001FBA  3  BF 00 20 00          LDA     F:$2000,X
001FBE  3  29 F0                AND     #$F0
001FC0  3  0F 45 03 00          ORA     F:TEMP
001FC4  3  9F 00 20 00          STA     F:$2000,X
001FC8  3  E2 30                ACCUMULATORINDEX8
001FCA  3  60                   RTS
001FCB  3               V_PLOT_HIRES_COLOR:
001FCB  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
001FCE  3  8A                   TXA
001FCF  3  48                   PHA
001FD0  3  4A                   LSR     A               ; 2 PIXEL PER BYTE
001FD1  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
001FD5  3  A9 00                LDA     #00
001FD7  3  8F 48 03 00          STA     F:TEMPOFFSET+1
001FDB  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
001FDE  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
001FE1  3                                               ; FIGURE THE BUFFER OFFSET
001FE1  3  8A                   TXA                     ; GET Y COORD
001FE2  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 70 OR 140 (SINGLE OR DOUBLE HIRES)
001FE4  3  29 FF 00             AND     #$00FF
001FE7  3  8F 45 03 00          STA     F:TEMP
001FEB  3  18                   CLC
001FEC  3  0A                   ASL     A
001FED  3  0A                   ASL     A
001FEE  3  0A                   ASL     A
001FEF  3  0A                   ASL     A
001FF0  3  0A                   ASL     A
001FF1  3  0A                   ASL     A
001FF2  3  48                   PHA
001FF3  3  AF 45 03 00          LDA     F:TEMP
001FF7  3  18                   CLC
001FF8  3  0A                   ASL     A
001FF9  3  0A                   ASL     A
001FFA  3  48                   PHA
001FFB  3  AF 45 03 00          LDA     F:TEMP
001FFF  3  18                   CLC
002000  3  0A                   ASL     A
002001  3  8F 45 03 00          STA     F:TEMP
002005  3  68                   PLA
002006  3  18                   CLC
002007  3  6F 45 03 00          ADC     F:TEMP
00200B  3  8F 45 03 00          STA     F:TEMP
00200F  3  68                   PLA
002010  3  18                   CLC
002011  3  6F 45 03 00          ADC     F:TEMP
002015  3  8F 45 03 00          STA     F:TEMP
002019  3               ; if double hires double it.
002019  3  E2 20                ACCUMULATOR8
00201B  3  A5 06                LDA     <VIDEOMODE
00201D  3  29 10                AND     #$10
00201F  3  C9 00                CMP     #00
002021  3  F0 0B                BEQ     :+
002023  3  C2 20                ACCUMULATOR16
002025  3  AF 45 03 00          LDA     F:TEMP
002029  3  0A                   ASL     A
00202A  3  8F 45 03 00          STA     F:TEMP
00202E  3               :
00202E  3  C2 20                ACCUMULATOR16
002030  3  AF 47 03 00          LDA     F:TEMPOFFSET
002034  3  18                   CLC
002035  3  6F 45 03 00          ADC     F:TEMP
002039  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
00203D  3  E2 30                ACCUMULATORINDEX8
00203F  3  20 15 33             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
002042  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
002045  3  8A                   TXA
002046  3  29 0F                AND     #$0F
002048  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
00204C  3  68                   PLA
00204D  3  4A                   LSR     A               ; LEFT OR RIGHT PIXEL?
00204E  3  90 28                BCC     :+
002050  3                                               ; LEFT PIXEL
002050  3  C2 30                ACCUMULATORINDEX16
002052  3  AF 47 03 00          LDA     F:TEMPOFFSET
002056  3  AA                   TAX
002057  3  E2 20                ACCUMULATOR8
002059  3  BF 00 20 00          LDA     F:$2000,X
00205D  3  29 0F                AND     #$0F
00205F  3  48                   PHA
002060  3  AF 45 03 00          LDA     F:TEMP
002064  3  0A                   ASL     A
002065  3  0A                   ASL     A
002066  3  0A                   ASL     A
002067  3  0A                   ASL     A
002068  3  8F 45 03 00          STA     F:TEMP
00206C  3  68                   PLA
00206D  3  0F 45 03 00          ORA     F:TEMP
002071  3  9F 00 20 00          STA     F:$2000,X
002075  3  E2 30                ACCUMULATORINDEX8
002077  3  60                   RTS
002078  3               :
002078  3               ; RIGHT PIXEL
002078  3  C2 30                ACCUMULATORINDEX16
00207A  3  AF 47 03 00          LDA     F:TEMPOFFSET
00207E  3  AA                   TAX
00207F  3  E2 20                ACCUMULATOR8
002081  3  BF 00 20 00          LDA     F:$2000,X
002085  3  29 F0                AND     #$F0
002087  3  0F 45 03 00          ORA     F:TEMP
00208B  3  9F 00 20 00          STA     F:$2000,X
00208F  3  E2 30                ACCUMULATORINDEX8
002091  3  60                   RTS
002092  3               
002092  3               V_PLOT_HIRES_MONO:
002092  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
002095  3  8A                   TXA
002096  3  48                   PHA
002097  3  4A                   LSR     A               ; 8 PIXEL PER BYTE
002098  3  4A                   LSR     A
002099  3  4A                   LSR     A
00209A  3               
00209A  3  8F 47 03 00          STA     F:TEMPOFFSET    ; STORE X COORD IN OFFSET ADDRESS
00209E  3  A9 00                LDA     #00
0020A0  3  8F 48 03 00          STA     F:TEMPOFFSET+1
0020A4  3  20 15 33             JSR     LAB_1C01        ; GET THE SECOND PARAMETER (AFTER ',') OR SYN ERR
0020A7  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X
0020AA  3                                               ; FIGURE THE BUFFER OFFSET
0020AA  3  8A                   TXA                     ; GET Y COORD
0020AB  3  C2 30                ACCUMULATORINDEX16      ; MULTIPLY Y COORD BY 35 OR 70 (MONO OR QUAD HIRES)
0020AD  3  29 FF 00             AND     #$00FF
0020B0  3  8F 45 03 00          STA     F:TEMP
0020B4  3  18                   CLC
0020B5  3  0A                   ASL     A
0020B6  3  0A                   ASL     A
0020B7  3  0A                   ASL     A
0020B8  3  0A                   ASL     A
0020B9  3  0A                   ASL     A
0020BA  3  48                   PHA
0020BB  3  AF 45 03 00          LDA     F:TEMP
0020BF  3  18                   CLC
0020C0  3  0A                   ASL     A
0020C1  3  18                   CLC
0020C2  3  6F 45 03 00          ADC     F:TEMP
0020C6  3  8F 45 03 00          STA     F:TEMP
0020CA  3  68                   PLA
0020CB  3  18                   CLC
0020CC  3  6F 45 03 00          ADC     F:TEMP
0020D0  3  8F 45 03 00          STA     F:TEMP
0020D4  3               ; if quad hires double it.
0020D4  3  E2 20                ACCUMULATOR8
0020D6  3  A5 06                LDA     <VIDEOMODE
0020D8  3  29 10                AND     #$10
0020DA  3  C9 00                CMP     #00
0020DC  3  D0 0B                BNE     :+
0020DE  3  C2 20                ACCUMULATOR16
0020E0  3  AF 45 03 00          LDA     F:TEMP
0020E4  3  0A                   ASL     A
0020E5  3  8F 45 03 00          STA     F:TEMP
0020E9  3               :
0020E9  3  C2 20                ACCUMULATOR16
0020EB  3  AF 47 03 00          LDA     F:TEMPOFFSET
0020EF  3  18                   CLC
0020F0  3  6F 45 03 00          ADC     F:TEMP
0020F4  3  8F 47 03 00          STA     F:TEMPOFFSET    ; AT THIS POINT WE SHOULD HAVE THE BUFFER OFFSET CALCULATED
0020F8  3  E2 30                ACCUMULATORINDEX8
0020FA  3  20 15 33             JSR     LAB_1C01        ; GET THE THIRD PARAMETER (AFTER ',') OR SYN ERR
0020FD  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE THIRD PARAMETER, RETURN IN X (PATTERN)
002100  3  8A                   TXA
002101  3  29 01                AND     #$01
002103  3  8F 45 03 00          STA     F:TEMP          ; SAVE COLOR IN TEMP
002107  3  68                   PLA
002108  3  29 07                AND     #$07            ; WHICH BIT?
00210A  3  AA                   TAX
00210B  3  AF 45 03 00          LDA     F:TEMP
00210F  3  C9 01                CMP     #$01
002111  3  D0 1A                BNE     :+
002113  3  BF 47 21 FF          LDA     F:HIRES_BIT_LOOKUP_SET,X
002117  3  48                   PHA
002118  3  C2 30                ACCUMULATORINDEX16
00211A  3  AF 47 03 00          LDA     F:TEMPOFFSET
00211E  3  AA                   TAX
00211F  3  E2 20                ACCUMULATOR8
002121  3  68                   PLA
002122  3  1F 00 20 00          ORA     F:$2000,X
002126  3  9F 00 20 00          STA     F:$2000,X
00212A  3  E2 10                INDEX8
00212C  3  60                   RTS
00212D  3               :
00212D  3  BF 4F 21 FF          LDA     F:HIRES_BIT_LOOKUP_RESET,X
002131  3  48                   PHA
002132  3  C2 30                ACCUMULATORINDEX16
002134  3  AF 47 03 00          LDA     F:TEMPOFFSET
002138  3  AA                   TAX
002139  3  E2 20                ACCUMULATOR8
00213B  3  68                   PLA
00213C  3  3F 00 20 00          AND     F:$2000,X
002140  3  9F 00 20 00          STA     F:$2000,X
002144  3  E2 10                INDEX8
002146  3  60                   RTS
002147  3               HIRES_BIT_LOOKUP_S:
002147  3  80 40 20 10          .BYTE   %10000000,%01000000,%00100000,%00010000,%00001000,%00000100,%00000010,%00000001
00214B  3  08 04 02 01  
00214F  3               HIRES_BIT_LOOKUP_R:
00214F  3  7F BF DF EF          .BYTE   %01111111,%10111111,%11011111,%11101111,%11110111,%11111011,%11111101,%11111110
002153  3  F7 FB FD FE  
002157  3               HIRES_BIT_LOOKUP_SET = (PROGRAMBANK*$10000)+HIRES_BIT_LOOKUP_S
002157  3               HIRES_BIT_LOOKUP_RESET =    (PROGRAMBANK*$10000)+HIRES_BIT_LOOKUP_R
002157  3               
002157  3               ;___V_PATTERN________________________________________________
002157  3               ;
002157  3               ;  DEFINE GRAPHICS PATTERN
002157  3               ;
002157  3               ;  TAKES 10 PARAMETERS
002157  3               ;       PATTERN NUM (0-255)
002157  3               ;       PATTERN DATA (8 BYTES)
002157  3               ; THIS IS NATIVE '816 CODE
002157  3               ;__________________________________________________________
002157  3               V_PATTERN:
002157  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X
00215A  3  8A                   TXA
00215B  3  8F 32 FE 00          STA     f:VideoCharGenOffset
00215F  3  A0 08                LDY     #8
002161  3               :
002161  3  5A                   PHY
002162  3  20 15 33             JSR     LAB_1C01        ; GET THE NEXT PARAMETER (AFTER ',') OR SYN ERR
002165  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE NEXT PARAMETER, RETURN IN X
002168  3  7A                   PLY
002169  3  8A                   TXA
00216A  3  8F 33 FE 00          STA     f:VideoCharGenData
00216E  3  88                   DEY
00216F  3  C0 00                CPY     #$00
002171  3  D0 EE                BNE     :-
002173  3  60                   RTS
002174  3               
002174  2                       .INCLUDE "ay38910.asm"
002174  3               via1regb        = $FE10         ; Register
002174  3               via1rega        = $FE11         ; Register
002174  3               via1ddrb        = $FE12         ; Register
002174  3               via1ddra        = $FE13         ; Register
002174  3               via1t1cl        = $FE14         ; Register
002174  3               via1t1ch        = $FE15         ; Register
002174  3               via1t1ll        = $FE16         ; Register
002174  3               via1t1lh        = $FE17         ; Register
002174  3               via1t2cl        = $FE18         ; Register
002174  3               via1t2ch        = $FE19         ; Register
002174  3               via1sr          = $FE1A         ; Register
002174  3               via1acr         = $FE1B         ; Register
002174  3               via1pcr         = $FE1C         ; Register
002174  3               via1ifr         = $FE1D         ; Register
002174  3               via1ier         = $FE1E         ; Register
002174  3               via1ora         = $FE1F         ; Register
002174  3               
002174  3               
002174  3               
002174  3               ;___SOUND__________________________________________________
002174  3               ;
002174  3               ; PLAY SOUND
002174  3               ;
002174  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
002174  3               ;
002174  3               ; THIS IS NATIVE '816 CODE
002174  3               ;__________________________________________________________
002174  3               V_SOUND:
002174  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
002177  3  DA                   PHX
002178  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
00217B  3  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
00217E  3               ; else do type mismatch
00217E  3  20 33 3F             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
002181  3               
002181  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
002182  3  29 03                AND     #$03
002184  3  18                   CLC
002185  3  0A                   ASL                     ; = *2
002186  3  48                   PHA
002187  3  A4 11                LDY     <Itempl
002189  3  20 AE 22             JSR     psgwr           ; SET LOW BYTE
00218C  3  68                   PLA
00218D  3  1A                   INC     A
00218E  3  A4 12                LDY     <Itemph
002190  3  20 AE 22             JSR     psgwr           ; SET HIGH BYTE
002193  3  60                   RTS
002194  3               
002194  3               ;___VOLUME__________________________________________________
002194  3               ;
002194  3               ; SET VOLUME
002194  3               ;
002194  3               ;  TAKES TWO PARAMETERS CHANNEL,VOLUME
002194  3               ;
002194  3               ; THIS IS NATIVE '816 CODE
002194  3               ;__________________________________________________________
002194  3               V_VOLUME:
002194  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
002197  3  DA                   PHX
002198  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
00219B  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (VOLUME)
00219E  3  9B                   TXY
00219F  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
0021A0  3  29 03                AND     #$03
0021A2  3               
0021A2  3  18                   CLC
0021A3  3  69 08                ADC     #08
0021A5  3  20 AE 22             JSR     psgwr
0021A8  3  60                   RTS
0021A9  3               
0021A9  3               
0021A9  3               ;___VOICE__________________________________________________
0021A9  3               ;
0021A9  3               ; SET VOICE
0021A9  3               ;
0021A9  3               ;  TAKES TWO PARAMETERS VOICE, ENVELOPE
0021A9  3               ;
0021A9  3               ; THIS IS NATIVE '816 CODE
0021A9  3               ;__________________________________________________________
0021A9  3               V_VOICE:
0021A9  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021AC  3  DA                   PHX
0021AD  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021B0  3  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0021B3  3               ; else do type mismatch
0021B3  3  20 33 3F             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
0021B6  3  7A                   PLY
0021B7  3  A9 0D                LDA     #13
0021B9  3  20 AE 22             JSR     psgwr
0021BC  3               
0021BC  3  A9 0B                LDA     #11
0021BE  3  A4 11                LDY     <Itempl
0021C0  3  20 AE 22             JSR     psgwr           ; SET LOW BYTE
0021C3  3  A9 0C                LDA     #12
0021C5  3  A4 12                LDY     <Itemph         ; SET HIGH BYTE
0021C7  3  20 AE 22             JSR     psgwr
0021CA  3               
0021CA  3  60                   RTS
0021CB  3               
0021CB  3               
0021CB  3               
0021CB  3               
0021CB  3               
0021CB  3               ;___NOISE__________________________________________________
0021CB  3               ;
0021CB  3               ; SELECT NOISE CHANNEL
0021CB  3               ;
0021CB  3               ;  TAKES TWO PARAMETERS CHANNEL,FREQUENCY
0021CB  3               ;
0021CB  3               ; THIS IS NATIVE '816 CODE
0021CB  3               ;__________________________________________________________
0021CB  3               V_NOISE:
0021CB  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
0021CE  3  DA                   PHX
0021CF  3  20 15 33             JSR     LAB_1C01        ; (AFTER ',') OR SYN ERR
0021D2  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE SECOND PARAMETER, RETURN IN X (FREQ)
0021D5  3  68                   PLA                     ; LIMIT THE CHANNELS TO <3
0021D6  3  DA                   PHX
0021D7  3  AA                   TAX
0021D8  3               
0021D8  3  29 1F                AND     #%00011111
0021DA  3  A8                   TAY
0021DB  3  A9 06                LDA     #$06
0021DD  3  20 AE 22             JSR     psgwr           ; SET NOISE FREQ
0021E0  3               
0021E0  3  A9 07                LDA     #$07
0021E2  3  20 6C 22             JSR     psgrd           ; GET CONFIG
0021E5  3  68                   PLA
0021E6  3  5A                   PHY
0021E7  3  29 03                AND     #$03
0021E9  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
0021EA  3  68                   PLA
0021EB  3  E0 00                CPX     #$00
0021ED  3  D0 06                BNE     NOISE_1
0021EF  3  29 37                AND     #%00110111
0021F1  3  09 01                ORA     #%00000001
0021F3  3  80 0E                BRA     NOISE_3
0021F5  3               NOISE_1:
0021F5  3  E0 01                CPX     #$01
0021F7  3  D0 06                BNE     NOISE_2
0021F9  3  29 2F                AND     #%00101111
0021FB  3  09 02                ORA     #%00000010
0021FD  3  80 04                BRA     NOISE_3
0021FF  3               NOISE_2:
0021FF  3  29 1F                AND     #%00011111
002201  3  09 04                ORA     #%00000100
002203  3               NOISE_3:
002203  3  A8                   TAY
002204  3  A9 07                LDA     #$07
002206  3  20 AE 22             JSR     psgwr           ; SET LOW BYTE
002209  3  60                   RTS
00220A  3               
00220A  3               ;___TONE___________________________________________________
00220A  3               ;
00220A  3               ; SELECT TONE CHANNEL
00220A  3               ;
00220A  3               ;  TAKES ONE PARAMETER CHANNEL
00220A  3               ;
00220A  3               ; THIS IS NATIVE '816 CODE
00220A  3               ;__________________________________________________________
00220A  3               V_TONE:
00220A  3  20 8F 3E             JSR     LAB_GTBY        ; GET THE FIRST PARAMETER, RETURN IN X (CHANNEL)
00220D  3  DA                   PHX
00220E  3               
00220E  3  A9 07                LDA     #$07
002210  3  20 6C 22             JSR     psgrd           ; GET CONFIG
002213  3  68                   PLA
002214  3  5A                   PHY
002215  3  29 03                AND     #$03
002217  3  AA                   TAX                     ; A=CONFIG, X=CHANNEL
002218  3  68                   PLA
002219  3  E0 00                CPX     #$00
00221B  3  D0 06                BNE     TONE_1
00221D  3  29 3E                AND     #%00111110
00221F  3  09 08                ORA     #%00001000
002221  3  80 0E                BRA     TONE_3
002223  3               TONE_1:
002223  3  E0 01                CPX     #$01
002225  3  D0 06                BNE     TONE_2
002227  3  29 3D                AND     #%00111101
002229  3  09 10                ORA     #%00010000
00222B  3  80 04                BRA     TONE_3
00222D  3               TONE_2:
00222D  3  29 3B                AND     #%00111011
00222F  3  09 20                ORA     #%00100000
002231  3               TONE_3:
002231  3  A8                   TAY
002232  3  A9 07                LDA     #$07
002234  3  20 AE 22             JSR     psgwr           ; SET LOW BYTE
002237  3  60                   RTS
002238  3               
002238  3               
002238  3               ;___CONTROLLER_______________________________________________
002238  3               ;
002238  3               ; GET JOYTICK STATUS
002238  3               ;
002238  3               ;  TAKES ONE PARAMETERS JOYSTICK#, RETURNS STATUS
002238  3               ;
002238  3               ; THIS IS NATIVE '816 CODE
002238  3               ;__________________________________________________________
002238  3               LAB_CON:
002238  3  20 33 3F             JSR     LAB_F2FX        ; GET THE PARAMETER, RETURN IN X (controller#)
00223B  3  A5 11                LDA     <Itempl
00223D  3  29 01                AND     #$01
00223F  3  18                   CLC
002240  3  69 0E                ADC     #14
002242  3  20 6C 22             JSR     psgrd           ; return value in y
002245  3  4C BB 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
002248  3               
002248  3               
002248  3               
002248  3               
002248  3               ;___utility functions____________________________________________
002248  3               psginit:
002248  3  A9 9C                LDA     #%10011100
00224A  3  8F 13 FE 00          STA     f:via1ddra
00224E  3  A9 10                LDA     #%00010000
002250  3  8F 11 FE 00          STA     f:via1rega
002254  3  A9 FF                LDA     #$FF
002256  3  8F 12 FE 00          STA     f:via1ddrb
00225A  3  A9 00                LDA     #$00
00225C  3  8F 10 FE 00          STA     f:via1regb
002260  3  60                   RTS
002261  3  20 F0 22             JSR     clrpsg
002264  3               
002264  3  A9 07                LDA     #7
002266  3  A0 3F                LDY     #$3F
002268  3  20 AE 22             JSR     psgwr
00226B  3  60                   RTS
00226C  3               
00226C  3               psgrd:
00226C  3  8F 10 FE 00          STA     f:via1regb      ; select register
002270  3  A9 1C                LDA     #%00011100      ; latch address
002272  3  8F 11 FE 00          STA     f:via1rega
002276  3               
002276  3  8F 11 FE 00          STA     f:via1rega
00227A  3  8F 11 FE 00          STA     f:via1rega
00227E  3               
00227E  3  A9 10                LDA     #%00010000      ; inact
002280  3  8F 11 FE 00          STA     f:via1rega
002284  3               
002284  3  8F 11 FE 00          STA     f:via1rega
002288  3               
002288  3  A9 00                LDA     #$00
00228A  3  8F 12 FE 00          STA     f:via1ddrb
00228E  3  A9 18                LDA     #%00011000      ; latch data
002290  3  8F 11 FE 00          STA     f:via1rega
002294  3               
002294  3  8F 11 FE 00          STA     f:via1rega
002298  3  8F 11 FE 00          STA     f:via1rega
00229C  3               
00229C  3  AF 10 FE 00          LDA     f:via1regb      ; get data
0022A0  3  A8                   TAY
0022A1  3  A9 FF                LDA     #$FF
0022A3  3  8F 12 FE 00          STA     f:via1ddrb
0022A7  3  A9 10                LDA     #%00010000      ; inact
0022A9  3  8F 11 FE 00          STA     f:via1rega
0022AD  3  60                   RTS
0022AE  3               
0022AE  3               
0022AE  3               psgwr:
0022AE  3  8F 10 FE 00          STA     f:via1regb      ; select register
0022B2  3  A9 1C                LDA     #%00011100      ; latch address
0022B4  3  8F 11 FE 00          STA     f:via1rega
0022B8  3               
0022B8  3  8F 11 FE 00          STA     f:via1rega
0022BC  3  8F 11 FE 00          STA     f:via1rega
0022C0  3               
0022C0  3  A9 10                LDA     #%00010000      ; inact
0022C2  3  8F 11 FE 00          STA     f:via1rega
0022C6  3               
0022C6  3  8F 11 FE 00          STA     f:via1rega
0022CA  3  8F 11 FE 00          STA     f:via1rega
0022CE  3  98                   TYA
0022CF  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022D3  3               
0022D3  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022D7  3  8F 10 FE 00          STA     f:via1regb      ; store data
0022DB  3               
0022DB  3  A9 14                LDA     #%00010100      ; latch data
0022DD  3  8F 11 FE 00          STA     f:via1rega
0022E1  3               
0022E1  3  8F 11 FE 00          STA     f:via1rega
0022E5  3  8F 11 FE 00          STA     f:via1rega
0022E9  3               
0022E9  3  A9 10                LDA     #%00010000      ; inact
0022EB  3  8F 11 FE 00          STA     f:via1rega
0022EF  3  60                   RTS
0022F0  3               
0022F0  3               ;
0022F0  3               ; Clear PSG registers to default
0022F0  3               ;
0022F0  3               clrpsg:
0022F0  3  DA 5A 48 08          STORECONTEXT
0022F4  3  E2 30                ACCUMULATORINDEX8
0022F6  3  A2 00                LDX     #00
0022F8  3  A0 00                LDY     #00
0022FA  3               clrpsg1:
0022FA  3  8A                   TXA
0022FB  3  20 AE 22             JSR     psgwr           ; set register X to 0
0022FE  3  E8                   INX
0022FF  3  E0 11                CPX     #17
002301  3  D0 F7                BNE     clrpsg1
002303  3  28 68 7A FA          RESTORECONTEXT
002307  3  60                   RTS
002308  3               
002308  2                       .INCLUDE "rtc.asm"
002308  3               .P816
002308  3               
002308  3               ;___LAB_IECST_______________________________________________
002308  3               ;
002308  3               ; RETURN SYSTEM SECONDS
002308  3               ;
002308  3               ; THIS IS NATIVE '816 CODE
002308  3               ;__________________________________________________________
002308  3               LAB_SECOND:
002308  3  8B                   PHB
002309  3  DA                   PHX
00230A  3  08                   PHP
00230B  3  E2 30                ACCUMULATORINDEX8
00230D  3  A2 0D                LDX     #$0D
00230F  3  A9 00                LDA     #$00
002311  3  22 24 FD 00          JSL     LWRITERTC        ; Set Mode
002315  3  A2 00                LDX     #$00
002317  3  22 28 FD 00          JSL     LREADRTC         ; Get ones digit
00231B  3  48                   PHA
00231C  3  A2 01                LDX     #$01
00231E  3  22 28 FD 00          JSL     LREADRTC         ; Get tens digit
002322  3  18                   CLC
002323  3  0A                   ASL     A
002324  3  48                   PHA
002325  3  0A                   ASL     A
002326  3  0A                   ASL     A
002327  3  8F 45 03 00          STA     F:TEMP
00232B  3  68                   PLA
00232C  3  18                   CLC
00232D  3  6F 45 03 00          ADC     F:TEMP
002331  3  8F 45 03 00          STA     F:TEMP
002335  3  68                   PLA
002336  3  18                   CLC
002337  3  6F 45 03 00          ADC     F:TEMP
00233B  3  A8                   TAY
00233C  3  A9 00                LDA     #0              ; Get high byte
00233E  3  28                   PLP
00233F  3  FA                   PLX
002340  3  AB                   PLB
002341  3  20 AE 37             JSR     LAB_AYFC
002344  3  60                   RTS
002345  3               LAB_PSECOND:
002345  3  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
002347  3  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
00234B  3  60                   RTS
00234C  3               
00234C  2               
00234C  2               
00234C  2               
00234C  2               ;___TitleScreen_____________________________________________
00234C  2               ;
00234C  2               ; Basic Title Screen
00234C  2               ;
00234C  2               ; THIS IS NATIVE '816 CODE
00234C  2               ;__________________________________________________________
00234C  2               TitleScreen:
00234C  2  20 48 22             JSR     psginit
00234F  2               
00234F  2  A9 00                LDA     #0
002351  2  85 06                STA     <VIDEOMODE
002353  2               
002353  2  AF 41 03 00          LDA     f:ConsoleDevice
002357  2  C9 00                CMP     #$00
002359  2  D0 08                BNE     TitleScreen_1
00235B  2  A9 0E                LDA     #<LAB_SMSG1     ; point to sign-on message (low addr)
00235D  2  A0 16                LDY     #>LAB_SMSG1     ; point to sign-on message (high addr)
00235F  2  20 76 2F             JSR     LAB_18C3        ; print null terminated string from memory
002362  2  60                   RTS
002363  2               TitleScreen_1:
002363  2  A9 9E                LDA     #$9E
002365  2  22 18 FD 00          JSL     LSetColorVEC
002369  2  22 6C FD 00          JSL     LClearScrVec
00236D  2  A9 BB                LDA     #<LAB_CONMSG    ; point to sign-on message (low addr)
00236F  2  A0 15                LDY     #>LAB_CONMSG    ; point to sign-on message (high addr)
002371  2  20 76 2F             JSR     LAB_18C3        ; print null terminated string from memory
002374  2  60                   RTS
002375  2               
002375  2               ;___ScreenEditor____________________________________________
002375  2               ;
002375  2               ; Basic Screen editor code
002375  2               ;
002375  2               ; THIS IS NATIVE '816 CODE
002375  2               ;__________________________________________________________
002375  2               ScreenEditor:
002375  2  48                   PHA
002376  2  DA                   PHX
002377  2  5A                   PHY
002378  2  08                   PHP
002379  2  8B                   PHB
00237A  2  E2 30                ACCUMULATORINDEX8
00237C  2               ; allow prepopulate of screen
00237C  2               ploop:
00237C  2  22 1C FD 00          JSL     LCURSORVEC
002380  2  22 08 FD 00          JSL     LINPWVEC
002384  2  C9 FF                CMP     #$FF
002386  2  F0 F4                BEQ     ploop
002388  2  22 20 FD 00          JSL     LUNCURSORVEC
00238C  2  C9 01                CMP     #01
00238E  2  F0 21                BEQ     crsrup
002390  2  C9 02                CMP     #02
002392  2  F0 30                BEQ     crsrdn
002394  2  C9 1F                CMP     #$1f
002396  2  F0 53                BEQ     crsrlt
002398  2  C9 04                CMP     #$04
00239A  2  D0 03 4C 1F          LBEQ    crsrrt
00239E  2  24           
00239F  2  C9 0A                CMP     #$0A
0023A1  2  F0 D9                BEQ     ploop
0023A3  2  C9 0D                CMP     #13
0023A5  2  D0 03 4C 3E          LBEQ    pexit
0023A9  2  24           
0023AA  2               
0023AA  2  22 00 FD 00          JSL     LPRINTVEC
0023AE  2  4C 7C 23             JMP     ploop
0023B1  2               
0023B1  2               crsrup:
0023B1  2  AF 31 03 00          LDA     F:CSRY
0023B5  2  C9 00                CMP     #00
0023B7  2  F0 C3                BEQ     ploop
0023B9  2  AF 31 03 00          LDA     F:CSRY
0023BD  2  3A                   DEC     A
0023BE  2  8F 31 03 00          STA     F:CSRY
0023C2  2  80 B8                BRA     ploop
0023C4  2               crsrdn:
0023C4  2  AF 31 03 00          LDA     F:CSRY
0023C8  2  C9 17                CMP     #23
0023CA  2  F0 0B                BEQ     crsrdn_1
0023CC  2  AF 31 03 00          LDA     F:CSRY
0023D0  2  1A                   INC     A
0023D1  2  8F 31 03 00          STA     F:CSRY
0023D5  2  80 A5                BRA     ploop
0023D7  2               crsrdn_1:
0023D7  2  AF 30 03 00          LDA     F:CSRX
0023DB  2  48                   PHA
0023DC  2  AF 43 03 00          LDA     F:VIDEOWIDTH
0023E0  2  22 14 FD 00          JSL     LSrlUpVEC
0023E4  2  68                   PLA
0023E5  2  8F 30 03 00          STA     F:CSRX
0023E9  2  80 91                BRA     ploop
0023EB  2               crsrlt:
0023EB  2  AF 30 03 00          LDA     F:CSRX
0023EF  2  C9 00                CMP     #00
0023F1  2  F0 0C                BEQ     crsrlt_1
0023F3  2  AF 30 03 00          LDA     F:CSRX
0023F7  2  3A                   DEC     A
0023F8  2  8F 30 03 00          STA     F:CSRX
0023FC  2  4C 7C 23             JMP     ploop
0023FF  2               crsrlt_1:
0023FF  2  AF 31 03 00          LDA     F:CSRY
002403  2  C9 00                CMP     #00
002405  2  D0 03 4C 7C          LBEQ    ploop
002409  2  23           
00240A  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00240E  2  3A                   DEC     A
00240F  2  8F 30 03 00          STA     F:CSRX
002413  2  AF 31 03 00          LDA     F:CSRY
002417  2  3A                   DEC     A
002418  2  8F 31 03 00          STA     F:CSRY
00241C  2  4C 7C 23             JMP     ploop
00241F  2               crsrrt:
00241F  2  AF 43 03 00          LDA     F:VIDEOWIDTH
002423  2  3A                   DEC     A
002424  2  CF 30 03 00          CMP     F:CSRX
002428  2  F0 0C                BEQ     crsrrt_1
00242A  2  AF 30 03 00          LDA     F:CSRX
00242E  2  1A                   INC     A
00242F  2  8F 30 03 00          STA     F:CSRX
002433  2  4C 7C 23             JMP     ploop
002436  2               crsrrt_1:
002436  2  A9 00                LDA     #00
002438  2  8F 30 03 00          STA     F:CSRX
00243C  2  80 86                BRA     crsrdn
00243E  2               pexit:
00243E  2  20 6E 24             JSR     LdKbBuffer
002441  2  A2 50                LDX     #80
002443  2  A9 00                LDA     #$00
002445  2  9F 81 21 02          STA     f:LIbuffs,X
002449  2               TERMLOOP:
002449  2  CA                   DEX
00244A  2  BF 81 21 02          LDA     f:LIbuffs,X
00244E  2  C9 20                CMP     #32
002450  2  F0 06                BEQ     TERMLOOP_B
002452  2  C9 00                CMP     #00
002454  2  F0 08                BEQ     TERMLOOP_C
002456  2  80 0A                BRA     TERMLOOP_A
002458  2               TERMLOOP_B:
002458  2  A9 00                LDA     #00
00245A  2  9F 81 21 02          STA     f:LIbuffs,X
00245E  2               TERMLOOP_C:
00245E  2  E0 00                CPX     #00
002460  2  D0 E7                BNE     TERMLOOP
002462  2               TERMLOOP_A:
002462  2  A9 0D                LDA     #13
002464  2  22 00 FD 00          JSL     LPRINTVEC
002468  2  AB                   PLB
002469  2  28                   PLP
00246A  2  7A                   PLY
00246B  2  FA                   PLX
00246C  2  68                   PLA
00246D  2  60                   RTS
00246E  2               
00246E  2               
00246E  2               LdKbBuffer:
00246E  2               ; clear input buffer
00246E  2  A2 51                LDX     #81
002470  2               :
002470  2  A9 00                LDA     #00
002472  2  9F 80 21 02          STA     f:LIbuffs-1,X
002476  2  CA                   DEX
002477  2  D0 F7                BNE     :-
002479  2               
002479  2               ; Let's calculate the screen memory offset and store it
002479  2  20 FF 24             JSR     GetVideoAddressOffset
00247C  2               
00247C  2  AF 43 03 00          LDA     F:VIDEOWIDTH
002480  2  C9 28                CMP     #40
002482  2  F0 03                BEQ     :+
002484  2  4C CE 24             JMP     LdKbBuffer_1c
002487  2               :
002487  2               ; are we on the first line?  If so, we know it is not continued from the previous line
002487  2  AF 31 03 00          LDA     F:CSRY
00248B  2  A8                   TAY
00248C  2  C0 00                CPY     #$00
00248E  2  F0 27                BEQ     LdKbBuffer_1
002490  2               ; if prior line linked  set y-1
002490  2  C2 30                ACCUMULATORINDEX16
002492  2  AF 47 03 00          LDA     f:TEMPOFFSET
002496  2  AA                   TAX
002497  2  E2 20                ACCUMULATOR8
002499  2  BF FF 0F 00          LDA     F:$0FFF,X
00249D  2  E2 10                INDEX8
00249F  2  C9 20                CMP     #$20
0024A1  2  F0 14                BEQ     LdKbBuffer_1
0024A3  2  C2 20                ACCUMULATOR16
0024A5  2  AF 47 03 00          LDA     f:TEMPOFFSET
0024A9  2  38                   SEC
0024AA  2  E9 28 00             SBC     #40
0024AD  2  8F 47 03 00          STA     f:TEMPOFFSET
0024B1  2  E2 20                ACCUMULATOR8
0024B3  2  A9 51                LDA     #81             ; get 80 chars
0024B5  2  80 1D                BRA     LdKbBuffer_1b
0024B7  2               ; get chars; 40 if last line char=32, 80 if not
0024B7  2               
0024B7  2               LdKbBuffer_1:
0024B7  2               ; is this the last line on the screen?
0024B7  2  C0 17                CPY     #23
0024B9  2  F0 17                BEQ     LdKbBuffer_1a
0024BB  2               ; if current line linked carries to the next set size to 80
0024BB  2  C2 30                ACCUMULATORINDEX16
0024BD  2  AF 47 03 00          LDA     f:TEMPOFFSET
0024C1  2  AA                   TAX
0024C2  2  E2 20                ACCUMULATOR8
0024C4  2  BF 27 10 00          LDA     F:$1027,X
0024C8  2  E2 10                INDEX8
0024CA  2  C9 20                CMP     #$20
0024CC  2  F0 04                BEQ     LdKbBuffer_1a
0024CE  2               LdKbBuffer_1c:
0024CE  2  A9 51                LDA     #81             ; get 80 chars
0024D0  2  80 02                BRA     LdKbBuffer_1b
0024D2  2               LdKbBuffer_1a:
0024D2  2  A9 29                LDA     #41             ; get 40 chars
0024D4  2               LdKbBuffer_1b:
0024D4  2  C2 30                ACCUMULATORINDEX16
0024D6  2  29 FF 00             AND     #$00FF
0024D9  2  A8                   TAY
0024DA  2  AF 47 03 00          LDA     f:TEMPOFFSET
0024DE  2  AA                   TAX
0024DF  2  A9 00 00             LDA     #$0000
0024E2  2  85 07                STA     <LOCALWORK
0024E4  2  E2 20                ACCUMULATOR8
0024E6  2               LdKbBuffer_2:
0024E6  2  BF 00 10 00          LDA     f:$1000,X
0024EA  2  DA                   PHX
0024EB  2  A6 07                LDX     <LOCALWORK
0024ED  2  9F 81 21 02          STA     f:LIbuffs,X
0024F1  2  E8                   INX
0024F2  2  86 07                STX     <LOCALWORK
0024F4  2  FA                   PLX
0024F5  2  E8                   INX
0024F6  2  88                   DEY
0024F7  2  C0 00 00             CPY     #0000
0024FA  2  D0 EA                BNE     LdKbBuffer_2
0024FC  2  E2 30                ACCUMULATORINDEX8
0024FE  2  60                   RTS
0024FF  2               
0024FF  2               .I8
0024FF  2               .A8
0024FF  2               GetVideoAddressOffset:
0024FF  2  AF 31 03 00          LDA     F:CSRY
002503  2  C2 30                ACCUMULATORINDEX16
002505  2  29 FF 00             AND     #$00FF
002508  2  8F 45 03 00          STA     F:TEMP
00250C  2  18                   CLC
00250D  2  0A                   ASL     A
00250E  2  0A                   ASL     A
00250F  2  0A                   ASL     A
002510  2  0A                   ASL     A
002511  2  0A                   ASL     A
002512  2  48                   PHA
002513  2  AF 45 03 00          LDA     F:TEMP
002517  2  18                   CLC
002518  2  0A                   ASL     A
002519  2  0A                   ASL     A
00251A  2  0A                   ASL     A
00251B  2  8F 45 03 00          STA     F:TEMP
00251F  2  68                   PLA
002520  2  18                   CLC
002521  2  6F 45 03 00          ADC     F:TEMP
002525  2  8F 47 03 00          STA     F:TEMPOFFSET
002529  2               ; if 80 columns double it.
002529  2  E2 20                ACCUMULATOR8
00252B  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00252F  2  C9 28                CMP     #40
002531  2  F0 0B                BEQ     :+
002533  2  C2 20                ACCUMULATOR16
002535  2  AF 47 03 00          LDA     F:TEMPOFFSET
002539  2  0A                   ASL     A
00253A  2  8F 47 03 00          STA     F:TEMPOFFSET
00253E  2               :
00253E  2  E2 30                ACCUMULATORINDEX8
002540  2  60                   RTS
002541  2               
002541  2               
002541  2               
002541  2               .I8
002541  2               .A8
002541  2               ;___LAB_MONITOR_____________________________________________
002541  2               ;
002541  2               ; UTILIZE BIOS TO GO TO MONITOR
002541  2               ;
002541  2               ;
002541  2               ; THIS IS NATIVE '816 CODE
002541  2               ;__________________________________________________________
002541  2               LAB_MONITOR:
002541  2  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
002542  2  18                   CLC                     ;
002543  2  FB                   XCE                     ; SET NATIVE MODE
002544  2  DA A2 00 DA          SETBANK 0
002548  2  AB FA        
00254A  2  C2 30                ACCUMULATORINDEX16
00254C  2  A9 FF BF             LDA     #STACK          ; get the stack address
00254F  2  1B                   TCS                     ; and set the stack to it
002550  2  5C 00 E0 00          JML     $00E000
002554  2               
002554  1               ;
002554  1               ;____________________________________________________________________________________________
002554  1               
002554  1               
002554  1               ;   ensure CPU Context is in a known state
002554  1  EA                   NOP                     ; FIX A CODE PAGE ALIGNMENT PROBLEM
002555  1               BASICBEGIN:
002555  1               
002555  1  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
002556  1  18                   CLC                     ;
002557  1  FB                   XCE                     ; SET NATIVE MODE
002558  1  C2 30                ACCUMULATORINDEX16
00255A  1  A9 FF BF             LDA     #STACK          ; get the stack address
00255D  1  1B                   TCS                     ; and set the stack to it
00255E  1  A9 00 00             LDA     #$0000          ;
002561  1  48                   PHA                     ; Set Direct Register to 0
002562  1  2B                   PLD                     ;
002563  1               
002563  1                       .IF     PROGRAMBANK=DATABANK
002563  1               
002563  1                       .ELSE
002563  1  A2 00 10                 LDX     #$1000
002566  1  A0 00 10                 LDY     #$1000
002569  1  A9 00 10                 LDA     #$1000
00256C  1  54 02 FF                 MVN     #PROGRAMBANK,#DATABANK; COPY TABLES $1000 THROUGH $2000 PLUS OR MINUS :) TO WORKING BANK
00256F  1                       .ENDIF
00256F  1  E2 30                ACCUMULATORINDEX8
002571  1  A9 FF                LDA     #PROGRAMBANK    ; SET DATA BANK = TO PROGRAM BANK TO ALLOW FOR INITIALIZATION FROM ROM
002573  1  48                   PHA
002574  1  AB                   PLB                     ;
002575  1               
002575  1               
002575  1               
002575  1               LAB_COLD:
002575  1  A2 04                LDX     #PG2_TABE-PG2_TABS-1
002577  1               ; byte count-1
002577  1               LAB_2D13:
002577  1  BD 33 10             LDA     PG2_TABS,X      ; get byte
00257A  1  9F 00 02 00          STA     f:ccflag,X      ; store in page 2
00257E  1  CA                   DEX                     ; decrement count
00257F  1  10 F6                BPL     LAB_2D13        ; loop if not done
002581  1               
002581  1  A2 FF                LDX     #$FF            ; set byte
002583  1  86 88                STX     <Clineh         ; set current line high byte (set immediate mode)
002585  1               
002585  1  A9 4C                LDA     #$4C            ; code for JMP
002587  1  85 A1                STA     <Fnxjmp         ; save for jump vector for functions
002589  1               
002589  1               ; copy block from LAB_2CEE to $00BC - $00E0
002589  1               
002589  1  A0 1D                LDY     #LAB_2CEE_END-LAB_2CEE; set byte count
00258B  1               LAB_2D4E:
00258B  1  BE 02 10             LDX     LAB_2CEE-1,Y    ; get byte from table
00258E  1  96 BB                STX     <LAB_IGBY-1,Y   ; save byte in page zero
002590  1  88                   DEY                     ; decrement count
002591  1  D0 F8                BNE     LAB_2D4E        ; loop if not all done
002593  1               
002593  1               ; copy block from StrTab to $0000 - $0012
002593  1               
002593  1               LAB_GMEM:
002593  1  A0 12                LDY     #EndTab-StrTab-1; set byte count-1
002595  1               TabLoop:
002595  1  BE 20 10             LDX     StrTab,Y        ; get byte from table
002598  1  96 00                STX     <PLUS_0,Y       ; save byte in page zero
00259A  1  88                   DEY                     ; decrement count
00259B  1  10 F8                BPL     TabLoop         ; loop if not all done
00259D  1               
00259D  1               ; set-up start values
00259D  1  A9 02                LDA     #DATABANK       ; SET DATA BANK = TO DATA BANK, ALL PROGRAM DATA IN THIS AREA
00259F  1  85 C5                STA     <Bpntrp         ; SET LAB_GBYT PAGE POINTER TO DATA BANK
0025A1  1  48                   PHA
0025A2  1  AB                   PLB
0025A3  1               
0025A3  1  A9 00                LDA     #$00            ; clear A
0025A5  1  85 E5                STA     <NmiBase        ; clear NMI handler enabled flag
0025A7  1  85 E8                STA     <IrqBase        ; clear IRQ handler enabled flag
0025A9  1  85 B2                STA     <FAC1_o         ; clear FAC1 overflow byte
0025AB  1  85 67                STA     <last_sh        ; clear descriptor stack top item pointer high byte
0025AD  1               
0025AD  1  A9 0E                LDA     #$0E            ; set default tab size
0025AF  1  85 64                STA     <TabSiz         ; save it
0025B1  1  A9 03                LDA     #$03            ; set garbage collect step size for descriptor stack
0025B3  1  85 A0                STA     <g_step         ; save it
0025B5  1  A2 68                LDX     #<des_sk        ; descriptor stack start
0025B7  1  86 65                STX     <next_s         ; set descriptor stack pointer
0025B9  1               
0025B9  1  A9 00                LDA     #<Ram_top
0025BB  1  A0 FF                LDY     #>Ram_top
0025BD  1  85 85                STA     <Ememl          ; set end of mem low byte
0025BF  1  84 86                STY     <Ememh          ; set end of mem high byte
0025C1  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
0025C3  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
0025C5  1               
0025C5  1  A0 00                LDY     #<Ram_base      ; set start addr low byte
0025C7  1  A2 22                LDX     #>Ram_base      ; set start addr high byte
0025C9  1  84 79                STY     <Smeml          ; save start of mem low byte
0025CB  1  86 7A                STX     <Smemh          ; save start of mem high byte
0025CD  1               
0025CD  1  98                   TYA                     ; clear A
0025CE  1  91 79                STA     (<Smeml),Y      ; clear first byte
0025D0  1  E6 79                INC     <Smeml          ; increment start of mem low byte
0025D2  1               
0025D2  1               ; DO TITLE SCREEN
0025D2  1  20 4C 23             JSR     TitleScreen
0025D5  1  20 2E 2F             JSR     LAB_CRLF        ; print CR/LF
0025D8  1  20 FB 28             JSR     LAB_1463        ; do "NEW" and "CLEAR"
0025DB  1  A5 85                LDA     <Ememl          ; get end of mem low byte
0025DD  1  38                   SEC                     ; set carry for subtract
0025DE  1  E5 79                SBC     <Smeml          ; subtract start of mem low byte
0025E0  1  AA                   TAX                     ; copy to X
0025E1  1  A5 86                LDA     <Ememh          ; get end of mem high byte
0025E3  1  E5 7A                SBC     <Smemh          ; subtract start of mem high byte
0025E5  1  20 94 46             JSR     LAB_295E        ; print XA as unsigned integer (bytes free)
0025E8  1  A9 02                LDA     #<LAB_SMSG      ; point to sign-on message (low addr)
0025EA  1  A0 16                LDY     #>LAB_SMSG      ; point to sign-on message (high addr)
0025EC  1  20 76 2F             JSR     LAB_18C3        ; print null terminated string from memory
0025EF  1  A9 F3                LDA     #<LAB_1274      ; warm start vector low byte
0025F1  1  A0 26                LDY     #>LAB_1274      ; warm start vector high byte
0025F3  1  85 01                STA     <Wrmjpl         ; save warm start vector low byte
0025F5  1  84 02                STY     <Wrmjph         ; save warm start vector high byte
0025F7  1  6C 01 00             JMP     (Wrmjpl)        ; go do warm start
0025FA  1               
0025FA  1               ; open up space in memory
0025FA  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
0025FA  1               
0025FA  1               ; <Nbendl,<Nbendh - new block end address (A/Y)
0025FA  1               ; <Obendl,<Obendh - old block end address
0025FA  1               ; <Ostrtl,<Ostrth - old block start address
0025FA  1               
0025FA  1               ; returns with ..
0025FA  1               
0025FA  1               ; <Nbendl,<Nbendh - new block start address (high byte - $100)
0025FA  1               ; <Obendl,<Obendh - old block start address (high byte - $100)
0025FA  1               ; <Ostrtl,<Ostrth - old block start address (unchanged)
0025FA  1               
0025FA  1               LAB_11CF:
0025FA  1  20 A4 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
0025FD  1               ; addr to check is in AY (low/high)
0025FD  1  85 7F                STA     <Earryl         ; save new array mem end low byte
0025FF  1  84 80                STY     <Earryh         ; save new array mem end high byte
002601  1               
002601  1               ; open up space in memory
002601  1               ; move (<Ostrtl)-(<Obendl) to new block ending at (<Nbendl)
002601  1               ; don't set array end
002601  1               
002601  1               LAB_11D6:
002601  1  38                   SEC                     ; set carry for subtract
002602  1  A5 A6                LDA     <Obendl         ; get block end low byte
002604  1  E5 AA                SBC     <Ostrtl         ; subtract block start low byte
002606  1  A8                   TAY                     ; copy MOD(block length/$100) byte to Y
002607  1  A5 A7                LDA     <Obendh         ; get block end high byte
002609  1  E5 AB                SBC     <Ostrth         ; subtract block start high byte
00260B  1  AA                   TAX                     ; copy block length high byte to X
00260C  1  E8                   INX                     ; +1 to allow for count=0 exit
00260D  1  98                   TYA                     ; copy block length low byte to A
00260E  1  F0 74                BEQ     LAB_120A        ; branch if length low byte=0
002610  1               
002610  1               ; block is (X-1)*256+Y bytes, do the Y bytes first
002610  1               
002610  1  38                   SEC                     ; set carry for add + 1, two's complement
002611  1  49 FF                EOR     #$FF            ; invert low byte for subtract
002613  1  65 A6                ADC     <Obendl         ; add block end low byte
002615  1               
002615  1  85 A6                STA     <Obendl         ; save corrected old block end low byte
002617  1  B0 03                BCS     LAB_11F3        ; branch if no underflow
002619  1               
002619  1  C6 A7                DEC     <Obendh         ; else decrement block end high byte
00261B  1  38                   SEC                     ; set carry for add + 1, two's complement
00261C  1               LAB_11F3:
00261C  1  98                   TYA                     ; get MOD(block length/$100) byte
00261D  1  49 FF                EOR     #$FF            ; invert low byte for subtract
00261F  1  65 A4                ADC     <Nbendl         ; add destination end low byte
002621  1  85 A4                STA     <Nbendl         ; save modified new block end low byte
002623  1  B0 30                BCS     LAB_1203        ; branch if no underflow
002625  1               
002625  1  C6 A5                DEC     <Nbendh         ; else decrement block end high byte
002627  1  90 2C                BCC     LAB_1203        ; branch always
002629  1               
002629  1               LAB_11FF:
002629  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
00262D  1  B5 A6 C9 00  
002631  1  D0 04 A2 00  
00263F  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; copy byte to destination
002643  1  01 B5 A4 C9  
002647  1  00 D0 04 A2  
002655  1               LAB_1203:
002655  1  88                   DEY                     ; decrement index
002656  1  D0 D1                BNE     LAB_11FF        ; loop until Y=0
002658  1               
002658  1               ; now do Y=0 indexed byte
002658  1  8B DA A2 01          LDAINDIRECTY Obendl     ; get byte from source
00265C  1  B5 A6 C9 00  
002660  1  D0 04 A2 00  
00266E  1  8B DA 48 A2          STAINDIRECTY Nbendl     ; save byte to destination
002672  1  01 B5 A4 C9  
002676  1  00 D0 04 A2  
002684  1               LAB_120A:
002684  1  C6 A7                DEC     <Obendh         ; decrement source pointer high byte
002686  1  C6 A5                DEC     <Nbendh         ; decrement destination pointer high byte
002688  1  CA                   DEX                     ; decrement block count
002689  1  D0 CA                BNE     LAB_1203        ; loop until count = $0
00268B  1               
00268B  1  60                   RTS
00268C  1               
00268C  1               ; check room on stack for A bytes
00268C  1               ; stack too deep? do OM error
00268C  1               LAB_1212:
00268C  1  C2 20                ACCUMULATOR16
00268E  1  29 FF 00             AND     #$00FF
002691  1  18                   CLC
002692  1  69 00 B0             ADC     #STACK_BOTTOM
002695  1  85 FD                STA     <TEMPW
002697  1  3B                   TSC
002698  1  C5 FD                CMP     <TEMPW
00269A  1  90 03                BCC     LAB_1213        ; if stack < limit do "Out of memory" error then warm start
00269C  1  E2 20                ACCUMULATOR8
00269E  1  60                   RTS
00269F  1               LAB_1213:
00269F  1  E2 20                ACCUMULATOR8
0026A1  1  4C D3 26             JMP     LAB_OMER
0026A4  1               
0026A4  1               ; check available memory, "Out of memory" error if no room
0026A4  1               ; addr to check is in AY (low/high)
0026A4  1               
0026A4  1               LAB_121F:
0026A4  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
0026A6  1  90 2A                BCC     LAB_124B        ; if less then exit (is ok)
0026A8  1               
0026A8  1  D0 04                BNE     LAB_1229        ; skip next test if greater (tested <)
0026AA  1               
0026AA  1               ; high byte was =, now do low byte
0026AA  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
0026AC  1  90 24                BCC     LAB_124B        ; if less then exit (is ok)
0026AE  1               
0026AE  1               ; addr is > string storage ptr (oops!)
0026AE  1               LAB_1229:
0026AE  1  48                   PHA                     ; push addr low byte
0026AF  1  A2 08                LDX     #$08            ; set index to save <Adatal to <expneg inclusive
0026B1  1  98                   TYA                     ; copy addr high byte (to push on stack)
0026B2  1               
0026B2  1               ; save misc numeric work area
0026B2  1               LAB_122D:
0026B2  1  48                   PHA                     ; push byte
0026B3  1  B5 A3                LDA     <Adatal-1,X     ; get byte from <Adatal to <expneg ( ,$00 not pushed)
0026B5  1  CA                   DEX                     ; decrement index
0026B6  1  10 FA                BPL     LAB_122D        ; loop until all done
0026B8  1               
0026B8  1  20 DC 39             JSR     LAB_GARB        ; garbage collection routine
0026BB  1               
0026BB  1               ; restore misc numeric work area
0026BB  1  A2 00                LDX     #$00            ; clear the index to restore bytes
0026BD  1               LAB_1238:
0026BD  1  68                   PLA                     ; pop byte
0026BE  1  95 A4                STA     <Adatal,X       ; save byte to <Adatal to <expneg
0026C0  1  E8                   INX                     ; increment index
0026C1  1  E0 08                CPX     #$08            ; compare with end + 1
0026C3  1  30 F8                BMI     LAB_1238        ; loop if more to do
0026C5  1               
0026C5  1  68                   PLA                     ; pop addr high byte
0026C6  1  A8                   TAY                     ; copy back to Y
0026C7  1  68                   PLA                     ; pop addr low byte
0026C8  1  C4 82                CPY     <Sstorh         ; compare bottom of string mem high byte
0026CA  1  90 06                BCC     LAB_124B        ; if less then exit (is ok)
0026CC  1               
0026CC  1  D0 05                BNE     LAB_OMER        ; if greater do "Out of memory" error then warm start
0026CE  1               
0026CE  1               ; high byte was =, now do low byte
0026CE  1  C5 81                CMP     <Sstorl         ; compare with bottom of string mem low byte
0026D0  1  B0 01                BCS     LAB_OMER        ; if >= do "Out of memory" error then warm start
0026D2  1               
0026D2  1               ; ok exit, carry clear
0026D2  1               LAB_124B:
0026D2  1  60                   RTS
0026D3  1               
0026D3  1               ; do "Out of memory" error then warm start
0026D3  1               
0026D3  1               LAB_OMER:
0026D3  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
0026D5  1               
0026D5  1               ; do error #X, then warm start
0026D5  1               
0026D5  1               LAB_XERR:
0026D5  1  20 2E 2F             JSR     LAB_CRLF        ; print CR/LF
0026D8  1               
0026D8  1               ;        LDA     <VIDEOMODE
0026D8  1               ;        CMP     #2
0026D8  1               ;        BEQ     LAB_XERRA
0026D8  1               ;        PHX
0026D8  1               ;        LDX     #2
0026D8  1               ;        JSR     V_SCREEN1
0026D8  1               ;        PLX
0026D8  1               ;LAB_XERRA:
0026D8  1  BD 50 16             LDA     LAB_BAER,X      ; get error message pointer low byte
0026DB  1  BC 51 16             LDY     LAB_BAER+1,X    ; get error message pointer high byte
0026DE  1  20 76 2F             JSR     LAB_18C3        ; print null terminated string from memory
0026E1  1               
0026E1  1  20 34 29             JSR     LAB_1491        ; flush stack and clear continue flag
0026E4  1  A9 8D                LDA     #<LAB_EMSG      ; point to " Error" low addr
0026E6  1  A0 17                LDY     #>LAB_EMSG      ; point to " Error" high addr
0026E8  1               LAB_1269:
0026E8  1  20 76 2F             JSR     LAB_18C3        ; print null terminated string from memory
0026EB  1  A4 88                LDY     <Clineh         ; get current line high byte
0026ED  1  C8                   INY                     ; increment it
0026EE  1  F0 03                BEQ     LAB_1274        ; go do warm start (was immediate mode)
0026F0  1               
0026F0  1               ; else print line number
0026F0  1  20 89 46             JSR     LAB_2953        ; print " in line [LINE #]"
0026F3  1               
0026F3  1               ; BASIC warm start entry point
0026F3  1               ; wait for Basic command
0026F3  1               
0026F3  1               LAB_1274:
0026F3  1               ;        LDA     <VIDEOMODE
0026F3  1               ;        CMP     #2
0026F3  1               ;        BEQ     LAB_1274a
0026F3  1               ;        LDX     #2
0026F3  1               ;        JSR     V_SCREEN1
0026F3  1               ;LAB_1274a:
0026F3  1               ; clear ON IRQ/NMI bytes
0026F3  1  A9 00                LDA     #$00            ; clear A
0026F5  1  85 E8                STA     <IrqBase        ; clear enabled byte
0026F7  1  85 E5                STA     <NmiBase        ; clear enabled byte
0026F9  1  A9 9E                LDA     #<LAB_RMSG      ; point to "Ready" message low byte
0026FB  1  A0 17                LDY     #>LAB_RMSG      ; point to "Ready" message high byte
0026FD  1               
0026FD  1  20 76 2F             JSR     LAB_18C3        ; go do print string
002700  1               
002700  1               ; wait for Basic command (no "Ready")
002700  1               
002700  1               LAB_127D:
002700  1  20 E5 27             JSR     LAB_1357        ; call for BASIC input
002703  1               LAB_1280:
002703  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
002705  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
002707  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00270B  1  F0 F3                BEQ     LAB_127D        ; loop while null
00270D  1               
00270D  1               ; got to interpret input line now ..
00270D  1               
00270D  1  A2 FF                LDX     #$FF            ; current line to null value
00270F  1  86 88                STX     <Clineh         ; set current line high byte
002711  1  90 06                BCC     LAB_1295        ; branch if numeric character (handle new BASIC line)
002713  1               
002713  1               ; no line number .. immediate mode
002713  1  20 26 28             JSR     LAB_13A6        ; crunch keywords into Basic tokens
002716  1  4C A9 2A             JMP     LAB_15F6        ; go scan and interpret code
002719  1               
002719  1               ; handle new BASIC line
002719  1               
002719  1               LAB_1295:
002719  1               
002719  1  20 0F 2D             JSR     LAB_GFPN        ; get fixed-point number into temp integer
00271C  1  20 26 28             JSR     LAB_13A6        ; crunch keywords into Basic tokens
00271F  1  84 5D                STY     <Ibptr          ; save index pointer to end of crunched line
002721  1  20 CF 28             JSR     LAB_SSLN        ; search BASIC for temp integer line number
002724  1  90 44                BCC     LAB_12E6        ; branch if not found
002726  1               
002726  1               ; aroooogah! line # already exists! delete it
002726  1  A0 01                LDY     #$01            ; set index to next line pointer high byte
002728  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
00272A  1  85 72                STA     <ut1_ph         ; save it
00272C  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
00272E  1  85 71                STA     <ut1_pl         ; save it
002730  1  A5 AB                LDA     <Baslnh         ; get found line pointer high byte
002732  1  85 74                STA     <ut2_ph         ; save it
002734  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
002736  1  88                   DEY                     ; decrement index
002737  1  F1 AA                SBC     (<Baslnl),Y     ; subtract next line pointer low byte
002739  1  18                   CLC                     ; clear carry for add
00273A  1  65 7B                ADC     <Svarl          ; add start of vars low byte
00273C  1  85 7B                STA     <Svarl          ; save new start of vars low byte
00273E  1  85 73                STA     <ut2_pl         ; save destination pointer low byte
002740  1  A5 7C                LDA     <Svarh          ; get start of vars high byte
002742  1  69 FF                ADC     #$FF            ; -1 + carry
002744  1  85 7C                STA     <Svarh          ; save start of vars high byte
002746  1  E5 AB                SBC     <Baslnh         ; subtract found line pointer high byte
002748  1  AA                   TAX                     ; copy to block count
002749  1  38                   SEC                     ; set carry for subtract
00274A  1  A5 AA                LDA     <Baslnl         ; get found line pointer low byte
00274C  1  E5 7B                SBC     <Svarl          ; subtract start of vars low byte
00274E  1  A8                   TAY                     ; copy to bytes in first block count
00274F  1  B0 03                BCS     LAB_12D0        ; branch if overflow
002751  1               
002751  1  E8                   INX                     ; increment block count (correct for =0 loop exit)
002752  1  C6 74                DEC     <ut2_ph         ; decrement destination high byte
002754  1               LAB_12D0:
002754  1  18                   CLC                     ; clear carry for add
002755  1  65 71                ADC     <ut1_pl         ; add source pointer low byte
002757  1  90 03                BCC     LAB_12D8        ; branch if no overflow
002759  1               
002759  1  C6 72                DEC     <ut1_ph         ; else decrement source pointer high byte
00275B  1  18                   CLC                     ; clear carry
00275C  1               
00275C  1               ; close up memory to delete old line
00275C  1               LAB_12D8:
00275C  1  B1 71                LDA     (<ut1_pl),Y     ; get byte from source
00275E  1  91 73                STA     (<ut2_pl),Y     ; copy to destination
002760  1  C8                   INY                     ; increment index
002761  1  D0 F9                BNE     LAB_12D8        ; while <> 0 do this block
002763  1               
002763  1  E6 72                INC     <ut1_ph         ; increment source pointer high byte
002765  1  E6 74                INC     <ut2_ph         ; increment destination pointer high byte
002767  1  CA                   DEX                     ; decrement block count
002768  1  D0 F2                BNE     LAB_12D8        ; loop until all done
00276A  1               
00276A  1               ; got new line in buffer and no existing same #
00276A  1               LAB_12E6:
00276A  1  AD 81 21             LDA     Ibuffs          ; get byte from start of input buffer
00276D  1  F0 3F                BEQ     LAB_1319        ; if null line just go flush stack/vars and exit
00276F  1               
00276F  1               ; got new line and it isn't empty line
00276F  1  A5 85                LDA     <Ememl          ; get end of mem low byte
002771  1  A4 86                LDY     <Ememh          ; get end of mem high byte
002773  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
002775  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002777  1  A5 7B                LDA     <Svarl          ; get start of vars low byte	(end of BASIC)
002779  1  85 A6                STA     <Obendl         ; save old block end low byte
00277B  1  A4 7C                LDY     <Svarh          ; get start of vars high byte	(end of BASIC)
00277D  1  84 A7                STY     <Obendh         ; save old block end high byte
00277F  1  65 5D                ADC     <Ibptr          ; add input buffer pointer	(also buffer length)
002781  1  90 01                BCC     LAB_1301        ; branch if no overflow from add
002783  1               
002783  1  C8                   INY                     ; else increment high byte
002784  1               LAB_1301:
002784  1  85 A4                STA     <Nbendl         ; save new block end low byte	(move to, low byte)
002786  1  84 A5                STY     <Nbendh         ; save new block end high byte
002788  1  20 FA 25             JSR     LAB_11CF        ; open up space in memory
00278B  1               ; old start pointer <Ostrtl,<Ostrth set by the find line call
00278B  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
00278D  1  A4 80                LDY     <Earryh         ; get array mem end high byte
00278F  1  85 7B                STA     <Svarl          ; save start of vars low byte
002791  1  84 7C                STY     <Svarh          ; save start of vars high byte
002793  1  A4 5D                LDY     <Ibptr          ; get input buffer pointer	(also buffer length)
002795  1  88                   DEY                     ; adjust for loop type
002796  1               LAB_1311:
002796  1  B9 7D 21             LDA     Ibuffs-4,Y      ; get byte from crunched line
002799  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
00279B  1  88                   DEY                     ; decrement count
00279C  1  C0 03                CPY     #$03            ; compare with first byte-1
00279E  1  D0 F6                BNE     LAB_1311        ; continue while count <> 3
0027A0  1               
0027A0  1  A5 12                LDA     <Itemph         ; get line # high byte
0027A2  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
0027A4  1  88                   DEY                     ; decrement count
0027A5  1  A5 11                LDA     <Itempl         ; get line # low byte
0027A7  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
0027A9  1  88                   DEY                     ; decrement count
0027AA  1  A9 FF                LDA     #$FF            ; set byte to allow chain rebuild. if you didn't set this
0027AC  1               ; byte then a zero already here would stop the chain rebuild
0027AC  1               ; as it would think it was the [EOT] marker.
0027AC  1  91 AA                STA     (<Baslnl),Y     ; save it to program memory
0027AE  1               
0027AE  1               LAB_1319:
0027AE  1  20 10 29             JSR     LAB_1477        ; reset execution to start, clear vars and flush stack
0027B1  1  A6 79                LDX     <Smeml          ; get start of mem low byte
0027B3  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
0027B5  1  A0 01                LDY     #$01            ; index to high byte of next line pointer
0027B7  1               LAB_1325:
0027B7  1  86 71                STX     <ut1_pl         ; set line start pointer low byte
0027B9  1  85 72                STA     <ut1_ph         ; set line start pointer high byte
0027BB  1  B1 71                LDA     (<ut1_pl),Y     ; get it
0027BD  1  F0 18                BEQ     LAB_133E        ; exit if end of program
0027BF  1               
0027BF  1               ; rebuild chaining of Basic lines
0027BF  1               
0027BF  1  A0 04                LDY     #$04            ; point to first code byte of line
0027C1  1               ; there is always 1 byte + [EOL] as null entries are deleted
0027C1  1               LAB_1330:
0027C1  1  C8                   INY                     ; next code byte
0027C2  1  B1 71                LDA     (<ut1_pl),Y     ; get byte
0027C4  1  D0 FB                BNE     LAB_1330        ; loop if not [EOL]
0027C6  1               
0027C6  1  38                   SEC                     ; set carry for add + 1
0027C7  1  98                   TYA                     ; copy end index
0027C8  1  65 71                ADC     <ut1_pl         ; add to line start pointer low byte
0027CA  1  AA                   TAX                     ; copy to X
0027CB  1  A0 00                LDY     #$00            ; clear index, point to this line's next line pointer
0027CD  1  91 71                STA     (<ut1_pl),Y     ; set next line pointer low byte
0027CF  1  98                   TYA                     ; clear A
0027D0  1  65 72                ADC     <ut1_ph         ; add line start pointer high byte + carry
0027D2  1  C8                   INY                     ; increment index to high byte
0027D3  1  91 71                STA     (<ut1_pl),Y     ; save next line pointer low byte
0027D5  1  90 E0                BCC     LAB_1325        ; go do next line, branch always, carry clear
0027D7  1               
0027D7  1               
0027D7  1               LAB_133E:
0027D7  1  4C 00 27             JMP     LAB_127D        ; else we just wait for Basic command, no "Ready"
0027DA  1               
0027DA  1               ; print "? " and get BASIC input
0027DA  1               
0027DA  1               LAB_INLN:
0027DA  1               ;JSR	LAB_18E3		; print "?" character
0027DA  1  20 9F 2F             JSR     LAB_18E0        ; print " "
0027DD  1  D0 18                BNE     SimpleSerialEditor; call for BASIC input and return
0027DF  1               
0027DF  1               ; receive line from keyboard
0027DF  1               
0027DF  1               ; $08 as delete key (BACKSPACE on standard keyboard)
0027DF  1               LAB_134B:
0027DF  1  20 A4 2F             JSR     LAB_PRNA        ; go print the character
0027E2  1  CA                   DEX                     ; decrement the buffer counter (delete)
0027E3  1  80 14                BRA     LAB_1359
0027E5  1               
0027E5  1               ; call for BASIC input (main entry point)
0027E5  1               LAB_1357:
0027E5  1  AF 41 03 00          LDA     f:ConsoleDevice
0027E9  1  C9 00                CMP     #$00
0027EB  1  F0 0A                BEQ     SimpleSerialEditor
0027ED  1               ;	do screen editor
0027ED  1  20 75 23             JSR     ScreenEditor
0027F0  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
0027F2  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
0027F4  1  A9 00                LDA     #$00
0027F6  1  60                   RTS
0027F7  1               
0027F7  1               SimpleSerialEditor:
0027F7  1  A2 00                LDX     #$00            ; clear BASIC line buffer pointer
0027F9  1               LAB_1359:
0027F9  1  20 84 18             JSR     V_INPT          ; call scan input device
0027FC  1  B0 FB                BCS     LAB_1359        ; loop if no byte
0027FE  1               ;BEQ	LAB_1359		; loop until valid input (ignore NULLs)
0027FE  1               
0027FE  1  C9 07                CMP     #$07            ; compare with [BELL]
002800  1  F0 10                BEQ     LAB_1378        ; branch if [BELL]
002802  1               
002802  1  C9 0D                CMP     #$0D            ; compare with [CR]
002804  1  F0 19                BEQ     LAB_1384        ; do CR/LF exit if [CR]
002806  1               
002806  1  E0 00                CPX     #$00            ; compare pointer with $00
002808  1  D0 04                BNE     LAB_1374        ; branch if not empty
00280A  1               
00280A  1               ; next two lines ignore any non print character and [SPACE] if input buffer empty
00280A  1               
00280A  1  C9 21                CMP     #$21            ; compare with [SP]+1
00280C  1  90 EB                BCC     LAB_1359        ; if < ignore character
00280E  1               
00280E  1               LAB_1374:
00280E  1  C9 08                CMP     #$08            ; compare with [BACKSPACE] (delete last character)
002810  1  F0 CD                BEQ     LAB_134B        ; go delete last character
002812  1               
002812  1               LAB_1378:
002812  1  E0 50                CPX     #Ibuffe-Ibuffs  ; compare character count with max
002814  1  B0 0C                BCS     LAB_138E        ; skip store and do [BELL] if buffer full
002816  1               
002816  1  9D 81 21             STA     Ibuffs,X        ; else store in buffer
002819  1  E8                   INX                     ; increment pointer
00281A  1               LAB_137F:
00281A  1  20 A4 2F             JSR     LAB_PRNA        ; go print the character
00281D  1  D0 DA                BNE     LAB_1359        ; always loop for next character
00281F  1               
00281F  1               LAB_1384:
00281F  1  4C 25 2F             JMP     LAB_1866        ; do CR/LF exit to BASIC
002822  1               
002822  1               ; announce buffer full
002822  1               
002822  1               LAB_138E:
002822  1  A9 07                LDA     #$07            ; [BELL] character into A
002824  1  D0 F4                BNE     LAB_137F        ; go print the [BELL] but ignore input character
002826  1               ; branch always
002826  1               
002826  1               ; crunch keywords into Basic tokens
002826  1               ; position independent buffer version ..
002826  1               ; faster, dictionary search version ....
002826  1               
002826  1               LAB_13A6:
002826  1  A0 FF                LDY     #$FF            ; set save index (makes for easy math later)
002828  1               
002828  1  38                   SEC                     ; set carry for subtract
002829  1  A5 C3                LDA     <Bpntrl         ; get basic execute pointer low byte
00282B  1  E9 81                SBC     #<Ibuffs        ; subtract input buffer start pointer
00282D  1  AA                   TAX                     ; copy result to X (index past line # if any)
00282E  1               
00282E  1  86 60                STX     <Oquote         ; clear open quote/DATA flag
002830  1               LAB_13AC:
002830  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
002833  1  F0 51                BEQ     LAB_13EC        ; if null save byte then exit
002835  1               
002835  1  C9 5F                CMP     #'_'            ; compare with "_"
002837  1  B0 4D                BCS     LAB_13EC        ; if >= go save byte then continue crunching
002839  1               
002839  1  C9 3C                CMP     #'<'            ; compare with "<"
00283B  1  B0 0E                BCS     LAB_13CC        ; if >= go crunch now
00283D  1               
00283D  1  C9 30                CMP     #'0'            ; compare with "0"
00283F  1  B0 45                BCS     LAB_13EC        ; if >= go save byte then continue crunching
002841  1               
002841  1  85 5C                STA     <Scnquo         ; save buffer byte as search character
002843  1  C9 22                CMP     #$22            ; is it quote character?
002845  1  F0 64                BEQ     LAB_1410        ; branch if so (copy quoted string)
002847  1               
002847  1  C9 2A                CMP     #'*'            ; compare with "*"
002849  1  90 3B                BCC     LAB_13EC        ; if < go save byte then continue crunching
00284B  1               
00284B  1               ; else crunch now
00284B  1               LAB_13CC:
00284B  1  24 60                BIT     <Oquote         ; get open quote/DATA token flag
00284D  1  70 37                BVS     LAB_13EC        ; branch if b6 of <Oquote set (was DATA)
00284F  1               ; go save byte then continue crunching
00284F  1               
00284F  1  86 78                STX     <TempB          ; save buffer read index
002851  1  84 BA                STY     <csidx          ; copy buffer save index
002853  1  A0 67                LDY     #<TAB_1STC      ; get keyword first character table low address
002855  1  84 73                STY     <ut2_pl         ; save pointer low byte
002857  1  A0 11                LDY     #>TAB_1STC      ; get keyword first character table high address
002859  1  84 74                STY     <ut2_ph         ; save pointer high byte
00285B  1  A0 00                LDY     #$00            ; clear table pointer
00285D  1               
00285D  1               LAB_13D0:
00285D  1  D1 73                CMP     (<ut2_pl),Y     ; compare with keyword first character table byte
00285F  1  F0 05                BEQ     LAB_13D1        ; go do word_table_chr if match
002861  1               
002861  1  90 21                BCC     LAB_13EA        ; if < keyword first character table byte go restore
002863  1               ; Y and save to crunched
002863  1               
002863  1  C8                   INY                     ; else increment pointer
002864  1  D0 F7                BNE     LAB_13D0        ; and loop (branch always)
002866  1               
002866  1               ; have matched first character of some keyword
002866  1               
002866  1               LAB_13D1:
002866  1  98                   TYA                     ; copy matching index
002867  1  0A                   ASL     A               ; *2 (bytes per pointer)
002868  1  AA                   TAX                     ; copy to new index
002869  1  BD 86 11             LDA     TAB_CHRT,X      ; get keyword table pointer low byte
00286C  1  85 73                STA     <ut2_pl         ; save pointer low byte
00286E  1  BD 87 11             LDA     TAB_CHRT+1,X    ; get keyword table pointer high byte
002871  1  85 74                STA     <ut2_ph         ; save pointer high byte
002873  1               
002873  1  A0 FF                LDY     #$FF            ; clear table pointer (make -1 for start)
002875  1               
002875  1  A6 78                LDX     <TempB          ; restore buffer read index
002877  1               
002877  1               LAB_13D6:
002877  1  C8                   INY                     ; next table byte
002878  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from table
00287A  1               LAB_13D8:
00287A  1  30 08                BMI     LAB_13EA        ; all bytes matched so go save token
00287C  1               
00287C  1  E8                   INX                     ; next buffer byte
00287D  1  DD 81 21             CMP     Ibuffs,X        ; compare with byte from input buffer
002880  1  F0 F5                BEQ     LAB_13D6        ; go compare next if match
002882  1               
002882  1  D0 2E                BNE     LAB_1417        ; branch if >< (not found keyword)
002884  1               
002884  1               LAB_13EA:
002884  1  A4 BA                LDY     <csidx          ; restore save index
002886  1               
002886  1               ; save crunched to output
002886  1               LAB_13EC:
002886  1  E8                   INX                     ; increment buffer index (to next input byte)
002887  1  C8                   INY                     ; increment save index (to next output byte)
002888  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
00288B  1  C9 00                CMP     #$00            ; set the flags, set carry
00288D  1  F0 35                BEQ     LAB_142A        ; do exit if was null [EOL]
00288F  1               
00288F  1               ; A holds token or byte here
00288F  1  E9 3A                SBC     #':'            ; subtract ":" (carry set by CMP #00)
002891  1  F0 04                BEQ     LAB_13FF        ; branch if it was ":" (is now $00)
002893  1               
002893  1               ; A now holds token-$3A
002893  1  C9 49                CMP     #TK_DATA-$3A    ; compare with DATA token - $3A
002895  1  D0 02                BNE     LAB_1401        ; branch if not DATA
002897  1               
002897  1               ; token was : or DATA
002897  1               LAB_13FF:
002897  1  85 60                STA     <Oquote         ; save token-$3A (clear for ":", TK_DATA-$3A for DATA)
002899  1               LAB_1401:
002899  1  49 57                EOR     #TK_REM-$3A     ; effectively subtract REM token offset
00289B  1  F0 03                BEQ     LAB_1401_A
00289D  1  4C 30 28             JMP     LAB_13AC        ; If wasn't REM then go crunch rest of line
0028A0  1               
0028A0  1               LAB_1401_A:
0028A0  1  85 5C                STA     <Asrch          ; else was REM so set search for [EOL]
0028A2  1               
0028A2  1               ; loop for REM, "..." etc.
0028A2  1               LAB_1408:
0028A2  1  BD 81 21             LDA     Ibuffs,X        ; get byte from input buffer
0028A5  1  F0 DF                BEQ     LAB_13EC        ; branch if null [EOL]
0028A7  1               
0028A7  1  C5 5C                CMP     <Asrch          ; compare with stored character
0028A9  1  F0 DB                BEQ     LAB_13EC        ; branch if match (end quote)
0028AB  1               
0028AB  1               ; entry for copy string in quotes, don't crunch
0028AB  1               LAB_1410:
0028AB  1  C8                   INY                     ; increment buffer save index
0028AC  1  99 81 21             STA     Ibuffs,Y        ; save byte to output
0028AF  1  E8                   INX                     ; increment buffer read index
0028B0  1  D0 F0                BNE     LAB_1408        ; loop while <> 0 (should never be 0!)
0028B2  1               
0028B2  1               ; not found keyword this go
0028B2  1               LAB_1417:
0028B2  1  A6 78                LDX     <TempB          ; compare has failed, restore buffer index (start byte!)
0028B4  1               
0028B4  1               ; now find the end of this word in the table
0028B4  1               LAB_141B:
0028B4  1  B1 73                LDA     (<ut2_pl),Y     ; get table byte
0028B6  1  08                   PHP                     ; save status
0028B7  1  C8                   INY                     ; increment table index
0028B8  1  28                   PLP                     ; restore byte status
0028B9  1  10 F9                BPL     LAB_141B        ; if not end of keyword go do next
0028BB  1               
0028BB  1  B1 73                LDA     (<ut2_pl),Y     ; get byte from keyword table
0028BD  1  D0 BB                BNE     LAB_13D8        ; go test next word if not zero byte (end of table)
0028BF  1               
0028BF  1               ; reached end of table with no match
0028BF  1  BD 81 21             LDA     Ibuffs,X        ; restore byte from input buffer
0028C2  1  10 C0                BPL     LAB_13EA        ; branch always (all bytes in buffer are $00-$7F)
0028C4  1               ; go save byte in output and continue crunching
0028C4  1               
0028C4  1               ; reached [EOL]
0028C4  1               LAB_142A:
0028C4  1  C8                   INY                     ; increment pointer
0028C5  1  C8                   INY                     ; increment pointer (makes it next line pointer high byte)
0028C6  1  99 81 21             STA     Ibuffs,Y        ; save [EOL] (marks [EOT] in immediate mode)
0028C9  1  C8                   INY                     ; adjust for line copy
0028CA  1  C8                   INY                     ; adjust for line copy
0028CB  1  C8                   INY                     ; adjust for line copy
0028CC  1  C6 C3                DEC     <Bpntrl         ; allow for increment (change if buffer starts at $xxFF)
0028CE  1  60                   RTS
0028CF  1               
0028CF  1               ; search Basic for temp integer line number from start of mem
0028CF  1               
0028CF  1               LAB_SSLN:
0028CF  1  A5 79                LDA     <Smeml          ; get start of mem low byte
0028D1  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
0028D3  1               
0028D3  1               ; search Basic for temp integer line number from AX
0028D3  1               ; returns carry set if found
0028D3  1               ; returns <Baslnl/<Baslnh pointer to found or next higher (not found) line
0028D3  1               
0028D3  1               ; old 541 new 507
0028D3  1               
0028D3  1               LAB_SHLN:
0028D3  1  A0 01                LDY     #$01            ; set index
0028D5  1  85 AA                STA     <Baslnl         ; save low byte as current
0028D7  1  86 AB                STX     <Baslnh         ; save high byte as current
0028D9  1  B1 AA                LDA     (<Baslnl),Y     ; get pointer high byte from addr
0028DB  1  F0 1A                BEQ     LAB_145F        ; pointer was zero so we're done, do 'not found' exit
0028DD  1               
0028DD  1  A0 03                LDY     #$03            ; set index to line # high byte
0028DF  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
0028E1  1  88                   DEY                     ; decrement index (point to low byte)
0028E2  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
0028E4  1  D0 04                BNE     LAB_1455        ; if <> skip low byte check
0028E6  1               
0028E6  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
0028E8  1  C5 11                CMP     <Itempl         ; compare with temporary integer low byte
0028EA  1               LAB_1455:
0028EA  1  B0 09                BCS     LAB_145E        ; else if temp < this line, exit (passed line#)
0028EC  1               
0028EC  1               LAB_1456:
0028EC  1  88                   DEY                     ; decrement index to next line ptr high byte
0028ED  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0028EF  1  AA                   TAX                     ; copy to X
0028F0  1  88                   DEY                     ; decrement index to next line ptr low byte
0028F1  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
0028F3  1  90 DE                BCC     LAB_SHLN        ; go search for line # in temp (<Itempl/<Itemph) from AX
0028F5  1               ; (carry always clear)
0028F5  1               
0028F5  1               LAB_145E:
0028F5  1  F0 01                BEQ     LAB_1460        ; exit if temp = found line #, carry is set
0028F7  1               
0028F7  1               LAB_145F:
0028F7  1  18                   CLC                     ; clear found flag
0028F8  1               LAB_1460:
0028F8  1  60                   RTS
0028F9  1               
0028F9  1               ; perform NEW
0028F9  1               
0028F9  1               LAB_NEW:
0028F9  1  D0 FD                BNE     LAB_1460        ; exit if not end of statement (to do syntax error)
0028FB  1               
0028FB  1               LAB_1463:
0028FB  1  A9 00                LDA     #$00            ; clear A
0028FD  1  A8                   TAY                     ; clear Y
0028FE  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, low byte
002900  1  C8                   INY                     ; increment index
002901  1  91 79                STA     (<Smeml),Y      ; clear first line, next line pointer, high byte
002903  1  18                   CLC                     ; clear carry
002904  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002906  1  69 02                ADC     #$02            ; calculate end of BASIC low byte
002908  1  85 7B                STA     <Svarl          ; save start of vars low byte
00290A  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
00290C  1  69 00                ADC     #$00            ; add any carry
00290E  1  85 7C                STA     <Svarh          ; save start of vars high byte
002910  1               
002910  1               ; reset execution to start, clear vars and flush stack
002910  1               
002910  1               LAB_1477:
002910  1  18                   CLC                     ; clear carry
002911  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002913  1  69 FF                ADC     #$FF            ; -1
002915  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002917  1  A5 7A                LDA     <Smemh          ; get start of mem high byte
002919  1  69 FF                ADC     #$FF            ; -1+carry
00291B  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
00291D  1               ; "CLEAR" command gets here
00291D  1               
00291D  1               LAB_147A:
00291D  1  A5 85                LDA     <Ememl          ; get end of mem low byte
00291F  1  A4 86                LDY     <Ememh          ; get end of mem high byte
002921  1  85 81                STA     <Sstorl         ; set bottom of string space low byte
002923  1  84 82                STY     <Sstorh         ; set bottom of string space high byte
002925  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
002927  1  A4 7C                LDY     <Svarh          ; get start of vars high byte
002929  1  85 7D                STA     <Sarryl         ; save var mem end low byte
00292B  1  84 7E                STY     <Sarryh         ; save var mem end high byte
00292D  1  85 7F                STA     <Earryl         ; save array mem end low byte
00292F  1  84 80                STY     <Earryh         ; save array mem end high byte
002931  1  20 FD 2A             JSR     LAB_161A        ; perform RESTORE command
002934  1               
002934  1               ; flush stack and clear continue flag
002934  1               
002934  1               LAB_1491:
002934  1  A2 68                LDX     #<des_sk        ; set descriptor stack pointer
002936  1  86 65                STX     <next_s         ; save descriptor stack pointer
002938  1  C2 30                ACCUMULATORINDEX16
00293A  1  FA                   PLX                     ; pull return address low byte
00293B  1  A9 FF BF             LDA     #STACK          ; get the stack address
00293E  1  1B                   TCS                     ; and set the stack to it
00293F  1  DA                   PHX
002940  1  E2 30                ACCUMULATORINDEX8
002942  1  A9 00                LDA     #$00            ; clear byte
002944  1  85 8C                STA     <Cpntrh         ; clear continue pointer high byte
002946  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
002948  1               LAB_14A6:
002948  1  60                   RTS
002949  1               
002949  1               ; perform CLEAR
002949  1               
002949  1               LAB_CLEAR:
002949  1  F0 D2                BEQ     LAB_147A        ; if no following token go do "CLEAR"
00294B  1               
00294B  1               ; else there was a following token (go do syntax error)
00294B  1  60                   RTS
00294C  1               
00294C  1               ; perform LIST [n][-m]
00294C  1               ; bigger, faster version (a _lot_ faster)
00294C  1               
00294C  1               LAB_LIST:
00294C  1  90 06                BCC     LAB_14BD        ; branch if next character numeric (LIST n..)
00294E  1               
00294E  1  F0 04                BEQ     LAB_14BD        ; branch if next character [NULL] (LIST)
002950  1               
002950  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
002952  1  D0 F4                BNE     LAB_14A6        ; exit if not - (LIST -m)
002954  1               
002954  1               ; LIST [[n][-m]]
002954  1               ; this bit sets the n , if present, as the start and end
002954  1               LAB_14BD:
002954  1  20 0F 2D             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002957  1  20 CF 28             JSR     LAB_SSLN        ; search BASIC for temp integer line number
00295A  1               ; (pointer in <Baslnl/<Baslnh)
00295A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00295E  1  F0 0D                BEQ     LAB_14D4        ; branch if no more characters
002960  1               
002960  1               ; this bit checks the - is present
002960  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
002962  1  D0 61                BNE     LAB_152B        ; return if not "-" (will be Syntax error)
002964  1               
002964  1               ; LIST [n]-m
002964  1               ; the - was there so set m as the end value
002964  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002968  1  20 0F 2D             JSR     LAB_GFPN        ; get fixed-point number into temp integer
00296B  1  D0 58                BNE     LAB_152B        ; exit if not ok
00296D  1               
00296D  1               LAB_14D4:
00296D  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
00296F  1  05 12                ORA     <Itemph         ; OR temporary integer high byte
002971  1  D0 06                BNE     LAB_14E2        ; branch if start set
002973  1               
002973  1  A9 FF                LDA     #$FF            ; set for -1
002975  1  85 11                STA     <Itempl         ; set temporary integer low byte
002977  1  85 12                STA     <Itemph         ; set temporary integer high byte
002979  1               LAB_14E2:
002979  1  A0 01                LDY     #$01            ; set index for line
00297B  1  84 60                STY     <Oquote         ; clear open quote flag
00297D  1  20 2E 2F             JSR     LAB_CRLF        ; print CR/LF
002980  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
002982  1               ; pointer initially set by search at LAB_14BD
002982  1  F0 41                BEQ     LAB_152B        ; if null all done so exit
002984  1  20 CD 2A             JSR     LAB_1629        ; do CRTL-C check vector
002987  1               
002987  1  C8                   INY                     ; increment index for line
002988  1  B1 AA                LDA     (<Baslnl),Y     ; get line # low byte
00298A  1  AA                   TAX                     ; copy to X
00298B  1  C8                   INY                     ; increment index
00298C  1  B1 AA                LDA     (<Baslnl),Y     ; get line # high byte
00298E  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002990  1  D0 04                BNE     LAB_14FF        ; branch if no high byte match
002992  1               
002992  1  E4 11                CPX     <Itempl         ; compare with temporary integer low byte
002994  1  F0 02                BEQ     LAB_1501        ; branch if = last line to do (< will pass next branch)
002996  1               
002996  1               LAB_14FF:                       ; else ..
002996  1  B0 2D                BCS     LAB_152B        ; if greater all done so exit
002998  1               
002998  1               LAB_1501:
002998  1  84 97                STY     <Tidx1          ; save index for line
00299A  1  20 94 46             JSR     LAB_295E        ; print XA as unsigned integer
00299D  1  A9 20                LDA     #$20            ; space is the next character
00299F  1               LAB_1508:
00299F  1  A4 97                LDY     <Tidx1          ; get index for line
0029A1  1  29 7F                AND     #$7F            ; mask top out bit of character
0029A3  1               LAB_150C:
0029A3  1  20 A4 2F             JSR     LAB_PRNA        ; go print the character
0029A6  1  C9 22                CMP     #$22            ; was it " character
0029A8  1  D0 06                BNE     LAB_1519        ; branch if not
0029AA  1               
0029AA  1               ; we are either entering or leaving a pair of quotes
0029AA  1  A5 60                LDA     <Oquote         ; get open quote flag
0029AC  1  49 FF                EOR     #$FF            ; toggle it
0029AE  1  85 60                STA     <Oquote         ; save it back
0029B0  1               LAB_1519:
0029B0  1  C8                   INY                     ; increment index
0029B1  1  B1 AA                LDA     (<Baslnl),Y     ; get next byte
0029B3  1  D0 11                BNE     LAB_152E        ; branch if not [EOL] (go print character)
0029B5  1  A8                   TAY                     ; else clear index
0029B6  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer low byte
0029B8  1  AA                   TAX                     ; copy to X
0029B9  1  C8                   INY                     ; increment index
0029BA  1  B1 AA                LDA     (<Baslnl),Y     ; get next line pointer high byte
0029BC  1  86 AA                STX     <Baslnl         ; set pointer to line low byte
0029BE  1  85 AB                STA     <Baslnh         ; set pointer to line high byte
0029C0  1  F0 03                BEQ     LAB_152B
0029C2  1  4C 79 29             JMP     LAB_14E2        ; go do next line if not [EOT]
0029C5  1               
0029C5  1               ; else ..
0029C5  1               LAB_152B:
0029C5  1  60                   RTS
0029C6  1               
0029C6  1               LAB_152E:
0029C6  1  10 DB                BPL     LAB_150C        ; just go print it if not token byte
0029C8  1               
0029C8  1               ; else was token byte so uncrunch it (maybe)
0029C8  1  24 60                BIT     <Oquote         ; test the open quote flag
0029CA  1  30 D7                BMI     LAB_150C        ; just go print character if open quote set
0029CC  1               
0029CC  1  A2 13                LDX     #>LAB_KEYT      ; get table address high byte
0029CE  1  0A                   ASL     A               ; *2
0029CF  1  0A                   ASL     A               ; *4
0029D0  1  90 02                BCC     LAB_152F        ; branch if no carry
0029D2  1               
0029D2  1  E8                   INX                     ; else increment high byte
0029D3  1  18                   CLC                     ; clear carry for add
0029D4  1               LAB_152F:
0029D4  1  69 DB                ADC     #<LAB_KEYT      ; add low byte
0029D6  1  90 01                BCC     LAB_1530        ; branch if no carry
0029D8  1               
0029D8  1  E8                   INX                     ; else increment high byte
0029D9  1               LAB_1530:
0029D9  1  85 73                STA     <ut2_pl         ; save table pointer low byte
0029DB  1  86 74                STX     <ut2_ph         ; save table pointer high byte
0029DD  1  84 97                STY     <Tidx1          ; save index for line
0029DF  1  A0 00                LDY     #$00            ; clear index
0029E1  1  B1 73                LDA     (<ut2_pl),Y     ; get length
0029E3  1  AA                   TAX                     ; copy length
0029E4  1  C8                   INY                     ; increment index
0029E5  1  B1 73                LDA     (<ut2_pl),Y     ; get 1st character
0029E7  1  CA                   DEX                     ; decrement length
0029E8  1  D0 03                BNE     LAB_1508_A
0029EA  1  4C 9F 29             JMP     LAB_1508        ; if no more characters exit and print
0029ED  1               LAB_1508_A:
0029ED  1  20 A4 2F             JSR     LAB_PRNA        ; go print the character
0029F0  1  C8                   INY                     ; increment index
0029F1  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address low byte
0029F3  1  48                   PHA                     ; save it for now
0029F4  1  C8                   INY                     ; increment index
0029F5  1  B1 73                LDA     (<ut2_pl),Y     ; get keyword address high byte
0029F7  1  A0 00                LDY     #$00
0029F9  1  85 74                STA     <ut2_ph         ; save keyword pointer high byte
0029FB  1  68                   PLA                     ; pull low byte
0029FC  1  85 73                STA     <ut2_pl         ; save keyword pointer low byte
0029FE  1               LAB_1540:
0029FE  1  B1 73                LDA     (<ut2_pl),Y     ; get character
002A00  1  CA                   DEX                     ; decrement character count
002A01  1  D0 03                BNE     LAB_1508_B
002A03  1  4C 9F 29             JMP     LAB_1508        ; if last character exit and print
002A06  1               LAB_1508_B:
002A06  1  20 A4 2F             JSR     LAB_PRNA        ; go print the character
002A09  1  C8                   INY                     ; increment index
002A0A  1  D0 F2                BNE     LAB_1540        ; loop for next character
002A0C  1               
002A0C  1               ; perform FOR
002A0C  1               
002A0C  1               LAB_FOR:
002A0C  1  A9 80                LDA     #$80            ; set FNX
002A0E  1  85 61                STA     <Sufnxf         ; set subscript/FNX flag
002A10  1  20 71 2D             JSR     LAB_LET         ; go do LET
002A13  1  68                   PLA                     ; pull return address
002A14  1  68                   PLA                     ; pull return address
002A15  1  A9 10                LDA     #$10            ; we need 16d bytes !
002A17  1  20 8C 26             JSR     LAB_1212        ; check room on stack for A bytes
002A1A  1  20 5D 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002A1D  1  18                   CLC                     ; clear carry for add
002A1E  1  98                   TYA                     ; copy index to A
002A1F  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002A21  1  48                   PHA                     ; push onto stack
002A22  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002A24  1  69 00                ADC     #$00            ; add carry
002A26  1  48                   PHA                     ; push onto stack
002A27  1  A5 88                LDA     <Clineh         ; get current line high byte
002A29  1  48                   PHA                     ; push onto stack
002A2A  1  A5 87                LDA     <Clinel         ; get current line low byte
002A2C  1  48                   PHA                     ; push onto stack
002A2D  1  A9 BE                LDA     #TK_TO          ; get "TO" token
002A2F  1  20 06 33             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
002A32  1  20 E2 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
002A35  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002A38  1               ; else do type mismatch
002A38  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
002A3A  1  09 7F                ORA     #$7F            ; set all non sign bits
002A3C  1  25 AD                AND     <FAC1_1         ; and FAC1 mantissa1
002A3E  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
002A40  1  A9 4B                LDA     #<LAB_159F      ; set return address low byte
002A42  1  A0 2A                LDY     #>LAB_159F      ; set return address high byte
002A44  1  85 71                STA     <ut1_pl         ; save return address low byte
002A46  1  84 72                STY     <ut1_ph         ; save return address high byte
002A48  1  4C 98 32             JMP     LAB_1B66        ; round FAC1 and put on stack (returns to next instruction)
002A4B  1               
002A4B  1               LAB_159F:
002A4B  1  A9 5D                LDA     #<LAB_259C      ; set 1 pointer low addr (default step size)
002A4D  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high addr
002A4F  1  20 6D 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002A52  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002A56  1  C9 C3                CMP     #TK_STEP        ; compare with STEP token
002A58  1  D0 07                BNE     LAB_15B3        ; jump if not "STEP"
002A5A  1               
002A5A  1               ;.was step so ..
002A5A  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002A5E  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
002A61  1               ; else do type mismatch
002A61  1               LAB_15B3:
002A61  1  20 79 44             JSR     LAB_27CA        ; return A=FF,C=1/-ve A=01,C=0/+ve
002A64  1  85 B0                STA     <FAC1_s         ; set FAC1 sign (b7)
002A66  1               ; this is +1 for +ve step and -1 for -ve step, in NEXT we
002A66  1               ; compare the FOR value and the TO value and return +1 if
002A66  1               ; FOR > TO, 0 if FOR = TO and -1 if FOR < TO. the value
002A66  1               ; here (+/-1) is then compared to that result and if they
002A66  1               ; are the same (+ve and FOR > TO or -ve and FOR < TO) then
002A66  1               ; the loop is done
002A66  1  20 8D 32             JSR     LAB_1B5B        ; push sign, round FAC1 and put on stack
002A69  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
002A6B  1  48                   PHA                     ; push on stack
002A6C  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
002A6E  1  48                   PHA                     ; push on stack
002A6F  1  A9 81                LDA     #TK_FOR         ; get FOR token
002A71  1  48                   PHA                     ; push on stack
002A72  1               
002A72  1               ; interpreter inner loop
002A72  1               
002A72  1               LAB_15C2:
002A72  1  20 CD 2A             JSR     LAB_1629        ; do CRTL-C check vector
002A75  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002A77  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
002A79  1               
002A79  1  A6 88                LDX     <Clineh         ; continue line is $FFxx for immediate mode
002A7B  1               ; ($00xx for RUN from immediate mode)
002A7B  1  E8                   INX                     ; increment it (now $00 if immediate mode)
002A7C  1  F0 04                BEQ     LAB_15D1        ; branch if null (immediate mode)
002A7E  1               
002A7E  1  85 8B                STA     <Cpntrl         ; save continue pointer low byte
002A80  1  84 8C                STY     <Cpntrh         ; save continue pointer high byte
002A82  1               LAB_15D1:
002A82  1  A0 00                LDY     #$00            ; clear index
002A84  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
002A86  1  F0 07                BEQ     LAB_15DC        ; branch if null [EOL]
002A88  1               
002A88  1  C9 3A                CMP     #':'            ; compare with ":"
002A8A  1  F0 1D                BEQ     LAB_15F6        ; branch if = (statement separator)
002A8C  1               
002A8C  1               LAB_15D9:
002A8C  1  4C 19 33             JMP     LAB_SNER        ; else syntax error then warm start
002A8F  1               
002A8F  1               ; have reached [EOL]
002A8F  1               LAB_15DC:
002A8F  1  A0 02                LDY     #$02            ; set index
002A91  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
002A93  1  18                   CLC                     ; clear carry for no "BREAK" message
002A94  1  F0 59                BEQ     LAB_1651        ; if null go to immediate mode (was immediate or [EOT]
002A96  1               ; marker)
002A96  1               
002A96  1  C8                   INY                     ; increment index
002A97  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # low byte
002A99  1  85 87                STA     <Clinel         ; save current line low byte
002A9B  1  C8                   INY                     ; increment index
002A9C  1  B1 C3                LDA     (<Bpntrl),Y     ; get line # high byte
002A9E  1  85 88                STA     <Clineh         ; save current line high byte
002AA0  1  98                   TYA                     ; A now = 4
002AA1  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002AA3  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002AA5  1  90 02                BCC     LAB_15F6        ; branch if no overflow
002AA7  1               
002AA7  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002AA9  1               LAB_15F6:
002AA9  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002AAD  1               
002AAD  1               
002AAD  1               
002AAD  1               
002AAD  1               LAB_15F9:
002AAD  1  20 B3 2A             JSR     LAB_15FF        ; go interpret BASIC code from (<Bpntrl)
002AB0  1               LAB_15FC:
002AB0  1  4C 72 2A             JMP     LAB_15C2        ; loop
002AB3  1               
002AB3  1               ; interpret BASIC code from (<Bpntrl)
002AB3  1               
002AB3  1               LAB_15FF:
002AB3  1  F0 56                BEQ     LAB_1628        ; exit if zero [EOL]
002AB5  1               
002AB5  1               LAB_1602:
002AB5  1  0A                   ASL     A               ; *2 bytes per vector and normalise token
002AB6  1  B0 03                BCS     LAB_1609        ; branch if was token
002AB8  1  4C 71 2D             JMP     LAB_LET         ; else go do implied LET
002ABB  1               
002ABB  1               LAB_1609:
002ABB  1               TK_TABUSE       = (TK_TAB-$80)*2
002ABB  1  C9 78                CMP     #TK_TABUSE      ; compare normalised token * 2 with TAB
002ABD  1  B0 CD                BCS     LAB_15D9        ; branch if A>=TAB (do syntax error then warm start)
002ABF  1               ; only tokens before TAB can start a line
002ABF  1  A8                   TAY                     ; copy to index
002AC0  1  B9 39 10             LDA     LAB_CTBL+1,Y    ; get vector high byte
002AC3  1  48                   PHA                     ; onto stack
002AC4  1  B9 38 10             LDA     LAB_CTBL,Y      ; get vector low byte
002AC7  1  48                   PHA                     ; onto stack
002AC8  1  22 BC 00 00          JSL     LAB_IGBY        ; jump to increment and scan memory
002ACC  1               ; then "return" to vector
002ACC  1  60                   RTS
002ACD  1               ; CTRL-C check jump. this is called as a subroutine but exits back via a jump if a
002ACD  1               ; key press is detected.
002ACD  1               
002ACD  1               LAB_1629:
002ACD  1  6C 03 02             JMP     (VEC_CC)        ; ctrl c check vector
002AD0  1               
002AD0  1               ; if there was a key press it gets back here ..
002AD0  1               
002AD0  1               LAB_1636:
002AD0  1  C9 03                CMP     #$03            ; compare with CTRL-C
002AD2  1               
002AD2  1               ; perform STOP
002AD2  1               
002AD2  1               LAB_STOP:
002AD2  1  B0 01                BCS     LAB_163B        ; branch if token follows STOP
002AD4  1               ; else just END
002AD4  1               ; END
002AD4  1               
002AD4  1               LAB_END:
002AD4  1  18                   CLC                     ; clear the carry, indicate a normal program end
002AD5  1               LAB_163B:
002AD5  1  D0 67                BNE     LAB_167A        ; if wasn't CTRL-C or there is a following byte return
002AD7  1               
002AD7  1  A5 C4                LDA     <Bpntrh         ; get the BASIC execute pointer high byte
002AD9  1  49 21                EOR     #>Ibuffs        ; compare with buffer address high byte (Cb unchanged)
002ADB  1  F0 10                BEQ     LAB_164F        ; branch if the BASIC pointer is in the input buffer
002ADD  1               ; (can't continue in immediate mode)
002ADD  1               
002ADD  1               ; else ..
002ADD  1  49 21                EOR     #>Ibuffs        ; correct the bits
002ADF  1  A4 C3                LDY     <Bpntrl         ; get BASIC execute pointer low byte
002AE1  1  84 8B                STY     <Cpntrl         ; save continue pointer low byte
002AE3  1  85 8C                STA     <Cpntrh         ; save continue pointer high byte
002AE5  1               LAB_1647:
002AE5  1  A5 87                LDA     <Clinel         ; get current line low byte
002AE7  1  A4 88                LDY     <Clineh         ; get current line high byte
002AE9  1  85 89                STA     <Blinel         ; save break line low byte
002AEB  1  84 8A                STY     <Blineh         ; save break line high byte
002AED  1               LAB_164F:
002AED  1  68                   PLA                     ; pull return address low
002AEE  1  68                   PLA                     ; pull return address high
002AEF  1               LAB_1651:
002AEF  1  90 07                BCC     LAB_165E        ; if was program end just do warm start
002AF1  1               
002AF1  1               ; else ..
002AF1  1               
002AF1  1               ;        LDA     <VIDEOMODE
002AF1  1               ;        CMP     #2
002AF1  1               ;        BEQ     LAB_1651A
002AF1  1               ;        LDX     #2
002AF1  1               ;        JSR     V_SCREEN1
002AF1  1               LAB_1651A:
002AF1  1  A9 85                LDA     #<LAB_BMSG      ; point to "Break" low byte
002AF3  1  A0 17                LDY     #>LAB_BMSG      ; point to "Break" high byte
002AF5  1  4C E8 26             JMP     LAB_1269        ; print "Break" and do warm start
002AF8  1               
002AF8  1               LAB_165E:
002AF8  1  4C F3 26             JMP     LAB_1274        ; go do warm start
002AFB  1               
002AFB  1               ; perform RESTORE
002AFB  1               
002AFB  1               LAB_RESTORE:
002AFB  1  D0 0F                BNE     LAB_RESTOREn    ; branch if next character not null (RESTORE n)
002AFD  1               
002AFD  1               LAB_161A:
002AFD  1  38                   SEC                     ; set carry for subtract
002AFE  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002B00  1  E9 01                SBC     #$01            ; -1
002B02  1  A4 7A                LDY     <Smemh          ; get start of mem high byte
002B04  1  B0 01                BCS     LAB_1624        ; branch if no underflow
002B06  1               
002B06  1               LAB_uflow:
002B06  1  88                   DEY                     ; else decrement high byte
002B07  1               LAB_1624:
002B07  1  85 8F                STA     <Dptrl          ; save DATA pointer low byte
002B09  1  84 90                STY     <Dptrh          ; save DATA pointer high byte
002B0B  1               LAB_1628:
002B0B  1  60                   RTS
002B0C  1               
002B0C  1               ; is RESTORE n
002B0C  1               LAB_RESTOREn:
002B0C  1  20 0F 2D             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002B0F  1  20 60 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002B12  1  A5 88                LDA     <Clineh         ; get current line high byte
002B14  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002B16  1  B0 0B                BCS     LAB_reset_search; branch if >= (start search from beginning)
002B18  1               
002B18  1  98                   TYA                     ; else copy line index to A
002B19  1  38                   SEC                     ; set carry (+1)
002B1A  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002B1C  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002B1E  1  90 07                BCC     LAB_go_search   ; branch if no overflow to high byte
002B20  1               
002B20  1  E8                   INX                     ; increment high byte
002B21  1  B0 04                BCS     LAB_go_search   ; branch always (can never be carry clear)
002B23  1               
002B23  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002B23  1               
002B23  1               LAB_reset_search:
002B23  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002B25  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002B27  1               
002B27  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002B27  1               
002B27  1               LAB_go_search:
002B27  1               
002B27  1  20 D3 28             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002B2A  1  B0 03                BCS     LAB_line_found  ; if carry set go set pointer
002B2C  1               
002B2C  1  4C 32 2C             JMP     LAB_16F7        ; else go do "Undefined statement" error
002B2F  1               
002B2F  1               LAB_line_found:
002B2F  1               ; carry already set for subtract
002B2F  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002B31  1  E9 01                SBC     #$01            ; -1
002B33  1  A4 AB                LDY     <Baslnh         ; get pointer high byte
002B35  1  B0 D0                BCS     LAB_1624        ; branch if no underflow (save DATA pointer and return)
002B37  1               
002B37  1  90 CD                BCC     LAB_uflow       ; else decrement high byte then save DATA pointer and
002B39  1               ; return (branch always)
002B39  1               
002B39  1               ; perform NULL
002B39  1               
002B39  1               LAB_NULL:
002B39  1  20 8F 3E             JSR     LAB_GTBY        ; get byte parameter
002B3C  1  86 0D                STX     <Nullct         ; save new NULL count
002B3E  1               LAB_167A:
002B3E  1  60                   RTS
002B3F  1               
002B3F  1               ; perform CONT
002B3F  1               
002B3F  1               LAB_CONT:
002B3F  1  D0 FD                BNE     LAB_167A        ; if following byte exit to do syntax error
002B41  1               
002B41  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002B43  1  D0 05                BNE     LAB_166C        ; go do continue if we can
002B45  1               
002B45  1  A2 1E                LDX     #$1E            ; error code $1E ("Can't continue" error)
002B47  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
002B4A  1               
002B4A  1               ; we can continue so ..
002B4A  1               LAB_166C:
002B4A  1  A9 93                LDA     #TK_ON          ; set token for ON
002B4C  1  20 A9 4B             JSR     LAB_IRQ         ; set IRQ flags
002B4F  1  A9 93                LDA     #TK_ON          ; set token for ON
002B51  1  20 AC 4B             JSR     LAB_NMI         ; set NMI flags
002B54  1               
002B54  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002B56  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002B58  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002B5A  1  A5 89                LDA     <Blinel         ; get break line low byte
002B5C  1  A4 8A                LDY     <Blineh         ; get break line high byte
002B5E  1  85 87                STA     <Clinel         ; set current line low byte
002B60  1  84 88                STY     <Clineh         ; set current line high byte
002B62  1  60                   RTS
002B63  1               
002B63  1               ; perform RUN
002B63  1               
002B63  1               LAB_RUN:
002B63  1  D0 03                BNE     LAB_1696        ; branch if RUN n
002B65  1  4C 10 29             JMP     LAB_1477        ; reset execution to start, clear variables, flush stack and
002B68  1               ; return
002B68  1               
002B68  1               ; does RUN n
002B68  1               
002B68  1               LAB_1696:
002B68  1  20 1D 29             JSR     LAB_147A        ; go do "CLEAR"
002B6B  1  F0 2F                BEQ     LAB_16B0        ; get n and do GOTO n (branch always as CLEAR sets Z=1)
002B6D  1               
002B6D  1               ; perform DO
002B6D  1               
002B6D  1               LAB_DO:
002B6D  1  A9 05                LDA     #$05            ; need 5 bytes for DO
002B6F  1  20 8C 26             JSR     LAB_1212        ; check room on stack for A bytes
002B72  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002B74  1  48                   PHA                     ; push on stack
002B75  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002B77  1  48                   PHA                     ; push on stack
002B78  1  A5 88                LDA     <Clineh         ; get current line high byte
002B7A  1  48                   PHA                     ; push on stack
002B7B  1  A5 87                LDA     <Clinel         ; get current line low byte
002B7D  1  48                   PHA                     ; push on stack
002B7E  1  A9 9C                LDA     #TK_DO          ; token for DO
002B80  1  48                   PHA                     ; push on stack
002B81  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002B85  1  4C 72 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002B88  1               
002B88  1               ; perform GOSUB
002B88  1               
002B88  1               LAB_GOSUB:
002B88  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
002B8A  1  20 8C 26             JSR     LAB_1212        ; check room on stack for A bytes
002B8D  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
002B8F  1  48                   PHA                     ; push on stack
002B90  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
002B92  1  48                   PHA                     ; push on stack
002B93  1  A5 88                LDA     <Clineh         ; get current line high byte
002B95  1  48                   PHA                     ; push on stack
002B96  1  A5 87                LDA     <Clinel         ; get current line low byte
002B98  1  48                   PHA                     ; push on stack
002B99  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
002B9B  1  48                   PHA                     ; push on stack
002B9C  1               LAB_16B0:
002B9C  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002BA0  1  20 A6 2B             JSR     LAB_GOTO        ; perform GOTO n
002BA3  1  4C 72 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002BA6  1               ; (can't RTS, we used the stack!)
002BA6  1               
002BA6  1               ; perform GOTO
002BA6  1               
002BA6  1               LAB_GOTO:
002BA6  1  20 0F 2D             JSR     LAB_GFPN        ; get fixed-point number into temp integer
002BA9  1  20 60 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002BAC  1  A5 88                LDA     <Clineh         ; get current line high byte
002BAE  1  C5 12                CMP     <Itemph         ; compare with temporary integer high byte
002BB0  1  B0 0B                BCS     LAB_16D0        ; branch if >= (start search from beginning)
002BB2  1               
002BB2  1  98                   TYA                     ; else copy line index to A
002BB3  1  38                   SEC                     ; set carry (+1)
002BB4  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002BB6  1  A6 C4                LDX     <Bpntrh         ; get BASIC execute pointer high byte
002BB8  1  90 07                BCC     LAB_16D4        ; branch if no overflow to high byte
002BBA  1               
002BBA  1  E8                   INX                     ; increment high byte
002BBB  1  B0 04                BCS     LAB_16D4        ; branch always (can never be carry)
002BBD  1               
002BBD  1               ; search for line # in temp (<Itempl/<Itemph) from start of mem pointer (<Smeml)
002BBD  1               
002BBD  1               LAB_16D0:
002BBD  1  A5 79                LDA     <Smeml          ; get start of mem low byte
002BBF  1  A6 7A                LDX     <Smemh          ; get start of mem high byte
002BC1  1               
002BC1  1               ; search for line # in temp (<Itempl/<Itemph) from (AX)
002BC1  1               
002BC1  1               LAB_16D4:
002BC1  1  20 D3 28             JSR     LAB_SHLN        ; search Basic for temp integer line number from AX
002BC4  1  90 6C                BCC     LAB_16F7        ; if carry clear go do "Undefined statement" error
002BC6  1               ; (unspecified statement)
002BC6  1               
002BC6  1               ; carry already set for subtract
002BC6  1  A5 AA                LDA     <Baslnl         ; get pointer low byte
002BC8  1  E9 01                SBC     #$01            ; -1
002BCA  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002BCC  1  A5 AB                LDA     <Baslnh         ; get pointer high byte
002BCE  1  E9 00                SBC     #$00            ; subtract carry
002BD0  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002BD2  1               LAB_16E5:
002BD2  1  60                   RTS
002BD3  1               
002BD3  1               LAB_DONOK:
002BD3  1  A2 22                LDX     #$22            ; error code $22 ("LOOP without DO" error)
002BD5  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
002BD8  1               
002BD8  1               ; perform LOOP
002BD8  1               
002BD8  1               LAB_LOOP:
002BD8  1  A8                   TAY                     ; save following token
002BD9  1  A3 03                LDA     3,S             ; get token byte from stack
002BDB  1  C9 9C                CMP     #TK_DO          ; compare with DO token
002BDD  1  D0 F4                BNE     LAB_DONOK       ; branch if no matching DO
002BDF  1               
002BDF  1               ; FIXUP STACK
002BDF  1  C2 10                INDEX16
002BE1  1  BA                   TSX
002BE2  1  E8                   INX                     ; dump calling routine return address
002BE3  1  E8                   INX                     ; dump calling routine return address
002BE4  1  9A                   TXS                     ; correct stack
002BE5  1  E2 10                INDEX8
002BE7  1               
002BE7  1  98                   TYA                     ; get saved following token back
002BE8  1  F0 20                BEQ     LoopAlways      ; if no following token loop forever
002BEA  1               ; (stack pointer in X)
002BEA  1               
002BEA  1  C9 3A                CMP     #':'            ; could be ':'
002BEC  1  F0 1C                BEQ     LoopAlways      ; if :... loop forever
002BEE  1               
002BEE  1  E9 C4                SBC     #TK_UNTIL       ; subtract token for UNTIL, we know carry is set here
002BF0  1  AA                   TAX                     ; copy to X (if it was UNTIL then Y will be correct)
002BF1  1  F0 04                BEQ     DoRest          ; branch if was UNTIL
002BF3  1               
002BF3  1  CA                   DEX                     ; decrement result
002BF4  1  D0 64                BNE     LAB_16FC        ; if not WHILE go do syntax error and warm start
002BF6  1               ; only if the token was WHILE will this fail
002BF6  1               
002BF6  1  CA                   DEX                     ; set invert result byte
002BF7  1               DoRest:
002BF7  1  86 98                STX     <Frnxth         ; save invert result byte
002BF9  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002BFD  1  20 F3 31             JSR     LAB_EVEX        ; evaluate expression
002C00  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002C02  1  F0 02                BEQ     DoCmp           ; if =0 go do straight compare
002C04  1               
002C04  1  A9 FF                LDA     #$FF            ; else set all bits
002C06  1               DoCmp:
002C06  1  45 98                EOR     <Frnxth         ; EOR with invert byte
002C08  1  D0 17                BNE     LoopDone        ; if <> 0 clear stack and back to interpreter loop
002C0A  1               
002C0A  1               ; loop condition wasn't met so do it again
002C0A  1               LoopAlways:
002C0A  1  A3 02                LDA     2,S             ; get current line low byte
002C0C  1  85 87                STA     <Clinel         ; save current line low byte
002C0E  1  A3 03                LDA     3,S             ; get current line high byte
002C10  1  85 88                STA     <Clineh         ; save current line high byte
002C12  1  A3 04                LDA     4,S             ; get BASIC execute pointer low byte
002C14  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002C16  1  A3 05                LDA     5,S             ; get BASIC execute pointer high byte
002C18  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002C1A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002C1E  1  4C 72 2A             JMP     LAB_15C2        ; go do interpreter inner loop
002C21  1               
002C21  1               ; clear stack and back to interpreter loop
002C21  1               LoopDone:
002C21  1  C2 10                INDEX16
002C23  1  BA                   TSX
002C24  1  E8                   INX                     ; dump DO token
002C25  1  E8                   INX                     ; dump current line low byte
002C26  1  E8                   INX                     ; dump current line high byte
002C27  1  E8                   INX                     ; dump BASIC execute pointer low byte
002C28  1  E8                   INX                     ; dump BASIC execute pointer high byte
002C29  1  9A                   TXS                     ; correct stack
002C2A  1  E2 10                INDEX8
002C2C  1  4C 4C 2C             JMP     LAB_DATA        ; go perform DATA (find : or [EOL])
002C2F  1               
002C2F  1               ; do the return without gosub error
002C2F  1               
002C2F  1               LAB_16F4:
002C2F  1  A2 04                LDX     #$04            ; error code $04 ("RETURN without GOSUB" error)
002C31  1  2C                   .BYTE   $2C             ; makes next line BIT LAB_0EA2
002C32  1               
002C32  1               LAB_16F7:                       ; do undefined statement error
002C32  1  A2 0E                LDX     #$0E            ; error code $0E ("Undefined statement" error)
002C34  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
002C37  1               
002C37  1               ; perform RETURN
002C37  1               
002C37  1               LAB_RETURN:
002C37  1  D0 99                BNE     LAB_16E5        ; exit if following token (to allow syntax error)
002C39  1               
002C39  1               LAB_16E8:
002C39  1  68                   PLA                     ; dump calling routine return address
002C3A  1  68                   PLA                     ; dump calling routine return address
002C3B  1  68                   PLA                     ; pull token
002C3C  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002C3E  1  D0 EF                BNE     LAB_16F4        ; branch if no matching GOSUB
002C40  1               
002C40  1               LAB_16FF:
002C40  1  68                   PLA                     ; pull current line low byte
002C41  1  85 87                STA     <Clinel         ; save current line low byte
002C43  1  68                   PLA                     ; pull current line high byte
002C44  1  85 88                STA     <Clineh         ; save current line high byte
002C46  1  68                   PLA                     ; pull BASIC execute pointer low byte
002C47  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002C49  1  68                   PLA                     ; pull BASIC execute pointer high byte
002C4A  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
002C4C  1               
002C4C  1               ; now do the DATA statement as we could be returning into
002C4C  1               ; the middle of an ON <var> GOSUB n,m,p,q line
002C4C  1               ; (the return address used by the DATA statement is the one
002C4C  1               ; pushed before the GOSUB was executed!)
002C4C  1               
002C4C  1               ; perform DATA
002C4C  1               
002C4C  1               LAB_DATA:
002C4C  1  20 5D 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
002C4F  1               
002C4F  1               ; set BASIC execute pointer
002C4F  1               LAB_170F:
002C4F  1  98                   TYA                     ; copy index to A
002C50  1  18                   CLC                     ; clear carry for add
002C51  1  65 C3                ADC     <Bpntrl         ; add BASIC execute pointer low byte
002C53  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002C55  1  90 02                BCC     LAB_1719        ; skip next if no carry
002C57  1               
002C57  1  E6 C4                INC     <Bpntrh         ; else increment BASIC execute pointer high byte
002C59  1               LAB_1719:
002C59  1  60                   RTS
002C5A  1               
002C5A  1               LAB_16FC:
002C5A  1  4C 19 33             JMP     LAB_SNER        ; do syntax error then warm start
002C5D  1               
002C5D  1               ; scan for next BASIC statement ([:] or [EOL])
002C5D  1               ; returns Y as index to [:] or [EOL]
002C5D  1               
002C5D  1               LAB_SNBS:
002C5D  1  A2 3A                LDX     #':'            ; set look for character = ":"
002C5F  1  2C                   .BYTE   $2C             ; makes next line BIT $00A2
002C60  1               
002C60  1               ; scan for next BASIC line
002C60  1               ; returns Y as index to [EOL]
002C60  1               
002C60  1               LAB_SNBL:
002C60  1  A2 00                LDX     #$00            ; set alt search character = [EOL]
002C62  1  A0 00                LDY     #$00            ; set search character = [EOL]
002C64  1  84 5C                STY     <Asrch          ; store search character
002C66  1               LAB_1725:
002C66  1  8A                   TXA                     ; get alt search character
002C67  1  45 5C                EOR     <Asrch          ; toggle search character, effectively swap with $00
002C69  1  85 5C                STA     <Asrch          ; save swapped search character
002C6B  1               LAB_172D:
002C6B  1  B1 C3                LDA     (<Bpntrl),Y     ; get next byte
002C6D  1  F0 EA                BEQ     LAB_1719        ; exit if null [EOL]
002C6F  1               
002C6F  1  C5 5C                CMP     <Asrch          ; compare with search character
002C71  1  F0 E6                BEQ     LAB_1719        ; exit if found
002C73  1               
002C73  1  C8                   INY                     ; increment index
002C74  1  C9 22                CMP     #$22            ; compare current character with open quote
002C76  1  D0 F3                BNE     LAB_172D        ; if not open quote go get next character
002C78  1               
002C78  1  F0 EC                BEQ     LAB_1725        ; if found go swap search character for alt search character
002C7A  1               
002C7A  1               ; perform IF
002C7A  1               
002C7A  1               LAB_IF:
002C7A  1  20 F3 31             JSR     LAB_EVEX        ; evaluate the expression
002C7D  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002C81  1  C9 C1                CMP     #TK_THEN        ; compare with THEN token
002C83  1  F0 12                BEQ     LAB_174B        ; if it was THEN go do IF
002C85  1               
002C85  1               ; wasn't IF .. THEN so must be IF .. GOTO
002C85  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002C87  1  D0 D1                BNE     LAB_16FC        ; if it wasn't GOTO go do syntax error
002C89  1               
002C89  1  A6 C3                LDX     <Bpntrl         ; save the basic pointer low byte
002C8B  1  A4 C4                LDY     <Bpntrh         ; save the basic pointer high byte
002C8D  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002C91  1  B0 C7                BCS     LAB_16FC        ; if not numeric go do syntax error
002C93  1               
002C93  1  86 C3                STX     <Bpntrl         ; restore the basic pointer low byte
002C95  1  84 C4                STY     <Bpntrh         ; restore the basic pointer high byte
002C97  1               LAB_174B:
002C97  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
002C99  1  F0 1F                BEQ     LAB_174E        ; if the result was zero go look for an ELSE
002C9B  1               
002C9B  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
002C9F  1  B0 03                BCS     LAB_174D        ; if not numeric go do var or keyword
002CA1  1               
002CA1  1               LAB_174C:
002CA1  1  4C A6 2B             JMP     LAB_GOTO        ; else was numeric so do GOTO n
002CA4  1               
002CA4  1               ; is var or keyword
002CA4  1               LAB_174D:
002CA4  1  C9 90                CMP     #TK_RETURN      ; compare the byte with the token for RETURN
002CA6  1  D0 03                BNE     LAB_174G        ; if it wasn't RETURN go interpret BASIC code from (<Bpntrl)
002CA8  1               ; and return to this code to process any following code
002CA8  1               
002CA8  1  4C B5 2A             JMP     LAB_1602        ; else it was RETURN so interpret BASIC code from (<Bpntrl)
002CAB  1               ; but don't return here
002CAB  1               
002CAB  1               LAB_174G:
002CAB  1  20 B3 2A             JSR     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002CAE  1               
002CAE  1               ; the IF was executed and there may be a following ELSE so the code needs to return
002CAE  1               ; here to check and ignore the ELSE if present
002CAE  1               
002CAE  1  A0 00                LDY     #$00            ; clear the index
002CB0  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002CB2  1  C9 BD                CMP     #TK_ELSE        ; compare it with the token for ELSE
002CB4  1  D0 03                BNE     LAB_DATA_A
002CB6  1  4C 4C 2C             JMP     LAB_DATA        ; if ELSE ignore the following statement
002CB9  1               
002CB9  1               ; there was no ELSE so continue execution of IF <expr> THEN <stat> [: <stat>]. any
002CB9  1               ; following ELSE will, correctly, cause a syntax error
002CB9  1               LAB_DATA_A:
002CB9  1  60                   RTS                     ; else return to the interpreter inner loop
002CBA  1               
002CBA  1               ; perform ELSE after IF
002CBA  1               
002CBA  1               LAB_174E:
002CBA  1  A0 00                LDY     #$00            ; clear the BASIC byte index
002CBC  1  A2 01                LDX     #$01            ; clear the nesting depth
002CBE  1               LAB_1750:
002CBE  1  C8                   INY                     ; increment the BASIC byte index
002CBF  1  B1 C3                LDA     (<Bpntrl),Y     ; get the next BASIC byte
002CC1  1  F0 0F                BEQ     LAB_1753        ; if EOL go add the pointer and return
002CC3  1               
002CC3  1  C9 8D                CMP     #TK_IF          ; compare the byte with the token for IF
002CC5  1  D0 03                BNE     LAB_1752        ; if not IF token skip the depth increment
002CC7  1               
002CC7  1  E8                   INX                     ; else increment the nesting depth ..
002CC8  1  D0 F4                BNE     LAB_1750        ; .. and continue looking
002CCA  1               
002CCA  1               LAB_1752:
002CCA  1  C9 BD                CMP     #TK_ELSE        ; compare the byte with the token for ELSE
002CCC  1  D0 F0                BNE     LAB_1750        ; if not ELSE token continue looking
002CCE  1               
002CCE  1  CA                   DEX                     ; was ELSE so decrement the nesting depth
002CCF  1  D0 ED                BNE     LAB_1750        ; loop if still nested
002CD1  1               
002CD1  1  C8                   INY                     ; increment the BASIC byte index past the ELSE
002CD2  1               
002CD2  1               ; found the matching ELSE, now do <{n|statement}>
002CD2  1               
002CD2  1               LAB_1753:
002CD2  1  98                   TYA                     ; else copy line index to A
002CD3  1  18                   CLC                     ; clear carry for add
002CD4  1  65 C3                ADC     <Bpntrl         ; add the BASIC execute pointer low byte
002CD6  1  85 C3                STA     <Bpntrl         ; save the BASIC execute pointer low byte
002CD8  1  90 02                BCC     LAB_1754        ; branch if no overflow to high byte
002CDA  1               
002CDA  1  E6 C4                INC     <Bpntrh         ; else increment the BASIC execute pointer high byte
002CDC  1               LAB_1754:
002CDC  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002CE0  1  90 BF                BCC     LAB_174C        ; if numeric do GOTO n
002CE2  1               ; the code will return to the interpreter loop at the
002CE2  1               ; tail end of the GOTO <n>
002CE2  1               
002CE2  1  4C B3 2A             JMP     LAB_15FF        ; interpret BASIC code from (<Bpntrl)
002CE5  1               ; the code will return to the interpreter loop at the
002CE5  1               ; tail end of the <statement>
002CE5  1               
002CE5  1               ; perform REM, skip (rest of) line
002CE5  1               
002CE5  1               LAB_REM:
002CE5  1  20 60 2C             JSR     LAB_SNBL        ; scan for next BASIC line
002CE8  1  4C 4F 2C             JMP     LAB_170F        ; go set BASIC execute pointer and return, branch always
002CEB  1               
002CEB  1               LAB_16FD:
002CEB  1  4C 19 33             JMP     LAB_SNER        ; do syntax error then warm start
002CEE  1               
002CEE  1               ; perform ON
002CEE  1               
002CEE  1               LAB_ON:
002CEE  1               LAB_NONM:
002CEE  1  20 8F 3E             JSR     LAB_GTBY        ; get byte parameter
002CF1  1  48                   PHA                     ; push GOTO/GOSUB token
002CF2  1  C9 8F                CMP     #TK_GOSUB       ; compare with GOSUB token
002CF4  1  F0 04                BEQ     LAB_176B        ; branch if GOSUB
002CF6  1               
002CF6  1  C9 8B                CMP     #TK_GOTO        ; compare with GOTO token
002CF8  1               LAB_1767:
002CF8  1  D0 F1                BNE     LAB_16FD        ; if not GOTO do syntax error then warm start
002CFA  1               
002CFA  1               
002CFA  1               ; next character was GOTO or GOSUB
002CFA  1               
002CFA  1               LAB_176B:
002CFA  1  C6 AF                DEC     <FAC1_3         ; decrement index (byte value)
002CFC  1  D0 04                BNE     LAB_1773        ; branch if not zero
002CFE  1               
002CFE  1  68                   PLA                     ; pull GOTO/GOSUB token
002CFF  1  4C B5 2A             JMP     LAB_1602        ; go execute it
002D02  1               
002D02  1               LAB_1773:
002D02  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D06  1  20 0F 2D             JSR     LAB_GFPN        ; get fixed-point number into temp integer (skip this n)
002D09  1               ; (we could LDX #',' and JSR LAB_SNBL+2, then we
002D09  1               ; just BNE LAB_176B for the loop. should be quicker ..
002D09  1               ; no we can't, what if we meet a colon or [EOL]?)
002D09  1  C9 2C                CMP     #$2C            ; compare next character with ","
002D0B  1  F0 ED                BEQ     LAB_176B        ; loop if ","
002D0D  1               
002D0D  1               LAB_177E:
002D0D  1  68                   PLA                     ; else pull keyword token (run out of options)
002D0E  1               ; also dump +/-1 pointer low byte and exit
002D0E  1               LAB_177F:
002D0E  1  60                   RTS
002D0F  1               
002D0F  1               ; takes n * 106 + 11 cycles where n is the number of digits
002D0F  1               
002D0F  1               ; get fixed-point number into temp integer
002D0F  1               
002D0F  1               LAB_GFPN:
002D0F  1  A2 00                LDX     #$00            ; clear reg
002D11  1  86 11                STX     <Itempl         ; clear temporary integer low byte
002D13  1               LAB_1785:
002D13  1  86 12                STX     <Itemph         ; save temporary integer high byte
002D15  1  B0 F7                BCS     LAB_177F        ; return if carry set, end of scan, character was
002D17  1               ; not 0-9
002D17  1               
002D17  1  E0 19                CPX     #$19            ; compare high byte with $19
002D19  1  A8                   TAY                     ; ensure Zb = 0 if the branch is taken
002D1A  1  B0 DC                BCS     LAB_1767        ; branch if >=, makes max line # 63999 because next
002D1C  1               ; bit does *$0A, = 64000, compare at target will fail
002D1C  1               ; and do syntax error
002D1C  1               
002D1C  1  E9 2F                SBC     #'0'-1          ; subtract "0", $2F + carry, from byte
002D1E  1  A8                   TAY                     ; copy binary digit
002D1F  1  A5 11                LDA     <Itempl         ; get temporary integer low byte
002D21  1  0A                   ASL     A               ; *2 low byte
002D22  1  26 12                ROL     <Itemph         ; *2 high byte
002D24  1  0A                   ASL     A               ; *2 low byte
002D25  1  26 12                ROL     <Itemph         ; *2 high byte, *4
002D27  1  65 11                ADC     <Itempl         ; + low byte, *5
002D29  1  85 11                STA     <Itempl         ; save it
002D2B  1  8A                   TXA                     ; get high byte copy to A
002D2C  1  65 12                ADC     <Itemph         ; + high byte, *5
002D2E  1  06 11                ASL     <Itempl         ; *2 low byte, *10d
002D30  1  2A                   ROL     A               ; *2 high byte, *10d
002D31  1  AA                   TAX                     ; copy high byte back to X
002D32  1  98                   TYA                     ; get binary digit back
002D33  1  65 11                ADC     <Itempl         ; add number low byte
002D35  1  85 11                STA     <Itempl         ; save number low byte
002D37  1  90 01                BCC     LAB_17B3        ; if no overflow to high byte get next character
002D39  1               
002D39  1  E8                   INX                     ; else increment high byte
002D3A  1               LAB_17B3:
002D3A  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D3E  1  4C 13 2D             JMP     LAB_1785        ; loop for next character
002D41  1               
002D41  1               ; perform DEC
002D41  1               
002D41  1               LAB_DEC:
002D41  1  A9 61                LDA     #<LAB_2AFD      ; set -1 pointer low byte
002D43  1  2C                   .BYTE   $2C             ; BIT abs to skip the LDA below
002D44  1               
002D44  1               ; perform INC
002D44  1               
002D44  1               LAB_INC:
002D44  1  A9 5D                LDA     #<LAB_259C      ; set 1 pointer low byte
002D46  1               LAB_17B5:
002D46  1  48                   PHA                     ; save +/-1 pointer low byte
002D47  1               LAB_17B7:
002D47  1  20 F0 34             JSR     LAB_GVAR        ; get var address
002D4A  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002D4C  1  30 20                BMI     IncrErr         ; exit if string
002D4E  1               
002D4E  1  85 97                STA     <Lvarpl         ; save var address low byte
002D50  1  84 98                STY     <Lvarph         ; save var address high byte
002D52  1  20 6D 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
002D55  1  68                   PLA                     ; get +/-1 pointer low byte
002D56  1  48                   PHA                     ; save +/-1 pointer low byte
002D57  1  A0 18                LDY     #>LAB_259C      ; set +/-1 pointer high byte (both the same)
002D59  1  20 58 40             JSR     LAB_246C        ; add (AY) to FAC1
002D5C  1  20 E3 43             JSR     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl)
002D5F  1               
002D5F  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002D63  1  C9 2C                CMP     #','            ; compare with ","
002D65  1  D0 A6                BNE     LAB_177E        ; exit if not "," (either end or error)
002D67  1               
002D67  1               ; was "," so another INCR variable to do
002D67  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002D6B  1  4C 47 2D             JMP     LAB_17B7        ; go do next var
002D6E  1               
002D6E  1               IncrErr:
002D6E  1  4C EE 31             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
002D71  1               
002D71  1               ; perform LET
002D71  1               
002D71  1               LAB_LET:
002D71  1  20 F0 34             JSR     LAB_GVAR        ; get var address
002D74  1  85 97                STA     <Lvarpl         ; save var address low byte
002D76  1  84 98                STY     <Lvarph         ; save var address high byte
002D78  1  A9 D2                LDA     #TK_EQUAL       ; get = token
002D7A  1  20 06 33             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
002D7D  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002D7F  1  48                   PHA                     ; push data type flag
002D80  1  20 F3 31             JSR     LAB_EVEX        ; evaluate expression
002D83  1  68                   PLA                     ; pop data type flag
002D84  1  2A                   ROL     A               ; set carry if type = string
002D85  1  20 E5 31             JSR     LAB_CKTM        ; type match check, set C for string
002D88  1  D0 03                BNE     LAB_17D5        ; branch if string
002D8A  1               
002D8A  1  4C E3 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002D8D  1               
002D8D  1               ; string LET
002D8D  1               
002D8D  1               LAB_17D5:
002D8D  1  A0 02                LDY     #$02            ; set index to pointer high byte
002D8F  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string pointer high byte
002D93  1  B5 AE C9 00  
002D97  1  D0 04 A2 00  
002DA5  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
002DA7  1  90 2B                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002DA9  1  D0 1B                BNE     LAB_17E6        ; branch if >
002DAB  1               ; else was equal so compare low bytes
002DAB  1  88                   DEY                     ; decrement index
002DAC  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get pointer low byte
002DB0  1  B5 AE C9 00  
002DB4  1  D0 04 A2 00  
002DC2  1  C5 81                CMP     <Sstorl         ; compare bottom of string space low byte
002DC4  1  90 0E                BCC     LAB_17F4        ; if less assign value and exit (was in program memory)
002DC6  1               
002DC6  1               ; pointer was >= to bottom of string space pointer
002DC6  1               LAB_17E6:
002DC6  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002DC8  1  C4 7C                CPY     <Svarh          ; compare start of vars high byte
002DCA  1  90 08                BCC     LAB_17F4        ; branch if less (descriptor is on stack)
002DCC  1               
002DCC  1  D0 0D                BNE     LAB_17FB        ; branch if greater (descriptor is not on stack)
002DCE  1               
002DCE  1               ; else high bytes were equal so ..
002DCE  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002DD0  1  C5 7B                CMP     <Svarl          ; compare start of vars low byte
002DD2  1  B0 07                BCS     LAB_17FB        ; branch if >= (descriptor is not on stack)
002DD4  1               
002DD4  1               LAB_17F4:
002DD4  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
002DD6  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
002DD8  1  4C 05 2E             JMP     LAB_1811        ; clean stack, copy descriptor to variable and return
002DDB  1               
002DDB  1               ; make space and copy string
002DDB  1               LAB_17FB:
002DDB  1               
002DDB  1  A0 00                LDY     #$00            ; index to length
002DDD  1  8B DA A2 01          LDAINDIRECTY des_pl     ; get string length
002DE1  1  B5 AE C9 00  
002DE5  1  D0 04 A2 00  
002DF3  1  20 17 39             JSR     LAB_209C        ; copy string
002DF6  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
002DF8  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
002DFA  1  85 B8                STA     <ssptr_l        ; save descriptor pointer low byte
002DFC  1  84 B9                STY     <ssptr_h        ; save descriptor pointer high byte
002DFE  1  20 75 3B             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
002E01  1  A9 AC                LDA     #<FAC1_e        ; set descriptor pointer low byte
002E03  1  A0 00                LDY     #>FAC1_e        ; get descriptor pointer high byte
002E05  1               
002E05  1               ; clean stack and assign value to string variable
002E05  1               LAB_1811:
002E05  1  85 9E                STA     <des_2l         ; save descriptor_2 pointer low byte
002E07  1  84 9F                STY     <des_2h         ; save descriptor_2 pointer high byte
002E09  1  20 77 3C             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
002E0C  1  A0 00                LDY     #$00            ; index to length
002E0E  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string length
002E12  1  B5 9E C9 00  
002E16  1  D0 04 A2 00  
002E24  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002E28  1  01 B5 97 C9  
002E2C  1  00 D0 04 A2  
002E3A  1  C8                   INY                     ; index to string pointer low byte
002E3B  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer low byte
002E3F  1  B5 9E C9 00  
002E43  1  D0 04 A2 00  
002E51  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002E55  1  01 B5 97 C9  
002E59  1  00 D0 04 A2  
002E67  1  C8                   INY                     ; index to string pointer high byte
002E68  1  8B DA A2 01          LDAINDIRECTY des_2l     ; get string pointer high byte
002E6C  1  B5 9E C9 00  
002E70  1  D0 04 A2 00  
002E7E  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; copy to let string variable
002E82  1  01 B5 97 C9  
002E86  1  00 D0 04 A2  
002E94  1  60                   RTS
002E95  1               
002E95  1               ; perform GET
002E95  1               
002E95  1               LAB_GET:
002E95  1  20 F0 34             JSR     LAB_GVAR        ; get var address
002E98  1  85 97                STA     <Lvarpl         ; save var address low byte
002E9A  1  84 98                STY     <Lvarph         ; save var address high byte
002E9C  1  20 8E 4B             JSR     INGET           ; get input byte
002E9F  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
002EA1  1  30 07                BMI     LAB_GETS        ; go get string character
002EA3  1               
002EA3  1               ; was numeric get
002EA3  1  A8                   TAY                     ; copy character to Y
002EA4  1  20 BB 37             JSR     LAB_1FD0        ; convert Y to byte in FAC1
002EA7  1  4C E3 43             JMP     LAB_PFAC        ; pack FAC1 into variable (<Lvarpl) and return
002EAA  1               
002EAA  1               LAB_GETS:
002EAA  1  48                   PHA                     ; save character
002EAB  1  A9 01                LDA     #$01            ; string is single byte
002EAD  1  B0 01                BCS     LAB_IsByte      ; branch if byte received
002EAF  1               
002EAF  1  68                   PLA                     ; string is null
002EB0  1               LAB_IsByte:
002EB0  1  20 1F 39             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
002EB3  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
002EB3  1  F0 19                BEQ     LAB_NoSt        ; skip store if null string
002EB5  1               
002EB5  1  68                   PLA                     ; get character back
002EB6  1  A0 00                LDY     #$00            ; clear index
002EB8  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
002EBC  1  01 B5 AD C9  
002EC0  1  00 D0 04 A2  
002ECE  1               LAB_NoSt:
002ECE  1  20 82 39             JSR     LAB_RTST        ; check for space on descriptor stack then put address
002ED1  1               ; and length on descriptor stack and update stack pointers
002ED1  1               
002ED1  1  4C 8D 2D             JMP     LAB_17D5        ; do string LET and return
002ED4  1               
002ED4  1               ; perform PRINT
002ED4  1               
002ED4  1               LAB_1829:
002ED4  1  20 79 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002ED7  1               LAB_182C:
002ED7  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
002EDB  1               
002EDB  1               ; PRINT
002EDB  1               
002EDB  1               LAB_PRINT:
002EDB  1  F0 51                BEQ     LAB_CRLF        ; if nothing following just print CR/LF
002EDD  1               
002EDD  1               LAB_1831:
002EDD  1  C9 BC                CMP     #TK_TAB         ; compare with TAB( token
002EDF  1  F0 6C                BEQ     LAB_18A2        ; go do TAB/SPC
002EE1  1               
002EE1  1  C9 C0                CMP     #TK_SPC         ; compare with SPC( token
002EE3  1  F0 68                BEQ     LAB_18A2        ; go do TAB/SPC
002EE5  1               
002EE5  1  C9 2C                CMP     #','            ; compare with ","
002EE7  1  F0 4E                BEQ     LAB_188B        ; go do move to next TAB mark
002EE9  1               
002EE9  1  C9 3B                CMP     #$3B            ; compare with ";"
002EEB  1  F0 7F                BEQ     LAB_18BD        ; if ";" continue with PRINT processing
002EED  1               
002EED  1  20 F3 31             JSR     LAB_EVEX        ; evaluate expression
002EF0  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
002EF2  1  30 E0                BMI     LAB_1829        ; branch if string
002EF4  1               
002EF4  1  20 A7 46             JSR     LAB_296E        ; convert FAC1 to string
002EF7  1  20 29 39             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002EFA  1  A0 00                LDY     #$00            ; clear index
002EFC  1               
002EFC  1               ; don't check fit if terminal width byte is zero
002EFC  1               
002EFC  1  A5 0F                LDA     <TWidth         ; get terminal width byte
002EFE  1  F0 20                BEQ     LAB_185E        ; skip check if zero
002F00  1               
002F00  1  8B 48 DA A2          FETCHINDIRECTY des_pl
002F04  1  01 B5 AE C9  
002F08  1  00 D0 04 A2  
002F16  1  38                   SEC                     ; set carry for subtract
002F17  1  E5 0E                SBC     <TPos           ; subtract terminal position
002F19  1  E5 04                SBC     <TMPFLG         ; subtract string length
002F1B  1  B0 03                BCS     LAB_185E        ; branch if less than terminal width
002F1D  1               
002F1D  1  20 2E 2F             JSR     LAB_CRLF        ; else print CR/LF
002F20  1               LAB_185E:
002F20  1  20 79 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
002F23  1  F0 B2                BEQ     LAB_182C        ; always go continue processing line
002F25  1               
002F25  1               ; CR/LF return to BASIC from BASIC input handler
002F25  1               
002F25  1               LAB_1866:
002F25  1  A9 00                LDA     #$00            ; clear byte
002F27  1  9D 81 21             STA     Ibuffs,X        ; null terminate input
002F2A  1  A2 81                LDX     #<Ibuffs        ; set X to buffer start-1 low byte
002F2C  1  A0 21                LDY     #>Ibuffs        ; set Y to buffer start-1 high byte
002F2E  1               ; print CR/LF
002F2E  1               
002F2E  1               LAB_CRLF:
002F2E  1  A9 0D                LDA     #$0D            ; load [CR]
002F30  1  20 A4 2F             JSR     LAB_PRNA        ; go print the character
002F33  1  A9 0A                LDA     #$0A            ; load [LF]
002F35  1  D0 6D                BNE     LAB_PRNA        ; go print the character and return, branch always
002F37  1               LAB_188B:
002F37  1  A5 0E                LDA     <TPos           ; get terminal position
002F39  1  C5 10                CMP     <Iclim          ; compare with input column limit
002F3B  1  90 05                BCC     LAB_1897        ; branch if less
002F3D  1               
002F3D  1  20 2E 2F             JSR     LAB_CRLF        ; else print CR/LF (next line)
002F40  1  D0 2A                BNE     LAB_18BD        ; continue with PRINT processing (branch always)
002F42  1               
002F42  1               LAB_1897:
002F42  1  38                   SEC                     ; set carry for subtract
002F43  1               LAB_1898:
002F43  1  E5 64                SBC     <TabSiz         ; subtract TAB size
002F45  1  B0 FC                BCS     LAB_1898        ; loop if result was +ve
002F47  1               
002F47  1  49 FF                EOR     #$FF            ; complement it
002F49  1  69 01                ADC     #$01            ; +1 (twos complement)
002F4B  1  D0 15                BNE     LAB_18B6        ; always print A spaces (result is never $00)
002F4D  1               
002F4D  1               ; do TAB/SPC
002F4D  1               LAB_18A2:
002F4D  1  48                   PHA                     ; save token
002F4E  1  20 8B 3E             JSR     LAB_SGBY        ; scan and get byte parameter
002F51  1  C9 29                CMP     #$29            ; is next character )
002F53  1  F0 03                BEQ     LAB_18A2aa
002F55  1               ;BNE	LAB_1910		; if not do syntax error then warm start
002F55  1  4C EB 2F             JMP     LAB_1910        ; if not do syntax error then warm start
002F58  1               LAB_18A2aa:
002F58  1  68                   PLA                     ; get token back
002F59  1  C9 BC                CMP     #TK_TAB         ; was it TAB ?
002F5B  1  D0 06                BNE     LAB_18B7        ; if not go do SPC
002F5D  1               
002F5D  1               ; calculate TAB offset
002F5D  1  8A                   TXA                     ; copy integer value to A
002F5E  1  E5 0E                SBC     <TPos           ; subtract terminal position
002F60  1  90 0A                BCC     LAB_18BD        ; branch if result was < 0 (can't TAB backwards)
002F62  1               
002F62  1               ; print A spaces
002F62  1               LAB_18B6:
002F62  1  AA                   TAX                     ; copy result to X
002F63  1               LAB_18B7:
002F63  1  8A                   TXA                     ; set flags on size for SPC
002F64  1  F0 06                BEQ     LAB_18BD        ; branch if result was = $0, already here
002F66  1               
002F66  1               ; print X spaces
002F66  1               LAB_18BA:
002F66  1  20 9F 2F             JSR     LAB_18E0        ; print " "
002F69  1  CA                   DEX                     ; decrement count
002F6A  1  D0 FA                BNE     LAB_18BA        ; loop if not all done
002F6C  1               
002F6C  1               ; continue with PRINT processing
002F6C  1               LAB_18BD:
002F6C  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
002F70  1  F0 03                BEQ     LAB_18BDA
002F72  1  4C DD 2E             JMP     LAB_1831        ; if more to print go do it
002F75  1               LAB_18BDA:
002F75  1  60                   RTS
002F76  1               
002F76  1               ; print null terminated string from memory
002F76  1               
002F76  1               LAB_18C3:
002F76  1  20 29 39             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
002F79  1               
002F79  1               ; print string from <Sutill/<Sutilh
002F79  1               
002F79  1               LAB_18C6:
002F79  1  20 06 3C             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
002F7C  1               ; space returns with A = length, X=$71=pointer low byte,
002F7C  1               ; Y=$72=pointer high byte
002F7C  1  A0 00                LDY     #$00            ; reset index
002F7E  1  AA                   TAX                     ; copy length to X
002F7F  1  F0 5D                BEQ     LAB_188C        ; exit (RTS) if null string
002F81  1               LAB_18CD:
002F81  1               
002F81  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get next byte
002F85  1  B5 71 C9 00  
002F89  1  D0 04 A2 00  
002F97  1  20 A4 2F             JSR     LAB_PRNA        ; go print the character
002F9A  1  C8                   INY                     ; increment index
002F9B  1  CA                   DEX                     ; decrement count
002F9C  1  D0 E3                BNE     LAB_18CD        ; loop if not done yet
002F9E  1  60                   RTS
002F9F  1               
002F9F  1               ; Print single format character
002F9F  1               ; print " "
002F9F  1               
002F9F  1               LAB_18E0:
002F9F  1  A9 20                LDA     #$20            ; load " "
002FA1  1  2C                   .BYTE   $2C             ; change next line to BIT LAB_3FA9
002FA2  1               
002FA2  1               ; print "?" character
002FA2  1               
002FA2  1               LAB_18E3:
002FA2  1  A9 3F                LDA     #$3F            ; load "?" character
002FA4  1               
002FA4  1               ; print character in A
002FA4  1               ; now includes the null handler
002FA4  1               ; also includes infinite line length code
002FA4  1               ; note! some routines expect this one to exit with Zb=0
002FA4  1               
002FA4  1               LAB_PRNA:
002FA4  1  C9 20                CMP     #' '            ; compare with " "
002FA6  1  90 19                BCC     LAB_18F9        ; branch if less (non printing)
002FA8  1               
002FA8  1               ; else printable character
002FA8  1  48                   PHA                     ; save the character
002FA9  1               
002FA9  1               ; don't check fit if terminal width byte is zero
002FA9  1               
002FA9  1  A5 0F                LDA     <TWidth         ; get terminal width
002FAB  1  D0 0A                BNE     LAB_18F0        ; branch if not zero (not infinite length)
002FAD  1               
002FAD  1               ; is "infinite line" so check TAB position
002FAD  1               
002FAD  1  A5 0E                LDA     <TPos           ; get position
002FAF  1  E5 64                SBC     <TabSiz         ; subtract TAB size, carry set by CMP #$20 above
002FB1  1  D0 0B                BNE     LAB_18F7        ; skip reset if different
002FB3  1               
002FB3  1  85 0E                STA     <TPos           ; else reset position
002FB5  1  F0 07                BEQ     LAB_18F7        ; go print character
002FB7  1               
002FB7  1               LAB_18F0:
002FB7  1  C5 0E                CMP     <TPos           ; compare with terminal character position
002FB9  1  D0 03                BNE     LAB_18F7        ; branch if not at end of line
002FBB  1               
002FBB  1  20 2E 2F             JSR     LAB_CRLF        ; else print CR/LF
002FBE  1               LAB_18F7:
002FBE  1  E6 0E                INC     <TPos           ; increment terminal position
002FC0  1  68                   PLA                     ; get character back
002FC1  1               LAB_18F9:
002FC1  1  20 89 18             JSR     V_OUTP          ; output byte via output vector
002FC4  1  C9 0D                CMP     #$0D            ; compare with [CR]
002FC6  1  D0 14                BNE     LAB_188A        ; branch if not [CR]
002FC8  1               
002FC8  1               ; else print nullct nulls after the [CR]
002FC8  1  86 78                STX     <TempB          ; save buffer index
002FCA  1  A6 0D                LDX     <Nullct         ; get null count
002FCC  1  F0 0A                BEQ     LAB_1886        ; branch if no nulls
002FCE  1               
002FCE  1  A9 00                LDA     #$00            ; load [NULL]
002FD0  1               LAB_1880:
002FD0  1  20 A4 2F             JSR     LAB_PRNA        ; go print the character
002FD3  1  CA                   DEX                     ; decrement count
002FD4  1  D0 FA                BNE     LAB_1880        ; loop if not all done
002FD6  1               
002FD6  1  A9 0D                LDA     #$0D            ; restore the character (and set the flags)
002FD8  1               LAB_1886:
002FD8  1  86 0E                STX     <TPos           ; clear terminal position (X always = zero when we get here)
002FDA  1  A6 78                LDX     <TempB          ; restore buffer index
002FDC  1               LAB_188A:
002FDC  1  29 FF                AND     #$FF            ; set the flags
002FDE  1               LAB_188C:
002FDE  1  60                   RTS
002FDF  1               
002FDF  1               ; handle bad input data
002FDF  1               
002FDF  1               LAB_1904:
002FDF  1  A5 62                LDA     <Imode          ; get input mode flag, $00=INPUT, $00=READ
002FE1  1  10 0B                BPL     LAB_1913        ; branch if INPUT (go do redo)
002FE3  1               
002FE3  1  A5 8D                LDA     <Dlinel         ; get current DATA line low byte
002FE5  1  A4 8E                LDY     <Dlineh         ; get current DATA line high byte
002FE7  1  85 87                STA     <Clinel         ; save current line low byte
002FE9  1  84 88                STY     <Clineh         ; save current line high byte
002FEB  1               LAB_1910:
002FEB  1  4C 19 33             JMP     LAB_SNER        ; do syntax error then warm start
002FEE  1               
002FEE  1               ; mode was INPUT
002FEE  1               LAB_1913:
002FEE  1  A9 B9                LDA     #<LAB_REDO      ; point to redo message (low addr)
002FF0  1  A0 17                LDY     #>LAB_REDO      ; point to redo message (high addr)
002FF2  1  20 76 2F             JSR     LAB_18C3        ; print null terminated string from memory
002FF5  1  A5 8B                LDA     <Cpntrl         ; get continue pointer low byte
002FF7  1  A4 8C                LDY     <Cpntrh         ; get continue pointer high byte
002FF9  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
002FFB  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
002FFD  1  60                   RTS
002FFE  1               
002FFE  1               ; perform INPUT
002FFE  1               
002FFE  1               LAB_INPUT:
002FFE  1  C9 22                CMP     #$22            ; compare next byte with open quote
003000  1  D0 0B                BNE     LAB_1934        ; branch if no prompt string
003002  1               
003002  1  20 D2 32             JSR     LAB_1BC1        ; print "..." string
003005  1  A9 3B                LDA     #$3B            ; load A with ";"
003007  1  20 06 33             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
00300A  1  20 79 2F             JSR     LAB_18C6        ; print string from <Sutill/<Sutilh
00300D  1               
00300D  1               ; done with prompt, now get data
00300D  1               LAB_1934:
00300D  1  20 BF 37             JSR     LAB_CKRN        ; check not Direct, back here if ok
003010  1  20 DA 27             JSR     LAB_INLN        ; print "? " and get BASIC input
003013  1  A9 00                LDA     #$00            ; set mode = INPUT
003015  1               ;CMP	Ibuffs			; test first byte in buffer
003015  1  80 06                BRA     LAB_1953        ; branch if not null input
003017  1               
003017  1               ;CLC				; was null input so clear carry to exit program
003017  1               ;JMP	LAB_1647		; go do BREAK exit
003017  1               
003017  1               ; perform READ
003017  1               
003017  1               LAB_READ:
003017  1  A6 8F                LDX     <Dptrl          ; get DATA pointer low byte
003019  1  A4 90                LDY     <Dptrh          ; get DATA pointer high byte
00301B  1  A9 80                LDA     #$80            ; set mode = READ
00301D  1               
00301D  1               LAB_1953:
00301D  1  85 62                STA     <Imode          ; set input mode flag, $00=INPUT, $80=READ
00301F  1  86 91                STX     <Rdptrl         ; save READ pointer low byte
003021  1  84 92                STY     <Rdptrh         ; save READ pointer high byte
003023  1               
003023  1               ; READ or INPUT next variable from list
003023  1               LAB_195B:
003023  1  20 F0 34             JSR     LAB_GVAR        ; get (var) address
003026  1  85 97                STA     <Lvarpl         ; save address low byte
003028  1  84 98                STY     <Lvarph         ; save address high byte
00302A  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
00302C  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
00302E  1  85 11                STA     <Itempl         ; save as temporary integer low byte
003030  1  84 12                STY     <Itemph         ; save as temporary integer high byte
003032  1  A6 91                LDX     <Rdptrl         ; get READ pointer low byte
003034  1  A4 92                LDY     <Rdptrh         ; get READ pointer high byte
003036  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
003038  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
00303A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00303E  1  D0 0C                BNE     LAB_1988        ; branch if not null
003040  1               
003040  1               ; pointer was to null entry
003040  1  24 62                BIT     <Imode          ; test input mode flag, $00=INPUT, $80=READ
003042  1  30 63                BMI     LAB_19DD        ; branch if READ
003044  1               
003044  1               ; mode was INPUT
003044  1               ;JSR	LAB_18E3		; print "?" character (double ? for extended input)
003044  1               ;JSR	LAB_INLN		; print "? " and get BASIC input
003044  1  86 C3                STX     <Bpntrl         ; set BASIC execute pointer low byte
003046  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
003048  1               LAB_1985:
003048  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00304C  1               LAB_1988:
00304C  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
00304E  1  10 24                BPL     LAB_19B0        ; branch if numeric
003050  1               
003050  1               ; else get string
003050  1  85 5B                STA     <Srchc          ; save search character
003052  1  C9 22                CMP     #$22            ; was it " ?
003054  1  F0 07                BEQ     LAB_1999        ; branch if so
003056  1               
003056  1  A9 3A                LDA     #':'            ; else search character is ":"
003058  1  85 5B                STA     <Srchc          ; set new search character
00305A  1  A9 2C                LDA     #','            ; other search character is ","
00305C  1  18                   CLC                     ; clear carry for add
00305D  1               LAB_1999:
00305D  1  85 5C                STA     <Asrch          ; set second search character
00305F  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
003061  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003063  1               
003063  1  69 00                ADC     #$00            ; c is =1 if we came via the BEQ LAB_1999, else =0
003065  1  90 01                BCC     LAB_19A4        ; branch if no execute pointer low byte rollover
003067  1               
003067  1  C8                   INY                     ; else increment high byte
003068  1               LAB_19A4:
003068  1  20 2F 39             JSR     LAB_20B4        ; print <Srchc or <Asrch terminated string to <Sutill/<Sutilh
00306B  1  20 11 3F             JSR     LAB_23F3        ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
00306E  1  20 8D 2D             JSR     LAB_17D5        ; go do string LET
003071  1  4C 7A 30             JMP     LAB_19B6        ; go check string terminator
003074  1               
003074  1               ; get numeric INPUT
003074  1               LAB_19B0:
003074  1  20 9A 45             JSR     LAB_2887        ; get FAC1 from string
003077  1  20 E3 43             JSR     LAB_PFAC        ; pack FAC1 into (<Lvarpl)
00307A  1               LAB_19B6:
00307A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00307E  1  F0 0B                BEQ     LAB_19C5        ; branch if null (last entry)
003080  1               
003080  1  C9 2C                CMP     #','            ; else compare with ","
003082  1  F0 03                BEQ     LAB_19C2        ; branch if ","
003084  1               
003084  1  4C DF 2F             JMP     LAB_1904        ; else go handle bad input data
003087  1               
003087  1               ; got good input data
003087  1               LAB_19C2:
003087  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00308B  1               LAB_19C5:
00308B  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte (temp READ/INPUT ptr)
00308D  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte (temp READ/INPUT ptr)
00308F  1  85 91                STA     <Rdptrl         ; save for now
003091  1  84 92                STY     <Rdptrh         ; save for now
003093  1  A5 11                LDA     <Itempl         ; get temporary integer low byte (temp BASIC execute ptr)
003095  1  A4 12                LDY     <Itemph         ; get temporary integer high byte (temp BASIC execute ptr)
003097  1  85 C3                STA     <Bpntrl         ; set BASIC execute pointer low byte
003099  1  84 C4                STY     <Bpntrh         ; set BASIC execute pointer high byte
00309B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00309F  1  F0 30                BEQ     LAB_1A03        ; if null go do extra ignored message
0030A1  1               
0030A1  1  20 15 33             JSR     LAB_1C01        ; else scan for "," , else do syntax error then warm start
0030A4  1  4C 23 30             JMP     LAB_195B        ; go INPUT next variable from list
0030A7  1               
0030A7  1               ; find next DATA statement or do "Out of DATA" error
0030A7  1               LAB_19DD:
0030A7  1  20 5D 2C             JSR     LAB_SNBS        ; scan for next BASIC statement ([:] or [EOL])
0030AA  1  C8                   INY                     ; increment index
0030AB  1  AA                   TAX                     ; copy character ([:] or [EOL])
0030AC  1  D0 15                BNE     LAB_19F6        ; branch if [:]
0030AE  1               
0030AE  1  A2 06                LDX     #$06            ; set for "Out of DATA" error
0030B0  1  C8                   INY                     ; increment index, now points to next line pointer high byte
0030B1  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line pointer high byte
0030B3  1  D0 03                BNE     LAB_19DE        ; branch if NOT end (eventually does error X)
0030B5  1  4C 72 31             JMP     LAB_1A54
0030B8  1               LAB_19DE:
0030B8  1  C8                   INY                     ; increment index
0030B9  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # low byte
0030BB  1  85 8D                STA     <Dlinel         ; save current DATA line low byte
0030BD  1  C8                   INY                     ; increment index
0030BE  1  B1 C3                LDA     (<Bpntrl),Y     ; get next line # high byte
0030C0  1  C8                   INY                     ; increment index
0030C1  1  85 8E                STA     <Dlineh         ; save current DATA line high byte
0030C3  1               LAB_19F6:
0030C3  1  B1 C3                LDA     (<Bpntrl),Y     ; get byte
0030C5  1  C8                   INY                     ; increment index
0030C6  1  AA                   TAX                     ; copy to X
0030C7  1  20 4F 2C             JSR     LAB_170F        ; set BASIC execute pointer
0030CA  1  E0 83                CPX     #TK_DATA        ; compare with "DATA" token
0030CC  1  D0 D9                BNE     LAB_19DD        ; go find next statement if not "DATA"
0030CE  1  4C 48 30             JMP     LAB_1985        ; was "DATA" so go do next READ
0030D1  1               
0030D1  1               ; end of INPUT/READ routine
0030D1  1               
0030D1  1               LAB_1A03:
0030D1  1  A5 91                LDA     <Rdptrl         ; get temp READ pointer low byte
0030D3  1  A4 92                LDY     <Rdptrh         ; get temp READ pointer high byte
0030D5  1  A6 62                LDX     <Imode          ; get input mode flag, $00=INPUT, $80=READ
0030D7  1  10 03                BPL     LAB_1A0E        ; branch if INPUT
0030D9  1               
0030D9  1  4C 07 2B             JMP     LAB_1624        ; save AY as DATA pointer and return
0030DC  1               
0030DC  1               ; we were getting INPUT
0030DC  1               LAB_1A0E:
0030DC  1  A0 00                LDY     #$00            ; clear index
0030DE  1  8B DA A2 01          LDAINDIRECTY Rdptrl     ; get next byte
0030E2  1  B5 91 C9 00  
0030E6  1  D0 04 A2 00  
0030F4  1  D0 01                BNE     LAB_1A1B        ; error if not end of INPUT
0030F6  1               
0030F6  1  60                   RTS
0030F7  1               
0030F7  1               ; user typed too much
0030F7  1               LAB_1A1B:
0030F7  1  A9 A8                LDA     #<LAB_IMSG      ; point to extra ignored message (low addr)
0030F9  1  A0 17                LDY     #>LAB_IMSG      ; point to extra ignored message (high addr)
0030FB  1  4C 76 2F             JMP     LAB_18C3        ; print null terminated string from memory and return
0030FE  1               
0030FE  1               ; search the stack for FOR activity
0030FE  1               ; exit with z=1 if FOR else exit with z=0
0030FE  1               
0030FE  1               LAB_11A1:
0030FE  1  C2 10                INDEX16
003100  1  BA                   TSX                     ; copy stack pointer
003101  1  E8                   INX                     ; +1 pass return address
003102  1  E8                   INX                     ; +2 pass return address
003103  1  E8                   INX                     ; +3 pass calling routine return address
003104  1  E8                   INX                     ; +4 pass calling routine return address
003105  1               LAB_11A6:
003105  1  8B                   PHB
003106  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
003108  1  48                   PHA
003109  1  AB                   PLB
00310A  1  BD 01 00             LDA     a:1,X           ; get token byte from stack
00310D  1  AB                   PLB
00310E  1  C9 81                CMP     #TK_FOR         ; is it FOR token
003110  1  D0 47                BNE     LAB_11CE        ; exit if not FOR token
003112  1               
003112  1               ; was FOR token
003112  1  A5 98                LDA     <Frnxth         ; get var pointer for FOR/NEXT high byte
003114  1  D0 10                BNE     LAB_11BB        ; branch if not null
003116  1               
003116  1  8B                   PHB
003117  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
003119  1  48                   PHA
00311A  1  AB                   PLB
00311B  1  BD 02 00             LDA     a:2,X           ; get FOR variable pointer low byte
00311E  1  85 97                STA     <Frnxtl         ; save var pointer for FOR/NEXT low byte
003120  1  BD 03 00             LDA     a:3,X           ; get FOR variable pointer high byte
003123  1  85 98                STA     <Frnxth         ; save var pointer for FOR/NEXT high byte
003125  1  AB                   PLB
003126  1               LAB_11BB:
003126  1  8B                   PHB
003127  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
003129  1  48                   PHA
00312A  1  AB                   PLB
00312B  1  BD 03 00             LDA     a:3,X
00312E  1  85 04                STA     <TMPFLG
003130  1  AB                   PLB
003131  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
003133  1  D0 11                BNE     LAB_11C7        ; branch if no match
003135  1               
003135  1  A5 97                LDA     <Frnxtl         ; get var pointer for FOR/NEXT low byte
003137  1  8B                   PHB
003138  1  A9 00                LDA     #$00            ; WANT TO ACCESS ZERO BANK FOR STACK
00313A  1  48                   PHA
00313B  1  AB                   PLB
00313C  1  BD 02 00             LDA     a:2,X
00313F  1  85 04                STA     <TMPFLG
003141  1  AB                   PLB
003142  1  C5 04                CMP     <TMPFLG         ; compare var pointer with stacked var pointer (high byte)
003144  1  F0 13                BEQ     LAB_11CE        ; exit if match found
003146  1               
003146  1               LAB_11C7:
003146  1  E8                   INX
003147  1  E8                   INX
003148  1  E8                   INX
003149  1  E8                   INX
00314A  1  E8                   INX
00314B  1  E8                   INX
00314C  1  E8                   INX
00314D  1  E8                   INX
00314E  1  E8                   INX
00314F  1  E8                   INX
003150  1  E8                   INX
003151  1  E8                   INX
003152  1  E8                   INX
003153  1  E8                   INX
003154  1  E8                   INX
003155  1  E8                   INX
003156  1  9A                   TXS                     ; copy back to index
003157  1  D0 AC                BNE     LAB_11A6        ; loop if not at start of stack
003159  1               LAB_11CE:
003159  1  86 FD                STX     <TEMPW
00315B  1  E2 10                INDEX8
00315D  1  60                   RTS
00315E  1               
00315E  1               ; perform NEXT
00315E  1               
00315E  1               LAB_NEXT:
00315E  1  D0 04                BNE     LAB_1A46        ; branch if NEXT var
003160  1               
003160  1  A0 00                LDY     #$00            ; else clear Y
003162  1  F0 03                BEQ     LAB_1A49        ; branch always (no variable to search for)
003164  1               
003164  1               ; NEXT var
003164  1               
003164  1               LAB_1A46:
003164  1  20 F0 34             JSR     LAB_GVAR        ; get variable address
003167  1               LAB_1A49:
003167  1  85 97                STA     <Frnxtl         ; store variable pointer low byte
003169  1  84 98                STY     <Frnxth         ; store variable pointer high byte
00316B  1               ; (both cleared if no variable defined)
00316B  1  20 FE 30             JSR     LAB_11A1        ; search the stack for FOR activity
00316E  1  F0 04                BEQ     LAB_1A56        ; branch if found
003170  1               
003170  1  A2 00                LDX     #$00            ; else set error $00 ("NEXT without FOR" error)
003172  1               LAB_1A54:
003172  1  F0 7C                BEQ     LAB_1ABE        ; do error #X, then warm start
003174  1               
003174  1               
003174  1               LAB_1A56:
003174  1  C2 30                ACCUMULATORINDEX16
003176  1  A6 FD                LDX     <TEMPW
003178  1  9A                   TXS                     ; set stack pointer, X set by search, dumps return addresses
003179  1  8A                   TXA                     ; copy stack pointer
00317A  1  18                   CLC                     ; CLEAR carry
00317B  1               
00317B  1  69 09 00             ADC     #$0009          ; point to TO var
00317E  1  85 73                STA     <ut2_pl         ; save pointer to TO var for compare
003180  1  38                   SEC
003181  1  E9 05 00             SBC     #$0005          ; point to STEP var
003184  1  85 FD                STA     <TEMPW
003186  1               
003186  1  E2 30                ACCUMULATORINDEX8
003188  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
00318A  1               
00318A  1  8B                   PHB                     ; ensure UNPACK works in stack bank not data bank
00318B  1  DA                   PHX
00318C  1  A2 00                LDX     #$00
00318E  1  DA                   PHX
00318F  1  AB                   PLB
003190  1  FA                   PLX
003191  1  20 6D 43             JSR     LAB_UFAC        ; unpack memory (STEP value) into FAC1
003194  1  AB                   PLB
003195  1               
003195  1  A3 08                LDA     8,S             ; get step sign
003197  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
003199  1  A5 97                LDA     <Frnxtl         ; get FOR variable pointer low byte
00319B  1  A4 98                LDY     <Frnxth         ; get FOR variable pointer high byte
00319D  1  20 58 40             JSR     LAB_246C        ; add (FOR variable) to FAC1
0031A0  1  20 E3 43             JSR     LAB_PFAC        ; pack FAC1 into (FOR variable)
0031A3  1  A4 FE                LDY     <TEMPW+1        ; point to stack page high byte
0031A5  1               
0031A5  1  8B                   PHB                     ; ensure compare works in stack bank not data bank
0031A6  1  DA                   PHX
0031A7  1  A2 00                LDX     #$00
0031A9  1  DA                   PHX
0031AA  1  AB                   PLB
0031AB  1  FA                   PLX
0031AC  1               
0031AC  1  20 A9 44             JSR     LAB_27FA        ; compare FAC1 with (Y,<ut2_pl) (TO value)
0031AF  1  AB                   PLB
0031B0  1               
0031B0  1               
0031B0  1  C3 08                CMP     8,S             ; compare step sign
0031B2  1  F0 13                BEQ     LAB_1A9B        ; branch if = (loop complete)
0031B4  1               ;
0031B4  1               ;					; loop back and do it all again
0031B4  1  A3 0D                LDA     $0D,S           ; get FOR line low byte
0031B6  1  85 87                STA     <Clinel         ; save current line low byte
0031B8  1  A3 0E                LDA     $0E,S           ; get FOR line high byte
0031BA  1  85 88                STA     <Clineh         ; save current line high byte
0031BC  1  A3 10                LDA     $10,S           ; get BASIC execute pointer low byte
0031BE  1  85 C3                STA     <Bpntrl         ; save BASIC execute pointer low byte
0031C0  1  A3 0F                LDA     $0F,S           ; get BASIC execute pointer high byte
0031C2  1  85 C4                STA     <Bpntrh         ; save BASIC execute pointer high byte
0031C4  1               LAB_1A98:
0031C4  1  4C 72 2A             JMP     LAB_15C2        ; go do interpreter inner loop
0031C7  1               ;
0031C7  1               ;					; loop complete so carry on
0031C7  1               LAB_1A9B:
0031C7  1               
0031C7  1               
0031C7  1  C2 30                ACCUMULATORINDEX16
0031C9  1  3B                   TSC                     ; stack copy to A
0031CA  1               ;;;;;;;;;;;;;;;;;;; THIS MAY NOT BE RIGHT !@#$%^&* TAG
0031CA  1  69 0F 00             ADC     #$000F          ; add $10 ($0F+carry) to dump FOR structure
0031CD  1  1B                   TCS                     ; copy back to index
0031CE  1  E2 30                ACCUMULATORINDEX8
0031D0  1               
0031D0  1               
0031D0  1               
0031D0  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0031D4  1  C9 2C                CMP     #','            ; compare with ","
0031D6  1  D0 EC                BNE     LAB_1A98        ; branch if not "," (go do interpreter inner loop)
0031D8  1               
0031D8  1               ; was "," so another NEXT variable to do
0031D8  1  22 BC 00 00          JSL     LAB_IGBY        ; else increment and scan memory
0031DC  1  20 64 31             JSR     LAB_1A46        ; do NEXT (var)
0031DF  1               
0031DF  1               ; evaluate expression and check is numeric, else do type mismatch
0031DF  1               
0031DF  1               LAB_EVNM:
0031DF  1  20 F3 31             JSR     LAB_EVEX        ; evaluate expression
0031E2  1               
0031E2  1               ; check if source is numeric, else do type mismatch
0031E2  1               
0031E2  1               LAB_CTNM:
0031E2  1  18                   CLC                     ; destination is numeric
0031E3  1  24                   .BYTE   $24             ; makes next line BIT $38
0031E4  1               
0031E4  1               ; check if source is string, else do type mismatch
0031E4  1               
0031E4  1               LAB_CTST:
0031E4  1  38                   SEC                     ; required type is string
0031E5  1               
0031E5  1               ; type match check, set C for string, clear C for numeric
0031E5  1               
0031E5  1               LAB_CKTM:
0031E5  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
0031E7  1  30 03                BMI     LAB_1ABA        ; branch if data type is string
0031E9  1               
0031E9  1               ; else data type was numeric
0031E9  1  B0 03                BCS     LAB_1ABC        ; if required type is string do type mismatch error
0031EB  1               LAB_1AB9:
0031EB  1  60                   RTS
0031EC  1               
0031EC  1               ; data type was string, now check required type
0031EC  1               LAB_1ABA:
0031EC  1  B0 FD                BCS     LAB_1AB9        ; exit if required type is string
0031EE  1               
0031EE  1               ; else do type mismatch error
0031EE  1               LAB_1ABC:
0031EE  1  A2 18                LDX     #$18            ; error code $18 ("Type mismatch" error)
0031F0  1               LAB_1ABE:
0031F0  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
0031F3  1               
0031F3  1               ; evaluate expression
0031F3  1               
0031F3  1               LAB_EVEX:
0031F3  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
0031F5  1  D0 02                BNE     LAB_1AC7        ; skip next if not zero
0031F7  1               
0031F7  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
0031F9  1               LAB_1AC7:
0031F9  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
0031FB  1               
0031FB  1               LAB_EVEZ:
0031FB  1  A9 00                LDA     #$00            ; set null precedence (flag done)
0031FD  1               LAB_1ACC:
0031FD  1  48                   PHA                     ; push precedence byte
0031FE  1  A9 02                LDA     #$02            ; 2 bytes
003200  1  20 8C 26             JSR     LAB_1212        ; check room on stack for A bytes
003203  1  20 E1 32             JSR     LAB_GVAL        ; get value from line
003206  1  A9 00                LDA     #$00            ; clear A
003208  1  85 9B                STA     <comp_f         ; clear compare function flag
00320A  1               LAB_1ADB:
00320A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00320E  1               LAB_1ADE:
00320E  1  38                   SEC                     ; set carry for subtract
00320F  1  E9 D1                SBC     #TK_GT          ; subtract token for > (lowest comparison function)
003211  1  90 18                BCC     LAB_1AFA        ; branch if < TK_GT
003213  1               
003213  1  C9 03                CMP     #$03            ; compare with ">" to "<" tokens
003215  1  B0 14                BCS     LAB_1AFA        ; branch if >= TK_SGN (highest evaluation function +1)
003217  1               
003217  1               ; was token for > = or < (A = 0, 1 or 2)
003217  1  C9 01                CMP     #$01            ; compare with token for =
003219  1  2A                   ROL     A               ; *2, b0 = carry (=1 if token was = or <)
00321A  1               ; (A = 0, 3 or 5)
00321A  1  49 01                EOR     #$01            ; toggle b0
00321C  1               ; (A = 1, 2 or 4. 1 if >, 2 if =, 4 if <)
00321C  1  45 9B                EOR     <comp_f         ; EOR with compare function flag bits
00321E  1  C5 9B                CMP     <comp_f         ; compare with compare function flag
003220  1  90 68                BCC     LAB_1B53        ; if <(<comp_f) do syntax error then warm start
003222  1               ; was more than one <, = or >)
003222  1               
003222  1  85 9B                STA     <comp_f         ; save new compare function flag
003224  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003228  1  4C 0E 32             JMP     LAB_1ADE        ; go do next character
00322B  1               
00322B  1               ; token is < ">" or > "<" tokens
00322B  1               LAB_1AFA:
00322B  1  A6 9B                LDX     <comp_f         ; get compare function flag
00322D  1  D0 2C                BNE     LAB_1B2A        ; branch if compare function
00322F  1               
00322F  1  B0 79                BCS     LAB_1B78        ; go do functions
003231  1               
003231  1               ; else was <  TK_GT so is operator or lower
003231  1  69 0A                ADC     #TK_GT-TK_PLUS  ; add # of operators (+, -, *, /, ^, AND, OR or EOR)
003233  1  90 75                BCC     LAB_1B78        ; branch if < + operator
003235  1               
003235  1               ; carry was set so token was +, -, *, /, ^, AND, OR or EOR
003235  1  D0 07                BNE     LAB_1B0B        ; branch if not + token
003237  1               
003237  1  24 5F                BIT     <Dtypef         ; test data type flag, $FF=string, $00=numeric
003239  1  10 03                BPL     LAB_1B0B        ; branch if not string
00323B  1               
00323B  1               ; will only be $00 if type is string and token was +
00323B  1  4C 0D 3B             JMP     LAB_224D        ; add strings, string 1 is in descriptor <des_pl, string 2
00323E  1               ; is in line, and return
00323E  1               
00323E  1               LAB_1B0B:
00323E  1  85 71                STA     <ut1_pl         ; save it
003240  1  0A                   ASL     A               ; *2
003241  1  65 71                ADC     <ut1_pl         ; *3
003243  1  A8                   TAY                     ; copy to index
003244  1               LAB_1B13:
003244  1  68                   PLA                     ; pull previous precedence
003245  1  D9 40 11             CMP     LAB_OPPT,Y      ; compare with precedence byte
003248  1  B0 65                BCS     LAB_1B7D        ; branch if A >=
00324A  1               
00324A  1  20 E2 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
00324D  1               LAB_1B1C:
00324D  1  48                   PHA                     ; save precedence
00324E  1               LAB_1B1D:
00324E  1  20 76 32             JSR     LAB_1B43        ; get vector, execute function then continue evaluation
003251  1  68                   PLA                     ; restore precedence
003252  1  A4 99                LDY     <prstk          ; get precedence stacked flag
003254  1  10 19                BPL     LAB_1B3C        ; branch if stacked values
003256  1               
003256  1  AA                   TAX                     ; copy precedence (set flags)
003257  1  F0 76                BEQ     LAB_1B9D        ; exit if done
003259  1               
003259  1  D0 5D                BNE     LAB_1B86        ; else pop FAC2 and return, branch always
00325B  1               
00325B  1               LAB_1B2A:
00325B  1  26 5F                ROL     <Dtypef         ; shift data type flag into Cb
00325D  1  8A                   TXA                     ; copy compare function flag
00325E  1  85 5F                STA     <Dtypef         ; clear data type flag, X is 0xxx xxxx
003260  1  2A                   ROL     A               ; shift data type into compare function byte b0
003261  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
003263  1  D0 02                BNE     LAB_1B34        ; branch if no underflow
003265  1               
003265  1  C6 C4                DEC     <Bpntrh         ; else decrement BASIC execute pointer high byte
003267  1               LAB_1B34:
003267  1  C6 C3                DEC     <Bpntrl         ; decrement BASIC execute pointer low byte
003269  1               TK_LT_PLUS      = TK_LT-TK_PLUS
003269  1  A0 24                LDY     #TK_LT_PLUS*3   ; set offset to last operator entry
00326B  1  85 9B                STA     <comp_f         ; save new compare function flag
00326D  1  D0 D5                BNE     LAB_1B13        ; branch always
00326F  1               
00326F  1               LAB_1B3C:
00326F  1  D9 40 11             CMP     LAB_OPPT,Y      ;.compare with stacked function precedence
003272  1  B0 44                BCS     LAB_1B86        ; branch if A >=, pop FAC2 and return
003274  1               
003274  1  90 D7                BCC     LAB_1B1C        ; branch always
003276  1               
003276  1               ;.get vector, execute function then continue evaluation
003276  1               
003276  1               LAB_1B43:
003276  1  B9 42 11             LDA     LAB_OPPT+2,Y    ; get function vector high byte
003279  1  48                   PHA                     ; onto stack
00327A  1  B9 41 11             LDA     LAB_OPPT+1,Y    ; get function vector low byte
00327D  1  48                   PHA                     ; onto stack
00327E  1               ; now push sign, round FAC1 and put on stack
00327E  1  20 8D 32             JSR     LAB_1B5B        ; function will return here, then the next RTS will call
003281  1               ; the function
003281  1  A5 9B                LDA     <comp_f         ; get compare function flag
003283  1  48                   PHA                     ; push compare evaluation byte
003284  1  B9 40 11             LDA     LAB_OPPT,Y      ; get precedence byte
003287  1  4C FD 31             JMP     LAB_1ACC        ; continue evaluating expression
00328A  1               
00328A  1               LAB_1B53:
00328A  1  4C 19 33             JMP     LAB_SNER        ; do syntax error then warm start
00328D  1               
00328D  1               ; push sign, round FAC1 and put on stack
00328D  1               
00328D  1               LAB_1B5B:
00328D  1  68                   PLA                     ; get return addr low byte
00328E  1  85 71                STA     <ut1_pl         ; save it
003290  1  E6 71                INC     <ut1_pl         ; increment it (was ret-1 pushed? yes!)
003292  1               ; note! no check is made on the high byte! if the calling
003292  1               ; routine assembles to a page edge then this all goes
003292  1               ; horribly wrong !!!
003292  1  68                   PLA                     ; get return addr high byte
003293  1  85 72                STA     <ut1_ph         ; save it
003295  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
003297  1  48                   PHA                     ; push sign
003298  1               
003298  1               ; round FAC1 and put on stack
003298  1               
003298  1               LAB_1B66:
003298  1  20 69 44             JSR     LAB_27BA        ; round FAC1
00329B  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00329D  1  48                   PHA                     ; push on stack
00329E  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0032A0  1  48                   PHA                     ; push on stack
0032A1  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0032A3  1  48                   PHA                     ; push on stack
0032A4  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0032A6  1  48                   PHA                     ; push on stack
0032A7  1  6C 71 00             JMP     (ut1_pl)        ; return, sort of
0032AA  1               
0032AA  1               ; do functions
0032AA  1               
0032AA  1               LAB_1B78:
0032AA  1  A0 FF                LDY     #$FF            ; flag function
0032AC  1  68                   PLA                     ; pull precedence byte
0032AD  1               LAB_1B7B:
0032AD  1  F0 20                BEQ     LAB_1B9D        ; exit if done
0032AF  1               
0032AF  1               LAB_1B7D:
0032AF  1  C9 64                CMP     #$64            ; compare previous precedence with $64
0032B1  1  F0 03                BEQ     LAB_1B84        ; branch if was $64 (< function)
0032B3  1               
0032B3  1  20 E2 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0032B6  1               LAB_1B84:
0032B6  1  84 99                STY     <prstk          ; save precedence stacked flag
0032B8  1               
0032B8  1               ; pop FAC2 and return
0032B8  1               LAB_1B86:
0032B8  1  68                   PLA                     ; pop byte
0032B9  1  4A                   LSR     A               ; shift out comparison evaluation lowest bit
0032BA  1  85 63                STA     <Cflag          ; save comparison evaluation flag
0032BC  1  68                   PLA                     ; pop exponent
0032BD  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
0032BF  1  68                   PLA                     ; pop mantissa1
0032C0  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
0032C2  1  68                   PLA                     ; pop mantissa2
0032C3  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
0032C5  1  68                   PLA                     ; pop mantissa3
0032C6  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
0032C8  1  68                   PLA                     ; pop sign
0032C9  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
0032CB  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
0032CD  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
0032CF  1               LAB_1B9D:
0032CF  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0032D1  1  60                   RTS
0032D2  1               
0032D2  1               ; print "..." string to string util area
0032D2  1               
0032D2  1               LAB_1BC1:
0032D2  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0032D4  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
0032D6  1  69 00                ADC     #$00            ; add carry to low byte
0032D8  1  90 01                BCC     LAB_1BCA        ; branch if no overflow
0032DA  1               
0032DA  1  C8                   INY                     ; increment high byte
0032DB  1               LAB_1BCA:
0032DB  1  20 29 39             JSR     LAB_20AE        ; print " terminated string to <Sutill/<Sutilh
0032DE  1  4C 11 3F             JMP     LAB_23F3        ; restore BASIC execute pointer from temp and return
0032E1  1               
0032E1  1               ; get value from line
0032E1  1               
0032E1  1               LAB_GVAL:
0032E1  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0032E5  1  B0 03                BCS     LAB_1BAC        ; branch if not numeric character
0032E7  1               
0032E7  1               ; else numeric string found (e.g. 123)
0032E7  1               LAB_1BA9:
0032E7  1  4C 9A 45             JMP     LAB_2887        ; get FAC1 from string and return
0032EA  1               
0032EA  1               ; get value from line .. continued
0032EA  1               
0032EA  1               ; wasn't a number so ..
0032EA  1               LAB_1BAC:
0032EA  1  AA                   TAX                     ; set the flags
0032EB  1  30 31                BMI     LAB_1BD0        ; if -ve go test token values
0032ED  1               
0032ED  1               ; else it is either a string, number, variable or (<expr>)
0032ED  1  C9 24                CMP     #'$'            ; compare with "$"
0032EF  1  F0 F6                BEQ     LAB_1BA9        ; branch if "$", hex number
0032F1  1               
0032F1  1  C9 25                CMP     #'%'            ; else compare with "%"
0032F3  1  F0 F2                BEQ     LAB_1BA9        ; branch if "%", binary number
0032F5  1               
0032F5  1  C9 2E                CMP     #'.'            ; compare with "."
0032F7  1  F0 EE                BEQ     LAB_1BA9        ; if so get FAC1 from string and return (e.g. was .123)
0032F9  1               
0032F9  1               ; it wasn't any sort of number so ..
0032F9  1  C9 22                CMP     #$22            ; compare with "
0032FB  1  F0 D5                BEQ     LAB_1BC1        ; branch if open quote
0032FD  1               
0032FD  1               ; wasn't any sort of number so ..
0032FD  1               
0032FD  1               ; evaluate expression within parentheses
0032FD  1               
0032FD  1  C9 28                CMP     #'('            ; compare with "("
0032FF  1  D0 51                BNE     LAB_1C18        ; if not "(" get (var), return value in FAC1 and $ flag
003301  1               
003301  1               LAB_1BF7:
003301  1  20 FB 31             JSR     LAB_EVEZ        ; evaluate expression, no decrement
003304  1               
003304  1               ; all the 'scan for' routines return the character after the sought character
003304  1               
003304  1               ; scan for ")" , else do syntax error then warm start
003304  1               
003304  1               LAB_1BFB:
003304  1  A9 29                LDA     #$29            ; load A with ")"
003306  1               
003306  1               ; scan for CHR$(A) , else do syntax error then warm start
003306  1               
003306  1               LAB_SCCA:
003306  1  A0 00                LDY     #$00            ; clear index
003308  1  D1 C3                CMP     (<Bpntrl),Y     ; check next byte is = A
00330A  1  D0 0D                BNE     LAB_SNER        ; if not do syntax error then warm start
00330C  1               
00330C  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then return
003310  1  60                   RTS
003311  1               ; scan for "(" , else do syntax error then warm start
003311  1               
003311  1               LAB_1BFE:
003311  1  A9 28                LDA     #$28            ; load A with "("
003313  1  D0 F1                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003315  1               ; (branch always)
003315  1               
003315  1               ; scan for "," , else do syntax error then warm start
003315  1               
003315  1               LAB_1C01:
003315  1  A9 2C                LDA     #$2C            ; load A with ","
003317  1  D0 ED                BNE     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
003319  1               ; (branch always)
003319  1               
003319  1               ; syntax error then warm start
003319  1               
003319  1               LAB_SNER:
003319  1  A2 02                LDX     #$02            ; error code $02 ("Syntax" error)
00331B  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
00331E  1               
00331E  1               ; get value from line .. continued
00331E  1               ; do tokens
00331E  1               
00331E  1               LAB_1BD0:
00331E  1  C9 C8                CMP     #TK_MINUS       ; compare with token for -
003320  1  F0 29                BEQ     LAB_1C11        ; branch if - token (do set-up for functions)
003322  1               
003322  1               ; wasn't -n so ..
003322  1  C9 C7                CMP     #TK_PLUS        ; compare with token for +
003324  1  F0 BB                BEQ     LAB_GVAL        ; branch if + token (+n = n so ignore leading +)
003326  1               
003326  1  C9 C2                CMP     #TK_NOT         ; compare with token for NOT
003328  1  D0 13                BNE     LAB_1BE7        ; branch if not token for NOT
00332A  1               
00332A  1               ; was NOT token
00332A  1               TK_EQUAL_PLUS   = TK_EQUAL-TK_PLUS
00332A  1  A0 21                LDY     #TK_EQUAL_PLUS*3; offset to NOT function
00332C  1  D0 1F                BNE     LAB_1C13        ; do set-up for function then execute (branch always)
00332E  1               
00332E  1               ; do = compare
00332E  1               
00332E  1               LAB_EQUAL:
00332E  1  20 F1 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
003331  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003333  1  49 FF                EOR     #$FF            ; invert it
003335  1  A8                   TAY                     ; copy it
003336  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003338  1  49 FF                EOR     #$FF            ; invert it
00333A  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
00333D  1               
00333D  1               ; get value from line .. continued
00333D  1               
00333D  1               ; wasn't +, -, or NOT so ..
00333D  1               LAB_1BE7:
00333D  1  C9 BF                CMP     #TK_FN          ; compare with token for FN
00333F  1  D0 03                BNE     LAB_1BEE        ; branch if not token for FN
003341  1               
003341  1  4C 0C 38             JMP     LAB_201E        ; go evaluate FNx
003344  1               
003344  1               ; get value from line .. continued
003344  1               
003344  1               ; wasn't +, -, NOT or FN so ..
003344  1               LAB_1BEE:
003344  1  E9 D4                SBC     #TK_SGN         ; subtract with token for SGN
003346  1  B0 19                BCS     LAB_1C27        ; if a function token go do it
003348  1               
003348  1  4C 19 33             JMP     LAB_SNER        ; else do syntax error
00334B  1               
00334B  1               ; set-up for functions
00334B  1               
00334B  1               LAB_1C11:
00334B  1               TK_GT_PLUS      = TK_GT-TK_PLUS
00334B  1  A0 1E                LDY     #TK_GT_PLUS*3   ; set offset from base to > operator
00334D  1               LAB_1C13:
00334D  1  68                   PLA                     ; dump return address low byte
00334E  1  68                   PLA                     ; dump return address high byte
00334F  1  4C 4E 32             JMP     LAB_1B1D        ; execute function then continue evaluation
003352  1               
003352  1               ; variable name set-up
003352  1               ; get (var), return value in FAC_1 and $ flag
003352  1               
003352  1               LAB_1C18:
003352  1  20 F0 34             JSR     LAB_GVAR        ; get (var) address
003355  1  85 AE                STA     <FAC1_2         ; save address low byte in FAC1 mantissa2
003357  1  84 AF                STY     <FAC1_3         ; save address high byte in FAC1 mantissa3
003359  1  A6 5F                LDX     <Dtypef         ; get data type flag, $FF=string, $00=numeric
00335B  1  30 03                BMI     LAB_1C25        ; if string then return (does RTS)
00335D  1               
00335D  1               LAB_1C24:
00335D  1  4C 6D 43             JMP     LAB_UFAC        ; unpack memory (AY) into FAC1
003360  1               
003360  1               LAB_1C25:
003360  1  60                   RTS
003361  1               
003361  1               ; get value from line .. continued
003361  1               ; only functions left so ..
003361  1               
003361  1               ; set up function references
003361  1               
003361  1               ; new for V2.0+ this replaces a lot of IF .. THEN .. ELSEIF .. THEN .. that was needed
003361  1               ; to process function calls. now the function vector is computed and pushed on the stack
003361  1               ; and the preprocess offset is read. if the preprocess offset is non zero then the vector
003361  1               ; is calculated and the routine called, if not this routine just does RTS. whichever
003361  1               ; happens the RTS at the end of this routine, or the end of the preprocess routine, calls
003361  1               ; the function code
003361  1               
003361  1               ; this also removes some less than elegant code that was used to bypass type checking
003361  1               ; for functions that returned strings
003361  1               
003361  1               LAB_1C27:
003361  1  0A                   ASL     A               ; *2 (2 bytes per function address)
003362  1  A8                   TAY                     ; copy to index
003363  1               
003363  1  B9 F9 10             LDA     LAB_FTBM,Y      ; get function jump vector high byte
003366  1  48                   PHA                     ; push functions jump vector high byte
003367  1  B9 F8 10             LDA     LAB_FTBL,Y      ; get function jump vector low byte
00336A  1  48                   PHA                     ; push functions jump vector low byte
00336B  1               
00336B  1  B9 B1 10             LDA     LAB_FTPM,Y      ; get function pre process vector high byte
00336E  1  F0 05                BEQ     LAB_1C56        ; skip pre process if null vector
003370  1               
003370  1  48                   PHA                     ; push functions pre process vector high byte
003371  1  B9 B0 10             LDA     LAB_FTPL,Y      ; get function pre process vector low byte
003374  1  48                   PHA                     ; push functions pre process vector low byte
003375  1               
003375  1               LAB_1C56:
003375  1  60                   RTS                     ; do function, or pre process, call
003376  1               
003376  1               ; process string expression in parenthesis
003376  1               
003376  1               LAB_PPFS:
003376  1  20 01 33             JSR     LAB_1BF7        ; process expression in parenthesis
003379  1  4C E4 31             JMP     LAB_CTST        ; check if source is string then do function,
00337C  1               ; else do type mismatch
00337C  1               
00337C  1               ; process numeric expression in parenthesis
00337C  1               
00337C  1               LAB_PPFN:
00337C  1  20 01 33             JSR     LAB_1BF7        ; process expression in parenthesis
00337F  1  4C E2 31             JMP     LAB_CTNM        ; check if source is numeric then do function,
003382  1               ; else do type mismatch
003382  1               
003382  1               ; set numeric data type and increment BASIC execute pointer
003382  1               
003382  1               LAB_PPBI:
003382  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
003384  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory then do function
003388  1  60                   RTS
003389  1               ; process string for LEFT$, RIGHT$ or MID$
003389  1               
003389  1               LAB_LRMS:
003389  1  20 FB 31             JSR     LAB_EVEZ        ; evaluate (should be string) expression
00338C  1  20 15 33             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
00338F  1  20 E4 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003392  1               
003392  1  68                   PLA                     ; get function jump vector low byte
003393  1  AA                   TAX                     ; save functions jump vector low byte
003394  1  68                   PLA                     ; get function jump vector high byte
003395  1  A8                   TAY                     ; save functions jump vector high byte
003396  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003398  1  48                   PHA                     ; push string pointer high byte
003399  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
00339B  1  48                   PHA                     ; push string pointer low byte
00339C  1  98                   TYA                     ; get function jump vector high byte back
00339D  1  48                   PHA                     ; save functions jump vector high byte
00339E  1  8A                   TXA                     ; get function jump vector low byte back
00339F  1  48                   PHA                     ; save functions jump vector low byte
0033A0  1  20 8F 3E             JSR     LAB_GTBY        ; get byte parameter
0033A3  1  8A                   TXA                     ; copy byte parameter to A
0033A4  1  60                   RTS                     ; go do function
0033A5  1               
0033A5  1               ; process numeric expression(s) for BIN$ or HEX$
0033A5  1               
0033A5  1               LAB_BHSS:
0033A5  1  20 FB 31             JSR     LAB_EVEZ        ; process expression
0033A8  1  20 E2 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0033AB  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0033AD  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
0033AF  1  B0 22                BCS     LAB_BHER        ; branch if n>=2^24 (is too big)
0033B1  1               
0033B1  1  20 44 45             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0033B4  1  A2 02                LDX     #$02            ; 3 bytes to do
0033B6  1               LAB_CFAC:
0033B6  1  B5 AD                LDA     <FAC1_1,X       ; get byte from FAC1
0033B8  1  95 11                STA     <nums_1,X       ; save byte to temp
0033BA  1  CA                   DEX                     ; decrement index
0033BB  1  10 F9                BPL     LAB_CFAC        ; copy FAC1 mantissa to temp
0033BD  1               
0033BD  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
0033C1  1  A2 00                LDX     #$00            ; set default to no leading "0"s
0033C3  1  C9 29                CMP     #')'            ; compare with close bracket
0033C5  1  F0 0B                BEQ     LAB_1C54        ; if ")" go do rest of function
0033C7  1               
0033C7  1  20 20 3F             JSR     LAB_SCGB        ; scan for "," and get byte
0033CA  1  22 C2 00 00          JSL     LAB_GBYT        ; get last byte back
0033CE  1  C9 29                CMP     #')'            ; is next character )
0033D0  1  D0 01                BNE     LAB_BHER        ; if not ")" go do error
0033D2  1               
0033D2  1               LAB_1C54:
0033D2  1  60                   RTS                     ; else do function
0033D3  1               
0033D3  1               LAB_BHER:
0033D3  1  4C 78 36             JMP     LAB_FCER        ; do function call error then warm start
0033D6  1               
0033D6  1               ; perform EOR
0033D6  1               
0033D6  1               ; added operator format is the same as AND or OR, precedence is the same as OR
0033D6  1               
0033D6  1               ; this bit worked first time but it took a while to sort out the operator table
0033D6  1               ; pointers and offsets afterwards!
0033D6  1               
0033D6  1               LAB_EOR:
0033D6  1  20 FD 33             JSR     GetFirst        ; get first integer expression (no sign check)
0033D9  1  45 5B                EOR     <XOAw_l         ; EOR with expression 1 low byte
0033DB  1  A8                   TAY                     ; save in Y
0033DC  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033DE  1  45 5C                EOR     <XOAw_h         ; EOR with expression 1 high byte
0033E0  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0033E3  1               
0033E3  1               ; perform OR
0033E3  1               
0033E3  1               LAB_OR:
0033E3  1  20 FD 33             JSR     GetFirst        ; get first integer expression (no sign check)
0033E6  1  05 5B                ORA     <XOAw_l         ; OR with expression 1 low byte
0033E8  1  A8                   TAY                     ; save in Y
0033E9  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033EB  1  05 5C                ORA     <XOAw_h         ; OR with expression 1 high byte
0033ED  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0033F0  1               
0033F0  1               ; perform AND
0033F0  1               
0033F0  1               LAB_AND:
0033F0  1  20 FD 33             JSR     GetFirst        ; get first integer expression (no sign check)
0033F3  1  25 5B                AND     <XOAw_l         ; AND with expression 1 low byte
0033F5  1  A8                   TAY                     ; save in Y
0033F6  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0033F8  1  25 5C                AND     <XOAw_h         ; AND with expression 1 high byte
0033FA  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0033FD  1               
0033FD  1               ; get first value for OR, AND or EOR
0033FD  1               
0033FD  1               GetFirst:
0033FD  1  20 F1 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
003400  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003402  1  85 5C                STA     <XOAw_h         ; save it
003404  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003406  1  85 5B                STA     <XOAw_l         ; save it
003408  1  20 5D 40             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
00340B  1  20 F1 35             JSR     LAB_EVIR        ; evaluate integer expression (no sign check)
00340E  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
003410  1               LAB_1C95:
003410  1  60                   RTS
003411  1               
003411  1               ; perform comparisons
003411  1               
003411  1               ; do < compare
003411  1               
003411  1               LAB_LTHAN:
003411  1  20 E5 31             JSR     LAB_CKTM        ; type match check, set C for string
003414  1  B0 13                BCS     LAB_1CAE        ; branch if string
003416  1               
003416  1               ; do numeric < compare
003416  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
003418  1  09 7F                ORA     #$7F            ; set all non sign bits
00341A  1  25 B4                AND     <FAC2_1         ; and FAC2 mantissa1 (AND in sign bit)
00341C  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
00341E  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
003420  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
003422  1  20 A7 44             JSR     LAB_27F8        ; compare FAC1 with FAC2 (AY)
003425  1  AA                   TAX                     ; copy result
003426  1  4C 5A 34             JMP     LAB_1CE1        ; go evaluate result
003429  1               
003429  1               ; do string < compare
003429  1               LAB_1CAE:
003429  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00342B  1  C6 9B                DEC     <comp_f         ; clear < bit in compare function flag
00342D  1  20 06 3C             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
003430  1               ; space returns with A = length, X=pointer low byte,
003430  1               ; Y=pointer high byte
003430  1  85 AC                STA     <str_ln         ; save length
003432  1  86 AD                STX     <str_pl         ; save string pointer low byte
003434  1  84 AE                STY     <str_ph         ; save string pointer high byte
003436  1  A5 B5                LDA     <FAC2_2         ; get descriptor pointer low byte
003438  1  A4 B6                LDY     <FAC2_3         ; get descriptor pointer high byte
00343A  1  20 0A 3C             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
00343D  1               ; returns with A = length, X=pointer low byte,
00343D  1               ; Y=pointer high byte
00343D  1  86 B5                STX     <FAC2_2         ; save string pointer low byte
00343F  1  84 B6                STY     <FAC2_3         ; save string pointer high byte
003441  1  AA                   TAX                     ; copy length
003442  1  38                   SEC                     ; set carry for subtract
003443  1  E5 AC                SBC     <str_ln         ; subtract string 1 length
003445  1  F0 08                BEQ     LAB_1CD6        ; branch if str 1 length = string 2 length
003447  1               
003447  1  A9 01                LDA     #$01            ; set str 1 length > string 2 length
003449  1  90 04                BCC     LAB_1CD6        ; branch if so
00344B  1               
00344B  1  A6 AC                LDX     <str_ln         ; get string 1 length
00344D  1  A9 FF                LDA     #$FF            ; set str 1 length < string 2 length
00344F  1               LAB_1CD6:
00344F  1  85 B0                STA     <FAC1_s         ; save length compare
003451  1  A0 FF                LDY     #$FF            ; set index
003453  1  E8                   INX                     ; adjust for loop
003454  1               LAB_1CDB:
003454  1  C8                   INY                     ; increment index
003455  1  CA                   DEX                     ; decrement count
003456  1  D0 07                BNE     LAB_1CE6        ; branch if still bytes to do
003458  1               
003458  1  A6 B0                LDX     <FAC1_s         ; get length compare back
00345A  1               LAB_1CE1:
00345A  1  30 39                BMI     LAB_1CF2        ; branch if str 1 < str 2
00345C  1               
00345C  1  18                   CLC                     ; flag str 1 <= str 2
00345D  1  90 36                BCC     LAB_1CF2        ; go evaluate result
00345F  1               
00345F  1               LAB_1CE6:
00345F  1  8B DA A2 01          LDAINDIRECTY FAC2_2     ; get string 2 byte
003463  1  B5 B5 C9 00  
003467  1  D0 04 A2 00  
003475  1  8B 48 DA A2          CMPINDIRECTY FAC1_1     ; compare with string 1 byte
003479  1  01 B5 AD C9  
00347D  1  00 D0 04 A2  
00348D  1  F0 C5                BEQ     LAB_1CDB        ; loop if bytes =
00348F  1               
00348F  1  A2 FF                LDX     #$FF            ; set str 1 < string 2
003491  1  B0 02                BCS     LAB_1CF2        ; branch if so
003493  1               
003493  1  A2 01                LDX     #$01            ;  set str 1 > string 2
003495  1               LAB_1CF2:
003495  1  E8                   INX                     ; x = 0, 1 or 2
003496  1  8A                   TXA                     ; copy to A
003497  1  2A                   ROL     A               ; *2 (1, 2 or 4)
003498  1  25 63                AND     <Cflag          ; AND with comparison evaluation flag
00349A  1  F0 02                BEQ     LAB_1CFB        ; branch if 0 (compare is false)
00349C  1               
00349C  1  A9 FF                LDA     #$FF            ; else set result true
00349E  1               LAB_1CFB:
00349E  1  4C 8A 44             JMP     LAB_27DB        ; save A as integer byte and return
0034A1  1               
0034A1  1               LAB_1CFE:
0034A1  1  20 15 33             JSR     LAB_1C01        ; scan for ",", else do syntax error then warm start
0034A4  1               
0034A4  1               ; perform DIM
0034A4  1               
0034A4  1               LAB_DIM:
0034A4  1  AA                   TAX                     ; copy "DIM" flag to X
0034A5  1  20 F6 34             JSR     LAB_1D10        ; search for variable
0034A8  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
0034AC  1  D0 F3                BNE     LAB_1CFE        ; scan for "," and loop if not null
0034AE  1               
0034AE  1  60                   RTS
0034AF  1               
0034AF  1               ; perform << (left shift)
0034AF  1               
0034AF  1               LAB_LSHIFT:
0034AF  1  20 E5 34             JSR     GetPair         ; get integer expression and byte (no sign check)
0034B2  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
0034B4  1  A6 78                LDX     <TempB          ; get shift count
0034B6  1  F0 22                BEQ     NoShift         ; branch if zero
0034B8  1               
0034B8  1  E0 10                CPX     #$10            ; compare bit count with 16d
0034BA  1  B0 23                BCS     TooBig          ; branch if >=
0034BC  1               
0034BC  1               Ls_loop:
0034BC  1  06 AF                ASL     <FAC1_3         ; shift low byte
0034BE  1  2A                   ROL     A               ; shift high byte
0034BF  1  CA                   DEX                     ; decrement bit count
0034C0  1  D0 FA                BNE     Ls_loop         ; loop if shift not complete
0034C2  1               
0034C2  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
0034C4  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0034C7  1               
0034C7  1               ; perform >> (right shift)
0034C7  1               
0034C7  1               LAB_RSHIFT:
0034C7  1  20 E5 34             JSR     GetPair         ; get integer expression and byte (no sign check)
0034CA  1  A5 AE                LDA     <FAC1_2         ; get expression high byte
0034CC  1  A6 78                LDX     <TempB          ; get shift count
0034CE  1  F0 0A                BEQ     NoShift         ; branch if zero
0034D0  1               
0034D0  1  E0 10                CPX     #$10            ; compare bit count with 16d
0034D2  1  B0 0B                BCS     TooBig          ; branch if >=
0034D4  1               
0034D4  1               Rs_loop:
0034D4  1  4A                   LSR     A               ; shift high byte
0034D5  1  66 AF                ROR     <FAC1_3         ; shift low byte
0034D7  1  CA                   DEX                     ; decrement bit count
0034D8  1  D0 FA                BNE     Rs_loop         ; loop if shift not complete
0034DA  1               
0034DA  1               NoShift:
0034DA  1  A4 AF                LDY     <FAC1_3         ; get expression low byte
0034DC  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0034DF  1               
0034DF  1               TooBig:
0034DF  1  A9 00                LDA     #$00            ; clear high byte
0034E1  1  A8                   TAY                     ; copy to low byte
0034E2  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
0034E5  1               
0034E5  1               GetPair:
0034E5  1  20 92 3E             JSR     LAB_EVBY        ; evaluate byte expression, result in X
0034E8  1  86 78                STX     <TempB          ; save it
0034EA  1  20 5D 40             JSR     LAB_279B        ; copy FAC2 to FAC1 (get 2nd value in expression)
0034ED  1  4C F1 35             JMP     LAB_EVIR        ; evaluate integer expression (no sign check)
0034F0  1               
0034F0  1               ; search for variable
0034F0  1               
0034F0  1               ; return pointer to variable in <Cvaral/<Cvarah
0034F0  1               
0034F0  1               LAB_GVAR:
0034F0  1  A2 00                LDX     #$00            ; set DIM flag = $00
0034F2  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory (1st character)
0034F6  1               LAB_1D10:
0034F6  1  86 5E                STX     <Defdim         ; save DIM flag
0034F8  1               LAB_1D12:
0034F8  1  85 93                STA     <Varnm1         ; save 1st character
0034FA  1  29 7F                AND     #$7F            ; clear FN flag bit
0034FC  1  20 68 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
0034FF  1  B0 03                BCS     LAB_1D1F        ; branch if ok
003501  1               
003501  1  4C 19 33             JMP     LAB_SNER        ; else syntax error then warm start
003504  1               
003504  1               ; was variable name so ..
003504  1               LAB_1D1F:
003504  1  A2 00                LDX     #$00            ; clear 2nd character temp
003506  1  86 5F                STX     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
003508  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (2nd character)
00350C  1  90 05                BCC     LAB_1D2D        ; branch if character = "0"-"9" (ok)
00350E  1               
00350E  1               ; 2nd character wasn't "0" to "9" so ..
00350E  1  20 68 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
003511  1  90 0C                BCC     LAB_1D38        ; branch if <"A" or >"Z" (go check if string)
003513  1               
003513  1               LAB_1D2D:
003513  1  AA                   TAX                     ; copy 2nd character
003514  1               
003514  1               ; ignore further (valid) characters in the variable name
003514  1               LAB_1D2E:
003514  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (3rd character)
003518  1  90 FA                BCC     LAB_1D2E        ; loop if character = "0"-"9" (ignore)
00351A  1               
00351A  1  20 68 35             JSR     LAB_CASC        ; check byte, return C=0 if<"A" or >"Z"
00351D  1  B0 F5                BCS     LAB_1D2E        ; loop if character = "A"-"Z" (ignore)
00351F  1               
00351F  1               ; check if string variable
00351F  1               LAB_1D38:
00351F  1  C9 24                CMP     #'$'            ; compare with "$"
003521  1  D0 0C                BNE     LAB_1D47        ; branch if not string
003523  1               
003523  1               ; to introduce a new variable type (% suffix for integers say) then this branch
003523  1               ; will need to go to that check and then that branch, if it fails, go to LAB_1D47
003523  1               
003523  1               ; type is string
003523  1  A9 FF                LDA     #$FF            ; set data type = string
003525  1  85 5F                STA     <Dtypef         ; set data type flag, $FF=string, $00=numeric
003527  1  8A                   TXA                     ; get 2nd character back
003528  1  09 80                ORA     #$80            ; set top bit (indicate string var)
00352A  1  AA                   TAX                     ; copy back to 2nd character temp
00352B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
00352F  1               
00352F  1               ; after we have determined the variable type we need to come back here to determine
00352F  1               ; if it's an array of type. this would plug in a%(b[,c[,d]])) integer arrays nicely
00352F  1               
00352F  1               
00352F  1               LAB_1D47:                       ; gets here with character after var name in A
00352F  1  86 94                STX     <Varnm2         ; save 2nd character
003531  1  05 61                ORA     <Sufnxf         ; or with subscript/FNX flag (or FN name)
003533  1  C9 28                CMP     #'('            ; compare with "("
003535  1  D0 03                BNE     LAB_1D53        ; branch if not "("
003537  1               
003537  1  4C 03 36             JMP     LAB_1E17        ; go find, or make, array
00353A  1               
00353A  1               ; either find or create var
00353A  1               ; var name (1st two characters only!) is in <Varnm1,<Varnm2
00353A  1               
00353A  1               ; variable name wasn't var(... so look for plain var
00353A  1               LAB_1D53:
00353A  1  A9 00                LDA     #$00            ; clear A
00353C  1  85 61                STA     <Sufnxf         ; clear subscript/FNX flag
00353E  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
003540  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
003542  1  A0 00                LDY     #$00            ; clear index
003544  1               LAB_1D5D:
003544  1  86 AB                STX     <Vrschh         ; save search address high byte
003546  1               LAB_1D5F:
003546  1  85 AA                STA     <Vrschl         ; save search address low byte
003548  1  E4 7E                CPX     <Sarryh         ; compare high address with var space end
00354A  1  D0 04                BNE     LAB_1D69        ; skip next compare if <>
00354C  1               
00354C  1               ; high addresses were = so compare low addresses
00354C  1  C5 7D                CMP     <Sarryl         ; compare low address with var space end
00354E  1  F0 2C                BEQ     LAB_1D8B        ; if not found go make new var
003550  1               
003550  1               LAB_1D69:
003550  1  A5 93                LDA     <Varnm1         ; get 1st character of var to find
003552  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 1st character
003554  1  D0 08                BNE     LAB_1D77        ; branch if no match
003556  1               
003556  1               ; 1st characters match so compare 2nd characters
003556  1  A5 94                LDA     <Varnm2         ; get 2nd character of var to find
003558  1  C8                   INY                     ; index to point to variable name 2nd character
003559  1  D1 AA                CMP     (<Vrschl),Y     ; compare with variable name 2nd character
00355B  1  F0 69                BEQ     LAB_1DD7        ; branch if match (found var)
00355D  1               
00355D  1  88                   DEY                     ; else decrement index (now = $00)
00355E  1               LAB_1D77:
00355E  1  18                   CLC                     ; clear carry for add
00355F  1  A5 AA                LDA     <Vrschl         ; get search address low byte
003561  1  69 06                ADC     #$06            ; +6 (offset to next var name)
003563  1  90 E1                BCC     LAB_1D5F        ; loop if no overflow to high byte
003565  1               
003565  1  E8                   INX                     ; else increment high byte
003566  1  D0 DC                BNE     LAB_1D5D        ; loop always (RAM doesn't extend to $FFFF !)
003568  1               
003568  1               ; check byte, return C=0 if<"A" or >"Z" or "a" to "z"
003568  1               
003568  1               LAB_CASC:
003568  1  C9 61                CMP     #'a'            ; compare with "a"
00356A  1  B0 0A                BCS     LAB_1D83        ; go check <"z"+1
00356C  1               
00356C  1               ; check byte, return C=0 if<"A" or >"Z"
00356C  1               
00356C  1               LAB_1D82:
00356C  1  C9 41                CMP     #'A'            ; compare with "A"
00356E  1  90 05                BCC     LAB_1D8A        ; exit if less
003570  1               
003570  1               ; carry is set
003570  1  E9 5B                SBC     #$5B            ; subtract "Z"+1
003572  1  38                   SEC                     ; set carry
003573  1  E9 A5                SBC     #$A5            ; subtract $A5 (restore byte)
003575  1               ; carry clear if byte>$5A
003575  1               LAB_1D8A:
003575  1  60                   RTS
003576  1               
003576  1               LAB_1D83:
003576  1  E9 7B                SBC     #$7B            ; subtract "z"+1
003578  1  38                   SEC                     ; set carry
003579  1  E9 85                SBC     #$85            ; subtract $85 (restore byte)
00357B  1               ; carry clear if byte>$7A
00357B  1  60                   RTS
00357C  1               
00357C  1               ; reached end of variable mem without match
00357C  1               ; .. so create new variable
00357C  1               LAB_1D8B:
00357C  1  68                   PLA                     ; pop return address low byte
00357D  1  48                   PHA                     ; push return address low byte
00357E  1               LAB_1C18p2      = LAB_1C18+2
00357E  1  C9 54                CMP     #<LAB_1C18p2    ; compare with expected calling routine return low byte
003580  1  D0 05                BNE     LAB_1D98        ; if not get (var) go create new var
003582  1               
003582  1               ; This will only drop through if the call was from LAB_1C18 and is only called
003582  1               ; from there if it is searching for a variable from the RHS of a LET a=b statement
003582  1               ; it prevents the creation of variables not assigned a value.
003582  1               
003582  1               ; value returned by this is either numeric zero (exponent byte is $00) or null string
003582  1               ; (descriptor length byte is $00). in fact a pointer to any $00 byte would have done.
003582  1               
003582  1               ; doing this saves 6 bytes of variable memory and 168 machine cycles of time
003582  1               
003582  1               ; this is where you would put the undefined variable error call e.g.
003582  1               
003582  1               ;					; variable doesn't exist so flag error
003582  1               ;	LDX	#$24			; error code $24 ("undefined variable" error)
003582  1               ;	JMP	LAB_XERR		; do error #X then warm start
003582  1               
003582  1               ; the above code has been tested and works a treat! (it replaces the three code lines
003582  1               ; below)
003582  1               
003582  1               ; else return dummy null value
003582  1  A9 5E                LDA     #<LAB_1D96      ; low byte point to $00,$00
003584  1               ; (uses part of misc constants table)
003584  1  A0 18                LDY     #>LAB_1D96      ; high byte point to $00,$00
003586  1  60                   RTS
003587  1               
003587  1               ; create new numeric variable
003587  1               LAB_1D98:
003587  1  A5 7D                LDA     <Sarryl         ; get var mem end low byte
003589  1  A4 7E                LDY     <Sarryh         ; get var mem end high byte
00358B  1  85 AA                STA     <Ostrtl         ; save old block start low byte
00358D  1  84 AB                STY     <Ostrth         ; save old block start high byte
00358F  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
003591  1  A4 80                LDY     <Earryh         ; get array mem end high byte
003593  1  85 A6                STA     <Obendl         ; save old block end low byte
003595  1  84 A7                STY     <Obendh         ; save old block end high byte
003597  1  18                   CLC                     ; clear carry for add
003598  1  69 06                ADC     #$06            ; +6 (space for one var)
00359A  1  90 01                BCC     LAB_1DAE        ; branch if no overflow to high byte
00359C  1               
00359C  1  C8                   INY                     ; else increment high byte
00359D  1               LAB_1DAE:
00359D  1  85 A4                STA     <Nbendl         ; set new block end low byte
00359F  1  84 A5                STY     <Nbendh         ; set new block end high byte
0035A1  1  20 FA 25             JSR     LAB_11CF        ; open up space in memory
0035A4  1  A5 A4                LDA     <Nbendl         ; get new start low byte
0035A6  1  A4 A5                LDY     <Nbendh         ; get new start high byte (-$100)
0035A8  1  C8                   INY                     ; correct high byte
0035A9  1  85 7D                STA     <Sarryl         ; save new var mem end low byte
0035AB  1  84 7E                STY     <Sarryh         ; save new var mem end high byte
0035AD  1  A0 00                LDY     #$00            ; clear index
0035AF  1  A5 93                LDA     <Varnm1         ; get var name 1st character
0035B1  1  91 AA                STA     (<Vrschl),Y     ; save var name 1st character
0035B3  1  C8                   INY                     ; increment index
0035B4  1  A5 94                LDA     <Varnm2         ; get var name 2nd character
0035B6  1  91 AA                STA     (<Vrschl),Y     ; save var name 2nd character
0035B8  1  A9 00                LDA     #$00            ; clear A
0035BA  1  C8                   INY                     ; increment index
0035BB  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
0035BD  1  C8                   INY                     ; increment index
0035BE  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
0035C0  1  C8                   INY                     ; increment index
0035C1  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
0035C3  1  C8                   INY                     ; increment index
0035C4  1  91 AA                STA     (<Vrschl),Y     ; initialise var byte
0035C6  1               
0035C6  1               ; found a match for var ((<Vrschl) = ptr)
0035C6  1               LAB_1DD7:
0035C6  1  A5 AA                LDA     <Vrschl         ; get var address low byte
0035C8  1  18                   CLC                     ; clear carry for add
0035C9  1  69 02                ADC     #$02            ; +2 (offset past var name bytes)
0035CB  1  A4 AB                LDY     <Vrschh         ; get var address high byte
0035CD  1  90 01                BCC     LAB_1DE1        ; branch if no overflow from add
0035CF  1               
0035CF  1  C8                   INY                     ; else increment high byte
0035D0  1               LAB_1DE1:
0035D0  1  85 95                STA     <Cvaral         ; save current var address low byte
0035D2  1  84 96                STY     <Cvarah         ; save current var address high byte
0035D4  1  60                   RTS
0035D5  1               
0035D5  1               ; set-up array pointer (<Adatal/h) to first element in array
0035D5  1               ; set <Adatal,<Adatah to <Astrtl,<Astrth+2*<Dimcnt+#$05
0035D5  1               
0035D5  1               LAB_1DE6:
0035D5  1  A5 5D                LDA     <Dimcnt         ; get # of dimensions (1, 2 or 3)
0035D7  1  0A                   ASL     A               ; *2 (also clears the carry !)
0035D8  1  69 05                ADC     #$05            ; +5 (result is 7, 9 or 11 here)
0035DA  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
0035DC  1  A4 AB                LDY     <Astrth         ; get array pointer high byte
0035DE  1  90 01                BCC     LAB_1DF2        ; branch if no overflow
0035E0  1               
0035E0  1  C8                   INY                     ; else increment high byte
0035E1  1               LAB_1DF2:
0035E1  1  85 A4                STA     <Adatal         ; save array data pointer low byte
0035E3  1  84 A5                STY     <Adatah         ; save array data pointer high byte
0035E5  1  60                   RTS
0035E6  1               
0035E6  1               ; evaluate integer expression
0035E6  1               
0035E6  1               LAB_EVIN:
0035E6  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0035EA  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
0035ED  1               ; else do type mismatch
0035ED  1               
0035ED  1               ; evaluate integer expression (no check)
0035ED  1               
0035ED  1               LAB_EVPI:
0035ED  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0035EF  1  30 0D                BMI     LAB_1E12        ; do function call error if -ve
0035F1  1               
0035F1  1               ; evaluate integer expression (no sign check)
0035F1  1               
0035F1  1               LAB_EVIR:
0035F1  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0035F3  1  C9 90                CMP     #$90            ; compare with exponent = 2^16 (n>2^15)
0035F5  1  90 09                BCC     LAB_1E14        ; branch if n<2^16 (is ok)
0035F7  1               
0035F7  1  A9 65                LDA     #<LAB_1DF7      ; set pointer low byte to -32768
0035F9  1  A0 18                LDY     #>LAB_1DF7      ; set pointer high byte to -32768
0035FB  1  20 A7 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0035FE  1               LAB_1E12:
0035FE  1  D0 78                BNE     LAB_FCER        ; if <> do function call error then warm start
003600  1               
003600  1               LAB_1E14:
003600  1  4C 44 45             JMP     LAB_2831        ; convert FAC1 floating-to-fixed and return
003603  1               
003603  1               ; find or make array
003603  1               
003603  1               LAB_1E17:
003603  1  A5 5E                LDA     <Defdim         ; get DIM flag
003605  1  48                   PHA                     ; push it
003606  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003608  1  48                   PHA                     ; push it
003609  1  A0 00                LDY     #$00            ; clear dimensions count
00360B  1               
00360B  1               ; now get the array dimension(s) and stack it (them) before the data type and DIM flag
00360B  1               
00360B  1               LAB_1E1F:
00360B  1  98                   TYA                     ; copy dimensions count
00360C  1  48                   PHA                     ; save it
00360D  1  A5 94                LDA     <Varnm2         ; get array name 2nd byte
00360F  1  48                   PHA                     ; save it
003610  1  A5 93                LDA     <Varnm1         ; get array name 1st byte
003612  1  48                   PHA                     ; save it
003613  1  20 E6 35             JSR     LAB_EVIN        ; evaluate integer expression
003616  1  68                   PLA                     ; pull array name 1st byte
003617  1  85 93                STA     <Varnm1         ; restore array name 1st byte
003619  1  68                   PLA                     ; pull array name 2nd byte
00361A  1  85 94                STA     <Varnm2         ; restore array name 2nd byte
00361C  1  68                   PLA                     ; pull dimensions count
00361D  1  A8                   TAY                     ; restore it
00361E  1  A3 02                LDA     2,S             ; get DIM flag
003620  1  85 FD                STA     <TEMPW          ; push it
003622  1  A3 01                LDA     1,S             ; get data type flag
003624  1  85 FE                STA     <TEMPW+1        ; push it
003626  1  A5 AE                LDA     <FAC1_2         ; get this dimension size high byte
003628  1  83 02                STA     2,S             ; stack before flag bytes
00362A  1  A5 AF                LDA     <FAC1_3         ; get this dimension size low byte
00362C  1  83 01                STA     1,S             ; stack before flag bytes
00362E  1  A5 FD                LDA     <TEMPW
003630  1  48                   PHA
003631  1  A5 FE                LDA     <TEMPW+1
003633  1  48                   PHA
003634  1  C8                   INY                     ; increment dimensions count
003635  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003639  1  C9 2C                CMP     #','            ; compare with ","
00363B  1  F0 CE                BEQ     LAB_1E1F        ; if found go do next dimension
00363D  1               
00363D  1  84 5D                STY     <Dimcnt         ; store dimensions count
00363F  1  20 04 33             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003642  1  68                   PLA                     ; pull data type flag
003643  1  85 5F                STA     <Dtypef         ; restore data type flag, $FF=string, $00=numeric
003645  1  68                   PLA                     ; pull DIM flag
003646  1  85 5E                STA     <Defdim         ; restore DIM flag
003648  1  A6 7D                LDX     <Sarryl         ; get array mem start low byte
00364A  1  A5 7E                LDA     <Sarryh         ; get array mem start high byte
00364C  1               
00364C  1               ; now check to see if we are at the end of array memory (we would be if there were
00364C  1               ; no arrays).
00364C  1               
00364C  1               LAB_1E5C:
00364C  1  86 AA                STX     <Astrtl         ; save as array start pointer low byte
00364E  1  85 AB                STA     <Astrth         ; save as array start pointer high byte
003650  1  C5 80                CMP     <Earryh         ; compare with array mem end high byte
003652  1  D0 04                BNE     LAB_1E68        ; branch if not reached array mem end
003654  1               
003654  1  E4 7F                CPX     <Earryl         ; else compare with array mem end low byte
003656  1  F0 39                BEQ     LAB_1EA1        ; go build array if not found
003658  1               
003658  1               ; search for array
003658  1               LAB_1E68:
003658  1  A0 00                LDY     #$00            ; clear index
00365A  1  B1 AA                LDA     (<Astrtl),Y     ; get array name first byte
00365C  1  C8                   INY                     ; increment index to second name byte
00365D  1  C5 93                CMP     <Varnm1         ; compare with this array name first byte
00365F  1  D0 06                BNE     LAB_1E77        ; branch if no match
003661  1               
003661  1  A5 94                LDA     <Varnm2         ; else get this array name second byte
003663  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array name second byte
003665  1  F0 16                BEQ     LAB_1E8D        ; array found so branch
003667  1               
003667  1               ; no match
003667  1               LAB_1E77:
003667  1  C8                   INY                     ; increment index
003668  1  B1 AA                LDA     (<Astrtl),Y     ; get array size low byte
00366A  1  18                   CLC                     ; clear carry for add
00366B  1  65 AA                ADC     <Astrtl         ; add array start pointer low byte
00366D  1  AA                   TAX                     ; copy low byte to X
00366E  1  C8                   INY                     ; increment index
00366F  1  B1 AA                LDA     (<Astrtl),Y     ; get array size high byte
003671  1  65 AB                ADC     <Astrth         ; add array mem pointer high byte
003673  1  90 D7                BCC     LAB_1E5C        ; if no overflow go check next array
003675  1               ; do array bounds error
003675  1               
003675  1               LAB_1E85:
003675  1  A2 10                LDX     #$10            ; error code $10 ("Array bounds" error)
003677  1  2C                   .BYTE   $2C             ; makes next bit BIT LAB_08A2
003678  1               
003678  1               ; do function call error
003678  1               
003678  1               LAB_FCER:
003678  1  A2 08                LDX     #$08            ; error code $08 ("Function call" error)
00367A  1               LAB_1E8A:
00367A  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
00367D  1               
00367D  1               ; found array, are we trying to dimension it?
00367D  1               LAB_1E8D:
00367D  1  A2 12                LDX     #$12            ; set error $12 ("Double dimension" error)
00367F  1  A5 5E                LDA     <Defdim         ; get DIM flag
003681  1  D0 F7                BNE     LAB_1E8A        ; if we are trying to dimension it do error #X, then warm
003683  1               ; start
003683  1               
003683  1               ; found the array and we're not dimensioning it so we must find an element in it
003683  1               
003683  1  20 D5 35             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
003686  1               ; (<Astrtl,<Astrth points to start of array)
003686  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
003688  1  A0 04                LDY     #$04            ; set index to array's # of dimensions
00368A  1  D1 AA                CMP     (<Astrtl),Y     ; compare with no of dimensions
00368C  1  D0 E7                BNE     LAB_1E85        ; if wrong do array bounds error, could do "Wrong
00368E  1               ; dimensions" error here .. if we want a different
00368E  1               ; error message
00368E  1               
00368E  1  4C 14 37             JMP     LAB_1F28        ; found array so go get element
003691  1               ; (could jump to LAB_1F28 as all LAB_1F24 does is take
003691  1               ; <Dimcnt and save it at (<Astrtl),Y which is already the
003691  1               ; same or we would have taken the BNE)
003691  1               
003691  1               ; array not found, so build it
003691  1               LAB_1EA1:
003691  1  20 D5 35             JSR     LAB_1DE6        ; set-up array pointer (<Adatal/h) to first element in array
003694  1               ; (<Astrtl,<Astrth points to start of array)
003694  1  20 A4 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
003697  1               ; addr to check is in AY (low/high)
003697  1  A0 00                LDY     #$00            ; clear Y (don't need to clear A)
003699  1  84 BB                STY     <Aspth          ; clear array data size high byte
00369B  1  A5 93                LDA     <Varnm1         ; get variable name 1st byte
00369D  1  91 AA                STA     (<Astrtl),Y     ; save array name 1st byte
00369F  1  C8                   INY                     ; increment index
0036A0  1  A5 94                LDA     <Varnm2         ; get variable name 2nd byte
0036A2  1  91 AA                STA     (<Astrtl),Y     ; save array name 2nd byte
0036A4  1  A5 5D                LDA     <Dimcnt         ; get dimensions count
0036A6  1  A0 04                LDY     #$04            ; index to dimension count
0036A8  1  84 BA                STY     <Asptl          ; set array data size low byte (four bytes per element)
0036AA  1  91 AA                STA     (<Astrtl),Y     ; set array's dimensions count
0036AC  1               
0036AC  1               ; now calculate the size of the data space for the array
0036AC  1  18                   CLC                     ; clear carry for add (clear on subsequent loops)
0036AD  1               LAB_1EC0:
0036AD  1  A2 0B                LDX     #$0B            ; set default dimension value low byte
0036AF  1  A9 00                LDA     #$00            ; set default dimension value high byte
0036B1  1  24 5E                BIT     <Defdim         ; test default DIM flag
0036B3  1  50 07                BVC     LAB_1ED0        ; branch if b6 of <Defdim is clear
0036B5  1               
0036B5  1  68                   PLA                     ; else pull dimension value low byte
0036B6  1  69 01                ADC     #$01            ; +1 (allow for zeroeth element)
0036B8  1  AA                   TAX                     ; copy low byte to X
0036B9  1  68                   PLA                     ; pull dimension value high byte
0036BA  1  69 00                ADC     #$00            ; add carry from low byte
0036BC  1               
0036BC  1               LAB_1ED0:
0036BC  1  C8                   INY                     ; index to dimension value high byte
0036BD  1  91 AA                STA     (<Astrtl),Y     ; save dimension value high byte
0036BF  1  C8                   INY                     ; index to dimension value high byte
0036C0  1  8A                   TXA                     ; get dimension value low byte
0036C1  1  91 AA                STA     (<Astrtl),Y     ; save dimension value low byte
0036C3  1  20 63 37             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
0036C6  1  86 BA                STX     <Asptl          ; save array data size low byte
0036C8  1  85 BB                STA     <Aspth          ; save array data size high byte
0036CA  1  A4 71                LDY     <ut1_pl         ; restore index (saved by subroutine)
0036CC  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
0036CE  1  D0 DD                BNE     LAB_1EC0        ; loop while not = 0
0036D0  1               
0036D0  1  65 A5                ADC     <Adatah         ; add size high byte to first element high byte
0036D2  1               ; (carry is always clear here)
0036D2  1  B0 5D                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
0036D4  1               
0036D4  1  85 A5                STA     <Adatah         ; save end of array high byte
0036D6  1  A8                   TAY                     ; copy end high byte to Y
0036D7  1  8A                   TXA                     ; get array size low byte
0036D8  1  65 A4                ADC     <Adatal         ; add array start low byte
0036DA  1  90 03                BCC     LAB_1EF3        ; branch if no carry
0036DC  1               
0036DC  1  C8                   INY                     ; else increment end of array high byte
0036DD  1  F0 52                BEQ     LAB_1F45        ; if overflow go do "Out of memory" error
0036DF  1               
0036DF  1               ; set-up mostly complete, now zero the array
0036DF  1               LAB_1EF3:
0036DF  1  20 A4 26             JSR     LAB_121F        ; check available memory, "Out of memory" error if no room
0036E2  1               ; addr to check is in AY (low/high)
0036E2  1  85 7F                STA     <Earryl         ; save array mem end low byte
0036E4  1  84 80                STY     <Earryh         ; save array mem end high byte
0036E6  1  A9 00                LDA     #$00            ; clear byte for array clear
0036E8  1  E6 BB                INC     <Aspth          ; increment array size high byte (now block count)
0036EA  1  A4 BA                LDY     <Asptl          ; get array size low byte (now index to block)
0036EC  1  F0 05                BEQ     LAB_1F07        ; branch if low byte = $00
0036EE  1               
0036EE  1               LAB_1F02:
0036EE  1  88                   DEY                     ; decrement index (do 0 to n-1)
0036EF  1  91 A4                STA     (<Adatal),Y     ; zero byte
0036F1  1  D0 FB                BNE     LAB_1F02        ; loop until this block done
0036F3  1               
0036F3  1               LAB_1F07:
0036F3  1  C6 A5                DEC     <Adatah         ; decrement array pointer high byte
0036F5  1  C6 BB                DEC     <Aspth          ; decrement block count high byte
0036F7  1  D0 F5                BNE     LAB_1F02        ; loop until all blocks done
0036F9  1               
0036F9  1  E6 A5                INC     <Adatah         ; correct for last loop
0036FB  1  38                   SEC                     ; set carry for subtract
0036FC  1  A0 02                LDY     #$02            ; index to array size low byte
0036FE  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
003700  1  E5 AA                SBC     <Astrtl         ; subtract array start low byte
003702  1  91 AA                STA     (<Astrtl),Y     ; save array size low byte
003704  1  C8                   INY                     ; index to array size high byte
003705  1  A5 80                LDA     <Earryh         ; get array mem end high byte
003707  1  E5 AB                SBC     <Astrth         ; subtract array start high byte
003709  1  91 AA                STA     (<Astrtl),Y     ; save array size high byte
00370B  1  A5 5E                LDA     <Defdim         ; get default DIM flag
00370D  1  D0 53                BNE     LAB_1F7B        ; exit (RET) if this was a DIM command
00370F  1               ; else, find element
00370F  1  C8                   INY                     ; index to # of dimensions
003710  1               
003710  1               LAB_1F24:
003710  1  B1 AA                LDA     (<Astrtl),Y     ; get array's dimension count
003712  1  85 5D                STA     <Dimcnt         ; save it
003714  1               
003714  1               ; we have found, or built, the array. now we need to find the element
003714  1               
003714  1               LAB_1F28:
003714  1  A9 00                LDA     #$00            ; clear byte
003716  1  85 BA                STA     <Asptl          ; clear array data pointer low byte
003718  1               LAB_1F2C:
003718  1  85 BB                STA     <Aspth          ; save array data pointer high byte
00371A  1  C8                   INY                     ; increment index (point to array bound high byte)
00371B  1  68                   PLA                     ; pull array index low byte
00371C  1  AA                   TAX                     ; copy to X
00371D  1  85 AE                STA     <FAC1_2         ; save index low byte to FAC1 mantissa2
00371F  1  68                   PLA                     ; pull array index high byte
003720  1  85 AF                STA     <FAC1_3         ; save index high byte to FAC1 mantissa3
003722  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound high byte
003724  1  90 0E                BCC     LAB_1F48        ; branch if within bounds
003726  1               
003726  1  D0 06                BNE     LAB_1F42        ; if outside bounds do array bounds error
003728  1               
003728  1               ; else high byte was = so test low bytes
003728  1  C8                   INY                     ; index to array bound low byte
003729  1  8A                   TXA                     ; get array index low byte
00372A  1  D1 AA                CMP     (<Astrtl),Y     ; compare with array bound low byte
00372C  1  90 07                BCC     LAB_1F49        ; branch if within bounds
00372E  1               
00372E  1               LAB_1F42:
00372E  1  4C 75 36             JMP     LAB_1E85        ; else do array bounds error
003731  1               
003731  1               LAB_1F45:
003731  1  4C D3 26             JMP     LAB_OMER        ; do "Out of memory" error then warm start
003734  1               
003734  1               LAB_1F48:
003734  1  C8                   INY                     ; index to array bound low byte
003735  1               LAB_1F49:
003735  1  A5 BB                LDA     <Aspth          ; get array data pointer high byte
003737  1  05 BA                ORA     <Asptl          ; OR with array data pointer low byte
003739  1  F0 0A                BEQ     LAB_1F5A        ; branch if array data pointer = null (skip multiply)
00373B  1               
00373B  1  20 63 37             JSR     LAB_1F7C        ; does XY = (<Astrtl),Y * (<Asptl)
00373E  1  8A                   TXA                     ; get result low byte
00373F  1  65 AE                ADC     <FAC1_2         ; add index low byte from FAC1 mantissa2
003741  1  AA                   TAX                     ; save result low byte
003742  1  98                   TYA                     ; get result high byte
003743  1  A4 71                LDY     <ut1_pl         ; restore index
003745  1               LAB_1F5A:
003745  1  65 AF                ADC     <FAC1_3         ; add index high byte from FAC1 mantissa3
003747  1  86 BA                STX     <Asptl          ; save array data pointer low byte
003749  1  C6 5D                DEC     <Dimcnt         ; decrement dimensions count
00374B  1  D0 CB                BNE     LAB_1F2C        ; loop if dimensions still to do
00374D  1               
00374D  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 2
00374F  1  2A                   ROL     A               ; array data pointer high byte * 2
003750  1  06 BA                ASL     <Asptl          ; array data pointer low byte * 4
003752  1  2A                   ROL     A               ; array data pointer high byte * 4
003753  1  A8                   TAY                     ; copy high byte
003754  1  A5 BA                LDA     <Asptl          ; get low byte
003756  1  65 A4                ADC     <Adatal         ; add array data start pointer low byte
003758  1  85 95                STA     <Cvaral         ; save as current var address low byte
00375A  1  98                   TYA                     ; get high byte back
00375B  1  65 A5                ADC     <Adatah         ; add array data start pointer high byte
00375D  1  85 96                STA     <Cvarah         ; save as current var address high byte
00375F  1  A8                   TAY                     ; copy high byte to Y
003760  1  A5 95                LDA     <Cvaral         ; get current var address low byte
003762  1               LAB_1F7B:
003762  1  60                   RTS
003763  1               
003763  1               ; does XY = (<Astrtl),Y * (<Asptl)
003763  1               
003763  1               LAB_1F7C:
003763  1  84 71                STY     <ut1_pl         ; save index
003765  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size low byte
003767  1  85 76                STA     <dims_l         ; save dimension size low byte
003769  1  88                   DEY                     ; decrement index
00376A  1  B1 AA                LDA     (<Astrtl),Y     ; get dimension size high byte
00376C  1  85 77                STA     <dims_h         ; save dimension size high byte
00376E  1               
00376E  1  A9 10                LDA     #$10            ; count = $10 (16 bit multiply)
003770  1  85 A8                STA     <numbit         ; save bit count
003772  1  A2 00                LDX     #$00            ; clear result low byte
003774  1  A0 00                LDY     #$00            ; clear result high byte
003776  1               LAB_1F8F:
003776  1  8A                   TXA                     ; get result low byte
003777  1  0A                   ASL     A               ; *2
003778  1  AA                   TAX                     ; save result low byte
003779  1  98                   TYA                     ; get result high byte
00377A  1  2A                   ROL     A               ; *2
00377B  1  A8                   TAY                     ; save result high byte
00377C  1  B0 B3                BCS     LAB_1F45        ; if overflow go do "Out of memory" error
00377E  1               
00377E  1  06 BA                ASL     <Asptl          ; shift multiplier low byte
003780  1  26 BB                ROL     <Aspth          ; shift multiplier high byte
003782  1  90 11                BCC     LAB_1FA8        ; skip add if no carry
003784  1               
003784  1  18                   CLC                     ; else clear carry for add
003785  1  8A                   TXA                     ; get result low byte
003786  1  65 76                ADC     <dims_l         ; add dimension size low byte
003788  1  AA                   TAX                     ; save result low byte
003789  1  98                   TYA                     ; get result high byte
00378A  1  65 77                ADC     <dims_h         ; add dimension size high byte
00378C  1  A8                   TAY                     ; save result high byte
00378D  1  B0 03                BCS     LAB_1F45_1      ; if overflow go do "Out of memory" error
00378F  1  4C 95 37             JMP     LAB_1FA8
003792  1               LAB_1F45_1:
003792  1  4C 31 37             JMP     LAB_1F45
003795  1               LAB_1FA8:
003795  1  C6 A8                DEC     <numbit         ; decrement bit count
003797  1  D0 DD                BNE     LAB_1F8F        ; loop until all done
003799  1               
003799  1  60                   RTS
00379A  1               
00379A  1               ; perform FRE()
00379A  1               
00379A  1               LAB_FRE:
00379A  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
00379C  1  10 03                BPL     LAB_1FB4        ; branch if numeric
00379E  1               
00379E  1  20 06 3C             JSR     LAB_22B6        ; pop string off descriptor stack, or from top of string
0037A1  1               ; space returns with A = length, X=$71=pointer low byte,
0037A1  1               ; Y=$72=pointer high byte
0037A1  1               
0037A1  1               ; FRE(n) was numeric so do this
0037A1  1               LAB_1FB4:
0037A1  1  20 DC 39             JSR     LAB_GARB        ; go do garbage collection
0037A4  1  38                   SEC                     ; set carry for subtract
0037A5  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
0037A7  1  E5 7F                SBC     <Earryl         ; subtract array mem end low byte
0037A9  1  A8                   TAY                     ; copy result to Y
0037AA  1  A5 82                LDA     <Sstorh         ; get bottom of string space high byte
0037AC  1  E5 80                SBC     <Earryh         ; subtract array mem end high byte
0037AE  1               
0037AE  1               ; save and convert integer AY to FAC1
0037AE  1               
0037AE  1               LAB_AYFC:
0037AE  1  46 5F                LSR     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
0037B0  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0037B2  1  84 AE                STY     <FAC1_2         ; save FAC1 mantissa2
0037B4  1  A2 90                LDX     #$90            ; set exponent=2^16 (integer)
0037B6  1  4C 92 44             JMP     LAB_27E3        ; set exp=X, clear <FAC1_3, normalise and return
0037B9  1               
0037B9  1               ; perform POS()
0037B9  1               
0037B9  1               LAB_POS:
0037B9  1  A4 0E                LDY     <TPos           ; get terminal position
0037BB  1               
0037BB  1               ; convert Y to byte in FAC1
0037BB  1               
0037BB  1               LAB_1FD0:
0037BB  1  A9 00                LDA     #$00            ; clear high byte
0037BD  1  F0 EF                BEQ     LAB_AYFC        ; always save and convert integer AY to FAC1 and return
0037BF  1               
0037BF  1               ; check not Direct (used by DEF and INPUT)
0037BF  1               
0037BF  1               LAB_CKRN:
0037BF  1  A6 88                LDX     <Clineh         ; get current line high byte
0037C1  1  E8                   INX                     ; increment it
0037C2  1  F0 03                BEQ     LAB_1FD9
0037C4  1  4C 62 37             JMP     LAB_1F7B        ; return if can continue not direct mode
0037C7  1               
0037C7  1               ; else do illegal direct error
0037C7  1               LAB_1FD9:
0037C7  1  A2 16                LDX     #$16            ; error code $16 ("Illegal direct" error)
0037C9  1               LAB_1FDB:
0037C9  1  4C D5 26             JMP     LAB_XERR        ; go do error #X, then warm start
0037CC  1               
0037CC  1               ; perform DEF
0037CC  1               
0037CC  1               LAB_DEF:
0037CC  1  20 FD 37             JSR     LAB_200B        ; check FNx syntax
0037CF  1  85 9C                STA     <func_l         ; save function pointer low byte
0037D1  1  84 9D                STY     <func_h         ; save function pointer high byte
0037D3  1  20 BF 37             JSR     LAB_CKRN        ; check not Direct (back here if ok)
0037D6  1  20 11 33             JSR     LAB_1BFE        ; scan for "(" , else do syntax error then warm start
0037D9  1  A9 80                LDA     #$80            ; set flag for FNx
0037DB  1  85 61                STA     <Sufnxf         ; save subscript/FNx flag
0037DD  1  20 F0 34             JSR     LAB_GVAR        ; get (var) address
0037E0  1  20 E2 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
0037E3  1  20 04 33             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
0037E6  1  A9 D2                LDA     #TK_EQUAL       ; get = token
0037E8  1  20 06 33             JSR     LAB_SCCA        ; scan for CHR$(A), else do syntax error then warm start
0037EB  1  A5 96                LDA     <Cvarah         ; get current var address high byte
0037ED  1  48                   PHA                     ; push it
0037EE  1  A5 95                LDA     <Cvaral         ; get current var address low byte
0037F0  1  48                   PHA                     ; push it
0037F1  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
0037F3  1  48                   PHA                     ; push it
0037F4  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
0037F6  1  48                   PHA                     ; push it
0037F7  1  20 4C 2C             JSR     LAB_DATA        ; go perform DATA
0037FA  1  4C A9 38             JMP     LAB_207A        ; put execute pointer and variable pointer into function
0037FD  1               ; and return
0037FD  1               
0037FD  1               ; check FNx syntax
0037FD  1               
0037FD  1               LAB_200B:
0037FD  1  A9 BF                LDA     #TK_FN          ; get FN" token
0037FF  1  20 06 33             JSR     LAB_SCCA        ; scan for CHR$(A) , else do syntax error then warm start
003802  1               ; return character after A
003802  1  09 80                ORA     #$80            ; set FN flag bit
003804  1  85 61                STA     <Sufnxf         ; save FN flag so array variable test fails
003806  1  20 F8 34             JSR     LAB_1D12        ; search for FN variable
003809  1  4C E2 31             JMP     LAB_CTNM        ; check if source is numeric and return, else do type
00380C  1               ; mismatch
00380C  1               
00380C  1               ; Evaluate FNx
00380C  1               LAB_201E:
00380C  1  20 FD 37             JSR     LAB_200B        ; check FNx syntax
00380F  1  48                   PHA                     ; push function pointer low byte
003810  1  98                   TYA                     ; copy function pointer high byte
003811  1  48                   PHA                     ; push function pointer high byte
003812  1  20 11 33             JSR     LAB_1BFE        ; scan for "(", else do syntax error then warm start
003815  1  20 F3 31             JSR     LAB_EVEX        ; evaluate expression
003818  1  20 04 33             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
00381B  1  20 E2 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
00381E  1  68                   PLA                     ; pop function pointer high byte
00381F  1  85 9D                STA     <func_h         ; restore it
003821  1  68                   PLA                     ; pop function pointer low byte
003822  1  85 9C                STA     <func_l         ; restore it
003824  1  A2 20                LDX     #$20            ; error code $20 ("Undefined function" error)
003826  1  A0 03                LDY     #$03            ; index to variable pointer high byte
003828  1  B1 9C                LDA     (<func_l),Y     ; get variable pointer high byte
00382A  1  F0 9D                BEQ     LAB_1FDB        ; if zero go do undefined function error
00382C  1               
00382C  1  85 96                STA     <Cvarah         ; save variable address high byte
00382E  1  88                   DEY                     ; index to variable address low byte
00382F  1  B1 9C                LDA     (<func_l),Y     ; get variable address low byte
003831  1  85 95                STA     <Cvaral         ; save variable address low byte
003833  1  AA                   TAX                     ; copy address low byte
003834  1               
003834  1               ; now stack the function variable value before use
003834  1  C8                   INY                     ; index to mantissa_3
003835  1               LAB_2043:
003835  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from variable
003839  1  B5 95 C9 00  
00383D  1  D0 04 A2 00  
00384B  1  48                   PHA                     ; stack it
00384C  1  88                   DEY                     ; decrement index
00384D  1  10 E6                BPL     LAB_2043        ; loop until variable stacked
00384F  1               
00384F  1  A4 96                LDY     <Cvarah         ; get variable address high byte
003851  1  20 E7 43             JSR     LAB_2778        ; pack FAC1 (function expression value) into (XY)
003854  1               ; (function variable), return Y=0, always
003854  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
003856  1  48                   PHA                     ; push it
003857  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
003859  1  48                   PHA                     ; push it
00385A  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer low byte
00385E  1  B5 9C C9 00  
003862  1  D0 04 A2 00  
003870  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
003872  1  C8                   INY                     ; index to high byte
003873  1  8B DA A2 01          LDAINDIRECTY func_l     ; get function execute pointer high byte
003877  1  B5 9C C9 00  
00387B  1  D0 04 A2 00  
003889  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
00388B  1  A5 96                LDA     <Cvarah         ; get variable address high byte
00388D  1  48                   PHA                     ; push it
00388E  1  A5 95                LDA     <Cvaral         ; get variable address low byte
003890  1  48                   PHA                     ; push it
003891  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003894  1               ; else do type mismatch
003894  1  68                   PLA                     ; pull variable address low byte
003895  1  85 9C                STA     <func_l         ; save variable address low byte
003897  1  68                   PLA                     ; pull variable address high byte
003898  1  85 9D                STA     <func_h         ; save variable address high byte
00389A  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
00389E  1  F0 03                BEQ     LAB_2074        ; branch if null (should be [EOL] marker)
0038A0  1               
0038A0  1  4C 19 33             JMP     LAB_SNER        ; else syntax error then warm start
0038A3  1               
0038A3  1               ; restore <Bpntrl,<Bpntrh and function variable from stack
0038A3  1               
0038A3  1               LAB_2074:
0038A3  1  68                   PLA                     ; pull BASIC execute pointer low byte
0038A4  1  85 C3                STA     <Bpntrl         ; restore BASIC execute pointer low byte
0038A6  1  68                   PLA                     ; pull BASIC execute pointer high byte
0038A7  1  85 C4                STA     <Bpntrh         ; restore BASIC execute pointer high byte
0038A9  1               
0038A9  1               ; put execute pointer and variable pointer into function
0038A9  1               
0038A9  1               LAB_207A:
0038A9  1  A0 00                LDY     #$00            ; clear index
0038AB  1  68                   PLA                     ; pull BASIC execute pointer low byte
0038AC  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0038B0  1  01 B5 9C C9  
0038B4  1  00 D0 04 A2  
0038C2  1  C8                   INY                     ; increment index
0038C3  1  68                   PLA                     ; pull BASIC execute pointer high byte
0038C4  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0038C8  1  01 B5 9C C9  
0038CC  1  00 D0 04 A2  
0038DA  1  C8                   INY                     ; increment index
0038DB  1  68                   PLA                     ; pull current var address low byte
0038DC  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0038E0  1  01 B5 9C C9  
0038E4  1  00 D0 04 A2  
0038F2  1  C8                   INY                     ; increment index
0038F3  1  68                   PLA                     ; pull current var address high byte
0038F4  1  8B DA 48 A2          STAINDIRECTY func_l     ; save to function
0038F8  1  01 B5 9C C9  
0038FC  1  00 D0 04 A2  
00390A  1  60                   RTS
00390B  1               
00390B  1               ; perform STR$()
00390B  1               
00390B  1               LAB_STRS:
00390B  1  20 E2 31             JSR     LAB_CTNM        ; check if source is numeric, else do type mismatch
00390E  1  20 A7 46             JSR     LAB_296E        ; convert FAC1 to string
003911  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
003913  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
003915  1  F0 12                BEQ     LAB_20AE        ; print null terminated string to <Sutill/<Sutilh
003917  1               
003917  1               ; Do string vector
003917  1               ; copy <des_pl/h to <des_2l/h and make string space A bytes long
003917  1               
003917  1               LAB_209C:
003917  1  A6 AE                LDX     <des_pl         ; get descriptor pointer low byte
003919  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
00391B  1  86 9E                STX     <des_2l         ; save descriptor pointer low byte
00391D  1  84 9F                STY     <des_2h         ; save descriptor pointer high byte
00391F  1               
00391F  1               ; make string space A bytes long
00391F  1               ; A=length, X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
00391F  1               
00391F  1               LAB_MSSP:
00391F  1  20 AA 39             JSR     LAB_2115        ; make space in string memory for string A long
003922  1               ; return X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003922  1  86 AD                STX     <str_pl         ; save string pointer low byte
003924  1  84 AE                STY     <str_ph         ; save string pointer high byte
003926  1  85 AC                STA     <str_ln         ; save length
003928  1  60                   RTS
003929  1               
003929  1               ; Scan, set up string
003929  1               ; print " terminated string to <Sutill/<Sutilh
003929  1               
003929  1               LAB_20AE:
003929  1  A2 22                LDX     #$22            ; set terminator to "
00392B  1  86 5B                STX     <Srchc          ; set search character (terminator 1)
00392D  1  86 5C                STX     <Asrch          ; set terminator 2
00392F  1               
00392F  1               ; print [<Srchc] or [<Asrch] terminated string to <Sutill/<Sutilh
00392F  1               ; source is AY
00392F  1               
00392F  1               LAB_20B4:
00392F  1  85 B8                STA     <ssptr_l        ; store string start low byte
003931  1  84 B9                STY     <ssptr_h        ; store string start high byte
003933  1  85 AD                STA     <str_pl         ; save string pointer low byte
003935  1  84 AE                STY     <str_ph         ; save string pointer high byte
003937  1  A0 FF                LDY     #$FF            ; set length to -1
003939  1               LAB_20BE:
003939  1  C8                   INY                     ; increment length
00393A  1               
00393A  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get byte from string
00393E  1  B5 B8 C9 00  
003942  1  D0 04 A2 00  
003950  1  C9 00                CMP     #$00
003952  1  F0 0C                BEQ     LAB_20CF        ; exit loop if null byte [EOS]
003954  1               
003954  1  C5 5B                CMP     <Srchc          ; compare with search character (terminator 1)
003956  1  F0 04                BEQ     LAB_20CB        ; branch if terminator
003958  1               
003958  1  C5 5C                CMP     <Asrch          ; compare with terminator 2
00395A  1  D0 DD                BNE     LAB_20BE        ; loop if not terminator 2
00395C  1               
00395C  1               LAB_20CB:
00395C  1  C9 22                CMP     #$22            ; compare with "
00395E  1  F0 01                BEQ     LAB_20D0        ; branch if " (carry set if = !)
003960  1               
003960  1               LAB_20CF:
003960  1  18                   CLC                     ; clear carry for add (only if [EOL] terminated string)
003961  1               LAB_20D0:
003961  1  84 AC                STY     <str_ln         ; save length in FAC1 exponent
003963  1  98                   TYA                     ; copy length to A
003964  1  65 B8                ADC     <ssptr_l        ; add string start low byte
003966  1  85 BA                STA     <Sendl          ; save string end low byte
003968  1  A6 B9                LDX     <ssptr_h        ; get string start high byte
00396A  1  90 01                BCC     LAB_20DC        ; branch if no low byte overflow
00396C  1               
00396C  1  E8                   INX                     ; else increment high byte
00396D  1               LAB_20DC:
00396D  1  86 BB                STX     <Sendh          ; save string end high byte
00396F  1  A5 B9                LDA     <ssptr_h        ; get string start high byte
003971  1               
003971  1               
003971  1               ; *** begin RAM above code / Ibuff above EhBASIC patch V2 ***
003971  1               ; *** replace
003971  1               ;      CMP	#((BASICBEGIN&$FF00)>>8)  ; compare with BASICBEGIN, FORMERLY (>Ram_base) start of program memory
003971  1               ;      BCS   LAB_RTST          ; branch if not in utility area
003971  1               ; *** with
003971  1  F0 04                BEQ     LAB_MVST        ; fix STR$() using page zero via LAB_296E
003973  1  C9 21                CMP     #>Ibuffs        ; compare with location of input buffer page
003975  1  D0 0B                BNE     LAB_RTST        ; branch if not in utility area
003977  1               LAB_MVST:
003977  1               ; *** end   RAM above code / Ibuff above EhBASIC patch V2 ***
003977  1               
003977  1               
003977  1  98                   TYA                     ; copy length to A
003978  1  20 17 39             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
00397B  1               ; long
00397B  1  A6 B8                LDX     <ssptr_l        ; get string start low byte
00397D  1  A4 B9                LDY     <ssptr_h        ; get string start high byte
00397F  1  20 BF 3B             JSR     LAB_2298        ; store string A bytes long from XY to (<Sutill)
003982  1               ; check for space on descriptor stack then ..
003982  1               ; put string address and length on descriptor stack and update stack pointers
003982  1               
003982  1               LAB_RTST:
003982  1  A6 65                LDX     <next_s         ; get string stack pointer
003984  1  E0 71                CPX     #<des_sk+$09    ; compare with max+1
003986  1  D0 05                BNE     LAB_20F8        ; branch if space on string stack
003988  1               
003988  1               ; else do string too complex error
003988  1  A2 1C                LDX     #$1C            ; error code $1C ("String too complex" error)
00398A  1               LAB_20F5:
00398A  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
00398D  1               
00398D  1               ; put string address and length on descriptor stack and update stack pointers
00398D  1               
00398D  1               LAB_20F8:
00398D  1  A5 AC                LDA     <str_ln         ; get string length
00398F  1  95 00                STA     <PLUS_0,X       ; put on string stack
003991  1  A5 AD                LDA     <str_pl         ; get string pointer low byte
003993  1  95 01                STA     <PLUS_1,X       ; put on string stack
003995  1  A5 AE                LDA     <str_ph         ; get string pointer high byte
003997  1  95 02                STA     <PLUS_2,X       ; put on string stack
003999  1  A0 00                LDY     #$00            ; clear Y
00399B  1  86 AE                STX     <des_pl         ; save string descriptor pointer low byte
00399D  1  84 AF                STY     <des_ph         ; save string descriptor pointer high byte (always $00)
00399F  1  88                   DEY                     ; Y = $FF
0039A0  1  84 5F                STY     <Dtypef         ; save data type flag, $FF=string
0039A2  1  86 66                STX     <last_sl        ; save old stack pointer (current top item)
0039A4  1  E8                   INX                     ; update stack pointer
0039A5  1  E8                   INX                     ; update stack pointer
0039A6  1  E8                   INX                     ; update stack pointer
0039A7  1  86 65                STX     <next_s         ; save new top item value
0039A9  1  60                   RTS
0039AA  1               
0039AA  1               ; Build descriptor
0039AA  1               ; make space in string memory for string A long
0039AA  1               ; return X=<Sutill=ptr low byte, Y=<Sutill=ptr high byte
0039AA  1               
0039AA  1               LAB_2115:
0039AA  1  46 60                LSR     <Gclctd         ; clear garbage collected flag (b7)
0039AC  1               
0039AC  1               ; make space for string A long
0039AC  1               LAB_2117:
0039AC  1  48                   PHA                     ; save string length
0039AD  1  49 FF                EOR     #$FF            ; complement it
0039AF  1  38                   SEC                     ; set carry for subtract (twos comp add)
0039B0  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte (subtract length)
0039B2  1  A4 82                LDY     <Sstorh         ; get bottom of string space high byte
0039B4  1  B0 01                BCS     LAB_2122        ; skip decrement if no underflow
0039B6  1               
0039B6  1  88                   DEY                     ; decrement bottom of string space high byte
0039B7  1               LAB_2122:
0039B7  1  C4 80                CPY     <Earryh         ; compare with array mem end high byte
0039B9  1  90 11                BCC     LAB_2137        ; do out of memory error if less
0039BB  1               
0039BB  1  D0 04                BNE     LAB_212C        ; if not = skip next test
0039BD  1               
0039BD  1  C5 7F                CMP     <Earryl         ; compare with array mem end low byte
0039BF  1  90 0B                BCC     LAB_2137        ; do out of memory error if less
0039C1  1               
0039C1  1               LAB_212C:
0039C1  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
0039C3  1  84 82                STY     <Sstorh         ; save bottom of string space high byte
0039C5  1  85 83                STA     <Sutill         ; save string utility ptr low byte
0039C7  1  84 84                STY     <Sutilh         ; save string utility ptr high byte
0039C9  1  AA                   TAX                     ; copy low byte to X
0039CA  1  68                   PLA                     ; get string length back
0039CB  1  60                   RTS
0039CC  1               
0039CC  1               LAB_2137:
0039CC  1  A2 0C                LDX     #$0C            ; error code $0C ("Out of memory" error)
0039CE  1  A5 60                LDA     <Gclctd         ; get garbage collected flag
0039D0  1  30 B8                BMI     LAB_20F5        ; if set then do error code X
0039D2  1               
0039D2  1  20 DC 39             JSR     LAB_GARB        ; else go do garbage collection
0039D5  1  A9 80                LDA     #$80            ; flag for garbage collected
0039D7  1  85 60                STA     <Gclctd         ; set garbage collected flag
0039D9  1  68                   PLA                     ; pull length
0039DA  1  D0 D0                BNE     LAB_2117        ; go try again (loop always, length should never be = $00)
0039DC  1               
0039DC  1               ; garbage collection routine
0039DC  1               
0039DC  1               LAB_GARB:
0039DC  1  A6 85                LDX     <Ememl          ; get end of mem low byte
0039DE  1  A5 86                LDA     <Ememh          ; get end of mem high byte
0039E0  1               
0039E0  1               ; re-run routine from last ending
0039E0  1               
0039E0  1               LAB_214B:
0039E0  1  86 81                STX     <Sstorl         ; set string storage low byte
0039E2  1  85 82                STA     <Sstorh         ; set string storage high byte
0039E4  1  A0 00                LDY     #$00            ; clear index
0039E6  1  84 9D                STY     <garb_h         ; clear working pointer high byte (flag no strings to move)
0039E8  1  A5 7F                LDA     <Earryl         ; get array mem end low byte
0039EA  1  A6 80                LDX     <Earryh         ; get array mem end high byte
0039EC  1  85 AA                STA     <Histrl         ; save as highest string low byte
0039EE  1  86 AB                STX     <Histrh         ; save as highest string high byte
0039F0  1  A9 68                LDA     #<des_sk        ; set descriptor stack pointer
0039F2  1  85 71                STA     <ut1_pl         ; save descriptor stack pointer low byte
0039F4  1  84 72                STY     <ut1_ph         ; save descriptor stack pointer high byte ($00)
0039F6  1               LAB_2161:
0039F6  1  C5 65                CMP     <next_s         ; compare with descriptor stack pointer
0039F8  1  F0 05                BEQ     LAB_216A        ; branch if =
0039FA  1               
0039FA  1  20 60 3A             JSR     LAB_21D7        ; go garbage collect descriptor stack
0039FD  1  F0 F7                BEQ     LAB_2161        ; loop always
0039FF  1               
0039FF  1               ; done stacked strings, now do string vars
0039FF  1               LAB_216A:
0039FF  1  06 A0                ASL     <g_step         ; set step size = $06
003A01  1  A5 7B                LDA     <Svarl          ; get start of vars low byte
003A03  1  A6 7C                LDX     <Svarh          ; get start of vars high byte
003A05  1  85 71                STA     <ut1_pl         ; save as pointer low byte
003A07  1  86 72                STX     <ut1_ph         ; save as pointer high byte
003A09  1               LAB_2176:
003A09  1  E4 7E                CPX     <Sarryh         ; compare start of arrays high byte
003A0B  1  D0 04                BNE     LAB_217E        ; branch if no high byte match
003A0D  1               
003A0D  1  C5 7D                CMP     <Sarryl         ; else compare start of arrays low byte
003A0F  1  F0 05                BEQ     LAB_2183        ; branch if = var mem end
003A11  1               
003A11  1               LAB_217E:
003A11  1  20 5A 3A             JSR     LAB_21D1        ; go garbage collect strings
003A14  1  F0 F3                BEQ     LAB_2176        ; loop always
003A16  1               
003A16  1               ; done string vars, now do string arrays
003A16  1               LAB_2183:
003A16  1  85 A4                STA     <Nbendl         ; save start of arrays low byte as working pointer
003A18  1  86 A5                STX     <Nbendh         ; save start of arrays high byte as working pointer
003A1A  1  A9 04                LDA     #$04            ; set step size
003A1C  1  85 A0                STA     <g_step         ; save step size
003A1E  1               LAB_218B:
003A1E  1  A5 A4                LDA     <Nbendl         ; get pointer low byte
003A20  1  A6 A5                LDX     <Nbendh         ; get pointer high byte
003A22  1               LAB_218F:
003A22  1  E4 80                CPX     <Earryh         ; compare with array mem end high byte
003A24  1  D0 04                BNE     LAB_219A        ; branch if not at end
003A26  1               
003A26  1  C5 7F                CMP     <Earryl         ; else compare with array mem end low byte
003A28  1  F0 75                BEQ     LAB_2216        ; tidy up and exit if at end
003A2A  1               
003A2A  1               LAB_219A:
003A2A  1  85 71                STA     <ut1_pl         ; save pointer low byte
003A2C  1  86 72                STX     <ut1_ph         ; save pointer high byte
003A2E  1  A0 02                LDY     #$02            ; set index
003A30  1  B1 71                LDA     (<ut1_pl),Y     ; get array size low byte
003A32  1  65 A4                ADC     <Nbendl         ; add start of this array low byte
003A34  1  85 A4                STA     <Nbendl         ; save start of next array low byte
003A36  1  C8                   INY                     ; increment index
003A37  1  B1 71                LDA     (<ut1_pl),Y     ; get array size high byte
003A39  1  65 A5                ADC     <Nbendh         ; add start of this array high byte
003A3B  1  85 A5                STA     <Nbendh         ; save start of next array high byte
003A3D  1  A0 01                LDY     #$01            ; set index
003A3F  1  B1 71                LDA     (<ut1_pl),Y     ; get name second byte
003A41  1  10 DB                BPL     LAB_218B        ; skip if not string array
003A43  1               
003A43  1               ; was string array so ..
003A43  1               
003A43  1  A0 04                LDY     #$04            ; set index
003A45  1  B1 71                LDA     (<ut1_pl),Y     ; get # of dimensions
003A47  1  0A                   ASL     A               ; *2
003A48  1  69 05                ADC     #$05            ; +5 (array header size)
003A4A  1  20 92 3A             JSR     LAB_2208        ; go set up for first element
003A4D  1               LAB_21C4:
003A4D  1  E4 A5                CPX     <Nbendh         ; compare with start of next array high byte
003A4F  1  D0 04                BNE     LAB_21CC        ; branch if <> (go do this array)
003A51  1               
003A51  1  C5 A4                CMP     <Nbendl         ; else compare element pointer low byte with next array
003A53  1               ; low byte
003A53  1  F0 CD                BEQ     LAB_218F        ; if equal then go do next array
003A55  1               
003A55  1               LAB_21CC:
003A55  1  20 60 3A             JSR     LAB_21D7        ; go defrag array strings
003A58  1  F0 F3                BEQ     LAB_21C4        ; go do next array string (loop always)
003A5A  1               
003A5A  1               ; defrag string variables
003A5A  1               ; enter with XA = variable pointer
003A5A  1               ; return with XA = next variable pointer
003A5A  1               
003A5A  1               LAB_21D1:
003A5A  1  C8                   INY                     ; increment index (Y was $00)
003A5B  1  B1 71                LDA     (<ut1_pl),Y     ; get var name byte 2
003A5D  1  10 30                BPL     LAB_2206        ; if not string, step pointer to next var and return
003A5F  1               
003A5F  1  C8                   INY                     ; else increment index
003A60  1               LAB_21D7:
003A60  1  B1 71                LDA     (<ut1_pl),Y     ; get string length
003A62  1  F0 2B                BEQ     LAB_2206        ; if null, step pointer to next string and return
003A64  1               
003A64  1  C8                   INY                     ; else increment index
003A65  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer low byte
003A67  1  AA                   TAX                     ; copy to X
003A68  1  C8                   INY                     ; increment index
003A69  1  B1 71                LDA     (<ut1_pl),Y     ; get string pointer high byte
003A6B  1  C5 82                CMP     <Sstorh         ; compare bottom of string space high byte
003A6D  1  90 06                BCC     LAB_21EC        ; branch if less
003A6F  1               
003A6F  1  D0 1E                BNE     LAB_2206        ; if greater, step pointer to next string and return
003A71  1               
003A71  1               ; high bytes were = so compare low bytes
003A71  1  E4 81                CPX     <Sstorl         ; compare bottom of string space low byte
003A73  1  B0 1A                BCS     LAB_2206        ; if >=, step pointer to next string and return
003A75  1               
003A75  1               ; string pointer is < string storage pointer (pos in mem)
003A75  1               LAB_21EC:
003A75  1  C5 AB                CMP     <Histrh         ; compare to highest string high byte
003A77  1  90 17                BCC     LAB_2207        ; if <, step pointer to next string and return
003A79  1               
003A79  1  D0 04                BNE     LAB_21F6        ; if > update pointers, step to next and return
003A7B  1               
003A7B  1               ; high bytes were = so compare low bytes
003A7B  1  E4 AA                CPX     <Histrl         ; compare to highest string low byte
003A7D  1  90 11                BCC     LAB_2207        ; if <, step pointer to next string and return
003A7F  1               
003A7F  1               ; string is in string memory space
003A7F  1               LAB_21F6:
003A7F  1  86 AA                STX     <Histrl         ; save as new highest string low byte
003A81  1  85 AB                STA     <Histrh         ; save as new highest string high byte
003A83  1  A5 71                LDA     <ut1_pl         ; get start of vars(descriptors) low byte
003A85  1  A6 72                LDX     <ut1_ph         ; get start of vars(descriptors) high byte
003A87  1  85 9C                STA     <garb_l         ; save as working pointer low byte
003A89  1  86 9D                STX     <garb_h         ; save as working pointer high byte
003A8B  1  88                   DEY                     ; decrement index DIFFERS
003A8C  1  88                   DEY                     ; decrement index (should point to descriptor start)
003A8D  1  84 A2                STY     <g_indx         ; save index pointer
003A8F  1               
003A8F  1               ; step pointer to next string
003A8F  1               LAB_2206:
003A8F  1  18                   CLC                     ; clear carry for add
003A90  1               LAB_2207:
003A90  1  A5 A0                LDA     <g_step         ; get step size
003A92  1               LAB_2208:
003A92  1  65 71                ADC     <ut1_pl         ; add pointer low byte
003A94  1  85 71                STA     <ut1_pl         ; save pointer low byte
003A96  1  90 02                BCC     LAB_2211        ; branch if no overflow
003A98  1               
003A98  1  E6 72                INC     <ut1_ph         ; else increment high byte
003A9A  1               LAB_2211:
003A9A  1  A6 72                LDX     <ut1_ph         ; get pointer high byte
003A9C  1  A0 00                LDY     #$00            ; clear Y
003A9E  1  60                   RTS
003A9F  1               
003A9F  1               ; search complete, now either exit or set-up and move string
003A9F  1               
003A9F  1               LAB_2216:
003A9F  1  C6 A0                DEC     <g_step         ; decrement step size (now $03 for descriptor stack)
003AA1  1  A6 9D                LDX     <garb_h         ; get string to move high byte
003AA3  1  F0 F5                BEQ     LAB_2211        ; exit if nothing to move
003AA5  1               
003AA5  1  A4 A2                LDY     <g_indx         ; get index byte back (points to descriptor)
003AA7  1  18                   CLC                     ; clear carry for add
003AA8  1  8B DA A2 01          LDAINDIRECTY garb_l     ; get string length
003AAC  1  B5 9C C9 00  
003AB0  1  D0 04 A2 00  
003ABE  1  65 AA                ADC     <Histrl         ; add highest string low byte
003AC0  1  85 A6                STA     <Obendl         ; save old block end low pointer
003AC2  1  A5 AB                LDA     <Histrh         ; get highest string high byte
003AC4  1  69 00                ADC     #$00            ; add any carry
003AC6  1  85 A7                STA     <Obendh         ; save old block end high byte
003AC8  1  A5 81                LDA     <Sstorl         ; get bottom of string space low byte
003ACA  1  A6 82                LDX     <Sstorh         ; get bottom of string space high byte
003ACC  1  85 A4                STA     <Nbendl         ; save new block end low byte
003ACE  1  86 A5                STX     <Nbendh         ; save new block end high byte
003AD0  1  20 01 26             JSR     LAB_11D6        ; open up space in memory, don't set array end
003AD3  1  A4 A2                LDY     <g_indx         ; get index byte
003AD5  1  C8                   INY                     ; point to descriptor low byte
003AD6  1  A5 A4                LDA     <Nbendl         ; get string pointer low byte
003AD8  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer low byte
003ADC  1  01 B5 9C C9  
003AE0  1  00 D0 04 A2  
003AEE  1  AA                   TAX                     ; copy string pointer low byte
003AEF  1  E6 A5                INC     <Nbendh         ; correct high byte (move sets high byte -1)
003AF1  1  A5 A5                LDA     <Nbendh         ; get new string pointer high byte
003AF3  1  C8                   INY                     ; point to descriptor high byte
003AF4  1  8B DA 48 A2          STAINDIRECTY garb_l     ; save new string pointer high byte
003AF8  1  01 B5 9C C9  
003AFC  1  00 D0 04 A2  
003B0A  1  4C E0 39             JMP     LAB_214B        ; re-run routine from last ending
003B0D  1               ; (but don't collect this string)
003B0D  1               
003B0D  1               ; concatenate
003B0D  1               ; add strings, string 1 is in descriptor <des_pl, string 2 is in line
003B0D  1               
003B0D  1               LAB_224D:
003B0D  1  A5 AF                LDA     <des_ph         ; get descriptor pointer high byte
003B0F  1  48                   PHA                     ; put on stack
003B10  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003B12  1  48                   PHA                     ; put on stack
003B13  1  20 E1 32             JSR     LAB_GVAL        ; get value from line
003B16  1  20 E4 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003B19  1  68                   PLA                     ; get descriptor pointer low byte back
003B1A  1  85 B8                STA     <ssptr_l        ; set pointer low byte
003B1C  1  68                   PLA                     ; get descriptor pointer high byte back
003B1D  1  85 B9                STA     <ssptr_h        ; set pointer high byte
003B1F  1  A0 00                LDY     #$00            ; clear index
003B21  1  8B DA A2 01          LDAINDIRECTY ssptr_l    ; get length_1 from descriptor
003B25  1  B5 B8 C9 00  
003B29  1  D0 04 A2 00  
003B37  1  18                   CLC                     ; clear carry for add
003B38  1  8B 48 DA A2          ADCINDIRECTY des_pl     ; add length_2
003B3C  1  01 B5 AE C9  
003B40  1  00 D0 04 A2  
003B51  1  90 05                BCC     LAB_226D        ; branch if no overflow
003B53  1               
003B53  1  A2 1A                LDX     #$1A            ; else set error code $1A ("String too long" error)
003B55  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
003B58  1               
003B58  1               LAB_226D:
003B58  1  20 17 39             JSR     LAB_209C        ; copy <des_pl/h to <des_2l/h and make string space A bytes
003B5B  1               ; long
003B5B  1  20 75 3B             JSR     LAB_228A        ; copy string from descriptor (<sdescr) to (<Sutill)
003B5E  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003B60  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003B62  1  20 0A 3C             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003B65  1               ; returns with A = length, <ut1_pl = pointer low byte,
003B65  1               ; <ut1_ph = pointer high byte
003B65  1  20 C3 3B             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003B68  1  A5 B8                LDA     <ssptr_l        ;.set descriptor pointer low byte
003B6A  1  A4 B9                LDY     <ssptr_h        ;.set descriptor pointer high byte
003B6C  1  20 0A 3C             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003B6F  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003B6F  1               ; Y=<ut1_ph=pointer high byte
003B6F  1  20 82 39             JSR     LAB_RTST        ; check for space on descriptor stack then put string
003B72  1               ; address and length on descriptor stack and update stack
003B72  1               ; pointers
003B72  1  4C 0A 32             JMP     LAB_1ADB        ;.continue evaluation
003B75  1               
003B75  1               ; copy string from descriptor (<sdescr) to (<Sutill)
003B75  1               
003B75  1               LAB_228A:
003B75  1  A0 00                LDY     #$00            ; clear index
003B77  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get string length
003B7B  1  B5 B8 C9 00  
003B7F  1  D0 04 A2 00  
003B8D  1  48                   PHA                     ; save on stack
003B8E  1  C8                   INY                     ; increment index
003B8F  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer low byte
003B93  1  B5 B8 C9 00  
003B97  1  D0 04 A2 00  
003BA5  1  AA                   TAX                     ; copy to X
003BA6  1  C8                   INY                     ; increment index
003BA7  1  8B DA A2 01          LDAINDIRECTY sdescr     ; get source string pointer high byte
003BAB  1  B5 B8 C9 00  
003BAF  1  D0 04 A2 00  
003BBD  1  A8                   TAY                     ; copy to Y
003BBE  1  68                   PLA                     ; get length back
003BBF  1               
003BBF  1               ; store string A bytes long from YX to (<Sutill)
003BBF  1               
003BBF  1               LAB_2298:
003BBF  1  86 71                STX     <ut1_pl         ; save source string pointer low byte
003BC1  1  84 72                STY     <ut1_ph         ; save source string pointer high byte
003BC3  1               
003BC3  1               ; store string A bytes long from (<ut1_pl) to (<Sutill)
003BC3  1               
003BC3  1               LAB_229C:
003BC3  1  AA                   TAX                     ; copy length to index (don't count with Y)
003BC4  1  F0 3C                BEQ     LAB_22B2        ; branch if = $0 (null string) no need to add zero length
003BC6  1               
003BC6  1  A0 00                LDY     #$00            ; zero pointer (copy forward)
003BC8  1               LAB_22A0:
003BC8  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get source byte
003BCC  1  B5 71 C9 00  
003BD0  1  D0 04 A2 00  
003BDE  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save destination byte
003BE2  1  01 B5 83 C9  
003BE6  1  00 D0 04 A2  
003BF4  1               
003BF4  1  C8                   INY                     ; increment index
003BF5  1  CA                   DEX                     ; decrement counter
003BF6  1  D0 D0                BNE     LAB_22A0        ; loop while <> 0
003BF8  1               
003BF8  1  98                   TYA                     ; restore length from Y
003BF9  1               LAB_22A9:
003BF9  1  18                   CLC                     ; clear carry for add
003BFA  1  65 83                ADC     <Sutill         ; add string utility ptr low byte
003BFC  1  85 83                STA     <Sutill         ; save string utility ptr low byte
003BFE  1  90 02                BCC     LAB_22B2        ; branch if no carry
003C00  1               
003C00  1  E6 84                INC     <Sutilh         ; else increment string utility ptr high byte
003C02  1               LAB_22B2:
003C02  1  60                   RTS
003C03  1               
003C03  1               ; evaluate string
003C03  1               
003C03  1               LAB_EVST:
003C03  1  20 E4 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003C06  1               
003C06  1               ; pop string off descriptor stack, or from top of string space
003C06  1               ; returns with A = length, X=pointer low byte, Y=pointer high byte
003C06  1               
003C06  1               LAB_22B6:
003C06  1  A5 AE                LDA     <des_pl         ; get descriptor pointer low byte
003C08  1  A4 AF                LDY     <des_ph         ; get descriptor pointer high byte
003C0A  1               
003C0A  1               ; pop (YA) descriptor off stack or from top of string space
003C0A  1               ; returns with A = length, X=<ut1_pl=pointer low byte, Y=<ut1_ph=pointer high byte
003C0A  1               
003C0A  1               LAB_22BA:
003C0A  1  85 71                STA     <ut1_pl         ; save descriptor pointer low byte
003C0C  1  84 72                STY     <ut1_ph         ; save descriptor pointer high byte
003C0E  1  20 77 3C             JSR     LAB_22EB        ; clean descriptor stack, YA = pointer
003C11  1  08                   PHP                     ; save status flags
003C12  1  A0 00                LDY     #$00            ; clear index
003C14  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get length from string descriptor
003C18  1  B5 71 C9 00  
003C1C  1  D0 04 A2 00  
003C2A  1  48                   PHA                     ; put on stack
003C2B  1  C8                   INY                     ; increment index
003C2C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer low byte from descriptor
003C30  1  B5 71 C9 00  
003C34  1  D0 04 A2 00  
003C42  1  AA                   TAX                     ; copy to X
003C43  1  C8                   INY                     ; increment index
003C44  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get string pointer high byte from descriptor
003C48  1  B5 71 C9 00  
003C4C  1  D0 04 A2 00  
003C5A  1  A8                   TAY                     ; copy to Y
003C5B  1  68                   PLA                     ; get string length back
003C5C  1  28                   PLP                     ; restore status
003C5D  1  D0 13                BNE     LAB_22E6        ; branch if pointer <> <last_sl,<last_sh
003C5F  1               
003C5F  1  C4 82                CPY     <Sstorh         ; compare bottom of string space high byte
003C61  1  D0 0F                BNE     LAB_22E6        ; branch if <>
003C63  1               
003C63  1  E4 81                CPX     <Sstorl         ; else compare bottom of string space low byte
003C65  1  D0 0B                BNE     LAB_22E6        ; branch if <>
003C67  1               
003C67  1  48                   PHA                     ; save string length
003C68  1  18                   CLC                     ; clear carry for add
003C69  1  65 81                ADC     <Sstorl         ; add bottom of string space low byte
003C6B  1  85 81                STA     <Sstorl         ; save bottom of string space low byte
003C6D  1  90 02                BCC     LAB_22E5        ; skip increment if no overflow
003C6F  1               
003C6F  1  E6 82                INC     <Sstorh         ; increment bottom of string space high byte
003C71  1               LAB_22E5:
003C71  1  68                   PLA                     ; restore string length
003C72  1               LAB_22E6:
003C72  1  86 71                STX     <ut1_pl         ; save string pointer low byte
003C74  1  84 72                STY     <ut1_ph         ; save string pointer high byte
003C76  1  60                   RTS
003C77  1               
003C77  1               ; clean descriptor stack, YA = pointer
003C77  1               ; checks if AY is on the descriptor stack, if so does a stack discard
003C77  1               
003C77  1               LAB_22EB:
003C77  1  C4 67                CPY     <last_sh        ; compare pointer high byte
003C79  1  D0 0C                BNE     LAB_22FB        ; exit if <>
003C7B  1               
003C7B  1  C5 66                CMP     <last_sl        ; compare pointer low byte
003C7D  1  D0 08                BNE     LAB_22FB        ; exit if <>
003C7F  1               
003C7F  1  85 65                STA     <next_s         ; save descriptor stack pointer
003C81  1  E9 03                SBC     #$03            ; -3
003C83  1  85 66                STA     <last_sl        ; save low byte -3
003C85  1  A0 00                LDY     #$00            ; clear high byte
003C87  1               LAB_22FB:
003C87  1  60                   RTS
003C88  1               
003C88  1               ; perform CHR$()
003C88  1               
003C88  1               LAB_CHRS:
003C88  1  20 92 3E             JSR     LAB_EVBY        ; evaluate byte expression, result in X
003C8B  1  8A                   TXA                     ; copy to A
003C8C  1  48                   PHA                     ; save character
003C8D  1  A9 01                LDA     #$01            ; string is single byte
003C8F  1  20 1F 39             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003C92  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003C92  1  68                   PLA                     ; get character back
003C93  1  A0 00                LDY     #$00            ; clear index
003C95  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save byte in string (byte IS string!)
003C99  1  01 B5 AD C9  
003C9D  1  00 D0 04 A2  
003CAB  1  4C 82 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003CAE  1               ; address and length on descriptor stack and update stack
003CAE  1               ; pointers
003CAE  1               
003CAE  1               ; perform LEFT$()
003CAE  1               
003CAE  1               LAB_LEFT:
003CAE  1  48                   PHA                     ; push byte parameter
003CAF  1  20 66 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003CB2  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003CB2  1  8B 48 DA A2          CMPINDIRECTY des_2l     ; compare byte parameter with string length
003CB6  1  01 B5 9E C9  
003CBA  1  00 D0 04 A2  
003CCA  1  98                   TYA                     ; clear A
003CCB  1  F0 1F                BEQ     LAB_2316        ; go do string copy (branch always)
003CCD  1               
003CCD  1               ; perform RIGHT$()
003CCD  1               
003CCD  1               LAB_RIGHT:
003CCD  1  48                   PHA                     ; push byte parameter
003CCE  1  20 66 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003CD1  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003CD1  1  8B 48 DA A2          FETCHINDIRECTY des_2l   ; subtract string length
003CD5  1  01 B5 9E C9  
003CD9  1  00 D0 04 A2  
003CE7  1  18                   CLC                     ; clear carry for add-1
003CE8  1  E5 04                SBC     <TMPFLG         ; REDO SBC WITH CARRY CLEARED (ARTIFACT FROM 816 CONVERSION)
003CEA  1  49 FF                EOR     #$FF            ; invert it (A=LEN(expression$)-l)
003CEC  1               
003CEC  1               LAB_2316:
003CEC  1  90 18                BCC     LAB_231C        ; branch if string length > byte parameter
003CEE  1               
003CEE  1  8B DA A2 01          LDAINDIRECTY des_2l     ; else make parameter = length
003CF2  1  B5 9E C9 00  
003CF6  1  D0 04 A2 00  
003D04  1  AA                   TAX                     ; copy to byte parameter copy
003D05  1  98                   TYA                     ; clear string start offset
003D06  1               LAB_231C:
003D06  1  48                   PHA                     ; save string start offset
003D07  1               LAB_231D:
003D07  1  8A                   TXA                     ; copy byte parameter (or string length if <)
003D08  1               LAB_231E:
003D08  1  48                   PHA                     ; save string length
003D09  1  20 1F 39             JSR     LAB_MSSP        ; make string space A bytes long A=$AC=length,
003D0C  1               ; X=$AD=<Sutill=ptr low byte, Y=$AE=<Sutilh=ptr high byte
003D0C  1  A5 9E                LDA     <des_2l         ; get descriptor pointer low byte
003D0E  1  A4 9F                LDY     <des_2h         ; get descriptor pointer high byte
003D10  1  20 0A 3C             JSR     LAB_22BA        ; pop (YA) descriptor off stack or from top of string space
003D13  1               ; returns with A = length, X=<ut1_pl=pointer low byte,
003D13  1               ; Y=<ut1_ph=pointer high byte
003D13  1  68                   PLA                     ; get string length back
003D14  1  A8                   TAY                     ; copy length to Y
003D15  1  68                   PLA                     ; get string start offset back
003D16  1  18                   CLC                     ; clear carry for add
003D17  1  65 71                ADC     <ut1_pl         ; add start offset to string start pointer low byte
003D19  1  85 71                STA     <ut1_pl         ; save string start pointer low byte
003D1B  1  90 02                BCC     LAB_2335        ; branch if no overflow
003D1D  1               
003D1D  1  E6 72                INC     <ut1_ph         ; else increment string start pointer high byte
003D1F  1               LAB_2335:
003D1F  1  98                   TYA                     ; copy length to A
003D20  1  20 C3 3B             JSR     LAB_229C        ; store string A bytes long from (<ut1_pl) to (<Sutill)
003D23  1  4C 82 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003D26  1               ; address and length on descriptor stack and update stack
003D26  1               ; pointers
003D26  1               
003D26  1               ; perform MID$()
003D26  1               
003D26  1               LAB_MIDS:
003D26  1  48                   PHA                     ; push byte parameter
003D27  1  A9 FF                LDA     #$FF            ; set default length = 255
003D29  1  85 AF                STA     <mids_l         ; save default length
003D2B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003D2F  1  C9 29                CMP     #')'            ; compare with ")"
003D31  1  F0 06                BEQ     LAB_2358        ; branch if = ")" (skip second byte get)
003D33  1               
003D33  1  20 15 33             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003D36  1  20 8F 3E             JSR     LAB_GTBY        ; get byte parameter (use copy in <mids_l)
003D39  1               LAB_2358:
003D39  1  20 66 3D             JSR     LAB_236F        ; pull string data and byte parameter from stack
003D3C  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003D3C  1  CA                   DEX                     ; decrement start index
003D3D  1  8A                   TXA                     ; copy to A
003D3E  1  48                   PHA                     ; save string start offset
003D3F  1  8B 48 DA A2          FETCHINDIRECTY des_2l
003D43  1  01 B5 9E C9  
003D47  1  00 D0 04 A2  
003D55  1  18                   CLC                     ; clear carry for sub-1
003D56  1  A2 00                LDX     #$00            ; clear output string length
003D58  1  E5 04                SBC     <TMPFLG         ; subtract string length
003D5A  1  B0 AB                BCS     LAB_231D        ; if start>string length go do null string
003D5C  1               
003D5C  1  49 FF                EOR     #$FF            ; complement -length
003D5E  1  C5 AF                CMP     <mids_l         ; compare byte parameter
003D60  1  90 A6                BCC     LAB_231E        ; if length>remaining string go do RIGHT$
003D62  1               
003D62  1  A5 AF                LDA     <mids_l         ; get length byte
003D64  1  B0 A2                BCS     LAB_231E        ; go do string copy (branch always)
003D66  1               
003D66  1               ; pull string data and byte parameter from stack
003D66  1               ; return pointer in <des_2l/h, byte in A (and X), Y=0
003D66  1               
003D66  1               LAB_236F:
003D66  1  20 04 33             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
003D69  1  68                   PLA                     ; pull return address low byte (return address)
003D6A  1  85 A2                STA     <Fnxjpl         ; save functions jump vector low byte
003D6C  1  68                   PLA                     ; pull return address high byte (return address)
003D6D  1  85 A3                STA     <Fnxjph         ; save functions jump vector high byte
003D6F  1  68                   PLA                     ; pull byte parameter
003D70  1  AA                   TAX                     ; copy byte parameter to X
003D71  1  68                   PLA                     ; pull string pointer low byte
003D72  1  85 9E                STA     <des_2l         ; save it
003D74  1  68                   PLA                     ; pull string pointer high byte
003D75  1  85 9F                STA     <des_2h         ; save it
003D77  1  A0 00                LDY     #$00            ; clear index
003D79  1  8A                   TXA                     ; copy byte parameter
003D7A  1  D0 03 4C 88          LBEQ    LAB_23A8        ; if null do function call error then warm start
003D7E  1  3E           
003D7F  1               
003D7F  1  E6 A2                INC     <Fnxjpl         ; increment function jump vector low byte
003D81  1               ; (JSR pushes return addr-1. this is all very nice
003D81  1               ; but will go tits up if either call is on a page
003D81  1               ; boundary!)
003D81  1  6C A2 00             JMP     (Fnxjpl)        ; in effect, RTS
003D84  1               
003D84  1               ; perform LCASE$()
003D84  1               
003D84  1               LAB_LCASE:
003D84  1  20 03 3C             JSR     LAB_EVST        ; evaluate string
003D87  1  85 AC                STA     <str_ln         ; set string length
003D89  1  A8                   TAY                     ; copy length to Y
003D8A  1  D0 03 4C 17          LBEQ    NoString        ; branch if null string
003D8E  1  3E           
003D8F  1               
003D8F  1  20 1F 39             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003D92  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003D92  1  86 AD                STX     <str_pl         ; save string pointer low byte
003D94  1  84 AE                STY     <str_ph         ; save string pointer high byte
003D96  1  A8                   TAY                     ; get string length back
003D97  1               
003D97  1               LC_loop:
003D97  1  88                   DEY                     ; decrement index
003D98  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003D9C  1  B5 71 C9 00  
003DA0  1  D0 04 A2 00  
003DAE  1  20 6C 35             JSR     LAB_1D82        ; is character "A" to "Z"
003DB1  1  90 02                BCC     NoUcase         ; branch if not upper case alpha
003DB3  1               
003DB3  1  09 20                ORA     #$20            ; convert upper to lower case
003DB5  1               NoUcase:
003DB5  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003DB9  1  01 B5 83 C9  
003DBD  1  00 D0 04 A2  
003DCB  1  98                   TYA                     ; test index
003DCC  1  D0 C9                BNE     LC_loop         ; loop if not all done
003DCE  1               
003DCE  1  F0 47                BEQ     NoString        ; tidy up and exit, branch always
003DD0  1               
003DD0  1               ; perform UCASE$()
003DD0  1               
003DD0  1               LAB_UCASE:
003DD0  1  20 03 3C             JSR     LAB_EVST        ; evaluate string
003DD3  1  85 AC                STA     <str_ln         ; set string length
003DD5  1  A8                   TAY                     ; copy length to Y
003DD6  1  F0 3F                BEQ     NoString        ; branch if null string
003DD8  1               
003DD8  1  20 1F 39             JSR     LAB_MSSP        ; make string space A bytes long A=length,
003DDB  1               ; X=<Sutill=ptr low byte, Y=<Sutilh=ptr high byte
003DDB  1  86 AD                STX     <str_pl         ; save string pointer low byte
003DDD  1  84 AE                STY     <str_ph         ; save string pointer high byte
003DDF  1  A8                   TAY                     ; get string length back
003DE0  1               
003DE0  1               UC_loop:
003DE0  1  88                   DEY                     ; decrement index
003DE1  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte from string
003DE5  1  B5 71 C9 00  
003DE9  1  D0 04 A2 00  
003DF7  1  20 68 35             JSR     LAB_CASC        ; is character "a" to "z" (or "A" to "Z")
003DFA  1  90 02                BCC     NoLcase         ; branch if not alpha
003DFC  1               
003DFC  1  29 DF                AND     #$DF            ; convert lower to upper case
003DFE  1               NoLcase:
003DFE  1  8B DA 48 A2          STAINDIRECTY Sutill     ; save byte back to string
003E02  1  01 B5 83 C9  
003E06  1  00 D0 04 A2  
003E14  1  98                   TYA                     ; test index
003E15  1  D0 C9                BNE     UC_loop         ; loop if not all done
003E17  1               
003E17  1               NoString:
003E17  1  4C 82 39             JMP     LAB_RTST        ; check for space on descriptor stack then put string
003E1A  1               ; address and length on descriptor stack and update stack
003E1A  1               ; pointers
003E1A  1               
003E1A  1               ; perform SADD()
003E1A  1               
003E1A  1               LAB_SADD:
003E1A  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003E1E  1  20 F0 34             JSR     LAB_GVAR        ; get var address
003E21  1               
003E21  1  20 04 33             JSR     LAB_1BFB        ; scan for ")", else do syntax error then warm start
003E24  1  20 E4 31             JSR     LAB_CTST        ; check if source is string, else do type mismatch
003E27  1               
003E27  1  A0 02                LDY     #$02            ; index to string pointer high byte
003E29  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer high byte
003E2D  1  B5 95 C9 00  
003E31  1  D0 04 A2 00  
003E3F  1  AA                   TAX                     ; copy string pointer high byte to X
003E40  1  88                   DEY                     ; index to string pointer low byte
003E41  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get string pointer low byte
003E45  1  B5 95 C9 00  
003E49  1  D0 04 A2 00  
003E57  1  A8                   TAY                     ; copy string pointer low byte to Y
003E58  1  8A                   TXA                     ; copy string pointer high byte to A
003E59  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
003E5C  1               
003E5C  1               ; perform LEN()
003E5C  1               
003E5C  1               LAB_LENS:
003E5C  1  20 62 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003E5F  1  4C BB 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003E62  1               
003E62  1               ; evaluate string, get length in Y
003E62  1               
003E62  1               LAB_ESGL:
003E62  1  20 03 3C             JSR     LAB_EVST        ; evaluate string
003E65  1  A8                   TAY                     ; copy length to Y
003E66  1  60                   RTS
003E67  1               
003E67  1               ; perform ASC()
003E67  1               
003E67  1               LAB_ASC:
003E67  1  20 62 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003E6A  1  F0 1C                BEQ     LAB_23A8        ; if null do function call error then warm start
003E6C  1               
003E6C  1  A0 00                LDY     #$00            ; set index to first character
003E6E  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get byte
003E72  1  B5 71 C9 00  
003E76  1  D0 04 A2 00  
003E84  1  A8                   TAY                     ; copy to Y
003E85  1  4C BB 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003E88  1               
003E88  1               ; do function call error then warm start
003E88  1               
003E88  1               LAB_23A8:
003E88  1  4C 78 36             JMP     LAB_FCER        ; do function call error then warm start
003E8B  1               
003E8B  1               ; scan and get byte parameter
003E8B  1               
003E8B  1               LAB_SGBY:
003E8B  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
003E8F  1               
003E8F  1               ; get byte parameter
003E8F  1               
003E8F  1               LAB_GTBY:
003E8F  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003E92  1               ; else do type mismatch
003E92  1               
003E92  1               ; evaluate byte expression, result in X
003E92  1               
003E92  1               LAB_EVBY:
003E92  1  20 ED 35             JSR     LAB_EVPI        ; evaluate integer expression (no check)
003E95  1               
003E95  1  A4 AE                LDY     <FAC1_2         ; get FAC1 mantissa2
003E97  1  D0 EF                BNE     LAB_23A8        ; if top byte <> 0 do function call error then warm start
003E99  1               
003E99  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
003E9B  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
003E9F  1  60                   RTS
003EA0  1               
003EA0  1               ; perform VAL()
003EA0  1               
003EA0  1               LAB_VAL:
003EA0  1  20 62 3E             JSR     LAB_ESGL        ; evaluate string, get length in A (and Y)
003EA3  1  D0 03                BNE     LAB_23C5        ; branch if not null string
003EA5  1               
003EA5  1               ; string was null so set result = $00
003EA5  1  4C F0 40             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
003EA8  1               
003EA8  1               LAB_23C5:
003EA8  1  A6 C3                LDX     <Bpntrl         ; get BASIC execute pointer low byte
003EAA  1  A4 C4                LDY     <Bpntrh         ; get BASIC execute pointer high byte
003EAC  1  86 BA                STX     <Btmpl          ; save BASIC execute pointer low byte
003EAE  1  84 BB                STY     <Btmph          ; save BASIC execute pointer high byte
003EB0  1  A6 71                LDX     <ut1_pl         ; get string pointer low byte
003EB2  1  86 C3                STX     <Bpntrl         ; save as BASIC execute pointer low byte
003EB4  1  18                   CLC                     ; clear carry
003EB5  1  65 71                ADC     <ut1_pl         ; add string length
003EB7  1  85 73                STA     <ut2_pl         ; save string end low byte
003EB9  1  A5 72                LDA     <ut1_ph         ; get string pointer high byte
003EBB  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
003EBD  1  69 00                ADC     #$00            ; add carry to high byte
003EBF  1  85 74                STA     <ut2_ph         ; save string end high byte
003EC1  1  A0 00                LDY     #$00            ; set index to $00
003EC3  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get string end +1 byte
003EC7  1  B5 73 C9 00  
003ECB  1  D0 04 A2 00  
003ED9  1  48                   PHA                     ; push it
003EDA  1  98                   TYA                     ; clear A
003EDB  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; terminate string with $00
003EDF  1  01 B5 73 C9  
003EE3  1  00 D0 04 A2  
003EF1  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
003EF5  1  20 9A 45             JSR     LAB_2887        ; get FAC1 from string
003EF8  1  68                   PLA                     ; restore string end +1 byte
003EF9  1  A0 00                LDY     #$00            ; set index to zero
003EFB  1  8B DA 48 A2          STAINDIRECTY ut2_pl     ; put string end byte back
003EFF  1  01 B5 73 C9  
003F03  1  00 D0 04 A2  
003F11  1               
003F11  1               ; restore BASIC execute pointer from temp (<Btmpl/<Btmph)
003F11  1               
003F11  1               LAB_23F3:
003F11  1  A6 BA                LDX     <Btmpl          ; get BASIC execute pointer low byte back
003F13  1  A4 BB                LDY     <Btmph          ; get BASIC execute pointer high byte back
003F15  1  86 C3                STX     <Bpntrl         ; save BASIC execute pointer low byte
003F17  1  84 C4                STY     <Bpntrh         ; save BASIC execute pointer high byte
003F19  1  60                   RTS
003F1A  1               
003F1A  1               ; get two parameters for POKE or WAIT
003F1A  1               
003F1A  1               LAB_GADB:
003F1A  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003F1D  1               ; else do type mismatch
003F1D  1  20 33 3F             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003F20  1               
003F20  1               ; scan for "," and get byte, else do Syntax error then warm start
003F20  1               
003F20  1               LAB_SCGB:
003F20  1  20 15 33             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003F23  1  A5 12                LDA     <Itemph         ; save temporary integer high byte
003F25  1  48                   PHA                     ; on stack
003F26  1  A5 11                LDA     <Itempl         ; save temporary integer low byte
003F28  1  48                   PHA                     ; on stack
003F29  1  20 8F 3E             JSR     LAB_GTBY        ; get byte parameter
003F2C  1  68                   PLA                     ; pull low byte
003F2D  1  85 11                STA     <Itempl         ; restore temporary integer low byte
003F2F  1  68                   PLA                     ; pull high byte
003F30  1  85 12                STA     <Itemph         ; restore temporary integer high byte
003F32  1  60                   RTS
003F33  1               
003F33  1               ; convert float to fixed routine. accepts any value that fits in 24 bits, +ve or
003F33  1               ; -ve and converts it into a right truncated integer in <Itempl and <Itemph
003F33  1               
003F33  1               ; save unsigned 16 bit integer part of FAC1 in temporary integer
003F33  1               
003F33  1               LAB_F2FX:
003F33  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
003F35  1  C9 98                CMP     #$98            ; compare with exponent = 2^24
003F37  1  B0 03                BCS     LAB_23A8_1      ; do function call error then warm start
003F39  1  4C 3F 3F             JMP     LAB_F2FU
003F3C  1               LAB_23A8_1:
003F3C  1  4C 88 3E             JMP     LAB_23A8
003F3F  1               LAB_F2FU:
003F3F  1  20 44 45             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
003F42  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
003F44  1  A4 AF                LDY     <FAC1_3         ; get FAC1 mantissa3
003F46  1  84 11                STY     <Itempl         ; save temporary integer low byte
003F48  1  85 12                STA     <Itemph         ; save temporary integer high byte
003F4A  1  60                   RTS
003F4B  1               
003F4B  1               ; perform PEEK()
003F4B  1               
003F4B  1               LAB_PEEK:
003F4B  1  20 33 3F             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003F4E  1  A2 00                LDX     #$00            ; clear index
003F50  1  8B                   PHB
003F51  1  DA A2 00 DA          SETBANK 0
003F55  1  AB FA        
003F57  1  A1 11                LDA     (<Itempl,X)     ; get byte via temporary integer (addr)
003F59  1  AB                   PLB
003F5A  1  A8                   TAY                     ; copy byte to Y
003F5B  1  4C BB 37             JMP     LAB_1FD0        ; convert Y to byte in FAC1 and return
003F5E  1               
003F5E  1               ; perform POKE
003F5E  1               
003F5E  1               LAB_POKE:
003F5E  1  20 1A 3F             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
003F61  1  8A                   TXA                     ; copy byte argument to A
003F62  1  A2 00                LDX     #$00            ; clear index
003F64  1  8B                   PHB
003F65  1  DA A2 00 DA          SETBANK 0
003F69  1  AB FA        
003F6B  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
003F6D  1  AB                   PLB
003F6E  1  60                   RTS
003F6F  1               
003F6F  1               ; perform SYS
003F6F  1               
003F6F  1               LAB_SYS:
003F6F  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003F72  1               ; else do type mismatch
003F72  1  20 33 3F             JSR     LAB_F2FX        ; save integer part of FAC1 in temporary integer
003F75  1               
003F75  1  A5 11                LDA     <Itempl
003F77  1  85 0B                STA     <Usrjpl
003F79  1  A5 12                LDA     <Itemph
003F7B  1  85 0C                STA     <Usrjph
003F7D  1  22 0A 00 00          JSL     Usrjmp
003F81  1  60                   RTS
003F82  1               
003F82  1               ; perform SWAP
003F82  1               
003F82  1               LAB_SWAP:
003F82  1  20 F0 34             JSR     LAB_GVAR        ; get var1 address
003F85  1  85 97                STA     <Lvarpl         ; save var1 address low byte
003F87  1  84 98                STY     <Lvarph         ; save var1 address high byte
003F89  1  A5 5F                LDA     <Dtypef         ; get data type flag, $FF=string, $00=numeric
003F8B  1  48                   PHA                     ; save data type flag
003F8C  1               
003F8C  1  20 15 33             JSR     LAB_1C01        ; scan for "," , else do syntax error then warm start
003F8F  1  20 F0 34             JSR     LAB_GVAR        ; get var2 address (pointer in <Cvaral/h)
003F92  1  68                   PLA                     ; pull var1 data type flag
003F93  1  45 5F                EOR     <Dtypef         ; compare with var2 data type
003F95  1  10 60                BPL     SwapErr         ; exit if not both the same type
003F97  1               
003F97  1  A0 03                LDY     #$03            ; four bytes to swap (either value or descriptor+1)
003F99  1               SwapLp:
003F99  1  8B DA A2 01          LDAINDIRECTY Lvarpl     ; get byte from var1
003F9D  1  B5 97 C9 00  
003FA1  1  D0 04 A2 00  
003FAF  1  AA                   TAX                     ; save var1 byte
003FB0  1  8B DA A2 01          LDAINDIRECTY Cvaral     ; get byte from var2
003FB4  1  B5 95 C9 00  
003FB8  1  D0 04 A2 00  
003FC6  1  8B DA 48 A2          STAINDIRECTY Lvarpl     ; save byte to var1
003FCA  1  01 B5 97 C9  
003FCE  1  00 D0 04 A2  
003FDC  1  8A                   TXA                     ; restore var1 byte
003FDD  1  8B DA 48 A2          STAINDIRECTY Cvaral     ; save byte to var2
003FE1  1  01 B5 95 C9  
003FE5  1  00 D0 04 A2  
003FF3  1  88                   DEY                     ; decrement index
003FF4  1  10 A3                BPL     SwapLp          ; loop until done
003FF6  1               
003FF6  1  60                   RTS
003FF7  1               
003FF7  1               SwapErr:
003FF7  1  4C EE 31             JMP     LAB_1ABC        ; do "Type mismatch" error then warm start
003FFA  1               
003FFA  1               ; perform CALL
003FFA  1               
003FFA  1               LAB_CALL:
003FFA  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
003FFD  1               ; else do type mismatch
003FFD  1  20 33 3F             JSR     LAB_F2FX        ; convert floating-to-fixed
004000  1  A9 40                LDA     #>CallExit      ; set return address high byte
004002  1  48                   PHA                     ; put on stack
004003  1  A9 08                LDA     #<CallExit-1    ; set return address low byte
004005  1  48                   PHA                     ; put on stack
004006  1  6C 11 00             JMP     (Itempl)        ; do indirect jump to user routine
004009  1               
004009  1               ; if the called routine exits correctly then it will return to here. this will then get
004009  1               ; the next byte for the interpreter and return
004009  1               
004009  1               CallExit:
004009  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory and return
00400D  1  60                   RTS
00400E  1               ; perform WAIT
00400E  1               
00400E  1               LAB_WAIT:
00400E  1  20 1A 3F             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
004011  1  86 97                STX     <Frnxtl         ; save byte
004013  1  A2 00                LDX     #$00            ; clear mask
004015  1  22 C2 00 00          JSL     LAB_GBYT        ; scan memory
004019  1  F0 03                BEQ     LAB_2441        ; skip if no third argument
00401B  1               
00401B  1  20 20 3F             JSR     LAB_SCGB        ; scan for "," and get byte, else SN error then warm start
00401E  1               LAB_2441:
00401E  1  86 98                STX     <Frnxth         ; save EOR argument
004020  1               LAB_2445:
004020  1  8B DA A2 01          LDAINDIRECTY Itempl     ; get byte via temporary integer (addr)
004024  1  B5 11 C9 00  
004028  1  D0 04 A2 00  
004036  1  45 98                EOR     <Frnxth         ; EOR with second argument (mask)
004038  1  25 97                AND     <Frnxtl         ; AND with first argument (byte)
00403A  1  F0 E4                BEQ     LAB_2445        ; loop if result is zero
00403C  1               
00403C  1               LAB_244D:
00403C  1  60                   RTS
00403D  1               
00403D  1               ; perform subtraction, FAC1 from (AY)
00403D  1               
00403D  1               LAB_2455:
00403D  1  20 2B 42             JSR     LAB_264D        ; unpack memory (AY) into FAC2
004040  1               
004040  1               ; perform subtraction, FAC1 from FAC2
004040  1               
004040  1               LAB_SUBTRACT:
004040  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004042  1  49 FF                EOR     #$FF            ; complement it
004044  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004046  1  45 B7                EOR     <FAC2_s         ; EOR with FAC2 sign (b7)
004048  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00404A  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00404C  1  4C 5B 40             JMP     LAB_ADD         ; go add FAC2 to FAC1
00404F  1               
00404F  1               ; perform addition
00404F  1               
00404F  1               LAB_2467:
00404F  1  20 7A 41             JSR     LAB_257B        ; shift FACX A times right (>8 shifts)
004052  1  90 4D                BCC     LAB_24A8        ;.go subtract mantissas
004054  1               
004054  1               ; add 0.5 to FAC1
004054  1               
004054  1               LAB_244E:
004054  1  A9 66                LDA     #<LAB_2A96      ; set 0.5 pointer low byte
004056  1  A0 18                LDY     #>LAB_2A96      ; set 0.5 pointer high byte
004058  1               
004058  1               ; add (AY) to FAC1
004058  1               
004058  1               LAB_246C:
004058  1  20 2B 42             JSR     LAB_264D        ; unpack memory (AY) into FAC2
00405B  1               
00405B  1               ; add FAC2 to FAC1
00405B  1               
00405B  1               LAB_ADD:
00405B  1  D0 10                BNE     LAB_2474        ; branch if FAC1 was not zero
00405D  1               
00405D  1               ; copy FAC2 to FAC1
00405D  1               
00405D  1               LAB_279B:
00405D  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
00405F  1               
00405F  1               ; save FAC1 sign and copy ABS(FAC2) to FAC1
00405F  1               
00405F  1               LAB_279D:
00405F  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004061  1  A2 04                LDX     #$04            ; 4 bytes to copy
004063  1               LAB_27A1:
004063  1  B5 B2                LDA     <FAC1_o,X       ; get byte from FAC2,X
004065  1  95 AB                STA     <FAC1_e-1,X     ; save byte at FAC1,X
004067  1  CA                   DEX                     ; decrement count
004068  1  D0 F9                BNE     LAB_27A1        ; loop if not all done
00406A  1               
00406A  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
00406C  1  60                   RTS
00406D  1               
00406D  1               ; FAC1 is non zero
00406D  1               LAB_2474:
00406D  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
00406F  1  86 A3                STX     <FAC2_r         ; save as FAC2 rounding byte
004071  1  A2 B3                LDX     #<FAC2_e        ; set index to FAC2 exponent addr
004073  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
004075  1               LAB_247C:
004075  1  A8                   TAY                     ; copy exponent
004076  1  F0 C4                BEQ     LAB_244D        ; exit if zero
004078  1  38                   SEC                     ; set carry for subtract
004079  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
00407B  1  F0 24                BEQ     LAB_24A8        ; branch if = (go add mantissa)
00407D  1  90 12                BCC     LAB_2498        ; branch if <
00407F  1               ; FAC2>FAC1
00407F  1  84 AC                STY     <FAC1_e         ; save FAC1 exponent
004081  1  A4 B7                LDY     <FAC2_s         ; get FAC2 sign (b7)
004083  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
004085  1  49 FF                EOR     #$FF            ; complement A
004087  1  69 00                ADC     #$00            ; +1 (twos complement, carry is set)
004089  1  A0 00                LDY     #$00            ; clear Y
00408B  1  84 A3                STY     <FAC2_r         ; clear FAC2 rounding byte
00408D  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1 exponent addr
00408F  1  D0 04                BNE     LAB_249C        ; branch always
004091  1               LAB_2498:
004091  1  A0 00                LDY     #$00            ; clear Y
004093  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004095  1               LAB_249C:
004095  1  C9 F9                CMP     #$F9            ; compare exponent diff with $F9
004097  1  30 B6                BMI     LAB_2467        ; branch if range $79-$F8
004099  1  A8                   TAY                     ; copy exponent difference to Y
00409A  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
00409C  1  56 01                LSR     <PLUS_1,X       ; shift FAC? mantissa1
00409E  1  20 91 41             JSR     LAB_2592        ; shift FACX Y times right
0040A1  1               ; exponents are equal now do mantissa subtract
0040A1  1               LAB_24A8:
0040A1  1  24 B8                BIT     <FAC_sc         ; test sign compare (FAC1 EOR FAC2)
0040A3  1  10 52                BPL     LAB_24F8        ; if = add FAC2 mantissa to FAC1 mantissa and return
0040A5  1               
0040A5  1  A0 AC                LDY     #<FAC1_e        ; set index to FAC1 exponent addr
0040A7  1  E0 B3                CPX     #<FAC2_e        ; compare X to FAC2 exponent addr
0040A9  1  F0 02                BEQ     LAB_24B4        ; branch if =
0040AB  1               
0040AB  1  A0 B3                LDY     #<FAC2_e        ; else set index to FAC2 exponent addr
0040AD  1               
0040AD  1               ; subtract smaller from bigger (take sign of bigger)
0040AD  1               LAB_24B4:
0040AD  1  38                   SEC                     ; set carry for subtract
0040AE  1  49 FF                EOR     #$FF            ; ones complement A
0040B0  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
0040B2  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
0040B4  1  DA                   PHX
0040B5  1  BB                   TYX
0040B6  1  B5 03                LDA     <PLUS_3,X       ; get FACY mantissa3
0040B8  1  FA                   PLX
0040B9  1  F5 03                SBC     <PLUS_3,X       ; subtract FACX mantissa3
0040BB  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
0040BD  1  DA                   PHX
0040BE  1  BB                   TYX
0040BF  1  B5 02                LDA     <PLUS_2,x       ; get FACY mantissa2
0040C1  1  FA                   PLX
0040C2  1  F5 02                SBC     <PLUS_2,X       ; subtract FACX mantissa2
0040C4  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0040C6  1  DA                   PHX
0040C7  1  BB                   TYX
0040C8  1  B5 01                LDA     <PLUS_1,x       ; get FACY mantissa1
0040CA  1  FA                   PLX
0040CB  1  F5 01                SBC     <PLUS_1,X       ; subtract FACX mantissa1
0040CD  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0040CF  1               
0040CF  1               ; do ABS and normalise FAC1
0040CF  1               
0040CF  1               LAB_24D0:
0040CF  1  B0 03                BCS     LAB_24D5        ; branch if number is +ve
0040D1  1               
0040D1  1  20 36 41             JSR     LAB_2537        ; negate FAC1
0040D4  1               
0040D4  1               ; normalise FAC1
0040D4  1               
0040D4  1               LAB_24D5:
0040D4  1  A0 00                LDY     #$00            ; clear Y
0040D6  1  98                   TYA                     ; clear A
0040D7  1  18                   CLC                     ; clear carry for add
0040D8  1               LAB_24D9:
0040D8  1  A6 AD                LDX     <FAC1_1         ; get FAC1 mantissa1
0040DA  1  D0 3E                BNE     LAB_251B        ; if not zero normalise FAC1
0040DC  1               
0040DC  1  A6 AE                LDX     <FAC1_2         ; get FAC1 mantissa2
0040DE  1  86 AD                STX     <FAC1_1         ; save FAC1 mantissa1
0040E0  1  A6 AF                LDX     <FAC1_3         ; get FAC1 mantissa3
0040E2  1  86 AE                STX     <FAC1_2         ; save FAC1 mantissa2
0040E4  1  A6 B9                LDX     <FAC1_r         ; get FAC1 rounding byte
0040E6  1  86 AF                STX     <FAC1_3         ; save FAC1 mantissa3
0040E8  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
0040EA  1  69 08                ADC     #$08            ; add x to exponent offset
0040EC  1  C9 18                CMP     #$18            ; compare with $18 (max offset, all bits would be =0)
0040EE  1  D0 E8                BNE     LAB_24D9        ; loop if not max
0040F0  1               
0040F0  1               ; clear FAC1 exponent and sign
0040F0  1               
0040F0  1               LAB_24F1:
0040F0  1  A9 00                LDA     #$00            ; clear A
0040F2  1               LAB_24F3:
0040F2  1  85 AC                STA     <FAC1_e         ; set FAC1 exponent
0040F4  1               
0040F4  1               ; save FAC1 sign
0040F4  1               
0040F4  1               LAB_24F5:
0040F4  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0040F6  1  60                   RTS
0040F7  1               
0040F7  1               ; add FAC2 mantissa to FAC1 mantissa
0040F7  1               
0040F7  1               LAB_24F8:
0040F7  1  65 A3                ADC     <FAC2_r         ; add FAC2 rounding byte
0040F9  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
0040FB  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0040FD  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
0040FF  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004101  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004103  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
004105  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004107  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004109  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
00410B  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00410D  1  B0 1A                BCS     LAB_252A        ; if carry then normalise FAC1 for C=1
00410F  1               
00410F  1  60                   RTS                     ; else just exit
004110  1               
004110  1               LAB_2511:
004110  1  69 01                ADC     #$01            ; add 1 to exponent offset
004112  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
004114  1  26 AF                ROL     <FAC1_3         ; shift FAC1 mantissa3
004116  1  26 AE                ROL     <FAC1_2         ; shift FAC1 mantissa2
004118  1  26 AD                ROL     <FAC1_1         ; shift FAC1 mantissa1
00411A  1               
00411A  1               ; normalise FAC1
00411A  1               
00411A  1               LAB_251B:
00411A  1  10 F4                BPL     LAB_2511        ; loop if not normalised
00411C  1               
00411C  1  38                   SEC                     ; set carry for subtract
00411D  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent
00411F  1  B0 CF                BCS     LAB_24F1        ; branch if underflow (set result = $0)
004121  1               
004121  1  49 FF                EOR     #$FF            ; complement exponent
004123  1  69 01                ADC     #$01            ; +1 (twos complement)
004125  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004127  1               
004127  1               ; test and normalise FAC1 for C=0/1
004127  1               
004127  1               LAB_2528:
004127  1  90 0C                BCC     LAB_2536        ; exit if no overflow
004129  1               
004129  1               ; normalise FAC1 for C=1
004129  1               
004129  1               LAB_252A:
004129  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
00412B  1  F0 36                BEQ     LAB_2564        ; if zero do overflow error and warm start
00412D  1               
00412D  1  66 AD                ROR     <FAC1_1         ; shift FAC1 mantissa1
00412F  1  66 AE                ROR     <FAC1_2         ; shift FAC1 mantissa2
004131  1  66 AF                ROR     <FAC1_3         ; shift FAC1 mantissa3
004133  1  66 B9                ROR     <FAC1_r         ; shift FAC1 rounding byte
004135  1               LAB_2536:
004135  1  60                   RTS
004136  1               
004136  1               ; negate FAC1
004136  1               
004136  1               LAB_2537:
004136  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004138  1  49 FF                EOR     #$FF            ; complement it
00413A  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
00413C  1               
00413C  1               ; twos complement FAC1 mantissa
00413C  1               
00413C  1               LAB_253D:
00413C  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
00413E  1  49 FF                EOR     #$FF            ; complement it
004140  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004142  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004144  1  49 FF                EOR     #$FF            ; complement it
004146  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004148  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00414A  1  49 FF                EOR     #$FF            ; complement it
00414C  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
00414E  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004150  1  49 FF                EOR     #$FF            ; complement it
004152  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
004154  1  E6 B9                INC     <FAC1_r         ; increment FAC1 rounding byte
004156  1  D0 0A                BNE     LAB_2563        ; exit if no overflow
004158  1               
004158  1               ; increment FAC1 mantissa
004158  1               
004158  1               LAB_2559:
004158  1  E6 AF                INC     <FAC1_3         ; increment FAC1 mantissa3
00415A  1  D0 06                BNE     LAB_2563        ; finished if no rollover
00415C  1               
00415C  1  E6 AE                INC     <FAC1_2         ; increment FAC1 mantissa2
00415E  1  D0 02                BNE     LAB_2563        ; finished if no rollover
004160  1               
004160  1  E6 AD                INC     <FAC1_1         ; increment FAC1 mantissa1
004162  1               LAB_2563:
004162  1  60                   RTS
004163  1               
004163  1               ; do overflow error (overflow exit)
004163  1               
004163  1               LAB_2564:
004163  1  A2 0A                LDX     #$0A            ; error code $0A ("Overflow" error)
004165  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
004168  1               
004168  1               ; shift FCAtemp << A+8 times
004168  1               
004168  1               LAB_2569:
004168  1  A2 74                LDX     #<FACt_1-1      ; set offset to FACtemp
00416A  1               LAB_256B:
00416A  1  B4 03                LDY     <PLUS_3,X       ; get FACX mantissa3
00416C  1  84 B9                STY     <FAC1_r         ; save as FAC1 rounding byte
00416E  1  B4 02                LDY     <PLUS_2,X       ; get FACX mantissa2
004170  1  94 03                STY     <PLUS_3,X       ; save FACX mantissa3
004172  1  B4 01                LDY     <PLUS_1,X       ; get FACX mantissa1
004174  1  94 02                STY     <PLUS_2,X       ; save FACX mantissa2
004176  1  A4 B2                LDY     <FAC1_o         ; get FAC1 overflow byte
004178  1  94 01                STY     <PLUS_1,X       ; save FACX mantissa1
00417A  1               
00417A  1               ; shift FACX -A times right (> 8 shifts)
00417A  1               
00417A  1               LAB_257B:
00417A  1  69 08                ADC     #$08            ; add 8 to shift count
00417C  1  30 EC                BMI     LAB_256B        ; go do 8 shift if still -ve
00417E  1               
00417E  1  F0 EA                BEQ     LAB_256B        ; go do 8 shift if zero
004180  1               
004180  1  E9 08                SBC     #$08            ; else subtract 8 again
004182  1  A8                   TAY                     ; save count to Y
004183  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004185  1  B0 12                BCS     LAB_259A        ;.
004187  1               
004187  1               LAB_2588:
004187  1  16 01                ASL     <PLUS_1,X       ; shift FACX mantissa1
004189  1  90 02                BCC     LAB_258E        ; branch if +ve
00418B  1               
00418B  1  F6 01                INC     <PLUS_1,X       ; this sets b7 eventually
00418D  1               LAB_258E:
00418D  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (correct for ASL)
00418F  1  76 01                ROR     <PLUS_1,X       ; shift FACX mantissa1 (put carry in b7)
004191  1               
004191  1               ; shift FACX Y times right
004191  1               
004191  1               LAB_2592:
004191  1  76 02                ROR     <PLUS_2,X       ; shift FACX mantissa2
004193  1  76 03                ROR     <PLUS_3,X       ; shift FACX mantissa3
004195  1  6A                   ROR     A               ; shift FACX rounding byte
004196  1  C8                   INY                     ; increment exponent diff
004197  1  D0 EE                BNE     LAB_2588        ; branch if range adjust not complete
004199  1               
004199  1               LAB_259A:
004199  1  18                   CLC                     ; just clear it
00419A  1  60                   RTS
00419B  1               
00419B  1               ; perform LOG()
00419B  1               
00419B  1               LAB_LOG:
00419B  1  20 79 44             JSR     LAB_27CA        ; test sign and zero
00419E  1  F0 02                BEQ     LAB_25C4        ; if zero do function call error then warm start
0041A0  1               
0041A0  1  10 03                BPL     LAB_25C7        ; skip error if +ve
0041A2  1               
0041A2  1               LAB_25C4:
0041A2  1  4C 78 36             JMP     LAB_FCER        ; do function call error then warm start (-ve)
0041A5  1               
0041A5  1               LAB_25C7:
0041A5  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0041A7  1  E9 7F                SBC     #$7F            ; normalise it
0041A9  1  48                   PHA                     ; save it
0041AA  1  A9 80                LDA     #$80            ; set exponent to zero
0041AC  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0041AE  1  A9 E6                LDA     #<LAB_25AD      ; set 1/root2 pointer low byte
0041B0  1  A0 17                LDY     #>LAB_25AD      ; set 1/root2 pointer high byte
0041B2  1  20 58 40             JSR     LAB_246C        ; add (AY) to FAC1 (1/root2)
0041B5  1  A9 EA                LDA     #<LAB_25B1      ; set root2 pointer low byte
0041B7  1  A0 17                LDY     #>LAB_25B1      ; set root2 pointer high byte
0041B9  1  20 F1 42             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1 (root2/(x+(1/root2)))
0041BC  1  A9 5D                LDA     #<LAB_259C      ; set 1 pointer low byte
0041BE  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
0041C0  1  20 3D 40             JSR     LAB_2455        ; subtract (AY) from FAC1 ((root2/(x+(1/root2)))-1)
0041C3  1  A9 D9                LDA     #<LAB_25A0      ; set pointer low byte to counter
0041C5  1  A0 17                LDY     #>LAB_25A0      ; set pointer high byte to counter
0041C7  1  20 7A 48             JSR     LAB_2B6E        ; ^2 then series evaluation
0041CA  1  A9 EE                LDA     #<LAB_25B5      ; set -0.5 pointer low byte
0041CC  1  A0 17                LDY     #>LAB_25B5      ; set -0.5 pointer high byte
0041CE  1  20 58 40             JSR     LAB_246C        ; add (AY) to FAC1
0041D1  1  68                   PLA                     ; restore FAC1 exponent
0041D2  1  20 40 46             JSR     LAB_2912        ; evaluate new ASCII digit
0041D5  1  A9 F2                LDA     #<LAB_25B9      ; set LOG(2) pointer low byte
0041D7  1  A0 17                LDY     #>LAB_25B9      ; set LOG(2) pointer high byte
0041D9  1               
0041D9  1               ; do convert AY, FCA1*(AY)
0041D9  1               
0041D9  1               LAB_25FB:
0041D9  1  20 2B 42             JSR     LAB_264D        ; unpack memory (AY) into FAC2
0041DC  1               LAB_MULTIPLY:
0041DC  1  F0 4C                BEQ     LAB_264C        ; exit if zero
0041DE  1               
0041DE  1  20 A1 42             JSR     LAB_2673        ; test and adjust accumulators
0041E1  1  A9 00                LDA     #$00            ; clear A
0041E3  1  85 75                STA     <FACt_1         ; clear temp mantissa1
0041E5  1  85 76                STA     <FACt_2         ; clear temp mantissa2
0041E7  1  85 77                STA     <FACt_3         ; clear temp mantissa3
0041E9  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
0041EB  1  20 00 42             JSR     LAB_2622        ; go do shift/add FAC2
0041EE  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0041F0  1  20 00 42             JSR     LAB_2622        ; go do shift/add FAC2
0041F3  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
0041F5  1  20 00 42             JSR     LAB_2622        ; go do shift/add FAC2
0041F8  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
0041FA  1  20 05 42             JSR     LAB_2627        ; go do shift/add FAC2
0041FD  1  4C 5E 43             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
004200  1               
004200  1               LAB_2622:
004200  1  D0 03                BNE     LAB_2627        ; branch if byte <> zero
004202  1               
004202  1  4C 68 41             JMP     LAB_2569        ; shift FCAtemp << A+8 times
004205  1               
004205  1               ; else do shift and add
004205  1               LAB_2627:
004205  1  4A                   LSR     A               ; shift byte
004206  1  09 80                ORA     #$80            ; set top bit (mark for 8 times)
004208  1               LAB_262A:
004208  1  A8                   TAY                     ; copy result
004209  1  90 13                BCC     LAB_2640        ; skip next if bit was zero
00420B  1               
00420B  1  18                   CLC                     ; clear carry for add
00420C  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
00420E  1  65 B6                ADC     <FAC2_3         ; add FAC2 mantissa3
004210  1  85 77                STA     <FACt_3         ; save temp mantissa3
004212  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
004214  1  65 B5                ADC     <FAC2_2         ; add FAC2 mantissa2
004216  1  85 76                STA     <FACt_2         ; save temp mantissa2
004218  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
00421A  1  65 B4                ADC     <FAC2_1         ; add FAC2 mantissa1
00421C  1  85 75                STA     <FACt_1         ; save temp mantissa1
00421E  1               LAB_2640:
00421E  1  66 75                ROR     <FACt_1         ; shift temp mantissa1
004220  1  66 76                ROR     <FACt_2         ; shift temp mantissa2
004222  1  66 77                ROR     <FACt_3         ; shift temp mantissa3
004224  1  66 B9                ROR     <FAC1_r         ; shift temp rounding byte
004226  1  98                   TYA                     ; get byte back
004227  1  4A                   LSR     A               ; shift byte
004228  1  D0 DE                BNE     LAB_262A        ; loop if all bits not done
00422A  1               
00422A  1               LAB_264C:
00422A  1  60                   RTS
00422B  1               
00422B  1               ; unpack memory (AY) into FAC2
00422B  1               
00422B  1               LAB_264D:
00422B  1  85 71                STA     <ut1_pl         ; save pointer low byte
00422D  1  84 72                STY     <ut1_ph         ; save pointer high byte
00422F  1  A0 03                LDY     #$03            ; 4 bytes to get (0-3)
004231  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa3
004235  1  B5 71 C9 00  
004239  1  D0 04 A2 00  
004247  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004249  1  88                   DEY                     ; decrement index
00424A  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa2
00424E  1  B5 71 C9 00  
004252  1  D0 04 A2 00  
004260  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
004262  1  88                   DEY                     ; decrement index
004263  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get mantissa1+sign
004267  1  B5 71 C9 00  
00426B  1  D0 04 A2 00  
004279  1  85 B7                STA     <FAC2_s         ; save FAC2 sign (b7)
00427B  1  45 B0                EOR     <FAC1_s         ; EOR with FAC1 sign (b7)
00427D  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00427F  1  A5 B7                LDA     <FAC2_s         ; recover FAC2 sign (b7)
004281  1  09 80                ORA     #$80            ; set 1xxx xxx (set normal bit)
004283  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004285  1  88                   DEY                     ; decrement index
004286  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get exponent byte
00428A  1  B5 71 C9 00  
00428E  1  D0 04 A2 00  
00429C  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
00429E  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0042A0  1  60                   RTS
0042A1  1               
0042A1  1               ; test and adjust accumulators
0042A1  1               
0042A1  1               LAB_2673:
0042A1  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
0042A3  1               LAB_2675:
0042A3  1  F0 1D                BEQ     LAB_2696        ; branch if FAC2 = $00 (handle underflow)
0042A5  1               
0042A5  1  18                   CLC                     ; clear carry for add
0042A6  1  65 AC                ADC     <FAC1_e         ; add FAC1 exponent
0042A8  1  90 04                BCC     LAB_2680        ; branch if sum of exponents <$0100
0042AA  1               
0042AA  1  30 31                BMI     LAB_269B        ; do overflow error
0042AC  1               
0042AC  1  18                   CLC                     ; clear carry for the add
0042AD  1  2C                   .BYTE   $2C             ; makes next line BIT $1410
0042AE  1               LAB_2680:
0042AE  1  10 12                BPL     LAB_2696        ; if +ve go handle underflow
0042B0  1               
0042B0  1  69 80                ADC     #$80            ; adjust exponent
0042B2  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0042B4  1  D0 03                BNE     LAB_268B        ; branch if not zero
0042B6  1               
0042B6  1  4C F4 40             JMP     LAB_24F5        ; save FAC1 sign and return
0042B9  1               
0042B9  1               LAB_268B:
0042B9  1  A5 B8                LDA     <FAC_sc         ; get sign compare (FAC1 EOR FAC2)
0042BB  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0042BD  1               LAB_268F:
0042BD  1  60                   RTS
0042BE  1               
0042BE  1               ; handle overflow and underflow
0042BE  1               
0042BE  1               LAB_2690:
0042BE  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
0042C0  1  10 1B                BPL     LAB_269B        ; do overflow error
0042C2  1               
0042C2  1               ; handle underflow
0042C2  1               LAB_2696:
0042C2  1  68                   PLA                     ; pop return address low byte
0042C3  1  68                   PLA                     ; pop return address high byte
0042C4  1  4C F0 40             JMP     LAB_24F1        ; clear FAC1 exponent and sign and return
0042C7  1               
0042C7  1               ; multiply by 10
0042C7  1               
0042C7  1               LAB_269E:
0042C7  1  20 5A 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0042CA  1  AA                   TAX                     ; copy exponent (set the flags)
0042CB  1  F0 F0                BEQ     LAB_268F        ; exit if zero
0042CD  1  18                   CLC                     ; clear carry for add
0042CE  1  69 02                ADC     #$02            ; add two to exponent (*4)
0042D0  1  B0 0B                BCS     LAB_269B        ; do overflow error if > $FF
0042D2  1  A2 00                LDX     #$00            ; clear byte
0042D4  1  86 B8                STX     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
0042D6  1  20 75 40             JSR     LAB_247C        ; add FAC2 to FAC1 (*5)
0042D9  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*10)
0042DB  1  D0 E0                BNE     LAB_268F        ; if non zero just do RTS
0042DD  1               
0042DD  1               LAB_269B:
0042DD  1  4C 63 41             JMP     LAB_2564        ; do overflow error and warm start
0042E0  1               
0042E0  1               ; divide by 10
0042E0  1               
0042E0  1               LAB_26B9:
0042E0  1  20 5A 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
0042E3  1  A9 6E                LDA     #<LAB_26B5      ; set pointer to 10d low addr
0042E5  1  A0 18                LDY     #>LAB_26B5      ; set pointer to 10d high addr
0042E7  1  A2 00                LDX     #$00            ; clear sign
0042E9  1               
0042E9  1               ; divide by (AY) (X=sign)
0042E9  1               
0042E9  1               LAB_26C2:
0042E9  1  86 B8                STX     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
0042EB  1  20 6D 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
0042EE  1  4C F4 42             JMP     LAB_DIVIDE      ; do FAC2/FAC1
0042F1  1               
0042F1  1               ; Perform divide-by
0042F1  1               ; convert AY and do (AY)/FAC1
0042F1  1               
0042F1  1               LAB_26CA:
0042F1  1  20 2B 42             JSR     LAB_264D        ; unpack memory (AY) into FAC2
0042F4  1               
0042F4  1               ; Perform divide-into
0042F4  1               LAB_DIVIDE:
0042F4  1  F0 63                BEQ     LAB_2737        ; if zero go do /0 error
0042F6  1               
0042F6  1  20 69 44             JSR     LAB_27BA        ; round FAC1
0042F9  1  A9 00                LDA     #$00            ; clear A
0042FB  1  38                   SEC                     ; set carry for subtract
0042FC  1  E5 AC                SBC     <FAC1_e         ; subtract FAC1 exponent (2s complement)
0042FE  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004300  1  20 A1 42             JSR     LAB_2673        ; test and adjust accumulators
004303  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent
004305  1  F0 D6                BEQ     LAB_269B        ; if zero do overflow error
004307  1               
004307  1  A2 FF                LDX     #$FF            ; set index for pre increment
004309  1  A9 01                LDA     #$01            ; set bit to flag byte save
00430B  1               LAB_26E4:
00430B  1  A4 B4                LDY     <FAC2_1         ; get FAC2 mantissa1
00430D  1  C4 AD                CPY     <FAC1_1         ; compare FAC1 mantissa1
00430F  1  D0 0A                BNE     LAB_26F4        ; branch if <>
004311  1               
004311  1  A4 B5                LDY     <FAC2_2         ; get FAC2 mantissa2
004313  1  C4 AE                CPY     <FAC1_2         ; compare FAC1 mantissa2
004315  1  D0 04                BNE     LAB_26F4        ; branch if <>
004317  1               
004317  1  A4 B6                LDY     <FAC2_3         ; get FAC2 mantissa3
004319  1  C4 AF                CPY     <FAC1_3         ; compare FAC1 mantissa3
00431B  1               LAB_26F4:
00431B  1  08                   PHP                     ; save FAC2-FAC1 compare status
00431C  1  2A                   ROL     A               ; shift the result byte
00431D  1  90 0E                BCC     LAB_2702        ; if no carry skip the byte save
00431F  1               
00431F  1  A0 01                LDY     #$01            ; set bit to flag byte save
004321  1  E8                   INX                     ; else increment the index to FACt
004322  1  E0 02                CPX     #$02            ; compare with the index to <FACt_3
004324  1  30 04                BMI     LAB_2701        ; if not last byte just go save it
004326  1               
004326  1  D0 28                BNE     LAB_272B        ; if all done go save FAC1 rounding byte, normalise and
004328  1               ; return
004328  1               
004328  1  A0 40                LDY     #$40            ; set bit to flag byte save for the rounding byte
00432A  1               LAB_2701:
00432A  1  95 75                STA     <FACt_1,X       ; write result byte to <FACt_1 + index
00432C  1  98                   TYA                     ; copy the next save byte flag
00432D  1               LAB_2702:
00432D  1  28                   PLP                     ; restore FAC2-FAC1 compare status
00432E  1  90 14                BCC     LAB_2704        ; if FAC2 < FAC1 then skip the subtract
004330  1               
004330  1  A8                   TAY                     ; save FAC2-FAC1 compare status
004331  1  A5 B6                LDA     <FAC2_3         ; get FAC2 mantissa3
004333  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
004335  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004337  1  A5 B5                LDA     <FAC2_2         ; get FAC2 mantissa2
004339  1  E5 AE                SBC     <FAC1_2         ; subtract FAC1 mantissa2
00433B  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
00433D  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
00433F  1  E5 AD                SBC     <FAC1_1         ; subtract FAC1 mantissa1
004341  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004343  1  98                   TYA                     ; restore FAC2-FAC1 compare status
004344  1               
004344  1               ; FAC2 = FAC2*2
004344  1               LAB_2704:
004344  1  06 B6                ASL     <FAC2_3         ; shift FAC2 mantissa3
004346  1  26 B5                ROL     <FAC2_2         ; shift FAC2 mantissa2
004348  1  26 B4                ROL     <FAC2_1         ; shift FAC2 mantissa1
00434A  1  B0 CF                BCS     LAB_26F4        ; loop with no compare
00434C  1               
00434C  1  30 BD                BMI     LAB_26E4        ; loop with compare
00434E  1               
00434E  1  10 CB                BPL     LAB_26F4        ; loop always with no compare
004350  1               
004350  1               ; do A<<6, save as FAC1 rounding byte, normalise and return
004350  1               
004350  1               LAB_272B:
004350  1  4A                   LSR     A               ; shift b1 - b0 ..
004351  1  6A                   ROR     A               ; ..
004352  1  6A                   ROR     A               ; .. to b7 - b6
004353  1  85 B9                STA     <FAC1_r         ; save FAC1 rounding byte
004355  1  28                   PLP                     ; dump FAC2-FAC1 compare status
004356  1  4C 5E 43             JMP     LAB_273C        ; copy temp to FAC1, normalise and return
004359  1               
004359  1               ; do "Divide by zero" error
004359  1               
004359  1               LAB_2737:
004359  1  A2 14                LDX     #$14            ; error code $14 ("Divide by zero" error)
00435B  1  4C D5 26             JMP     LAB_XERR        ; do error #X, then warm start
00435E  1               
00435E  1               ; copy temp to FAC1 and normalise
00435E  1               
00435E  1               LAB_273C:
00435E  1  A5 75                LDA     <FACt_1         ; get temp mantissa1
004360  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
004362  1  A5 76                LDA     <FACt_2         ; get temp mantissa2
004364  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004366  1  A5 77                LDA     <FACt_3         ; get temp mantissa3
004368  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
00436A  1  4C D4 40             JMP     LAB_24D5        ; normalise FAC1 and return
00436D  1               
00436D  1               ; unpack memory (AY) into FAC1
00436D  1               
00436D  1               LAB_UFAC:
00436D  1  85 71                STA     <ut1_pl         ; save pointer low byte
00436F  1  84 72                STY     <ut1_ph         ; save pointer high byte
004371  1  A0 03                LDY     #$03            ; 4 bytes to do
004373  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last byte
004377  1  B5 71 C9 00  
00437B  1  D0 04 A2 00  
004389  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
00438B  1  88                   DEY                     ; decrement index
00438C  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get last-1 byte
004390  1  B5 71 C9 00  
004394  1  D0 04 A2 00  
0043A2  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
0043A4  1  88                   DEY                     ; decrement index
0043A5  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get second byte
0043A9  1  B5 71 C9 00  
0043AD  1  D0 04 A2 00  
0043BB  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
0043BD  1  09 80                ORA     #$80            ; set 1xxx xxxx (add normal bit)
0043BF  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
0043C1  1  88                   DEY                     ; decrement index
0043C2  1  8B DA A2 01          LDAINDIRECTY ut1_pl     ; get first byte (exponent)
0043C6  1  B5 71 C9 00  
0043CA  1  D0 04 A2 00  
0043D8  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
0043DA  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
0043DC  1  60                   RTS
0043DD  1               
0043DD  1               ; pack FAC1 into <Adatal
0043DD  1               
0043DD  1               LAB_276E:
0043DD  1  A2 A4                LDX     #<Adatal        ; set pointer low byte
0043DF  1               LAB_2770:
0043DF  1  A0 00                LDY     #>Adatal        ; set pointer high byte
0043E1  1  F0 04                BEQ     LAB_2778        ; pack FAC1 into (XY) and return
0043E3  1               
0043E3  1               ; pack FAC1 into (<Lvarpl)
0043E3  1               
0043E3  1               LAB_PFAC:
0043E3  1  A6 97                LDX     <Lvarpl         ; get destination pointer low byte
0043E5  1  A4 98                LDY     <Lvarph         ; get destination pointer high byte
0043E7  1               
0043E7  1               ; pack FAC1 into (XY)
0043E7  1               
0043E7  1               LAB_2778:
0043E7  1  20 69 44             JSR     LAB_27BA        ; round FAC1
0043EA  1  86 71                STX     <ut1_pl         ; save pointer low byte
0043EC  1  84 72                STY     <ut1_ph         ; save pointer high byte
0043EE  1  A0 03                LDY     #$03            ; set index
0043F0  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
0043F2  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
0043F6  1  01 B5 71 C9  
0043FA  1  00 D0 04 A2  
004408  1  88                   DEY                     ; decrement index
004409  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
00440B  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
00440F  1  01 B5 71 C9  
004413  1  00 D0 04 A2  
004421  1  88                   DEY                     ; decrement index
004422  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004424  1  09 7F                ORA     #$7F            ; set bits x111 1111
004426  1  25 AD                AND     <FAC1_1         ; AND in FAC1 mantissa1
004428  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
00442C  1  01 B5 71 C9  
004430  1  00 D0 04 A2  
00443E  1  88                   DEY                     ; decrement index
00443F  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004441  1  8B DA 48 A2          STAINDIRECTY ut1_pl     ; store in destination
004445  1  01 B5 71 C9  
004449  1  00 D0 04 A2  
004457  1  84 B9                STY     <FAC1_r         ; clear FAC1 rounding byte
004459  1  60                   RTS
00445A  1               
00445A  1               ; round and copy FAC1 to FAC2
00445A  1               
00445A  1               LAB_27AB:
00445A  1  20 69 44             JSR     LAB_27BA        ; round FAC1
00445D  1               
00445D  1               ; copy FAC1 to FAC2
00445D  1               
00445D  1               LAB_27AE:
00445D  1  A2 05                LDX     #$05            ; 5 bytes to copy
00445F  1               LAB_27B0:
00445F  1  B5 AB                LDA     <FAC1_e-1,X     ; get byte from FAC1,X
004461  1  95 B2                STA     <FAC1_o,X       ; save byte at FAC2,X
004463  1  CA                   DEX                     ; decrement count
004464  1  D0 F9                BNE     LAB_27B0        ; loop if not all done
004466  1               
004466  1  86 B9                STX     <FAC1_r         ; clear FAC1 rounding byte
004468  1               LAB_27B9:
004468  1  60                   RTS
004469  1               
004469  1               ; round FAC1
004469  1               
004469  1               LAB_27BA:
004469  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00446B  1  F0 FB                BEQ     LAB_27B9        ; exit if zero
00446D  1               
00446D  1  06 B9                ASL     <FAC1_r         ; shift FAC1 rounding byte
00446F  1  90 F7                BCC     LAB_27B9        ; exit if no overflow
004471  1               
004471  1               ; round FAC1 (no check)
004471  1               
004471  1               LAB_27C2:
004471  1  20 58 41             JSR     LAB_2559        ; increment FAC1 mantissa
004474  1  D0 F2                BNE     LAB_27B9        ; branch if no overflow
004476  1               
004476  1  4C 29 41             JMP     LAB_252A        ; normalise FAC1 for C=1 and return
004479  1               
004479  1               ; get FAC1 sign
004479  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
004479  1               
004479  1               LAB_27CA:
004479  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00447B  1  F0 09                BEQ     LAB_27D7        ; exit if zero (already correct SGN(0)=0)
00447D  1               
00447D  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
00447D  1               ; no = 0 check
00447D  1               
00447D  1               LAB_27CE:
00447D  1  A5 B0                LDA     <FAC1_s         ; else get FAC1 sign (b7)
00447F  1               
00447F  1               ; return A=FF,C=1/-ve A=01,C=0/+ve
00447F  1               ; no = 0 check, sign in A
00447F  1               
00447F  1               LAB_27D0:
00447F  1  2A                   ROL     A               ; move sign bit to carry
004480  1  A9 FF                LDA     #$FF            ; set byte for -ve result
004482  1  B0 02                BCS     LAB_27D7        ; return if sign was set (-ve)
004484  1               
004484  1  A9 01                LDA     #$01            ; else set byte for +ve result
004486  1               LAB_27D7:
004486  1  60                   RTS
004487  1               
004487  1               ; perform SGN()
004487  1               
004487  1               LAB_SGN:
004487  1  20 79 44             JSR     LAB_27CA        ; get FAC1 sign
00448A  1               ; return A=$FF/-ve A=$01/+ve
00448A  1               ; save A as integer byte
00448A  1               
00448A  1               LAB_27DB:
00448A  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00448C  1  A9 00                LDA     #$00            ; clear A
00448E  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
004490  1  A2 88                LDX     #$88            ; set exponent
004492  1               
004492  1               ; set exp=X, clearFAC1 mantissa3 and normalise
004492  1               
004492  1               LAB_27E3:
004492  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004494  1  49 FF                EOR     #$FF            ; complement it
004496  1  2A                   ROL     A               ; sign bit into carry
004497  1               
004497  1               ; set exp=X, clearFAC1 mantissa3 and normalise
004497  1               
004497  1               LAB_STFA:
004497  1  A9 00                LDA     #$00            ; clear A
004499  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
00449B  1  86 AC                STX     <FAC1_e         ; set FAC1 exponent
00449D  1  85 B9                STA     <FAC1_r         ; clear FAC1 rounding byte
00449F  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
0044A1  1  4C CF 40             JMP     LAB_24D0        ; do ABS and normalise FAC1
0044A4  1               
0044A4  1               ; perform ABS()
0044A4  1               
0044A4  1               LAB_ABS:
0044A4  1  46 B0                LSR     <FAC1_s         ; clear FAC1 sign (put zero in b7)
0044A6  1  60                   RTS
0044A7  1               
0044A7  1               ; compare FAC1 with (AY)
0044A7  1               ; returns A=$00 if FAC1 = (AY)
0044A7  1               ; returns A=$01 if FAC1 > (AY)
0044A7  1               ; returns A=$FF if FAC1 < (AY)
0044A7  1               
0044A7  1               LAB_27F8:
0044A7  1  85 73                STA     <ut2_pl         ; save pointer low byte
0044A9  1               LAB_27FA:
0044A9  1  84 74                STY     <ut2_ph         ; save pointer high byte
0044AB  1  A0 00                LDY     #$00            ; clear index
0044AD  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get exponent
0044B1  1  B5 73 C9 00  
0044B5  1  D0 04 A2 00  
0044C3  1  C8                   INY                     ; increment index
0044C4  1  AA                   TAX                     ; copy (AY) exponent to X
0044C5  1  F0 B2                BEQ     LAB_27CA        ; branch if (AY) exponent=0 and get FAC1 sign
0044C7  1               ; A=FF,C=1/-ve A=01,C=0/+ve
0044C7  1               
0044C7  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
0044CB  1  B5 73 C9 00  
0044CF  1  D0 04 A2 00  
0044DD  1  45 B0                EOR     <FAC1_s         ; EOR FAC1 sign (b7)
0044DF  1  30 9C                BMI     LAB_27CE        ; if signs <> do return A=FF,C=1/-ve
0044E1  1               ; A=01,C=0/+ve and return
0044E1  1               
0044E1  1  E4 AC                CPX     <FAC1_e         ; compare (AY) exponent with FAC1 exponent
0044E3  1  D0 56                BNE     LAB_2828        ; branch if different
0044E5  1               
0044E5  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get (AY) mantissa1 (with sign)
0044E9  1  B5 73 C9 00  
0044ED  1  D0 04 A2 00  
0044FB  1  09 80                ORA     #$80            ; normalise top bit
0044FD  1  C5 AD                CMP     <FAC1_1         ; compare with FAC1 mantissa1
0044FF  1  D0 3A                BNE     LAB_2828        ; branch if different
004501  1               
004501  1  C8                   INY                     ; increment index
004502  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa2
004506  1  B5 73 C9 00  
00450A  1  D0 04 A2 00  
004518  1  C5 AE                CMP     <FAC1_2         ; compare with FAC1 mantissa2
00451A  1  D0 1F                BNE     LAB_2828        ; branch if different
00451C  1               
00451C  1  C8                   INY                     ; increment index
00451D  1  A9 7F                LDA     #$7F            ; set for 1/2 value rounding byte
00451F  1  C5 B9                CMP     <FAC1_r         ; compare with FAC1 rounding byte (set carry)
004521  1  8B DA A2 01          LDAINDIRECTY ut2_pl     ; get mantissa3
004525  1  B5 73 C9 00  
004529  1  D0 04 A2 00  
004537  1  E5 AF                SBC     <FAC1_3         ; subtract FAC1 mantissa3
004539  1  F0 28                BEQ     LAB_2850        ; exit if mantissa3 equal
00453B  1               
00453B  1               ; gets here if number <> FAC1
00453B  1               
00453B  1               LAB_2828:
00453B  1               
00453B  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00453D  1  90 02                BCC     LAB_282E        ; branch if FAC1 > (AY)
00453F  1               
00453F  1  49 FF                EOR     #$FF            ; else toggle FAC1 sign
004541  1               LAB_282E:
004541  1  4C 7F 44             JMP     LAB_27D0        ; return A=FF,C=1/-ve A=01,C=0/+ve
004544  1               
004544  1               ; convert FAC1 floating-to-fixed
004544  1               
004544  1               LAB_2831:
004544  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004546  1  F0 4A                BEQ     LAB_287F        ; if zero go clear FAC1 and return
004548  1               
004548  1  38                   SEC                     ; set carry for subtract
004549  1  E9 98                SBC     #$98            ; subtract maximum integer range exponent
00454B  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
00454D  1  10 09                BPL     LAB_2845        ; branch if FAC1 +ve
00454F  1               
00454F  1               ; FAC1 was -ve
00454F  1  AA                   TAX                     ; copy subtracted exponent
004550  1  A9 FF                LDA     #$FF            ; overflow for -ve number
004552  1  85 B2                STA     <FAC1_o         ; set FAC1 overflow byte
004554  1  20 3C 41             JSR     LAB_253D        ; twos complement FAC1 mantissa
004557  1  8A                   TXA                     ; restore subtracted exponent
004558  1               LAB_2845:
004558  1  A2 AC                LDX     #<FAC1_e        ; set index to FAC1
00455A  1  C9 F9                CMP     #$F9            ; compare exponent result
00455C  1  10 06                BPL     LAB_2851        ; if < 8 shifts shift FAC1 A times right and return
00455E  1               
00455E  1  20 7A 41             JSR     LAB_257B        ; shift FAC1 A times right (> 8 shifts)
004561  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
004563  1               LAB_2850:
004563  1  60                   RTS
004564  1               
004564  1               ; shift FAC1 A times right
004564  1               
004564  1               LAB_2851:
004564  1  A8                   TAY                     ; copy shift count
004565  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004567  1  29 80                AND     #$80            ; mask sign bit only (x000 0000)
004569  1  46 AD                LSR     <FAC1_1         ; shift FAC1 mantissa1
00456B  1  05 AD                ORA     <FAC1_1         ; OR sign in b7 FAC1 mantissa1
00456D  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00456F  1  20 91 41             JSR     LAB_2592        ; shift FAC1 Y times right
004572  1  84 B2                STY     <FAC1_o         ; clear FAC1 overflow byte
004574  1  60                   RTS
004575  1               
004575  1               ; perform INT()
004575  1               
004575  1               LAB_INT:
004575  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004577  1  C9 98                CMP     #$98            ; compare with max int
004579  1  B0 1E                BCS     LAB_2886        ; exit if >= (already int, too big for fractional part!)
00457B  1               
00457B  1  20 44 45             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
00457E  1  84 B9                STY     <FAC1_r         ; save FAC1 rounding byte
004580  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004582  1  84 B0                STY     <FAC1_s         ; save FAC1 sign (b7)
004584  1  49 80                EOR     #$80            ; toggle FAC1 sign
004586  1  2A                   ROL     A               ; shift into carry
004587  1  A9 98                LDA     #$98            ; set new exponent
004589  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
00458B  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00458D  1  85 5B                STA     <Temp3          ; save for EXP() function
00458F  1  4C CF 40             JMP     LAB_24D0        ; do ABS and normalise FAC1
004592  1               
004592  1               ; clear FAC1 and return
004592  1               
004592  1               LAB_287F:
004592  1  85 AD                STA     <FAC1_1         ; clear FAC1 mantissa1
004594  1  85 AE                STA     <FAC1_2         ; clear FAC1 mantissa2
004596  1  85 AF                STA     <FAC1_3         ; clear FAC1 mantissa3
004598  1  A8                   TAY                     ; clear Y
004599  1               LAB_2886:
004599  1  60                   RTS
00459A  1               
00459A  1               ; get FAC1 from string
00459A  1               ; this routine now handles hex and binary values from strings
00459A  1               ; starting with "$" and "%" respectively
00459A  1               
00459A  1               LAB_2887:
00459A  1  A0 00                LDY     #$00            ; clear Y
00459C  1  84 5F                STY     <Dtypef         ; clear data type flag, $FF=string, $00=numeric
00459E  1  A2 09                LDX     #$09            ; set index
0045A0  1               LAB_288B:
0045A0  1  94 A8                STY     <numexp,x       ; clear byte
0045A2  1  CA                   DEX                     ; decrement index
0045A3  1  10 FB                BPL     LAB_288B        ; loop until <numexp to <negnum (and FAC1) = $00
0045A5  1               
0045A5  1  B0 03                BCS     LAB_s28FE       ; branch if 1st NOT character numeric
0045A7  1  4C 2D 46             JMP     LAB_28FE        ; branch if 1st character numeric
0045AA  1               LAB_s28FE:
0045AA  1               
0045AA  1               ; get FAC1 from string .. first character wasn't numeric
0045AA  1               
0045AA  1  C9 2D                CMP     #'-'            ; else compare with "-"
0045AC  1  D0 04                BNE     LAB_289A        ; branch if not "-"
0045AE  1               
0045AE  1  86 B1                STX     <negnum         ; set flag for -ve number (X = $FF)
0045B0  1  F0 04                BEQ     LAB_289C        ; branch always (go scan and check for hex/bin)
0045B2  1               
0045B2  1               ; get FAC1 from string .. first character wasn't numeric or -
0045B2  1               
0045B2  1               LAB_289A:
0045B2  1  C9 2B                CMP     #'+'            ; else compare with "+"
0045B4  1  D0 06                BNE     LAB_289D        ; branch if not "+" (go check for hex/bin)
0045B6  1               
0045B6  1               ; was "+" or "-" to start, so get next character
0045B6  1               
0045B6  1               LAB_289C:
0045B6  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0045BA  1  90 71                BCC     LAB_28FE        ; branch if numeric character
0045BC  1               
0045BC  1               ; code here for hex and binary numbers
0045BC  1               
0045BC  1               LAB_289D:
0045BC  1  C9 24                CMP     #'$'            ; else compare with "$"
0045BE  1  D0 03                BNE     LAB_NHEX        ; branch if not "$"
0045C0  1               
0045C0  1  4C EB 4A             JMP     LAB_CHEX        ; branch if "$"
0045C3  1               
0045C3  1               LAB_NHEX:
0045C3  1  C9 25                CMP     #'%'            ; else compare with "%"
0045C5  1  D0 09                BNE     LAB_28A3        ; branch if not "%" (continue original code)
0045C7  1               
0045C7  1  4C 1A 4B             JMP     LAB_CBIN        ; branch if "%"
0045CA  1               
0045CA  1               LAB_289E:
0045CA  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory (ignore + or get next number)
0045CE  1               LAB_28A1:
0045CE  1  90 5D                BCC     LAB_28FE        ; branch if numeric character
0045D0  1               
0045D0  1               ; get FAC1 from string .. character wasn't numeric, -, +, hex or binary
0045D0  1               
0045D0  1               LAB_28A3:
0045D0  1  C9 2E                CMP     #'.'            ; else compare with "."
0045D2  1  F0 30                BEQ     LAB_28D5        ; branch if "."
0045D4  1               
0045D4  1               ; get FAC1 from string .. character wasn't numeric, -, + or .
0045D4  1               
0045D4  1  C9 45                CMP     #'E'            ; else compare with "E"
0045D6  1  D0 32                BNE     LAB_28DB        ; branch if not "E"
0045D8  1               
0045D8  1               ; was "E" so evaluate exponential part
0045D8  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0045DC  1  90 18                BCC     LAB_28C7        ; branch if numeric character
0045DE  1               
0045DE  1  C9 C8                CMP     #TK_MINUS       ; else compare with token for -
0045E0  1  F0 0E                BEQ     LAB_28C2        ; branch if token for -
0045E2  1               
0045E2  1  C9 2D                CMP     #'-'            ; else compare with "-"
0045E4  1  F0 0A                BEQ     LAB_28C2        ; branch if "-"
0045E6  1               
0045E6  1  C9 C7                CMP     #TK_PLUS        ; else compare with token for +
0045E8  1  F0 08                BEQ     LAB_28C4        ; branch if token for +
0045EA  1               
0045EA  1  C9 2B                CMP     #'+'            ; else compare with "+"
0045EC  1  F0 04                BEQ     LAB_28C4        ; branch if "+"
0045EE  1               
0045EE  1  D0 08                BNE     LAB_28C9        ; branch always
0045F0  1               
0045F0  1               LAB_28C2:
0045F0  1  66 AB                ROR     <expneg         ; set exponent -ve flag (C, which=1, into b7)
0045F2  1               LAB_28C4:
0045F2  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
0045F6  1               LAB_28C7:
0045F6  1  90 5B                BCC     LAB_2925        ; branch if numeric character
0045F8  1               
0045F8  1               LAB_28C9:
0045F8  1  24 AB                BIT     <expneg         ; test exponent -ve flag
0045FA  1  10 0E                BPL     LAB_28DB        ; if +ve go evaluate exponent
0045FC  1               
0045FC  1               ; else do exponent = -exponent
0045FC  1  A9 00                LDA     #$00            ; clear result
0045FE  1  38                   SEC                     ; set carry for subtract
0045FF  1  E5 A9                SBC     <expcnt         ; subtract exponent byte
004601  1  4C 0C 46             JMP     LAB_28DD        ; go evaluate exponent
004604  1               
004604  1               LAB_28D5:
004604  1  66 AA                ROR     <numdpf         ; set decimal point flag
004606  1  24 AA                BIT     <numdpf         ; test decimal point flag
004608  1  50 C0                BVC     LAB_289E        ; branch if only one decimal point so far
00460A  1               
00460A  1               ; evaluate exponent
00460A  1               LAB_28DB:
00460A  1  A5 A9                LDA     <expcnt         ; get exponent count byte
00460C  1               LAB_28DD:
00460C  1  38                   SEC                     ; set carry for subtract
00460D  1  E5 A8                SBC     <numexp         ; subtract numerator exponent
00460F  1  85 A9                STA     <expcnt         ; save exponent count byte
004611  1  F0 12                BEQ     LAB_28F6        ; branch if no adjustment
004613  1               
004613  1  10 09                BPL     LAB_28EF        ; else if +ve go do FAC1*10^<expcnt
004615  1               
004615  1               ; else go do FAC1/10^(0-<expcnt)
004615  1               LAB_28E6:
004615  1  20 E0 42             JSR     LAB_26B9        ; divide by 10
004618  1  E6 A9                INC     <expcnt         ; increment exponent count byte
00461A  1  D0 F9                BNE     LAB_28E6        ; loop until all done
00461C  1               
00461C  1  F0 07                BEQ     LAB_28F6        ; branch always
00461E  1               
00461E  1               LAB_28EF:
00461E  1  20 C7 42             JSR     LAB_269E        ; multiply by 10
004621  1  C6 A9                DEC     <expcnt         ; decrement exponent count byte
004623  1  D0 F9                BNE     LAB_28EF        ; loop until all done
004625  1               
004625  1               LAB_28F6:
004625  1  A5 B1                LDA     <negnum         ; get -ve flag
004627  1  30 01                BMI     LAB_28FB        ; if -ve do - FAC1 and return
004629  1               
004629  1  60                   RTS
00462A  1               
00462A  1               ; do - FAC1 and return
00462A  1               
00462A  1               LAB_28FB:
00462A  1  4C 1D 48             JMP     LAB_GTHAN       ; do - FAC1 and return
00462D  1               
00462D  1               ; do unsigned FAC1*10+number
00462D  1               
00462D  1               LAB_28FE:
00462D  1  48                   PHA                     ; save character
00462E  1  24 AA                BIT     <numdpf         ; test decimal point flag
004630  1  10 02                BPL     LAB_2905        ; skip exponent increment if not set
004632  1               
004632  1  E6 A8                INC     <numexp         ; else increment number exponent
004634  1               LAB_2905:
004634  1  20 C7 42             JSR     LAB_269E        ; multiply FAC1 by 10
004637  1  68                   PLA                     ; restore character
004638  1  29 0F                AND     #$0F            ; convert to binary
00463A  1  20 40 46             JSR     LAB_2912        ; evaluate new ASCII digit
00463D  1  4C CA 45             JMP     LAB_289E        ; go do next character
004640  1               
004640  1               ; evaluate new ASCII digit
004640  1               
004640  1               LAB_2912:
004640  1  48                   PHA                     ; save digit
004641  1  20 5A 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004644  1  68                   PLA                     ; restore digit
004645  1  20 8A 44             JSR     LAB_27DB        ; save A as integer byte
004648  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
00464A  1  45 B0                EOR     <FAC1_s         ; toggle with FAC1 sign (b7)
00464C  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
00464E  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
004650  1  4C 5B 40             JMP     LAB_ADD         ; add FAC2 to FAC1 and return
004653  1               
004653  1               ; evaluate next character of exponential part of number
004653  1               
004653  1               LAB_2925:
004653  1  A5 A9                LDA     <expcnt         ; get exponent count byte
004655  1  C9 0A                CMP     #$0A            ; compare with 10 decimal
004657  1  90 09                BCC     LAB_2934        ; branch if less
004659  1               
004659  1  A9 64                LDA     #$64            ; make all -ve exponents = -100 decimal (causes underflow)
00465B  1  24 AB                BIT     <expneg         ; test exponent -ve flag
00465D  1  30 25                BMI     LAB_2942        ; branch if -ve
00465F  1               
00465F  1  4C 63 41             JMP     LAB_2564        ; else do overflow error
004662  1               
004662  1               LAB_2934:
004662  1  0A                   ASL     A               ; * 2
004663  1  0A                   ASL     A               ; * 4
004664  1  65 A9                ADC     <expcnt         ; * 5
004666  1  0A                   ASL     A               ; * 10
004667  1  A0 00                LDY     #$00            ; set index
004669  1  8B 48 DA A2          ADCINDIRECTY Bpntrl     ; add character (will be $30 too much!)
00466D  1  01 B5 C3 C9  
004671  1  00 D0 04 A2  
004682  1  E9 2F                SBC     #'0'-1          ; convert character to binary
004684  1               LAB_2942:
004684  1  85 A9                STA     <expcnt         ; save exponent count byte
004686  1  4C F2 45             JMP     LAB_28C4        ; go get next character
004689  1               
004689  1               ; print " in line [LINE #]"
004689  1               
004689  1               LAB_2953:
004689  1  A9 94                LDA     #<LAB_LMSG      ; point to " in line " message low byte
00468B  1  A0 17                LDY     #>LAB_LMSG      ; point to " in line " message high byte
00468D  1  20 76 2F             JSR     LAB_18C3        ; print null terminated string from memory
004690  1               
004690  1               ; print Basic line #
004690  1  A5 88                LDA     <Clineh         ; get current line high byte
004692  1  A6 87                LDX     <Clinel         ; get current line low byte
004694  1               
004694  1               ; print XA as unsigned integer
004694  1               
004694  1               LAB_295E:
004694  1  85 AD                STA     <FAC1_1         ; save low byte as FAC1 mantissa1
004696  1  86 AE                STX     <FAC1_2         ; save high byte as FAC1 mantissa2
004698  1  A2 90                LDX     #$90            ; set exponent to 16d bits
00469A  1  38                   SEC                     ; set integer is +ve flag
00469B  1  20 97 44             JSR     LAB_STFA        ; set exp=X, clearFAC1 mantissa3 and normalise
00469E  1  A0 00                LDY     #$00            ; clear index
0046A0  1  98                   TYA                     ; clear A
0046A1  1  20 B6 46             JSR     LAB_297B        ; convert FAC1 to string, skip sign character save
0046A4  1  4C 76 2F             JMP     LAB_18C3        ; print null terminated string from memory and return
0046A7  1               
0046A7  1               ; convert FAC1 to ASCII string result in (AY)
0046A7  1               ; not any more, moved scratchpad to page 0
0046A7  1               
0046A7  1               LAB_296E:
0046A7  1  A0 01                LDY     #$01            ; set index = 1
0046A9  1  A9 20                LDA     #$20            ; character = " " (assume +ve)
0046AB  1  24 B0                BIT     <FAC1_s         ; test FAC1 sign (b7)
0046AD  1  10 02                BPL     LAB_2978        ; branch if +ve
0046AF  1               
0046AF  1  A9 2D                LDA     #$2D            ; else character = "-"
0046B1  1               LAB_2978:
0046B1  1  DA                   PHX
0046B2  1  BB                   TYX
0046B3  1  95 EF                STA     <Decss,X        ; save leading character (" " or "-")
0046B5  1  FA                   PLX
0046B6  1               LAB_297B:
0046B6  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
0046B8  1  84 BA                STY     <Sendl          ; save index
0046BA  1  C8                   INY                     ; increment index
0046BB  1  A6 AC                LDX     <FAC1_e         ; get FAC1 exponent
0046BD  1  D0 05                BNE     LAB_2989        ; branch if FAC1<>0
0046BF  1               
0046BF  1               ; exponent was $00 so FAC1 is 0
0046BF  1  A9 30                LDA     #'0'            ; set character = "0"
0046C1  1  4C D3 47             JMP     LAB_2A89        ; save last character, [EOT] and exit
0046C4  1               
0046C4  1               ; FAC1 is some non zero value
0046C4  1               LAB_2989:
0046C4  1  A9 00                LDA     #$00            ; clear (number exponent count)
0046C6  1  E0 81                CPX     #$81            ; compare FAC1 exponent with $81 (>1.00000)
0046C8  1               
0046C8  1  B0 09                BCS     LAB_299A        ; branch if FAC1=>1
0046CA  1               
0046CA  1               ; FAC1<1
0046CA  1  A9 FE                LDA     #<LAB_294F      ; set pointer low byte to 1,000,000
0046CC  1  A0 17                LDY     #>LAB_294F      ; set pointer high byte to 1,000,000
0046CE  1  20 D9 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0046D1  1  A9 FA                LDA     #$FA            ; set number exponent count (-6)
0046D3  1               LAB_299A:
0046D3  1  85 A8                STA     <numexp         ; save number exponent count
0046D5  1               LAB_299C:
0046D5  1  A9 FA                LDA     #<LAB_294B      ; set pointer low byte to 999999.4375 (max before sci note)
0046D7  1  A0 17                LDY     #>LAB_294B      ; set pointer high byte to 999999.4375
0046D9  1  20 A7 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0046DC  1  F0 1E                BEQ     LAB_29C3        ; exit if FAC1 = (AY)
0046DE  1  10 12                BPL     LAB_29B9        ; go do /10 if FAC1 > (AY)
0046E0  1               ; FAC1 < (AY)
0046E0  1               LAB_29A7:
0046E0  1  A9 F6                LDA     #<LAB_2947      ; set pointer low byte to 99999.9375
0046E2  1  A0 17                LDY     #>LAB_2947      ; set pointer high byte to 99999.9375
0046E4  1  20 A7 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
0046E7  1  F0 02                BEQ     LAB_29B2        ; branch if FAC1 = (AY) (allow decimal places)
0046E9  1  10 0E                BPL     LAB_29C0        ; branch if FAC1 > (AY) (no decimal places)
0046EB  1               ; FAC1 <= (AY)
0046EB  1               LAB_29B2:
0046EB  1  20 C7 42             JSR     LAB_269E        ; multiply by 10
0046EE  1  C6 A8                DEC     <numexp         ; decrement number exponent count
0046F0  1  D0 EE                BNE     LAB_29A7        ; go test again (branch always)
0046F2  1               
0046F2  1               LAB_29B9:
0046F2  1  20 E0 42             JSR     LAB_26B9        ; divide by 10
0046F5  1  E6 A8                INC     <numexp         ; increment number exponent count
0046F7  1  D0 DC                BNE     LAB_299C        ; go test again (branch always)
0046F9  1               
0046F9  1               ; now we have just the digits to do
0046F9  1               
0046F9  1               LAB_29C0:
0046F9  1  20 54 40             JSR     LAB_244E        ; add 0.5 to FAC1 (round FAC1)
0046FC  1               LAB_29C3:
0046FC  1  20 44 45             JSR     LAB_2831        ; convert FAC1 floating-to-fixed
0046FF  1  A2 01                LDX     #$01            ; set default digits before dp = 1
004701  1  A5 A8                LDA     <numexp         ; get number exponent count
004703  1  18                   CLC                     ; clear carry for add
004704  1  69 07                ADC     #$07            ; up to 6 digits before point
004706  1  30 09                BMI     LAB_29D8        ; if -ve then 1 digit before dp
004708  1               
004708  1  C9 08                CMP     #$08            ; A>=8 if n>=1E6
00470A  1  B0 06                BCS     LAB_29D9        ; branch if >= $08
00470C  1               
00470C  1               ; carry is clear
00470C  1  69 FF                ADC     #$FF            ; take 1 from digit count
00470E  1  AA                   TAX                     ; copy to A
00470F  1  A9 02                LDA     #$02            ;.set exponent adjust
004711  1               LAB_29D8:
004711  1  38                   SEC                     ; set carry for subtract
004712  1               LAB_29D9:
004712  1  E9 02                SBC     #$02            ; -2
004714  1  85 A9                STA     <expcnt         ;.save exponent adjust
004716  1  86 A8                STX     <numexp         ; save digits before dp count
004718  1  8A                   TXA                     ; copy to A
004719  1  F0 02                BEQ     LAB_29E4        ; branch if no digits before dp
00471B  1               
00471B  1  10 17                BPL     LAB_29F7        ; branch if digits before dp
00471D  1               
00471D  1               LAB_29E4:
00471D  1  A4 BA                LDY     <Sendl          ; get output string index
00471F  1  A9 2E                LDA     #$2E            ; character "."
004721  1  C8                   INY                     ; increment index
004722  1  DA                   PHX
004723  1  BB                   TYX
004724  1  95 EF                STA     <Decss,X        ; save to output string
004726  1  FA                   PLX
004727  1  8A                   TXA                     ;.
004728  1  F0 08                BEQ     LAB_29F5        ;.
00472A  1               
00472A  1  A9 30                LDA     #'0'            ; character "0"
00472C  1  C8                   INY                     ; increment index
00472D  1  DA                   PHX
00472E  1  BB                   TYX
00472F  1  95 EF                STA     <Decss,X        ; save to output string
004731  1  FA                   PLX
004732  1               LAB_29F5:
004732  1  84 BA                STY     <Sendl          ; save output string index
004734  1               LAB_29F7:
004734  1  A0 00                LDY     #$00            ; clear index (point to 100,000)
004736  1  A2 80                LDX     #$80            ;
004738  1               LAB_29FB:
004738  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
00473A  1  18                   CLC                     ; clear carry for add
00473B  1  79 74 18             ADC     LAB_2A9C,Y      ; add -ve LSB
00473E  1  85 AF                STA     <FAC1_3         ; save FAC1 mantissa3
004740  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004742  1  79 73 18             ADC     LAB_2A9B,Y      ; add -ve NMSB
004745  1  85 AE                STA     <FAC1_2         ; save FAC1 mantissa2
004747  1  A5 AD                LDA     <FAC1_1         ; get FAC1 mantissa1
004749  1  79 72 18             ADC     LAB_2A9A,Y      ; add -ve MSB
00474C  1  85 AD                STA     <FAC1_1         ; save FAC1 mantissa1
00474E  1  E8                   INX                     ;
00474F  1  B0 04                BCS     LAB_2A18        ;
004751  1               
004751  1  10 E5                BPL     LAB_29FB        ; not -ve so try again
004753  1               
004753  1  30 02                BMI     LAB_2A1A        ;
004755  1               
004755  1               LAB_2A18:
004755  1  30 E1                BMI     LAB_29FB        ;
004757  1               
004757  1               LAB_2A1A:
004757  1  8A                   TXA                     ;
004758  1  90 04                BCC     LAB_2A21        ;
00475A  1               
00475A  1  49 FF                EOR     #$FF            ;
00475C  1  69 0A                ADC     #$0A            ;
00475E  1               LAB_2A21:
00475E  1  69 2F                ADC     #'0'-1          ; add "0"-1 to result
004760  1  C8                   INY                     ; increment index ..
004761  1  C8                   INY                     ; .. to next less ..
004762  1  C8                   INY                     ; .. power of ten
004763  1  84 95                STY     <Cvaral         ; save as current var address low byte
004765  1  A4 BA                LDY     <Sendl          ; get output string index
004767  1  C8                   INY                     ; increment output string index
004768  1  AA                   TAX                     ; copy character to X
004769  1  29 7F                AND     #$7F            ; mask out top bit
00476B  1  DA                   PHX
00476C  1  BB                   TYX
00476D  1  95 EF                STA     <Decss,X        ; save to output string
00476F  1  FA                   PLX
004770  1  C6 A8                DEC     <numexp         ; decrement # of characters before the dp
004772  1  D0 08                BNE     LAB_2A3B        ; branch if still characters to do
004774  1               
004774  1               ; else output the point
004774  1  A9 2E                LDA     #$2E            ; character "."
004776  1  C8                   INY                     ; increment output string index
004777  1  DA                   PHX
004778  1  BB                   TYX
004779  1  95 EF                STA     <Decss,X        ; save to output string
00477B  1  FA                   PLX
00477C  1               LAB_2A3B:
00477C  1  84 BA                STY     <Sendl          ; save output string index
00477E  1  A4 95                LDY     <Cvaral         ; get current var address low byte
004780  1  8A                   TXA                     ; get character back
004781  1  49 FF                EOR     #$FF            ;
004783  1  29 80                AND     #$80            ;
004785  1  AA                   TAX                     ;
004786  1  C0 12                CPY     #$12            ; compare index with max
004788  1  D0 AE                BNE     LAB_29FB        ; loop if not max
00478A  1               
00478A  1               ; now remove trailing zeroes
00478A  1  A4 BA                LDY     <Sendl          ; get output string index
00478C  1               LAB_2A4B:
00478C  1  DA                   PHX
00478D  1  BB                   TYX
00478E  1  B5 EF                LDA     <Decss,X        ; get character from output string
004790  1  FA                   PLX
004791  1  88                   DEY                     ; decrement output string index
004792  1  C9 30                CMP     #'0'            ; compare with "0"
004794  1  F0 F6                BEQ     LAB_2A4B        ; loop until non "0" character found
004796  1               
004796  1  C9 2E                CMP     #'.'            ; compare with "."
004798  1  F0 01                BEQ     LAB_2A58        ; branch if was dp
00479A  1               
00479A  1               ; restore last character
00479A  1  C8                   INY                     ; increment output string index
00479B  1               LAB_2A58:
00479B  1  A9 2B                LDA     #$2B            ; character "+"
00479D  1  A6 A9                LDX     <expcnt         ; get exponent count
00479F  1  F0 37                BEQ     LAB_2A8C        ; if zero go set null terminator and exit
0047A1  1               
0047A1  1               ; exponent isn't zero so write exponent
0047A1  1  10 08                BPL     LAB_2A68        ; branch if exponent count +ve
0047A3  1               
0047A3  1  A9 00                LDA     #$00            ; clear A
0047A5  1  38                   SEC                     ; set carry for subtract
0047A6  1  E5 A9                SBC     <expcnt         ; subtract exponent count adjust (convert -ve to +ve)
0047A8  1  AA                   TAX                     ; copy exponent count to X
0047A9  1  A9 2D                LDA     #'-'            ; character "-"
0047AB  1               LAB_2A68:
0047AB  1  DA                   PHX
0047AC  1  BB                   TYX
0047AD  1  95 F1                STA     <Decss+2,X      ; save to output string
0047AF  1  A9 45                LDA     #$45            ; character "E"
0047B1  1  95 F0                STA     <Decss+1,X      ; save exponent sign to output string
0047B3  1  FA                   PLX
0047B4  1  8A                   TXA                     ; get exponent count back
0047B5  1  A2 2F                LDX     #'0'-1          ; one less than "0" character
0047B7  1  38                   SEC                     ; set carry for subtract
0047B8  1               LAB_2A74:
0047B8  1  E8                   INX                     ; increment 10's character
0047B9  1  E9 0A                SBC     #$0A            ;.subtract 10 from exponent count
0047BB  1  B0 FB                BCS     LAB_2A74        ; loop while still >= 0
0047BD  1               
0047BD  1  69 3A                ADC     #':'            ; add character ":" ($30+$0A, result is 10 less that value)
0047BF  1  DA                   PHX
0047C0  1  BB                   TYX
0047C1  1  95 F3                STA     <Decss+4,X      ; save to output string
0047C3  1  FA                   PLX
0047C4  1  8A                   TXA                     ; copy 10's character
0047C5  1  DA                   PHX
0047C6  1  BB                   TYX
0047C7  1  95 F2                STA     <Decss+3,X      ; save to output string
0047C9  1  FA                   PLX
0047CA  1  A9 00                LDA     #$00            ; set null terminator
0047CC  1  DA                   PHX
0047CD  1  BB                   TYX
0047CE  1  95 F4                STA     <Decss+5,X      ; save to output string
0047D0  1  FA                   PLX
0047D1  1  F0 0C                BEQ     LAB_2A91        ; go set string pointer (AY) and exit (branch always)
0047D3  1               
0047D3  1               ; save last character, [EOT] and exit
0047D3  1               LAB_2A89:
0047D3  1  DA                   PHX
0047D4  1  BB                   TYX
0047D5  1  95 EF                STA     <Decss,X        ; save last character to output string
0047D7  1  FA                   PLX
0047D8  1               ; set null terminator and exit
0047D8  1               LAB_2A8C:
0047D8  1  A9 00                LDA     #$00            ; set null terminator
0047DA  1  DA                   PHX
0047DB  1  BB                   TYX
0047DC  1  95 F0                STA     <Decss+1,X      ; save after last character
0047DE  1  FA                   PLX
0047DF  1               ; set string pointer (AY) and exit
0047DF  1               LAB_2A91:
0047DF  1  A9 F0                LDA     #<Decssp1       ; set result string low pointer
0047E1  1  A0 00                LDY     #>Decssp1       ; set result string high pointer
0047E3  1  60                   RTS
0047E4  1               
0047E4  1               ; perform power function
0047E4  1               
0047E4  1               LAB_POWER:
0047E4  1  F0 42                BEQ     LAB_EXP         ; go do  EXP()
0047E6  1               
0047E6  1  A5 B3                LDA     <FAC2_e         ; get FAC2 exponent
0047E8  1  D0 03                BNE     LAB_2ABF        ; branch if FAC2<>0
0047EA  1               
0047EA  1  4C F2 40             JMP     LAB_24F3        ; clear FAC1 exponent and sign and return
0047ED  1               
0047ED  1               LAB_2ABF:
0047ED  1  A2 9C                LDX     #<func_l        ; set destination pointer low byte
0047EF  1  A0 00                LDY     #>func_l        ; set destination pointer high byte
0047F1  1  20 E7 43             JSR     LAB_2778        ; pack FAC1 into (XY)
0047F4  1  A5 B7                LDA     <FAC2_s         ; get FAC2 sign (b7)
0047F6  1  10 0F                BPL     LAB_2AD9        ; branch if FAC2>0
0047F8  1               
0047F8  1               ; else FAC2 is -ve and can only be raised to an
0047F8  1               ; integer power which gives an x +j0 result
0047F8  1  20 75 45             JSR     LAB_INT         ; perform INT
0047FB  1  A9 9C                LDA     #<func_l        ; set source pointer low byte
0047FD  1  A0 00                LDY     #>func_l        ; set source pointer high byte
0047FF  1  20 A7 44             JSR     LAB_27F8        ; compare FAC1 with (AY)
004802  1  D0 03                BNE     LAB_2AD9        ; branch if FAC1 <> (AY) to allow Function Call error
004804  1               ; this will leave FAC1 -ve and cause a Function Call
004804  1               ; error when LOG() is called
004804  1               
004804  1  98                   TYA                     ; clear sign b7
004805  1  A4 5B                LDY     <Temp3          ; save mantissa 3 from INT() function as sign in Y
004807  1               ; for possible later negation, b0
004807  1               LAB_2AD9:
004807  1  20 5F 40             JSR     LAB_279D        ; save FAC1 sign and copy ABS(FAC2) to FAC1
00480A  1  98                   TYA                     ; copy sign back ..
00480B  1  48                   PHA                     ; .. and save it
00480C  1  20 9B 41             JSR     LAB_LOG         ; do LOG(n)
00480F  1  A9 9C                LDA     #<garb_l        ; set pointer low byte
004811  1  A0 00                LDY     #>garb_l        ; set pointer high byte
004813  1  20 D9 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY) (square the value)
004816  1  20 28 48             JSR     LAB_EXP         ; go do EXP(n)
004819  1  68                   PLA                     ; pull sign from stack
00481A  1  4A                   LSR     A               ; b0 is to be tested, shift to Cb
00481B  1  90 0A                BCC     LAB_2AF9        ; if no bit then exit
00481D  1               
00481D  1               ; Perform negation
00481D  1               ; do - FAC1
00481D  1               
00481D  1               LAB_GTHAN:
00481D  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00481F  1  F0 06                BEQ     LAB_2AF9        ; exit if <FAC1_e = $00
004821  1               
004821  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004823  1  49 FF                EOR     #$FF            ; complement it
004825  1  85 B0                STA     <FAC1_s         ; save FAC1 sign (b7)
004827  1               LAB_2AF9:
004827  1  60                   RTS
004828  1               
004828  1               ; perform EXP()	(x^e)
004828  1               
004828  1               LAB_EXP:
004828  1  A9 02                LDA     #<LAB_2AFA      ; set 1.443 pointer low byte
00482A  1  A0 18                LDY     #>LAB_2AFA      ; set 1.443 pointer high byte
00482C  1  20 D9 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
00482F  1  A5 B9                LDA     <FAC1_r         ; get FAC1 rounding byte
004831  1  69 50                ADC     #$50            ; +$50/$100
004833  1  90 03                BCC     LAB_2B2B        ; skip rounding if no carry
004835  1               
004835  1  20 71 44             JSR     LAB_27C2        ; round FAC1 (no check)
004838  1               LAB_2B2B:
004838  1  85 A3                STA     <FAC2_r         ; save FAC2 rounding byte
00483A  1  20 5D 44             JSR     LAB_27AE        ; copy FAC1 to FAC2
00483D  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00483F  1  C9 88                CMP     #$88            ; compare with EXP limit (256d)
004841  1  90 03                BCC     LAB_2B39        ; branch if less
004843  1               
004843  1               LAB_2B36:
004843  1  20 BE 42             JSR     LAB_2690        ; handle overflow and underflow
004846  1               LAB_2B39:
004846  1  20 75 45             JSR     LAB_INT         ; perform INT
004849  1  A5 5B                LDA     <Temp3          ; get mantissa 3 from INT() function
00484B  1  18                   CLC                     ; clear carry for add
00484C  1  69 81                ADC     #$81            ; normalise +1
00484E  1  F0 F3                BEQ     LAB_2B36        ; if $00 go handle overflow
004850  1               
004850  1  38                   SEC                     ; set carry for subtract
004851  1  E9 01                SBC     #$01            ; now correct for exponent
004853  1  48                   PHA                     ; save FAC2 exponent
004854  1               
004854  1               ; swap FAC1 and FAC2
004854  1  A2 04                LDX     #$04            ; 4 bytes to do
004856  1               LAB_2B49:
004856  1  B5 B3                LDA     <FAC2_e,X       ; get FAC2,X
004858  1  B4 AC                LDY     <FAC1_e,X       ; get FAC1,X
00485A  1  95 AC                STA     <FAC1_e,X       ; save FAC1,X
00485C  1  94 B3                STY     <FAC2_e,X       ; save FAC2,X
00485E  1  CA                   DEX                     ; decrement count/index
00485F  1  10 F5                BPL     LAB_2B49        ; loop if not all done
004861  1               
004861  1  A5 A3                LDA     <FAC2_r         ; get FAC2 rounding byte
004863  1  85 B9                STA     <FAC1_r         ; save as FAC1 rounding byte
004865  1  20 40 40             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
004868  1  20 1D 48             JSR     LAB_GTHAN       ; do - FAC1
00486B  1  A9 06                LDA     #<LAB_2AFE      ; set counter pointer low byte
00486D  1  A0 18                LDY     #>LAB_2AFE      ; set counter pointer high byte
00486F  1  20 90 48             JSR     LAB_2B84        ; go do series evaluation
004872  1  A9 00                LDA     #$00            ; clear A
004874  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
004876  1  68                   PLA                     ;.get saved FAC2 exponent
004877  1  4C A3 42             JMP     LAB_2675        ; test and adjust accumulators and return
00487A  1               
00487A  1               ; ^2 then series evaluation
00487A  1               
00487A  1               LAB_2B6E:
00487A  1  85 BA                STA     <Cptrl          ; save count pointer low byte
00487C  1  84 BB                STY     <Cptrh          ; save count pointer high byte
00487E  1  20 DD 43             JSR     LAB_276E        ; pack FAC1 into <Adatal
004881  1  A9 A4                LDA     #<Adatal        ; set pointer low byte (Y already $00)
004883  1  20 D9 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
004886  1  20 94 48             JSR     LAB_2B88        ; go do series evaluation
004889  1  A9 A4                LDA     #<Adatal        ; pointer to original # low byte
00488B  1  A0 00                LDY     #>Adatal        ; pointer to original # high byte
00488D  1  4C D9 41             JMP     LAB_25FB        ; do convert AY, FCA1*(AY) and return
004890  1               
004890  1               ; series evaluation
004890  1               
004890  1               LAB_2B84:
004890  1  85 BA                STA     <Cptrl          ; save count pointer low byte
004892  1  84 BB                STY     <Cptrh          ; save count pointer high byte
004894  1               LAB_2B88:
004894  1  A2 A8                LDX     #<numexp        ; set pointer low byte
004896  1  20 DF 43             JSR     LAB_2770        ; set pointer high byte and pack FAC1 into <numexp
004899  1  8B DA A2 01          LDAINDIRECTY Cptrl      ; get constants count
00489D  1  B5 BA C9 00  
0048A1  1  D0 04 A2 00  
0048AF  1  85 B1                STA     <numcon         ; save constants count
0048B1  1  A4 BA                LDY     <Cptrl          ; get count pointer low byte
0048B3  1  C8                   INY                     ; increment it (now constants pointer)
0048B4  1  98                   TYA                     ; copy it
0048B5  1  D0 02                BNE     LAB_2B97        ; skip next if no overflow
0048B7  1               
0048B7  1  E6 BB                INC     <Cptrh          ; else increment high byte
0048B9  1               LAB_2B97:
0048B9  1  85 BA                STA     <Cptrl          ; save low byte
0048BB  1  A4 BB                LDY     <Cptrh          ; get high byte
0048BD  1               LAB_2B9B:
0048BD  1  20 D9 41             JSR     LAB_25FB        ; do convert AY, FCA1*(AY)
0048C0  1  A5 BA                LDA     <Cptrl          ; get constants pointer low byte
0048C2  1  A4 BB                LDY     <Cptrh          ; get constants pointer high byte
0048C4  1  18                   CLC                     ; clear carry for add
0048C5  1  69 04                ADC     #$04            ; +4 to  low pointer (4 bytes per constant)
0048C7  1  90 01                BCC     LAB_2BA8        ; skip next if no overflow
0048C9  1               
0048C9  1  C8                   INY                     ; increment high byte
0048CA  1               LAB_2BA8:
0048CA  1  85 BA                STA     <Cptrl          ; save pointer low byte
0048CC  1  84 BB                STY     <Cptrh          ; save pointer high byte
0048CE  1  20 58 40             JSR     LAB_246C        ; add (AY) to FAC1
0048D1  1  A9 A8                LDA     #<numexp        ; set pointer low byte to partial @ <numexp
0048D3  1  A0 00                LDY     #>numexp        ; set pointer high byte to partial @ <numexp
0048D5  1  C6 B1                DEC     <numcon         ; decrement constants count
0048D7  1  D0 E4                BNE     LAB_2B9B        ; loop until all done
0048D9  1               
0048D9  1  60                   RTS
0048DA  1               
0048DA  1               ; RND(n), 32 bit Galoise version. make n=0 for 19th next number in sequence or n<>0
0048DA  1               ; to get 19th next number in sequence after seed n. This version of the PRNG uses
0048DA  1               ; the Galois method and a sample of 65536 bytes produced gives the following values.
0048DA  1               
0048DA  1               ; Entropy = 7.997442 bits per byte
0048DA  1               ; Optimum compression would reduce these 65536 bytes by 0 percent
0048DA  1               
0048DA  1               ; Chi square distribution for 65536 samples is 232.01, and
0048DA  1               ; randomly would exceed this value 75.00 percent of the time
0048DA  1               
0048DA  1               ; Arithmetic mean value of data bytes is 127.6724, 127.5 would be random
0048DA  1               ; Monte Carlo value for Pi is 3.122871269, error 0.60 percent
0048DA  1               ; Serial correlation coefficient is -0.000370, totally uncorrelated would be 0.0
0048DA  1               
0048DA  1               LAB_RND:
0048DA  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
0048DC  1  F0 07                BEQ     NextPRN         ; do next random # if zero
0048DE  1               
0048DE  1               ; else get seed into random number store
0048DE  1  A2 E1                LDX     #<Rbyte4        ; set PRNG pointer low byte
0048E0  1  A0 00                LDY     #$00            ; set PRNG pointer high byte
0048E2  1  20 E7 43             JSR     LAB_2778        ; pack FAC1 into (XY)
0048E5  1               NextPRN:
0048E5  1  A2 AF                LDX     #$AF            ; set EOR byte
0048E7  1  A0 13                LDY     #$13            ; do this nineteen times
0048E9  1               LoopPRN:
0048E9  1  06 E2                ASL     <Rbyte1         ; shift PRNG most significant byte
0048EB  1  26 E3                ROL     <Rbyte2         ; shift PRNG middle byte
0048ED  1  26 E4                ROL     <Rbyte3         ; shift PRNG least significant byte
0048EF  1  26 E1                ROL     <Rbyte4         ; shift PRNG extra byte
0048F1  1  90 05                BCC     Ninc1           ; branch if bit 32 clear
0048F3  1               
0048F3  1  8A                   TXA                     ; set EOR byte
0048F4  1  45 E2                EOR     <Rbyte1         ; EOR PRNG extra byte
0048F6  1  85 E2                STA     <Rbyte1         ; save new PRNG extra byte
0048F8  1               Ninc1:
0048F8  1  88                   DEY                     ; decrement loop count
0048F9  1  D0 EE                BNE     LoopPRN         ; loop if not all done
0048FB  1               
0048FB  1  A2 02                LDX     #$02            ; three bytes to copy
0048FD  1               CopyPRNG:
0048FD  1  B5 E2                LDA     <Rbyte1,X       ; get PRNG byte
0048FF  1  95 AD                STA     <FAC1_1,X       ; save FAC1 byte
004901  1  CA                   DEX
004902  1  10 F9                BPL     CopyPRNG        ; loop if not complete
004904  1               
004904  1  A9 80                LDA     #$80            ; set the exponent
004906  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004908  1               
004908  1  0A                   ASL     A               ; clear A
004909  1  85 B0                STA     <FAC1_s         ; save FAC1 sign
00490B  1               
00490B  1  4C D4 40             JMP     LAB_24D5        ; normalise FAC1 and return
00490E  1               
00490E  1               ; perform COS()
00490E  1               
00490E  1               LAB_COS:
00490E  1  A9 23                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
004910  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
004912  1  20 58 40             JSR     LAB_246C        ; add (AY) to FAC1
004915  1               
004915  1               ; perform SIN()
004915  1               
004915  1               LAB_SIN:
004915  1  20 5A 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004918  1  A9 38                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
00491A  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
00491C  1  A6 B7                LDX     <FAC2_s         ; get FAC2 sign (b7)
00491E  1  20 E9 42             JSR     LAB_26C2        ; divide by (AY) (X=sign)
004921  1  20 5A 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004924  1  20 75 45             JSR     LAB_INT         ; perform INT
004927  1  A9 00                LDA     #$00            ; clear byte
004929  1  85 B8                STA     <FAC_sc         ; clear sign compare (FAC1 EOR FAC2)
00492B  1  20 40 40             JSR     LAB_SUBTRACT    ; perform subtraction, FAC2 from FAC1
00492E  1  A9 6A                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
004930  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
004932  1  20 3D 40             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
004935  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004937  1  48                   PHA                     ; save FAC1 sign
004938  1  10 0D                BPL     LAB_2C35        ; branch if +ve
00493A  1               
00493A  1               ; FAC1 sign was -ve
00493A  1  20 54 40             JSR     LAB_244E        ; add 0.5 to FAC1
00493D  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
00493F  1  30 09                BMI     LAB_2C38        ; branch if -ve
004941  1               
004941  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
004943  1  49 FF                EOR     #$FF            ; toggle flag
004945  1  85 63                STA     <Cflag          ; save comparison evaluation flag
004947  1               LAB_2C35:
004947  1  20 1D 48             JSR     LAB_GTHAN       ; do - FAC1
00494A  1               LAB_2C38:
00494A  1  A9 6A                LDA     #<LAB_2C80      ; set 0.25 pointer low byte
00494C  1  A0 18                LDY     #>LAB_2C80      ; set 0.25 pointer high byte
00494E  1  20 58 40             JSR     LAB_246C        ; add (AY) to FAC1
004951  1  68                   PLA                     ; restore FAC1 sign
004952  1  10 03                BPL     LAB_2C45        ; branch if was +ve
004954  1               
004954  1               ; else correct FAC1
004954  1  20 1D 48             JSR     LAB_GTHAN       ; do - FAC1
004957  1               LAB_2C45:
004957  1  A9 27                LDA     #<LAB_2C84      ; set pointer low byte to counter
004959  1  A0 18                LDY     #>LAB_2C84      ; set pointer high byte to counter
00495B  1  4C 7A 48             JMP     LAB_2B6E        ; ^2 then series evaluation and return
00495E  1               
00495E  1               ; perform TAN()
00495E  1               
00495E  1               LAB_TAN:
00495E  1  20 DD 43             JSR     LAB_276E        ; pack FAC1 into <Adatal
004961  1  A9 00                LDA     #$00            ; clear byte
004963  1  85 63                STA     <Cflag          ; clear comparison evaluation flag
004965  1  20 15 49             JSR     LAB_SIN         ; go do SIN(n)
004968  1  A2 9C                LDX     #<func_l        ; set sin(n) pointer low byte
00496A  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
00496C  1  20 E7 43             JSR     LAB_2778        ; pack FAC1 into (XY)
00496F  1  A9 A4                LDA     #<Adatal        ; set n pointer low addr
004971  1  A0 00                LDY     #>Adatal        ; set n pointer high addr
004973  1  20 6D 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004976  1  A9 00                LDA     #$00            ; clear byte
004978  1  85 B0                STA     <FAC1_s         ; clear FAC1 sign (b7)
00497A  1  A5 63                LDA     <Cflag          ; get comparison evaluation flag
00497C  1  20 86 49             JSR     LAB_2C74        ; save flag and go do series evaluation
00497F  1               
00497F  1  A9 9C                LDA     #<func_l        ; set sin(n) pointer low byte
004981  1  A0 00                LDY     #>func_l        ; set sin(n) pointer high byte
004983  1  4C F1 42             JMP     LAB_26CA        ; convert AY and do (AY)/FAC1
004986  1               
004986  1               LAB_2C74:
004986  1  48                   PHA                     ; save comparison evaluation flag
004987  1  4C 47 49             JMP     LAB_2C35        ; go do series evaluation
00498A  1               
00498A  1               ; perform USR()
00498A  1               
00498A  1               LAB_USR:
00498A  1  20 0A 00             JSR     Usrjmp          ; call user code
00498D  1  4C 04 33             JMP     LAB_1BFB        ; scan for ")", else do syntax error then warm start
004990  1               
004990  1               ; perform ATN()
004990  1               
004990  1               LAB_ATN:
004990  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign (b7)
004992  1  48                   PHA                     ; save sign
004993  1  10 03                BPL     LAB_2CA1        ; branch if +ve
004995  1               
004995  1  20 1D 48             JSR     LAB_GTHAN       ; else do - FAC1
004998  1               LAB_2CA1:
004998  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
00499A  1  48                   PHA                     ; push exponent
00499B  1  C9 81                CMP     #$81            ; compare with 1
00499D  1  90 07                BCC     LAB_2CAF        ; branch if FAC1<1
00499F  1               
00499F  1  A9 5D                LDA     #<LAB_259C      ; set 1 pointer low byte
0049A1  1  A0 18                LDY     #>LAB_259C      ; set 1 pointer high byte
0049A3  1  20 F1 42             JSR     LAB_26CA        ; convert AY and do (AY)/FAC1
0049A6  1               LAB_2CAF:
0049A6  1  A9 3C                LDA     #<LAB_2CC9      ; set pointer low byte to counter
0049A8  1  A0 18                LDY     #>LAB_2CC9      ; set pointer high byte to counter
0049AA  1  20 7A 48             JSR     LAB_2B6E        ; ^2 then series evaluation
0049AD  1  68                   PLA                     ; restore old FAC1 exponent
0049AE  1  C9 81                CMP     #$81            ; compare with 1
0049B0  1  90 07                BCC     LAB_2CC2        ; branch if FAC1<1
0049B2  1               
0049B2  1  A9 23                LDA     #<LAB_2C78      ; set (pi/2) pointer low byte
0049B4  1  A0 18                LDY     #>LAB_2C78      ; set (pi/2) pointer high byte
0049B6  1  20 3D 40             JSR     LAB_2455        ; perform subtraction, (AY) from FAC1
0049B9  1               LAB_2CC2:
0049B9  1  68                   PLA                     ; restore FAC1 sign
0049BA  1  10 16                BPL     LAB_2D04        ; exit if was +ve
0049BC  1               
0049BC  1  4C 1D 48             JMP     LAB_GTHAN       ; else do - FAC1 and return
0049BF  1               
0049BF  1               ; perform BITSET
0049BF  1               
0049BF  1               LAB_BITSET:
0049BF  1  20 1A 3F             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
0049C2  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
0049C4  1  B0 20                BCS     FCError         ; branch if > 7
0049C6  1               
0049C6  1  A9 00                LDA     #$00            ; clear A
0049C8  1  38                   SEC                     ; set the carry
0049C9  1               S_Bits:
0049C9  1  2A                   ROL     A               ; shift bit
0049CA  1  CA                   DEX                     ; decrement bit number
0049CB  1  10 FC                BPL     S_Bits          ; loop if still +ve
0049CD  1               
0049CD  1  E8                   INX                     ; make X = $00
0049CE  1  01 11                ORA     (<Itempl,X)     ; or with byte via temporary integer (addr)
0049D0  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
0049D2  1               LAB_2D04:
0049D2  1  60                   RTS
0049D3  1               
0049D3  1               ; perform BITCLR
0049D3  1               
0049D3  1               LAB_BITCLR:
0049D3  1  20 1A 3F             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
0049D6  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
0049D8  1  B0 0C                BCS     FCError         ; branch if > 7
0049DA  1               
0049DA  1  A9 FF                LDA     #$FF            ; set A
0049DC  1               S_Bitc:
0049DC  1  2A                   ROL     A               ; shift bit
0049DD  1  CA                   DEX                     ; decrement bit number
0049DE  1  10 FC                BPL     S_Bitc          ; loop if still +ve
0049E0  1               
0049E0  1  E8                   INX                     ; make X = $00
0049E1  1  21 11                AND     (<Itempl,X)     ; and with byte via temporary integer (addr)
0049E3  1  81 11                STA     (<Itempl,X)     ; save byte via temporary integer (addr)
0049E5  1  60                   RTS
0049E6  1               
0049E6  1               FCError:
0049E6  1  4C 78 36             JMP     LAB_FCER        ; do function call error then warm start
0049E9  1               
0049E9  1               ; perform BITTST()
0049E9  1               
0049E9  1               LAB_BTST:
0049E9  1  22 BC 00 00          JSL     LAB_IGBY        ; increment BASIC pointer
0049ED  1  20 1A 3F             JSR     LAB_GADB        ; get two parameters for POKE or WAIT
0049F0  1  E0 08                CPX     #$08            ; only 0 to 7 are allowed
0049F2  1  B0 F2                BCS     FCError         ; branch if > 7
0049F4  1               
0049F4  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
0049F8  1  C9 29                CMP     #')'            ; is next character ")"
0049FA  1  F0 03                BEQ     TST_OK          ; if ")" go do rest of function
0049FC  1               
0049FC  1  4C 19 33             JMP     LAB_SNER        ; do syntax error then warm start
0049FF  1               
0049FF  1               TST_OK:
0049FF  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
004A03  1  A9 00                LDA     #$00            ; clear A
004A05  1  38                   SEC                     ; set the carry
004A06  1               T_Bits:
004A06  1  2A                   ROL     A               ; shift bit
004A07  1  CA                   DEX                     ; decrement bit number
004A08  1  10 FC                BPL     T_Bits          ; loop if still +ve
004A0A  1               
004A0A  1  E8                   INX                     ; make X = $00
004A0B  1  21 11                AND     (<Itempl,X)     ; AND with byte via temporary integer (addr)
004A0D  1  F0 02                BEQ     LAB_NOTT        ; branch if zero (already correct)
004A0F  1               
004A0F  1  A9 FF                LDA     #$FF            ; set for -1 result
004A11  1               LAB_NOTT:
004A11  1  4C 8A 44             JMP     LAB_27DB        ; go do SGN tail
004A14  1               
004A14  1               ; perform BIN$()
004A14  1               
004A14  1               LAB_BINS:
004A14  1  E0 19                CPX     #$19            ; max + 1
004A16  1  B0 71                BCS     BinFErr         ; exit if too big ( > or = )
004A18  1               
004A18  1  86 78                STX     <TempB          ; save # of characters ($00 = leading zero remove)
004A1A  1  A9 18                LDA     #$18            ; need A byte long space
004A1C  1  20 1F 39             JSR     LAB_MSSP        ; make string space A bytes long
004A1F  1  A0 17                LDY     #$17            ; set index
004A21  1  A2 18                LDX     #$18            ; character count
004A23  1               NextB1:
004A23  1  46 11                LSR     <nums_1         ; shift highest byte
004A25  1  66 12                ROR     <nums_2         ; shift middle byte
004A27  1  66 13                ROR     <nums_3         ; shift lowest byte bit 0 to carry
004A29  1  8A                   TXA                     ; load with "0"/2
004A2A  1  2A                   ROL     A               ; shift in carry
004A2B  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string + index
004A2F  1  01 B5 AD C9  
004A33  1  00 D0 04 A2  
004A41  1  88                   DEY                     ; decrement index
004A42  1  10 DF                BPL     NextB1          ; loop if not done
004A44  1               
004A44  1  A5 78                LDA     <TempB          ; get # of characters
004A46  1  F0 0A                BEQ     EndBHS          ; branch if truncate
004A48  1               
004A48  1  AA                   TAX                     ; copy length to X
004A49  1  38                   SEC                     ; set carry for add !
004A4A  1  49 FF                EOR     #$FF            ; 1's complement
004A4C  1  69 18                ADC     #$18            ; add 24d
004A4E  1  F0 30                BEQ     GoPr2           ; if zero print whole string
004A50  1               
004A50  1  D0 23                BNE     GoPr1           ; else go make output string
004A52  1               
004A52  1               ; this is the exit code and is also used by HEX$()
004A52  1               ; truncate string to remove leading "0"s
004A52  1               
004A52  1               EndBHS:
004A52  1  A8                   TAY                     ; clear index (A=0, X=length here)
004A53  1               NextB2:
004A53  1  8B DA A2 01          LDAINDIRECTY str_pl     ; get character from string
004A57  1  B5 AD C9 00  
004A5B  1  D0 04 A2 00  
004A69  1  C9 30                CMP     #'0'            ; compare with "0"
004A6B  1  D0 07                BNE     GoPr            ; if not "0" then go print string from here
004A6D  1               
004A6D  1  CA                   DEX                     ; decrement character count
004A6E  1  F0 03                BEQ     GoPr3           ; if zero then end of string so go print it
004A70  1               
004A70  1  C8                   INY                     ; else increment index
004A71  1  10 E0                BPL     NextB2          ; loop always
004A73  1               
004A73  1               ; make fixed length output string - ignore overflows!
004A73  1               
004A73  1               GoPr3:
004A73  1  E8                   INX                     ; need at least 1 character
004A74  1               GoPr:
004A74  1  98                   TYA                     ; copy result
004A75  1               GoPr1:
004A75  1  18                   CLC                     ; clear carry for add
004A76  1  65 AD                ADC     <str_pl         ; add low address
004A78  1  85 AD                STA     <str_pl         ; save low address
004A7A  1  A9 00                LDA     #$00            ; do high byte
004A7C  1  65 AE                ADC     <str_ph         ; add high address
004A7E  1  85 AE                STA     <str_ph         ; save high address
004A80  1               GoPr2:
004A80  1  86 AC                STX     <str_ln         ; X holds string length
004A82  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to character past ")")
004A86  1  4C 82 39             JMP     LAB_RTST        ; check for space on descriptor stack then put address
004A89  1               ; and length on descriptor stack and update stack pointers
004A89  1               
004A89  1               BinFErr:
004A89  1  4C 78 36             JMP     LAB_FCER        ; do function call error then warm start
004A8C  1               
004A8C  1               ; perform HEX$()
004A8C  1               
004A8C  1               LAB_HEXS:
004A8C  1  E0 07                CPX     #$07            ; max + 1
004A8E  1  B0 F9                BCS     BinFErr         ; exit if too big ( > or = )
004A90  1               
004A90  1  86 78                STX     <TempB          ; save # of characters
004A92  1               
004A92  1  A9 06                LDA     #$06            ; need 6 bytes for string
004A94  1  20 1F 39             JSR     LAB_MSSP        ; make string space A bytes long
004A97  1  A0 05                LDY     #$05            ; set string index
004A99  1               
004A99  1  F8                   SED                     ; need decimal mode for nibble convert
004A9A  1  A5 13                LDA     <nums_3         ; get lowest byte
004A9C  1  20 BA 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004A9F  1  A5 12                LDA     <nums_2         ; get middle byte
004AA1  1  20 BA 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004AA4  1  A5 11                LDA     <nums_1         ; get highest byte
004AA6  1  20 BA 4A             JSR     LAB_A2HX        ; convert A to ASCII hex byte and output
004AA9  1  D8                   CLD                     ; back to binary
004AAA  1               
004AAA  1  A2 06                LDX     #$06            ; character count
004AAC  1  A5 78                LDA     <TempB          ; get # of characters
004AAE  1  F0 A2                BEQ     EndBHS          ; branch if truncate
004AB0  1               
004AB0  1  AA                   TAX                     ; copy length to X
004AB1  1  38                   SEC                     ; set carry for add !
004AB2  1  49 FF                EOR     #$FF            ; 1's complement
004AB4  1  69 06                ADC     #$06            ; add 6d
004AB6  1  F0 C8                BEQ     GoPr2           ; if zero print whole string
004AB8  1               
004AB8  1  D0 BB                BNE     GoPr1           ; else go make output string (branch always)
004ABA  1               
004ABA  1               ; convert A to ASCII hex byte and output .. note set decimal mode before calling
004ABA  1               
004ABA  1               LAB_A2HX:
004ABA  1  AA                   TAX                     ; save byte
004ABB  1  29 0F                AND     #$0F            ; mask off top bits
004ABD  1  20 C5 4A             JSR     LAB_AL2X        ; convert low nibble to ASCII and output
004AC0  1  8A                   TXA                     ; get byte back
004AC1  1  4A                   LSR     A               ; /2	shift high nibble to low nibble
004AC2  1  4A                   LSR     A               ; /4
004AC3  1  4A                   LSR     A               ; /8
004AC4  1  4A                   LSR     A               ; /16
004AC5  1               LAB_AL2X:
004AC5  1  C9 0A                CMP     #$0A            ; set carry for +1 if >9
004AC7  1  69 30                ADC     #'0'            ; add ASCII "0"
004AC9  1  8B DA 48 A2          STAINDIRECTY str_pl     ; save to temp string
004ACD  1  01 B5 AD C9  
004AD1  1  00 D0 04 A2  
004ADF  1  88                   DEY                     ; decrement counter
004AE0  1  60                   RTS
004AE1  1               
004AE1  1               LAB_NLTO:
004AE1  1  85 AC                STA     <FAC1_e         ; save FAC1 exponent
004AE3  1  A9 00                LDA     #$00            ; clear sign compare
004AE5  1               LAB_MLTE:
004AE5  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004AE7  1  8A                   TXA                     ; restore character
004AE8  1  20 40 46             JSR     LAB_2912        ; evaluate new ASCII digit
004AEB  1               
004AEB  1               ; gets here if the first character was "$" for hex
004AEB  1               ; get hex number
004AEB  1               
004AEB  1               LAB_CHEX:
004AEB  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004AEF  1  90 0A                BCC     LAB_ISHN        ; branch if numeric character
004AF1  1               
004AF1  1  09 20                ORA     #$20            ; case convert, allow "A" to "F" and "a" to "f"
004AF3  1  E9 61                SBC     #'a'            ; subtract "a" (carry set here)
004AF5  1  C9 06                CMP     #$06            ; compare normalised with $06 (max+1)
004AF7  1  B0 2B                BCS     LAB_EXCH        ; exit if >"f" or <"0"
004AF9  1               
004AF9  1  69 0A                ADC     #$0A            ; convert to nibble
004AFB  1               LAB_ISHN:
004AFB  1  29 0F                AND     #$0F            ; convert to binary
004AFD  1  AA                   TAX                     ; save nibble
004AFE  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004B00  1  F0 E3                BEQ     LAB_MLTE        ; skip multiply if zero
004B02  1               
004B02  1  69 04                ADC     #$04            ; add four to exponent (*16 - carry clear here)
004B04  1  90 DB                BCC     LAB_NLTO        ; if no overflow do evaluate digit
004B06  1               
004B06  1               LAB_MLTO:
004B06  1  4C 63 41             JMP     LAB_2564        ; do overflow error and warm start
004B09  1               
004B09  1               LAB_NXCH:
004B09  1  AA                   TAX                     ; save bit
004B0A  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004B0C  1  F0 06                BEQ     LAB_MLBT        ; skip multiply if zero
004B0E  1               
004B0E  1  E6 AC                INC     <FAC1_e         ; increment FAC1 exponent (*2)
004B10  1  F0 F4                BEQ     LAB_MLTO        ; do overflow error if = $00
004B12  1               
004B12  1  A9 00                LDA     #$00            ; clear sign compare
004B14  1               LAB_MLBT:
004B14  1  85 B8                STA     <FAC_sc         ; save sign compare (FAC1 EOR FAC2)
004B16  1  8A                   TXA                     ; restore bit
004B17  1  20 40 46             JSR     LAB_2912        ; evaluate new ASCII digit
004B1A  1               
004B1A  1               ; gets here if the first character was  "%" for binary
004B1A  1               ; get binary number
004B1A  1               
004B1A  1               LAB_CBIN:
004B1A  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004B1E  1  49 30                EOR     #'0'            ; convert "0" to 0 etc.
004B20  1  C9 02                CMP     #$02            ; compare with max+1
004B22  1  90 E5                BCC     LAB_NXCH        ; branch exit if < 2
004B24  1               
004B24  1               LAB_EXCH:
004B24  1  4C 25 46             JMP     LAB_28F6        ; evaluate -ve flag and return
004B27  1               
004B27  1               ; ctrl-c check routine. includes limited "life" byte save for INGET routine
004B27  1               ; now also the code that checks to see if an interrupt has occurred
004B27  1               
004B27  1               CTRLC:
004B27  1  AF 00 02 00          LDA     f:ccflag        ; get [CTRL-C] check flag
004B2B  1  D0 21                BNE     LAB_FBA2        ; exit if inhibited
004B2D  1               
004B2D  1  20 84 18             JSR     V_INPT          ; scan input device
004B30  1  B0 11                BCS     LAB_FBA0        ; exit if buffer empty
004B32  1               
004B32  1  8F 01 02 00          STA     f:ccbyte        ; save received byte
004B36  1  A9 20                LDA     #$20            ; "life" timer for bytes
004B38  1  8F 02 02 00          STA     f:ccnull        ; set countdown
004B3C  1  AF 01 02 00          LDA     f:ccbyte
004B40  1  4C D0 2A             JMP     LAB_1636        ; return to BASIC
004B43  1               
004B43  1               LAB_FBA0:
004B43  1  AF 02 02 00          LDA     f:ccnull        ; get countdown byte
004B47  1  F0 05                BEQ     LAB_FBA2        ; exit if finished
004B49  1  3A                   DEC     A
004B4A  1  8F 02 02 00          STA     f:ccnull        ; else decrement countdown
004B4E  1               LAB_FBA2:
004B4E  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004B50  1  20 5D 4B             JSR     LAB_CKIN        ; go check interrupt
004B53  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004B55  1  20 5D 4B             JSR     LAB_CKIN        ; go check interrupt
004B58  1  AF 01 02 00          LDA     f:ccbyte
004B5C  1               LAB_CRTS:
004B5C  1  60                   RTS
004B5D  1               
004B5D  1               ; check whichever interrupt is indexed by X
004B5D  1               
004B5D  1               LAB_CKIN:
004B5D  1  B5 00                LDA     <PLUS_0,X       ; get interrupt flag byte
004B5F  1  10 FB                BPL     LAB_CRTS        ; branch if interrupt not enabled
004B61  1               
004B61  1               ; we disable the interrupt here and make two new commands RETIRQ and RETNMI to
004B61  1               ; automatically enable the interrupt when we exit
004B61  1               
004B61  1  0A                   ASL     A               ; move happened bit to setup bit
004B62  1  29 40                AND     #$40            ; mask happened bits
004B64  1  F0 F6                BEQ     LAB_CRTS        ; if no interrupt then exit
004B66  1               
004B66  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004B68  1               
004B68  1  8A                   TXA                     ; copy index ..
004B69  1  A8                   TAY                     ; .. to Y
004B6A  1               
004B6A  1  68                   PLA                     ; dump return address low byte, call from CTRL-C
004B6B  1  68                   PLA                     ; dump return address high byte
004B6C  1               
004B6C  1  A9 05                LDA     #$05            ; need 5 bytes for GOSUB
004B6E  1  20 8C 26             JSR     LAB_1212        ; check room on stack for A bytes
004B71  1  A5 C4                LDA     <Bpntrh         ; get BASIC execute pointer high byte
004B73  1  48                   PHA                     ; push on stack
004B74  1  A5 C3                LDA     <Bpntrl         ; get BASIC execute pointer low byte
004B76  1  48                   PHA                     ; push on stack
004B77  1  A5 88                LDA     <Clineh         ; get current line high byte
004B79  1  48                   PHA                     ; push on stack
004B7A  1  A5 87                LDA     <Clinel         ; get current line low byte
004B7C  1  48                   PHA                     ; push on stack
004B7D  1  A9 8F                LDA     #TK_GOSUB       ; token for GOSUB
004B7F  1  48                   PHA                     ; push on stack
004B80  1  DA                   PHX
004B81  1  BB                   TYX
004B82  1  B5 01                LDA     <PLUS_1,X       ; get interrupt code pointer low byte
004B84  1  85 C3                STA     <Bpntrl         ; save as BASIC execute pointer low byte
004B86  1  B5 02                LDA     <PLUS_2,X       ; get interrupt code pointer high byte
004B88  1  85 C4                STA     <Bpntrh         ; save as BASIC execute pointer high byte
004B8A  1  FA                   PLX
004B8B  1  4C 72 2A             JMP     LAB_15C2        ; go do interpreter inner loop
004B8E  1               ; can't RTS, we used the stack! the RTS from the ctrl-c
004B8E  1               ; check will be taken when the RETIRQ/RETNMI/RETURN is
004B8E  1               ; executed at the end of the subroutine
004B8E  1               
004B8E  1               ; get byte from input device, no waiting
004B8E  1               ; returns with carry set if byte in A
004B8E  1               
004B8E  1               INGET:
004B8E  1  20 84 18             JSR     V_INPT          ; call scan input device
004B91  1  90 0B                BCC     LAB_FB95        ; if byte go reset timer
004B93  1               
004B93  1  AF 02 02 00          LDA     f:ccnull        ; get countdown
004B97  1  F0 0F                BEQ     LAB_FB96        ; exit if empty
004B99  1               
004B99  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004B9D  1  38                   SEC                     ; flag we got a byte
004B9E  1               LAB_FB95:
004B9E  1  A9 00                LDA     #$00            ; clear X
004BA0  1  8F 02 02 00          STA     f:ccnull        ; clear timer because we got a byte
004BA4  1  AF 01 02 00          LDA     f:ccbyte        ; get last received byte
004BA8  1               LAB_FB96:
004BA8  1  60                   RTS
004BA9  1               
004BA9  1               ; these routines only enable the interrupts if the set-up flag is set
004BA9  1               ; if not they have no effect
004BA9  1               
004BA9  1               ; perform IRQ {ON|OFF|CLEAR}
004BA9  1               
004BA9  1               LAB_IRQ:
004BA9  1  A2 E8                LDX     #<IrqBase       ; set pointer to IRQ values
004BAB  1  2C                   .BYTE   $2C             ; make next line BIT abs.
004BAC  1               
004BAC  1               ; perform NMI {ON|OFF|CLEAR}
004BAC  1               
004BAC  1               LAB_NMI:
004BAC  1  A2 E5                LDX     #<NmiBase       ; set pointer to NMI values
004BAE  1  C9 93                CMP     #TK_ON          ; compare with token for ON
004BB0  1  F0 11                BEQ     LAB_INON        ; go turn on interrupt
004BB2  1               
004BB2  1  C9 C6                CMP     #TK_OFF         ; compare with token for OFF
004BB4  1  F0 07                BEQ     LAB_IOFF        ; go turn off interrupt
004BB6  1               
004BB6  1  49 A1                EOR     #TK_CLEAR       ; compare with token for CLEAR, A = $00 if = TK_CLEAR
004BB8  1  F0 0E                BEQ     LAB_INEX        ; go clear interrupt flags and return
004BBA  1               
004BBA  1  4C 19 33             JMP     LAB_SNER        ; do syntax error then warm start
004BBD  1               
004BBD  1               LAB_IOFF:
004BBD  1  A9 7F                LDA     #$7F            ; clear A
004BBF  1  35 00                AND     <PLUS_0,X       ; AND with interrupt setup flag
004BC1  1  10 05                BPL     LAB_INEX        ; go clear interrupt enabled flag and return
004BC3  1               
004BC3  1               LAB_INON:
004BC3  1  B5 00                LDA     <PLUS_0,X       ; get interrupt setup flag
004BC5  1  0A                   ASL     A               ; Shift bit to enabled flag
004BC6  1  15 00                ORA     <PLUS_0,X       ; OR with flag byte
004BC8  1               LAB_INEX:
004BC8  1  95 00                STA     <PLUS_0,X       ; save interrupt flag byte
004BCA  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer and return
004BCE  1  60                   RTS
004BCF  1               ; these routines set up the pointers and flags for the interrupt routines
004BCF  1               ; note that the interrupts are also enabled by these commands
004BCF  1               
004BCF  1               
004BCF  1               ; MAX() MIN() pre process
004BCF  1               
004BCF  1               LAB_MMPP:
004BCF  1  20 FB 31             JSR     LAB_EVEZ        ; process expression
004BD2  1  4C E2 31             JMP     LAB_CTNM        ; check if source is numeric, else do type mismatch
004BD5  1               
004BD5  1               ; perform MAX()
004BD5  1               
004BD5  1               LAB_MAX:
004BD5  1  20 05 4C             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004BD8  1               ; pull FAC2 and compare with FAC1
004BD8  1  10 FB                BPL     LAB_MAX         ; branch if no swap to do
004BDA  1               
004BDA  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004BDC  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004BDE  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004BE0  1  20 5D 40             JSR     LAB_279B        ; copy FAC2 to FAC1
004BE3  1  F0 F0                BEQ     LAB_MAX         ; go do next (branch always)
004BE5  1               
004BE5  1               ; perform MIN()
004BE5  1               
004BE5  1               LAB_MIN:
004BE5  1  20 05 4C             JSR     LAB_PHFA        ; push FAC1, evaluate expression,
004BE8  1               ; pull FAC2 and compare with FAC1
004BE8  1  30 FB                BMI     LAB_MIN         ; branch if no swap to do
004BEA  1               
004BEA  1  F0 F9                BEQ     LAB_MIN         ; branch if no swap to do
004BEC  1               
004BEC  1  A5 B4                LDA     <FAC2_1         ; get FAC2 mantissa1
004BEE  1  09 80                ORA     #$80            ; set top bit (clear sign from compare)
004BF0  1  85 B4                STA     <FAC2_1         ; save FAC2 mantissa1
004BF2  1  20 5D 40             JSR     LAB_279B        ; copy FAC2 to FAC1
004BF5  1  F0 EE                BEQ     LAB_MIN         ; go do next (branch always)
004BF7  1               
004BF7  1               ; exit routine. don't bother returning to the loop code
004BF7  1               ; check for correct exit, else so syntax error
004BF7  1               
004BF7  1               LAB_MMEC:
004BF7  1  C9 29                CMP     #')'            ; is it end of function?
004BF9  1  D0 07                BNE     LAB_MMSE        ; if not do MAX MIN syntax error
004BFB  1               
004BFB  1  68                   PLA                     ; dump return address low byte
004BFC  1  68                   PLA                     ; dump return address high byte
004BFD  1  22 BC 00 00          JSL     LAB_IGBY        ; update BASIC execute pointer (to chr past ")")
004C01  1  60                   RTS
004C02  1               LAB_MMSE:
004C02  1  4C 19 33             JMP     LAB_SNER        ; do syntax error then warm start
004C05  1               
004C05  1               ; check for next, evaluate and return or exit
004C05  1               ; this is the routine that does most of the work
004C05  1               
004C05  1               LAB_PHFA:
004C05  1  22 C2 00 00          JSL     LAB_GBYT        ; get next BASIC byte
004C09  1  C9 2C                CMP     #','            ; is there more ?
004C0B  1  D0 EA                BNE     LAB_MMEC        ; if not go do end check
004C0D  1               
004C0D  1               ; push FAC1
004C0D  1  20 69 44             JSR     LAB_27BA        ; round FAC1
004C10  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004C12  1  09 7F                ORA     #$7F            ; set all non sign bits
004C14  1  25 AD                AND     <FAC1_1         ; AND FAC1 mantissa1 (AND in sign bit)
004C16  1  48                   PHA                     ; push on stack
004C17  1  A5 AE                LDA     <FAC1_2         ; get FAC1 mantissa2
004C19  1  48                   PHA                     ; push on stack
004C1A  1  A5 AF                LDA     <FAC1_3         ; get FAC1 mantissa3
004C1C  1  48                   PHA                     ; push on stack
004C1D  1  A5 AC                LDA     <FAC1_e         ; get FAC1 exponent
004C1F  1  48                   PHA                     ; push on stack
004C20  1               
004C20  1  22 BC 00 00          JSL     LAB_IGBY        ; scan and get next BASIC byte (after ",")
004C24  1  20 DF 31             JSR     LAB_EVNM        ; evaluate expression and check is numeric,
004C27  1               ; else do type mismatch
004C27  1               
004C27  1               ; pop FAC2 (MAX/MIN expression so far)
004C27  1  68                   PLA                     ; pop exponent
004C28  1  85 B3                STA     <FAC2_e         ; save FAC2 exponent
004C2A  1  68                   PLA                     ; pop mantissa3
004C2B  1  85 B6                STA     <FAC2_3         ; save FAC2 mantissa3
004C2D  1  68                   PLA                     ; pop mantissa1
004C2E  1  85 B5                STA     <FAC2_2         ; save FAC2 mantissa2
004C30  1  68                   PLA                     ; pop sign/mantissa1
004C31  1  85 B4                STA     <FAC2_1         ; save FAC2 sign/mantissa1
004C33  1  85 B7                STA     <FAC2_s         ; save FAC2 sign
004C35  1               
004C35  1               ; compare FAC1 with (packed) FAC2
004C35  1  A9 B3                LDA     #<FAC2_e        ; set pointer low byte to FAC2
004C37  1  A0 00                LDY     #>FAC2_e        ; set pointer high byte to FAC2
004C39  1  4C A7 44             JMP     LAB_27F8        ; compare FAC1 with FAC2 (AY) and return
004C3C  1               ; returns A=$00 if FAC1 = (AY)
004C3C  1               ; returns A=$01 if FAC1 > (AY)
004C3C  1               ; returns A=$FF if FAC1 < (AY)
004C3C  1               
004C3C  1               ; perform WIDTH
004C3C  1               
004C3C  1               LAB_WDTH:
004C3C  1  C9 2C                CMP     #','            ; is next byte ","
004C3E  1  F0 1C                BEQ     LAB_TBSZ        ; if so do tab size
004C40  1               
004C40  1  20 8F 3E             JSR     LAB_GTBY        ; get byte parameter
004C43  1  8A                   TXA                     ; copy width to A
004C44  1  F0 0A                BEQ     LAB_NSTT        ; branch if set for infinite line
004C46  1               
004C46  1  E0 10                CPX     #$10            ; else make min width = 16d
004C48  1  90 46                BCC     TabErr          ; if less do function call error and exit
004C4A  1               
004C4A  1               ; this next compare ensures that we can't exit WIDTH via an error leaving the
004C4A  1               ; tab size greater than the line length.
004C4A  1               
004C4A  1  E4 64                CPX     <TabSiz         ; compare with tab size
004C4C  1  B0 02                BCS     LAB_NSTT        ; branch if >= tab size
004C4E  1               
004C4E  1  86 64                STX     <TabSiz         ; else make tab size = terminal width
004C50  1               LAB_NSTT:
004C50  1  86 0F                STX     <TWidth         ; set the terminal width
004C52  1  22 C2 00 00          JSL     LAB_GBYT        ; get BASIC byte back
004C56  1  F0 1A                BEQ     WExit           ; exit if no following
004C58  1               
004C58  1  C9 2C                CMP     #','            ; else is it ","
004C5A  1  D0 A6                BNE     LAB_MMSE        ; if not do syntax error
004C5C  1               
004C5C  1               LAB_TBSZ:
004C5C  1  20 8B 3E             JSR     LAB_SGBY        ; scan and get byte parameter
004C5F  1  8A                   TXA                     ; copy TAB size
004C60  1  30 2E                BMI     TabErr          ; if >127 do function call error and exit
004C62  1               
004C62  1  E0 01                CPX     #$01            ; compare with min-1
004C64  1  90 2A                BCC     TabErr          ; if <=1 do function call error and exit
004C66  1               
004C66  1  A5 0F                LDA     <TWidth         ; set flags for width
004C68  1  F0 06                BEQ     LAB_SVTB        ; skip check if infinite line
004C6A  1               
004C6A  1  E4 0F                CPX     <TWidth         ; compare TAB with width
004C6C  1  F0 02                BEQ     LAB_SVTB        ; ok if =
004C6E  1               
004C6E  1  B0 20                BCS     TabErr          ; branch if too big
004C70  1               
004C70  1               LAB_SVTB:
004C70  1  86 64                STX     <TabSiz         ; save TAB size
004C72  1               
004C72  1               ; calculate tab column limit from TAB size. The <Iclim is set to the last tab
004C72  1               ; position on a line that still has at least one whole tab width between it
004C72  1               ; and the end of the line.
004C72  1               
004C72  1               WExit:
004C72  1  A5 0F                LDA     <TWidth         ; get width
004C74  1  F0 06                BEQ     LAB_SULP        ; branch if infinite line
004C76  1               
004C76  1  C5 64                CMP     <TabSiz         ; compare with tab size
004C78  1  B0 03                BCS     LAB_WDLP        ; branch if >= tab size
004C7A  1               
004C7A  1  85 64                STA     <TabSiz         ; else make tab size = terminal width
004C7C  1               LAB_SULP:
004C7C  1  38                   SEC                     ; set carry for subtract
004C7D  1               LAB_WDLP:
004C7D  1  E5 64                SBC     <TabSiz         ; subtract tab size
004C7F  1  B0 FC                BCS     LAB_WDLP        ; loop while no borrow
004C81  1               
004C81  1  65 64                ADC     <TabSiz         ; add tab size back
004C83  1  18                   CLC                     ; clear carry for add
004C84  1  65 64                ADC     <TabSiz         ; add tab size back again
004C86  1  85 10                STA     <Iclim          ; save for now
004C88  1  A5 0F                LDA     <TWidth         ; get width back
004C8A  1  38                   SEC                     ; set carry for subtract
004C8B  1  E5 10                SBC     <Iclim          ; subtract remainder
004C8D  1  85 10                STA     <Iclim          ; save tab column limit
004C8F  1               LAB_NOSQ:
004C8F  1  60                   RTS
004C90  1               
004C90  1               TabErr:
004C90  1  4C 78 36             JMP     LAB_FCER        ; do function call error then warm start
004C93  1               
004C93  1               ; perform SQR()
004C93  1               
004C93  1               LAB_SQR:
004C93  1  A5 B0                LDA     <FAC1_s         ; get FAC1 sign
004C95  1  30 F9                BMI     TabErr          ; if -ve do function call error
004C97  1               
004C97  1  A5 AC                LDA     <FAC1_e         ; get exponent
004C99  1  F0 F4                BEQ     LAB_NOSQ        ; if zero just return
004C9B  1               
004C9B  1               ; else do root
004C9B  1  20 5A 44             JSR     LAB_27AB        ; round and copy FAC1 to FAC2
004C9E  1  A9 00                LDA     #$00            ; clear A
004CA0  1               
004CA0  1  85 77                STA     <FACt_3         ; clear remainder
004CA2  1  85 76                STA     <FACt_2         ; ..
004CA4  1  85 75                STA     <FACt_1         ; ..
004CA6  1  85 78                STA     <TempB          ; ..
004CA8  1               
004CA8  1  85 AF                STA     <FAC1_3         ; clear root
004CAA  1  85 AE                STA     <FAC1_2         ; ..
004CAC  1  85 AD                STA     <FAC1_1         ; ..
004CAE  1               
004CAE  1  A2 18                LDX     #$18            ; 24 pairs of bits to do
004CB0  1  A5 B3                LDA     <FAC2_e         ; get exponent
004CB2  1  4A                   LSR     A               ; check odd/even
004CB3  1  B0 0E                BCS     LAB_SQE2        ; if odd only 1 shift first time
004CB5  1               
004CB5  1               LAB_SQE1:
004CB5  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004CB7  1  26 B5                ROL     <FAC2_2         ; ..
004CB9  1  26 B4                ROL     <FAC2_1         ; ..
004CBB  1  26 77                ROL     <FACt_3         ; .. into remainder
004CBD  1  26 76                ROL     <FACt_2         ; ..
004CBF  1  26 75                ROL     <FACt_1         ; ..
004CC1  1  26 78                ROL     <TempB          ; .. never overflows
004CC3  1               LAB_SQE2:
004CC3  1  06 B6                ASL     <FAC2_3         ; shift highest bit of number ..
004CC5  1  26 B5                ROL     <FAC2_2         ; ..
004CC7  1  26 B4                ROL     <FAC2_1         ; ..
004CC9  1  26 77                ROL     <FACt_3         ; .. into remainder
004CCB  1  26 76                ROL     <FACt_2         ; ..
004CCD  1  26 75                ROL     <FACt_1         ; ..
004CCF  1  26 78                ROL     <TempB          ; .. never overflows
004CD1  1               
004CD1  1  06 AF                ASL     <FAC1_3         ; root = root * 2
004CD3  1  26 AE                ROL     <FAC1_2         ; ..
004CD5  1  26 AD                ROL     <FAC1_1         ; .. never overflows
004CD7  1               
004CD7  1  A5 AF                LDA     <FAC1_3         ; get root low byte
004CD9  1  2A                   ROL     A               ; *2
004CDA  1  85 5B                STA     <Temp3          ; save partial low byte
004CDC  1  A5 AE                LDA     <FAC1_2         ; get root low mid byte
004CDE  1  2A                   ROL     A               ; *2
004CDF  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004CE1  1  A5 AD                LDA     <FAC1_1         ; get root high mid byte
004CE3  1  2A                   ROL     A               ; *2
004CE4  1  85 5D                STA     <Temp3+2        ; save partial high mid byte
004CE6  1  A9 00                LDA     #$00            ; get root high byte (always $00)
004CE8  1  2A                   ROL     A               ; *2
004CE9  1  85 5E                STA     <Temp3+3        ; save partial high byte
004CEB  1               
004CEB  1               ; carry clear for subtract +1
004CEB  1  A5 77                LDA     <FACt_3         ; get remainder low byte
004CED  1  E5 5B                SBC     <Temp3          ; subtract partial low byte
004CEF  1  85 5B                STA     <Temp3          ; save partial low byte
004CF1  1               
004CF1  1  A5 76                LDA     <FACt_2         ; get remainder low mid byte
004CF3  1  E5 5C                SBC     <Temp3+1        ; subtract partial low mid byte
004CF5  1  85 5C                STA     <Temp3+1        ; save partial low mid byte
004CF7  1               
004CF7  1  A5 75                LDA     <FACt_1         ; get remainder high mid byte
004CF9  1  E5 5D                SBC     <Temp3+2        ; subtract partial high mid byte
004CFB  1  A8                   TAY                     ; copy partial high mid byte
004CFC  1               
004CFC  1  A5 78                LDA     <TempB          ; get remainder high byte
004CFE  1  E5 5E                SBC     <Temp3+3        ; subtract partial high byte
004D00  1  90 0E                BCC     LAB_SQNS        ; skip sub if remainder smaller
004D02  1               
004D02  1  85 78                STA     <TempB          ; save remainder high byte
004D04  1               
004D04  1  84 75                STY     <FACt_1         ; save remainder high mid byte
004D06  1               
004D06  1  A5 5C                LDA     <Temp3+1        ; get remainder low mid byte
004D08  1  85 76                STA     <FACt_2         ; save remainder low mid byte
004D0A  1               
004D0A  1  A5 5B                LDA     <Temp3          ; get partial low byte
004D0C  1  85 77                STA     <FACt_3         ; save remainder low byte
004D0E  1               
004D0E  1  E6 AF                INC     <FAC1_3         ; increment root low byte (never any rollover)
004D10  1               LAB_SQNS:
004D10  1  CA                   DEX                     ; decrement bit pair count
004D11  1  D0 A2                BNE     LAB_SQE1        ; loop if not all done
004D13  1               LAB_SQNSA:
004D13  1  38                   SEC                     ; set carry for subtract
004D14  1  A5 B3                LDA     <FAC2_e         ; get exponent
004D16  1  E9 80                SBC     #$80            ; normalise
004D18  1  6A                   ROR     A               ; /2 and re-bias to $80
004D19  1  69 00                ADC     #$00            ; add bit zero back in (allow for half shift)
004D1B  1  85 AC                STA     <FAC1_e         ; save it
004D1D  1  4C D4 40             JMP     LAB_24D5        ; normalise FAC1 and return
004D20  1               
004D20  1               ; perform VARPTR()
004D20  1               
004D20  1               LAB_VARPTR:
004D20  1  22 BC 00 00          JSL     LAB_IGBY        ; increment and scan memory
004D24  1  20 F0 34             JSR     LAB_GVAR        ; get var address
004D27  1  20 04 33             JSR     LAB_1BFB        ; scan for ")" , else do syntax error then warm start
004D2A  1  A4 95                LDY     <Cvaral         ; get var address low byte
004D2C  1  A5 96                LDA     <Cvarah         ; get var address high byte
004D2E  1  4C AE 37             JMP     LAB_AYFC        ; save and convert integer AY to FAC1 and return
004D31  1               
004D31  1               ; perform PI
004D31  1               
004D31  1               LAB_PI:
004D31  1  A9 38                LDA     #<LAB_2C7C      ; set (2*pi) pointer low byte
004D33  1  A0 18                LDY     #>LAB_2C7C      ; set (2*pi) pointer high byte
004D35  1  20 6D 43             JSR     LAB_UFAC        ; unpack memory (AY) into FAC1
004D38  1  C6 AC                DEC     <FAC1_e         ; make result = PI
004D3A  1  60                   RTS
004D3B  1               
004D3B  1               
004D3B  1               
004D3B  1               
004D3B  1               
004D3B  1               AA_end_basic:
004D3B  1               ENDOFBASIC:
004D3B  1  44 45 52 49          .BYTE   "DERIVED FROM ehBASIC"
004D3F  1  56 45 44 20  
004D43  1  46 52 4F 4D  
004D4F  1               
004D4F  1               
004D4F  1               
004D4F  1               
004D4F  1                       .END

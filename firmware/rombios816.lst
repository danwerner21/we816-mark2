ca65 V2.18 - Ubuntu 2.19-1
Main file   : rombios816.asm
Current file: rombios816.asm

000000r 1               .P816
000000r 1               ;__ROMBIOS816_______________________________________________________________________________________
000000r 1               ;
000000r 1               ;	ROM BIOS FOR THE RBC 65c816 SBC - NATIVE MODE
000000r 1               ;
000000r 1               ;	WRITTEN BY: DAN WERNER -- 10/7/2017
000000r 1               ;   Modified 8/10/2024 for WE816-MARK2
000000r 1               ;
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ;
000000r 1               ; DATA CONSTANTS
000000r 1               ;__________________________________________________________________________________________________
000000r 1               
000000r 1                       .SEGMENT "ROM"
000000r 1               
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ; $8000-$8007 UART 16C550
000000r 1               ;__________________________________________________________________________________________________
000000r 1               UART0           = $FE00         ;   DATA IN/OUT
000000r 1               UART1           = $FE01         ;   CHECK RX
000000r 1               UART2           = $FE02         ;   INTERRUPTS
000000r 1               UART3           = $FE03         ;   LINE CONTROL
000000r 1               UART4           = $FE04         ;   MODEM CONTROL
000000r 1               UART5           = $FE05         ;   LINE STATUS
000000r 1               UART6           = $FE06         ;   MODEM STATUS
000000r 1               
000000r 1               RTC             = $FE08         ;   RTC REG.
000000r 1               
000000r 1               via1regb        = $FE10         ; Register
000000r 1               via1rega        = $FE11         ; Register
000000r 1               via1ddrb        = $FE12         ; Register
000000r 1               via1ddra        = $FE13         ; Register
000000r 1               via1t1cl        = $FE14         ; Register
000000r 1               via1t1ch        = $FE15         ; Register
000000r 1               via1t1ll        = $FE16         ; Register
000000r 1               via1t1lh        = $FE17         ; Register
000000r 1               via1t2cl        = $FE18         ; Register
000000r 1               via1t2ch        = $FE19         ; Register
000000r 1               via1sr          = $FE1A         ; Register
000000r 1               via1acr         = $FE1B         ; Register
000000r 1               via1pcr         = $FE1C         ; Register
000000r 1               via1ifr         = $FE1D         ; Register
000000r 1               via1ier         = $FE1E         ; Register
000000r 1               via1ora         = $FE1F         ; Register
000000r 1               
000000r 1               
000000r 1               
000000r 1               via2regb        = $FE20         ; Register
000000r 1               via2rega        = $FE21         ; Register
000000r 1               via2ddrb        = $FE22         ; Register
000000r 1               via2ddra        = $FE23         ; Register
000000r 1               via2t1cl        = $FE24         ; Register
000000r 1               via2t1ch        = $FE25         ; Register
000000r 1               via2t1ll        = $FE26         ; Register
000000r 1               via2t1lh        = $FE27         ; Register
000000r 1               via2t2cl        = $FE28         ; Register
000000r 1               via2t2ch        = $FE29         ; Register
000000r 1               via2sr          = $FE2A         ; Register
000000r 1               via2acr         = $FE2B         ; Register
000000r 1               via2pcr         = $FE2C         ; Register
000000r 1               via2ifr         = $FE2D         ; Register
000000r 1               via2ier         = $FE2E         ; Register
000000r 1               via2ora         = $FE2F         ; Register
000000r 1               
000000r 1               
000000r 1               STACK           = $DFFF         ;   POINTER TO TOP OF STACK
000000r 1               
000000r 1               ;
000000r 1               KEYBUFF         = $0200         ; 256 BYTE KEYBOARD BUFFER
000000r 1               ; NATIVE VECTORS
000000r 1               ICOPVECTOR      = $0300         ;COP handler indirect vector...
000000r 1               IBRKVECTOR      = $0302         ;BRK handler indirect vector...
000000r 1               IABTVECTOR      = $0304         ;ABT handler indirect vector...
000000r 1               INMIVECTOR      = $0306         ;NMI handler indirect vector...
000000r 1               IIRQVECTOR      = $0308         ;IRQ handler indirect vector...
000000r 1               ; 6502 Emulation Vectors
000000r 1               IECOPVECTOR     = $030A         ;ECOP handler indirect vector...
000000r 1               IEABTVECTOR     = $030C         ;EABT handler indirect vector...
000000r 1               IENMIVECTOR     = $030E         ;ENMI handler indirect vector...
000000r 1               IEINTVECTOR     = $0310         ;EINT handler indirect vector...
000000r 1               
000000r 1               ;;; These are as yet unused
000000r 1               ;------------------------------------------------------------------------------
000000r 1               IECDCF          = $0312         ; Serial output: deferred char flag
000000r 1               IECDC           = $0313         ; Serial deferred character
000000r 1               IECBCI          = $0314         ; Serial bit count/EOI flag
000000r 1               IECBTC          = $0315         ; Countdown, bit count
000000r 1               IECCYC          = $0316         ; Cycle count
000000r 1               IECSTW          = $0317         ; Status word
000000r 1               IECFNLN         = $0318         ; File Name Length
000000r 1               IECSECAD        = $0319         ; IEC Secondary Address
000000r 1               IECBUFFL        = $031A         ; low byte IEC buffer Pointer
000000r 1               IECBUFFH        = $031B         ; High byte IEC buffer Pointer
000000r 1               IECDEVN         = $031C         ; IEC Device Number
000000r 1               IECSTRTL        = $031D         ; low byte IEC Start Address Pointer
000000r 1               IECSTRTH        = $031E         ; High byte IEC Start Address Pointer
000000r 1               IECMSGM         = $031F         ; message mode flag,
000000r 1               ; $C0 = both control and kernal messages,
000000r 1               ; $80 = control messages only,
000000r 1               ; $40 = kernal messages only,
000000r 1               ; $00 = neither control or kernal messages
000000r 1               IECFNPL         = $0320         ; File Name Pointer Low,
000000r 1               IECFNPH         = $0321         ; File Name Pointer High,
000000r 1               LOADBUFL        = $0322         ; low byte IEC buffer Pointer
000000r 1               LOADBUFH        = $0323         ; High byte IEC buffer Pointer
000000r 1               LOADBANK        = $0324         ; BANK buffer Pointer
000000r 1               IECOPENF        = $0325         ; OPEN FILE COUNT
000000r 1               IECLFN          = $0326         ; IEC LOGICAL FILE NUMBER
000000r 1               IECIDN          = $0327         ; input device number
000000r 1               IECODN          = $0328         ; output device number
000000r 1               ;------------------------------------------------------------------------------
000000r 1               
000000r 1               ; VIDEO/KEYBOARD PARAMETER AREA
000000r 1               
000000r 1               CSRX            = $0330         ; CURRENT X POSITION
000000r 1               CSRY            = $0331         ; CURRENT Y POSITION
000000r 1               LEDS            = $0332
000000r 1               KeyLock         = $0333
000000r 1               ScannedKey      = $0334
000000r 1               ScrollCount     = $0335         ;
000000r 1               TEMP            = $0336         ; TEMP AREA
000000r 1               
000000r 1               ConsoleDevice   = $0341         ; Current Console Device
000000r 1                                               ; $00 Serial, $01 On-Board 9918/KB
000000r 1               CSRCHAR         = $0342         ; Character under the Cursor
000000r 1               VIDEOWIDTH      = $0343         ; SCREEN WIDTH -- 32 or 40 (80 in the future)
000000r 1               DEFAULT_COLOR   = $0344         ; DEFAULT COLOR FOR PRINTING
000000r 1               
000000r 1               ; Tables
000000r 1               PTRLFT          = $03B0         ; .. to $03B9 logical file table
000000r 1               PTRDNT          = $03BA         ; .. to $03C3 device number table
000000r 1               PTRSAT          = $03C4         ; .. to $03CD secondary address table
000000r 1               LINEFLGS        = $03D0         ; 24 BYTES OF LINE POINTERS (3D0 - 3E9 , one extra for scrolling)
000000r 1               
000000r 1               
000000r 1               TRUE            = 1
000000r 1               FALSE           = 0
000000r 1               
000000r 1               KBD_DELAY       = 64            ; keyboard delay in MS.   Set higher if keys bounce, set lower if keyboard feels slow
000000r 1               
000000r 1                       .INCLUDE "macros.asm"
000000r 2               ;___________________________________________________________________________________________________
000000r 2               ;
000000r 2               ;	USEFUL 65186 MACROS
000000r 2               ;__________________________________________________________________________________________________
000000r 2               
000000r 2               .macro       STORECONTEXT             ; Store Complete Context at the beginning of a Sub
000000r 2                       PHX
000000r 2                       phy
000000r 2                       pha
000000r 2                       php
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       RESTORECONTEXT                 ; Restore Complete Context at the end of a Sub
000000r 2                       plp
000000r 2                       pla
000000r 2                       ply
000000r 2                       plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       INDEX16                         ; Set 16bit Index Registers
000000r 2               		REP #$10 		; 16 bit Index registers
000000r 2               		.I16
000000r 2               .endmacro
000000r 2               .macro       INDEX8                          ; Set 8bit Index Registers
000000r 2               		SEP #$10 		; 8 bit Index registers
000000r 2               		.I8
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       ACCUMULATOR16                  ; Set 16bit Index Registers
000000r 2               		REP #$20 		; 16 bit Index registers
000000r 2               		.A16
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       ACCUMULATOR8                   ; Set 8bit Index Registers
000000r 2               		SEP #$20 		; 8 bit Index registers
000000r 2               		.A8
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       ACCUMULATORINDEX16             ; Set 16bit Index Registers
000000r 2               		REP #$30 		; 16 bit Index registers
000000r 2               		.A16
000000r 2                               .I16
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       ACCUMULATORINDEX8              ; Set 8bit Index Registers
000000r 2               		SEP #$30 		; 8 bit Index registers
000000r 2               		.A8
000000r 2                               .I8
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       LBEQ PARM1
000000r 2                    bne *+5
000000r 2                    jmp PARM1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       LBNE PARM1
000000r 2                    beq *+5
000000r 2                    jmp PARM1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       LBCC PARM1
000000r 2                    bcc *+4
000000r 2                    bra *+5
000000r 2                    jmp PARM1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       LBCS PARM1
000000r 2                    bcs *+4
000000r 2                    bra *+5
000000r 2                    jmp PARM1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       SETBANK PARM1
000000r 2                   PHX
000000r 2               	LDX #PARM1
000000r 2               	PHX
000000r 2               	PLB
000000r 2                   PLX
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               ; CHOOSE ONE CONSOLE IO DEVICE
000000r 1               
000000r 1                       .ORG    $E000
00E000  1               
00E000  1               ;__COLD_START___________________________________________________
00E000  1               ;
00E000  1               ; PERFORM SYSTEM COLD INIT
00E000  1               ;
00E000  1               ;_______________________________________________________________
00E000  1               COLD_START:
00E000  1  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
00E001  1               
00E001  1  18                   CLC                     ;
00E002  1  FB                   XCE                     ; SET NATIVE MODE
00E003  1  C2 30                ACCUMULATORINDEX16
00E005  1  A9 FF DF             LDA     #STACK          ; get the stack address
00E008  1  1B                   TCS                     ; and set the stack to it
00E009  1               
00E009  1  A9 FB F1             LDA     #INTRETURN      ;
00E00C  1  8D 00 03             STA     ICOPVECTOR
00E00F  1  8D 02 03             STA     IBRKVECTOR
00E012  1  8D 04 03             STA     IABTVECTOR
00E015  1  8D 06 03             STA     INMIVECTOR
00E018  1  8D 08 03             STA     IIRQVECTOR
00E01B  1  8D 0A 03             STA     IECOPVECTOR
00E01E  1  8D 0C 03             STA     IEABTVECTOR
00E021  1  8D 0E 03             STA     IENMIVECTOR
00E024  1  8D 10 03             STA     IEINTVECTOR
00E027  1               
00E027  1  E2 30                ACCUMULATORINDEX8
00E029  1  20 FD F1             JSR     CONSOLE_INIT    ; Init UART
00E02C  1               ;       JSR     INITIEC        ; Init IEC port
00E02C  1               ;       JSR     BATEST         ; Perform Basic Assurance Test
00E02C  1               
00E02C  1               ;       JML     $FF1000         ; START BASIC
00E02C  1  4C 4E E0             JMP     mon
00E02F  1               
00E02F  1               
00E02F  1               RCOPVECTOR:
00E02F  1  6C 00 03             JMP     (ICOPVECTOR)
00E032  1               RBRKVECTOR:
00E032  1  6C 02 03             JMP     (IBRKVECTOR)
00E035  1               RABTVECTOR:
00E035  1  6C 04 03             JMP     (IABTVECTOR)
00E038  1               RNMIVECTOR:
00E038  1  6C 06 03             JMP     (INMIVECTOR)
00E03B  1               RIRQVECTOR:
00E03B  1  6C 08 03             JMP     (IIRQVECTOR)
00E03E  1               RECOPVECTOR:
00E03E  1  6C 0A 03             JMP     (IECOPVECTOR)
00E041  1               REABTVECTOR:
00E041  1  6C 0C 03             JMP     (IEABTVECTOR)
00E044  1               RENMIVECTOR:
00E044  1  6C 0E 03             JMP     (IENMIVECTOR)
00E047  1               REINTVECTOR:
00E047  1  6C 10 03             JMP     (IEINTVECTOR)
00E04A  1               
00E04A  1                       .INCLUDE "supermon816.asm"
00E04A  2               ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
00E04A  2               ;* ------------------------------------------------------------------------------- *
00E04A  2               ;*      Copyright ©1991-2014 by BCS Technology Limited.  All rights reserved.      *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* Permission is hereby granted to use, copy, modify and distribute this software, *
00E04A  2               ;* provided this copyright notice remains in the source code and  proper  attribu- *
00E04A  2               ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
00E04A  2               ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
00E04A  2               ;* incorporated into any package intended for sale,  unless written permission has *
00E04A  2               ;* been given by the copyright holder.                                             *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
00E04A  2               ;* in connection with the incorporation of this software into any system.          *
00E04A  2               ;* ------------------------------------------------------------------------------- *
00E04A  2               ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *
00E04A  2               ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
00E04A  2               ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
00E04A  2               ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
00E04A  2               ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
00E04A  2               ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
00E04A  2               ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
00E04A  2               ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
00E04A  2               ;* mode 65C816 code & was developed from a blank canvas.                           *
00E04A  2               ;* ------------------------------------------------------------------------------- *
00E04A  2               ;* Supermon 816 is a full featured monitor and supports the following operations:  *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     A - Assemble code                                                           *
00E04A  2               ;*     C - Compare memory regions                                                  *
00E04A  2               ;*     D - Disassemble code                                                        *
00E04A  2               ;*     F - Fill memory region (cannot span banks)                                  *
00E04A  2               ;*     G - Execute code (stops at BRK)                                             *
00E04A  2               ;*     H - Search (hunt) memory region                                             *
00E04A  2               ;*     J - Execute code as a subroutine (stops at BRK or RTS)                      *
00E04A  2               ;*     M - Dump & display memory range                                             *
00E04A  2               ;*     R - Dump & display 65C816 registers                                         *
00E04A  2               ;*     T - Copy (transfer) memory region                                           *
00E04A  2               ;*     X - Exit Supermon 816 & return to operating environment                     *
00E04A  2               ;*     > - Modify up to 32 bytes of memory                                         *
00E04A  2               ;*     ; - Modify 65C816 registers                                                 *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* Supermon 816 accepts binary (%), octal (%), decimal (+) and hexadecimal ($) as  *
00E04A  2               ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
00E04A  2               ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     h 042000 042FFF 'BCS Technology Limited                                     *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* If no radix symbol is entered hex is assumed.                                   *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* Numeric conversion is also available.  For example, typing:                     *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     +1234567 <CR>                                                               *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* will display:                                                                   *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*         $12D687                                                                 *
00E04A  2               ;*         +1234567                                                                *
00E04A  2               ;*         %04553207                                                               *
00E04A  2               ;*         %100101101011010000111                                                  *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* In the above example, <CR> means the console keyboard's return or enter key.    *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
00E04A  2               ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
00E04A  2               ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
00E04A  2               ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     a 1f2000 lda !#4                                                            *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* The above will assemble as:                                                     *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* Entering:                                                                       *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     a 1f2000 ldx !#+157                                                         *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* will assemble as:                                                               *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* Absent the ! in the operand field, the above would have been assembled as:      *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     A 1F2000  A2 9D        LDX #$9D                                             *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
00E04A  2               ;* is implied.                                                                     *
00E04A  2               ;* ------------------------------------------------------------------------------- *
00E04A  2               ;* A Note on the PEA & PEI Instructions                                            *
00E04A  2               ;* ------------------------------------                                            *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
00E04A  2               ;* and PEI instructions:                                                           *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     PEA <operand>                                                               *
00E04A  2               ;*     PEI (<operand>)                                                             *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* The WDC data sheet that was published at the time of the 65C816's release in    *
00E04A  2               ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
00E04A  2               ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
00E04A  2               ;* other immediate mode instruction, in that the operand is the data (however, PEA *
00E04A  2               ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
00E04A  2               ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
00E04A  2               ;* (zero) page instruction, again without affecting the status register.           *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
00E04A  2               ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
00E04A  2               ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
00E04A  2               ;* syntax for these two instructions.  This error was subsequently carried forward *
00E04A  2               ;* by Eyes and Lichty.                                                             *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
00E04A  2               ;*                                                                                 *
00E04A  2               ;*     PEA #<operand>                                                              *
00E04A  2               ;*     PEI <operand>                                                               *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
00E04A  2               ;* value.  The operand for PEI must be 8 bits.                                     *
00E04A  2               ;*                                                                                 *
00E04A  2               ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
00E04A  2               ;
00E04A  2               ;	* * * * * * * * * * * *
00E04A  2               ;	* VERSION INFORMATION *
00E04A  2               ;	* * * * * * * * * * * *
00E04A  2               ;
00E04A  2                       .MACRO  SOFTVERS        ;software version - change with each revision...
00E04A  2                       .BYTE   "1"             ;major
00E04A  2                       .BYTE   "."
00E04A  2                       .BYTE   "0"             ;minor
00E04A  2                       .BYTE   "."
00E04A  2                       .BYTE   "2"             ;revision
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2               ;REVISION TABLE
00E04A  2               ;
00E04A  2               ;Ver  Rev Date    Description
00E04A  2               ;-------------------------------------------------------------------------------
00E04A  2               ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
00E04A  2               ;                    firmware.
00E04A  2               ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
00E04A  2               ;                    be copied to shadow storage after return from execution of
00E04A  2               ;                    a J command.
00E04A  2               ;     2017/10/07  A) Converted to use WDC's 65816 assembler (D.WERNER)
00E04A  2               ;		  B) Adapt for the RBC 65c816 SBC
00E04A  2               ;		  C) Disable X command
00E04A  2               ;-------------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	        COMMENT ABBREVIATIONS
00E04A  2               ;	----------------------------------------------------
00E04A  2               ;	  BCD   binary-coded decimal
00E04A  2               ;	   DP   direct page or page zero
00E04A  2               ;	  EOF   end-of-field
00E04A  2               ;	  EOI   end-of-input
00E04A  2               ;	  LSB   least significant byte/bit
00E04A  2               ;	  LSD   least significant digit
00E04A  2               ;	  LSN   least significant nybble
00E04A  2               ;	  LSW   least significant word
00E04A  2               ;	  MPU   microprocessor
00E04A  2               ;	  MSB   most significant byte/bit
00E04A  2               ;	  MSD   most significant digit
00E04A  2               ;	  MSN   most significant nybble
00E04A  2               ;	  MSW   most-significant word
00E04A  2               ;	  RAM   random access memory
00E04A  2               ;	   WS   whitespace, i.e., blanks & horizontal tabs
00E04A  2               ;	----------------------------------------------------
00E04A  2               ;	A word is defined as 16 bits.
00E04A  2               ;
00E04A  2               ;	   MPU REGISTER SYMBOLS
00E04A  2               ;	--------------------------
00E04A  2               ;	   .A   accumulator LSB
00E04A  2               ;	   .B   accumulator MSB
00E04A  2               ;	   .C   16 bit accumulator
00E04A  2               ;	   .X   X-index
00E04A  2               ;	   .Y   Y-index
00E04A  2               ;	   DB   data bank
00E04A  2               ;	   DP   direct page
00E04A  2               ;	   PB   program bank
00E04A  2               ;	   PC   program counter
00E04A  2               ;	   SP   stack pointer
00E04A  2               ;	   SR   MPU status
00E04A  2               ;	----------------------------
00E04A  2               ;
00E04A  2               ;	  MPU STATUS REGISTER SYMBOLS
00E04A  2               ;	-------------------------------
00E04A  2               ;	    C   carry
00E04A  2               ;	    D   decimal mode
00E04A  2               ;	    I   maskable interrupts
00E04A  2               ;	    m   accumulator/memory size
00E04A  2               ;	    N   result negative
00E04A  2               ;	    V   sign overflow
00E04A  2               ;	    x   index registers size
00E04A  2               ;	    Z   result zero
00E04A  2               ;	-------------------------------
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;SYSTEM INTERFACE DEFINITIONS
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------
00E04A  2               ;	This section defines the interface between Supermon 816 & the host
00E04A  2               ;	system.   Change these definitions to suit your system, but do not
00E04A  2               ;	change any label names.  All definitions must have valid values in
00E04A  2               ;	order to assemble Supermon 816.
00E04A  2               ;	------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;	--------------------------------------------------------
00E04A  2               ;.org  $008000              ;assembly address...
00E04A  2               ;
00E04A  2               ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
00E04A  2               ;	--------------------------------------------------------
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;vecexit  = $002000              ;exit to environment address...
00E04A  2               ;
00E04A  2               ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
00E04A  2               ;	will do a JML (long jump) to this address, which means VECEXIT must be a
00E04A  2               ;	24 bit address.
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;getcha                  ;get keystroke from console...
00E04A  2               ;
00E04A  2               ;	GETCHA refers to an operating system API call that returns a keystroke
00E04A  2               ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
00E04A  2               ;	blocking subroutine & returns with carry clear to indicate that a key-
00E04A  2               ;	stroke is in .A, or with carry set to indicate that no keystroke was
00E04A  2               ;	available.  GETCHA will be called with a JSR instruction.
00E04A  2               ;
00E04A  2               ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
00E04A  2               ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
00E04A  2               ;	keystroke" routine works differently than described.
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               getcha          = $FF74
00E04A  2               ;------------------------------------------------------------------------
00E04A  2               ;putcha   print character on console...
00E04A  2               ;
00E04A  2               ;	PUTCHA refers to an operating system API call that prints a character to
00E04A  2               ;	the console screen.  The character to be printed will be in .A, which
00E04A  2               ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
00E04A  2               ;	until the character can be processed.  PUTCHA will be called with a JSR
00E04A  2               ;	instructions.
00E04A  2               ;
00E04A  2               ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
00E04A  2               ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
00E04A  2               ;	character" routine works differently than described.
00E04A  2               ;
00E04A  2               putcha          = $FF71
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               vecbrki         = IBRKVECTOR         ;BRK handler indirect vector...
00E04A  2               ;
00E04A  2               ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
00E04A  2               ;	tion is intercepted & the registers  are  captured.   Your BRK front end
00E04A  2               ;	should jump through this vector after pushing the registers as follows:
00E04A  2               ;
00E04A  2               ;	         phb                   ;save DB
00E04A  2               ;	         phd                   ;save DP
00E04A  2               ;	         rep #%00110000        ;16 bit registers
00E04A  2               ;	         pha
00E04A  2               ;	         phx
00E04A  2               ;	         phy
00E04A  2               ;	         jmp (vecbrki)         ;indirect vector
00E04A  2               ;
00E04A  2               ;	When a G or J command is issued, the above sequence will be reversed be-
00E04A  2               ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
00E04A  2               ;	816, the original address at VECBRKI will be restored.
00E04A  2               ;
00E04A  2               ;	If your BRK front end doesn't conform to the above you will have to mod-
00E04A  2               ;	ify Supermon 816 to accommodate the differences.  The most likely needed
00E04A  2               ;	changes will be in the order in which registers are pushed to the stack.
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               hwstack         = $7FFF         ;top of hardware stack...
00E04A  2               ;
00E04A  2               ;	Supermon 816 initializes the stack pointer to this address when the cold
00E04A  2               ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
00E04A  2               ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
00E04A  2               ;	table definitions).
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               zeropage        = $10           ;Supermon 816's direct page...
00E04A  2               ;
00E04A  2               ;	Supermon 816 uses direct page starting at this address.  Be sure that no
00E04A  2               ;	conflict occurs with other software.
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               stopkey         = $03           ;display abort key...
00E04A  2               ;
00E04A  2               ;	Supermon 816 will poll for a "stop key" during display operations, such
00E04A  2               ;	as code disassembly & memory dumps, so as to abort further processing &
00E04A  2               ;	return to the command prompt.  STOPKEY must be defined with the ASCII
00E04A  2               ;	value that the "stop key" will emit when typed.  The polling is via a
00E04A  2               ;	call to GETCHA (described above).  The default STOPKEY definition of $03
00E04A  2               ;	is for ASCII <ETX> or [Ctrl-C].
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ibuffer         = $000200       ;input buffer &...
00E04A  2               auxbuf          = ibuffer+s_ibuf+s_byte;auxiliary buffer...
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;	Supermon 816 will use the above definitions for input buffers.  These
00E04A  2               ;	buffers may be located anywhere in RAM that is convenient.  The buffers
00E04A  2               ;	are stateless, which means that unless Supermon 816 has control of your
00E04A  2               ;	system, they may be overwritten without consequence.
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;W65C816S INSTRUCTION SYNTHESIS MACROS -- !!!!! DO NOT EDIT !!!!!
00E04A  2               ;
00E04A  2               
00E04A  2               
00E04A  2                       .MACRO  _ASM24_ _ad
00E04A  2                       .BYTE   <_ad,>_ad,_ad>>16
00E04A  2                       .ENDMACRO
00E04A  2               
00E04A  2               ;brl      .macro _ad
00E04A  2               ;_ba      =*+3
00E04A  2               ;         .BYTE $82
00E04A  2               ;         .WORD _ad-_ba
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;jml      .macro _ad
00E04A  2               ;         .BYTE $5c
00E04A  2               ;         _asm24_ _ad
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;mvn      .macro _s,_d
00E04A  2               ;         .BYTE $54,_d,_s
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;mvp      .macro _s,_d
00E04A  2               ;         .BYTE $44,_d,_s
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;pea      .macro _op
00E04A  2               ;         .BYTE $f4
00E04A  2               ;         .WORD _op
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;phb      .macro
00E04A  2               ;         .BYTE $8b
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;phk      .macro
00E04A  2               ;         .BYTE $4b
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;plb      .macro
00E04A  2               ;         .BYTE $ab
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;rep      .macro _op
00E04A  2               ;         .BYTE $c2,_op
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;sep      .macro _op
00E04A  2               ;         .BYTE $e2,_op
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;tcd      .macro
00E04A  2               ;         .BYTE $5b
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;tcs      .macro
00E04A  2               ;         .BYTE $1b
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;tdc      .macro
00E04A  2               ;         .BYTE $7b
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;tsc      .macro
00E04A  2               ;         .BYTE $3b
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;txy      .macro
00E04A  2               ;         .BYTE $9b
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;tyx      .macro
00E04A  2               ;         .BYTE $bb
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2               ;wai      .macro
00E04A  2               ;         .BYTE $cb
00E04A  2               ;        .ENDMACRO
00E04A  2               ;
00E04A  2               ;xba      .macro
00E04A  2               ;         .BYTE $eb
00E04A  2               ;         .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ADCW _OP
00E04A  2                       ADC     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ANDW _OP
00E04A  2                       AND     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  BITW _OP
00E04A  2                       BIT     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  CMPW _OP
00E04A  2                       CMP     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  CPXW        _OP
00E04A  2                       CPX     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  CPYW        _OP
00E04A  2                       CPY     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  EORW        _OP
00E04A  2                       EOR     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LDAW        _OP
00E04A  2                       LDA     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LDXW        _OP
00E04A  2                       LDX     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LDYW        _OP
00E04A  2                       LDY     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ORAW        _OP
00E04A  2                       ORA     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SBCW        _OP
00E04A  2                       SBC     #<_OP
00E04A  2                       .BYTE   >_OP
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LDALX _AD
00E04A  2                       .BYTE   $BF
00E04A  2                       _ASM24_ _AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ADCIL        _AD
00E04A  2                       .BYTE   $67,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ADCILY        _AD
00E04A  2                       .BYTE   $77,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ANDIL        _AD
00E04A  2                       .BYTE   $27,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ANDILY        _AD
00E04A  2                       .BYTE   $37,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  CMPIL        _AD
00E04A  2                       .BYTE   $C7,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  CMPILY        _AD
00E04A  2                       .BYTE   $D7,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  EORIL        _AD
00E04A  2                       .BYTE   $47,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  EORILY        _AD
00E04A  2                       .BYTE   $57,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LDAIL        _AD
00E04A  2                       .BYTE   $A7,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LDAILY        _AD
00E04A  2                       .BYTE   $B7,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ORAIL        _AD
00E04A  2                       .BYTE   $07,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ORAILY        _AD
00E04A  2                       .BYTE   $17,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SBCIL        _AD
00E04A  2                       .BYTE   $E7,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SBCILY        _AD
00E04A  2                       .BYTE   $F7,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  STAIL        _AD
00E04A  2                       .BYTE   $87,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  STAILY        _AD
00E04A  2                       .BYTE   $97,_AD
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ADCS        _OF
00E04A  2                       .BYTE   $63,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ADCSI        _OF
00E04A  2                       .BYTE   $73,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ANDS        _OF
00E04A  2                       .BYTE   $23,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ANDSI        _OF
00E04A  2                       .BYTE   $33,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  CMPS        _OF
00E04A  2                       .BYTE   $C3,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  CMPSI        _OF
00E04A  2                       .BYTE   $D3,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  EORS        _OF
00E04A  2                       .BYTE   $43,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  EORSI        _OF
00E04A  2                       .BYTE   $53,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LDAS        _OF
00E04A  2                       .BYTE   $A3,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LDASI        _OF
00E04A  2                       .BYTE   $B3,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ORAS        _OF
00E04A  2                       .BYTE   $03,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  ORASI        _OF
00E04A  2                       .BYTE   $13,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SBCS        _OF
00E04A  2                       .BYTE   $E3,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SBCSI        _OF
00E04A  2                       .BYTE   $F3,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  STAS        _OF
00E04A  2                       .BYTE   $83,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  STASI        _OF
00E04A  2                       .BYTE   $93,_OF
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SLONGA
00E04A  2                       .BYTE   $C2,$20
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LONGR
00E04A  2                       .BYTE   $C2,$30
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  LONGX
00E04A  2                       .BYTE   $C2,$10
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SHORTA
00E04A  2                       .BYTE   $E2,$20
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SHORTI
00E04A  2                       .BYTE   $E2,$10
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SHORTR
00E04A  2                       .BYTE   $E2,$30
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2                       .MACRO  SHORTX
00E04A  2                       .BYTE   $E2,$10
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;CONSOLE DISPLAY CONTROL MACROS
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;	The following macros execute terminal  control procedures  that  perform
00E04A  2               ;	such tasks as clearing the screen,  switching  between  normal & reverse
00E04A  2               ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
00E04A  2               ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
00E04A  2               ;	by Supermon 816 are included.
00E04A  2               ;
00E04A  2               ;	If your console is not WYSE 60 compatible, you will need to  edit  these
00E04A  2               ;	macros as required to control your particular console or terminal.  Note
00E04A  2               ;	that in some cases one macro may call another.  Exercise caution in your
00E04A  2               ;	edits to avoid introducing display bugs.
00E04A  2               ;
00E04A  2               ;	If your console display cannot execute one of these procedures,  such as
00E04A  2               ;	'CL' (clear to end of line), you will have to develop an alternative.
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	cursor control...
00E04A  2               ;
00E04A  2                       .MACRO  CRR             ;carriage return
00E04A  2                       .BYTE   a_cr
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2               
00E04A  2                       .MACRO  LF              ;carriage return/line feed
00E04A  2                       CRR
00E04A  2                       .BYTE   a_lf
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2               ;	miscellaneous control...
00E04A  2               ;
00E04A  2                       .MACRO  RB              ;ring "bell"
00E04A  2                       .BYTE   a_bel
00E04A  2                       .ENDMACRO
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;ASCII CONTROL DEFINITIONS (menmonic order)
00E04A  2               ;
00E04A  2               a_bel           = $07           ;<BEL> alert/ring bell
00E04A  2               a_bs            = $08           ;<BS>  backspace
00E04A  2               a_cr            = $0d           ;<CR>  carriage return
00E04A  2               a_del           = $7f           ;<DEL> delete
00E04A  2               a_esc           = $1b           ;<ESC> escape
00E04A  2               a_ht            = $09           ;<HT>  horizontal tabulation
00E04A  2               a_lf            = $0a           ;<LF>  linefeed
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	miscellaneous (description order)...
00E04A  2               ;
00E04A  2               a_blank         = ' '           ;blank (whitespace)
00E04A  2               a_asclch        = 'z'           ;end of lowercase ASCII
00E04A  2               a_lctouc        = $5f           ;LC to UC conversion mask
00E04A  2               a_asclcl        = 'a'           ;start of lowercase ASCII
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;GLOBAL ATOMIC CONSTANTS
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	data type sizes...
00E04A  2               ;
00E04A  2               s_byte          = 1             ;byte
00E04A  2               s_word          = 2             ;word (16 bits)
00E04A  2               s_xword         = 3             ;extended word (24 bits)
00E04A  2               s_dword         = 4             ;double word (32 bits)
00E04A  2               s_rampag        = $0100         ;65xx RAM page
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	data type sizes in bits...
00E04A  2               ;
00E04A  2               s_bibyte        = 8             ;byte
00E04A  2               s_bnybbl        = 4             ;nybble
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	miscellaneous...
00E04A  2               ;
00E04A  2               bitabs          = $2c           ;absolute BIT opcode
00E04A  2               bitzp           = $24           ;zero page BIT opcode
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
00E04A  2               ;
00E04A  2               s_mpudbx        = s_byte        ;data bank size
00E04A  2               s_mpudpx        = s_word        ;direct page size
00E04A  2               s_mpupbx        = s_byte        ;program bank size
00E04A  2               s_mpupcx        = s_word        ;program counter size
00E04A  2               s_mpuspx        = s_word        ;stack pointer size
00E04A  2               s_mpusrx        = s_byte        ;status size
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	status register flags...
00E04A  2               ;
00E04A  2               sr_car          = %00000001     ;C
00E04A  2               sr_zer          = sr_car<<1     ;Z
00E04A  2               sr_irq          = sr_zer<<1     ;I
00E04A  2               sr_bdm          = sr_irq<<1     ;D
00E04A  2               sr_ixw          = sr_bdm<<1     ;x
00E04A  2               sr_amw          = sr_ixw<<1     ;m
00E04A  2               sr_ovl          = sr_amw<<1     ;V
00E04A  2               sr_neg          = sr_ovl<<1     ;N
00E04A  2               ;
00E04A  2               ;	NVmxDIZC
00E04A  2               ;	xxxxxxxx
00E04A  2               ;	||||||||
00E04A  2               ;	|||||||+---> 1 = carry set/generated
00E04A  2               ;	||||||+----> 1 = result = zero
00E04A  2               ;	|||||+-----> 1 = IRQs ignored
00E04A  2               ;	||||+------> 0 = binary arithmetic mode
00E04A  2               ;	||||         1 = decimal arithmetic mode
00E04A  2               ;	|||+-------> 0 = 16 bit index
00E04A  2               ;	|||          1 = 8 bit index
00E04A  2               ;	||+--------> 0 = 16 bit .A & memory
00E04A  2               ;	||           1 = 8 bit .A & memory
00E04A  2               ;	|+---------> 1 = sign overflow
00E04A  2               ;	+----------> 1 = result = negative
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;"SIZE-OF" CONSTANTS
00E04A  2               ;
00E04A  2               s_addr          = s_xword       ;24 bit address
00E04A  2               s_auxbuf        = 32            ;auxiliary buffer
00E04A  2               s_ibuf          = 69            ;input buffer
00E04A  2               s_mnemon        = 3             ;MPU ASCII mnemonic
00E04A  2               s_mnepck        = 2             ;MPU encoded mnemonic
00E04A  2               s_mvinst        = 3             ;MVN/MVP instruction
00E04A  2               s_opcode        = s_byte        ;MPU opcode
00E04A  2               s_oper          = s_xword       ;operand
00E04A  2               s_pfac          = s_dword       ;primary math accumulator
00E04A  2               s_sfac          = s_dword+s_word;secondary math accumulators
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;"NUMBER-OF" CONSTANTS
00E04A  2               ;
00E04A  2               n_dbytes        = 21            ;default disassembly bytes
00E04A  2               n_dump          = 8             ;bytes per memory dump line
00E04A  2               n_mbytes        = s_rampag-1    ;default memory dump bytes
00E04A  2               n_hccols        = 10            ;compare/hunt display columns
00E04A  2               n_opcols        = 3*s_oper      ;disassembly operand columns
00E04A  2               n_opslsr        = 4             ;LSRs to extract instruction size
00E04A  2               n_shfenc        = 5             ;shifts to encode/decode mnemonic
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;NUMERIC CONVERSION CONSTANTS
00E04A  2               ;
00E04A  2               a_hexdec        = 'A'-'9'-2     ;hex to decimal difference
00E04A  2               c_bin           = '%'           ;binary prefix
00E04A  2               c_dec           = '+'           ;decimal prefix
00E04A  2               c_hex           = '$'           ;hexadecimal prefix
00E04A  2               c_oct           = '@'           ;octal prefix
00E04A  2               k_hex           = 'f'           ;hex ASCII conversion
00E04A  2               m_bits          = s_pfac*s_bibyte;operand bit size
00E04A  2               m_cbits         = s_sfac*s_bibyte;workspace bit size
00E04A  2               bcdumask        = %00001111     ;isolate BCD units mask
00E04A  2               btoamask        = %00110000     ;binary to ASCII mask
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;ASSEMBLER/DISASSEMBLER CONSTANTS
00E04A  2               ;
00E04A  2               a_mnecvt        = '?'           ;encoded mnemonic conversion base
00E04A  2               aimmaska        = %00011111     ;.A immediate opcode test #1
00E04A  2               aimmaskb        = %00001001     ;.A immediate opcode test #2
00E04A  2               asmprfx         = 'A'           ;assemble code prefix
00E04A  2               ascprmct        = 9             ;assembler prompt "size-of"
00E04A  2               disprfx         = '.'           ;disassemble code prefix
00E04A  2               flimmask        = %11000000     ;force long immediate flag
00E04A  2               opc_cpxi        = $e0           ;CPX # opcode
00E04A  2               opc_cpyi        = $c0           ;CPY # opcode
00E04A  2               opc_ldxi        = $a2           ;LDX # opcode
00E04A  2               opc_ldyi        = $a0           ;LDY # opcode
00E04A  2               opc_mvn         = $54           ;MVN opcode
00E04A  2               opc_mvp         = $44           ;MVP opcode
00E04A  2               opc_rep         = $c2           ;REP opcode
00E04A  2               opc_sep         = $e2           ;SEP opcode
00E04A  2               pfmxmask        = sr_amw|sr_ixw ;MPU m & x flag bits mask
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	assembler prompt buffer offsets...
00E04A  2               ;
00E04A  2               apadrbkh        = s_word        ;instruction address bank MSN
00E04A  2               apadrbkl        = apadrbkh+s_byte;instruction address bank LSN
00E04A  2               apadrmbh        = apadrbkl+s_byte;instruction address MSB MSN
00E04A  2               apadrmbl        = apadrmbh+s_byte;instruction address MSB LSN
00E04A  2               apadrlbh        = apadrmbl+s_byte;instruction address LSB MSN
00E04A  2               apadrlbl        = apadrlbh+s_byte;instruction address LSB LSN
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	addressing mode preamble symbols...
00E04A  2               ;
00E04A  2               amp_flim        = '!'           ;force long immediate
00E04A  2               amp_imm         = '#'           ;immediate
00E04A  2               amp_ind         = '('           ;indirect
00E04A  2               amp_indl        = '['           ;indirect long
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	addressing mode symbolic translation indices...
00E04A  2               ;
00E04A  2               am_nam          = %0000         ;no symbol
00E04A  2               am_imm          = %0001         ;#
00E04A  2               am_adrx         = %0010         ;<addr>,X
00E04A  2               am_adry         = %0011         ;<addr>,Y
00E04A  2               am_ind          = %0100         ;(<addr>)
00E04A  2               am_indl         = %0101         ;[<dp>]
00E04A  2               am_indly        = %0110         ;[<dp>],Y
00E04A  2               am_indx         = %0111         ;(<addr>,X)
00E04A  2               am_indy         = %1000         ;(<dp>),Y
00E04A  2               am_stk          = %1001         ;<offset>,S
00E04A  2               am_stky         = %1010         ;(<offset>,S),Y
00E04A  2               am_move         = %1011         ;<sbnk>,<dbnk>
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	operand size translation indices...
00E04A  2               ;
00E04A  2               ops0            = %0000<<4      ;no operand
00E04A  2               ops1            = %0001<<4      ;8 bit operand
00E04A  2               ops2            = %0010<<4      ;16 bit operand
00E04A  2               ops3            = %0011<<4      ;24 bit operand
00E04A  2               bop1            = %0101<<4      ;8 bit relative branch
00E04A  2               bop2            = %0110<<4      ;16 bit relative branch
00E04A  2               vops            = %1001<<4      ;8 or 16 bit operand
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	operand size & addressing mode extraction masks...
00E04A  2               ;
00E04A  2               amodmask        = %00001111     ;addressing mode index
00E04A  2               opsmask         = %00110000     ;operand size
00E04A  2               vopsmask        = %11000000     ;BOPx & VOPS flag bits
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	instruction mnemonic encoding...
00E04A  2               ;
00E04A  2               mne_adc         = $2144         ;ADC
00E04A  2               mne_and         = $2bc4         ;AND
00E04A  2               mne_asl         = $6d04         ;ASL
00E04A  2               mne_bcc         = $2106         ;BCC
00E04A  2               mne_bcs         = $a106         ;BCS
00E04A  2               mne_beq         = $9186         ;BEQ
00E04A  2               mne_bit         = $aa86         ;BIT
00E04A  2               mne_bmi         = $5386         ;BMI
00E04A  2               mne_bne         = $33c6         ;BNE
00E04A  2               mne_bpl         = $6c46         ;BPL
00E04A  2               mne_bra         = $14c6         ;BRA
00E04A  2               mne_brk         = $64c6         ;BRK
00E04A  2               mne_brl         = $6cc6         ;BRL
00E04A  2               mne_bvc         = $25c6         ;BVC
00E04A  2               mne_bvs         = $a5c6         ;BVS
00E04A  2               mne_clc         = $2348         ;CLC
00E04A  2               mne_cld         = $2b48         ;CLD
00E04A  2               mne_cli         = $5348         ;CLI
00E04A  2               mne_clv         = $bb48         ;CLV
00E04A  2               mne_cmp         = $8b88         ;CMP
00E04A  2               mne_cop         = $8c08         ;COP
00E04A  2               mne_cpx         = $cc48         ;CPX
00E04A  2               mne_cpy         = $d448         ;CPY
00E04A  2               mne_dec         = $218a         ;DEC
00E04A  2               mne_dex         = $c98a         ;DEX
00E04A  2               mne_dey         = $d18a         ;DEY
00E04A  2               mne_eor         = $9c0c         ;EOR
00E04A  2               mne_inc         = $23d4         ;INC
00E04A  2               mne_inx         = $cbd4         ;INX
00E04A  2               mne_iny         = $d3d4         ;INY
00E04A  2               mne_jml         = $6b96         ;JML
00E04A  2               mne_jmp         = $8b96         ;JMP
00E04A  2               mne_jsl         = $6d16         ;JSL
00E04A  2               mne_jsr         = $9d16         ;JSR
00E04A  2               mne_lda         = $115a         ;LDA
00E04A  2               mne_ldx         = $c95a         ;LDX
00E04A  2               mne_ldy         = $d15a         ;LDY
00E04A  2               mne_lsr         = $9d1a         ;LSR
00E04A  2               mne_mvn         = $7ddc         ;MVN
00E04A  2               mne_mvp         = $8ddc         ;MVP
00E04A  2               mne_nop         = $8c1e         ;NOP
00E04A  2               mne_ora         = $14e0         ;ORA
00E04A  2               mne_pea         = $11a2         ;PEA
00E04A  2               mne_pei         = $51a2         ;PEI
00E04A  2               mne_per         = $99a2         ;PER
00E04A  2               mne_pha         = $1262         ;PHA
00E04A  2               mne_phb         = $1a62         ;PHB
00E04A  2               mne_phd         = $2a62         ;PHD
00E04A  2               mne_phk         = $6262         ;PHK
00E04A  2               mne_php         = $8a62         ;PHP
00E04A  2               mne_phx         = $ca62         ;PHX
00E04A  2               mne_phy         = $d262         ;PHY
00E04A  2               mne_pla         = $1362         ;PLA
00E04A  2               mne_plb         = $1b62         ;PLB
00E04A  2               mne_pld         = $2b62         ;PLD
00E04A  2               mne_plp         = $8b62         ;PLP
00E04A  2               mne_plx         = $cb62         ;PLX
00E04A  2               mne_ply         = $d362         ;PLY
00E04A  2               mne_rep         = $89a6         ;REP
00E04A  2               mne_rol         = $6c26         ;ROL
00E04A  2               mne_ror         = $9c26         ;ROR
00E04A  2               mne_rti         = $5566         ;RTI
00E04A  2               mne_rtl         = $6d66         ;RTL
00E04A  2               mne_rts         = $a566         ;RTS
00E04A  2               mne_sbc         = $20e8         ;SBC
00E04A  2               mne_sec         = $21a8         ;SEC
00E04A  2               mne_sed         = $29a8         ;SED
00E04A  2               mne_sei         = $51a8         ;SEI
00E04A  2               mne_sep         = $89a8         ;SEP
00E04A  2               mne_sta         = $1568         ;STA
00E04A  2               mne_stp         = $8d68         ;STP
00E04A  2               mne_stx         = $cd68         ;STX
00E04A  2               mne_sty         = $d568         ;STY
00E04A  2               mne_stz         = $dd68         ;STZ
00E04A  2               mne_tax         = $c8aa         ;TAX
00E04A  2               mne_tay         = $d0aa         ;TAY
00E04A  2               mne_tcd         = $292a         ;TCD
00E04A  2               mne_tcs         = $a12a         ;TCS
00E04A  2               mne_tdc         = $216a         ;TDC
00E04A  2               mne_trb         = $1cea         ;TRB
00E04A  2               mne_tsb         = $1d2a         ;TSB
00E04A  2               mne_tsc         = $252a         ;TSC
00E04A  2               mne_tsx         = $cd2a         ;TSX
00E04A  2               mne_txa         = $166a         ;TXA
00E04A  2               mne_txs         = $a66a         ;TXS
00E04A  2               mne_txy         = $d66a         ;TXY
00E04A  2               mne_tya         = $16aa         ;TYA
00E04A  2               mne_tyx         = $ceaa         ;TYX
00E04A  2               mne_wai         = $50b0         ;WAI
00E04A  2               mne_wdm         = $7170         ;WDM
00E04A  2               mne_xba         = $10f2         ;XBA
00E04A  2               mne_xce         = $3132         ;XCE
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	encoded instruction mnemonic indices...
00E04A  2               ;
00E04A  2               mne_adcx        = 16            ;ADC
00E04A  2               mne_andx        = 29            ;AND
00E04A  2               mne_aslx        = 44            ;ASL
00E04A  2               mne_bccx        = 15            ;BCC
00E04A  2               mne_bcsx        = 65            ;BCS
00E04A  2               mne_beqx        = 59            ;BEQ
00E04A  2               mne_bitx        = 70            ;BIT
00E04A  2               mne_bmix        = 36            ;BMI
00E04A  2               mne_bnex        = 31            ;BNE
00E04A  2               mne_bplx        = 42            ;BPL
00E04A  2               mne_brax        = 5             ;BRA
00E04A  2               mne_brkx        = 39            ;BRK
00E04A  2               mne_brlx        = 43            ;BRL
00E04A  2               mne_bvcx        = 23            ;BVC
00E04A  2               mne_bvsx        = 68            ;BVS
00E04A  2               mne_clcx        = 20            ;CLC
00E04A  2               mne_cldx        = 27            ;CLD
00E04A  2               mne_clix        = 35            ;CLI
00E04A  2               mne_clvx        = 71            ;CLV
00E04A  2               mne_cmpx        = 53            ;CMP
00E04A  2               mne_copx        = 55            ;COP
00E04A  2               mne_cpxx        = 78            ;CPX
00E04A  2               mne_cpyx        = 88            ;CPY
00E04A  2               mne_decx        = 18            ;DEC
00E04A  2               mne_dexx        = 74            ;DEX
00E04A  2               mne_deyx        = 84            ;DEY
00E04A  2               mne_eorx        = 61            ;EOR
00E04A  2               mne_incx        = 21            ;INC
00E04A  2               mne_inxx        = 77            ;INX
00E04A  2               mne_inyx        = 87            ;INY
00E04A  2               mne_jmlx        = 40            ;JML
00E04A  2               mne_jmpx        = 54            ;JMP
00E04A  2               mne_jslx        = 45            ;JSL
00E04A  2               mne_jsrx        = 63            ;JSR
00E04A  2               mne_ldax        = 1             ;LDA
00E04A  2               mne_ldxx        = 73            ;LDX
00E04A  2               mne_ldyx        = 83            ;LDY
00E04A  2               mne_lsrx        = 64            ;LSR
00E04A  2               mne_mvnx        = 48            ;MVN
00E04A  2               mne_mvpx        = 58            ;MVP
00E04A  2               mne_nopx        = 56            ;NOP
00E04A  2               mne_orax        = 6             ;ORA
00E04A  2               mne_peax        = 2             ;PEA
00E04A  2               mne_peix        = 33            ;PEI
00E04A  2               mne_perx        = 60            ;PER
00E04A  2               mne_phax        = 3             ;PHA
00E04A  2               mne_phbx        = 10            ;PHB
00E04A  2               mne_phdx        = 26            ;PHD
00E04A  2               mne_phkx        = 38            ;PHK
00E04A  2               mne_phpx        = 51            ;PHP
00E04A  2               mne_phxx        = 75            ;PHX
00E04A  2               mne_phyx        = 85            ;PHY
00E04A  2               mne_plax        = 4             ;PLA
00E04A  2               mne_plbx        = 11            ;PLB
00E04A  2               mne_pldx        = 28            ;PLD
00E04A  2               mne_plpx        = 52            ;PLP
00E04A  2               mne_plxx        = 76            ;PLX
00E04A  2               mne_plyx        = 86            ;PLY
00E04A  2               mne_repx        = 49            ;REP
00E04A  2               mne_rolx        = 41            ;ROL
00E04A  2               mne_rorx        = 62            ;ROR
00E04A  2               mne_rtix        = 37            ;RTI
00E04A  2               mne_rtlx        = 46            ;RTL
00E04A  2               mne_rtsx        = 67            ;RTS
00E04A  2               mne_sbcx        = 14            ;SBC
00E04A  2               mne_secx        = 19            ;SEC
00E04A  2               mne_sedx        = 25            ;SED
00E04A  2               mne_seix        = 34            ;SEI
00E04A  2               mne_sepx        = 50            ;SEP
00E04A  2               mne_stax        = 7             ;STA
00E04A  2               mne_stpx        = 57            ;STP
00E04A  2               mne_stxx        = 80            ;STX
00E04A  2               mne_styx        = 89            ;STY
00E04A  2               mne_stzx        = 91            ;STZ
00E04A  2               mne_taxx        = 72            ;TAX
00E04A  2               mne_tayx        = 82            ;TAY
00E04A  2               mne_tcdx        = 24            ;TCD
00E04A  2               mne_tcsx        = 66            ;TCS
00E04A  2               mne_tdcx        = 17            ;TDC
00E04A  2               mne_trbx        = 12            ;TRB
00E04A  2               mne_tsbx        = 13            ;TSB
00E04A  2               mne_tscx        = 22            ;TSC
00E04A  2               mne_tsxx        = 79            ;TSX
00E04A  2               mne_txax        = 8             ;TXA
00E04A  2               mne_txsx        = 69            ;TXS
00E04A  2               mne_txyx        = 90            ;TXY
00E04A  2               mne_tyax        = 9             ;TYA
00E04A  2               mne_tyxx        = 81            ;TYX
00E04A  2               mne_waix        = 32            ;WAI
00E04A  2               mne_wdmx        = 47            ;WDM
00E04A  2               mne_xbax        = 0             ;XBA
00E04A  2               mne_xcex        = 30            ;XCE
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;MISCELLANEOUS CONSTANTS
00E04A  2               ;
00E04A  2               halftab         = 4             ;1/2 tabulation spacing
00E04A  2               memprfx         = '>'           ;memory dump prefix
00E04A  2               memsepch        = ':'           ;memory dump separator
00E04A  2               memsubch        = '.'           ;memory dump non-print char
00E04A  2               srinit          = %00110000     ;SR initialization value
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;DIRECT PAGE STORAGE
00E04A  2               ;
00E04A  2               reg_pbx         = zeropage      ;PB
00E04A  2               reg_pcx         = reg_pbx+s_mpupbx;PC
00E04A  2               reg_srx         = reg_pcx+s_mpupcx;SR
00E04A  2               reg_ax          = reg_srx+s_mpusrx;.C
00E04A  2               reg_xx          = reg_ax+s_word ;.X
00E04A  2               reg_yx          = reg_xx+s_word ;.Y
00E04A  2               reg_spx         = reg_yx+s_word ;SP
00E04A  2               reg_dpx         = reg_spx+s_mpuspx;DP
00E04A  2               reg_dbx         = reg_dpx+s_mpudpx;DB
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	general workspace...
00E04A  2               ;
00E04A  2               addra           = reg_dbx+s_mpudbx;address #1
00E04A  2               addrb           = addra+s_addr  ;address #2
00E04A  2               faca            = addrb+s_addr  ;primary accumulator
00E04A  2               facax           = faca+s_pfac   ;extended primary accumulator
00E04A  2               facb            = facax+s_pfac  ;secondary accumulator
00E04A  2               facc            = facb+s_sfac   ;tertiary accumulator
00E04A  2               operand         = facc+s_sfac   ;instruction operand
00E04A  2               auxbufix        = operand+s_oper;auxiliary buffer index
00E04A  2               ibufidx         = auxbufix+s_byte;input buffer index
00E04A  2               bitsdig         = ibufidx+s_byte;bits per numeral
00E04A  2               numeral         = bitsdig+s_byte;numeral buffer
00E04A  2               radix           = numeral+s_byte;radix index
00E04A  2               admodidx        = radix+s_byte  ;addressing mode index
00E04A  2               charcnt         = admodidx+s_byte;character counter
00E04A  2               instsize        = charcnt+s_word;instruction size
00E04A  2               mnepck          = instsize+s_word;encoded mnemonic
00E04A  2               opcode          = mnepck+s_mnepck;current opcode
00E04A  2               status          = opcode+s_byte ;I/O status flag
00E04A  2               xrtemp          = status+s_byte ;temp .X storage
00E04A  2               eopsize         = xrtemp+s_byte ;entered operand size
00E04A  2               flimflag        = eopsize+s_byte;forced long immediate...
00E04A  2               vecbrkia        = flimflag+s_byte;system indirect BRK vector
00E04A  2               ;
00E04A  2               ;	xx000000
00E04A  2               ;	||
00E04A  2               ;	|+---------> 0: .X/.Y =  8 bits
00E04A  2               ;	|            1: .X/.Y =  18 bits
00E04A  2               ;	+----------> 0: .A =  8 bits
00E04A  2               ;	             1: .A =  16 bits
00E04A  2               ;
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
00E04A  2               ;	iate mode instruction, thus causing the following disassembly to display
00E04A  2               ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
00E04A  2               ;	the effect of the most recent REP or SEP instruction.
00E04A  2               ;	------------------------------------------------------------------------
00E04A  2               ;
00E04A  2               iopsize         = flimflag+s_byte;operand size
00E04A  2               range           = iopsize+s_byte;allowable radix range
00E04A  2               vopsflag        = range+s_byte  ;VOPS & ROPS mode bits
00E04A  2               ;
00E04A  2               ;
00E04A  2               ;	copy/fill workspace (overlaps some of the above)...
00E04A  2               ;
00E04A  2               mcftwork        = faca          ;start of copy/fill code
00E04A  2               mcftopc         = mcftwork+s_byte;instruction opcode
00E04A  2               mcftbnk         = mcftopc+s_byte;banks
00E04A  2               ;
00E04A  2               ;================================================================================
00E04A  2               ;
00E04A  2               ;SUPERMON 816 JUMP TABLE
00E04A  2               ;
00E04A  2               ;
00E04A  2               JMON:
00E04A  2  80 02                BRA     mon             ;cold start entry
00E04C  2               JMONBRK:
00E04C  2  80 4C                BRA     monbrk          ;software interrupt intercept
00E04E  2               ;
00E04E  2               ;
00E04E  2               ;================================================================================
00E04E  2               ;
00E04E  2               ;mon: SUPERMON 816 COLD START
00E04E  2               ;
00E04E  2               mon:
00E04E  2  C2 10                INDEX16
00E050  2  E2 20                ACCUMULATOR8
00E052  2  A0 00 00             LDY     #$0000          ; LOAD $00 INTO Y
00E055  2               OUTSTRLP:
00E055  2  B9 E7 F0             LDA     ALIVEM,Y        ; LOAD NEXT CHAR FROM STRING INTO ACC
00E058  2  C9 00                CMP     #$00            ; IS NULL?
00E05A  2  F0 07                BEQ     ENDOUTSTR       ; YES, END PRINT OUT
00E05C  2  20 71 FF             JSR     putcha          ; PRINT CHAR IN ACC
00E05F  2  C8                   INY                     ; Y=Y+1 (BUMP INDEX)
00E060  2  4C 55 E0             JMP     OUTSTRLP        ; DO NEXT CHAR
00E063  2               ENDOUTSTR:
00E063  2  E2 10                INDEX8
00E065  2               
00E065  2               
00E065  2  C2 20                SLONGA
00E067  2  AD 02 03             LDA     vecbrki         ;BRK vector
00E06A  2               ;        CMPW    monbrk          ;pointing at monitor?
00E06A  2               ;        BNE     moncontinue
00E06A  2               ;        JMP     monreg          ;yes, ignore cold start
00E06A  2               ;
00E06A  2               moncontinue:
00E06A  2  85 4D                STA     vecbrkia        ;save vector for exit
00E06C  2  A9 9A E0             LDAW    monbrk          ;Supermon 816 intercepts...
00E06F  2  8D 02 03             STA     vecbrki         ;BRK handler
00E072  2  E2 30                SHORTR                  ;8 bit registers
00E074  2  A2 3F                LDX     #vopsflag-reg_pbx
00E076  2               ;
00E076  2               _0000010:
00E076  2  74 10                STZ     reg_pbx,x       ;clear DP storage
00E078  2  CA                   DEX
00E079  2  10 FB                BPL     _0000010
00E07B  2               ;
00E07B  2               ;
00E07B  2               ;	initialize register shadows...
00E07B  2               ;
00E07B  2  A9 30                LDA     #srinit
00E07D  2  85 13                STA     reg_srx         ;status register
00E07F  2  C2 20                SLONGA                  ;16 bit .A
00E081  2  A9 FF 7F             LDAW    hwstack         ;top of hardware stack
00E084  2  1B                   TCS                     ;set SP
00E085  2  7B                   TDC                     ;get & save...
00E086  2  85 1C                STA     reg_dpx         ;DP register
00E088  2  A9 00 00             LDAW    0
00E08B  2  E2 20                SHORTA
00E08D  2  4B                   PHK
00E08E  2  68                   PLA                     ;capture PB &...
00E08F  2  85 10                STA     reg_pbx         ;set
00E091  2  8B                   PHB
00E092  2  68                   PLA                     ;capture DB &...
00E093  2  85 1E                STA     reg_dbx         ;set
00E095  2               ;
00E095  2               ;
00E095  2               ;	print startup banner...
00E095  2               ;
00E095  2  F4 5D F0             PEA     mm_entry        ;"...ready..."
00E098  2  80 36                BRA     moncom
00E09A  2               ;
00E09A  2               ;================================================================================
00E09A  2               ;
00E09A  2               ;monbrk: SOFTWARE INTERRUPT INTERCEPT
00E09A  2               ;
00E09A  2               ;	------------------------------------------------------------------------
00E09A  2               ;	This is the entry point taken when a BRK instruction is executed.  It is
00E09A  2               ;	assumed that the BRK  handler has pushed the registers to the stack that
00E09A  2               ;	are not automatically pushed by the MPU in response to BRK.
00E09A  2               ;	------------------------------------------------------------------------
00E09A  2               ;
00E09A  2               monbrk:
00E09A  2  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
00E09B  2  18                   CLC                     ;
00E09C  2  FB                   XCE                     ; SET NATIVE MODE
00E09D  2  8B                   PHB                     ;save DB
00E09E  2  0B                   PHD                     ;save DP
00E09F  2  C2 20                SLONGA                  ;16 bit .A
00E0A1  2  48                   PHA
00E0A2  2  A9 00 00             LDAW    $0000           ;set DPR
00E0A5  2  5B                   TCD                     ;
00E0A6  2  68                   PLA
00E0A7  2  C2 30                LONGR                   ;store 16 bit registers
00E0A9  2  85 14                STA     <reg_ax         ;.A
00E0AB  2  86 16                STX     <reg_xx         ;.X
00E0AD  2  84 18                STY     <reg_yx         ;.Y
00E0AF  2  68                   PLA                     ;get DP &...
00E0B0  2  85 1C                STA     <reg_dpx        ;store
00E0B2  2  E2 10                SHORTX
00E0B4  2  FA                   PLX                     ;get DB &...
00E0B5  2  86 1E                STX     <reg_dbx        ;store
00E0B7  2  FA                   PLX                     ;get SR &...
00E0B8  2  86 13                STX     <reg_srx        ;store
00E0BA  2  68                   PLA                     ;get PC &...
00E0BB  2  85 11                STA     <reg_pcx        ;store
00E0BD  2  FA                   PLX                     ;get PB &...
00E0BE  2  86 10                STX     <reg_pbx        ;store
00E0C0  2  C2 20                SLONGA
00E0C2  2  A9 FF 7F             LDAW    hwstack         ;top of hardware stack
00E0C5  2  1B                   TCS                     ;set SPR
00E0C6  2               ;        CLI                     ;reenable IRQs
00E0C6  2  78                   SEI                     ;Disable Interrupts
00E0C7  2  E2 20                SHORTA
00E0C9  2  A9 00                LDA     #$00            ;set DBR
00E0CB  2  48                   PHA
00E0CC  2  AB                   PLB
00E0CD  2  F4 53 F0             PEA     mm_brk          ;"*BRK"
00E0D0  2               ;
00E0D0  2               ;================================================================================
00E0D0  2               ;
00E0D0  2               ;moncom: COMMON ENTRY POINT
00E0D0  2               ;
00E0D0  2               ;	--------------------------------------
00E0D0  2               ;	DO NOT directly call this entry point!
00E0D0  2               ;	--------------------------------------
00E0D0  2               ;
00E0D0  2               moncom:
00E0D0  2  20 DC E7             JSR     sprint          ;print heading
00E0D3  2  C2 20                SLONGA
00E0D5  2  3B                   TSC                     ;get SP &...
00E0D6  2  85 1A                STA     <reg_spx        ;store
00E0D8  2  C2 FF                REP     #%11111111      ;clear SR &...
00E0DA  2  E2 30                SEP     #srinit         ;set default state
00E0DC  2  38                   SEC                     ;see next
00E0DD  2               ;
00E0DD  2               ;================================================================================
00E0DD  2               ;
00E0DD  2               ;monreg: DISPLAY MPU REGISTERS
00E0DD  2               ;
00E0DD  2               ;	---------
00E0DD  2               ;	syntax: R
00E0DD  2               ;	---------
00E0DD  2               ;
00E0DD  2               monreg:
00E0DD  2  B0 03                BCS     _0010010        ;okay to proceed
00E0DF  2               ;
00E0DF  2  4C 7A E1             JMP     monerr          ;error if called with a parm
00E0E2  2               ;
00E0E2  2               _0010010:
00E0E2  2  F4 80 F0             PEA     mm_regs
00E0E5  2  20 DC E7             JSR     sprint          ;display heading
00E0E8  2               ;
00E0E8  2               ;
00E0E8  2               ;	display program bank & counter...
00E0E8  2               ;
00E0E8  2  E2 20                SHORTA
00E0EA  2  A5 10                LDA     <reg_pbx        ;PB
00E0EC  2  20 B2 E7             JSR     dpyhex          ;display as hex ASCII
00E0EF  2  20 D7 E7             JSR     printspc        ;inter-field space
00E0F2  2               
00E0F2  2  C2 20                SLONGA
00E0F4  2  A5 11                LDA     <reg_pcx
00E0F6  2  E2 20                SHORTA
00E0F8  2  20 A2 E7             JSR     dpyhexw         ;display PC
00E0FB  2  A2 02                LDX     #2
00E0FD  2  20 BC E7             JSR     multspc         ;inter-field spacing
00E100  2               ;
00E100  2               ;
00E100  2               ;	display SR in bitwise fashion...
00E100  2               ;
00E100  2  A6 13                LDX     <reg_srx        ;SR
00E102  2  A0 08                LDY     #s_bibyte       ;bits in a byte
00E104  2               ;
00E104  2               _0010020:
00E104  2  8A                   TXA                     ;remaining SR bits
00E105  2  0A                   ASL                     ;grab one of them
00E106  2  AA                   TAX                     ;save remainder
00E107  2  A9 30                LDA     #'0'            ;a clear bit but...
00E109  2  69 00                ADC     #0              ;adjust if set &...
00E10B  2  20 71 FF             JSR     putcha          ;print
00E10E  2  88                   DEY                     ;bit processed
00E10F  2  D0 F3                BNE     _0010020        ;do another
00E111  2               ;
00E111  2               ;
00E111  2               ;	display .C, .X, .Y, SP & DP...
00E111  2               ;
00E111  2               _0010030:
00E111  2  20 D7 E7             JSR     printspc        ;spacing
00E114  2  C2 20                SLONGA
00E116  2  B9 14 00             LDA     reg_ax,y        ;get register value
00E119  2  E2 20                SHORTA
00E11B  2  20 A2 E7             JSR     dpyhexw         ;convert & display
00E11E  2               
00E11E  2               ;         .rept s_word
00E11E  2  C8                   INY
00E11F  2  C8                   INY
00E120  2               ;         .endr
00E120  2               
00E120  2  C0 08                CPY     #reg_dbx-reg_ax-2
00E122  2  90 ED                BCC     _0010030        ;next
00E124  2               
00E124  2  F4 A9 F0             PEA     mm_regs1
00E127  2  20 DC E7             JSR     sprint          ;display heading
00E12A  2  C2 20                SLONGA
00E12C  2  A5 1C                LDA     <reg_dpx        ;get register value
00E12E  2  E2 20                SHORTA
00E130  2  20 A2 E7             JSR     dpyhexw         ;convert & display
00E133  2               ;
00E133  2               ;
00E133  2               ;	display DB...
00E133  2               ;
00E133  2  20 D7 E7             JSR     printspc        ;more spacing
00E136  2  A5 1E                LDA     <reg_dbx        ;get DB &...
00E138  2  20 B2 E7             JSR     dpyhex          ;display it
00E13B  2               ;
00E13B  2               ;================================================================================
00E13B  2               ;
00E13B  2               ;monce: COMMAND EXECUTIVE
00E13B  2               ;
00E13B  2               monce:
00E13B  2  E2 20                SHORTA
00E13D  2  A9 00                LDA     #0              ;default buffer index
00E13F  2               ;
00E13F  2               moncea:
00E13F  2  E2 30                SHORTR                  ;alternate entry point
00E141  2  85 3D                STA     ibufidx         ;(re)set buffer index
00E143  2  F4 7C F0             PEA     mm_prmpt
00E146  2  20 DC E7             JSR     sprint          ;display input prompt
00E149  2  20 E9 EB             JSR     input           ;await some input
00E14C  2               ;
00E14C  2               _0020010:
00E14C  2  20 3F EC             JSR     getcharc        ;read from buffer
00E14F  2  F0 EA                BEQ     monce           ;terminator, just loop
00E151  2               ;
00E151  2  C9 20                CMP     #a_blank
00E153  2  F0 F7                BEQ     _0020010        ;strip leading blanks
00E155  2               ;
00E155  2  A2 0C                LDX     #n_mpctab-1     ;number of primary commands
00E157  2               ;
00E157  2               _0020020:
00E157  2  DD F7 EC             CMP     mpctab,x        ;search primary command list
00E15A  2  D0 0E                BNE     _0020030
00E15C  2               ;
00E15C  2  8A                   TXA                     ;get index
00E15D  2  0A                   ASL                     ;double for offset
00E15E  2  AA                   TAX
00E15F  2  C2 20                SLONGA
00E161  2  BD 04 ED             LDA     mpcextab,x      ;command address -1
00E164  2  48                   PHA                     ;prime the stack
00E165  2  E2 20                SHORTA
00E167  2  4C 8B EA             JMP     getparm         ;evaluate parm & execute command
00E16A  2               ;
00E16A  2               _0020030:
00E16A  2  CA                   DEX
00E16B  2  10 EA                BPL     _0020020        ;continue searching primary commands
00E16D  2               ;
00E16D  2  A2 03                LDX     #n_radix-1      ;number of radices
00E16F  2               ;
00E16F  2               _0020040:
00E16F  2  DD 32 ED             CMP     radxtab,x       ;search conversion command list
00E172  2  D0 03                BNE     _0020050
00E174  2               ;
00E174  2  4C C2 E5             JMP     monenv          ;convert & display parameter
00E177  2               ;
00E177  2               _0020050:
00E177  2  CA                   DEX
00E178  2  10 F5                BPL     _0020040
00E17A  2               ;
00E17A  2               ;================================================================================
00E17A  2               ;
00E17A  2               ;monerr: COMMON ERROR HANDLER
00E17A  2               ;
00E17A  2               monerr:
00E17A  2  E2 30                SHORTR                  ;8 bit registers
00E17C  2               ;
00E17C  2               monerraa:
00E17C  2  20 89 E7             JSR     dpyerr          ;indicate an error &...
00E17F  2  80 BA                BRA     monce           ;return to input loop
00E181  2               
00E181  2               ;
00E181  2               ;================================================================================
00E181  2               ;
00E181  2               ;monasc: ASSEMBLE CODE
00E181  2               ;
00E181  2               ;	-----------------------------------------------------------------------
00E181  2               ;	syntax: A <addr> <mnemonic> [<argument>]
00E181  2               ;
00E181  2               ;	After a line of code has been successfully assembled it will be disass-
00E181  2               ;	embled & displayed,  & the monitor will prompt with the next address to
00E181  2               ;	which code may be assembled.
00E181  2               ;	-----------------------------------------------------------------------
00E181  2               ;
00E181  2               monasc:
00E181  2  90 03                BCC     _0030020        ;assembly address entered
00E183  2               ;
00E183  2               _0030010:
00E183  2  4C 7A E1             JMP     monerr          ;terminate w/error
00E186  2               ;
00E186  2               ;
00E186  2               ;	evaluate assembly address...
00E186  2               ;
00E186  2               _0030020:
00E186  2  20 7B EA             JSR     facasize        ;check address...
00E189  2  C9 04                CMP     #s_dword        ;range
00E18B  2  B0 F6                BCS     _0030010        ;out of range - error
00E18D  2               ;
00E18D  2  20 5D EA             JSR     facaddra        ;store assembly address
00E190  2               ;
00E190  2               ;
00E190  2               ;	initialize workspace...
00E190  2               ;
00E190  2  A2 1F                LDX     #s_auxbuf-s_byte
00E192  2               ;
00E192  2               _0030030:
00E192  2  9E 46 02             STZ     auxbuf,x        ;clear addressing mode buffer
00E195  2  CA                   DEX
00E196  2  D0 FA                BNE     _0030030
00E198  2               ;
00E198  2  A9 20                LDA     #a_blank
00E19A  2  8D 46 02             STA     auxbuf          ;preamble placeholder
00E19D  2  20 E1 E9             JSR     clroper         ;clear operand
00E1A0  2  64 3C                STZ     auxbufix        ;reset addressing mode index
00E1A2  2  64 4C                STZ     flimflag        ;clear forced long immediate
00E1A4  2  64 46                STZ     mnepck          ;clear encoded...
00E1A6  2  64 47                STZ     mnepck+s_byte   ;mnemonic workspace
00E1A8  2  64 4F                STZ     vopsflag        ;clear 8/16 or relative flag
00E1AA  2               ;
00E1AA  2               ;
00E1AA  2               ;	encode mnemonic...
00E1AA  2               ;
00E1AA  2  A0 03                LDY     #s_mnemon       ;expected mnemonic size
00E1AC  2               ;
00E1AC  2               _0030040:
00E1AC  2  20 DA EB             JSR     getcharw        ;get from buffer wo/whitespace
00E1AF  2  D0 0A                BNE     _0030060        ;gotten
00E1B1  2               ;
00E1B1  2  C0 03                CPY     #s_mnemon       ;any input at all?
00E1B3  2  90 03                BCC     _0030050        ;yes
00E1B5  2               ;
00E1B5  2  4C 3B E1             JMP     monce           ;no, abort further assembly
00E1B8  2               ;
00E1B8  2               _0030050:
00E1B8  2  4C 58 E3             JMP     monasc10        ;incomplete mnemonic - error
00E1BB  2               ;
00E1BB  2               _0030060:
00E1BB  2  38                   SEC
00E1BC  2  E9 3F                SBC     #a_mnecvt       ;ASCII to binary factor
00E1BE  2  A2 05                LDX     #n_shfenc       ;shifts required to encode
00E1C0  2               ;
00E1C0  2               _0030070:
00E1C0  2  4A                   LSR                     ;shift out a bit...
00E1C1  2  66 47                ROR     mnepck+s_byte   ;into...
00E1C3  2  66 46                ROR     mnepck          ;encoded mnemonic
00E1C5  2  CA                   DEX
00E1C6  2  D0 F8                BNE     _0030070        ;next bit
00E1C8  2               ;
00E1C8  2  88                   DEY
00E1C9  2  D0 E1                BNE     _0030040        ;get next char
00E1CB  2               ;
00E1CB  2               ;
00E1CB  2               ;	test for copy instruction...
00E1CB  2               ;	------------------------------------------------------------------------
00E1CB  2               ;	The MVN & MVP instructions accept two operands & hence have an irregular
00E1CB  2               ;	syntax.  Therefore, special handling is necessary to assemble either of
00E1CB  2               ;	these instructions.
00E1CB  2               ;
00E1CB  2               ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
00E1CB  2               ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
00E1CB  2               ;	operands.  This formality has been dispensed with in this monitor & the
00E1CB  2               ;	operands are expected to be 8 bit bank values.
00E1CB  2               ;	------------------------------------------------------------------------
00E1CB  2               ;
00E1CB  2  C2 20                SLONGA                  ;16 bit load
00E1CD  2  A5 46                LDA     mnepck          ;packed menmonic
00E1CF  2  A2 54                LDX     #opc_mvn        ;MVN opcode
00E1D1  2  C9 DC 7D             CMPW    mne_mvn         ;is it MVN?
00E1D4  2  F0 07                BEQ     monasc01        ;yes
00E1D6  2               ;
00E1D6  2  A2 44                LDX     #opc_mvp        ;MVP opcode
00E1D8  2  C9 DC 8D             CMPW    mne_mvp         ;is it MVP?
00E1DB  2  D0 30                BNE     monasc02        ;no
00E1DD  2               ;
00E1DD  2               ;
00E1DD  2               ;	assemble copy instruction...
00E1DD  2               ;
00E1DD  2               monasc01:
00E1DD  2  86 48                STX     opcode          ;store relevant opcode
00E1DF  2  E2 20                SHORTA
00E1E1  2  20 E9 EA             JSR     instdata        ;get instruction data
00E1E4  2  86 4B                STX     eopsize         ;effective operand size
00E1E6  2  E8                   INX
00E1E7  2  86 44                STX     instsize        ;instruction size
00E1E9  2  A2 01                LDX     #s_oper-s_word  ;operand index
00E1EB  2  86 4A                STX     xrtemp          ;set it
00E1ED  2               ;
00E1ED  2               _0040010:
00E1ED  2  20 F5 E7             JSR     ascbin          ;evaluate bank number
00E1F0  2  B0 50                BCS     monasc04        ;conversion error
00E1F2  2               ;
00E1F2  2  F0 4E                BEQ     monasc04        ;nothing returned - error
00E1F4  2               ;
00E1F4  2  20 7B EA             JSR     facasize        ;bank must be...
00E1F7  2  C9 02                CMP     #s_word         ;8 bits
00E1F9  2  B0 47                BCS     monasc04        ;it isn't - error
00E1FB  2               ;
00E1FB  2  A5 25                LDA     faca            ;bank
00E1FD  2  A6 4A                LDX     xrtemp          ;operand index
00E1FF  2  95 39                STA     operand,x       ;store
00E201  2  C6 4A                DEC     xrtemp          ;index=index-1
00E203  2  10 E8                BPL     _0040010        ;get destination bank
00E205  2               ;
00E205  2  20 7A EB             JSR     getcharr        ;should be no more input
00E208  2  D0 38                BNE     monasc04        ;there is - error
00E20A  2               ;
00E20A  2  4C 08 E3             JMP     monasc08        ;finish MVN/MVP assembly
00E20D  2               ;
00E20D  2               ;
00E20D  2               ;	continue with normal assembly...
00E20D  2               ;
00E20D  2               monasc02:
00E20D  2  E2 20                SHORTA                  ;back to 8 bits
00E20F  2               ;
00E20F  2               monasc03:
00E20F  2  20 DA EB             JSR     getcharw        ;get next char
00E212  2  F0 3D                BEQ     monasc06        ;EOI, no argument
00E214  2               ;
00E214  2  C9 21                CMP     #amp_flim
00E216  2  D0 0A                BNE     _0050010        ;no forced long immediate
00E218  2               ;
00E218  2  A5 4C                LDA     flimflag        ;FLIM already set?
00E21A  2  D0 26                BNE     monasc04        ;yes - error
00E21C  2               ;
00E21C  2  A9 C0                LDA     #flimmask
00E21E  2  85 4C                STA     flimflag        ;set flag &...
00E220  2  80 ED                BRA     monasc03        ;get next char
00E222  2               ;
00E222  2               _0050010:
00E222  2  C9 23                CMP     #amp_imm        ;immediate mode?
00E224  2  F0 08                BEQ     _0050020        ;yes
00E226  2               ;
00E226  2  C9 28                CMP     #amp_ind        ;indirect mode?
00E228  2  F0 04                BEQ     _0050020        ;yes
00E22A  2               ;
00E22A  2  C9 5B                CMP     #amp_indl       ;indirect long mode?
00E22C  2  D0 07                BNE     _0050030        ;no
00E22E  2               ;
00E22E  2               _0050020:
00E22E  2  8D 46 02             STA     auxbuf          ;set addressing mode preamble
00E231  2  E6 3C                INC     auxbufix        ;bump aux buffer index &...
00E233  2  80 02                BRA     _0050040        ;evaluate operand
00E235  2               ;
00E235  2               _0050030:
00E235  2  C6 3D                DEC     ibufidx         ;position back to char
00E237  2               ;
00E237  2               _0050040:
00E237  2  20 F5 E7             JSR     ascbin          ;evaluate operand
00E23A  2  D0 09                BNE     monasc05        ;evaluated
00E23C  2               ;
00E23C  2  B0 04                BCS     monasc04        ;conversion error
00E23E  2               ;
00E23E  2  A5 3C                LDA     auxbufix        ;no operand...any preamble?
00E240  2  F0 0F                BEQ     monasc06        ;no, syntax is okay so far
00E242  2               ;
00E242  2               monasc04:
00E242  2  4C 58 E3             JMP     monasc10        ;abort w/error
00E245  2               ;
00E245  2               monasc05:
00E245  2  20 7B EA             JSR     facasize        ;size operand
00E248  2  C9 04                CMP     #s_dword        ;max is 24 bits
00E24A  2  B0 F6                BCS     monasc04        ;too big
00E24C  2               ;
00E24C  2  85 4B                STA     eopsize         ;save operand size
00E24E  2  20 71 EA             JSR     facaoper        ;store operand
00E251  2               ;
00E251  2               monasc06:
00E251  2  C6 3D                DEC     ibufidx         ;back to last char
00E253  2  A6 3C                LDX     auxbufix        ;mode buffer index
00E255  2  D0 01                BNE     _0060010        ;preamble in buffer
00E257  2               ;
00E257  2  E8                   INX                     ;step past preamble position
00E258  2               ;
00E258  2               _0060010:
00E258  2  20 3F EC             JSR     getcharc        ;get a char w/forced UC
00E25B  2  F0 0A                BEQ     _0060030        ;EOI
00E25D  2               ;
00E25D  2  E0 20                CPX     #s_auxbuf       ;mode buffer full?
00E25F  2  B0 E1                BCS     monasc04        ;yes, too much input
00E261  2               ;
00E261  2               _0060020:
00E261  2  9D 46 02             STA     auxbuf,x        ;store for comparison
00E264  2  E8                   INX
00E265  2  D0 F1                BNE     _0060010
00E267  2               ;
00E267  2               ;
00E267  2               ;	evaluate mnemonic...
00E267  2               ;
00E267  2               _0060030:
00E267  2  A2 5B                LDX     #n_mnemon-1     ;starting mnemonic index
00E269  2               ;
00E269  2               monasc07:
00E269  2  8A                   TXA                     ;convert index...
00E26A  2  0A                   ASL                     ;to offset
00E26B  2  A8                   TAY                     ;now mnemonic table index
00E26C  2  C2 20                SLONGA                  ;16 bit compare
00E26E  2  B9 3F ED             LDA     mnetab,y        ;get mnemonic from table
00E271  2  C5 46                CMP     mnepck          ;compare to entered mnemonic
00E273  2  E2 20                SHORTA                  ;back to 8 bits
00E275  2  F0 05                BEQ     _0070020        ;match
00E277  2               ;
00E277  2               _0070010:
00E277  2  CA                   DEX                     ;try next mnemonic
00E278  2  30 C8                BMI     monasc04        ;unknown mnemonic - error
00E27A  2               ;
00E27A  2  80 ED                BRA     monasc07        ;keep going
00E27C  2               ;
00E27C  2               _0070020:
00E27C  2  86 46                STX     mnepck          ;save mnemonic index
00E27E  2  8A                   TXA
00E27F  2  A2 00                LDX     #0              ;trial opcode
00E281  2               ;
00E281  2               _0070030:
00E281  2  DD F7 ED             CMP     mnetabix,x      ;search index table...
00E284  2  F0 05                BEQ     _0070050        ;for a match
00E286  2               ;
00E286  2               _0070040:
00E286  2  E8                   INX                     ;keep going until we...
00E287  2  D0 F8                BNE     _0070030        ;search entire table
00E289  2               ;
00E289  2  80 B7                BRA     monasc04        ;this shouldn't happen!
00E28B  2               ;
00E28B  2               ;	---------------------------------------------------------------------
00E28B  2               ;	If the mnemonic index table search fails then there is a coding error
00E28B  2               ;	somewhere, as every entry in the mnemonic table is supposed to have a
00E28B  2               ;	matching cardinal index.
00E28B  2               ;	---------------------------------------------------------------------
00E28B  2               ;
00E28B  2               ;
00E28B  2               ;	evaluate addressing mode...
00E28B  2               ;
00E28B  2               _0070050:
00E28B  2  86 48                STX     opcode          ;save trial opcode
00E28D  2  20 E9 EA             JSR     instdata        ;get related instruction data
00E290  2  85 4F                STA     vopsflag        ;save 8/16 or relative flag
00E292  2  86 4D                STX     iopsize         ;operand size
00E294  2  E8                   INX
00E295  2  86 44                STX     instsize        ;instruction size
00E297  2  A6 48                LDX     opcode          ;recover trial opcode
00E299  2  98                   TYA                     ;addressing mode
00E29A  2  0A                   ASL                     ;create table index
00E29B  2  A8                   TAY
00E29C  2  C2 20                SLONGA
00E29E  2  B9 FB EF             LDA     ms_lutab,y      ;mode lookup table
00E2A1  2  85 22                STA     addrb           ;set pointer
00E2A3  2  E2 20                SHORTA
00E2A5  2  A0 00                LDY     #0
00E2A7  2               ;
00E2A7  2               _0070060:
00E2A7  2  B1 22                LDA     (addrb),y       ;table addressing mode
00E2A9  2  D9 46 02             CMP     auxbuf,y        ;entered addressing mode
00E2AC  2  F0 04                BEQ     _0070080        ;okay so far
00E2AE  2               ;
00E2AE  2               _0070070:
00E2AE  2  A5 46                LDA     mnepck          ;reload mnemonic index
00E2B0  2  80 D4                BRA     _0070040        ;wrong opcode for addresing mode
00E2B2  2               ;
00E2B2  2               _0070080:
00E2B2  2  09 00                ORA     #0              ;last char the terminator?
00E2B4  2  F0 03                BEQ     _0070090        ;yes, evaluate operand
00E2B6  2               ;
00E2B6  2  C8                   INY
00E2B7  2  80 EE                BRA     _0070060        ;keep testing
00E2B9  2               ;
00E2B9  2               ;
00E2B9  2               ;	evaluate operand...
00E2B9  2               ;
00E2B9  2               _0070090:
00E2B9  2  A5 4B                LDA     eopsize         ;entered operand size
00E2BB  2  D0 06                BNE     _0070100        ;non-zero
00E2BD  2               ;
00E2BD  2  05 4D                ORA     iopsize         ;instruction operand size
00E2BF  2  D0 ED                BNE     _0070070        ;wrong opcode - keep trying
00E2C1  2               ;
00E2C1  2  80 45                BRA     monasc08        ;assemble instruction
00E2C3  2               ;
00E2C3  2               _0070100:
00E2C3  2  24 4F                BIT     vopsflag        ;is this a branch?
00E2C5  2  70 3A                BVS     _0070160        ;yes, evaluate
00E2C7  2               ;
00E2C7  2  A5 4D                LDA     iopsize         ;instruction operand size
00E2C9  2  24 4F                BIT     vopsflag        ;variable size operand allowed?
00E2CB  2  30 15                BMI     _0070130        ;yes
00E2CD  2               ;
00E2CD  2  24 4C                BIT     flimflag        ;was forced immediate set?
00E2CF  2  10 03                BPL     _0070110        ;no
00E2D1  2               ;
00E2D1  2  4C 58 E3             JMP     monasc10        ;yes - error
00E2D4  2               ;
00E2D4  2               _0070110:
00E2D4  2  C5 4B                CMP     eopsize         ;entered operand size
00E2D6  2  90 D6                BCC     _0070070        ;operand too big
00E2D8  2               ;
00E2D8  2  85 4B                STA     eopsize         ;new operand size
00E2DA  2  80 2C                BRA     monasc08        ;assemble, otherwise...
00E2DC  2               ;
00E2DC  2               _0070120:
00E2DC  2  C5 4B                CMP     eopsize         ;exact size match required
00E2DE  2  D0 CE                BNE     _0070070        ;mismatch - wrong opcode
00E2E0  2               ;
00E2E0  2  80 26                BRA     monasc08        ;assemble
00E2E2  2               ;
00E2E2  2               ;
00E2E2  2               ;	process variable size immediate mode operand...
00E2E2  2               ;
00E2E2  2               _0070130:
00E2E2  2  A6 4B                LDX     eopsize         ;entered operand size
00E2E4  2  E0 03                CPX     #s_xword        ;check size
00E2E6  2  B0 70                BCS     monasc10        ;too big - error
00E2E8  2               ;
00E2E8  2  24 4C                BIT     flimflag        ;forced long immediate?
00E2EA  2  10 06                BPL     _0070140        ;no
00E2EC  2               ;
00E2EC  2  A2 02                LDX     #s_word         ;promote operand size to...
00E2EE  2  86 4B                STX     eopsize         ;16 bits
00E2F0  2  80 08                BRA     _0070150
00E2F2  2               ;
00E2F2  2               _0070140:
00E2F2  2  E0 02                CPX     #s_word         ;16 bits?
00E2F4  2  D0 04                BNE     _0070150        ;no
00E2F6  2               ;
00E2F6  2  A0 C0                LDY     #flimmask       ;yes so force long...
00E2F8  2  84 4C                STY     flimflag        ;immediate disassembly
00E2FA  2               ;
00E2FA  2               _0070150:
00E2FA  2  1A                   INA                     ;new instruction operand size
00E2FB  2  C5 4B                CMP     eopsize         ;compare against operand size
00E2FD  2  90 AF                BCC     _0070070        ;mismatch - can't assemble
00E2FF  2               ;
00E2FF  2  80 07                BRA     monasc08        ;okay, assemble
00E301  2               ;
00E301  2               ;
00E301  2               ;	process relative branch...
00E301  2               ;
00E301  2               _0070160:
00E301  2  20 35 EB             JSR     targoff         ;compute branch offset
00E304  2  B0 52                BCS     monasc10        ;branch out of range
00E306  2               ;
00E306  2  85 4B                STA     eopsize         ;effective operand size
00E308  2               ;
00E308  2               ;
00E308  2               ;	assemble instruction...
00E308  2               ;
00E308  2               monasc08:
00E308  2  A5 48                LDA     opcode          ;opcode
00E30A  2  87 1F                STAIL   addra           ;store at assembly address
00E30C  2  A6 4B                LDX     eopsize         ;any operand to process?
00E30E  2  F0 09                BEQ     _0080020        ;no
00E310  2               ;
00E310  2  9B                   TXY                     ;also storage offset
00E311  2               ;
00E311  2               _0080010:
00E311  2  CA                   DEX
00E312  2  B5 39                LDA     operand,x       ;get operand byte &...
00E314  2  97 1F                STAILY  addra           ;poke into memory
00E316  2  88                   DEY
00E317  2  D0 F8                BNE     _0080010        ;next
00E319  2               ;
00E319  2               _0080020:
00E319  2  A9 0D                LDA     #a_cr
00E31B  2  20 71 FF             JSR     putcha          ;return to left margin
00E31E  2  A9 41                LDA     #asmprfx        ;assembly prefix
00E320  2  20 45 E6             JSR     dpycodaa        ;disassemble & display
00E323  2               ;
00E323  2               ;
00E323  2               ;	prompt for next instruction...
00E323  2               ;
00E323  2               monasc09:
00E323  2  A9 20                LDA     #a_blank
00E325  2  A2 08                LDX     #ascprmct-1
00E327  2               ;
00E327  2               _0090010:
00E327  2  9D 00 02             STA     ibuffer,x       ;prepare buffer for...
00E32A  2  CA                   DEX                     ;next instruction
00E32B  2  10 FA                BPL     _0090010
00E32D  2               ;
00E32D  2  A9 41                LDA     #asmprfx        ;assemble code...
00E32F  2  8D 00 02             STA     ibuffer         ;prompt prefix
00E332  2  A5 21                LDA     addra+s_word    ;next instruction address bank
00E334  2  20 4D E9             JSR     binhex          ;convert to ASCII
00E337  2  8D 02 02             STA     ibuffer+apadrbkh;store MSN in buffer
00E33A  2  8E 03 02             STX     ibuffer+apadrbkl;store LSN in buffer
00E33D  2  A5 20                LDA     addra+s_byte    ;next instruction address MSB
00E33F  2  20 4D E9             JSR     binhex
00E342  2  8D 04 02             STA     ibuffer+apadrmbh
00E345  2  8E 05 02             STX     ibuffer+apadrmbl
00E348  2  A5 1F                LDA     addra           ;next instruction address LSB
00E34A  2  20 4D E9             JSR     binhex
00E34D  2  8D 06 02             STA     ibuffer+apadrlbh
00E350  2  8E 07 02             STX     ibuffer+apadrlbl
00E353  2  A9 09                LDA     #ascprmct       ;effective input count
00E355  2  4C 3F E1             JMP     moncea          ;reenter input loop
00E358  2               ;
00E358  2               ;
00E358  2               ;	process assembly error...
00E358  2               ;
00E358  2               monasc10:
00E358  2  20 89 E7             JSR     dpyerr          ;indicate error &...
00E35B  2  80 C6                BRA     monasc09        ;prompt w/same assembly address
00E35D  2               ;
00E35D  2               ;================================================================================
00E35D  2               ;
00E35D  2               ;mondsc: DISASSEMBLE CODE
00E35D  2               ;
00E35D  2               ;	-----------------------------
00E35D  2               ;	syntax: D [<addr1> [<addr2>]]
00E35D  2               ;	-----------------------------
00E35D  2               ;
00E35D  2               mondsc:
00E35D  2  B0 11                BCS     _0100010        ;no parameters
00E35F  2               ;
00E35F  2  64 4C                STZ     flimflag        ;reset to 8 bit mode
00E361  2  20 7B EA             JSR     facasize        ;check starting...
00E364  2  C9 04                CMP     #s_dword        ;address
00E366  2  B0 46                BCS     _0100050        ;out of range - error
00E368  2               ;
00E368  2  20 5D EA             JSR     facaddra        ;copy starting address
00E36B  2  20 8B EA             JSR     getparm         ;get ending address
00E36E  2  90 17                BCC     _0100020        ;gotten
00E370  2               ;
00E370  2               _0100010:
00E370  2  20 60 E9             JSR     clrfaca         ;clear accumulator
00E373  2  C2 20                SLONGA
00E375  2  18                   CLC
00E376  2  A5 1F                LDA     addra           ;starting address
00E378  2  69 15 00             ADCW    n_dbytes        ;default bytes
00E37B  2  85 25                STA     faca            ;effective ending address
00E37D  2  E2 20                SHORTA
00E37F  2  A5 21                LDA     addra+s_word    ;starting bank
00E381  2  69 00                ADC     #0
00E383  2  85 27                STA     faca+s_word     ;effective ending bank
00E385  2  B0 27                BCS     _0100050        ;end address > $FFFFFF
00E387  2               ;
00E387  2               _0100020:
00E387  2  20 7B EA             JSR     facasize        ;check ending...
00E38A  2  C9 04                CMP     #s_dword        ;address
00E38C  2  B0 20                BCS     _0100050        ;out of range - error
00E38E  2               ;
00E38E  2  20 67 EA             JSR     facaddrb        ;set ending address
00E391  2  20 8B EA             JSR     getparm         ;check for excess input
00E394  2  90 18                BCC     _0100050        ;present - error
00E396  2               ;
00E396  2  20 CC E9             JSR     calccnt         ;calculate bytes
00E399  2  90 13                BCC     _0100050        ;end < start
00E39B  2               ;
00E39B  2               _0100030:
00E39B  2  20 4F EC             JSR     teststop        ;test for display stop
00E39E  2  B0 0B                BCS     _0100040        ;stopped
00E3A0  2               ;
00E3A0  2  20 C7 E7             JSR     newline         ;next line
00E3A3  2  20 43 E6             JSR     dpycod          ;disassemble & display
00E3A6  2  20 13 EA             JSR     decdcnt         ;decrement byte count
00E3A9  2  90 F0                BCC     _0100030        ;not done
00E3AB  2               ;
00E3AB  2               _0100040:
00E3AB  2  4C 3B E1             JMP     monce           ;back to main loop
00E3AE  2               ;
00E3AE  2               _0100050:
00E3AE  2  4C 7A E1             JMP     monerr          ;address range error
00E3B1  2               ;
00E3B1  2               ;================================================================================
00E3B1  2               ;
00E3B1  2               ;monjmp: EXECUTE CODE
00E3B1  2               ;
00E3B1  2               ;	-------------------------------------------------------------
00E3B1  2               ;	syntax: G [<dp>]
00E3B1  2               ;
00E3B1  2               ;	If no address is specified, the current values in the PB & PC
00E3B1  2               ;	shadow registers are used.
00E3B1  2               ;	-------------------------------------------------------------
00E3B1  2               ;
00E3B1  2               monjmp:
00E3B1  2  20 1E EB             JSR     setxaddr        ;set execution address
00E3B4  2  B0 29                BCS     monjmpab        ;out of range - error
00E3B6  2               ;
00E3B6  2  20 8B EA             JSR     getparm         ;check for excess input
00E3B9  2  90 24                BCC     monjmpab        ;too much input - error
00E3BB  2               ;
00E3BB  2  C2 20                SLONGA                  ;16 bit .A
00E3BD  2  A5 1A                LDA     reg_spx
00E3BF  2  1B                   TCS                     ;restore SP
00E3C0  2               ;
00E3C0  2               monjmpaa:
00E3C0  2  E2 20                SHORTA
00E3C2  2  A5 10                LDA     reg_pbx
00E3C4  2  48                   PHA                     ;restore PB
00E3C5  2  C2 20                SLONGA
00E3C7  2  A5 11                LDA     reg_pcx
00E3C9  2  48                   PHA                     ;restore PC
00E3CA  2  E2 20                SHORTA
00E3CC  2  A5 13                LDA     reg_srx
00E3CE  2  48                   PHA                     ;restore SR
00E3CF  2  A5 1E                LDA     reg_dbx
00E3D1  2  48                   PHA
00E3D2  2  AB                   PLB                     ;restore DB
00E3D3  2  C2 30                LONGR
00E3D5  2  A5 1C                LDA     reg_dpx
00E3D7  2  5B                   TCD                     ;restore DP
00E3D8  2  A5 14                LDA     reg_ax          ;restore .C
00E3DA  2  A6 16                LDX     reg_xx          ;restore .X
00E3DC  2  A4 18                LDY     reg_yx          ;restore .Y
00E3DE  2  40                   RTI                     ;execute code
00E3DF  2               ;
00E3DF  2               monjmpab:
00E3DF  2  4C 7A E1             JMP     monerr          ;error
00E3E2  2               ;
00E3E2  2               ;================================================================================
00E3E2  2               ;
00E3E2  2               ;monjsr: EXECUTE CODE AS SUBROUTINE
00E3E2  2               ;
00E3E2  2               ;	------------------------------------------------------------
00E3E2  2               ;	syntax: J [<dp>]
00E3E2  2               ;
00E3E2  2               ;	If no address is specified the current values in the PB & PC
00E3E2  2               ;	shadow registers are used.   An RTS at the end of the called
00E3E2  2               ;	subroutine will return control to the monitor  provided  the
00E3E2  2               ;	stack remains in balance.
00E3E2  2               ;	------------------------------------------------------------
00E3E2  2               ;
00E3E2  2               monjsr:
00E3E2  2  20 1E EB             JSR     setxaddr        ;set execution address
00E3E5  2  B0 F8                BCS     monjmpab        ;out of range - error
00E3E7  2               ;
00E3E7  2  20 8B EA             JSR     getparm         ;check for excess input
00E3EA  2  90 F3                BCC     monjmpab        ;too much input - error
00E3EC  2               ;
00E3EC  2  C2 20                SLONGA
00E3EE  2  A5 1A                LDA     reg_spx
00E3F0  2  1B                   TCS                     ;restore SP &...
00E3F1  2  20 C0 E3             JSR     monjmpaa        ;call subroutine
00E3F4  2  08                   PHP                     ;push SR
00E3F5  2  C2 30                LONGR
00E3F7  2  85 14                STA     reg_ax          ;save...
00E3F9  2  86 16                STX     reg_xx          ;register...
00E3FB  2  84 18                STY     reg_yx          ;returns
00E3FD  2  E2 10                SHORTX                  ;8 bit .X & .Y
00E3FF  2  FA                   PLX                     ;get & save...
00E400  2  86 13                STX     reg_srx         ;return SR
00E402  2  3B                   TSC                     ;get & save...
00E403  2  85 1A                STA     reg_spx         ;return SP
00E405  2  7B                   TDC                     ;get & save...
00E406  2  85 1C                STA     reg_dpx         ;DP pointer
00E408  2  E2 20                SHORTA                  ;8 bit .A
00E40A  2  4B                   PHK                     ;get &...
00E40B  2  68                   PLA                     ;save...
00E40C  2  85 10                STA     reg_pbx         ;return PB
00E40E  2  8B                   PHB                     ;get &...
00E40F  2  68                   PLA                     ;save...
00E410  2  85 1E                STA     reg_dbx         ;return DB
00E412  2  F4 B5 F0             PEA     mm_rts          ;"*RET"
00E415  2  4C D0 E0             JMP     moncom          ;return to monitor
00E418  2               ;
00E418  2               ;================================================================================
00E418  2               ;
00E418  2               ;monchm: CHANGE and/or DUMP MEMORY
00E418  2               ;
00E418  2               ;	--------------------------------------------
00E418  2               ;	syntax: > [<addr> <operand> [<operand>]...]
00E418  2               ;
00E418  2               ;	> <addr> without operands will dump 16 bytes
00E418  2               ;	of memory, starting at <addr>.
00E418  2               ;	--------------------------------------------
00E418  2               ;
00E418  2               monchm:
00E418  2  B0 23                BCS     _0110030        ;no address given - quit
00E41A  2               ;
00E41A  2  20 7B EA             JSR     facasize        ;size address
00E41D  2  C9 04                CMP     #s_dword
00E41F  2  B0 1F                BCS     _0110040        ;address out of range - error
00E421  2               ;
00E421  2  20 5D EA             JSR     facaddra        ;set starting address
00E424  2  20 8E EB             JSR     getpat          ;evaluate change pattern
00E427  2  90 04                BCC     _0110010        ;entered
00E429  2               ;
00E429  2  10 0C                BPL     _0110020        ;not entered
00E42B  2               ;
00E42B  2  80 13                BRA     _0110040        ;evaluation error
00E42D  2               ;
00E42D  2               _0110010:
00E42D  2  88                   DEY                     ;next byte
00E42E  2  30 07                BMI     _0110020        ;done
00E430  2               ;
00E430  2  B9 46 02             LDA     auxbuf,y        ;write pattern...
00E433  2  97 1F                STAILY  addra           ;to memory
00E435  2  80 F6                BRA     _0110010        ;next
00E437  2               ;
00E437  2               _0110020:
00E437  2  20 C7 E7             JSR     newline         ;next line
00E43A  2  20 55 E7             JSR     dpymem          ;regurgitate changes
00E43D  2               ;
00E43D  2               _0110030:
00E43D  2  4C 3B E1             JMP     monce           ;back to command loop
00E440  2               ;
00E440  2               _0110040:
00E440  2  4C 7A E1             JMP     monerr          ;goto error handler
00E443  2               ;
00E443  2               ;================================================================================
00E443  2               ;
00E443  2               ;moncmp: COMPARE MEMORY
00E443  2               ;
00E443  2               ;	-----------------------------
00E443  2               ;	syntax: C <start> <end> <ref>
00E443  2               ;	-----------------------------
00E443  2               ;
00E443  2               moncmp:
00E443  2  B0 26                BCS     _0120030        ;start not given - quit
00E445  2               ;
00E445  2  20 37 EA             JSR     enddest         ;get end & reference addresses
00E448  2  B0 24                BCS     _0120040        ;range or other error
00E44A  2               ;
00E44A  2  64 4A                STZ     xrtemp          ;column counter
00E44C  2               ;
00E44C  2               _0120010:
00E44C  2  20 4F EC             JSR     teststop        ;check for stop
00E44F  2  B0 1A                BCS     _0120030        ;abort
00E451  2               ;
00E451  2  A7 1F                LDAIL   addra           ;get from reference location
00E453  2  C7 39                CMPIL   operand         ;test against compare location
00E455  2  F0 03                BEQ     _0120020        ;match, don't display address
00E457  2               ;
00E457  2  20 2B E6             JSR     dpycaddr        ;display current location
00E45A  2               ;
00E45A  2               _0120020:
00E45A  2  20 B3 EA             JSR     nxtaddra        ;next reference location
00E45D  2  B0 0C                BCS     _0120030        ;done
00E45F  2               ;
00E45F  2  C2 20                SLONGA
00E461  2  E6 39                INC     operand         ;bump bits 0-15
00E463  2  E2 20                SHORTA
00E465  2  D0 E5                BNE     _0120010
00E467  2               ;
00E467  2  E6 3B                INC     operand+s_word  ;bump bits 16-23
00E469  2  80 E1                BRA     _0120010
00E46B  2               ;
00E46B  2               _0120030:
00E46B  2  4C 3B E1             JMP     monce           ;return to command exec
00E46E  2               ;
00E46E  2               _0120040:
00E46E  2  4C 7A E1             JMP     monerr          ;goto error handler
00E471  2               ;
00E471  2               ;================================================================================
00E471  2               ;
00E471  2               ;moncpy: COPY (transfer) MEMORY
00E471  2               ;
00E471  2               ;	--------------------------------
00E471  2               ;	syntax: T <start> <end> <target>
00E471  2               ;	--------------------------------
00E471  2               ;
00E471  2               moncpy:
00E471  2  B0 49                BCS     _0130040        ;start not given - quit
00E473  2               ;
00E473  2  20 37 EA             JSR     enddest         ;get end & target addresses
00E476  2  B0 47                BCS     _0130050        ;range or other error
00E478  2               ;
00E478  2  C2 20                SLONGA
00E47A  2  38                   SEC
00E47B  2  A5 22                LDA     addrb           ;ending address
00E47D  2  E5 1F                SBC     addra           ;starting address
00E47F  2  90 3E                BCC     _0130050        ;start > end - error
00E481  2               ;
00E481  2  85 2D                STA     facb            ;bytes to copy
00E483  2  E2 20                SHORTA
00E485  2  C2 10                LONGX
00E487  2  A5 3B                LDA     operand+s_word  ;target bank
00E489  2  A4 39                LDY     operand         ;target address
00E48B  2  C5 21                CMP     addra+s_word    ;source bank
00E48D  2  C2 20                SLONGA
00E48F  2  D0 1C                BNE     _0130020        ;can use forward copy
00E491  2               ;
00E491  2  C4 1F                CPY     addra           ;source address
00E493  2  90 18                BCC     _0130020        ;can use forward copy
00E495  2               ;
00E495  2  D0 02                BNE     _0130010        ;must use reverse copy
00E497  2               ;
00E497  2  80 26                BRA     _0130050        ;copy in place - error
00E499  2               ;
00E499  2               _0130010:
00E499  2  A5 2D                LDA     facb            ;get bytes to copy
00E49B  2  48                   PHA                     ;protect
00E49C  2  20 37 EC             JSR     lodbnk          ;load banks
00E49F  2  20 F4 E9             JSR     cprvsup         ;do reverse copy setup
00E4A2  2  68                   PLA                     ;get bytes to copy
00E4A3  2  AA                   TAX                     ;save a copy
00E4A4  2  18                   CLC
00E4A5  2  65 39                ADC     operand         ;change target to...
00E4A7  2  A8                   TAY                     ;target end
00E4A8  2  8A                   TXA                     ;recover bytes to copy
00E4A9  2  A6 22                LDX     addrb           ;source end
00E4AB  2  80 0C                BRA     _0130030
00E4AD  2               ;
00E4AD  2               _0130020:
00E4AD  2  A5 2D                LDA     facb            ;get bytes to copy
00E4AF  2  48                   PHA                     ;protect
00E4B0  2  20 37 EC             JSR     lodbnk          ;load banks
00E4B3  2  20 ED E9             JSR     cpfwsup         ;do forward copy setup
00E4B6  2  68                   PLA                     ;get bytes to copy
00E4B7  2  A6 1F                LDX     addra           ;source start
00E4B9  2               ;
00E4B9  2               _0130030:
00E4B9  2  4C 25 00             JMP     mcftwork        ;copy memory
00E4BC  2               ;
00E4BC  2               _0130040:
00E4BC  2  4C 3B E1             JMP     monce           ;back to executive
00E4BF  2               ;
00E4BF  2               _0130050:
00E4BF  2  4C 7A E1             JMP     monerr          ;error
00E4C2  2               ;
00E4C2  2               ;================================================================================
00E4C2  2               ;
00E4C2  2               ;mondmp: DISPLAY MEMORY RANGE
00E4C2  2               ;
00E4C2  2               ;	-----------------------------
00E4C2  2               ;	syntax: M [<addr1> [<addr2>]]
00E4C2  2               ;	-----------------------------
00E4C2  2               ;
00E4C2  2               mondmp:
00E4C2  2  B0 0F                BCS     _0140010        ;no parameters
00E4C4  2               ;
00E4C4  2  20 7B EA             JSR     facasize        ;check address...
00E4C7  2  C9 04                CMP     #s_dword        ;range
00E4C9  2  B0 46                BCS     _0140050        ;address out of range
00E4CB  2               ;
00E4CB  2  20 5D EA             JSR     facaddra        ;copy starting address
00E4CE  2  20 8B EA             JSR     getparm         ;get ending address
00E4D1  2  90 17                BCC     _0140020        ;gotten
00E4D3  2               ;
00E4D3  2               _0140010:
00E4D3  2  20 60 E9             JSR     clrfaca         ;clear accumulator
00E4D6  2  C2 20                SLONGA
00E4D8  2  18                   CLC
00E4D9  2  A5 1F                LDA     addra           ;starting address
00E4DB  2  69 FF 00             ADCW    n_mbytes        ;default bytes
00E4DE  2  85 25                STA     faca            ;effective ending address
00E4E0  2  E2 20                SHORTA
00E4E2  2  A5 21                LDA     addra+s_word    ;starting bank
00E4E4  2  69 00                ADC     #0
00E4E6  2  85 27                STA     faca+s_word     ;effective ending bank
00E4E8  2  B0 27                BCS     _0140050        ;end address > $FFFFFF
00E4EA  2               ;
00E4EA  2               _0140020:
00E4EA  2  20 7B EA             JSR     facasize        ;check ending address...
00E4ED  2  C9 04                CMP     #s_dword        ;range
00E4EF  2  B0 20                BCS     _0140050        ;out of range - error
00E4F1  2               ;
00E4F1  2  20 67 EA             JSR     facaddrb        ;copy ending address
00E4F4  2  20 8B EA             JSR     getparm         ;check for excess input
00E4F7  2  90 18                BCC     _0140050        ;error
00E4F9  2               ;
00E4F9  2  20 CC E9             JSR     calccnt         ;calculate bytes to dump
00E4FC  2  90 13                BCC     _0140050        ;end < start
00E4FE  2               ;
00E4FE  2               _0140030:
00E4FE  2  20 4F EC             JSR     teststop        ;test for display stop
00E501  2  B0 0B                BCS     _0140040        ;stopped
00E503  2               ;
00E503  2  20 C7 E7             JSR     newline         ;next line
00E506  2  20 55 E7             JSR     dpymem          ;display
00E509  2  20 13 EA             JSR     decdcnt         ;decrement byte count
00E50C  2  90 F0                BCC     _0140030        ;not done
00E50E  2               ;
00E50E  2               _0140040:
00E50E  2  4C 3B E1             JMP     monce           ;back to main loop
00E511  2               ;
00E511  2               _0140050:
00E511  2  4C 7A E1             JMP     monerr          ;address range error
00E514  2               ;
00E514  2               ;================================================================================
00E514  2               ;
00E514  2               ;monfil: FILL MEMORY
00E514  2               ;
00E514  2               ;	-----------------------------------------
00E514  2               ;	syntax: F <start> <end> <fill>
00E514  2               ;
00E514  2               ;	<start> & <end> must be in the same bank.
00E514  2               ;	-----------------------------------------
00E514  2               ;
00E514  2               monfil:
00E514  2  B0 5E                BCS     _0150010        ;start not given - quit
00E516  2               ;
00E516  2  20 7B EA             JSR     facasize        ;check size
00E519  2  C9 04                CMP     #s_dword
00E51B  2  B0 5A                BCS     _0150020        ;out of range - error...
00E51D  2               ;
00E51D  2  20 5D EA             JSR     facaddra        ;store start
00E520  2  20 8B EA             JSR     getparm         ;evaluate end
00E523  2  B0 52                BCS     _0150020        ;not entered - error
00E525  2               ;
00E525  2  20 7B EA             JSR     facasize        ;check size
00E528  2  C9 04                CMP     #s_dword
00E52A  2  B0 4B                BCS     _0150020        ;out of range - error
00E52C  2               ;
00E52C  2  A5 27                LDA     faca+s_word     ;end bank
00E52E  2  C5 21                CMP     addra+s_word    ;start bank
00E530  2  D0 45                BNE     _0150020        ;not same - error
00E532  2               ;
00E532  2  20 67 EA             JSR     facaddrb        ;store <end>
00E535  2  C2 20                SLONGA
00E537  2  38                   SEC
00E538  2  A5 22                LDA     addrb           ;ending address
00E53A  2  E5 1F                SBC     addra           ;starting address
00E53C  2  90 39                BCC     _0150020        ;start > end - error
00E53E  2               ;
00E53E  2  85 2D                STA     facb            ;bytes to copy
00E540  2  E2 20                SHORTA
00E542  2  20 8B EA             JSR     getparm         ;evaluate <fill>
00E545  2  B0 30                BCS     _0150020        ;not entered - error
00E547  2               ;
00E547  2  20 7B EA             JSR     facasize        ;<fill> should be...
00E54A  2  C9 02                CMP     #s_word         ;8 bits
00E54C  2  B0 29                BCS     _0150020        ;it isn't - error
00E54E  2               ;
00E54E  2  20 71 EA             JSR     facaoper        ;store <fill>
00E551  2  20 8B EA             JSR     getparm         ;should be no more parameters
00E554  2  90 21                BCC     _0150020        ;there are - error
00E556  2               ;
00E556  2  A5 39                LDA     operand         ;<fill>
00E558  2  87 1F                STAIL   addra           ;fill 1st location
00E55A  2  C2 30                LONGR                   ;16 bit operations
00E55C  2  A5 2D                LDA     facb            ;get byte count
00E55E  2  F0 14                BEQ     _0150010        ;only 1 location - finished
00E560  2               ;
00E560  2  3A                   DEA                     ;zero align &...
00E561  2  48                   PHA                     ;protect
00E562  2  E2 20                SHORTA
00E564  2  A5 21                LDA     addra+s_word    ;start bank
00E566  2  EB                   XBA
00E567  2  A5 24                LDA     addrb+s_word    ;end bank
00E569  2  20 ED E9             JSR     cpfwsup         ;do forward copy setup
00E56C  2  68                   PLA                     ;recover fill count
00E56D  2  A6 1F                LDX     addra           ;fill-from starting location
00E56F  2  9B                   TXY
00E570  2  C8                   INY                     ;fill-to starting location
00E571  2  4C 25 00             JMP     mcftwork        ;fill memory
00E574  2               ;
00E574  2               _0150010:
00E574  2  4C 3B E1             JMP     monce           ;goto command executive
00E577  2               ;
00E577  2               _0150020:
00E577  2  4C 7A E1             JMP     monerr          ;goto error handler
00E57A  2               ;
00E57A  2               ;================================================================================
00E57A  2               ;
00E57A  2               ;monhnt: SEARCH (hunt) MEMORY
00E57A  2               ;
00E57A  2               ;	-----------------------------------
00E57A  2               ;	syntax: H <addr1> <addr2> <pattern>
00E57A  2               ;	-----------------------------------
00E57A  2               ;
00E57A  2               monhnt:
00E57A  2  B0 40                BCS     _0160050        ;no start address
00E57C  2               ;
00E57C  2  20 7B EA             JSR     facasize        ;size starting address
00E57F  2  C9 04                CMP     #s_dword
00E581  2  B0 3C                BCS     _0160060        ;address out of range - error
00E583  2               ;
00E583  2  20 5D EA             JSR     facaddra        ;store starting address
00E586  2  20 8B EA             JSR     getparm         ;evaluate ending address
00E589  2  B0 34                BCS     _0160060        ;no address - error
00E58B  2               ;
00E58B  2  20 7B EA             JSR     facasize        ;size ending address
00E58E  2  C9 04                CMP     #s_dword
00E590  2  B0 2D                BCS     _0160060        ;address out of range - error
00E592  2               ;
00E592  2  20 67 EA             JSR     facaddrb        ;store ending address
00E595  2  20 CC E9             JSR     calccnt         ;calculate byte range
00E598  2  90 25                BCC     _0160060        ;end < start
00E59A  2               ;
00E59A  2  20 8E EB             JSR     getpat          ;evaluate search pattern
00E59D  2  B0 20                BCS     _0160060        ;error
00E59F  2               ;
00E59F  2  64 4A                STZ     xrtemp          ;clear column counter
00E5A1  2               ;
00E5A1  2               _0160010:
00E5A1  2  20 4F EC             JSR     teststop        ;check for stop
00E5A4  2  B0 16                BCS     _0160050        ;abort
00E5A6  2               ;
00E5A6  2  A4 3C                LDY     auxbufix        ;pattern index
00E5A8  2               ;
00E5A8  2               _0160020:
00E5A8  2  88                   DEY
00E5A9  2  30 09                BMI     _0160030        ;pattern match
00E5AB  2               ;
00E5AB  2  B7 1F                LDAILY  addra           ;get from memory
00E5AD  2  D9 46 02             CMP     auxbuf,y        ;test against pattern
00E5B0  2  D0 05                BNE     _0160040        ;mismatch, next location
00E5B2  2               ;
00E5B2  2  F0 F4                BEQ     _0160020        ;match, keep testing
00E5B4  2               ;
00E5B4  2               _0160030:
00E5B4  2  20 2B E6             JSR     dpycaddr        ;display current location
00E5B7  2               ;
00E5B7  2               _0160040:
00E5B7  2  20 B3 EA             JSR     nxtaddra        ;next location
00E5BA  2  90 E5                BCC     _0160010        ;not done
00E5BC  2               ;
00E5BC  2               _0160050:
00E5BC  2  4C 3B E1             JMP     monce           ;back to executive
00E5BF  2               ;
00E5BF  2               _0160060:
00E5BF  2  4C 7A E1             JMP     monerr          ;goto error handler
00E5C2  2               ;
00E5C2  2               ;================================================================================
00E5C2  2               ;
00E5C2  2               ;monenv: CONVERT NUMERIC VALUE
00E5C2  2               ;
00E5C2  2               ;	----------------------
00E5C2  2               ;	syntax: <radix><value>
00E5C2  2               ;	----------------------
00E5C2  2               ;
00E5C2  2               monenv:
00E5C2  2  20 89 EA             JSR     getparmr        ;reread & evaluate parameter
00E5C5  2  B0 26                BCS     _0170020        ;none entered
00E5C7  2               ;
00E5C7  2  A2 00                LDX     #0              ;radix index
00E5C9  2  A0 04                LDY     #n_radix        ;number of radices
00E5CB  2               ;
00E5CB  2               _0170010:
00E5CB  2  5A                   PHY                     ;save counter
00E5CC  2  DA                   PHX                     ;save radix index
00E5CD  2  20 C7 E7             JSR     newline         ;next line &...
00E5D0  2  20 4F E7             JSR     clearlin        ;clear it
00E5D3  2  A9 20                LDA     #a_blank
00E5D5  2  A2 04                LDX     #halftab
00E5D7  2  20 BC E7             JSR     multspc         ;indent 1/2 tab
00E5DA  2  FA                   PLX                     ;get radix index but...
00E5DB  2  DA                   PHX                     ;put it back
00E5DC  2  BD 32 ED             LDA     radxtab,x       ;get radix
00E5DF  2  20 B9 E8             JSR     binasc          ;convert to ASCII
00E5E2  2  5A                   PHY                     ;string address MSB
00E5E3  2  DA                   PHX                     ;string address LSB
00E5E4  2  20 DC E7             JSR     sprint          ;print
00E5E7  2  FA                   PLX                     ;get index again
00E5E8  2  7A                   PLY                     ;get counter
00E5E9  2  E8                   INX
00E5EA  2  88                   DEY                     ;all radices handled?
00E5EB  2  D0 DE                BNE     _0170010        ;no
00E5ED  2               
00E5ED  2               _0170020:
00E5ED  2  4C 3B E1             JMP     monce           ;back to command exec
00E5F0  2               ;
00E5F0  2               ;================================================================================
00E5F0  2               ;
00E5F0  2               ;monchr: CHANGE REGISTERS
00E5F0  2               ;
00E5F0  2               ;	------------------------------------------------------
00E5F0  2               ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
00E5F0  2               ;
00E5F0  2               ;	; with no parameters is the same as the R command.
00E5F0  2               ;	------------------------------------------------------
00E5F0  2               ;
00E5F0  2               monchr:
00E5F0  2  B0 33                BCS     _0570040        ;dump registers & quit
00E5F2  2               ;
00E5F2  2  A0 00                LDY     #0              ;register counter
00E5F4  2  84 33                STY     facc            ;initialize register index
00E5F6  2               ;
00E5F6  2               _0570010:
00E5F6  2  20 7B EA             JSR     facasize        ;get parameter size
00E5F9  2  D9 36 ED             CMP     rcvltab,y       ;check against size table
00E5FC  2  B0 2A                BCS     _0570050        ;out of range
00E5FE  2               ;
00E5FE  2  B9 36 ED             LDA     rcvltab,y       ;determine number of bytes...
00E601  2  C9 03                CMP     #s_word+1       ;to store
00E603  2  66 34                ROR     facc+s_byte     ;condition flag
00E605  2  10 02                BPL     _0570020        ;8 bit register size
00E607  2               ;
00E607  2  C2 20                SLONGA                  ;16 bit register size
00E609  2               ;
00E609  2               _0570020:
00E609  2  A6 33                LDX     facc            ;get register index
00E60B  2  A5 25                LDA     faca            ;get parm
00E60D  2  95 10                STA     reg_pbx,x       ;put in shadow storage
00E60F  2  E2 20                SHORTA
00E611  2  06 34                ASL     facc+s_byte     ;mode flag to carry
00E613  2  8A                   TXA                     ;register index
00E614  2  69 01                ADC     #s_byte         ;at least 1 byte stored
00E616  2  85 33                STA     facc            ;save new index
00E618  2  20 8B EA             JSR     getparm         ;get a parameter
00E61B  2  B0 08                BCS     _0570040        ;EOI
00E61D  2               ;
00E61D  2  C8                   INY                     ;bump register count
00E61E  2  C0 09                CPY     #n_regchv       ;all registers processed?
00E620  2  D0 D4                BNE     _0570010        ;no, keep going
00E622  2               ;
00E622  2               _0570030:
00E622  2  20 D3 E7             JSR     alert           ;excessive input
00E625  2               ;
00E625  2               _0570040:
00E625  2  4C DD E0             JMP     monreg          ;display changes
00E628  2               ;
00E628  2               _0570050:
00E628  2  4C 7A E1             JMP     monerr          ;goto error handler
00E62B  2               ;
00E62B  2               ;================================================================================
00E62B  2               ;
00E62B  2               ;monxit: EXIT TO OPERATING ENVIRONMENT
00E62B  2               ;
00E62B  2               ;	---------
00E62B  2               ;	syntax: X
00E62B  2               ;	---------
00E62B  2               ;
00E62B  2               ;monxit   bcc _0180020          ;no parameters allowed
00E62B  2               ;
00E62B  2               ;         slonga
00E62B  2               ;        lda vecbrki           ;BRK indirect vector
00E62B  2               ;         cmpw monbrk           ;we intercept it?
00E62B  2               ;         bne _0180010          ;no, don't change it
00E62B  2               ;
00E62B  2               ;         lda vecbrkia          ;old vector
00E62B  2               ;         sta vecbrki           ;restore it
00E62B  2               ;         stz vecbrkia          ;invalidate old vector
00E62B  2               ;
00E62B  2               ;_0180010 shortr
00E62B  2               ;         jml vecexit           ;long jump to exit
00E62B  2               ;
00E62B  2               ;_0180020 jmp monerr            ;goto error handler
00E62B  2               ;
00E62B  2               ; * * * * * * * * * * * * * * * * * * * * * * * *
00E62B  2               ; * * * * * * * * * * * * * * * * * * * * * * * *
00E62B  2               ; * *                                         * *
00E62B  2               ; * * S T A R T   o f   S U B R O U T I N E S * *
00E62B  2               ; * *                                         * *
00E62B  2               ; * * * * * * * * * * * * * * * * * * * * * * * *
00E62B  2               ; * * * * * * * * * * * * * * * * * * * * * * * *
00E62B  2               ;
00E62B  2               ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
00E62B  2               ;
00E62B  2               dpycaddr:
00E62B  2  A6 4A                LDX     xrtemp          ;column count
00E62D  2  D0 05                BNE     _0190010        ;not at right side
00E62F  2               ;
00E62F  2  20 C7 E7             JSR     newline         ;next row
00E632  2  A2 0A                LDX     #n_hccols       ;max columns
00E634  2               ;
00E634  2               _0190010:
00E634  2  E0 0A                CPX     #n_hccols       ;max columns
00E636  2  F0 05                BEQ     _0190020        ;at left margin
00E638  2               ;
00E638  2  A9 09                LDA     #a_ht
00E63A  2  20 71 FF             JSR     putcha          ;tab a column
00E63D  2               ;
00E63D  2               _0190020:
00E63D  2  CA                   DEX                     ;one less column
00E63E  2  86 4A                STX     xrtemp          ;save column counter
00E640  2  4C 95 E7             JMP     prntladr        ;print reference address
00E643  2               ;
00E643  2               ;================================================================================
00E643  2               ;
00E643  2               ;dpycod: DISASSEMBLE & DISPLAY CODE
00E643  2               ;
00E643  2               ;	------------------------------------------------------------------------
00E643  2               ;	This function disassembles & displays the machine code at  the  location
00E643  2               ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
00E643  2               ;	next instruction.   The entry point at DPYCODAA  should be called with a
00E643  2               ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
00E643  2               ;	default character will be display at the beginning of each  disassembled
00E643  2               ;	instruction.
00E643  2               ;
00E643  2               ;	The disassembly of immediate mode instructions that can take an 8 or  16
00E643  2               ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
00E643  2               ;	upon entry to this function:
00E643  2               ;
00E643  2               ;	    FLIMFLAG: xx000000
00E643  2               ;	              ||
00E643  2               ;	              |+---------> 0:  8 bit .X or .Y operand
00E643  2               ;	              |            1: 16 bit .X or .Y operand
00E643  2               ;	              +----------> 0:  8 bit .A or BIT # operand
00E643  2               ;	                           1: 16 bit .A or BIT # operand
00E643  2               ;
00E643  2               ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
00E643  2               ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
00E643  2               ;	subroutine will usually result in the correct disassembly of 16 bit imm-
00E643  2               ;	ediate mode instructions.
00E643  2               ;	------------------------------------------------------------------------
00E643  2               ;
00E643  2               dpycod:
00E643  2  A9 2E                LDA     #disprfx        ;default prefix
00E645  2               ;
00E645  2               ;
00E645  2               ;	alternate prefix display entry point...
00E645  2               ;
00E645  2               dpycodaa:
00E645  2  20 71 FF             JSR     putcha          ;print prefix
00E648  2  20 D7 E7             JSR     printspc        ;space
00E64B  2  20 95 E7             JSR     prntladr        ;print long address
00E64E  2  20 D7 E7             JSR     printspc        ;space to opcode field
00E651  2  20 C8 EA             JSR     getbyte         ;get opcode
00E654  2  85 48                STA     opcode          ;save &...
00E656  2  20 CC E7             JSR     printbyt        ;display as hex
00E659  2               ;
00E659  2               ;
00E659  2               ;	decode menmonic & addressing info...
00E659  2               ;
00E659  2  A6 48                LDX     opcode          ;current mnemonic
00E65B  2  BD F7 ED             LDA     mnetabix,x      ;get mnemonic index
00E65E  2  0A                   ASL                     ;double for...
00E65F  2  A8                   TAY                     ;mnemonic table offset
00E660  2  C2 20                SLONGA                  ;16 bit load
00E662  2  B9 3F ED             LDA     mnetab,y        ;copy encoded mnemonic to...
00E665  2  85 46                STA     mnepck          ;working storage
00E667  2  E2 20                SHORTA                  ;back to 8 bits
00E669  2  20 E9 EA             JSR     instdata        ;extract mode & size data
00E66C  2  85 4F                STA     vopsflag        ;save mode flags
00E66E  2  84 41                STY     admodidx        ;save mode index
00E670  2  0A                   ASL                     ;variable immediate instruction?
00E671  2  90 1F                BCC     dpycod01        ;no, effective operand size in .X
00E673  2               ;
00E673  2               ;
00E673  2               ;	determine immediate mode operand size...
00E673  2               ;
00E673  2  A5 48                LDA     opcode          ;current opcode
00E675  2  24 4C                BIT     flimflag        ;operand display mode
00E677  2  10 08                BPL     _0200010        ;8 bit .A & BIT immediate mode
00E679  2               ;
00E679  2  29 1F                AND     #aimmaska       ;determine if...
00E67B  2  C9 09                CMP     #aimmaskb       ;.A or BIT immediate
00E67D  2  F0 10                BEQ     _0200030        ;display 16 bit operand
00E67F  2               ;
00E67F  2  A5 48                LDA     opcode          ;not .A or BIT immediate
00E681  2               ;
00E681  2               _0200010:
00E681  2  50 0F                BVC     dpycod01        ;8 bit .X/.Y immediate mode
00E683  2               ;
00E683  2  A0 03                LDY     #n_vopidx-1     ;opcodes to test
00E685  2               ;
00E685  2               _0200020:
00E685  2  D9 F7 EF             CMP     vopidx,y        ;looking for LDX #, CPY #, etc.
00E688  2  F0 07                BEQ     _0200040        ;disassemble a 16 bit operand
00E68A  2               ;
00E68A  2  88                   DEY
00E68B  2  10 F8                BPL     _0200020        ;keep trying
00E68D  2               ;
00E68D  2  80 03                BRA     dpycod01        ;not .X or .Y immediate
00E68F  2               ;
00E68F  2               _0200030:
00E68F  2  A5 48                LDA     opcode          ;reload
00E691  2               ;
00E691  2               _0200040:
00E691  2  E8                   INX                     ;16 bit operand
00E692  2               ;
00E692  2               ;
00E692  2               ;	get & display operand bytes...
00E692  2               ;
00E692  2               dpycod01:
00E692  2  86 4D                STX     iopsize         ;operand size...
00E694  2  E8                   INX                     ;plus opcode becomes...
00E695  2  86 44                STX     instsize        ;instruction size
00E697  2  86 42                STX     charcnt         ;total bytes to process
00E699  2  A9 0B                LDA     #n_opcols+2     ;total operand columns plus WS
00E69B  2  85 4A                STA     xrtemp          ;initialize counter
00E69D  2  20 E1 E9             JSR     clroper         ;clear operand
00E6A0  2  A4 4D                LDY     iopsize         ;operand size
00E6A2  2  F0 16                BEQ     _0210020        ;no operand
00E6A4  2               ;
00E6A4  2  A2 00                LDX     #0              ;operand index
00E6A6  2               ;
00E6A6  2               _0210010:
00E6A6  2  20 C8 EA             JSR     getbyte         ;get operand byte
00E6A9  2  95 39                STA     operand,x       ;save
00E6AB  2  DA                   PHX                     ;protect operand index
00E6AC  2  20 CC E7             JSR     printbyt        ;print operand byte
00E6AF  2  C6 4A                DEC     xrtemp          ;3 columns used, 2 for...
00E6B1  2  C6 4A                DEC     xrtemp          ;operand nybbles &...
00E6B3  2  C6 4A                DEC     xrtemp          ;1 for whitespace
00E6B5  2  FA                   PLX                     ;get operand index
00E6B6  2  E8                   INX                     ;bump it
00E6B7  2  88                   DEY
00E6B8  2  D0 EC                BNE     _0210010        ;next
00E6BA  2               ;
00E6BA  2               _0210020:
00E6BA  2  A6 4A                LDX     xrtemp          ;operand columns remaining
00E6BC  2  20 BC E7             JSR     multspc         ;space to mnemonic field
00E6BF  2               ;
00E6BF  2               ;
00E6BF  2               ;	display mnemonic...
00E6BF  2               ;
00E6BF  2  A0 03                LDY     #s_mnemon       ;size of ASCII mnemonic
00E6C1  2               ;
00E6C1  2               _0210030:
00E6C1  2  A9 00                LDA     #0              ;initialize char
00E6C3  2  A2 05                LDX     #n_shfenc       ;shifts to execute
00E6C5  2               ;
00E6C5  2               _0210040:
00E6C5  2  06 46                ASL     mnepck          ;shift encoded mnemonic
00E6C7  2  26 47                ROL     mnepck+s_byte
00E6C9  2  2A                   ROL
00E6CA  2  CA                   DEX
00E6CB  2  D0 F8                BNE     _0210040
00E6CD  2               ;
00E6CD  2  69 3F                ADC     #a_mnecvt       ;convert to ASCII &...
00E6CF  2  48                   PHA                     ;stash
00E6D0  2  88                   DEY
00E6D1  2  D0 EE                BNE     _0210030        ;continue with mnemonic
00E6D3  2               ;
00E6D3  2  A0 03                LDY     #s_mnemon
00E6D5  2               ;
00E6D5  2               _0210050:
00E6D5  2  68                   PLA                     ;get mnenmonic byte
00E6D6  2  20 71 FF             JSR     putcha          ;print it
00E6D9  2  88                   DEY
00E6DA  2  D0 F9                BNE     _0210050
00E6DC  2               ;
00E6DC  2               ;
00E6DC  2               ;	display operand...
00E6DC  2               ;
00E6DC  2  A5 4D                LDA     iopsize         ;operand size
00E6DE  2  F0 6F                BEQ     clearlin        ;zero, disassembly finished
00E6E0  2               ;
00E6E0  2  20 D7 E7             JSR     printspc        ;space to operand field
00E6E3  2  24 4F                BIT     vopsflag        ;check mode flags
00E6E5  2  50 08                BVC     dpycod02        ;not a branch
00E6E7  2               ;
00E6E7  2  20 FF EA             JSR     offtarg         ;compute branch target
00E6EA  2  A6 44                LDX     instsize        ;effective instruction size
00E6EC  2  CA                   DEX
00E6ED  2  86 4D                STX     iopsize         ;effective operand size
00E6EF  2               ;
00E6EF  2               dpycod02:
00E6EF  2  64 4F                STZ     vopsflag        ;clear
00E6F1  2  A5 41                LDA     admodidx        ;instruction addressing mode
00E6F3  2  C9 0B                CMP     #am_move        ;block move instruction?
00E6F5  2  D0 02                BNE     _0220010        ;no
00E6F7  2               ;
00E6F7  2  66 4F                ROR     vopsflag        ;yes
00E6F9  2               ;
00E6F9  2               _0220010:
00E6F9  2  0A                   ASL                     ;convert addressing mode to...
00E6FA  2  AA                   TAX                     ;symbology table index
00E6FB  2  C2 20                SLONGA                  ;do a 16 bit load
00E6FD  2  BD FB EF             LDA     ms_lutab,x      ;addressing symbol pointer
00E700  2  48                   PHA
00E701  2  E2 20                SHORTA                  ;back to 8 bit loads
00E703  2  A0 00                LDY     #0
00E705  2  B3 01                LDASI   1               ;get 1st char
00E707  2  C9 20                CMP     #a_blank
00E709  2  F0 03                BEQ     _0220020        ;no addresing mode preamble
00E70B  2               ;
00E70B  2  20 71 FF             JSR     putcha          ;print preamble
00E70E  2               ;
00E70E  2               _0220020:
00E70E  2  A9 24                LDA     #c_hex
00E710  2  20 71 FF             JSR     putcha          ;operand displayed as hex
00E713  2  A4 4D                LDY     iopsize         ;operand size = index
00E715  2               ;
00E715  2               _0220030:
00E715  2  88                   DEY
00E716  2  30 16                BMI     _0220040        ;done with operand
00E718  2               ;
00E718  2  B9 39 00             LDA     operand,y       ;get operand byte
00E71B  2  20 B2 E7             JSR     dpyhex          ;print operand byte
00E71E  2  24 4F                BIT     vopsflag        ;block move?
00E720  2  10 F3                BPL     _0220030        ;no
00E722  2               ;
00E722  2  64 4F                STZ     vopsflag        ;reset
00E724  2  5A                   PHY                     ;protect operand index
00E725  2  F4 34 F0             PEA     ms_move
00E728  2  20 DC E7             JSR     sprint          ;display MVN/MVP operand separator
00E72B  2  7A                   PLY                     ;recover operand index again
00E72C  2  80 E7                BRA     _0220030        ;continue
00E72E  2               ;
00E72E  2               _0220040:
00E72E  2  FA                   PLX                     ;symbology LSB
00E72F  2  7A                   PLY                     ;symbology MSB
00E730  2  E8                   INX                     ;move past preamble
00E731  2  D0 01                BNE     _0220050
00E733  2               ;
00E733  2  C8                   INY
00E734  2               ;
00E734  2               _0220050:
00E734  2  5A                   PHY
00E735  2  DA                   PHX
00E736  2  20 DC E7             JSR     sprint          ;print postamble, if any
00E739  2               ;
00E739  2               ;
00E739  2               ;	condition immediate mode display format...
00E739  2               ;
00E739  2               dpycod03:
00E739  2  A5 39                LDA     operand         ;operand LSB
00E73B  2  29 30                AND     #pfmxmask       ;isolate M & X bits
00E73D  2  0A                   ASL                     ;shift to match...
00E73E  2  0A                   ASL                     ;FLIMFLAG alignment
00E73F  2  A6 48                LDX     opcode          ;current instruction
00E741  2  E0 C2                CPX     #opc_rep        ;was it REP?
00E743  2  D0 04                BNE     _0230010        ;no
00E745  2               ;
00E745  2  04 4C                TSB     flimflag        ;set flag bits as required
00E747  2  80 06                BRA     clearlin
00E749  2               ;
00E749  2               _0230010:
00E749  2  E0 E2                CPX     #opc_sep        ;was it SEP?
00E74B  2  D0 02                BNE     clearlin        ;no, just exit
00E74D  2               ;
00E74D  2  14 4C                TRB     flimflag        ;clear flag bits as required
00E74F  2               ;
00E74F  2               ;================================================================================
00E74F  2               ;
00E74F  2               ;clearlin: CLEAR DISPLAY LINE
00E74F  2               ;
00E74F  2               clearlin:
00E74F  2  60                   RTS
00E750  2               ;
00E750  2               ;================================================================================
00E750  2               ;
00E750  2               ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
00E750  2               ;
00E750  2               dpyibuf:
00E750  2  F4 00 02             PEA     ibuffer
00E753  2  80 37                BRA     dpyerraa
00E755  2               ;
00E755  2               ;================================================================================
00E755  2               ;
00E755  2               ;dpymem: DISPLAY MEMORY
00E755  2               ;
00E755  2               ;	------------------------------------------------------------
00E755  2               ;	This function displays 16 bytes of memory as hex values & as
00E755  2               ;	ASCII equivalents.  The starting address for the display is
00E755  2               ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
00E755  2               ;	ADDRA will point to the start of the next 16 bytes.
00E755  2               ;	------------------------------------------------------------
00E755  2               ;
00E755  2               dpymem:
00E755  2  E2 30                SHORTR
00E757  2  64 42                STZ     charcnt         ;reset
00E759  2               ;         lda #memprfx
00E759  2               ;         jsr putcha            ;display prefix
00E759  2  20 95 E7             JSR     prntladr        ;print 24 bit address
00E75C  2  A2 00                LDX     #0              ;string buffer index
00E75E  2  A0 08                LDY     #n_dump         ;bytes per line
00E760  2               ;
00E760  2               _0240010:
00E760  2  20 C8 EA             JSR     getbyte         ;get from RAM, also...
00E763  2  48                   PHA                     ;save for decoding
00E764  2  DA                   PHX                     ;save string index
00E765  2  20 CC E7             JSR     printbyt        ;display as hex ASCII
00E768  2  E6 42                INC     charcnt         ;bytes displayed +1
00E76A  2  FA                   PLX                     ;recover string index &...
00E76B  2  68                   PLA                     ;byte
00E76C  2  C9 20                CMP     #a_blank        ;printable?
00E76E  2  90 04                BCC     _0240020        ;no
00E770  2               ;
00E770  2  C9 7F                CMP     #a_del
00E772  2  90 02                BCC     _0240030        ;is printable
00E774  2               ;
00E774  2               _0240020:
00E774  2  A9 2E                LDA     #memsubch       ;substitute character
00E776  2               ;
00E776  2               _0240030:
00E776  2  9D 00 02             STA     ibuffer,x       ;save char
00E779  2  E8                   INX                     ;bump index
00E77A  2  88                   DEY                     ;byte count -= 1
00E77B  2  D0 E3                BNE     _0240010        ;not done
00E77D  2               ;
00E77D  2  9E 00 02             STZ     ibuffer,x       ;terminate ASCII string
00E780  2  A9 3A                LDA     #memsepch
00E782  2  20 71 FF             JSR     putcha          ;separate ASCII from bytes
00E785  2  20 50 E7             JSR     dpyibuf         ;display ASCII equivalents
00E788  2  60                   RTS
00E789  2               ;
00E789  2               ;================================================================================
00E789  2               ;
00E789  2               ;dpyerr: DISPLAY ERROR SIGNAL
00E789  2               ;
00E789  2               dpyerr:
00E789  2  F4 75 F0             PEA     mm_err          ;"*ERR"
00E78C  2               ;
00E78C  2               dpyerraa:
00E78C  2  20 DC E7             JSR     sprint
00E78F  2  60                   RTS
00E790  2               ;
00E790  2               ;================================================================================
00E790  2               ;
00E790  2               ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
00E790  2               ;
00E790  2               gendbs:
00E790  2  F4 45 F0             PEA     dc_bs           ;destructive backspace
00E793  2  80 F7                BRA     dpyerraa
00E795  2               ;
00E795  2               ;================================================================================
00E795  2               ;
00E795  2               ;prntladr: PRINT 24 BIT CURRENT ADDRESS
00E795  2               ;
00E795  2               prntladr:
00E795  2  08                   PHP                     ;protect register sizes
00E796  2  E2 20                SHORTA
00E798  2  A5 21                LDA     addra+s_word    ;get bank byte &...
00E79A  2  20 B2 E7             JSR     dpyhex          ;display it
00E79D  2  C2 20                SLONGA
00E79F  2  A5 1F                LDA     addra           ;get 16 bit address
00E7A1  2  28                   PLP                     ;restore register sizes
00E7A2  2               ;
00E7A2  2               ;================================================================================
00E7A2  2               ;
00E7A2  2               ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
00E7A2  2               ;
00E7A2  2               ;	------------------------------------
00E7A2  2               ;	Preparatory Ops: .C: word to display
00E7A2  2               ;
00E7A2  2               ;	Returned Values: .C: used
00E7A2  2               ;	                 .X: used
00E7A2  2               ;	                 .Y: entry value
00E7A2  2               ;	------------------------------------
00E7A2  2               ;
00E7A2  2               dpyhexw:
00E7A2  2  08                   PHP                     ;save register sizes
00E7A3  2  C2 20                SLONGA
00E7A5  2  48                   PHA                     ;protect value
00E7A6  2  E2 20                SHORTA
00E7A8  2  EB                   XBA                     ;get MSB &...
00E7A9  2  20 B2 E7             JSR     dpyhex          ;display
00E7AC  2  C2 20                SLONGA
00E7AE  2  68                   PLA                     ;recover value
00E7AF  2  E2 20                SHORTA                  ;only LSB visible
00E7B1  2  28                   PLP                     ;reset register sizes
00E7B2  2               ;
00E7B2  2               ;================================================================================
00E7B2  2               ;
00E7B2  2               ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
00E7B2  2               ;
00E7B2  2               ;	------------------------------------
00E7B2  2               ;	Preparatory Ops: .A: byte to display
00E7B2  2               ;
00E7B2  2               ;	Returned Values: .A: used
00E7B2  2               ;	                 .X: used
00E7B2  2               ;	                 .Y: entry value
00E7B2  2               ;	------------------------------------
00E7B2  2               ;
00E7B2  2               dpyhex:
00E7B2  2  20 4D E9             JSR     binhex          ;convert to hex ASCII
00E7B5  2  20 71 FF             JSR     putcha          ;print MSN
00E7B8  2  8A                   TXA
00E7B9  2  4C 71 FF             JMP     putcha          ;print LSN
00E7BC  2               ;
00E7BC  2               ;================================================================================
00E7BC  2               ;
00E7BC  2               ;multspc: PRINT MULTIPLE BLANKS
00E7BC  2               ;
00E7BC  2               ;	------------------------------------------------
00E7BC  2               ;	Preparatory Ops : .X: number of blanks to print
00E7BC  2               ;
00E7BC  2               ;	Register Returns: none
00E7BC  2               ;
00E7BC  2               ;	Calling Example : ldx #3
00E7BC  2               ;	                  jsr multspc    ;print 3 spaces
00E7BC  2               ;
00E7BC  2               ;	Notes: This sub will print 1 blank if .X=0.
00E7BC  2               ;	------------------------------------------------
00E7BC  2               ;
00E7BC  2               
00E7BC  2               multspc:
00E7BC  2  8A                   TXA
00E7BD  2  D0 01                BNE     _0250010        ;blank count specified
00E7BF  2               ;
00E7BF  2  E8                   INX                     ;default to 1 blank
00E7C0  2               ;
00E7C0  2               _0250010:
00E7C0  2  20 D7 E7             JSR     printspc
00E7C3  2  CA                   DEX
00E7C4  2  D0 FA                BNE     _0250010
00E7C6  2               ;
00E7C6  2  60                   RTS
00E7C7  2               
00E7C7  2               ;
00E7C7  2               ;================================================================================
00E7C7  2               ;
00E7C7  2               ;newline: PRINT NEWLINE (CRLF)
00E7C7  2               ;
00E7C7  2               newline:
00E7C7  2  F4 42 F0             PEA     dc_lf
00E7CA  2  80 C0                BRA     dpyerraa
00E7CC  2               ;
00E7CC  2               ;================================================================================
00E7CC  2               ;
00E7CC  2               ;printbyt: PRINT A BYTE WITH LEADING SPACE
00E7CC  2               ;
00E7CC  2               printbyt:
00E7CC  2  48                   PHA                     ;protect byte
00E7CD  2  20 D7 E7             JSR     printspc        ;print leading space
00E7D0  2  68                   PLA                     ;restore &...
00E7D1  2  80 DF                BRA     dpyhex          ;print byte
00E7D3  2               ;
00E7D3  2               ;================================================================================
00E7D3  2               ;
00E7D3  2               ;alert: ALERT USER w/TERMINAL BELL
00E7D3  2               ;
00E7D3  2               alert:
00E7D3  2  A9 07                LDA     #a_bel
00E7D5  2  80 02                BRA     printcmn
00E7D7  2               ;
00E7D7  2               ;================================================================================
00E7D7  2               ;
00E7D7  2               ;printspc: PRINT A SPACE
00E7D7  2               ;
00E7D7  2               printspc:
00E7D7  2  A9 20                LDA     #a_blank
00E7D9  2               ;
00E7D9  2               printcmn:
00E7D9  2  4C 71 FF             JMP     putcha
00E7DC  2               ;
00E7DC  2               ;================================================================================
00E7DC  2               ;
00E7DC  2               ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
00E7DC  2               ;
00E7DC  2               ;	---------------------------------------------------------
00E7DC  2               ;	Preparatory Ops : SP+1: string address LSB
00E7DC  2               ;	                  SP+2: string address MSB
00E7DC  2               ;
00E7DC  2               ;	Register Returns: .A: used
00E7DC  2               ;	                  .B: entry value
00E7DC  2               ;	                  .X: used
00E7DC  2               ;	                  .Y: used
00E7DC  2               ;
00E7DC  2               ;	MPU Flags: NVmxDIZC
00E7DC  2               ;	           ||||||||
00E7DC  2               ;	           |||||||+---> 0: okay
00E7DC  2               ;	           |||||||      1: string too long (1)
00E7DC  2               ;	           ||||+++----> not defined
00E7DC  2               ;	           |||+-------> 1
00E7DC  2               ;	           ||+--------> 1
00E7DC  2               ;	           ++---------> not defined
00E7DC  2               ;
00E7DC  2               ;	Example: PER STRING
00E7DC  2               ;	         JSR SPRINT
00E7DC  2               ;	         BCS TOOLONG
00E7DC  2               ;
00E7DC  2               ;	Notes: 1) Maximum permissible string length including the
00E7DC  2               ;	          terminator is 32,767 bytes.
00E7DC  2               ;	       2) All registers are forced to 8 bits.
00E7DC  2               ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
00E7DC  2               ;	---------------------------------------------------------
00E7DC  2               ;
00E7DC  2               sprint:
00E7DC  2  E2 20                SHORTA                  ;8 bit accumulator
00E7DE  2  C2 10                LONGX                   ;16 bit index
00E7E0  2               ;
00E7E0  2               ;---------------------------------------------------------
00E7E0  2               _retaddr        = 1             ;return address
00E7E0  2               _src            = _retaddr+s_word;string address stack offset
00E7E0  2               ;---------------------------------------------------------
00E7E0  2               ;
00E7E0  2  A0 00 00             LDYW    0
00E7E3  2  18                   CLC                     ;no initial error
00E7E4  2               ;
00E7E4  2               _0260010:
00E7E4  2  B3 03                LDASI   _src            ;get a byte
00E7E6  2  F0 07                BEQ     _0260020        ;done
00E7E8  2               ;
00E7E8  2  20 71 FF             JSR     putcha          ;write to console port
00E7EB  2  C8                   INY
00E7EC  2  10 F6                BPL     _0260010        ;next
00E7EE  2               ;
00E7EE  2  38                   SEC                     ;string too long
00E7EF  2               ;
00E7EF  2               _0260020:
00E7EF  2  FA                   PLX                     ;pull RTS address
00E7F0  2  7A                   PLY                     ;clear string pointer
00E7F1  2  DA                   PHX                     ;replace RTS
00E7F2  2  E2 10                SHORTX
00E7F4  2  60                   RTS
00E7F5  2               ;
00E7F5  2               ;================================================================================
00E7F5  2               ;
00E7F5  2               ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
00E7F5  2               ;
00E7F5  2               ;	---------------------------------------------------
00E7F5  2               ;	Preparatory Ops: ASCII number string in IBUFFER
00E7F5  2               ;
00E7F5  2               ;	Returned Values: FACA: converted parameter
00E7F5  2               ;	                   .A: used
00E7F5  2               ;	                   .X: used
00E7F5  2               ;	                   .Y: used
00E7F5  2               ;	                   .C: 1 = conversion error
00E7F5  2               ;	                   .Z: 1 = nothing to convert
00E7F5  2               ;
00E7F5  2               ;	Notes: 1) Conversion stops when a non-numeric char-
00E7F5  2               ;	          acter is encountered.
00E7F5  2               ;	       2) Radix symbols are as follows:
00E7F5  2               ;
00E7F5  2               ;	          % binary
00E7F5  2               ;	          % octal
00E7F5  2               ;	          + decimal
00E7F5  2               ;	          $ hexadecimal
00E7F5  2               ;
00E7F5  2               ;	          Hex is the default if no radix is speci-
00E7F5  2               ;	          fied in the 1st character of the string.
00E7F5  2               ;	---------------------------------------------------
00E7F5  2               ;
00E7F5  2               ascbin:
00E7F5  2  E2 30                SHORTR
00E7F7  2  20 60 E9             JSR     clrfaca         ;clear accumulator
00E7FA  2  64 42                STZ     charcnt         ;zero char count
00E7FC  2  64 40                STZ     radix           ;initialize
00E7FE  2               ;
00E7FE  2               ;
00E7FE  2               ;	process radix if present...
00E7FE  2               ;
00E7FE  2  20 DA EB             JSR     getcharw        ;get next non-WS char
00E801  2  D0 02                BNE     _0270010        ;got something
00E803  2               ;
00E803  2  18                   CLC                     ;no more input
00E804  2  60                   RTS
00E805  2               ;
00E805  2               _0270010:
00E805  2  A2 03                LDX     #n_radix-1      ;number of radices
00E807  2               ;
00E807  2               _0270020:
00E807  2  DD 32 ED             CMP     radxtab,x       ;recognized radix?
00E80A  2  F0 06                BEQ     _0270030        ;yes
00E80C  2               ;
00E80C  2  CA                   DEX
00E80D  2  10 F8                BPL     _0270020        ;try next
00E80F  2               ;
00E80F  2  C6 3D                DEC     ibufidx         ;reposition to previous char
00E811  2  E8                   INX                     ;not recognized, assume hex
00E812  2               ;
00E812  2               _0270030:
00E812  2  C9 2B                CMP     #c_dec          ;decimal radix?
00E814  2  D0 02                BNE     _0270040        ;not decimal
00E816  2               ;
00E816  2  66 40                ROR     radix           ;flag decimal conversion
00E818  2               ;
00E818  2               _0270040:
00E818  2  BD 1E ED             LDA     basetab,x       ;number bases table
00E81B  2  85 4E                STA     range           ;set valid numeral range
00E81D  2  BD 22 ED             LDA     bitsdtab,x      ;get bits per digit
00E820  2  85 3E                STA     bitsdig         ;store
00E822  2               ;
00E822  2               ;
00E822  2               ;	process numerals...
00E822  2               ;
00E822  2               ascbin01:
00E822  2  20 7C EB             JSR     getchar         ;get next char
00E825  2  D0 03                BNE     _TMP0001        ;not EOI
00E827  2  4C 9A E8             JMP     ascbin03        ;EOI
00E82A  2               ;
00E82A  2               _TMP0001:
00E82A  2  C9 20                CMP     #' '
00E82C  2  F0 6C                BEQ     ascbin03        ;blank - EOF
00E82E  2               ;
00E82E  2  C9 2C                CMP     #','
00E830  2  F0 68                BEQ     ascbin03        ;comma - EOF
00E832  2               ;
00E832  2  C9 09                CMP     #a_ht
00E834  2  F0 64                BEQ     ascbin03        ;tab - EOF
00E836  2               ;
00E836  2  20 BA E9             JSR     nybtobin        ;change to binary
00E839  2  B0 60                BCS     ascbin04        ;not a recognized numeral
00E83B  2               ;
00E83B  2  C5 4E                CMP     range           ;check range
00E83D  2  B0 5C                BCS     ascbin04        ;not valid for base
00E83F  2               ;
00E83F  2  85 3F                STA     numeral         ;save processed numeral
00E841  2  E6 42                INC     charcnt         ;bump numeral count
00E843  2  24 40                BIT     radix           ;working in base 10?
00E845  2  10 15                BPL     _1570030        ;no
00E847  2               ;
00E847  2               ;
00E847  2               ;	compute N*2 for decimal conversion...
00E847  2               ;
00E847  2  A2 00                LDX     #0              ;accumulator index
00E849  2  A0 02                LDY     #s_pfac/2       ;iterations
00E84B  2  C2 20                SLONGA
00E84D  2  18                   CLC
00E84E  2               ;
00E84E  2               _1570020:
00E84E  2  B5 25                LDA     faca,x          ;N
00E850  2  2A                   ROL                     ;N=N*2
00E851  2  95 2D                STA     facb,x
00E853  2  E8                   INX
00E854  2  E8                   INX
00E855  2  88                   DEY
00E856  2  D0 F6                BNE     _1570020
00E858  2               ;
00E858  2  B0 41                BCS     ascbin04        ;overflow - error
00E85A  2               ;
00E85A  2  E2 20                SHORTA
00E85C  2               ;
00E85C  2               ;
00E85C  2               ;	compute N*base for binary, octal or hex...
00E85C  2               ;	or N*8 for decimal...
00E85C  2               ;
00E85C  2               _1570030:
00E85C  2  A6 3E                LDX     bitsdig         ;bits per digit
00E85E  2  C2 20                SLONGA                  ;16 bit shifts
00E860  2               ;
00E860  2               _1570040:
00E860  2  06 25                ASL     faca
00E862  2  26 27                ROL     faca+s_word
00E864  2  B0 35                BCS     ascbin04        ;overflow - error
00E866  2               ;
00E866  2  CA                   DEX
00E867  2  D0 F7                BNE     _1570040        ;next shift
00E869  2               ;
00E869  2  E2 20                SHORTA                  ;back to 8 bits
00E86B  2  24 40                BIT     radix           ;check base
00E86D  2  10 13                BPL     ascbin02        ;not decimal
00E86F  2               ;
00E86F  2               ;
00E86F  2               ;	compute N*10 for decimal (N*8 + N*2)...
00E86F  2               ;
00E86F  2  A0 04                LDY     #s_pfac
00E871  2  C2 20                SLONGA
00E873  2               ;
00E873  2               _1570050:
00E873  2  B5 25                LDA     faca,x          ;N*8
00E875  2  75 2D                ADC     facb,x          ;N*2
00E877  2  95 25                STA     faca,x          ;now N*10
00E879  2  E8                   INX
00E87A  2  E8                   INX
00E87B  2  88                   DEY
00E87C  2  D0 F5                BNE     _1570050
00E87E  2               ;
00E87E  2  B0 1B                BCS     ascbin04        ;overflow - error
00E880  2               ;
00E880  2  E2 20                SHORTA
00E882  2               ;
00E882  2               ;
00E882  2               ;	add current numeral to partial result...
00E882  2               ;
00E882  2               ascbin02:
00E882  2  A5 25                LDA     faca            ;N
00E884  2  65 3F                ADC     numeral         ;N=N+D
00E886  2  85 25                STA     faca
00E888  2  A2 01                LDX     #1
00E88A  2  A0 03                LDY     #s_pfac-1
00E88C  2               ;
00E88C  2               _0280010:
00E88C  2  B5 25                LDA     faca,x
00E88E  2  69 00                ADC     #0              ;account for carry
00E890  2  95 25                STA     faca,x
00E892  2  E8                   INX
00E893  2  88                   DEY
00E894  2  D0 F6                BNE     _0280010
00E896  2               ;
00E896  2  90 08                BCC     _0280020        ;next if no overflow
00E898  2               ;
00E898  2  B0 01                BCS     ascbin04        ;overflow - error
00E89A  2               ;
00E89A  2               ;
00E89A  2               ;	finish up...
00E89A  2               ;
00E89A  2               ascbin03:
00E89A  2  18                   CLC                     ;no error
00E89B  2               ;
00E89B  2               ascbin04:
00E89B  2  E2 20                SHORTA                  ;reset if necessary
00E89D  2  A5 42                LDA     charcnt         ;load char count
00E89F  2  60                   RTS                     ;done
00E8A0  2               _0280020:
00E8A0  2  4C 22 E8             JMP     ascbin01        ;next if no overflow
00E8A3  2               ;
00E8A3  2               ;================================================================================
00E8A3  2               ;
00E8A3  2               ;bcdasc: CONVERT BCD DIGIT TO ASCII
00E8A3  2               ;
00E8A3  2               ;	---------------------------------------
00E8A3  2               ;	Preparatory Ops: .A: BCD digit, $00-$99
00E8A3  2               ;
00E8A3  2               ;	Returned Values: .A: ASCII MSD
00E8A3  2               ;	                 .X: ASCII LSD
00E8A3  2               ;	                 .Y: entry value
00E8A3  2               ;	---------------------------------------
00E8A3  2               ;
00E8A3  2               bcdasc:
00E8A3  2  20 AF E8             JSR     bintonyb        ;extract nybbles
00E8A6  2  48                   PHA                     ;save tens
00E8A7  2  8A                   TXA
00E8A8  2  09 30                ORA     #btoamask       ;change units to ASCII
00E8AA  2  AA                   TAX                     ;store
00E8AB  2  68                   PLA                     ;get tens
00E8AC  2  09 30                ORA     #btoamask       ;change to ASCII
00E8AE  2  60                   RTS
00E8AF  2               ;
00E8AF  2               ;================================================================================
00E8AF  2               ;
00E8AF  2               ;bintonyb: EXTRACT BINARY NYBBLES
00E8AF  2               ;
00E8AF  2               ;	---------------------------------
00E8AF  2               ;	Preparatory Ops: .A: binary value
00E8AF  2               ;
00E8AF  2               ;	Returned Values: .A: MSN
00E8AF  2               ;	                 .X: LSN
00E8AF  2               ;	                 .Y: entry value
00E8AF  2               ;	---------------------------------
00E8AF  2               ;
00E8AF  2               bintonyb:
00E8AF  2  48                   PHA                     ;save
00E8B0  2  29 0F                AND     #bcdumask       ;extract LSN
00E8B2  2  AA                   TAX                     ;save it
00E8B3  2  68                   PLA
00E8B4  2               ;         .rept s_bnybbl        ;extract MSN
00E8B4  2  4A                   LSR
00E8B5  2  4A                   LSR
00E8B6  2  4A                   LSR
00E8B7  2  4A                   LSR
00E8B8  2               ;         .endr
00E8B8  2  60                   RTS
00E8B9  2               ;
00E8B9  2               ;================================================================================
00E8B9  2               ;
00E8B9  2               ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
00E8B9  2               ;
00E8B9  2               ;	------------------------------------------------------
00E8B9  2               ;	Preparatory Ops: FACA: 32-bit operand
00E8B9  2               ;	                   .A: radix character, w/bit 7 set to
00E8B9  2               ;	                       suppress radix symbol in the
00E8B9  2               ;	                       conversion string
00E8B9  2               ;
00E8B9  2               ;	Returned Values: ibuffer: conversion string
00E8B9  2               ;	                      .A: string length
00E8B9  2               ;	                      .X: string address LSB
00E8B9  2               ;	                      .Y: string address MSB
00E8B9  2               ;
00E8B9  2               ;	Execution Notes: ibufidx & instsize are overwritten.
00E8B9  2               ;	------------------------------------------------------
00E8B9  2               ;
00E8B9  2               binasc:
00E8B9  2  64 3D                STZ     ibufidx         ;initialize string index
00E8BB  2  64 44                STZ     instsize        ;clear format flag
00E8BD  2               ;
00E8BD  2               ;
00E8BD  2               ;	evaluate radix...
00E8BD  2               ;
00E8BD  2  0A                   ASL                     ;extract format flag &...
00E8BE  2  66 44                ROR     instsize        ;save it
00E8C0  2  4A                   LSR                     ;extract radix character
00E8C1  2  A2 03                LDX     #n_radix-1      ;total radices
00E8C3  2               ;
00E8C3  2               _0290010:
00E8C3  2  DD 32 ED             CMP     radxtab,x       ;recognized radix?
00E8C6  2  F0 04                BEQ     _0290020        ;yes
00E8C8  2               ;
00E8C8  2  CA                   DEX
00E8C9  2  10 F8                BPL     _0290010        ;try next
00E8CB  2               ;
00E8CB  2  E8                   INX                     ;assume hex
00E8CC  2               ;
00E8CC  2               _0290020:
00E8CC  2  86 40                STX     radix           ;save radix index for later
00E8CE  2  24 44                BIT     instsize
00E8D0  2  30 08                BMI     _0290030        ;no radix symbol wanted
00E8D2  2               ;
00E8D2  2  BD 32 ED             LDA     radxtab,x       ;radix table
00E8D5  2  8D 00 02             STA     ibuffer         ;prepend to string
00E8D8  2  E6 3D                INC     ibufidx         ;bump string index
00E8DA  2               ;
00E8DA  2               _0290030:
00E8DA  2  C9 2B                CMP     #c_dec          ;converting to decimal?
00E8DC  2  D0 07                BNE     _0290040        ;no
00E8DE  2               ;
00E8DE  2  20 72 E9             JSR     facabcd         ;convert operand to BCD
00E8E1  2  A9 00                LDA     #0
00E8E3  2  80 17                BRA     _0290070        ;skip binary stuff
00E8E5  2               ;
00E8E5  2               ;
00E8E5  2               ;	prepare for binary, octal or hex conversion...
00E8E5  2               ;
00E8E5  2               _0290040:
00E8E5  2  A2 00                LDX     #0              ;operand index
00E8E7  2  A0 05                LDY     #s_sfac-1       ;workspace index
00E8E9  2               ;
00E8E9  2               _0290050:
00E8E9  2  B5 25                LDA     faca,x          ;copy operand to...
00E8EB  2  99 2D 00             STA     facb,y          ;workspace in...
00E8EE  2  88                   DEY                     ;big-endian order
00E8EF  2  E8                   INX
00E8F0  2  E0 04                CPX     #s_pfac
00E8F2  2  D0 F5                BNE     _0290050
00E8F4  2               ;
00E8F4  2  A9 00                LDA     #0
00E8F6  2  BB                   TYX
00E8F7  2               ;
00E8F7  2               _0290060:
00E8F7  2  95 2D                STA     facb,x          ;pad workspace
00E8F9  2  CA                   DEX
00E8FA  2  10 FB                BPL     _0290060
00E8FC  2               ;
00E8FC  2               ;
00E8FC  2               ;	set up conversion parameters...
00E8FC  2               ;
00E8FC  2               _0290070:
00E8FC  2  85 33                STA     facc            ;initialize byte counter
00E8FE  2  A4 40                LDY     radix           ;radix index
00E900  2  B9 2E ED             LDA     numstab,y       ;numerals in string
00E903  2  85 34                STA     facc+s_byte     ;set remaining numeral count
00E905  2  B9 26 ED             LDA     bitsntab,y      ;bits per numeral
00E908  2  85 35                STA     facc+s_word     ;set
00E90A  2  B9 2A ED             LDA     lzsttab,y       ;leading zero threshold
00E90D  2  85 36                STA     facc+s_xword    ;set
00E90F  2               ;
00E90F  2               ;
00E90F  2               ;	generate conversion string...
00E90F  2               ;
00E90F  2               _0290080:
00E90F  2  A9 00                LDA     #0
00E911  2  A4 35                LDY     facc+s_word     ;bits per numeral
00E913  2               ;
00E913  2               _0290090:
00E913  2  A2 05                LDX     #s_sfac-1       ;workspace size
00E915  2  18                   CLC                     ;avoid starting carry
00E916  2               ;
00E916  2               _0290100:
00E916  2  36 2D                ROL     facb,x          ;shift out a bit...
00E918  2  CA                   DEX                     ;from the operand or...
00E919  2  10 FB                BPL     _0290100        ;BCD conversion result
00E91B  2               ;
00E91B  2  2A                   ROL                     ;bit to .A
00E91C  2  88                   DEY
00E91D  2  D0 F4                BNE     _0290090        ;more bits to grab
00E91F  2               ;
00E91F  2  A8                   TAY                     ;if numeral isn't zero...
00E920  2  D0 0A                BNE     _0290110        ;skip leading zero tests
00E922  2               ;
00E922  2  A6 34                LDX     facc+s_byte     ;remaining numerals
00E924  2  E4 36                CPX     facc+s_xword    ;leading zero threshold
00E926  2  90 04                BCC     _0290110        ;below it, must convert
00E928  2               ;
00E928  2  A6 33                LDX     facc            ;processed byte count
00E92A  2  F0 11                BEQ     _0290130        ;discard leading zero
00E92C  2               ;
00E92C  2               _0290110:
00E92C  2  C9 0A                CMP     #10             ;check range
00E92E  2  90 02                BCC     _0290120        ;is 0-9
00E930  2               ;
00E930  2  69 06                ADC     #a_hexdec       ;apply hex adjust
00E932  2               ;
00E932  2               _0290120:
00E932  2  69 30                ADC     #'0'            ;change to ASCII
00E934  2  A4 3D                LDY     ibufidx         ;string index
00E936  2  99 00 02             STA     ibuffer,y       ;save numeral in buffer
00E939  2  E6 3D                INC     ibufidx         ;next buffer position
00E93B  2  E6 33                INC     facc            ;bytes=bytes+1
00E93D  2               ;
00E93D  2               _0290130:
00E93D  2  C6 34                DEC     facc+s_byte     ;numerals=numerals-1
00E93F  2  D0 CE                BNE     _0290080        ;not done
00E941  2               ;
00E941  2               ;
00E941  2               ;	terminate string & exit...
00E941  2               ;
00E941  2  A6 3D                LDX     ibufidx         ;printable string length
00E943  2  9E 00 02             STZ     ibuffer,x       ;terminate string
00E946  2  8A                   TXA
00E947  2  A2 00                LDX     #<ibuffer       ;converted string
00E949  2  A0 02                LDY     #>ibuffer
00E94B  2  18                   CLC                     ;all okay
00E94C  2  60                   RTS
00E94D  2               ;
00E94D  2               ;================================================================================
00E94D  2               ;
00E94D  2               ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
00E94D  2               ;
00E94D  2               ;	--------------------------------------------
00E94D  2               ;	Preparatory Ops: .A: byte to convert
00E94D  2               ;
00E94D  2               ;	Returned Values: .A: MSN ASCII char
00E94D  2               ;	                 .X: LSN ASCII char
00E94D  2               ;	                 .Y: entry value
00E94D  2               ;	--------------------------------------------
00E94D  2               ;
00E94D  2               binhex:
00E94D  2  20 AF E8             JSR     bintonyb        ;generate binary values
00E950  2  48                   PHA                     ;save MSN
00E951  2  8A                   TXA
00E952  2  20 57 E9             JSR     _0300010        ;generate ASCII LSN
00E955  2  AA                   TAX                     ;save
00E956  2  68                   PLA                     ;get input
00E957  2               ;
00E957  2               ;
00E957  2               ;	convert nybble to hex ASCII equivalent...
00E957  2               ;
00E957  2               _0300010:
00E957  2  C9 0A                CMP     #10
00E959  2  90 02                BCC     _0300020        ;in decimal range
00E95B  2               ;
00E95B  2  69 66                ADC     #k_hex          ;hex compensate
00E95D  2               ;
00E95D  2               _0300020:
00E95D  2  49 30                EOR     #'0'            ;finalize nybble
00E95F  2  60                   RTS                     ;done
00E960  2               ;
00E960  2               ;================================================================================
00E960  2               ;
00E960  2               ;clrfaca: CLEAR FLOATING ACCUMULATOR A
00E960  2               ;
00E960  2               clrfaca:
00E960  2  08                   PHP
00E961  2  C2 20                SLONGA
00E963  2  64 25                STZ     faca
00E965  2  64 27                STZ     faca+s_word
00E967  2  28                   PLP
00E968  2  60                   RTS
00E969  2               ;
00E969  2               ;================================================================================
00E969  2               ;
00E969  2               ;clrfacb: CLEAR FLOATING ACCUMULATOR B
00E969  2               ;
00E969  2               clrfacb:
00E969  2  08                   PHP
00E96A  2  C2 20                SLONGA
00E96C  2  64 2D                STZ     facb
00E96E  2  64 2F                STZ     facb+s_word
00E970  2  28                   PLP
00E971  2  60                   RTS
00E972  2               ;
00E972  2               ;================================================================================
00E972  2               ;
00E972  2               ;facabcd: CONVERT FACA INTO BCD
00E972  2               ;
00E972  2               facabcd:
00E972  2  A2 03                LDX     #s_pfac-1       ;primary accumulator size -1
00E974  2               ;
00E974  2               _1300010:
00E974  2  B5 25                LDA     faca,x          ;value to be converted
00E976  2  48                   PHA                     ;preserve
00E977  2  CA                   DEX
00E978  2  10 FA                BPL     _1300010        ;next
00E97A  2               ;
00E97A  2  A2 05                LDX     #s_sfac-1       ;workspace size
00E97C  2               ;
00E97C  2               _1300020:
00E97C  2  74 2D                STZ     facb,x          ;clear final result
00E97E  2  74 33                STZ     facc,x          ;clear scratchpad
00E980  2  CA                   DEX
00E981  2  10 F9                BPL     _1300020
00E983  2               ;
00E983  2  E6 38                INC     facc+s_sfac-s_byte
00E985  2  F8                   SED                     ;select decimal mode
00E986  2  A0 1F                LDY     #m_bits-1       ;bits to convert -1
00E988  2               ;
00E988  2               _1300030:
00E988  2  A2 03                LDX     #s_pfac-1       ;operand size
00E98A  2  18                   CLC                     ;no carry at start
00E98B  2               ;
00E98B  2               _1300040:
00E98B  2  76 25                ROR     faca,x          ;grab LS bit in operand
00E98D  2  CA                   DEX
00E98E  2  10 FB                BPL     _1300040
00E990  2               ;
00E990  2  90 0D                BCC     _1300060        ;LS bit clear
00E992  2               ;
00E992  2  18                   CLC
00E993  2  A2 05                LDX     #s_sfac-1
00E995  2               ;
00E995  2               _1300050:
00E995  2  B5 2D                LDA     facb,x          ;partial result
00E997  2  75 33                ADC     facc,x          ;scratchpad
00E999  2  95 2D                STA     facb,x          ;new partial result
00E99B  2  CA                   DEX
00E99C  2  10 F7                BPL     _1300050
00E99E  2               ;
00E99E  2  18                   CLC
00E99F  2               ;
00E99F  2               _1300060:
00E99F  2  A2 05                LDX     #s_sfac-1
00E9A1  2               ;
00E9A1  2               _1300070:
00E9A1  2  B5 33                LDA     facc,x          ;scratchpad
00E9A3  2  75 33                ADC     facc,x          ;double &...
00E9A5  2  95 33                STA     facc,x          ;save
00E9A7  2  CA                   DEX
00E9A8  2  10 F7                BPL     _1300070
00E9AA  2               ;
00E9AA  2  88                   DEY
00E9AB  2  10 DB                BPL     _1300030        ;next operand bit
00E9AD  2               ;
00E9AD  2  D8                   CLD
00E9AE  2  A2 00                LDX     #0
00E9B0  2  A0 04                LDY     #s_pfac
00E9B2  2               ;
00E9B2  2               _1300080:
00E9B2  2  68                   PLA                     ;operand
00E9B3  2  95 25                STA     faca,x          ;restore
00E9B5  2  E8                   INX
00E9B6  2  88                   DEY
00E9B7  2  D0 F9                BNE     _1300080        ;next
00E9B9  2               ;
00E9B9  2  60                   RTS
00E9BA  2               ;
00E9BA  2               ;================================================================================
00E9BA  2               ;
00E9BA  2               ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
00E9BA  2               ;
00E9BA  2               nybtobin:
00E9BA  2  20 42 EC             JSR     toupper         ;convert case if necessary
00E9BD  2  38                   SEC
00E9BE  2  E9 30                SBC     #'0'            ;change to binary
00E9C0  2  90 08                BCC     _0310020        ;not a numeral - error
00E9C2  2               ;
00E9C2  2  C9 0A                CMP     #10
00E9C4  2  90 03                BCC     _0310010        ;numeral is 0-9
00E9C6  2               ;
00E9C6  2  E9 07                SBC     #a_hexdec+1     ;10-15 --> A-F
00E9C8  2  18                   CLC                     ;no conversion error
00E9C9  2               ;
00E9C9  2               _0310010:
00E9C9  2  60                   RTS
00E9CA  2               ;
00E9CA  2               _0310020:
00E9CA  2  38                   SEC                     ;conversion error
00E9CB  2  60                   RTS
00E9CC  2               ;
00E9CC  2               ;================================================================================
00E9CC  2               ;
00E9CC  2               ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
00E9CC  2               ;
00E9CC  2               calccnt:
00E9CC  2  20 69 E9             JSR     clrfacb         ;clear accumulator
00E9CF  2  C2 20                SLONGA
00E9D1  2  38                   SEC
00E9D2  2  A5 22                LDA     addrb           ;ending address
00E9D4  2  E5 1F                SBC     addra           ;starting address
00E9D6  2  85 2D                STA     facb            ;byte count
00E9D8  2  E2 20                SHORTA
00E9DA  2  A5 24                LDA     addrb+s_word    ;handle banks
00E9DC  2  E5 21                SBC     addra+s_word
00E9DE  2  85 2F                STA     facb+s_word
00E9E0  2  60                   RTS
00E9E1  2               ;
00E9E1  2               ;================================================================================
00E9E1  2               ;
00E9E1  2               ;clroper: CLEAR OPERAND
00E9E1  2               ;
00E9E1  2               clroper:
00E9E1  2  DA                   PHX
00E9E2  2  A2 02                LDX     #s_oper-1
00E9E4  2               ;
00E9E4  2               _0320010:
00E9E4  2  74 39                STZ     operand,x
00E9E6  2  CA                   DEX
00E9E7  2  10 FB                BPL     _0320010
00E9E9  2               ;
00E9E9  2  64 4B                STZ     eopsize
00E9EB  2  FA                   PLX
00E9EC  2  60                   RTS
00E9ED  2               ;
00E9ED  2               ;================================================================================
00E9ED  2               ;
00E9ED  2               ;cpfwsup: FOWARD COPY MEMORY SETUP
00E9ED  2               ;
00E9ED  2               cpfwsup:
00E9ED  2  C2 30                LONGR
00E9EF  2  A2 54 00             LDXW    opc_mvn         ;"move next" opcode
00E9F2  2  80 05                BRA     cpsup
00E9F4  2               ;
00E9F4  2               ;================================================================================
00E9F4  2               ;
00E9F4  2               ;cprvsup: REVERSE COPY MEMORY SETUP
00E9F4  2               ;
00E9F4  2               cprvsup:
00E9F4  2  C2 30                LONGR
00E9F6  2  A2 44 00             LDXW    opc_mvp         ;"move previous" opcode
00E9F9  2               ;
00E9F9  2               ;================================================================================
00E9F9  2               ;
00E9F9  2               ;cpsup: COPY MEMORY SETUP
00E9F9  2               ;
00E9F9  2               cpsup:
00E9F9  2  48                   PHA                     ;save banks
00E9FA  2  8A                   TXA                     ;protect...
00E9FB  2  EB                   XBA                     ;opcode
00E9FC  2  E2 20                SHORTA
00E9FE  2  A2 08 00             LDXW    copylen
00EA01  2               ;
00EA01  2               _1320010:
00EA01  2  BF EE EC 00          LDALX   cpcode          ;transfer copy code to...
00EA05  2  95 25                STA     mcftwork,x      ;to workspace
00EA07  2  CA                   DEX
00EA08  2  10 F7                BPL     _1320010
00EA0A  2               ;
00EA0A  2  EB                   XBA                     ;recover opcode &...
00EA0B  2  85 26                STA     mcftopc         ;set it
00EA0D  2  C2 20                SLONGA
00EA0F  2  68                   PLA                     ;get banks &...
00EA10  2  85 27                STA     mcftbnk         ;set them
00EA12  2  60                   RTS
00EA13  2               ;
00EA13  2               ;================================================================================
00EA13  2               ;
00EA13  2               ;decdcnt: DECREMENT DUMP COUNT
00EA13  2               ;
00EA13  2               ;	-------------------------------------------
00EA13  2               ;	Preparatory Ops: bytes to process in FACB
00EA13  2               ;	                 bytes processed in CHARCNT
00EA13  2               ;
00EA13  2               ;	Returned Values: .A: used
00EA13  2               ;	                 .X: entry value
00EA13  2               ;	                 .Y: entry value
00EA13  2               ;	                 .C: 1 = count = zero
00EA13  2               ;	-------------------------------------------
00EA13  2               ;
00EA13  2               decdcnt:
00EA13  2  E2 20                SHORTA
00EA15  2  A9 00                LDA     #0
00EA17  2  EB                   XBA                     ;clear .B
00EA18  2  A5 2F                LDA     facb+s_word     ;count MSW
00EA1A  2  C2 20                SLONGA
00EA1C  2  38                   SEC
00EA1D  2  05 2D                ORA     facb            ;count LSW
00EA1F  2  F0 13                BEQ     _0330020        ;zero, just exit
00EA21  2               ;
00EA21  2  A5 2D                LDA     facb
00EA23  2  E5 42                SBC     charcnt         ;bytes processed
00EA25  2  85 2D                STA     facb
00EA27  2  E2 20                SHORTA
00EA29  2  A5 2F                LDA     facb+s_word
00EA2B  2  E9 00                SBC     #0              ;handle borrow
00EA2D  2  90 04                BCC     _0330010        ;underflow
00EA2F  2               ;
00EA2F  2  85 2F                STA     facb+s_word
00EA31  2  18                   CLC                     ;count > 0
00EA32  2  60                   RTS
00EA33  2               ;
00EA33  2               _0330010:
00EA33  2  38                   SEC
00EA34  2               ;
00EA34  2               _0330020:
00EA34  2  E2 20                SHORTA
00EA36  2  60                   RTS
00EA37  2               ;
00EA37  2               ;================================================================================
00EA37  2               ;
00EA37  2               ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
00EA37  2               ;
00EA37  2               enddest:
00EA37  2  20 7B EA             JSR     facasize        ;check start...
00EA3A  2  C9 04                CMP     #s_dword        ;for range
00EA3C  2  B0 1E                BCS     _0340010        ;out of range - error
00EA3E  2               ;
00EA3E  2  20 5D EA             JSR     facaddra        ;store start
00EA41  2  20 8B EA             JSR     getparm         ;get end
00EA44  2  B0 16                BCS     _0340010        ;not entered - error
00EA46  2               ;
00EA46  2  20 7B EA             JSR     facasize        ;check end...
00EA49  2  C9 04                CMP     #s_dword        ;for range
00EA4B  2  B0 0F                BCS     _0340010        ;out of range - error
00EA4D  2               ;
00EA4D  2  20 67 EA             JSR     facaddrb        ;store end
00EA50  2  20 8B EA             JSR     getparm         ;get destination
00EA53  2  B0 07                BCS     _0340010        ;not entered - error
00EA55  2               ;
00EA55  2  20 7B EA             JSR     facasize        ;check destination...
00EA58  2  C9 04                CMP     #s_dword        ;for range
00EA5A  2  90 15                BCC     facaoper        ;store dest address
00EA5C  2               ;
00EA5C  2               _0340010:
00EA5C  2  60                   RTS                     ;exit w/error
00EA5D  2               ;
00EA5D  2               ;================================================================================
00EA5D  2               ;
00EA5D  2               ;facaddra: COPY FACA TO ADDRA
00EA5D  2               ;
00EA5D  2               facaddra:
00EA5D  2  A2 02                LDX     #s_xword-1
00EA5F  2               ;
00EA5F  2               _0350010:
00EA5F  2  B5 25                LDA     faca,x
00EA61  2  95 1F                STA     addra,x
00EA63  2  CA                   DEX
00EA64  2  10 F9                BPL     _0350010
00EA66  2               ;
00EA66  2  60                   RTS
00EA67  2               ;
00EA67  2               ;================================================================================
00EA67  2               ;
00EA67  2               ;facaddrb: COPY FACA TO ADDRB
00EA67  2               ;
00EA67  2               facaddrb:
00EA67  2  A2 02                LDX     #s_xword-1
00EA69  2               ;
00EA69  2               _1350010:
00EA69  2  B5 25                LDA     faca,x
00EA6B  2  95 22                STA     addrb,x
00EA6D  2  CA                   DEX
00EA6E  2  10 F9                BPL     _1350010
00EA70  2               ;
00EA70  2  60                   RTS
00EA71  2               ;
00EA71  2               ;================================================================================
00EA71  2               ;
00EA71  2               ;facaoper: COPY FACA TO OPERAND
00EA71  2               ;
00EA71  2               facaoper:
00EA71  2  A2 02                LDX     #s_oper-1
00EA73  2               ;
00EA73  2               _0360010:
00EA73  2  B5 25                LDA     faca,x
00EA75  2  95 39                STA     operand,x
00EA77  2  CA                   DEX
00EA78  2  10 F9                BPL     _0360010
00EA7A  2               ;
00EA7A  2  60                   RTS
00EA7B  2               ;
00EA7B  2               ;================================================================================
00EA7B  2               ;
00EA7B  2               ;facasize: REPORT OPERAND SIZE IN FACA
00EA7B  2               ;
00EA7B  2               ;	------------------------------------------
00EA7B  2               ;	Preparatory Ops: operand in FACA
00EA7B  2               ;
00EA7B  2               ;	Returned Values: .A: s_byte  (1)
00EA7B  2               ;	                     s_word  (2)
00EA7B  2               ;	                     s_xword (3)
00EA7B  2               ;	                     s_dword (4)
00EA7B  2               ;
00EA7B  2               ;	Notes: 1) This function will always report
00EA7B  2               ;	          a non-zero result.
00EA7B  2               ;	------------------------------------------
00EA7B  2               ;
00EA7B  2               facasize:
00EA7B  2  E2 30                SHORTR
00EA7D  2  A2 03                LDX     #s_dword-1
00EA7F  2               ;
00EA7F  2               _0370010:
00EA7F  2  B5 25                LDA     faca,x          ;get byte
00EA81  2  D0 03                BNE     _0370020        ;done
00EA83  2               ;
00EA83  2  CA                   DEX
00EA84  2  D0 F9                BNE     _0370010        ;next byte
00EA86  2               ;
00EA86  2               _0370020:
00EA86  2  E8                   INX                     ;count=index+1
00EA87  2  8A                   TXA
00EA88  2  60                   RTS
00EA89  2               ;
00EA89  2               ;================================================================================
00EA89  2               ;
00EA89  2               ;getparm: GET A PARAMETER
00EA89  2               ;
00EA89  2               ;	-------------------------------------------------
00EA89  2               ;	Preparatory Ops: null-terminated input in IBUFFER
00EA89  2               ;
00EA89  2               ;	Returned Values: .A: chars in converted parameter
00EA89  2               ;	                 .X: used
00EA89  2               ;	                 .Y: entry value
00EA89  2               ;	                 .C: 1 = no parameter entered
00EA89  2               ;	-------------------------------------------------
00EA89  2               ;
00EA89  2               getparmr:
00EA89  2  C6 3D                DEC     ibufidx         ;reread previous char
00EA8B  2               ;
00EA8B  2               getparm:
00EA8B  2  5A                   PHY                     ;preserve
00EA8C  2  20 F5 E7             JSR     ascbin          ;convert parameter to binary
00EA8F  2  B0 1C                BCS     _0380040        ;conversion error
00EA91  2               ;
00EA91  2  20 7A EB             JSR     getcharr        ;reread last char
00EA94  2  D0 08                BNE     _0380010        ;not end-of-input
00EA96  2               ;
00EA96  2  C6 3D                DEC     ibufidx         ;reindex to terminator
00EA98  2  A5 42                LDA     charcnt         ;get chars processed so far
00EA9A  2  F0 0C                BEQ     _0380030        ;none
00EA9C  2               ;
00EA9C  2  D0 08                BNE     _0380020        ;some
00EA9E  2               ;
00EA9E  2               _0380010:
00EA9E  2  C9 20                CMP     #a_blank        ;recognized delimiter
00EAA0  2  F0 04                BEQ     _0380020        ;end of parameter
00EAA2  2               ;
00EAA2  2  C9 2C                CMP     #','            ;recognized delimiter
00EAA4  2  D0 07                BNE     _0380040        ;unknown delimter
00EAA6  2               ;
00EAA6  2               _0380020:
00EAA6  2  18                   CLC
00EAA7  2  24                   .BYTE   bitzp           ;skip SEC below
00EAA8  2               ;
00EAA8  2               _0380030:
00EAA8  2  38                   SEC
00EAA9  2  7A                   PLY                     ;restore
00EAAA  2  A5 42                LDA     charcnt         ;get count
00EAAC  2  60                   RTS                     ;done
00EAAD  2               ;
00EAAD  2               _0380040:                       ;.rept 3               ;clean up stack
00EAAD  2  68                   PLA
00EAAE  2  68                   PLA
00EAAF  2  68                   PLA
00EAB0  2               ;.endr
00EAB0  2  4C 7A E1             JMP     monerr          ;abort w/error
00EAB3  2               ;
00EAB3  2               ;================================================================================
00EAB3  2               ;
00EAB3  2               ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
00EAB3  2               ;
00EAB3  2               ;	--------------------------------------------------
00EAB3  2               ;	Calling syntax: JSR NXTADDRA
00EAB3  2               ;
00EAB3  2               ;	Exit registers: .A: used
00EAB3  2               ;	                .B: used
00EAB3  2               ;	                .X: entry value
00EAB3  2               ;	                .Y: entry value
00EAB3  2               ;	                DB: entry value
00EAB3  2               ;	                DP: entry value
00EAB3  2               ;	                PB: entry value
00EAB3  2               ;	                SR: NVmxDIZC
00EAB3  2               ;	                    ||||||||
00EAB3  2               ;	                    |||||||+---> 0: ADDRA < ADDRB
00EAB3  2               ;	                    |||||||      1: ADDRA >= ADDRB
00EAB3  2               ;	                    ||||||+----> undefined
00EAB3  2               ;	                    |||+++-----> entry value
00EAB3  2               ;	                    ||+--------> 1
00EAB3  2               ;	                    ++---------> undefined
00EAB3  2               ;	--------------------------------------------------
00EAB3  2               ;
00EAB3  2               nxtaddra:
00EAB3  2  E2 20                SHORTA
00EAB5  2  A5 21                LDA     addra+s_word    ;bits 16-23
00EAB7  2  C5 24                CMP     addrb+s_word
00EAB9  2  90 0F                BCC     incaddra        ;increment
00EABB  2               ;
00EABB  2  D0 0A                BNE     _0390010        ;don't increment
00EABD  2               ;
00EABD  2  C2 20                SLONGA
00EABF  2  A5 1F                LDA     addra           ;bits 0-15
00EAC1  2  C5 22                CMP     addrb           ;condition flags
00EAC3  2  E2 20                SHORTA
00EAC5  2  90 03                BCC     incaddra        ;increment
00EAC7  2               ;
00EAC7  2               _0390010:
00EAC7  2  60                   RTS
00EAC8  2               ;
00EAC8  2               ;================================================================================
00EAC8  2               ;
00EAC8  2               ;getbyte: GET A BYTE FROM MEMORY
00EAC8  2               ;
00EAC8  2               getbyte:
00EAC8  2  A7 1F                LDAIL   addra           ;get a byte
00EACA  2               ;
00EACA  2               ;================================================================================
00EACA  2               ;
00EACA  2               ;incaddra: INCREMENT WORKING ADDRESS 'A'
00EACA  2               ;
00EACA  2               ;	--------------------------------------------------
00EACA  2               ;	Calling syntax: JSR INCADDRA
00EACA  2               ;
00EACA  2               ;	Exit registers: .A: entry value
00EACA  2               ;	                .B: entry value
00EACA  2               ;	                .X: entry value
00EACA  2               ;	                .Y: entry value
00EACA  2               ;	                DB: entry value
00EACA  2               ;	                DP: entry value
00EACA  2               ;	                PB: entry value
00EACA  2               ;	                SR: NVmxDIZC
00EACA  2               ;	                    ||||||||
00EACA  2               ;	                    ++++++++---> entry value
00EACA  2               ;	--------------------------------------------------
00EACA  2               ;
00EACA  2               incaddra:
00EACA  2  08                   PHP
00EACB  2  C2 20                SLONGA
00EACD  2  E6 1F                INC     addra           ;bump bits 0-15
00EACF  2  D0 04                BNE     _0400010
00EAD1  2               ;
00EAD1  2  E2 20                SHORTA
00EAD3  2  E6 21                INC     addra+s_word    ;bump bits 16-23
00EAD5  2               ;
00EAD5  2               _0400010:
00EAD5  2  28                   PLP
00EAD6  2  60                   RTS
00EAD7  2               ;
00EAD7  2               ;================================================================================
00EAD7  2               ;
00EAD7  2               ;incoper: INCREMENT OPERAND ADDRESS
00EAD7  2               ;
00EAD7  2               incoper:
00EAD7  2  18                   CLC
00EAD8  2  08                   PHP
00EAD9  2  C2 30                LONGR
00EADB  2  48                   PHA
00EADC  2  E6 39                INC     operand         ;handle base address
00EADE  2  D0 06                BNE     _0410010
00EAE0  2               ;
00EAE0  2  E2 20                SHORTA
00EAE2  2  E6 3B                INC     operand+s_word  ;handle bank
00EAE4  2  C2 20                SLONGA
00EAE6  2               ;
00EAE6  2               _0410010:
00EAE6  2  68                   PLA
00EAE7  2  28                   PLP
00EAE8  2  60                   RTS
00EAE9  2               ;
00EAE9  2               ;================================================================================
00EAE9  2               ;
00EAE9  2               ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
00EAE9  2               ;
00EAE9  2               ;	----------------------------------
00EAE9  2               ;	Preparatory Ops: .X: 65C816 opcode
00EAE9  2               ;
00EAE9  2               ;	Returned Values: .A: mode flags
00EAE9  2               ;	                 .X: operand size
00EAE9  2               ;	                 .Y: mode index
00EAE9  2               ;	----------------------------------
00EAE9  2               ;
00EAE9  2               instdata:
00EAE9  2  E2 30                SHORTR
00EAEB  2  BD F7 EE             LDA     mnetabam,x      ;addressing mode data
00EAEE  2  48                   PHA                     ;save mode flag bits
00EAEF  2  48                   PHA                     ;save size data
00EAF0  2  29 0F                AND     #amodmask       ;extract mode index &...
00EAF2  2  A8                   TAY                     ;save
00EAF3  2  68                   PLA                     ;recover data
00EAF4  2  29 30                AND     #opsmask        ;mask mode fields &...
00EAF6  2               ;         .rept n_opslsr        ;extract operand size
00EAF6  2  4A                   LSR
00EAF7  2  4A                   LSR
00EAF8  2  4A                   LSR
00EAF9  2  4A                   LSR
00EAFA  2               ;         .endr
00EAFA  2  AA                   TAX                     ;operand size
00EAFB  2  68                   PLA                     ;recover mode flags
00EAFC  2  29 C0                AND     #vopsmask       ;discard mode & size fields
00EAFE  2  60                   RTS
00EAFF  2               ;
00EAFF  2               ;================================================================================
00EAFF  2               ;
00EAFF  2               ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
00EAFF  2               ;
00EAFF  2               ;	-----------------------------------------------
00EAFF  2               ;	Preparatory Ops:    ADDRA: base address
00EAFF  2               ;	                 INSTSIZE: instruction size
00EAFF  2               ;	                  OPERAND: offset
00EAFF  2               ;
00EAFF  2               ;	Returned Values:  OPERAND: target address (L/H)
00EAFF  2               ;	                       .A: used
00EAFF  2               ;	                       .X: entry value
00EAFF  2               ;                              .Y: entry value
00EAFF  2               ;	-----------------------------------------------
00EAFF  2               ;
00EAFF  2               offtarg:
00EAFF  2  C2 20                SLONGA
00EB01  2  A5 1F                LDA     addra           ;base address
00EB03  2  E2 20                SHORTA
00EB05  2  46 44                LSR     instsize        ;bit 0 will be set if...
00EB07  2  B0 07                BCS     _0420010        ;a long branch
00EB09  2               ;
00EB09  2  24 39                BIT     operand         ;short forward or backward?
00EB0B  2  10 03                BPL     _0420010        ;forward
00EB0D  2               ;
00EB0D  2  EB                   XBA                     ;expose address MSB
00EB0E  2  3A                   DEA                     ;back a page
00EB0F  2  EB                   XBA                     ;expose address LSB
00EB10  2               ;
00EB10  2               _0420010:
00EB10  2  C2 20                SLONGA
00EB12  2  18                   CLC
00EB13  2  65 39                ADC     operand         ;calculate target address
00EB15  2  85 39                STA     operand         ;new operand
00EB17  2  E2 20                SHORTA
00EB19  2  A9 03                LDA     #s_xword
00EB1B  2  85 44                STA     instsize        ;effective instruction size
00EB1D  2  60                   RTS
00EB1E  2               ;
00EB1E  2               ;================================================================================
00EB1E  2               ;
00EB1E  2               ;setxaddr: SET EXECUTION ADDRESS
00EB1E  2               ;
00EB1E  2               setxaddr:
00EB1E  2  B0 13                BCS     _0430010        ;no address given
00EB20  2               ;
00EB20  2  20 7B EA             JSR     facasize        ;check address...
00EB23  2  C9 04                CMP     #s_dword        ;range
00EB25  2  B0 0D                BCS     _0430020        ;out of range
00EB27  2               ;
00EB27  2  C2 20                SLONGA
00EB29  2  A5 25                LDA     faca            ;execution address
00EB2B  2  85 11                STA     reg_pcx         ;set new PC value
00EB2D  2  E2 20                SHORTA
00EB2F  2  A5 27                LDA     faca+s_word
00EB31  2  85 10                STA     reg_pbx         ;set new PB value
00EB33  2               ;
00EB33  2               _0430010:
00EB33  2  18                   CLC                     ;no error
00EB34  2               ;
00EB34  2               _0430020:
00EB34  2  60                   RTS
00EB35  2               ;
00EB35  2               ;================================================================================
00EB35  2               ;
00EB35  2               ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET
00EB35  2               ;
00EB35  2               ;	-------------------------------------------------
00EB35  2               ;	Preparatory Ops:   ADDRA: instruction address
00EB35  2               ;	                 OPERAND: target address
00EB35  2               ;
00EB35  2               ;	Returned Values: OPERAND: computed offset
00EB35  2               ;	                      .A: effective operand size
00EB35  2               ;	                      .X: entry value
00EB35  2               ;                             .Y: entry value
00EB35  2               ;	                      .C: 1 = branch out of range
00EB35  2               ;
00EB35  2               ;	Execution notes: ADDRB is set to the branch base
00EB35  2               ;	                 address.
00EB35  2               ;	-------------------------------------------------
00EB35  2               ;
00EB35  2               targoff:
00EB35  2  64 45                STZ     instsize+s_byte ;always zero
00EB37  2  A5 44                LDA     instsize        ;instruction size will tell...
00EB39  2  4A                   LSR                     ;if long or short branch
00EB3A  2               ;
00EB3A  2               ;-------------------------------------------------
00EB3A  2               _btype          = facc+5        ;branch type flag
00EB3A  2               ;-------------------------------------------------
00EB3A  2               ;
00EB3A  2  66 38                ROR     _btype          ;set branch type...
00EB3C  2               ;
00EB3C  2               ;	x0000000
00EB3C  2               ;	|
00EB3C  2               ;	+----------> 0: short
00EB3C  2               ;	             1: long
00EB3C  2               ;
00EB3C  2  C2 20                SLONGA
00EB3E  2  18                   CLC
00EB3F  2  A5 1F                LDA     addra           ;instruction address
00EB41  2  65 44                ADC     instsize        ;instruction size
00EB43  2  85 22                STA     addrb           ;base address
00EB45  2  38                   SEC
00EB46  2  A5 39                LDA     operand         ;target address
00EB48  2  E5 22                SBC     addrb           ;base address
00EB4A  2  85 39                STA     operand         ;offset
00EB4C  2  E2 20                SHORTA
00EB4E  2  90 15                BCC     _0440040        ;backward branch
00EB50  2               ;
00EB50  2  24 38                BIT     _btype          ;check branch range
00EB52  2  30 0A                BMI     _0440020        ;long
00EB54  2               ;
00EB54  2               ;
00EB54  2               ;	process short forward branch...
00EB54  2               ;
00EB54  2  EB                   XBA                     ;offset MSB should be zero
00EB55  2  D0 21                BNE     _0440060        ;it isn't - out of range
00EB57  2               ;
00EB57  2  EB                   XBA                     ;offset LSB should be $00-$7F
00EB58  2  30 1E                BMI     _0440060        ;it isn't - out of range
00EB5A  2               ;
00EB5A  2               _0440010:
00EB5A  2  A9 01                LDA     #s_byte         ;final instruction size
00EB5C  2  18                   CLC                     ;branch in range
00EB5D  2  60                   RTS
00EB5E  2               ;
00EB5E  2               ;
00EB5E  2               ;	process long forward branch...
00EB5E  2               ;
00EB5E  2               _0440020:
00EB5E  2  EB                   XBA                     ;offset MSB should be positive
00EB5F  2  30 17                BMI     _0440060        ;it isn't - branch out of range
00EB61  2               ;
00EB61  2               _0440030:
00EB61  2  A9 02                LDA     #s_word
00EB63  2  18                   CLC
00EB64  2  60                   RTS
00EB65  2               ;
00EB65  2               ;
00EB65  2               ;	process backward branch...
00EB65  2               ;
00EB65  2               _0440040:
00EB65  2  24 38                BIT     _btype          ;long or short?
00EB67  2  30 0C                BMI     _0440050        ;long
00EB69  2               ;
00EB69  2               ;
00EB69  2               ;	process short backward branch...
00EB69  2               ;
00EB69  2  EB                   XBA                     ;offset MSB should be negative
00EB6A  2  10 0C                BPL     _0440060        ;it isn't - out of range
00EB6C  2               ;
00EB6C  2  49 FF                EOR     #%11111111      ;complement offset MSB 2s
00EB6E  2  D0 08                BNE     _0440060        ;out of range
00EB70  2               ;
00EB70  2  EB                   XBA                     ;offset LSB should be $80-$FF
00EB71  2  30 E7                BMI     _0440010        ;it is - branch in range
00EB73  2               ;
00EB73  2  80 03                BRA     _0440060        ;branch out of range
00EB75  2               ;
00EB75  2               ;
00EB75  2               ;	process long backward branch...
00EB75  2               ;
00EB75  2               _0440050:
00EB75  2  EB                   XBA                     ;offset MSB should be negative
00EB76  2  30 E9                BMI     _0440030        ;it is - branch in range
00EB78  2               ;
00EB78  2               _0440060:
00EB78  2  38                   SEC                     ;range error
00EB79  2  60                   RTS
00EB7A  2               ;
00EB7A  2               ;================================================================================
00EB7A  2               ;
00EB7A  2               ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
00EB7A  2               ;
00EB7A  2               getcharr:
00EB7A  2  C6 3D                DEC     ibufidx         ;move back a char
00EB7C  2               ;
00EB7C  2               ;================================================================================
00EB7C  2               ;
00EB7C  2               ;getchar: GET A CHARACTER FROM INPUT BUFFER
00EB7C  2               ;
00EB7C  2               ;	----------------------------------------------
00EB7C  2               ;	Preparatory Ops : none
00EB7C  2               ;
00EB7C  2               ;	Register Returns: .A: character or <NUL>
00EB7C  2               ;	                  .B: entry value
00EB7C  2               ;	                  .X: entry value
00EB7C  2               ;	                  .Y: entry value
00EB7C  2               ;
00EB7C  2               ;	MPU Flags: NVmxDIZC
00EB7C  2               ;	           ||||||||
00EB7C  2               ;	           |||||||+---> entry value
00EB7C  2               ;	           ||||||+----> 1: <NUL> gotten
00EB7C  2               ;	           |||||+-----> entry value
00EB7C  2               ;	           ||||+------> entry value
00EB7C  2               ;	           |||+-------> entry value
00EB7C  2               ;	           ||+--------> entry value
00EB7C  2               ;	           |+---------> not defined
00EB7C  2               ;	           +----------> not defined
00EB7C  2               ;	----------------------------------------------
00EB7C  2               ;
00EB7C  2               getchar:
00EB7C  2  DA                   PHX
00EB7D  2  5A                   PHY
00EB7E  2  08                   PHP                     ;save register sizes
00EB7F  2  E2 30                SHORTR                  ;force 8 bits
00EB81  2  A6 3D                LDX     ibufidx         ;buffer index
00EB83  2  BD 00 02             LDA     ibuffer,x       ;get char
00EB86  2  E6 3D                INC     ibufidx         ;bump index
00EB88  2  28                   PLP                     ;restore register widths
00EB89  2  7A                   PLY
00EB8A  2  FA                   PLX
00EB8B  2  EB                   XBA                     ;condition...
00EB8C  2  EB                   XBA                     ;.Z
00EB8D  2  60                   RTS
00EB8E  2               ;
00EB8E  2               ;================================================================================
00EB8E  2               ;
00EB8E  2               ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
00EB8E  2               ;
00EB8E  2               ;	-----------------------------------------------------
00EB8E  2               ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
00EB8E  2               ;
00EB8E  2               ;	Returned Values: .A: used
00EB8E  2               ;	                 .X: used
00EB8E  2               ;	                 .Y: pattern length if entered
00EB8E  2               ;	                 .C: 0 = pattern valid
00EB8E  2               ;	                     1 = exception:
00EB8E  2               ;	                 .N  0 = no pattern entered
00EB8E  2               ;	                     1 = evaluation error
00EB8E  2               ;
00EB8E  2               ;	Notes: 1) If pattern is preceded by "'" the following
00EB8E  2               ;	          characters are interpreted as ASCII.
00EB8E  2               ;	       2) A maximum of 32 bytes or characters is
00EB8E  2               ;	          accepted.  Excess input will be discarded.
00EB8E  2               ;	-----------------------------------------------------
00EB8E  2               ;
00EB8E  2               getpat:
00EB8E  2  64 49                STZ     status          ;clear pattern type indicator
00EB90  2  A0 00                LDY     #0              ;pattern index
00EB92  2  20 7A EB             JSR     getcharr        ;get last char
00EB95  2  F0 3C                BEQ     _0450070        ;EOS
00EB97  2               ;
00EB97  2  A6 3D                LDX     ibufidx         ;current buffer index
00EB99  2  20 DA EB             JSR     getcharw        ;get next
00EB9C  2  F0 35                BEQ     _0450070        ;EOS
00EB9E  2               ;
00EB9E  2  C9 27                CMP     #$27            ; single quote
00EBA0  2  D0 04                BNE     _0450010        ;not ASCII input
00EBA2  2               ;
00EBA2  2  66 49                ROR     status          ;condition flag
00EBA4  2  80 12                BRA     _0450030        ;balance of input is ASCII
00EBA6  2               ;
00EBA6  2               _0450010:
00EBA6  2  86 3D                STX     ibufidx         ;restore buffer index
00EBA8  2               ;
00EBA8  2               _0450020:
00EBA8  2  20 8B EA             JSR     getparm         ;evaluate numeric pattern
00EBAB  2  B0 21                BCS     _0450060        ;done w/pattern
00EBAD  2               ;
00EBAD  2  20 7B EA             JSR     facasize        ;size
00EBB0  2  C9 02                CMP     #s_word
00EBB2  2  B0 1F                BCS     _0450070        ;not a byte - error
00EBB4  2               ;
00EBB4  2  A5 25                LDA     faca            ;get byte &...
00EBB6  2  80 05                BRA     _0450040        ;store
00EBB8  2               ;
00EBB8  2               _0450030:
00EBB8  2  20 7C EB             JSR     getchar         ;get ASCII char
00EBBB  2  F0 11                BEQ     _0450060        ;done w/pattern
00EBBD  2               ;
00EBBD  2               _0450040:
00EBBD  2  C0 20                CPY     #s_auxbuf       ;pattern buffer full?
00EBBF  2  F0 0A                BEQ     _0450050        ;yes
00EBC1  2               ;
00EBC1  2  99 46 02             STA     auxbuf,y        ;store pattern
00EBC4  2  C8                   INY
00EBC5  2  24 49                BIT     status
00EBC7  2  10 DF                BPL     _0450020        ;get next numeric value
00EBC9  2               ;
00EBC9  2  80 ED                BRA     _0450030        ;get next ASCII char
00EBCB  2               ;
00EBCB  2               _0450050:
00EBCB  2  20 D3 E7             JSR     alert           ;excess input
00EBCE  2               ;
00EBCE  2               _0450060:
00EBCE  2  84 3C                STY     auxbufix        ;save pattern size
00EBD0  2  98                   TYA                     ;condition .Z
00EBD1  2  18                   CLC                     ;pattern valid
00EBD2  2  60                   RTS
00EBD3  2               ;
00EBD3  2               ;
00EBD3  2               ;	no pattern entered...
00EBD3  2               ;
00EBD3  2               _0450070:
00EBD3  2  C2 80                REP     #%10000000
00EBD5  2  38                   SEC
00EBD6  2  60                   RTS
00EBD7  2               ;
00EBD7  2               ;
00EBD7  2               ;	evaluation error...
00EBD7  2               ;
00EBD7  2               _0450080:
00EBD7  2  E2 81                SEP     #%10000001
00EBD9  2  60                   RTS
00EBDA  2               ;
00EBDA  2               ;================================================================================
00EBDA  2               ;
00EBDA  2               ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
00EBDA  2               ;
00EBDA  2               ;	--------------------------------------------------
00EBDA  2               ;	Preparatory Ops: Null-terminated input in IBUFFER.
00EBDA  2               ;
00EBDA  2               ;	Returned Values: .A: char or null
00EBDA  2               ;	                 .X: entry value
00EBDA  2               ;	                 .Y: entry value
00EBDA  2               ;	                 .Z: 1 = null terminator detected
00EBDA  2               ;
00EBDA  2               ;	Notes: Whitespace is defined as a blank ($20) or a
00EBDA  2               ;	       horizontal tab ($09).
00EBDA  2               ;	--------------------------------------------------
00EBDA  2               ;
00EBDA  2               getcharw:
00EBDA  2  20 7C EB             JSR     getchar         ;get from buffer
00EBDD  2  F0 08                BEQ     _0460010        ;EOI
00EBDF  2               ;
00EBDF  2  C9 20                CMP     #a_blank
00EBE1  2  F0 F7                BEQ     getcharw        ;discard whitespace
00EBE3  2               ;
00EBE3  2  C9 09                CMP     #a_ht           ;also whitespace
00EBE5  2  F0 F3                BEQ     getcharw
00EBE7  2               ;
00EBE7  2               _0460010:
00EBE7  2  18                   CLC
00EBE8  2  60                   RTS
00EBE9  2               ;
00EBE9  2               ;================================================================================
00EBE9  2               ;
00EBE9  2               ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
00EBE9  2               ;
00EBE9  2               ;	-----------------------------------------------------------
00EBE9  2               ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
00EBE9  2               ;	                 input & set IBUFIDX to the number of chars
00EBE9  2               ;	                 loaded into the buffer.
00EBE9  2               ;
00EBE9  2               ;	Returned Values: .A: used
00EBE9  2               ;	                 .X: characters entered
00EBE9  2               ;	                 .Y: used
00EBE9  2               ;
00EBE9  2               ;	Example: STZ IBUFIDX
00EBE9  2               ;	         JSR INPUT
00EBE9  2               ;
00EBE9  2               ;	Notes: Input is collected in IBUFFER & is null-terminated.
00EBE9  2               ;	       IBUFIDX is reset to zero upon exit.
00EBE9  2               ;	-----------------------------------------------------------
00EBE9  2               ;
00EBE9  2               input:
00EBE9  2  A6 3D                LDX     ibufidx
00EBEB  2  9E 00 02             STZ     ibuffer,x       ;be sure buffer is terminated
00EBEE  2  20 50 E7             JSR     dpyibuf         ;print default input if any
00EBF1  2               
00EBF1  2  A6 3D                LDX     ibufidx         ;starting buffer index
00EBF3  2               ;
00EBF3  2               ;
00EBF3  2               ;	main input loop...
00EBF3  2               ;
00EBF3  2               _0470010:
00EBF3  2  20 DF F2             JSR     CURSOR
00EBF6  2               _047001A:
00EBF6  2  20 74 FF             JSR     getcha          ;poll for input
00EBF9  2  90 02                BCC     _0470020        ;got something
00EBFB  2               ;
00EBFB  2               ;         wai                   ;wait 'til any IRQ &...
00EBFB  2  80 F9                BRA     _047001A        ;try again
00EBFD  2               ;
00EBFD  2               _0470020:
00EBFD  2  C9 7F                CMP     #a_del          ;above ASCII range?
00EBFF  2  B0 F5                BCS     _047001A        ;yes, ignore
00EC01  2               
00EC01  2  20 1F F3             JSR     UNCURSOR
00EC04  2               ;
00EC04  2  C9 09                CMP     #a_ht           ;horizontal tab?
00EC06  2  D0 02                BNE     _0470030        ;no
00EC08  2               ;
00EC08  2  A9 20                LDA     #a_blank        ;replace <HT> w/blank
00EC0A  2               ;
00EC0A  2               _0470030:
00EC0A  2  C9 20                CMP     #a_blank        ;control char?
00EC0C  2  90 10                BCC     _0470050        ;yes
00EC0E  2               ;
00EC0E  2               ;
00EC0E  2               ;	process QWERTY character...
00EC0E  2               ;
00EC0E  2  E0 45                CPX     #s_ibuf         ;room in buffer?
00EC10  2  B0 05                BCS     _0470040        ;no
00EC12  2               ;
00EC12  2  9D 00 02             STA     ibuffer,x       ;store char
00EC15  2  E8                   INX                     ;bump index
00EC16  2  2C                   .BYTE   bitabs          ;echo char
00EC17  2               ;
00EC17  2               _0470040:
00EC17  2  A9 07                LDA     #a_bel          ;alert user
00EC19  2  20 71 FF             JSR     putcha
00EC1C  2  80 D5                BRA     _0470010        ;get some more
00EC1E  2               ;
00EC1E  2               ;
00EC1E  2               ;	process carriage return...
00EC1E  2               ;
00EC1E  2               _0470050:
00EC1E  2  C9 0D                CMP     #a_cr           ;carriage return?
00EC20  2  D0 06                BNE     _0470060        ;no
00EC22  2               ;
00EC22  2               ;         phx                   ;protect input count
00EC22  2               ;         pea dc_co
00EC22  2               ;         jsr sprint            ;cursor off
00EC22  2               ;         plx                   ;recover input count
00EC22  2  9E 00 02             STZ     ibuffer,x       ;terminate input &...
00EC25  2  64 3D                STZ     ibufidx         ;reset buffer index
00EC27  2  60                   RTS                     ;done
00EC28  2               ;
00EC28  2               ;
00EC28  2               ;	process backspace...
00EC28  2               ;
00EC28  2               _0470060:
00EC28  2  C9 08                CMP     #a_bs           ;backspace?
00EC2A  2  D0 C7                BNE     _0470010        ;no
00EC2C  2               ;
00EC2C  2  8A                   TXA
00EC2D  2  F0 C4                BEQ     _0470010        ;no input, ignore <BS>
00EC2F  2               ;
00EC2F  2  CA                   DEX                     ;1 less char
00EC30  2  DA                   PHX                     ;preserve count
00EC31  2  20 90 E7             JSR     gendbs          ;destructive backspace
00EC34  2  FA                   PLX                     ;restore count
00EC35  2  80 BC                BRA     _0470010        ;get more input
00EC37  2               ;
00EC37  2               ;================================================================================
00EC37  2               ;
00EC37  2               ;lodbnk: LOAD SOURCE & DESTINATION BANKS
00EC37  2               ;
00EC37  2               lodbnk:
00EC37  2  E2 20                SHORTA
00EC39  2  A5 3B                LDA     operand+s_word  ;destination bank
00EC3B  2  EB                   XBA                     ;make it MSB
00EC3C  2  A5 21                LDA     addra+s_word    ;source bank is LSB
00EC3E  2  60                   RTS
00EC3F  2               ;
00EC3F  2               ;================================================================================
00EC3F  2               ;
00EC3F  2               ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
00EC3F  2               ;
00EC3F  2               ;	--------------------------------------------------
00EC3F  2               ;	Preparatory Ops: Null-terminated input in IBUFFER.
00EC3F  2               ;
00EC3F  2               ;	Returned Values: .A: char or null
00EC3F  2               ;	                 .X: entry value
00EC3F  2               ;	                 .Y: entry value
00EC3F  2               ;	                 .Z: 1 = null terminator detected
00EC3F  2               ;	--------------------------------------------------
00EC3F  2               ;
00EC3F  2               getcharc:
00EC3F  2  20 7C EB             JSR     getchar         ;get from buffer
00EC42  2               ;
00EC42  2               ;================================================================================
00EC42  2               ;
00EC42  2               ;toupper: FORCE CHARACTER TO UPPER CASE
00EC42  2               ;
00EC42  2               ;	------------------------------------------------
00EC42  2               ;	Preparatory Ops : .A: 8 bit character to convert
00EC42  2               ;
00EC42  2               ;	Register Returns: .A: converted character
00EC42  2               ;	                  .B: entry value
00EC42  2               ;	                  .X: entry value
00EC42  2               ;	                  .Y: entry value
00EC42  2               ;
00EC42  2               ;	MPU Flags: no change
00EC42  2               ;
00EC42  2               ;	Notes: 1) This subroutine has no effect on char-
00EC42  2               ;	          acters that are not alpha.
00EC42  2               ;	------------------------------------------------
00EC42  2               ;
00EC42  2               toupper:
00EC42  2  08                   PHP                     ;protect flags
00EC43  2  C9 61                CMP     #a_asclcl       ;check char range
00EC45  2  90 06                BCC     _0480010        ;not LC alpha
00EC47  2               ;
00EC47  2  C9 7B                CMP     #a_asclch+s_byte
00EC49  2  B0 02                BCS     _0480010        ;not LC alpha
00EC4B  2               ;
00EC4B  2  29 5F                AND     #a_lctouc       ;force to UC
00EC4D  2               ;
00EC4D  2               _0480010:
00EC4D  2  28                   PLP                     ;restore flags
00EC4E  2               ;
00EC4E  2               touppera:
00EC4E  2  60                   RTS
00EC4F  2               ;
00EC4F  2               ;================================================================================
00EC4F  2               ;
00EC4F  2               ;teststop: TEST FOR STOP KEY
00EC4F  2               ;
00EC4F  2               ;	----------------------------------------------
00EC4F  2               ;	Preparatory Ops: none
00EC4F  2               ;
00EC4F  2               ;	Returned Values: .A: detected keypress, if any
00EC4F  2               ;	                 .X: entry value
00EC4F  2               ;	                 .Y: entry value
00EC4F  2               ;
00EC4F  2               ;	MPU Flags: NVmxDIZC
00EC4F  2               ;	           ||||||||
00EC4F  2               ;	           |||||||+---> 0: normal key detected
00EC4F  2               ;	           |||||||      1: <STOP> detected
00EC4F  2               ;	           +++++++----> not defined
00EC4F  2               ;
00EC4F  2               ;	Example: jsr teststop
00EC4F  2               ;	         bcs stopped
00EC4F  2               ;
00EC4F  2               ;	Notes: The symbol STOPKEY defines the ASCII
00EC4F  2               ;	       value of the "stop key."
00EC4F  2               ;	----------------------------------------------
00EC4F  2               ;
00EC4F  2               teststop:
00EC4F  2  20 74 FF             JSR     getcha          ;poll console
00EC52  2  B0 04                BCS     _0490010        ;no input
00EC54  2               ;
00EC54  2  C9 03                CMP     #stopkey        ;stop key pressed?
00EC56  2  F0 01                BEQ     _0490020        ;yes
00EC58  2               ;
00EC58  2               _0490010:
00EC58  2  18                   CLC
00EC59  2               ;
00EC59  2               _0490020:
00EC59  2  60                   RTS
00EC5A  2               
00EC5A  2               
00EC5A  2               ;__LOAD_________________________________________________________
00EC5A  2               ; LOAD A MOTOROLA FORMATTED HEX FILE (S28)
00EC5A  2               ;
00EC5A  2               ;_______________________________________________________________
00EC5A  2               LOADS19:
00EC5A  2  08                   PHP
00EC5B  2  E2 30                SHORTR
00EC5D  2  F4 BF F0             PEA     mm_S19_prmpt
00EC60  2  20 DC E7             JSR     sprint          ;display input prompt
00EC63  2               
00EC63  2               
00EC63  2               LOADS19_1:
00EC63  2  20 E1 EC             JSR     getc            ;
00EC66  2  C9 53                CMP     #'S'            ;
00EC68  2  D0 F9                BNE     LOADS19_1       ; FIRST CHAR NOT (S)
00EC6A  2  20 E1 EC             JSR     getc            ; READ CHAR
00EC6D  2  C9 38                CMP     #'8'            ;
00EC6F  2  F0 44                BEQ     LOAD21          ;
00EC71  2  C9 32                CMP     #'2'            ;
00EC73  2  D0 EE                BNE     LOADS19_1       ; SECOND CHAR NOT (2)
00EC75  2  A9 00                LDA     #$00            ;
00EC77  2  85 25                STA     faca            ; ZERO CHECKSUM
00EC79  2               
00EC79  2  20 B9 EC             JSR     GETBYTE         ; READ BYTE
00EC7C  2  E9 02                SBC     #$02            ;
00EC7E  2  85 2D                STA     facb            ; BYTE COUNT
00EC80  2               ; BUILD ADDRESS
00EC80  2  20 B9 EC             JSR     GETBYTE         ; READ 2 FRAMES
00EC83  2  85 21                STA     addra+2         ;
00EC85  2  20 B9 EC             JSR     GETBYTE         ; READ 2 FRAMES
00EC88  2  85 20                STA     addra+1         ;
00EC8A  2  20 B9 EC             JSR     GETBYTE         ;
00EC8D  2  85 1F                STA     addra           ;
00EC8F  2               
00EC8F  2  A0 00                LDY     #$00            ;
00EC91  2               LOAD11:
00EC91  2  20 B9 EC             JSR     GETBYTE         ;
00EC94  2  C6 2D                DEC     facb            ;
00EC96  2  F0 14                BEQ     LOAD15          ; ZERO BYTE COUNT
00EC98  2  97 1F                STA     [addra],Y       ; STORE DATA
00EC9A  2  C2 20                SLONGA
00EC9C  2  E6 1F                INC     addra           ;
00EC9E  2  C9 00 00             CMPW    $0000
00ECA1  2  D0 04                BNE     LOAD11A
00ECA3  2  E2 20                SHORTA
00ECA5  2  E6 21                INC     addra+2         ;
00ECA7  2               LOAD11A:
00ECA7  2  E2 20                SHORTA
00ECA9  2  4C 91 EC             JMP     LOAD11          ;
00ECAC  2               
00ECAC  2               LOAD15:
00ECAC  2  E6 25                INC     faca            ;
00ECAE  2  F0 B3                BEQ     LOADS19_1       ;
00ECB0  2               LOAD19:
00ECB0  2  A9 3F                LDA     #'?'            ;
00ECB2  2  20 71 FF             JSR     putcha          ;
00ECB5  2               LOAD21:
00ECB5  2  28                   PLP
00ECB6  2  4C 3B E1             JMP     monce           ;back to executive
00ECB9  2               GETBYTE:
00ECB9  2  20 D1 EC             JSR     INHEX           ; GET HEX CHAR
00ECBC  2  0A                   ASL     A               ;
00ECBD  2  0A                   ASL     A               ;
00ECBE  2  0A                   ASL     A               ;
00ECBF  2  0A                   ASL     A               ;
00ECC0  2  85 3F                STA     numeral         ;
00ECC2  2  20 D1 EC             JSR     INHEX           ;
00ECC5  2  29 0F                AND     #$0F            ; MASK TO 4 BITS
00ECC7  2  05 3F                ORA     numeral         ;
00ECC9  2  48                   PHA                     ;
00ECCA  2  18                   CLC                     ;
00ECCB  2  65 25                ADC     faca            ;
00ECCD  2  85 25                STA     faca            ;
00ECCF  2  68                   PLA                     ;
00ECD0  2  60                   RTS                     ;
00ECD1  2               ; INPUT HEX CHAR
00ECD1  2               INHEX:
00ECD1  2  20 E1 EC             JSR     getc            ;
00ECD4  2  C9 3A                CMP     #$3A            ; LESS THAN 9?
00ECD6  2  B0 02                BCS     INHEX_BIG       ; NO, SKIP NEXT
00ECD8  2  E9 2F                SBC     #$2F            ; CONVERT 0-9
00ECDA  2               INHEX_BIG:
00ECDA  2  C9 41                CMP     #$41            ; A OR MORE?
00ECDC  2  90 02                BCC     INHEX_SMALL     ; NO, SKIP NEXT
00ECDE  2  E9 37                SBC     #$37            ; CONVERT A-F
00ECE0  2               INHEX_SMALL:
00ECE0  2  60                   RTS                     ;
00ECE1  2               getc:
00ECE1  2  20 74 FF             JSR     getcha          ;poll for input
00ECE4  2  90 02                BCC     getcd           ;got something
00ECE6  2  80 F9                BRA     getc            ;try again
00ECE8  2               getcd:
00ECE8  2  48                   PHA                     ;
00ECE9  2  20 71 FF             JSR     putcha          ;
00ECEC  2  68                   PLA                     ;
00ECED  2  60                   RTS
00ECEE  2               
00ECEE  2               
00ECEE  2               
00ECEE  2               ;
00ECEE  2               ;cpcode: COPY MEMORY CODE
00ECEE  2               ;
00ECEE  2               ;	-------------------------------------------
00ECEE  2               ;	This code is transfered to workspace when a
00ECEE  2               ;	copy or fill operation is to be performed.
00ECEE  2               ;	-------------------------------------------
00ECEE  2               ;
00ECEE  2               cpcode:
00ECEE  2  8B                   PHB                     ;must preserve data bank
00ECEF  2               ;.rept s_mvinst
00ECEF  2  EA                   NOP                     ;placeholder
00ECF0  2  EA                   NOP                     ;placeholder
00ECF1  2  EA                   NOP                     ;placeholder
00ECF2  2               ;.endr
00ECF2  2  AB                   PLB                     ;restore data bank
00ECF3  2  5C 3B E1 00          JML     monce           ;return to command executive
00ECF7  2               cpcodeee:                       ;placeholder - do not delete
00ECF7  2               copylen         = cpcodeee-cpcode-1
00ECF7  2               ;
00ECF7  2               ;================================================================================
00ECF7  2               ;
00ECF7  2               ;COMMAND PROCESSING DATA TABLES
00ECF7  2               ;
00ECF7  2               ;
00ECF7  2               ;	monitor commands...
00ECF7  2               ;
00ECF7  2               mpctab:
00ECF7  2  41                   .BYTE   "A"             ;assemble code
00ECF8  2  43                   .BYTE   "C"             ;compare memory ranges
00ECF9  2  44                   .BYTE   "D"             ;disassemble code
00ECFA  2  46                   .BYTE   "F"             ;fill memory
00ECFB  2  47                   .BYTE   "G"             ;execute code
00ECFC  2  48                   .BYTE   "H"             ;search memory
00ECFD  2  4A                   .BYTE   "J"             ;execute code as subroutine
00ECFE  2  4C                   .BYTE   "L"             ;load S19 file
00ECFF  2  4D                   .BYTE   "M"             ;dump memory range
00ED00  2  52                   .BYTE   "R"             ;dump registers
00ED01  2  54                   .BYTE   "T"             ;copy memory range
00ED02  2               ;         .BYTE "X"             ;exit from monitor
00ED02  2  3E                   .BYTE   ">"             ;change memory
00ED03  2  3B                   .BYTE   ";"             ;change registers
00ED04  2               n_mpctab        = *-mpctab      ;entries in above table
00ED04  2               ;
00ED04  2               ;
00ED04  2               ;	monitor command jump table...
00ED04  2               ;
00ED04  2               mpcextab:
00ED04  2  80 E1                .WORD   monasc-s_byte   ; A  assemble code
00ED06  2  42 E4                .WORD   moncmp-s_byte   ; C  compare memory ranges
00ED08  2  5C E3                .WORD   mondsc-s_byte   ; D  disassemble code
00ED0A  2  13 E5                .WORD   monfil-s_byte   ; F  fill memory
00ED0C  2  B0 E3                .WORD   monjmp-s_byte   ; G  execute code
00ED0E  2  79 E5                .WORD   monhnt-s_byte   ; H  search memory
00ED10  2  E1 E3                .WORD   monjsr-s_byte   ; J  execute code as subroutine
00ED12  2  59 EC                .WORD   LOADS19-s_byte  ; L  Load S19 File
00ED14  2  C1 E4                .WORD   mondmp-s_byte   ; M  dump memory range
00ED16  2  DC E0                .WORD   monreg-s_byte   ; R  dump registers
00ED18  2  70 E4                .WORD   moncpy-s_byte   ; T  copy memory range
00ED1A  2               ;         .WORD monxit-s_byte   ; X  exit from monitor
00ED1A  2  17 E4                .WORD   monchm-s_byte   ; >  change memory
00ED1C  2  EF E5                .WORD   monchr-s_byte   ; ;  change registers
00ED1E  2               ;
00ED1E  2               ;
00ED1E  2               ;	number conversion...
00ED1E  2               ;
00ED1E  2               basetab:
00ED1E  2  10 0A 08 02          .BYTE   16,10,8,2       ;supported number bases
00ED22  2               bitsdtab:
00ED22  2  04 03 03 01          .BYTE   4,3,3,1         ;bits per binary digit
00ED26  2               bitsntab:
00ED26  2  04 04 03 01          .BYTE   4,4,3,1         ;bits per ASCII character
00ED2A  2               lzsttab:
00ED2A  2  03 02 09 02          .BYTE   3,2,9,2         ;leading zero suppression thresholds
00ED2E  2               numstab:
00ED2E  2  0C 0C 10 30          .BYTE   12,12,16,48     ;bin to ASCII conversion numerals
00ED32  2               radxtab:
00ED32  2  24                   .BYTE   c_hex           ;hexadecimal radix
00ED33  2  2B                   .BYTE   c_dec           ;decimal radix
00ED34  2  40                   .BYTE   c_oct           ;octal radix
00ED35  2  25                   .BYTE   c_bin           ;binary radix
00ED36  2               n_radix         = *-radxtab     ;number of recognized radices
00ED36  2               ;
00ED36  2               ;
00ED36  2               ;	shadow MPU register sizes...
00ED36  2               ;
00ED36  2               rcvltab:
00ED36  2  02                   .BYTE   s_mpupbx+s_byte ; PB
00ED37  2  03                   .BYTE   s_mpupcx+s_byte ; PC
00ED38  2  02                   .BYTE   s_mpusrx+s_byte ; SR
00ED39  2  03                   .BYTE   s_word+s_byte   ; .C
00ED3A  2  03                   .BYTE   s_word+s_byte   ; .X
00ED3B  2  03                   .BYTE   s_word+s_byte   ; .Y
00ED3C  2  03                   .BYTE   s_mpuspx+s_byte ; SP
00ED3D  2  03                   .BYTE   s_mpudpx+s_byte ; DP
00ED3E  2  02                   .BYTE   s_mpudbx+s_byte ; DB
00ED3F  2               n_regchv        = *-rcvltab     ;total shadow registers
00ED3F  2               ;
00ED3F  2               ;================================================================================
00ED3F  2               ;
00ED3F  2               ;ASSEMBLER/DISASSEMBLER DATA TABLES
00ED3F  2               ;
00ED3F  2               ;
00ED3F  2               ;	numerically sorted & encoded W65C816S mnemonics...
00ED3F  2               ;
00ED3F  2               mnetab:
00ED3F  2  F2 10                .WORD   mne_xba         ;  0 - XBA
00ED41  2  5A 11                .WORD   mne_lda         ;  1 - LDA
00ED43  2  A2 11                .WORD   mne_pea         ;  2 - PEA
00ED45  2  62 12                .WORD   mne_pha         ;  3 - PHA
00ED47  2  62 13                .WORD   mne_pla         ;  4 - PLA
00ED49  2  C6 14                .WORD   mne_bra         ;  5 - BRA
00ED4B  2  E0 14                .WORD   mne_ora         ;  6 - ORA
00ED4D  2  68 15                .WORD   mne_sta         ;  7 - STA
00ED4F  2  6A 16                .WORD   mne_txa         ;  8 - TXA
00ED51  2  AA 16                .WORD   mne_tya         ;  9 - TYA
00ED53  2  62 1A                .WORD   mne_phb         ; 10 - PHB
00ED55  2  62 1B                .WORD   mne_plb         ; 11 - PLB
00ED57  2  EA 1C                .WORD   mne_trb         ; 12 - TRB
00ED59  2  2A 1D                .WORD   mne_tsb         ; 13 - TSB
00ED5B  2  E8 20                .WORD   mne_sbc         ; 14 - SBC
00ED5D  2  06 21                .WORD   mne_bcc         ; 15 - BCC
00ED5F  2  44 21                .WORD   mne_adc         ; 16 - ADC
00ED61  2  6A 21                .WORD   mne_tdc         ; 17 - TDC
00ED63  2  8A 21                .WORD   mne_dec         ; 18 - DEC
00ED65  2  A8 21                .WORD   mne_sec         ; 19 - SEC
00ED67  2  48 23                .WORD   mne_clc         ; 20 - CLC
00ED69  2  D4 23                .WORD   mne_inc         ; 21 - INC
00ED6B  2  2A 25                .WORD   mne_tsc         ; 22 - TSC
00ED6D  2  C6 25                .WORD   mne_bvc         ; 23 - BVC
00ED6F  2  2A 29                .WORD   mne_tcd         ; 24 - TCD
00ED71  2  A8 29                .WORD   mne_sed         ; 25 - SED
00ED73  2  62 2A                .WORD   mne_phd         ; 26 - PHD
00ED75  2  48 2B                .WORD   mne_cld         ; 27 - CLD
00ED77  2  62 2B                .WORD   mne_pld         ; 28 - PLD
00ED79  2  C4 2B                .WORD   mne_and         ; 29 - AND
00ED7B  2  32 31                .WORD   mne_xce         ; 30 - XCE
00ED7D  2  C6 33                .WORD   mne_bne         ; 31 - BNE
00ED7F  2  B0 50                .WORD   mne_wai         ; 32 - WAI
00ED81  2  A2 51                .WORD   mne_pei         ; 33 - PEI
00ED83  2  A8 51                .WORD   mne_sei         ; 34 - SEI
00ED85  2  48 53                .WORD   mne_cli         ; 35 - CLI
00ED87  2  86 53                .WORD   mne_bmi         ; 36 - BMI
00ED89  2  66 55                .WORD   mne_rti         ; 37 - RTI
00ED8B  2  62 62                .WORD   mne_phk         ; 38 - PHK
00ED8D  2  C6 64                .WORD   mne_brk         ; 39 - BRK
00ED8F  2  96 6B                .WORD   mne_jml         ; 40 - JML
00ED91  2  26 6C                .WORD   mne_rol         ; 41 - ROL
00ED93  2  46 6C                .WORD   mne_bpl         ; 42 - BPL
00ED95  2  C6 6C                .WORD   mne_brl         ; 43 - BRL
00ED97  2  04 6D                .WORD   mne_asl         ; 44 - ASL
00ED99  2  16 6D                .WORD   mne_jsl         ; 45 - JSL
00ED9B  2  66 6D                .WORD   mne_rtl         ; 46 - RTL
00ED9D  2  70 71                .WORD   mne_wdm         ; 47 - WDM
00ED9F  2  DC 7D                .WORD   mne_mvn         ; 48 - MVN
00EDA1  2  A6 89                .WORD   mne_rep         ; 49 - REP
00EDA3  2  A8 89                .WORD   mne_sep         ; 50 - SEP
00EDA5  2  62 8A                .WORD   mne_php         ; 51 - PHP
00EDA7  2  62 8B                .WORD   mne_plp         ; 52 - PLP
00EDA9  2  88 8B                .WORD   mne_cmp         ; 53 - CMP
00EDAB  2  96 8B                .WORD   mne_jmp         ; 54 - JMP
00EDAD  2  08 8C                .WORD   mne_cop         ; 55 - COP
00EDAF  2  1E 8C                .WORD   mne_nop         ; 56 - NOP
00EDB1  2  68 8D                .WORD   mne_stp         ; 57 - STP
00EDB3  2  DC 8D                .WORD   mne_mvp         ; 58 - MVP
00EDB5  2  86 91                .WORD   mne_beq         ; 59 - BEQ
00EDB7  2  A2 99                .WORD   mne_per         ; 60 - PER
00EDB9  2  0C 9C                .WORD   mne_eor         ; 61 - EOR
00EDBB  2  26 9C                .WORD   mne_ror         ; 62 - ROR
00EDBD  2  16 9D                .WORD   mne_jsr         ; 63 - JSR
00EDBF  2  1A 9D                .WORD   mne_lsr         ; 64 - LSR
00EDC1  2  06 A1                .WORD   mne_bcs         ; 65 - BCS
00EDC3  2  2A A1                .WORD   mne_tcs         ; 66 - TCS
00EDC5  2  66 A5                .WORD   mne_rts         ; 67 - RTS
00EDC7  2  C6 A5                .WORD   mne_bvs         ; 68 - BVS
00EDC9  2  6A A6                .WORD   mne_txs         ; 69 - TXS
00EDCB  2  86 AA                .WORD   mne_bit         ; 70 - BIT
00EDCD  2  48 BB                .WORD   mne_clv         ; 71 - CLV
00EDCF  2  AA C8                .WORD   mne_tax         ; 72 - TAX
00EDD1  2  5A C9                .WORD   mne_ldx         ; 73 - LDX
00EDD3  2  8A C9                .WORD   mne_dex         ; 74 - DEX
00EDD5  2  62 CA                .WORD   mne_phx         ; 75 - PHX
00EDD7  2  62 CB                .WORD   mne_plx         ; 76 - PLX
00EDD9  2  D4 CB                .WORD   mne_inx         ; 77 - INX
00EDDB  2  48 CC                .WORD   mne_cpx         ; 78 - CPX
00EDDD  2  2A CD                .WORD   mne_tsx         ; 79 - TSX
00EDDF  2  68 CD                .WORD   mne_stx         ; 80 - STX
00EDE1  2  AA CE                .WORD   mne_tyx         ; 81 - TYX
00EDE3  2  AA D0                .WORD   mne_tay         ; 82 - TAY
00EDE5  2  5A D1                .WORD   mne_ldy         ; 83 - LDY
00EDE7  2  8A D1                .WORD   mne_dey         ; 84 - DEY
00EDE9  2  62 D2                .WORD   mne_phy         ; 85 - PHY
00EDEB  2  62 D3                .WORD   mne_ply         ; 86 - PLY
00EDED  2  D4 D3                .WORD   mne_iny         ; 87 - INY
00EDEF  2  48 D4                .WORD   mne_cpy         ; 88 - CPY
00EDF1  2  68 D5                .WORD   mne_sty         ; 89 - STY
00EDF3  2  6A D6                .WORD   mne_txy         ; 90 - TXY
00EDF5  2  68 DD                .WORD   mne_stz         ; 91 - STZ
00EDF7  2               ;
00EDF7  2               s_mnetab        = *-mnetab      ;mnemonic table size
00EDF7  2               n_mnemon        = s_mnetab/s_word;total mnemonics
00EDF7  2               ;
00EDF7  2               ;
00EDF7  2               ;	mnemonic lookup indices in opcode order...
00EDF7  2               ;
00EDF7  2               mnetabix:
00EDF7  2  27                   .BYTE   mne_brkx        ; $00  BRK
00EDF8  2  06                   .BYTE   mne_orax        ; $01  ORA (dp,X)
00EDF9  2  37                   .BYTE   mne_copx        ; $02  COP
00EDFA  2  06                   .BYTE   mne_orax        ; $03  ORA <offset>,S
00EDFB  2  0D                   .BYTE   mne_tsbx        ; $04  TSB dp
00EDFC  2  06                   .BYTE   mne_orax        ; $05  ORA dp
00EDFD  2  2C                   .BYTE   mne_aslx        ; $06  ASL dp
00EDFE  2  06                   .BYTE   mne_orax        ; $07  ORA [dp]
00EDFF  2  33                   .BYTE   mne_phpx        ; $08  PHP
00EE00  2  06                   .BYTE   mne_orax        ; $09  ORA #
00EE01  2  2C                   .BYTE   mne_aslx        ; $0A  ASL A
00EE02  2  1A                   .BYTE   mne_phdx        ; $0B  PHD
00EE03  2  0D                   .BYTE   mne_tsbx        ; $0C  TSB abs
00EE04  2  06                   .BYTE   mne_orax        ; $0D  ORA abs
00EE05  2  2C                   .BYTE   mne_aslx        ; $0E  ASL abs
00EE06  2  06                   .BYTE   mne_orax        ; $0F  ORA absl
00EE07  2               ;
00EE07  2  2A                   .BYTE   mne_bplx        ; $10  BPL abs
00EE08  2  06                   .BYTE   mne_orax        ; $11  ORA (<dp>),Y
00EE09  2  06                   .BYTE   mne_orax        ; $12  ORA (dp)
00EE0A  2  06                   .BYTE   mne_orax        ; $13  ORA (<offset>,S),Y
00EE0B  2  0C                   .BYTE   mne_trbx        ; $14  TRB dp
00EE0C  2  06                   .BYTE   mne_orax        ; $15  ORA dp,X
00EE0D  2  2C                   .BYTE   mne_aslx        ; $16  ASL dp,X
00EE0E  2  06                   .BYTE   mne_orax        ; $17  ORA [dp],Y
00EE0F  2  14                   .BYTE   mne_clcx        ; $18  CLC
00EE10  2  06                   .BYTE   mne_orax        ; $19  ORA abs
00EE11  2  15                   .BYTE   mne_incx        ; $1A  INC A
00EE12  2  42                   .BYTE   mne_tcsx        ; $1B  TCS
00EE13  2  0C                   .BYTE   mne_trbx        ; $1C  TRB abs
00EE14  2  06                   .BYTE   mne_orax        ; $1D  ORA abs,X
00EE15  2  2C                   .BYTE   mne_aslx        ; $1E  ASL abs,X
00EE16  2  06                   .BYTE   mne_orax        ; $1F  ORA absl,X
00EE17  2               ;
00EE17  2  3F                   .BYTE   mne_jsrx        ; $20  JSR abs
00EE18  2  1D                   .BYTE   mne_andx        ; $21  AND (dp,X)
00EE19  2  2D                   .BYTE   mne_jslx        ; $22  JSL absl
00EE1A  2  1D                   .BYTE   mne_andx        ; $23  AND <offset>,S
00EE1B  2  46                   .BYTE   mne_bitx        ; $24  BIT dp
00EE1C  2  1D                   .BYTE   mne_andx        ; $25  AND dp
00EE1D  2  29                   .BYTE   mne_rolx        ; $26  ROL dp
00EE1E  2  1D                   .BYTE   mne_andx        ; $27  AND [dp]
00EE1F  2  34                   .BYTE   mne_plpx        ; $28  PLP
00EE20  2  1D                   .BYTE   mne_andx        ; $29  AND #
00EE21  2  29                   .BYTE   mne_rolx        ; $2A  ROL A
00EE22  2  1C                   .BYTE   mne_pldx        ; $2B  PLD
00EE23  2  46                   .BYTE   mne_bitx        ; $2C  BIT abs
00EE24  2  1D                   .BYTE   mne_andx        ; $2D  AND abs
00EE25  2  29                   .BYTE   mne_rolx        ; $2E  ROL abs
00EE26  2  1D                   .BYTE   mne_andx        ; $2F  AND absl
00EE27  2               ;
00EE27  2  24                   .BYTE   mne_bmix        ; $30  BMI abs
00EE28  2  1D                   .BYTE   mne_andx        ; $31  AND (<dp>),Y
00EE29  2  1D                   .BYTE   mne_andx        ; $32  AND (dp)
00EE2A  2  1D                   .BYTE   mne_andx        ; $33  AND (<offset>,S),Y
00EE2B  2  46                   .BYTE   mne_bitx        ; $34  BIT dp,X
00EE2C  2  1D                   .BYTE   mne_andx        ; $35  AND dp,X
00EE2D  2  29                   .BYTE   mne_rolx        ; $36  ROL dp,X
00EE2E  2  1D                   .BYTE   mne_andx        ; $37  AND [dp],Y
00EE2F  2  13                   .BYTE   mne_secx        ; $38  SEC
00EE30  2  1D                   .BYTE   mne_andx        ; $39  AND abs,Y
00EE31  2  12                   .BYTE   mne_decx        ; $3A  DEC A
00EE32  2  16                   .BYTE   mne_tscx        ; $3B  TSC
00EE33  2  46                   .BYTE   mne_bitx        ; $3C  BIT abs,X
00EE34  2  1D                   .BYTE   mne_andx        ; $3D  AND abs,X
00EE35  2  29                   .BYTE   mne_rolx        ; $3E  ROL abs,X
00EE36  2  1D                   .BYTE   mne_andx        ; $3F  AND absl,X
00EE37  2               ;
00EE37  2  25                   .BYTE   mne_rtix        ; $40  RTI
00EE38  2  3D                   .BYTE   mne_eorx        ; $41  EOR (dp,X)
00EE39  2  2F                   .BYTE   mne_wdmx        ; $42  WDM
00EE3A  2  3D                   .BYTE   mne_eorx        ; $43  EOR <offset>,S
00EE3B  2  3A                   .BYTE   mne_mvpx        ; $44  MVP sb,db
00EE3C  2  3D                   .BYTE   mne_eorx        ; $45  EOR dp
00EE3D  2  40                   .BYTE   mne_lsrx        ; $46  LSR dp
00EE3E  2  3D                   .BYTE   mne_eorx        ; $47  EOR [dp]
00EE3F  2  03                   .BYTE   mne_phax        ; $48  PHA
00EE40  2  3D                   .BYTE   mne_eorx        ; $49  EOR #
00EE41  2  40                   .BYTE   mne_lsrx        ; $4A  LSR A
00EE42  2  26                   .BYTE   mne_phkx        ; $4B  PHK
00EE43  2  36                   .BYTE   mne_jmpx        ; $4C  JMP abs
00EE44  2  3D                   .BYTE   mne_eorx        ; $4D  EOR abs
00EE45  2  40                   .BYTE   mne_lsrx        ; $4E  LSR abs
00EE46  2  3D                   .BYTE   mne_eorx        ; $4F  EOR absl
00EE47  2               ;
00EE47  2  17                   .BYTE   mne_bvcx        ; $50  BVC abs
00EE48  2  3D                   .BYTE   mne_eorx        ; $51  EOR (<dp>),Y
00EE49  2  3D                   .BYTE   mne_eorx        ; $52  EOR (dp)
00EE4A  2  3D                   .BYTE   mne_eorx        ; $53  EOR (<offset>,S),Y
00EE4B  2  30                   .BYTE   mne_mvnx        ; $54  MVN sb,db
00EE4C  2  3D                   .BYTE   mne_eorx        ; $55  EOR dp,X
00EE4D  2  40                   .BYTE   mne_lsrx        ; $56  LSR dp,X
00EE4E  2  3D                   .BYTE   mne_eorx        ; $57  EOR [dp],Y
00EE4F  2  23                   .BYTE   mne_clix        ; $58  CLI
00EE50  2  3D                   .BYTE   mne_eorx        ; $59  EOR abs,Y
00EE51  2  55                   .BYTE   mne_phyx        ; $5A  PHY
00EE52  2  18                   .BYTE   mne_tcdx        ; $5B  TCD
00EE53  2  28                   .BYTE   mne_jmlx        ; $5C  JML absl
00EE54  2  3D                   .BYTE   mne_eorx        ; $5D  EOR abs,X
00EE55  2  40                   .BYTE   mne_lsrx        ; $5E  LSR abs,X
00EE56  2  3D                   .BYTE   mne_eorx        ; $5F  EOR absl,X
00EE57  2               ;
00EE57  2  43                   .BYTE   mne_rtsx        ; $60  RTS
00EE58  2  10                   .BYTE   mne_adcx        ; $61  ADC (dp,X)
00EE59  2  3C                   .BYTE   mne_perx        ; $62  PER
00EE5A  2  10                   .BYTE   mne_adcx        ; $63  ADC <offset>,S
00EE5B  2  5B                   .BYTE   mne_stzx        ; $64  STZ dp
00EE5C  2  10                   .BYTE   mne_adcx        ; $65  ADC dp
00EE5D  2  3E                   .BYTE   mne_rorx        ; $66  ROR dp
00EE5E  2  10                   .BYTE   mne_adcx        ; $67  ADC [dp]
00EE5F  2  04                   .BYTE   mne_plax        ; $68  PLA
00EE60  2  10                   .BYTE   mne_adcx        ; $69  ADC #
00EE61  2  3E                   .BYTE   mne_rorx        ; $6A  ROR A
00EE62  2  2E                   .BYTE   mne_rtlx        ; $6B  RTL
00EE63  2  36                   .BYTE   mne_jmpx        ; $6C  JMP (abs)
00EE64  2  10                   .BYTE   mne_adcx        ; $6D  ADC abs
00EE65  2  3E                   .BYTE   mne_rorx        ; $6E  ROR abs
00EE66  2  10                   .BYTE   mne_adcx        ; $6F  ADC absl
00EE67  2               ;
00EE67  2  44                   .BYTE   mne_bvsx        ; $70  BVS abs
00EE68  2  10                   .BYTE   mne_adcx        ; $71  ADC (<dp>),Y
00EE69  2  10                   .BYTE   mne_adcx        ; $72  ADC (dp)
00EE6A  2  10                   .BYTE   mne_adcx        ; $73  ADC (<offset>,S),Y
00EE6B  2  5B                   .BYTE   mne_stzx        ; $74  STZ dp,X
00EE6C  2  10                   .BYTE   mne_adcx        ; $75  ADC dp,X
00EE6D  2  3E                   .BYTE   mne_rorx        ; $76  ROR dp,X
00EE6E  2  10                   .BYTE   mne_adcx        ; $77  ADC [dp],Y
00EE6F  2  22                   .BYTE   mne_seix        ; $78  SEI
00EE70  2  10                   .BYTE   mne_adcx        ; $79  ADC abs,Y
00EE71  2  56                   .BYTE   mne_plyx        ; $7A  PLY
00EE72  2  11                   .BYTE   mne_tdcx        ; $7B  TDC
00EE73  2  36                   .BYTE   mne_jmpx        ; $7C  JMP (abs,X)
00EE74  2  10                   .BYTE   mne_adcx        ; $7D  ADC abs,X
00EE75  2  3E                   .BYTE   mne_rorx        ; $7E  ROR abs,X
00EE76  2  10                   .BYTE   mne_adcx        ; $7F  ADC absl,X
00EE77  2               ;
00EE77  2  05                   .BYTE   mne_brax        ; $80  BRA abs
00EE78  2  07                   .BYTE   mne_stax        ; $81  STA (dp,X)
00EE79  2  2B                   .BYTE   mne_brlx        ; $82  BRL abs
00EE7A  2  07                   .BYTE   mne_stax        ; $83  STA <offset>,S
00EE7B  2  59                   .BYTE   mne_styx        ; $84  STY dp
00EE7C  2  07                   .BYTE   mne_stax        ; $85  STA dp
00EE7D  2  50                   .BYTE   mne_stxx        ; $86  STX dp
00EE7E  2  07                   .BYTE   mne_stax        ; $87  STA [dp]
00EE7F  2  54                   .BYTE   mne_deyx        ; $88  DEY
00EE80  2  46                   .BYTE   mne_bitx        ; $89  BIT #
00EE81  2  08                   .BYTE   mne_txax        ; $8A  TXA
00EE82  2  0A                   .BYTE   mne_phbx        ; $8B  PHB
00EE83  2  59                   .BYTE   mne_styx        ; $8C  STY abs
00EE84  2  07                   .BYTE   mne_stax        ; $8D  STA abs
00EE85  2  50                   .BYTE   mne_stxx        ; $8E  STX abs
00EE86  2  07                   .BYTE   mne_stax        ; $8F  STA absl
00EE87  2               ;
00EE87  2  0F                   .BYTE   mne_bccx        ; $90  BCC abs
00EE88  2  07                   .BYTE   mne_stax        ; $91  STA (<dp>),Y
00EE89  2  07                   .BYTE   mne_stax        ; $92  STA (dp)
00EE8A  2  07                   .BYTE   mne_stax        ; $93  STA (<offset>,S),Y
00EE8B  2  59                   .BYTE   mne_styx        ; $94  STY dp,X
00EE8C  2  07                   .BYTE   mne_stax        ; $95  STA dp,X
00EE8D  2  50                   .BYTE   mne_stxx        ; $96  STX dp,Y
00EE8E  2  07                   .BYTE   mne_stax        ; $97  STA [dp],Y
00EE8F  2  09                   .BYTE   mne_tyax        ; $98  TYA
00EE90  2  07                   .BYTE   mne_stax        ; $99  STA abs,Y
00EE91  2  45                   .BYTE   mne_txsx        ; $9A  TXS
00EE92  2  5A                   .BYTE   mne_txyx        ; $9B  TXY
00EE93  2  5B                   .BYTE   mne_stzx        ; $9C  STZ abs
00EE94  2  07                   .BYTE   mne_stax        ; $9D  STA abs,X
00EE95  2  5B                   .BYTE   mne_stzx        ; $9E  STZ abs,X
00EE96  2  07                   .BYTE   mne_stax        ; $9F  STA absl,X
00EE97  2               ;
00EE97  2  53                   .BYTE   mne_ldyx        ; $A0  LDY #
00EE98  2  01                   .BYTE   mne_ldax        ; $A1  LDA (dp,X)
00EE99  2  49                   .BYTE   mne_ldxx        ; $A2  LDX #
00EE9A  2  01                   .BYTE   mne_ldax        ; $A3  LDA <offset>,S
00EE9B  2  53                   .BYTE   mne_ldyx        ; $A4  LDY dp
00EE9C  2  01                   .BYTE   mne_ldax        ; $A5  LDA dp
00EE9D  2  49                   .BYTE   mne_ldxx        ; $A6  LDX dp
00EE9E  2  01                   .BYTE   mne_ldax        ; $A7  LDA [dp]
00EE9F  2  52                   .BYTE   mne_tayx        ; $A8  TAY
00EEA0  2  01                   .BYTE   mne_ldax        ; $A9  LDA #
00EEA1  2  48                   .BYTE   mne_taxx        ; $AA  TAX
00EEA2  2  0B                   .BYTE   mne_plbx        ; $AB  PLB
00EEA3  2  53                   .BYTE   mne_ldyx        ; $AC  LDY abs
00EEA4  2  01                   .BYTE   mne_ldax        ; $AD  LDA abs
00EEA5  2  49                   .BYTE   mne_ldxx        ; $AE  LDX abs
00EEA6  2  01                   .BYTE   mne_ldax        ; $AF  LDA absl
00EEA7  2               ;
00EEA7  2  41                   .BYTE   mne_bcsx        ; $B0  BCS abs
00EEA8  2  01                   .BYTE   mne_ldax        ; $B1  LDA (<dp>),Y
00EEA9  2  01                   .BYTE   mne_ldax        ; $B2  LDA (dp)
00EEAA  2  01                   .BYTE   mne_ldax        ; $B3  LDA (<offset>,S),Y
00EEAB  2  53                   .BYTE   mne_ldyx        ; $B4  LDY dp,X
00EEAC  2  01                   .BYTE   mne_ldax        ; $B5  LDA dp,X
00EEAD  2  49                   .BYTE   mne_ldxx        ; $B6  LDX dp,Y
00EEAE  2  01                   .BYTE   mne_ldax        ; $B7  LDA [dp],Y
00EEAF  2  47                   .BYTE   mne_clvx        ; $B8  CLV
00EEB0  2  01                   .BYTE   mne_ldax        ; $B9  LDA abs,Y
00EEB1  2  4F                   .BYTE   mne_tsxx        ; $BA  TSX
00EEB2  2  51                   .BYTE   mne_tyxx        ; $BB  TYX
00EEB3  2  53                   .BYTE   mne_ldyx        ; $BC  LDY abs,X
00EEB4  2  01                   .BYTE   mne_ldax        ; $BD  LDA abs,X
00EEB5  2  49                   .BYTE   mne_ldxx        ; $BE  LDX abs,Y
00EEB6  2  01                   .BYTE   mne_ldax        ; $BF  LDA absl,X
00EEB7  2               ;
00EEB7  2  58                   .BYTE   mne_cpyx        ; $C0  CPY #
00EEB8  2  35                   .BYTE   mne_cmpx        ; $C1  CMP (dp,X)
00EEB9  2  31                   .BYTE   mne_repx        ; $C2  REP #
00EEBA  2  35                   .BYTE   mne_cmpx        ; $C3  CMP <offset>,S
00EEBB  2  58                   .BYTE   mne_cpyx        ; $C4  CPY dp
00EEBC  2  35                   .BYTE   mne_cmpx        ; $C5  CMP dp
00EEBD  2  12                   .BYTE   mne_decx        ; $C6  DEC dp
00EEBE  2  35                   .BYTE   mne_cmpx        ; $C7  CMP [dp]
00EEBF  2  57                   .BYTE   mne_inyx        ; $C8  INY
00EEC0  2  35                   .BYTE   mne_cmpx        ; $C9  CMP #
00EEC1  2  4A                   .BYTE   mne_dexx        ; $CA  DEX
00EEC2  2  20                   .BYTE   mne_waix        ; $CB  WAI
00EEC3  2  58                   .BYTE   mne_cpyx        ; $CC  CPY abs
00EEC4  2  35                   .BYTE   mne_cmpx        ; $CD  CMP abs
00EEC5  2  12                   .BYTE   mne_decx        ; $CE  DEC abs
00EEC6  2  35                   .BYTE   mne_cmpx        ; $CF  CMP absl
00EEC7  2               ;
00EEC7  2  1F                   .BYTE   mne_bnex        ; $D0  BNE abs
00EEC8  2  35                   .BYTE   mne_cmpx        ; $D1  CMP (<dp>),Y
00EEC9  2  35                   .BYTE   mne_cmpx        ; $D2  CMP (dp)
00EECA  2  35                   .BYTE   mne_cmpx        ; $D3  CMP (<offset>,S),Y
00EECB  2  21                   .BYTE   mne_peix        ; $D4  PEI dp
00EECC  2  35                   .BYTE   mne_cmpx        ; $D5  CMP dp,X
00EECD  2  12                   .BYTE   mne_decx        ; $D6  DEC dp,X
00EECE  2  35                   .BYTE   mne_cmpx        ; $D7  CMP [dp],Y
00EECF  2  1B                   .BYTE   mne_cldx        ; $D8  CLD
00EED0  2  35                   .BYTE   mne_cmpx        ; $D9  CMP abs,Y
00EED1  2  4B                   .BYTE   mne_phxx        ; $DA  PHX
00EED2  2  39                   .BYTE   mne_stpx        ; $DB  STP
00EED3  2  36                   .BYTE   mne_jmpx        ; $DC  JMP [abs]
00EED4  2  35                   .BYTE   mne_cmpx        ; $DD  CMP abs,X
00EED5  2  12                   .BYTE   mne_decx        ; $DE  DEC abs,X
00EED6  2  35                   .BYTE   mne_cmpx        ; $DF  CMP absl,X
00EED7  2               ;
00EED7  2  4E                   .BYTE   mne_cpxx        ; $E0  CPX #
00EED8  2  0E                   .BYTE   mne_sbcx        ; $E1  SBC (dp,X)
00EED9  2  32                   .BYTE   mne_sepx        ; $E2  SEP #
00EEDA  2  0E                   .BYTE   mne_sbcx        ; $E3  SBC <offset>,S
00EEDB  2  4E                   .BYTE   mne_cpxx        ; $E4  CPX dp
00EEDC  2  0E                   .BYTE   mne_sbcx        ; $E5  SBC dp
00EEDD  2  15                   .BYTE   mne_incx        ; $E6  INC dp
00EEDE  2  0E                   .BYTE   mne_sbcx        ; $E7  SBC [dp]
00EEDF  2  4D                   .BYTE   mne_inxx        ; $E8  INX
00EEE0  2  0E                   .BYTE   mne_sbcx        ; $E9  SBC #
00EEE1  2  38                   .BYTE   mne_nopx        ; $EA  NOP
00EEE2  2  00                   .BYTE   mne_xbax        ; $EB  XBA
00EEE3  2  4E                   .BYTE   mne_cpxx        ; $EC  CPX abs
00EEE4  2  0E                   .BYTE   mne_sbcx        ; $ED  SBC abs
00EEE5  2  15                   .BYTE   mne_incx        ; $EE  INC abs
00EEE6  2  0E                   .BYTE   mne_sbcx        ; $EF  SBC absl
00EEE7  2               ;
00EEE7  2  3B                   .BYTE   mne_beqx        ; $F0  BEQ abs
00EEE8  2  0E                   .BYTE   mne_sbcx        ; $F1  SBC (<dp>),Y
00EEE9  2  0E                   .BYTE   mne_sbcx        ; $F2  SBC (dp)
00EEEA  2  0E                   .BYTE   mne_sbcx        ; $F3  SBC (<offset>,S),Y
00EEEB  2  02                   .BYTE   mne_peax        ; $F4  PEA #
00EEEC  2  0E                   .BYTE   mne_sbcx        ; $F5  SBC dp,X
00EEED  2  15                   .BYTE   mne_incx        ; $F6  INC dp,X
00EEEE  2  0E                   .BYTE   mne_sbcx        ; $F7  SBC [dp],Y
00EEEF  2  19                   .BYTE   mne_sedx        ; $F8  SED
00EEF0  2  0E                   .BYTE   mne_sbcx        ; $F9  SBC abs,Y
00EEF1  2  4C                   .BYTE   mne_plxx        ; $FA  PLX
00EEF2  2  1E                   .BYTE   mne_xcex        ; $FB  XCE
00EEF3  2  3F                   .BYTE   mne_jsrx        ; $FC  JSR (abs,X)
00EEF4  2  0E                   .BYTE   mne_sbcx        ; $FD  SBC abs,X
00EEF5  2  15                   .BYTE   mne_incx        ; $FE  INC abs,X
00EEF6  2  0E                   .BYTE   mne_sbcx        ; $FF  SBC absl,X
00EEF7  2               ;
00EEF7  2               ;
00EEF7  2               ;	instruction addressing modes & sizes in opcode order...
00EEF7  2               ;
00EEF7  2               ;	    xxxxxxxx
00EEF7  2               ;	    ||||||||
00EEF7  2               ;	    ||||++++---> Addressing Mode
00EEF7  2               ;	    ||||         ----------------------------------
00EEF7  2               ;	    ||||          0000  dp, abs, absl, implied or A
00EEF7  2               ;	    ||||          0001  #
00EEF7  2               ;	    ||||          0010  dp,X, abs,X or absl,X
00EEF7  2               ;	    ||||          0011  dp,Y or abs,Y
00EEF7  2               ;	    ||||          0100  (dp) or (abs)
00EEF7  2               ;	    ||||          0101  [dp] or [abs]
00EEF7  2               ;	    ||||          0110  [dp],Y
00EEF7  2               ;	    ||||          0111  (dp,X) or (abs,X)
00EEF7  2               ;	    ||||          1000  (<dp>),Y
00EEF7  2               ;	    ||||          1001  <offset>,S
00EEF7  2               ;	    ||||          1010  (<offset>,S),Y
00EEF7  2               ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
00EEF7  2               ;	    ||||          ---------------------------------
00EEF7  2               ;	    ||||           #    = immediate
00EEF7  2               ;	    ||||           A    = accumulator
00EEF7  2               ;	    ||||           abs  = absolute
00EEF7  2               ;	    ||||           absl = absolute long
00EEF7  2               ;	    ||||           dbnk = destination bank
00EEF7  2               ;	    ||||           dp   = direct (zero) page
00EEF7  2               ;	    ||||           S    = stack relative
00EEF7  2               ;	    ||||           sbnk = source bank
00EEF7  2               ;	    ||||         ----------------------------------
00EEF7  2               ;	    ||||
00EEF7  2               ;	    ||++-------> binary-encoded operand size
00EEF7  2               ;	    |+---------> 1: relative branch instruction
00EEF7  2               ;	    +----------> 1: variable operand size...
00EEF7  2               ;
00EEF7  2               ;	    -------------------------------------------------------------
00EEF7  2               ;	    Variable operand size refers to an immediate mode instruction
00EEF7  2               ;	    that can accept either an 8 or 16 bit operand.  During instr-
00EEF7  2               ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
00EEF7  2               ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
00EEF7  2               ;	    will assemble as $A9 $01 $00.
00EEF7  2               ;	    -------------------------------------------------------------
00EEF7  2               ;
00EEF7  2               mnetabam:
00EEF7  2  00                   .BYTE   ops0|am_nam     ; $00  BRK
00EEF8  2  17                   .BYTE   ops1|am_indx    ; $01  ORA (dp,X)
00EEF9  2  10                   .BYTE   ops1|am_nam     ; $02  COP
00EEFA  2  19                   .BYTE   ops1|am_stk     ; $03  ORA <offset>,S
00EEFB  2  10                   .BYTE   ops1|am_nam     ; $04  TSB dp
00EEFC  2  10                   .BYTE   ops1|am_nam     ; $05  ORA dp
00EEFD  2  10                   .BYTE   ops1|am_nam     ; $06  ASL dp
00EEFE  2  15                   .BYTE   ops1|am_indl    ; $07  ORA [dp]
00EEFF  2  00                   .BYTE   ops0|am_nam     ; $08  PHP
00EF00  2  91                   .BYTE   vops|am_imm     ; $09  ORA #
00EF01  2  00                   .BYTE   ops0|am_nam     ; $0A  ASL A
00EF02  2  00                   .BYTE   ops0|am_nam     ; $0B  PHD
00EF03  2  20                   .BYTE   ops2|am_nam     ; $0C  TSB abs
00EF04  2  20                   .BYTE   ops2|am_nam     ; $0D  ORA abs
00EF05  2  20                   .BYTE   ops2|am_nam     ; $0E  ASL abs
00EF06  2  30                   .BYTE   ops3|am_nam     ; $0F  ORA absl
00EF07  2               ;
00EF07  2  50                   .BYTE   bop1|am_nam     ; $10  BPL abs
00EF08  2  18                   .BYTE   ops1|am_indy    ; $11  ORA (<dp>),Y
00EF09  2  14                   .BYTE   ops1|am_ind     ; $12  ORA (dp)
00EF0A  2  1A                   .BYTE   ops1|am_stky    ; $13  ORA (<offset>,S),Y
00EF0B  2  10                   .BYTE   ops1|am_nam     ; $14  TRB dp
00EF0C  2  12                   .BYTE   ops1|am_adrx    ; $15  ORA dp,X
00EF0D  2  12                   .BYTE   ops1|am_adrx    ; $16  ASL dp,X
00EF0E  2  16                   .BYTE   ops1|am_indly   ; $17  ORA [dp],Y
00EF0F  2  00                   .BYTE   ops0|am_nam     ; $18  CLC
00EF10  2  20                   .BYTE   ops2|am_nam     ; $19  ORA abs
00EF11  2  00                   .BYTE   ops0|am_nam     ; $1A  INC A
00EF12  2  00                   .BYTE   ops0|am_nam     ; $1B  TCS
00EF13  2  20                   .BYTE   ops2|am_nam     ; $1C  TRB abs
00EF14  2  22                   .BYTE   ops2|am_adrx    ; $1D  ORA abs,X
00EF15  2  22                   .BYTE   ops2|am_adrx    ; $1E  ASL abs,X
00EF16  2  32                   .BYTE   ops3|am_adrx    ; $1F  ORA absl,X
00EF17  2               ;
00EF17  2  20                   .BYTE   ops2|am_nam     ; $20  JSR abs
00EF18  2  17                   .BYTE   ops1|am_indx    ; $21  AND (dp,X)
00EF19  2  30                   .BYTE   ops3|am_nam     ; $22  JSL absl
00EF1A  2  19                   .BYTE   ops1|am_stk     ; $23  AND <offset>,S
00EF1B  2  10                   .BYTE   ops1|am_nam     ; $24  BIT dp
00EF1C  2  10                   .BYTE   ops1|am_nam     ; $25  AND dp
00EF1D  2  10                   .BYTE   ops1|am_nam     ; $26  ROL dp
00EF1E  2  15                   .BYTE   ops1|am_indl    ; $27  AND [dp]
00EF1F  2  00                   .BYTE   ops0|am_nam     ; $28  PLP
00EF20  2  91                   .BYTE   vops|am_imm     ; $29  AND #
00EF21  2  00                   .BYTE   ops0|am_nam     ; $2A  ROL A
00EF22  2  00                   .BYTE   ops0|am_nam     ; $2B  PLD
00EF23  2  20                   .BYTE   ops2|am_nam     ; $2C  BIT abs
00EF24  2  20                   .BYTE   ops2|am_nam     ; $2D  AND abs
00EF25  2  20                   .BYTE   ops2|am_nam     ; $2E  ROL abs
00EF26  2  30                   .BYTE   ops3|am_nam     ; $2F  AND absl
00EF27  2               ;
00EF27  2  50                   .BYTE   bop1|am_nam     ; $30  BMI abs
00EF28  2  18                   .BYTE   ops1|am_indy    ; $31  AND (<dp>),Y
00EF29  2  14                   .BYTE   ops1|am_ind     ; $32  AND (dp)
00EF2A  2  1A                   .BYTE   ops1|am_stky    ; $33  AND (<offset>,S),Y
00EF2B  2  12                   .BYTE   ops1|am_adrx    ; $34  BIT dp,X
00EF2C  2  12                   .BYTE   ops1|am_adrx    ; $35  AND dp,X
00EF2D  2  12                   .BYTE   ops1|am_adrx    ; $36  ROL dp,X
00EF2E  2  16                   .BYTE   ops1|am_indly   ; $37  AND [dp],Y
00EF2F  2  00                   .BYTE   ops0|am_nam     ; $38  SEC
00EF30  2  23                   .BYTE   ops2|am_adry    ; $39  AND abs,Y
00EF31  2  00                   .BYTE   ops0|am_nam     ; $3A  DEC A
00EF32  2  00                   .BYTE   ops0|am_nam     ; $3B  TSC
00EF33  2  22                   .BYTE   ops2|am_adrx    ; $3C  BIT abs,X
00EF34  2  22                   .BYTE   ops2|am_adrx    ; $3D  AND abs,X
00EF35  2  22                   .BYTE   ops2|am_adrx    ; $3E  ROL abs,X
00EF36  2  32                   .BYTE   ops3|am_adrx    ; $3F  AND absl,X
00EF37  2               ;
00EF37  2  00                   .BYTE   ops0|am_nam     ; $40  RTI
00EF38  2  17                   .BYTE   ops1|am_indx    ; $41  EOR (dp,X)
00EF39  2  00                   .BYTE   ops0|am_nam     ; $42  WDM
00EF3A  2  19                   .BYTE   ops1|am_stk     ; $43  EOR <offset>,S
00EF3B  2  2B                   .BYTE   ops2|am_move    ; $44  MVP sb,db
00EF3C  2  10                   .BYTE   ops1|am_nam     ; $45  EOR dp
00EF3D  2  10                   .BYTE   ops1|am_nam     ; $46  LSR dp
00EF3E  2  15                   .BYTE   ops1|am_indl    ; $47  EOR [dp]
00EF3F  2  00                   .BYTE   ops0|am_nam     ; $48  PHA
00EF40  2  91                   .BYTE   vops|am_imm     ; $49  EOR #
00EF41  2  00                   .BYTE   ops0|am_nam     ; $4A  LSR A
00EF42  2  00                   .BYTE   ops0|am_nam     ; $4B  PHK
00EF43  2  20                   .BYTE   ops2|am_nam     ; $4C  JMP abs
00EF44  2  20                   .BYTE   ops2|am_nam     ; $4D  EOR abs
00EF45  2  20                   .BYTE   ops2|am_nam     ; $4E  LSR abs
00EF46  2  30                   .BYTE   ops3|am_nam     ; $4F  EOR absl
00EF47  2               ;
00EF47  2  50                   .BYTE   bop1|am_nam     ; $50  BVC abs
00EF48  2  18                   .BYTE   ops1|am_indy    ; $51  EOR (<dp>),Y
00EF49  2  14                   .BYTE   ops1|am_ind     ; $52  EOR (dp)
00EF4A  2  1A                   .BYTE   ops1|am_stky    ; $53  EOR (<offset>,S),Y
00EF4B  2  2B                   .BYTE   ops2|am_move    ; $54  MVN sb,db
00EF4C  2  12                   .BYTE   ops1|am_adrx    ; $55  EOR dp,X
00EF4D  2  12                   .BYTE   ops1|am_adrx    ; $56  LSR dp,X
00EF4E  2  16                   .BYTE   ops1|am_indly   ; $57  EOR [dp],Y
00EF4F  2  00                   .BYTE   ops0|am_nam     ; $58  CLI
00EF50  2  23                   .BYTE   ops2|am_adry    ; $59  EOR abs,Y
00EF51  2  00                   .BYTE   ops0|am_nam     ; $5A  PHY
00EF52  2  00                   .BYTE   ops0|am_nam     ; $5B  TCD
00EF53  2  30                   .BYTE   ops3|am_nam     ; $5C  JML absl
00EF54  2  22                   .BYTE   ops2|am_adrx    ; $5D  EOR abs,X
00EF55  2  22                   .BYTE   ops2|am_adrx    ; $5E  LSR abs,X
00EF56  2  32                   .BYTE   ops3|am_adrx    ; $5F  EOR absl,X
00EF57  2               ;
00EF57  2  00                   .BYTE   ops0|am_nam     ; $60  RTS
00EF58  2  17                   .BYTE   ops1|am_indx    ; $61  ADC (dp,X)
00EF59  2  60                   .BYTE   bop2|am_nam     ; $62  PER
00EF5A  2  19                   .BYTE   ops1|am_stk     ; $63  ADC <offset>,S
00EF5B  2  10                   .BYTE   ops1|am_nam     ; $64  STZ dp
00EF5C  2  10                   .BYTE   ops1|am_nam     ; $65  ADC dp
00EF5D  2  10                   .BYTE   ops1|am_nam     ; $66  ROR dp
00EF5E  2  15                   .BYTE   ops1|am_indl    ; $67  ADC [dp]
00EF5F  2  00                   .BYTE   ops0|am_nam     ; $68  PLA
00EF60  2  91                   .BYTE   vops|am_imm     ; $69  ADC #
00EF61  2  00                   .BYTE   ops0|am_nam     ; $6A  ROR A
00EF62  2  00                   .BYTE   ops0|am_nam     ; $6B  RTL
00EF63  2  24                   .BYTE   ops2|am_ind     ; $6C  JMP (abs)
00EF64  2  20                   .BYTE   ops2|am_nam     ; $6D  ADC abs
00EF65  2  20                   .BYTE   ops2|am_nam     ; $6E  ROR abs
00EF66  2  30                   .BYTE   ops3|am_nam     ; $6F  ADC absl
00EF67  2               ;
00EF67  2  50                   .BYTE   bop1|am_nam     ; $70  BVS abs
00EF68  2  18                   .BYTE   ops1|am_indy    ; $71  ADC (<dp>),Y
00EF69  2  14                   .BYTE   ops1|am_ind     ; $72  ADC (dp)
00EF6A  2  1A                   .BYTE   ops1|am_stky    ; $73  ADC (<offset>,S),Y
00EF6B  2  12                   .BYTE   ops1|am_adrx    ; $74  STZ dp,X
00EF6C  2  12                   .BYTE   ops1|am_adrx    ; $75  ADC dp,X
00EF6D  2  12                   .BYTE   ops1|am_adrx    ; $76  ROR dp,X
00EF6E  2  16                   .BYTE   ops1|am_indly   ; $77  ADC [dp],Y
00EF6F  2  00                   .BYTE   ops0|am_nam     ; $78  SEI
00EF70  2  23                   .BYTE   ops2|am_adry    ; $79  ADC abs,Y
00EF71  2  00                   .BYTE   ops0|am_nam     ; $7A  PLY
00EF72  2  00                   .BYTE   ops0|am_nam     ; $7B  TDC
00EF73  2  27                   .BYTE   ops2|am_indx    ; $7C  JMP (abs,X)
00EF74  2  22                   .BYTE   ops2|am_adrx    ; $7D  ADC abs,X
00EF75  2  22                   .BYTE   ops2|am_adrx    ; $7E  ROR abs,X
00EF76  2  32                   .BYTE   ops3|am_adrx    ; $7F  ADC absl,X
00EF77  2               ;
00EF77  2  50                   .BYTE   bop1|am_nam     ; $80  BRA abs
00EF78  2  17                   .BYTE   ops1|am_indx    ; $81  STA (dp,X)
00EF79  2  60                   .BYTE   bop2|am_nam     ; $82  BRL abs
00EF7A  2  19                   .BYTE   ops1|am_stk     ; $83  STA <offset>,S
00EF7B  2  10                   .BYTE   ops1|am_nam     ; $84  STY dp
00EF7C  2  10                   .BYTE   ops1|am_nam     ; $85  STA dp
00EF7D  2  10                   .BYTE   ops1|am_nam     ; $86  STX dp
00EF7E  2  15                   .BYTE   ops1|am_indl    ; $87  STA [dp]
00EF7F  2  00                   .BYTE   ops0|am_nam     ; $88  DEY
00EF80  2  91                   .BYTE   vops|am_imm     ; $89  BIT #
00EF81  2  00                   .BYTE   ops0|am_nam     ; $8A  TXA
00EF82  2  00                   .BYTE   ops0|am_nam     ; $8B  PHB
00EF83  2  20                   .BYTE   ops2|am_nam     ; $8C  STY abs
00EF84  2  20                   .BYTE   ops2|am_nam     ; $8D  STA abs
00EF85  2  20                   .BYTE   ops2|am_nam     ; $8E  STX abs
00EF86  2  30                   .BYTE   ops3|am_nam     ; $8F  STA absl
00EF87  2               ;
00EF87  2  50                   .BYTE   bop1|am_nam     ; $90  BCC abs
00EF88  2  18                   .BYTE   ops1|am_indy    ; $91  STA (<dp>),Y
00EF89  2  14                   .BYTE   ops1|am_ind     ; $92  STA (dp)
00EF8A  2  1A                   .BYTE   ops1|am_stky    ; $93  STA (<offset>,S),Y
00EF8B  2  12                   .BYTE   ops1|am_adrx    ; $94  STY dp,X
00EF8C  2  12                   .BYTE   ops1|am_adrx    ; $95  STA dp,X
00EF8D  2  13                   .BYTE   ops1|am_adry    ; $96  STX dp,Y
00EF8E  2  16                   .BYTE   ops1|am_indly   ; $97  STA [dp],Y
00EF8F  2  00                   .BYTE   ops0|am_nam     ; $98  TYA
00EF90  2  23                   .BYTE   ops2|am_adry    ; $99  STA abs,Y
00EF91  2  00                   .BYTE   ops0|am_nam     ; $9A  TXS
00EF92  2  00                   .BYTE   ops0|am_nam     ; $9B  TXY
00EF93  2  20                   .BYTE   ops2|am_nam     ; $9C  STZ abs
00EF94  2  22                   .BYTE   ops2|am_adrx    ; $9D  STA abs,X
00EF95  2  22                   .BYTE   ops2|am_adrx    ; $9E  STZ abs,X
00EF96  2  32                   .BYTE   ops3|am_adrx    ; $9F  STA absl,X
00EF97  2               ;
00EF97  2  91                   .BYTE   vops|am_imm     ; $A0  LDY #
00EF98  2  17                   .BYTE   ops1|am_indx    ; $A1  LDA (dp,X)
00EF99  2  91                   .BYTE   vops|am_imm     ; $A2  LDX #
00EF9A  2  19                   .BYTE   ops1|am_stk     ; $A3  LDA <offset>,S
00EF9B  2  10                   .BYTE   ops1|am_nam     ; $A4  LDY dp
00EF9C  2  10                   .BYTE   ops1|am_nam     ; $A5  LDA dp
00EF9D  2  10                   .BYTE   ops1|am_nam     ; $A6  LDX dp
00EF9E  2  15                   .BYTE   ops1|am_indl    ; $A7  LDA [dp]
00EF9F  2  00                   .BYTE   ops0|am_nam     ; $A8  TAY
00EFA0  2  91                   .BYTE   vops|am_imm     ; $A9  LDA #
00EFA1  2  00                   .BYTE   ops0|am_nam     ; $AA  TAX
00EFA2  2  00                   .BYTE   ops0|am_nam     ; $AB  PLB
00EFA3  2  20                   .BYTE   ops2|am_nam     ; $AC  LDY abs
00EFA4  2  20                   .BYTE   ops2|am_nam     ; $AD  LDA abs
00EFA5  2  20                   .BYTE   ops2|am_nam     ; $AE  LDX abs
00EFA6  2  30                   .BYTE   ops3|am_nam     ; $AF  LDA absl
00EFA7  2               ;
00EFA7  2  50                   .BYTE   bop1|am_nam     ; $B0  BCS abs
00EFA8  2  18                   .BYTE   ops1|am_indy    ; $B1  LDA (<dp>),Y
00EFA9  2  14                   .BYTE   ops1|am_ind     ; $B2  LDA (dp)
00EFAA  2  1A                   .BYTE   ops1|am_stky    ; $B3  LDA (<offset>,S),Y
00EFAB  2  12                   .BYTE   ops1|am_adrx    ; $B4  LDY dp,X
00EFAC  2  12                   .BYTE   ops1|am_adrx    ; $B5  LDA dp,X
00EFAD  2  13                   .BYTE   ops1|am_adry    ; $B6  LDX dp,Y
00EFAE  2  16                   .BYTE   ops1|am_indly   ; $B7  LDA [dp],Y
00EFAF  2  00                   .BYTE   ops0|am_nam     ; $B8  CLV
00EFB0  2  23                   .BYTE   ops2|am_adry    ; $B9  LDA abs,Y
00EFB1  2  00                   .BYTE   ops0|am_nam     ; $BA  TSX
00EFB2  2  00                   .BYTE   ops0|am_nam     ; $BB  TYX
00EFB3  2  22                   .BYTE   ops2|am_adrx    ; $BC  LDY abs,X
00EFB4  2  22                   .BYTE   ops2|am_adrx    ; $BD  LDA abs,X
00EFB5  2  23                   .BYTE   ops2|am_adry    ; $BE  LDX abs,Y
00EFB6  2  32                   .BYTE   ops3|am_adrx    ; $BF  LDA absl,X
00EFB7  2               ;
00EFB7  2  91                   .BYTE   vops|am_imm     ; $C0  CPY #
00EFB8  2  17                   .BYTE   ops1|am_indx    ; $C1  CMP (dp,X)
00EFB9  2  11                   .BYTE   ops1|am_imm     ; $C2  REP #
00EFBA  2  19                   .BYTE   ops1|am_stk     ; $C3  CMP <offset>,S
00EFBB  2  10                   .BYTE   ops1|am_nam     ; $C4  CPY dp
00EFBC  2  10                   .BYTE   ops1|am_nam     ; $C5  CMP dp
00EFBD  2  10                   .BYTE   ops1|am_nam     ; $C6  DEC dp
00EFBE  2  15                   .BYTE   ops1|am_indl    ; $C7  CMP [dp]
00EFBF  2  00                   .BYTE   ops0|am_nam     ; $C8  INY
00EFC0  2  91                   .BYTE   vops|am_imm     ; $C9  CMP #
00EFC1  2  00                   .BYTE   ops0|am_nam     ; $CA  DEX
00EFC2  2  00                   .BYTE   ops0|am_nam     ; $CB  WAI
00EFC3  2  20                   .BYTE   ops2|am_nam     ; $CC  CPY abs
00EFC4  2  20                   .BYTE   ops2|am_nam     ; $CD  CMP abs
00EFC5  2  20                   .BYTE   ops2|am_nam     ; $CE  DEC abs
00EFC6  2  30                   .BYTE   ops3|am_nam     ; $CF  CMP absl
00EFC7  2               ;
00EFC7  2  50                   .BYTE   bop1|am_nam     ; $D0  BNE abs
00EFC8  2  18                   .BYTE   ops1|am_indy    ; $D1  CMP (<dp>),Y
00EFC9  2  14                   .BYTE   ops1|am_ind     ; $D2  CMP (dp)
00EFCA  2  1A                   .BYTE   ops1|am_stky    ; $D3  CMP (<offset>,S),Y
00EFCB  2  10                   .BYTE   ops1|am_nam     ; $D4  PEI dp
00EFCC  2  12                   .BYTE   ops1|am_adrx    ; $D5  CMP dp,X
00EFCD  2  12                   .BYTE   ops1|am_adrx    ; $D6  DEC dp,X
00EFCE  2  16                   .BYTE   ops1|am_indly   ; $D7  CMP [dp],Y
00EFCF  2  00                   .BYTE   ops0|am_nam     ; $D8  CLD
00EFD0  2  23                   .BYTE   ops2|am_adry    ; $D9  CMP abs,Y
00EFD1  2  00                   .BYTE   ops0|am_nam     ; $DA  PHX
00EFD2  2  00                   .BYTE   ops0|am_nam     ; $DB  STP
00EFD3  2  25                   .BYTE   ops2|am_indl    ; $DC  JMP [abs]
00EFD4  2  22                   .BYTE   ops2|am_adrx    ; $DD  CMP abs,X
00EFD5  2  22                   .BYTE   ops2|am_adrx    ; $DE  DEC abs,X
00EFD6  2  32                   .BYTE   ops3|am_adrx    ; $DF  CMP absl,X
00EFD7  2               ;
00EFD7  2  91                   .BYTE   vops|am_imm     ; $E0  CPX #
00EFD8  2  17                   .BYTE   ops1|am_indx    ; $E1  SBC (dp,X)
00EFD9  2  11                   .BYTE   ops1|am_imm     ; $E2  SEP #
00EFDA  2  19                   .BYTE   ops1|am_stk     ; $E3  SBC <offset>,S
00EFDB  2  10                   .BYTE   ops1|am_nam     ; $E4  CPX dp
00EFDC  2  10                   .BYTE   ops1|am_nam     ; $E5  SBC dp
00EFDD  2  10                   .BYTE   ops1|am_nam     ; $E6  INC dp
00EFDE  2  15                   .BYTE   ops1|am_indl    ; $E7  SBC [dp]
00EFDF  2  00                   .BYTE   ops0|am_nam     ; $E8  INX
00EFE0  2  91                   .BYTE   vops|am_imm     ; $E9  SBC #
00EFE1  2  00                   .BYTE   ops0|am_nam     ; $EA  NOP
00EFE2  2  00                   .BYTE   ops0|am_nam     ; $EB  XBA
00EFE3  2  20                   .BYTE   ops2|am_nam     ; $EC  CPX abs
00EFE4  2  20                   .BYTE   ops2|am_nam     ; $ED  SBC abs
00EFE5  2  20                   .BYTE   ops2|am_nam     ; $EE  INC abs
00EFE6  2  30                   .BYTE   ops3|am_nam     ; $EF  SBC absl
00EFE7  2               ;
00EFE7  2  50                   .BYTE   bop1|am_nam     ; $F0  BEQ abs
00EFE8  2  18                   .BYTE   ops1|am_indy    ; $F1  SBC (<dp>),Y
00EFE9  2  14                   .BYTE   ops1|am_ind     ; $F2  SBC (dp)
00EFEA  2  1A                   .BYTE   ops1|am_stky    ; $F3  SBC (<offset>,S),Y
00EFEB  2  21                   .BYTE   ops2|am_imm     ; $F4  PEA #
00EFEC  2  12                   .BYTE   ops1|am_adrx    ; $F5  SBC dp,X
00EFED  2  12                   .BYTE   ops1|am_adrx    ; $F6  INC dp,X
00EFEE  2  16                   .BYTE   ops1|am_indly   ; $F7  SBC [dp],Y
00EFEF  2  00                   .BYTE   ops0|am_nam     ; $F8  SED
00EFF0  2  23                   .BYTE   ops2|am_adry    ; $F9  SBC abs,Y
00EFF1  2  00                   .BYTE   ops0|am_nam     ; $FA  PLX
00EFF2  2  00                   .BYTE   ops0|am_nam     ; $FB  XCE
00EFF3  2  27                   .BYTE   ops2|am_indx    ; $FC  JSR (abs,X)
00EFF4  2  22                   .BYTE   ops2|am_adrx    ; $FD  SBC abs,X
00EFF5  2  22                   .BYTE   ops2|am_adrx    ; $FE  INC abs,X
00EFF6  2  32                   .BYTE   ops3|am_adrx    ; $FF  SBC absl,X
00EFF7  2               ;
00EFF7  2               ;
00EFF7  2               ;	.X & .Y immediate mode opcodes...
00EFF7  2               ;
00EFF7  2               vopidx:
00EFF7  2  E0                   .BYTE   opc_cpxi        ;CPX #
00EFF8  2  C0                   .BYTE   opc_cpyi        ;CPY #
00EFF9  2  A2                   .BYTE   opc_ldxi        ;LDX #
00EFFA  2  A0                   .BYTE   opc_ldyi        ;LDY #
00EFFB  2               n_vopidx        = *-vopidx      ;number of opcodes
00EFFB  2               ;
00EFFB  2               ;
00EFFB  2               ;	addressing mode symbology lookup...
00EFFB  2               ;
00EFFB  2               ms_lutab:
00EFFB  2  13 F0                .WORD   ms_nam          ;no symbol
00EFFD  2  1D F0                .WORD   ms_imm          ;#
00EFFF  2  15 F0                .WORD   ms_addrx        ;<addr>,X
00F001  2  19 F0                .WORD   ms_addry        ;<addr>,Y
00F003  2  1F F0                .WORD   ms_ind          ;(<addr>)
00F005  2  22 F0                .WORD   ms_indl         ;[<dp>]
00F007  2  25 F0                .WORD   ms_indly        ;[<dp>],Y
00F009  2  2A F0                .WORD   ms_indx         ;(<addr>,X)
00F00B  2  2F F0                .WORD   ms_indy         ;(<dp>),Y
00F00D  2  37 F0                .WORD   ms_stk          ;<offset>,S
00F00F  2  3B F0                .WORD   ms_stky         ;(<offset>,S),Y
00F011  2  13 F0                .WORD   ms_nam          ;<sbnk>,<dbnk>
00F013  2               ;
00F013  2               ;
00F013  2               ;	addressing mode symbology strings...
00F013  2               ;
00F013  2               ms_nam:
00F013  2  20 00                .BYTE   " ",0           ;no symbol
00F015  2               ms_addrx:
00F015  2  20 2C 58 00          .BYTE   " ,X",0         ;<addr>,X
00F019  2               ms_addry:
00F019  2  20 2C 59 00          .BYTE   " ,Y",0         ;<addr>,Y
00F01D  2               ms_imm:
00F01D  2  23 00                .BYTE   "#",0           ;#
00F01F  2               ms_ind:
00F01F  2  28 29 00             .BYTE   "()",0          ;(<addr>)
00F022  2               ms_indl:
00F022  2  5B 5D 00             .BYTE   "[]",0          ;[<dp>]
00F025  2               ms_indly:
00F025  2  5B 5D 2C 59          .BYTE   "[],Y",0        ;[<dp>],Y
00F029  2  00           
00F02A  2               ms_indx:
00F02A  2  28 2C 58 29          .BYTE   "(,X)",0        ;(<addr>,X)
00F02E  2  00           
00F02F  2               ms_indy:
00F02F  2  28 29 2C 59          .BYTE   "(),Y",0        ;(<dp>),Y
00F033  2  00           
00F034  2               ms_move:
00F034  2  2C 24 00             .BYTE   ",$",0          ;<sbnk>,<dbnk>
00F037  2               ms_stk:
00F037  2  20 2C 53 00          .BYTE   " ,S",0         ;<offset>,S
00F03B  2               ms_stky:
00F03B  2  28 2C 53 29          .BYTE   "(,S),Y",0      ;(<offset>,S),Y
00F03F  2  2C 59 00     
00F042  2               ;
00F042  2               ;================================================================================
00F042  2               ;
00F042  2               ;CONSOLE DISPLAY CONTROL STRINGS
00F042  2               ;
00F042  2               dc_lf:
00F042  2  0D 0A                LF                      ;newline
00F044  2  00                   .BYTE   0
00F045  2               ;
00F045  2               dc_bs:  ;destructive backspace
00F045  2  08                   .BYTE   a_bs
00F046  2  20                   .BYTE   $20
00F047  2  08                   .BYTE   a_bs
00F048  2  00                   .BYTE   0
00F049  2               ;
00F049  2               dc_cl_DUMB:                     ;clear to end of line
00F049  2  0D 0A                .BYTE   $0d,$0a
00F04B  2  00                   .BYTE   0
00F04C  2               dc_cl_ANSI:                     ;clear to end of line
00F04C  2  1B 5B 4B             .BYTE   a_esc,"[K"
00F04F  2  00                   .BYTE   0
00F050  2               dc_cl_WYSE:                     ;clear to end of line
00F050  2  1B 54                .BYTE   a_esc,"T"
00F052  2  00                   .BYTE   0
00F053  2               
00F053  2               ;
00F053  2               ;
00F053  2               
00F053  2               ;
00F053  2               ;================================================================================
00F053  2               ;
00F053  2               ;TEXT STRINGS
00F053  2               ;
00F053  2               mm_brk:
00F053  2  07                   RB
00F054  2  0D 0A                LF
00F056  2  2A 42 52 4B          .BYTE   "*BRK"
00F05A  2  0D 0A                LF
00F05C  2  00                   .BYTE   0
00F05D  2               ;
00F05D  2               mm_entry:
00F05D  2  0D 0A                LF
00F05F  2  53 75 70 65          .BYTE   "Supermon 816 "
00F063  2  72 6D 6F 6E  
00F067  2  20 38 31 36  
00F06C  2  31 2E 30 2E          SOFTVERS
00F070  2  32           
00F071  2  20                   .BYTE   " "
00F072  2  0D 0A                LF
00F074  2  00                   .BYTE   0
00F075  2               ;
00F075  2               mm_err:
00F075  2  20 2A 45 52          .BYTE   " *ERR ",0
00F079  2  52 20 00     
00F07C  2               ;
00F07C  2               mm_prmpt:
00F07C  2  0D 0A                LF
00F07E  2  2E 00                .BYTE   ".",0
00F080  2               ;
00F080  2               mm_regs:
00F080  2  0D 0A                LF
00F082  2  50 42 20 20          .BYTE   "PB  PC   NVmxDIZC  .C   .X   .Y   SP"
00F086  2  50 43 20 20  
00F08A  2  20 4E 56 6D  
00F0A6  2  0D 0A                LF
00F0A8  2  00                   .BYTE   0
00F0A9  2               mm_regs1:
00F0A9  2  0D 0A                LF
00F0AB  2  20 44 50 20          .BYTE   " DP  DB"
00F0AF  2  20 44 42     
00F0B2  2  0D 0A                LF
00F0B4  2  00                   .BYTE   0
00F0B5  2               
00F0B5  2               ;
00F0B5  2               mm_rts:
00F0B5  2  07                   RB
00F0B6  2  0D 0A                LF
00F0B8  2  2A 52 54 53          .BYTE   "*RTS"
00F0BC  2  0D 0A                LF
00F0BE  2  00                   .BYTE   0
00F0BF  2               
00F0BF  2               
00F0BF  2               mm_S19_prmpt:
00F0BF  2  0D 0A                LF
00F0C1  2  42 65 67 69          .BYTE   "Begin sending S28 encoded file. . ."
00F0C5  2  6E 20 73 65  
00F0C9  2  6E 64 69 6E  
00F0E4  2  0D 0A                LF
00F0E6  2  00                   .BYTE   0
00F0E7  2               
00F0E7  2               ;
00F0E7  2               ALIVEM:
00F0E7  2  0D 0A                .BYTE   $0D,$0A
00F0E9  2  0D 0A                .BYTE   $0D,$0A
00F0EB  2  20 20 20 5F          .BYTE   "   __ _____  ___  __   __",$0D,$0A
00F0EF  2  5F 20 5F 5F  
00F0F3  2  5F 5F 5F 20  
00F106  2  20 20 2F 20          .BYTE   "  / /| ____|/ _ \/_ | / /",$0D,$0A
00F10A  2  2F 7C 20 5F  
00F10E  2  5F 5F 5F 7C  
00F121  2  20 2F 20 2F          .BYTE   " / /_| |__ | (_) || |/ /_",$0D,$0A
00F125  2  5F 7C 20 7C  
00F129  2  5F 5F 20 7C  
00F13C  2  7C 20 20 5F          .BYTE   "|  _ \___ \ > _ < | |  _ \",$0D,$0A
00F140  2  20 5C 5F 5F  
00F144  2  5F 20 5C 20  
00F158  2  7C 20 28 5F          .BYTE   "| (_) |__) | (_) || | (_) |",$0D,$0A
00F15C  2  29 20 7C 5F  
00F160  2  5F 29 20 7C  
00F175  2  20 5C 5F 5F          .BYTE   " \___/____/ \___/ |_|\___/ ",$0D,$0A
00F179  2  5F 2F 5F 5F  
00F17D  2  5F 5F 2F 20  
00F192  2  0D 0A                .BYTE   $0D,$0A
00F194  2  36 35 63 38          .BYTE   "65c816 BIOS (NATIVE MODE)",$0D,$0A
00F198  2  31 36 20 42  
00F19C  2  49 4F 53 20  
00F1AF  2  57 45 38 31          .BYTE   "WE816-MARK2 8/10/2024 - D.WERNER",$0D,$0A
00F1B3  2  36 2D 4D 41  
00F1B7  2  52 4B 32 20  
00F1D1  2  2D 2D 2D 2D          .BYTE   "-------------------------------------",$0D,$0A
00F1D5  2  2D 2D 2D 2D  
00F1D9  2  2D 2D 2D 2D  
00F1F8  2  0D 0A 00             .BYTE   $0D,$0A,0
00F1FB  2               ;
00F1FB  2               
00F1FB  2               
00F1FB  2               _txtend_        = *             ;end of program text
00F1FB  2               ;
00F1FB  2               ;================================================================================
00F1FB  2               
00F1FB  1               
00F1FB  1               ;__INTRETURN____________________________________________________
00F1FB  1               ;
00F1FB  1               ; Handle Interrupts
00F1FB  1               ;
00F1FB  1               ;_______________________________________________________________
00F1FB  1               ;
00F1FB  1               INTRETURN:
00F1FB  1  40                   RTI                     ;
00F1FC  1               
00F1FC  1               ;__BATEST_______________________________________________________
00F1FC  1               ;
00F1FC  1               ; Perform Basic Hardware Assurance Test
00F1FC  1               ;
00F1FC  1               ;_______________________________________________________________
00F1FC  1               ;
00F1FC  1               BATEST:
00F1FC  1  60                   RTS
00F1FD  1               
00F1FD  1               
00F1FD  1               
00F1FD  1               ;__CONSOLE_INIT_________________________________________________
00F1FD  1               ;
00F1FD  1               ; Initialize Attached Console Devices
00F1FD  1               ;
00F1FD  1               ;_______________________________________________________________
00F1FD  1               ;
00F1FD  1               CONSOLE_INIT:
00F1FD  1  08                   PHP
00F1FE  1  E2 30                ACCUMULATORINDEX8
00F200  1               
00F200  1  20 57 F2             JSR     SERIAL_CONSOLE_INIT
00F203  1  20 B5 F2             JSR     SETUPVIDEO
00F206  1  A9 0F                LDA     #$0F
00F208  1  20 E4 F3             JSR     SetColor
00F20B  1  20 47 F4             JSR     ClearScreen
00F20E  1  A9 00                LDA     #$00
00F210  1  8D 41 03             STA     ConsoleDevice
00F213  1  20 74 F4             JSR     INITKEYBOARD
00F216  1               
00F216  1  28                   PLP
00F217  1  60                   RTS
00F218  1               
00F218  1               
00F218  1               ;__OUTCH_______________________________________________________
00F218  1               ;
00F218  1               ; OUTPUT CHAR IN LOW BYTE OF ACC TO CONSOLE
00F218  1               ;
00F218  1               ; Current Console Device stored in ConsoleDevice
00F218  1               ;
00F218  1               ; 0=Serial
00F218  1               ; 1=On Board 9918/KB
00F218  1               ;______________________________________________________________
00F218  1               OUTCH:
00F218  1  DA                   PHX
00F219  1  5A                   PHY
00F21A  1  08                   PHP
00F21B  1  E2 30                ACCUMULATORINDEX8
00F21D  1  AA                   TAX
00F21E  1  AF 41 03 00          LDA     F:ConsoleDevice
00F222  1  C9 01                CMP     #$01
00F224  1  D0 08                BNE     OUTCH2
00F226  1  8A                   TXA
00F227  1  20 21 F3             JSR     OutVideoCh
00F22A  1  28                   PLP
00F22B  1  7A                   PLY
00F22C  1  FA                   PLX
00F22D  1  60                   RTS
00F22E  1               
00F22E  1               ; Default (serial)
00F22E  1               OUTCH2:
00F22E  1  8A                   TXA
00F22F  1  20 78 F2             JSR     SERIAL_OUTCH
00F232  1  28                   PLP
00F233  1  7A                   PLY
00F234  1  FA                   PLX
00F235  1  60                   RTS
00F236  1               
00F236  1               
00F236  1               ;__INCHW_______________________________________________________
00F236  1               ;
00F236  1               ; INPUT CHAR FROM CONSOLE TO ACC  (WAIT FOR CHAR)
00F236  1               ;
00F236  1               ;______________________________________________________________
00F236  1               INCHW:
00F236  1  DA                   PHX
00F237  1  5A                   PHY
00F238  1  08                   PHP
00F239  1  E2 30                ACCUMULATORINDEX8
00F23B  1               
00F23B  1               ;        LDA     F:ConsoleDevice
00F23B  1               ;        CMP     #$01
00F23B  1               ;        BNE     INCHW2
00F23B  1               ;        JSR     GetKey
00F23B  1               ;        PLP
00F23B  1               ;        PLY
00F23B  1               ;        PLX
00F23B  1               ;        RTS
00F23B  1               
00F23B  1               ; Default (serial)
00F23B  1               INCHW2:
00F23B  1  20 8D F2             JSR     SERIAL_INCHW
00F23E  1  28                   PLP
00F23F  1  7A                   PLY
00F240  1  FA                   PLX
00F241  1  60                   RTS
00F242  1               
00F242  1               
00F242  1               ;__INCH________________________________________________________
00F242  1               ;
00F242  1               ; INPUT CHAR FROM CONSOLE TO ACC
00F242  1               ;
00F242  1               ;______________________________________________________________
00F242  1               INCH:
00F242  1  DA                   PHX
00F243  1  5A                   PHY
00F244  1  08                   PHP
00F245  1  E2 30                ACCUMULATORINDEX8
00F247  1               
00F247  1               ;      LDA     F:ConsoleDevice
00F247  1               ;      CMP     #$01
00F247  1               ;      BNE     INCH2
00F247  1               
00F247  1               ;     JSR     ScanKeyboard
00F247  1               ;     CMP     #$FF
00F247  1               ;     BEQ     INCH2S
00F247  1               ;      JSR     GetKey
00F247  1               ;     BRA     INCH2C
00F247  1               
00F247  1               ; Default (serial)
00F247  1               INCH2:
00F247  1  20 A0 F2             JSR     SERIAL_INCH
00F24A  1  B0 05                BCS     INCH2S
00F24C  1               
00F24C  1               
00F24C  1               INCH2C:
00F24C  1  28                   PLP
00F24D  1  7A                   PLY
00F24E  1  FA                   PLX
00F24F  1  18                   CLC
00F250  1  60                   RTS
00F251  1               INCH2S:
00F251  1  28                   PLP
00F252  1  7A                   PLY
00F253  1  FA                   PLX
00F254  1  38                   SEC
00F255  1  60                   RTS
00F256  1               
00F256  1               DONOOP:
00F256  1               nothere:
00F256  1  60                   RTS
00F257  1               
00F257  1               
00F257  1               ;__Device_Driver_Code___________________________________________
00F257  1               ;
00F257  1                       .INCLUDE "conserial.asm"
00F257  2               ;__CONSERIAL_______________________________________________________________________________________
00F257  2               ;
00F257  2               ;	SERIAL CONSOLE DRIVER FOR THE RBC 65c816 SBC
00F257  2               ;
00F257  2               ;	WRITTEN BY: DAN WERNER -- 2/25/2018
00F257  2               ;
00F257  2               ;__________________________________________________________________________________________________
00F257  2               
00F257  2               
00F257  2               ;
00F257  2               ;__SERIAL_CONSOLE_INIT___________________________________________
00F257  2               ;
00F257  2               ;	INITIALIZE UART
00F257  2               ;	PARAMS:	SER_BAUD NEEDS TO BE SET TO BAUD RATE
00F257  2               ;	1200:	96	 = 1,843,200 / ( 16 X 1200 )
00F257  2               ;	2400:	48	 = 1,843,200 / ( 16 X 2400 )
00F257  2               ;	4800:	24	 = 1,843,200 / ( 16 X 4800 )
00F257  2               ;	9600:	12	 = 1,843,200 / ( 16 X 9600 )
00F257  2               ;	19K2:	06	 = 1,843,200 / ( 16 X 19,200 )
00F257  2               ;	38K4:	03
00F257  2               ;	57K6:	02
00F257  2               ;	115K2:	01
00F257  2               ;
00F257  2               ;_______________________________________________________________
00F257  2               ;
00F257  2               SERIAL_CONSOLE_INIT:
00F257  2  08                   PHP
00F258  2  E2 30                ACCUMULATORINDEX8
00F25A  2               
00F25A  2               ;        LDX     #63             ;
00F25A  2               ;        JSR     RTC_READ        ; get magic number
00F25A  2               ;        CMP     #166            ; is valid?
00F25A  2               ;        BEQ     UART_INIT1
00F25A  2  A9 80                LDA     #$80            ;
00F25C  2  8F 03 FE 00          STA     F:UART3         ; SET DLAB FLAG
00F260  2  A9 0C                LDA     #12             ; SET TO 12 = 9600 BAUD
00F262  2               ;        BRA     UART_INIT2
00F262  2               ;UART_INIT1:
00F262  2               ;        LDA     #$80            ;
00F262  2               ;        STA     F:UART3           ; SET DLAB FLAG
00F262  2               ;        LDX     #41             ;
00F262  2               ;        JSR     RTC_READ        ; get baud rate
00F262  2               UART_INIT2:
00F262  2  8F 00 FE 00          STA     F:UART0         ; save baud rate
00F266  2  A9 00                LDA     #00             ;
00F268  2  8F 01 FE 00          STA     F:UART1         ;
00F26C  2  A9 03                LDA     #03             ;
00F26E  2  8F 03 FE 00          STA     F:UART3         ; SET 8 BIT DATA, 1 STOPBIT
00F272  2  8F 04 FE 00          STA     F:UART4         ;
00F276  2  28                   PLP
00F277  2  60                   RTS
00F278  2               
00F278  2               ;__OUTCH_______________________________________________________
00F278  2               ;
00F278  2               ; OUTPUT CHAR IN LOW BYTE OF ACC TO UART
00F278  2               ;
00F278  2               ;______________________________________________________________
00F278  2               SERIAL_OUTCH:
00F278  2  08                   PHP
00F279  2  E2 30                ACCUMULATORINDEX8
00F27B  2  48                   PHA                     ; STORE ACC
00F27C  2               TX_BUSYLP:
00F27C  2  AF 05 FE 00          LDA     F:UART5         ; READ LINE STATUS REGISTER
00F280  2  29 20                AND     #$20            ; TEST IF UART IS READY TO SEND (BIT 5)
00F282  2  C9 00                CMP     #$00
00F284  2  F0 F6                BEQ     TX_BUSYLP       ; IF NOT REPEAT
00F286  2  68                   PLA                     ; RESTORE ACC
00F287  2  8F 00 FE 00          STA     F:UART0         ; THEN WRITE THE CHAR TO UART
00F28B  2               
00F28B  2  28                   PLP                     ; RESTORE CPU CONTEXT
00F28C  2  60                   RTS                     ; DONE
00F28D  2               
00F28D  2               
00F28D  2               ;__INCHW_______________________________________________________
00F28D  2               ;
00F28D  2               ; INPUT CHAR FROM UART TO ACC  (WAIT FOR CHAR)
00F28D  2               ;
00F28D  2               ;______________________________________________________________
00F28D  2               SERIAL_INCHW:
00F28D  2  08                   PHP
00F28E  2  E2 30                ACCUMULATORINDEX8
00F290  2               SERIAL_INCHW1:
00F290  2  AF 05 FE 00          LDA     F:UART5         ; READ LINE STATUS REGISTER
00F294  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
00F296  2  C9 00                CMP     #$00
00F298  2  F0 F6                BEQ     SERIAL_INCHW1   ; LOOP UNTIL DATA IS READY
00F29A  2  AF 00 FE 00          LDA     F:UART0         ; THEN READ THE CHAR FROM THE UART
00F29E  2               
00F29E  2  28                   PLP                     ; RESTORE CPU CONTEXT
00F29F  2  60                   RTS
00F2A0  2               
00F2A0  2               
00F2A0  2               ;__INCH_______________________________________________________
00F2A0  2               ;
00F2A0  2               ; INPUT CHAR FROM UART TO ACC (DO NOT WAIT FOR CHAR)
00F2A0  2               ; CArry set if invalid character
00F2A0  2               ;______________________________________________________________
00F2A0  2               SERIAL_INCH:
00F2A0  2  08                   PHP
00F2A1  2  E2 30                ACCUMULATORINDEX8
00F2A3  2  AF 05 FE 00          LDA     F:UART5         ; READ LINE STATUS REGISTER
00F2A7  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
00F2A9  2  F0 07                BEQ     SERIAL_INCH1    ; NO CHAR FOUND
00F2AB  2  AF 00 FE 00          LDA     F:UART0         ; THEN READ THE CHAR FROM THE UART
00F2AF  2  28                   PLP                     ; RESTORE CPU CONTEXT
00F2B0  2  18                   CLC
00F2B1  2  60                   RTS
00F2B2  2               SERIAL_INCH1:
00F2B2  2  28                   PLP                     ; RESTORE CPU CONTEXT
00F2B3  2  38                   SEC
00F2B4  2  60                   RTS
00F2B5  2               
00F2B5  1                       .INCLUDE "conlocal.asm"
00F2B5  2               ;__CONLOCAL_______________________________________________________________________________________
00F2B5  2               ;
00F2B5  2               ;	LOCAL CONSOLE DRIVER FOR THE WE816-MARK2
00F2B5  2               ;
00F2B5  2               ;	WRITTEN BY: DAN WERNER -- 8/18/2024
00F2B5  2               ;
00F2B5  2               ;_________________________________________________________________________________________________
00F2B5  2               
00F2B5  2               ;       SETUPVIDEO
00F2B5  2               ;       OutVideoCh
00F2B5  2               ;       SetXYVEC:
00F2B5  2               ;       CPYVVEC:
00F2B5  2               ;        SrlUpVEC:
00F2B5  2               ;       SetColorVEC:
00F2B5  2               ;       ClearScrVec:
00F2B5  2               ;
00F2B5  2               ;       INITKEYBOARD
00F2B5  2               ;       GetKey
00F2B5  2               ;
00F2B5  2               ;;;
00F2B5  2               ;;;
00F2B5  2               ;;; 	VRAM Memory Map
00F2B5  2               ;;;	$1000-$177F	40/80 Text Page 1
00F2B5  2               ;;;	$1800-$1F7F	40/80 Color Page 1
00F2B5  2               ;;;	$2000-$277F	40/80 Text Page 2
00F2B5  2               ;;;	$2800-$2F7F	40/80 Color Page 2
00F2B5  2               ;;;	$2000-$5FFF	HIRES PAGE 1
00F2B5  2               ;;;	$6000-$8FFF	HIRES PAGE 2
00F2B5  2               ;;;	$2000-$BFFF	DOUBLE HIRES
00F2B5  2               ; IO PORTS
00F2B5  2               ; Address|Description                                   |Value          |Value
00F2B5  2               ;--------|----------------------------------------------|---------------|--------
00F2B5  2               ;$fe30   | Scan Line Emulation                          | on            | off
00F2B5  2               ;$fe31   | Display Page                                 | page 0        | page 1
00F2B5  2               ;$fe32   | character generator write offset             | write offset  |
00F2B5  2               ;$fe33   | character generator write                    | Value         |
00F2B5  2               ;$fe34   | device command                               | Command       |
00F2B5  2               ;$fe35   | Text Mode                                    | on            | off
00F2B5  2               ;$fe36   | Lores Mode                                   | on            | off
00F2B5  2               ;$fe37   | Double Lores Mode (must be in lores first)   | on            | off
00F2B5  2               ;$fe38   | Hires Mode                                   | on            | off
00F2B5  2               ;$fe39   | Double Hires Mode (must be in hires first)   | on            | off
00F2B5  2               ;$fe3A   | 80 Col Mode (must be in text mode)           | on            | off
00F2B5  2               ;$fe3b   | Mixed Mode   (must be in lores/hires first)  | on            | off
00F2B5  2               ;$fe3c   | Quad Hires  (must be in hires first)         | on            | off
00F2B5  2               ;$fe3d   | Mono Hires  (must be in hires first)         | on            | off
00F2B5  2               
00F2B5  2               VDP_PAGE        = $fe31
00F2B5  2               VDP_TEXT_MODE   = $fe35
00F2B5  2               VDP_80COL_MODE  = $fe3A
00F2B5  2               
00F2B5  2               
00F2B5  2               
00F2B5  2               
00F2B5  2               ;__SETUPVIDEO____________________________________________________________________________
00F2B5  2               ;   Setup Video registers
00F2B5  2               ;________________________________________________________________________________________
00F2B5  2               SETUPVIDEO:
00F2B5  2  5A                   PHY
00F2B6  2  48                   PHA
00F2B7  2  08                   PHP
00F2B8  2  E2 30                ACCUMULATORINDEX8
00F2BA  2               
00F2BA  2               ;	Setup Width Parm
00F2BA  2  A9 28                LDA     #40
00F2BC  2  8F 43 03 00          STA     F:VIDEOWIDTH
00F2C0  2               
00F2C0  2  A9 01                LDA     #1
00F2C2  2  8F 31 FE 00          STA     F:VDP_PAGE
00F2C6  2               
00F2C6  2  A9 01                LDA     #1
00F2C8  2  8F 35 FE 00          STA     F:VDP_TEXT_MODE
00F2CC  2               
00F2CC  2  A9 02                LDA     #2
00F2CE  2  8F 3A FE 00          STA     F:VDP_80COL_MODE
00F2D2  2               
00F2D2  2  A9 0F                LDA     #$0F
00F2D4  2  8F 44 03 00          STA     F:DEFAULT_COLOR
00F2D8  2               
00F2D8  2  20 47 F4             JSR     ClearScreen
00F2DB  2               
00F2DB  2  28                   PLP
00F2DC  2  68                   PLA
00F2DD  2  7A                   PLY
00F2DE  2  60                   RTS
00F2DF  2               
00F2DF  2               
00F2DF  2               ;__Cursor________________________________________________________________________________
00F2DF  2               ;   Draw A cursor
00F2DF  2               ;
00F2DF  2               ;________________________________________________________________________________________
00F2DF  2               CURSOR:
00F2DF  2  DA                   PHX
00F2E0  2  5A                   PHY
00F2E1  2  48                   PHA
00F2E2  2  08                   PHP
00F2E3  2  E2 20                ACCUMULATOR8
00F2E5  2  C2 10                INDEX16
00F2E7  2  20 A8 F3             JSR     GetVideoAddressOffset
00F2EA  2  BF 00 18 00          LDA     F:$1800,x
00F2EE  2  C9 00                CMP     #$00
00F2F0  2  D0 04                BNE     :+
00F2F2  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00F2F6  2               :
00F2F6  2  0A                   ASL     a
00F2F7  2  0A                   ASL     a
00F2F8  2  0A                   ASL     a
00F2F9  2  0A                   ASL     a
00F2FA  2  29 F0                AND     #$F0
00F2FC  2  8F 42 03 00          STA     F:CSRCHAR
00F300  2  BF 00 18 00          LDA     F:$1800,x
00F304  2  4A                   LSR     a
00F305  2  4A                   LSR     a
00F306  2  4A                   LSR     a
00F307  2  4A                   LSR     a
00F308  2  29 0F                AND     #$0f
00F30A  2  0F 42 03 00          ORA     F:CSRCHAR
00F30E  2  9F 00 18 00          STA     F:$1800,x
00F312  2  BF 00 10 00          LDA     F:$1000,x
00F316  2  8F 42 03 00          STA     F:CSRCHAR
00F31A  2  28                   PLP
00F31B  2  68                   PLA
00F31C  2  7A                   PLY
00F31D  2  FA                   PLX
00F31E  2  60                   RTS
00F31F  2               
00F31F  2               ;__UnCursor______________________________________________________________________________
00F31F  2               ;   Remove the cursor
00F31F  2               ;
00F31F  2               ;________________________________________________________________________________________
00F31F  2               UNCURSOR:
00F31F  2  80 BE                BRA     CURSOR
00F321  2               
00F321  2               
00F321  2               
00F321  2               
00F321  2               ;__OutVideoCh_____________________________________________________________________________
00F321  2               ;   Output char to screen
00F321  2               ;
00F321  2               ; Char in A
00F321  2               ;________________________________________________________________________________________
00F321  2               OutVideoCh:
00F321  2  DA                   PHX
00F322  2  5A                   PHY
00F323  2  48                   PHA
00F324  2  08                   PHP
00F325  2  E2 30                ACCUMULATORINDEX8
00F327  2  48                   PHA
00F328  2  AF 30 03 00          LDA     F:CSRX
00F32C  2  AA                   TAX
00F32D  2  AF 31 03 00          LDA     F:CSRY
00F331  2  A8                   TAY
00F332  2  68                   PLA
00F333  2  C9 0A                CMP     #10
00F335  2  F0 45                BEQ     OutVideoCh_Exit
00F337  2  C9 0D                CMP     #13
00F339  2  F0 50                BEQ     OutVideoCh_CR
00F33B  2  C9 08                CMP     #8
00F33D  2  D0 03 4C 94          LBEQ    OutVideoCh_BS
00F341  2  F3           
00F342  2  20 A8 F3             JSR     GetVideoAddressOffset
00F345  2  9F 00 10 00          STA     F:$1000,X
00F349  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00F34D  2  9F 00 18 00          STA     F:$1800,X
00F351  2  E2 10                INDEX8
00F353  2  AF 30 03 00          LDA     F:CSRX
00F357  2  AA                   TAX
00F358  2  E8                   INX
00F359  2  8A                   TXA
00F35A  2  CF 43 03 00          CMP     F:VIDEOWIDTH
00F35E  2  D0 1C                BNE     OutVideoCh_Exit
00F360  2  C8                   INY
00F361  2  A2 00                LDX     #0
00F363  2  C0 18                CPY     #24
00F365  2  D0 15                BNE     OutVideoCh_Exit
00F367  2               OutVideoCh_CR1:
00F367  2  A2 00                LDX     #0
00F369  2  8A                   TXA
00F36A  2  8F 30 03 00          STA     F:CSRX
00F36E  2  A0 17                LDY     #23
00F370  2  98                   TYA
00F371  2  8F 31 03 00          STA     F:CSRY
00F375  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00F379  2  20 FE F3             JSR     ScrollUp
00F37C  2               
00F37C  2               OutVideoCh_Exit:
00F37C  2  8A                   TXA
00F37D  2  8F 30 03 00          STA     F:CSRX
00F381  2  98                   TYA
00F382  2  8F 31 03 00          STA     F:CSRY
00F386  2  28                   PLP
00F387  2  68                   PLA
00F388  2  7A                   PLY
00F389  2  FA                   PLX
00F38A  2  60                   RTS
00F38B  2               OutVideoCh_CR:
00F38B  2  C8                   INY
00F38C  2  C0 18                CPY     #24
00F38E  2  F0 D7                BEQ     OutVideoCh_CR1
00F390  2  A2 00                LDX     #0
00F392  2  80 E8                BRA     OutVideoCh_Exit
00F394  2               OutVideoCh_BS:
00F394  2  E0 00                CPX     #0
00F396  2  F0 03                BEQ     OutVideoCh_BS1
00F398  2  CA                   DEX
00F399  2  80 E1                BRA     OutVideoCh_Exit
00F39B  2               OutVideoCh_BS1:
00F39B  2  C0 00                CPY     #0
00F39D  2  F0 DD                BEQ     OutVideoCh_Exit
00F39F  2  88                   DEY
00F3A0  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00F3A4  2  3A                   DEC     A
00F3A5  2  AA                   TAX
00F3A6  2  80 D4                BRA     OutVideoCh_Exit
00F3A8  2               
00F3A8  2               GetVideoAddressOffset:
00F3A8  2  48                   PHA
00F3A9  2  AF 31 03 00          LDA     F:CSRY
00F3AD  2  C2 30                ACCUMULATORINDEX16
00F3AF  2  29 FF 00             AND     #$00FF
00F3B2  2  8F 36 03 00          STA     F:TEMP
00F3B6  2  18                   CLC
00F3B7  2  0A                   ASL     A
00F3B8  2  0A                   ASL     A
00F3B9  2  0A                   ASL     A
00F3BA  2  0A                   ASL     A
00F3BB  2  0A                   ASL     A
00F3BC  2  48                   PHA
00F3BD  2  AF 36 03 00          LDA     F:TEMP
00F3C1  2  18                   CLC
00F3C2  2  0A                   ASL     A
00F3C3  2  0A                   ASL     A
00F3C4  2  0A                   ASL     A
00F3C5  2  8F 36 03 00          STA     F:TEMP
00F3C9  2  68                   PLA
00F3CA  2  18                   CLC
00F3CB  2  6F 36 03 00          ADC     F:TEMP
00F3CF  2  8F 36 03 00          STA     F:TEMP
00F3D3  2  AF 30 03 00          LDA     F:CSRX
00F3D7  2  29 FF 00             AND     #$00FF
00F3DA  2  18                   CLC
00F3DB  2  6F 36 03 00          ADC     F:TEMP
00F3DF  2  AA                   TAX
00F3E0  2  E2 20                ACCUMULATOR8
00F3E2  2  68                   PLA
00F3E3  2  60                   RTS
00F3E4  2               
00F3E4  2               
00F3E4  2               
00F3E4  2               ;__SetColor______________________________________________________________________________
00F3E4  2               ;   Setup 9918 Color
00F3E4  2               ;
00F3E4  2               ; Color in A - High 4 bits background, Low 4 bits Foreground
00F3E4  2               ;________________________________________________________________________________________
00F3E4  2               SetColor:
00F3E4  2  08                   PHP
00F3E5  2  E2 30                ACCUMULATORINDEX8
00F3E7  2  8F 44 03 00          STA     F:DEFAULT_COLOR
00F3EB  2  28                   PLP
00F3EC  2  60                   RTS
00F3ED  2               
00F3ED  2               ;__SetXY_________________________________________________________________________________
00F3ED  2               ;   Setup 9918 Cursor Position
00F3ED  2               ;
00F3ED  2               ; Screen Coords in X,Y
00F3ED  2               ;________________________________________________________________________________________
00F3ED  2               SetXY:
00F3ED  2  48                   PHA
00F3EE  2  08                   PHP
00F3EF  2  E2 30                ACCUMULATORINDEX8
00F3F1  2  98                   TYA
00F3F2  2  8F 31 03 00          STA     F:CSRY
00F3F6  2  8A                   TXA
00F3F7  2  8F 30 03 00          STA     F:CSRX
00F3FB  2  28                   PLP
00F3FC  2  68                   PLA
00F3FD  2  60                   RTS
00F3FE  2               
00F3FE  2               ;__ScrollUp______________________________________________________________________________
00F3FE  2               ;   Scroll the screen up one line
00F3FE  2               ;
00F3FE  2               ; number of positions in line in A
00F3FE  2               
00F3FE  2               ;________________________________________________________________________________________
00F3FE  2               ScrollUp:
00F3FE  2  48                   PHA
00F3FF  2  DA                   PHX
00F400  2  5A                   PHY
00F401  2  08                   PHP
00F402  2  8B                   PHB
00F403  2  DA A2 00 DA          SETBANK 0
00F407  2  AB FA        
00F409  2  C2 30                ACCUMULATORINDEX16
00F40B  2               
00F40B  2  A9 97 03             LDA     #$0397          ; SCROLL SCREEN MEMORY
00F40E  2  A2 28 10             LDX     #$1028
00F411  2  A0 00 10             LDY     #$1000
00F414  2  54 00 00             MVN     #$00,#$00
00F417  2               
00F417  2  A9 97 03             LDA     #$0397          ; SCROLL COLOR MEMORY
00F41A  2  A2 28 18             LDX     #$1828
00F41D  2  A0 00 18             LDY     #$1800
00F420  2  54 00 00             MVN     #$00,#$00
00F423  2               
00F423  2  E2 30                ACCUMULATORINDEX8
00F425  2  A2 00                LDX     #$00            ; CLEAR BOTTOM LINE
00F427  2               ScrollUpLoop:
00F427  2  A9 20                LDA     #32
00F429  2  9F 98 13 00          STA     F:$1398,X
00F42D  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00F431  2  9F 98 1B 00          STA     F:$1B98,X
00F435  2  E8                   INX
00F436  2  E0 28                CPX     #40
00F438  2  D0 ED                BNE     ScrollUpLoop
00F43A  2  A2 00                LDX     #0
00F43C  2  A0 17                LDY     #23
00F43E  2  20 ED F3             JSR     SetXY
00F441  2               
00F441  2  AB                   PLB
00F442  2  28                   PLP
00F443  2  7A                   PLY
00F444  2  FA                   PLX
00F445  2  68                   PLA
00F446  2  60                   RTS
00F447  2               
00F447  2               
00F447  2               
00F447  2               
00F447  2               ;__ClearScreen___________________________________________________________________________
00F447  2               ;  clear Screen
00F447  2               ;________________________________________________________________________________________
00F447  2               ClearScreen:
00F447  2  5A                   PHY
00F448  2  48                   PHA
00F449  2  08                   PHP
00F44A  2  C2 10                INDEX16
00F44C  2  E2 20                ACCUMULATOR8
00F44E  2               
00F44E  2               
00F44E  2               ; Now let's clear
00F44E  2  A9 20                LDA     #32
00F450  2  A2 C1 03             LDX     #$03C1
00F453  2               ClearScreen1:
00F453  2  CA                   DEX
00F454  2  9F 00 10 00          STA     F:$1000,X
00F458  2  D0 F9                BNE     ClearScreen1
00F45A  2               
00F45A  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00F45E  2  A2 C1 03             LDX     #$03C1
00F461  2               ClearScreen2:
00F461  2  CA                   DEX
00F462  2  9F 00 18 00          STA     F:$1800,X
00F466  2  D0 F9                BNE     ClearScreen2
00F468  2               
00F468  2               
00F468  2  E2 10                INDEX8
00F46A  2  A2 00                LDX     #0
00F46C  2  9B                   TXY
00F46D  2  20 ED F3             JSR     SetXY
00F470  2  28                   PLP
00F471  2  68                   PLA
00F472  2  7A                   PLY
00F473  2  60                   RTS
00F474  2               
00F474  2               
00F474  2               
00F474  2               ;___________________________________________________________________________________________________
00F474  2               ; Initialize Keyboard
00F474  2               ;___________________________________________________________________________________________________
00F474  2               
00F474  2               INITKEYBOARD:
00F474  2  08                   PHP
00F475  2  E2 30                ACCUMULATORINDEX8
00F477  2  48                   PHA
00F478  2  A9 F0                LDA     #$F0
00F47A  2  8F 32 03 00          STA     F:LEDS
00F47E  2  A9 00                LDA     #00
00F480  2  8D 33 03             STA     KeyLock
00F483  2  68                   PLA
00F484  2  28                   PLP
00F485  2  60                   RTS
00F486  2               
00F486  2               ;___________________________________________________________________________________________________
00F486  2               ; Get a key from Keyboard
00F486  2               ;
00F486  2               ; Returns Key in A
00F486  2               ;___________________________________________________________________________________________________
00F486  2               
00F486  2               GetKey:
00F486  2  08                   PHP
00F487  2  E2 30                ACCUMULATORINDEX8
00F489  2  DA                   PHX
00F48A  2  5A                   PHY
00F48B  2               
00F48B  2               GetKey_Loop:
00F48B  2  20 F6 F6             JSR     kbdDelay
00F48E  2  20 BF F4             JSR     ScanKeyboard
00F491  2  C9 FF                CMP     #$FF
00F493  2  F0 F6                BEQ     GetKey_Loop
00F495  2  8F 37 03 00          STA     F:TEMP+1
00F499  2  20 41 F5             JSR     ModifierKeyCheck
00F49C  2  8F 34 03 00          STA     F:ScannedKey
00F4A0  2               GetKey_loop1:
00F4A0  2  20 F6 F6             JSR     kbdDelay
00F4A3  2  20 BF F4             JSR     ScanKeyboard
00F4A6  2  CF 37 03 00          CMP     F:TEMP+1
00F4AA  2  F0 F4                BEQ     GetKey_loop1
00F4AC  2               
00F4AC  2  AF 34 03 00          LDA     F:ScannedKey
00F4B0  2  20 80 F5             JSR     DecodeKeyboard
00F4B3  2               
00F4B3  2  C9 FF                CMP     #$FF
00F4B5  2  F0 D4                BEQ     GetKey_Loop
00F4B7  2  C9 00                CMP     #$00
00F4B9  2  F0 D0                BEQ     GetKey_Loop
00F4BB  2  7A                   PLY
00F4BC  2  FA                   PLX
00F4BD  2  28                   PLP
00F4BE  2  60                   RTS
00F4BF  2               
00F4BF  2               
00F4BF  2               ;___________________________________________________________________________________________________
00F4BF  2               ; Scan Keyboard
00F4BF  2               ;
00F4BF  2               ; Returns Scancode in A
00F4BF  2               ;
00F4BF  2               ;___________________________________________________________________________________________________
00F4BF  2               ScanKeyboard:
00F4BF  2  08                   PHP
00F4C0  2  E2 30                ACCUMULATORINDEX8
00F4C2  2  DA                   PHX
00F4C3  2  5A                   PHY
00F4C4  2  A9 FF                LDA     #$ff            ; SET OUTPUT DIRECTION
00F4C6  2  8F 22 FE 00          STA     F:via2ddrb      ; write value
00F4CA  2  A9 00                LDA     #$00            ; SET INPUT DIRECTION
00F4CC  2  8F 23 FE 00          STA     F:via2ddra      ; write value
00F4D0  2               
00F4D0  2  A0 00                LDY     #$00            ; SET ROW AND LEDS
00F4D2  2               outerScanLoop:
00F4D2  2  C0 09                CPY     #09
00F4D4  2  F0 46                BEQ     KeyNotFound
00F4D6  2  98                   TYA
00F4D7  2  8F 36 03 00          STA     F:TEMP
00F4DB  2  AF 32 03 00          LDA     F:LEDS
00F4DF  2  0F 36 03 00          ORA     F:TEMP
00F4E3  2  8F 20 FE 00          STA     F:via2regb      ; write value
00F4E7  2               innerScanLoop:
00F4E7  2  AF 21 FE 00          LDA     F:via2rega      ; read value
00F4EB  2  A2 00                LDX     #$00
00F4ED  2  C9 FF                CMP     #$FF            ;NO KEY PRESSED
00F4EF  2  F0 27                BEQ     exitInnerScanLoop
00F4F1  2  C9 FE                CMP     #$FE            ; COL 1 key Pressed
00F4F3  2  F0 2D                BEQ     keyFound
00F4F5  2  E8                   INX
00F4F6  2  C9 FD                CMP     #$FD            ; COL 2 key Pressed
00F4F8  2  F0 28                BEQ     keyFound
00F4FA  2  E8                   INX
00F4FB  2  C9 FB                CMP     #$FB            ; COL 3 key Pressed
00F4FD  2  F0 23                BEQ     keyFound
00F4FF  2  E8                   INX
00F500  2  C9 F7                CMP     #$F7            ; COL 4 key Pressed
00F502  2  F0 1E                BEQ     keyFound
00F504  2  E8                   INX
00F505  2  C9 EF                CMP     #$EF            ; COL 5 key Pressed
00F507  2  F0 19                BEQ     keyFound
00F509  2  E8                   INX
00F50A  2  C9 DF                CMP     #$DF            ; COL 6 key Pressed
00F50C  2  F0 14                BEQ     keyFound
00F50E  2  E8                   INX
00F50F  2  C9 BF                CMP     #$BF            ; COL 7 key Pressed
00F511  2  F0 0F                BEQ     keyFound
00F513  2  E8                   INX
00F514  2  C9 7F                CMP     #$7F            ; COL 8 key Pressed
00F516  2  F0 0A                BEQ     keyFound
00F518  2               exitInnerScanLoop:
00F518  2  C8                   INY
00F519  2  4C D2 F4             JMP     outerScanLoop
00F51C  2               KeyNotFound:
00F51C  2  A9 FF                LDA     #$FF
00F51E  2  7A                   PLY
00F51F  2  FA                   PLX
00F520  2  28                   PLP
00F521  2  60                   RTS
00F522  2               keyFound:
00F522  2  8A                   TXA
00F523  2  8F 36 03 00          STA     F:TEMP
00F527  2  98                   TYA
00F528  2  18                   CLC
00F529  2  0A                   ASL
00F52A  2  0A                   ASL
00F52B  2  0A                   ASL
00F52C  2  18                   CLC
00F52D  2  6F 36 03 00          ADC     F:TEMP
00F531  2  C9 30                CMP     #48
00F533  2  F0 E7                BEQ     KeyNotFound
00F535  2  C9 31                CMP     #49
00F537  2  F0 E3                BEQ     KeyNotFound
00F539  2  C9 32                CMP     #50
00F53B  2  F0 DF                BEQ     KeyNotFound
00F53D  2  7A                   PLY
00F53E  2  FA                   PLX
00F53F  2  28                   PLP
00F540  2  60                   RTS
00F541  2               
00F541  2               ;___________________________________________________________________________________________________
00F541  2               ; Check for Modifier keys (Shift, Control, Graph/Alt)
00F541  2               ; Requires Scancode in A
00F541  2               ; Returns modified Scancode in A
00F541  2               ;
00F541  2               ;___________________________________________________________________________________________________
00F541  2               ModifierKeyCheck:
00F541  2  08                   PHP
00F542  2  E2 30                ACCUMULATORINDEX8
00F544  2  48                   PHA
00F545  2               ; Check for Modifiers
00F545  2  AF 32 03 00          LDA     F:LEDS
00F549  2  09 06                ORA     #06
00F54B  2  8F 20 FE 00          STA     F:via2regb      ; write value
00F54F  2  AF 21 FE 00          LDA     F:via2rega      ; read value
00F553  2  C9 FF                CMP     #$FF            ;NO KEY PRESSED
00F555  2  F0 26                BEQ     exit_Scan
00F557  2  C9 FE                CMP     #$FE            ; COL 1 key Pressed
00F559  2  D0 06                BNE     check_Ctrl
00F55B  2  68                   PLA
00F55C  2  18                   CLC
00F55D  2  69 48                ADC     #72
00F55F  2  28                   PLP
00F560  2  60                   RTS
00F561  2               check_Ctrl:
00F561  2  C9 FD                CMP     #$FD            ; COL 2 key Pressed
00F563  2  D0 0A                BNE     check_Graph
00F565  2  68                   PLA
00F566  2  C9 30                CMP     #48
00F568  2  B0 03                BCS     skip_Ctrl
00F56A  2  18                   CLC
00F56B  2  69 90                ADC     #144
00F56D  2               skip_Ctrl:
00F56D  2  28                   PLP
00F56E  2  60                   RTS
00F56F  2               check_Graph:
00F56F  2  C9 FB                CMP     #$FB            ; COL 3 key Pressed
00F571  2  D0 0A                BNE     exit_Scan
00F573  2               check_Graph1:
00F573  2  68                   PLA
00F574  2  C9 30                CMP     #48
00F576  2  B0 F5                BCS     skip_Ctrl
00F578  2  18                   CLC
00F579  2  69 C0                ADC     #192
00F57B  2  28                   PLP
00F57C  2  60                   RTS
00F57D  2               exit_Scan:
00F57D  2  68                   PLA
00F57E  2  28                   PLP
00F57F  2  60                   RTS
00F580  2               
00F580  2               
00F580  2               ;___________________________________________________________________________________________________
00F580  2               ; Decode Keyboard
00F580  2               ;
00F580  2               ; Scancode in A
00F580  2               ; Returns Decoded Ascii in A
00F580  2               ;
00F580  2               ;___________________________________________________________________________________________________
00F580  2               DecodeKeyboard:
00F580  2  08                   PHP
00F581  2  E2 30                ACCUMULATORINDEX8
00F583  2  DA                   PHX
00F584  2  C9 33                CMP     #51             ; is CapsLock
00F586  2  F0 19                BEQ     is_CapsLock
00F588  2  C9 34                CMP     #52             ; is graphLock?
00F58A  2  F0 55                BEQ     is_GraphLock
00F58C  2  C9 30                CMP     #48
00F58E  2  B0 09                BCS     skip_Lock
00F590  2  C9 16                CMP     #22
00F592  2  90 05                BCC     skip_Lock
00F594  2  18                   CLC
00F595  2  6F 33 03 00          ADC     F:KeyLock
00F599  2               skip_Lock:
00F599  2  AA                   TAX
00F59A  2  BF 06 F6 00          LDA     F:DecodeTable,X
00F59E  2  FA                   PLX
00F59F  2  28                   PLP
00F5A0  2  60                   RTS
00F5A1  2               is_CapsLock:
00F5A1  2               ; check for toggle and set LEDs
00F5A1  2  AF 32 03 00          LDA     F:LEDS
00F5A5  2  29 10                AND     #$10
00F5A7  2  C9 00                CMP     #$00
00F5A9  2  F0 1B                BEQ     Cap_off
00F5AB  2  AF 32 03 00          LDA     F:LEDS
00F5AF  2  29 C0                AND     #$C0
00F5B1  2  09 20                ORA     #$20
00F5B3  2  8F 32 03 00          STA     F:LEDS
00F5B7  2  8F 20 FE 00          STA     F:via2regb      ; write value
00F5BB  2  A9 48                LDA     #72
00F5BD  2  8F 33 03 00          STA     F:KeyLock
00F5C1  2  A9 FF                LDA     #$FF
00F5C3  2  FA                   PLX
00F5C4  2  28                   PLP
00F5C5  2  60                   RTS
00F5C6  2               Cap_off:
00F5C6  2  AF 32 03 00          LDA     F:LEDS
00F5CA  2  29 C0                AND     #$C0
00F5CC  2  09 30                ORA     #$30
00F5CE  2  8F 32 03 00          STA     F:LEDS
00F5D2  2  8F 20 FE 00          STA     F:via2regb      ; write value
00F5D6  2  A9 00                LDA     #0
00F5D8  2  8F 33 03 00          STA     F:KeyLock
00F5DC  2  A9 FF                LDA     #$FF
00F5DE  2  FA                   PLX
00F5DF  2  28                   PLP
00F5E0  2  60                   RTS
00F5E1  2               is_GraphLock:
00F5E1  2               ; check for toggle and set LEDs
00F5E1  2  AF 32 03 00          LDA     F:LEDS
00F5E5  2  29 20                AND     #$20
00F5E7  2  C9 00                CMP     #$00
00F5E9  2  F0 DB                BEQ     Cap_off
00F5EB  2  AF 32 03 00          LDA     F:LEDS
00F5EF  2  29 C0                AND     #$C0
00F5F1  2  09 10                ORA     #$10
00F5F3  2  8F 32 03 00          STA     F:LEDS
00F5F7  2  8F 20 FE 00          STA     F:via2regb      ; write value
00F5FB  2  A9 C0                LDA     #192
00F5FD  2  8F 33 03 00          STA     F:KeyLock
00F601  2  A9 FF                LDA     #$FF
00F603  2  FA                   PLX
00F604  2  28                   PLP
00F605  2  60                   RTS
00F606  2               
00F606  2               DecodeTable:
00F606  2  30 31 32 33          .BYTE   '0','1','2','3','4','5','6','7'; 0
00F60A  2  34 35 36 37  
00F60E  2  38 39 2D 3D          .BYTE   '8','9','-','=','\','[',']',';'; 8
00F612  2  5C 5B 5D 3B  
00F616  2  27 7E 2C 2E          .BYTE   39,'~',',','.','/',00,'a','b'; 16
00F61A  2  2F 00 61 62  
00F61E  2  63 64 65 66          .BYTE   'c','d','e','f','g','h','i','j'; 24
00F622  2  67 68 69 6A  
00F626  2  6B 6C 6D 6E          .BYTE   'k','l','m','n','o','p','q','r'; 32
00F62A  2  6F 70 71 72  
00F62E  2  73 74 75 76          .BYTE   's','t','u','v','w','x','y','z'; 40
00F632  2  77 78 79 7A  
00F636  2  FF FF FF FF          .BYTE   $FF,$FF,$FF,$FF,$FF,11,12,14; 48
00F63A  2  FF 0B 0C 0E  
00F63E  2  0F 10 1B 09          .BYTE   15,16,27,09,03,08,17,13; 56
00F642  2  03 08 11 0D  
00F646  2  20 1C 1D 1E          .BYTE   32,28,29,30,31,01,02,04; 64
00F64A  2  1F 01 02 04  
00F64E  2               
00F64E  2  29 21 40 23          .BYTE   ')','!','@','#','$','%','^','&'; 72  ; Shift
00F652  2  24 25 5E 26  
00F656  2  2A 28 5F 2B          .BYTE   '*','(','_','+','|','{','}',':'; 80
00F65A  2  7C 7B 7D 3A  
00F65E  2  22 7E 3C 3E          .BYTE   34,'~','<','>','?',00,'A','B'; 88
00F662  2  3F 00 41 42  
00F666  2  43 44 45 46          .BYTE   'C','D','E','F','G','H','I','J'; 96
00F66A  2  47 48 49 4A  
00F66E  2  4B 4C 4D 4E          .BYTE   'K','L','M','N','O','P','Q','R'; 104
00F672  2  4F 50 51 52  
00F676  2  53 54 55 56          .BYTE   'S','T','U','V','W','X','Y','Z'; 112
00F67A  2  57 58 59 5A  
00F67E  2  FF FF FF FF          .BYTE   $FF,$FF,$FF,$FF,$FF,18,19,20; 120
00F682  2  FF 12 13 14  
00F686  2  15 16 1B 09          .BYTE   21,22,27,09,03,08,23,13; 128
00F68A  2  03 08 17 0D  
00F68E  2  20 1C 1D 1E          .BYTE   32,28,29,30,31,01,02,04; 136
00F692  2  1F 01 02 04  
00F696  2               
00F696  2  30 31 32 33          .BYTE   '0','1','2','3','4','5','6','7'; 144 ; Control
00F69A  2  34 35 36 37  
00F69E  2  38 39 EA E1          .BYTE   '8','9',234,225,224,248,249,000; 152
00F6A2  2  E0 F8 F9 00  
00F6A6  2  FA FB FE B0          .BYTE   250,251,254,176,177,00,01,02; 160
00F6AA  2  B1 00 01 02  
00F6AE  2  03 04 05 06          .BYTE   03,04,05,06,07,08,09,10; 168
00F6B2  2  07 08 09 0A  
00F6B6  2  0B 0C 0D 0E          .BYTE   11,12,13,14,15,16,17,18; 176
00F6BA  2  0F 10 11 12  
00F6BE  2  13 14 15 16          .BYTE   19,20,21,22,23,24,25,26; 184
00F6C2  2  17 18 19 1A  
00F6C6  2               
00F6C6  2  00 B2 B3 B4          .BYTE   000,178,179,180,181,182,183,184; 192 ; Graph
00F6CA  2  B5 B6 B7 B8  
00F6CE  2  B9 BA BB BC          .BYTE   185,186,187,188,189,190,191,192; 200
00F6D2  2  BD BE BF C0  
00F6D6  2  C1 C2 C3 C4          .BYTE   193,194,195,196,197,198,199,200; 208
00F6DA  2  C5 C6 C7 C8  
00F6DE  2  C9 CA CB CC          .BYTE   201,202,203,204,205,206,207,208; 216
00F6E2  2  CD CE CF D0  
00F6E6  2  D1 D2 D3 D4          .BYTE   209,210,211,212,213,214,215,216; 224
00F6EA  2  D5 D6 D7 D8  
00F6EE  2  D9 DA DB DC          .BYTE   217,218,219,220,221,222,223,167; 232
00F6F2  2  DD DE DF A7  
00F6F6  2               
00F6F6  2               
00F6F6  2               
00F6F6  2               
00F6F6  2               ;***********************************************************************************;
00F6F6  2               ;
00F6F6  2               ;  delay
00F6F6  2               kbdDelay:
00F6F6  2  08                   PHP
00F6F7  2  E2 30                ACCUMULATORINDEX8
00F6F9  2  48                   PHA
00F6FA  2  DA                   PHX
00F6FB  2  A2 40                LDX     #KBD_DELAY
00F6FD  2  A9 40                LDA     #$40            ; set for 1024 cycles (MHZ)
00F6FF  2  8F 29 FE 00          STA     F:via2t2ch      ; set VIA 2 T2C_h
00F703  2               kbdDelay_a:
00F703  2  AF 2D FE 00          LDA     F:via2ifr       ; get VIA 2 IFR
00F707  2  29 20                AND     #$20            ; mask T2 interrupt
00F709  2  F0 F8                BEQ     kbdDelay_a      ; loop until T2 interrupt
00F70B  2  CA                   DEX
00F70C  2  D0 F5                BNE     kbdDelay_a
00F70E  2  FA                   PLX
00F70F  2  68                   PLA
00F710  2  28                   PLP
00F711  2  60                   RTS
00F712  2               ;________________________________________________________________________________________
00F712  2               
00F712  1                       .INCLUDE "iec.asm"
00F712  2                       .A8
00F712  2                       .I8
00F712  2               
00F712  2               ;__IEC_____________________________________________________________________________________________
00F712  2               ;
00F712  2               ;	IEC SERIAL DRIVER
00F712  2               ;   ORIGINALLY FROM COMMODORE 64 KERNAL
00F712  2               ;	CONVERTED FOR 65816 BY: DAN WERNER -- 4/6/2021
00F712  2               ;
00F712  2               ;__________________________________________________________________________________________________
00F712  2               
00F712  2               ;***********************************************************************************;
00F712  2               ;
00F712  2               ; set serial data out high
00F712  2               
00F712  2               LAB_E4A0:
00F712  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00F715  2  29 DF                AND     #$DF            ; set CB2 low, serial data out high
00F717  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00F71A  2  60                   RTS
00F71B  2               
00F71B  2               
00F71B  2               ;***********************************************************************************;
00F71B  2               ;
00F71B  2               ; set serial data out low
00F71B  2               
00F71B  2               LAB_E4A9:
00F71B  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00F71E  2  09 20                ORA     #$20            ; set CB2 high, serial data out low
00F720  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00F723  2  60                   RTS
00F724  2               
00F724  2               
00F724  2               ;***********************************************************************************;
00F724  2               ;
00F724  2               ; get serial clock status
00F724  2               
00F724  2               LAB_E4B2:
00F724  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00F727  2  CD 1F FE             CMP     via1ora         ; compare with self
00F72A  2  D0 F8                BNE     LAB_E4B2        ; loop if changing
00F72C  2               
00F72C  2  4A                   LSR                     ; shift serial clock to Cb
00F72D  2  60                   RTS
00F72E  2               
00F72E  2               
00F72E  2               ;***********************************************************************************;
00F72E  2               ;
00F72E  2               ; command a serial bus device to TALK
00F72E  2               
00F72E  2               ; to use this routine the accumulator must first be loaded with a device number
00F72E  2               ; between 4 and 30. When called this routine converts this device number to a talk
00F72E  2               ; address. Then this data is transmitted as a command on the Serial bus.
00F72E  2               
00F72E  2               LAB_EE14:
00F72E  2  09 40                ORA     #$40            ; OR with the TALK command
00F730  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_2009
00F731  2               
00F731  2               
00F731  2               ;***********************************************************************************;
00F731  2               ;
00F731  2               ; command devices on the serial bus to LISTEN
00F731  2               
00F731  2               ; this routine will command a device on the serial bus to receive data. The
00F731  2               ; accumulator must be loaded with a device number between 4 and 31 before calling
00F731  2               ; this routine. LISTEN convert this to a listen address then transmit this data as
00F731  2               ; a command on the serial bus. The specified device will then go into listen mode
00F731  2               ; and be ready to accept information.
00F731  2               
00F731  2               LAB_EE17:
00F731  2  09 20                ORA     #$20            ; OR with the LISTEN command
00F733  2  20 68 FB             JSR     LAB_F160        ; check RS232 bus idle, setup timers
00F736  2               
00F736  2               ;***********************************************************************************;
00F736  2               ;
00F736  2               ; send control character
00F736  2               
00F736  2               LAB_EE1C:
00F736  2  48                   PHA                     ; save device address
00F737  2  2C 12 03             BIT     IECDCF          ; test deferred character flag
00F73A  2  10 0D                BPL     LAB_EE2B        ; branch if no defered character
00F73C  2               
00F73C  2  38                   SEC                     ; flag EOI
00F73D  2  6E 14 03             ROR     IECBCI          ; rotate into EOI flag byte
00F740  2  20 68 F7             JSR     LAB_EE49        ; Tx byte on serial bus
00F743  2               
00F743  2  4E 12 03             LSR     IECDCF          ; clear deferred character flag
00F746  2  4E 14 03             LSR     IECBCI          ; clear EOI flag
00F749  2               LAB_EE2B:
00F749  2               
00F749  2  68                   PLA                     ; restore device address
00F74A  2  8D 13 03             STA     IECDC           ; save as serial defered character
00F74D  2  20 12 F7             JSR     LAB_E4A0        ; set serial data out high
00F750  2  C9 3F                CMP     #$3F            ; compare read byte with $3F
00F752  2  D0 03                BNE     LAB_EE38        ; branch if not $3F, this branch will always be taken as
00F754  2               ; after VIA 2's PCR is read it is ANDed with $DF, so the
00F754  2               ; result can never be $3F
00F754  2               
00F754  2  20 C4 F8             JSR     LAB_EF84        ; set serial clock high
00F757  2               
00F757  2               LAB_EE38:
00F757  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00F75A  2  09 80                ORA     #$80            ; set serial ATN low
00F75C  2  8D 1F FE             STA     via1ora         ; set VIA 1 DRA, no handshake
00F75F  2               
00F75F  2               
00F75F  2               ;***********************************************************************************;
00F75F  2               ;
00F75F  2               ; if the code drops through to here the serial clock is low and the serial data has been
00F75F  2               ; released so the following code will have no effect apart from delaying the first byte
00F75F  2               ; by 1ms
00F75F  2               
00F75F  2               ;## set clk/data, wait and Tx byte on serial bus
00F75F  2               LAB_EE40:
00F75F  2  20 CD F8             JSR     LAB_EF8D        ; set serial clock low
00F762  2  20 12 F7             JSR     LAB_E4A0        ; set serial data out high
00F765  2  20 D6 F8             JSR     LAB_EF96        ; 1ms delay
00F768  2               
00F768  2               ;***********************************************************************************;
00F768  2               ;
00F768  2               ; Tx byte on serial bus
00F768  2               
00F768  2               LAB_EE49:
00F768  2  78                   SEI                     ; disable interrupts
00F769  2  20 12 F7             JSR     LAB_E4A0        ; set serial data out high
00F76C  2  20 24 F7             JSR     LAB_E4B2        ; get serial clock status
00F76F  2  4A                   LSR                     ; shift serial data to Cb
00F770  2  B0 6E                BCS     LAB_EEB4        ; if data high do device not present
00F772  2  20 C4 F8             JSR     LAB_EF84        ; set serial clock high
00F775  2  2C 14 03             BIT     IECBCI          ; test EOI flag
00F778  2  10 0C                BPL     LAB_EE66        ; branch if not EOI
00F77A  2               ; I think this is the EOI sequence so the serial clock has been released and the serial
00F77A  2               ; data is being held low by the peripherals. first up wait for the serial data to rise
00F77A  2               
00F77A  2               LAB_EE5A:
00F77A  2  20 24 F7             JSR     LAB_E4B2        ; get serial clock status
00F77D  2  4A                   LSR                     ; shift serial data to Cb
00F77E  2  90 FA                BCC     LAB_EE5A        ; loop if data low
00F780  2               
00F780  2               ; now the data is high, EOI is signalled by waiting for at least 200us without pulling
00F780  2               ; the serial clock line low again. the listener should respond by pulling the serial
00F780  2               ; data line low
00F780  2               
00F780  2               LAB_EE60:
00F780  2  20 24 F7             JSR     LAB_E4B2        ; get serial clock status
00F783  2  4A                   LSR                     ; shift serial data to Cb
00F784  2  B0 FA                BCS     LAB_EE60        ; loop if data high
00F786  2               
00F786  2               ; the serial data has gone low ending the EOI sequence, now just wait for the serial
00F786  2               ; data line to go high again or, if this isn't an EOI sequence, just wait for the serial
00F786  2               ; data to go high the first time
00F786  2               
00F786  2               LAB_EE66:
00F786  2  20 24 F7             JSR     LAB_E4B2        ; get serial clock status
00F789  2  4A                   LSR                     ; shift serial data to Cb
00F78A  2  90 FA                BCC     LAB_EE66        ; loop if data low
00F78C  2               
00F78C  2               ; serial data is high now pull the clock low, preferably within 60us
00F78C  2               
00F78C  2  20 CD F8             JSR     LAB_EF8D        ; set serial clock low
00F78F  2               
00F78F  2               ; now the Vic has to send the eight bits, LSB first. first it sets the serial data line
00F78F  2               ; to reflect the bit in the byte, then it sets the serial clock to high. The serial
00F78F  2               ; clock is left high for 26 cycles, 23us on a PAL Vic, before it is again pulled low
00F78F  2               ; and the serial data is allowed high again
00F78F  2               
00F78F  2  A9 08                LDA     #$08            ; eight bits to do
00F791  2  8D 15 03             STA     IECBTC          ; set serial bus bit count
00F794  2               LAB_EE73:
00F794  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00F797  2  CD 1F FE             CMP     via1ora         ; compare with self
00F79A  2  D0 F8                BNE     LAB_EE73        ; loop if changing
00F79C  2               
00F79C  2  4A                   LSR                     ; serial clock to carry
00F79D  2  4A                   LSR                     ; serial data to carry
00F79E  2  90 43                BCC     LAB_EEB7        ; if data low do timeout on serial bus
00F7A0  2  20 D4 FB             JSR     IEC_DELAY
00F7A3  2  6E 13 03             ROR     IECDC           ; rotate transmit byte
00F7A6  2  B0 05                BCS     LAB_EE88        ; branch if bit = 1
00F7A8  2               
00F7A8  2  20 1B F7             JSR     LAB_E4A9        ; else set serial data out low
00F7AB  2  D0 03                BNE     LAB_EE8B        ; branch always
00F7AD  2               
00F7AD  2               LAB_EE88:
00F7AD  2  20 12 F7             JSR     LAB_E4A0        ; set serial data out high
00F7B0  2               LAB_EE8B:
00F7B0  2  20 D4 FB             JSR     IEC_DELAY
00F7B3  2  20 C4 F8             JSR     LAB_EF84        ; set serial clock high
00F7B6  2  EA                   NOP                     ; waste ..
00F7B7  2  EA                   NOP                     ; .. a ..
00F7B8  2  EA                   NOP                     ; .. cycle ..
00F7B9  2  EA                   NOP                     ; .. or two
00F7BA  2  20 D4 FB             JSR     IEC_DELAY
00F7BD  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00F7C0  2  29 DF                AND     #$DF            ; set CB2 low, serial data out high
00F7C2  2  09 02                ORA     #$02            ; set CA2 high, serial clock out low
00F7C4  2  8D 2C FE             STA     via2pcr         ; save VIA 2 PCR
00F7C7  2  CE 15 03             DEC     IECBTC          ; decrement serial bus bit count
00F7CA  2  D0 C8                BNE     LAB_EE73        ; loop if not all done
00F7CC  2               
00F7CC  2               ; now all eight bits have been sent it's up to the peripheral to signal the byte was
00F7CC  2               ; received by pulling the serial data low. this should be done within one milisecond
00F7CC  2               
00F7CC  2  A9 40                LDA     #$40            ; wait for up to about 1ms (MHZ)
00F7CE  2  8D 29 FE             STA     via2t2ch        ; set VIA 2 T2C_h
00F7D1  2               LAB_EEA5:
00F7D1  2  AD 2D FE             LDA     via2ifr         ; get VIA 2 IFR
00F7D4  2  29 20                AND     #$20            ; mask T2 interrupt
00F7D6  2  D0 0B                BNE     LAB_EEB7        ; if T2 interrupt do timeout on serial bus
00F7D8  2               
00F7D8  2  20 24 F7             JSR     LAB_E4B2        ; get serial clock status
00F7DB  2  4A                   LSR                     ; shift serial data to Cb
00F7DC  2  B0 F3                BCS     LAB_EEA5        ; if data high go wait some more
00F7DE  2               
00F7DE  2  58                   CLI                     ; enable interrupts
00F7DF  2  60                   RTS
00F7E0  2               
00F7E0  2               
00F7E0  2               ;***********************************************************************************;
00F7E0  2               ;
00F7E0  2               ; device not present
00F7E0  2               
00F7E0  2               LAB_EEB4:
00F7E0  2  A9 80                LDA     #$80            ; error $80, device not present
00F7E2  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_03A9
00F7E3  2               
00F7E3  2               
00F7E3  2               ;***********************************************************************************;
00F7E3  2               ;
00F7E3  2               ; timeout on serial bus
00F7E3  2               
00F7E3  2               LAB_EEB7:
00F7E3  2  A9 03                LDA     #$03            ; error $03, write timeout
00F7E5  2               LAB_EEB9:
00F7E5  2  20 E3 F8             JSR     LAB_FE6A        ; OR into serial status byte
00F7E8  2  58                   CLI                     ; enable interrupts
00F7E9  2  18                   CLC                     ; clear for branch
00F7EA  2  90 55                BCC     LAB_EF09        ; ATN high, delay, clock high then data high, branch always
00F7EC  2               
00F7EC  2               
00F7EC  2               ;***********************************************************************************;
00F7EC  2               ;
00F7EC  2               ; send secondary address after LISTEN
00F7EC  2               
00F7EC  2               ; this routine is used to send a secondary address to an I/O device after a call to
00F7EC  2               ; the LISTEN routine is made and the device commanded to LISTEN. The routine cannot
00F7EC  2               ; be used to send a secondary address after a call to the TALK routine.
00F7EC  2               
00F7EC  2               ; A secondary address is usually used to give set-up information to a device before
00F7EC  2               ; I/O operations begin.
00F7EC  2               
00F7EC  2               ; When a secondary address is to be sent to a device on the serial bus the address
00F7EC  2               ; must first be ORed with $60.
00F7EC  2               
00F7EC  2               LAB_EEC0:
00F7EC  2  8D 13 03             STA     IECDC           ; save defered byte
00F7EF  2  20 5F F7             JSR     LAB_EE40        ; set clk/data, wait and Tx byte on serial bus
00F7F2  2               ; set serial ATN high
00F7F2  2               
00F7F2  2               LAB_EEC5:
00F7F2  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00F7F5  2  29 7F                AND     #$7F            ; set serial ATN high
00F7F7  2  8D 1F FE             STA     via1ora         ; set VIA 1 DRA, no handshake
00F7FA  2  60                   RTS
00F7FB  2               
00F7FB  2               
00F7FB  2               ;***********************************************************************************;
00F7FB  2               ;
00F7FB  2               ; send secondary address after TALK
00F7FB  2               
00F7FB  2               ; this routine transmits a secondary address on the serial bus for a TALK device.
00F7FB  2               ; This routine must be called with a number between 4 and 31 in the accumulator.
00F7FB  2               ; The routine will send this number as a secondary address command over the serial
00F7FB  2               ; bus. This routine can only be called after a call to the TALK routine. It will
00F7FB  2               ; not work after a LISTEN.
00F7FB  2               
00F7FB  2               LAB_EECE:
00F7FB  2  8D 13 03             STA     IECDC           ; save the secondary address byte to transmit
00F7FE  2  20 5F F7             JSR     LAB_EE40        ; set clk/data, wait and Tx byte on serial bus
00F801  2               
00F801  2  2C 17 03             BIT     IECSTW          ; test serial status byte
00F804  2  10 02                BPL     LAB_EED3        ; if device present
00F806  2  38                   SEC
00F807  2  60                   RTS
00F808  2               
00F808  2               ;***********************************************************************************;
00F808  2               ;
00F808  2               ; wait for bus end after send
00F808  2               
00F808  2               LAB_EED3:
00F808  2  78                   SEI                     ; disable interrupts
00F809  2  20 1B F7             JSR     LAB_E4A9        ; set serial data out low
00F80C  2  20 F2 F7             JSR     LAB_EEC5        ; set serial ATN high
00F80F  2  20 C4 F8             JSR     LAB_EF84        ; set serial clock high
00F812  2               LAB_EEDD:
00F812  2  20 24 F7             JSR     LAB_E4B2        ; get serial clock status
00F815  2  B0 FB                BCS     LAB_EEDD        ; branch if clock high
00F817  2               
00F817  2  58                   CLI                     ; enable interrupts
00F818  2  60                   RTS
00F819  2               
00F819  2               
00F819  2               ;***********************************************************************************;
00F819  2               ;
00F819  2               ; output a byte to the serial bus
00F819  2               
00F819  2               ; this routine is used to send information to devices on the serial bus. A call to
00F819  2               ; this routine will put a data byte onto the serial bus using full handshaking.
00F819  2               ; Before this routine is called the LISTEN routine, LAB_FFB1, must be used to
00F819  2               ; command a device on the serial bus to get ready to receive data.
00F819  2               
00F819  2               ; the accumulator is loaded with a byte to output as data on the serial bus. A
00F819  2               ; device must be listening or the status word will return a timeout. This routine
00F819  2               ; always buffers one character. So when a call to the UNLISTEN routine, LAB_FFAE,
00F819  2               ; is made to end the data transmission, the buffered character is sent with EOI
00F819  2               ; set. Then the UNLISTEN command is sent to the device.
00F819  2               
00F819  2               LAB_EEE4:
00F819  2  2C 12 03             BIT     IECDCF          ; test deferred character flag
00F81C  2  30 06                BMI     LAB_EEED        ; branch if defered character
00F81E  2               
00F81E  2  38                   SEC                     ; set carry
00F81F  2  6E 12 03             ROR     IECDCF          ; shift into deferred character flag
00F822  2  D0 05                BNE     LAB_EEF2        ; save byte and exit, branch always
00F824  2               
00F824  2               LAB_EEED:
00F824  2  48                   PHA                     ; save byte
00F825  2  20 68 F7             JSR     LAB_EE49        ; Tx byte on serial bus
00F828  2  68                   PLA                     ; restore byte
00F829  2               LAB_EEF2:
00F829  2  8D 13 03             STA     IECDC           ; save defered byte
00F82C  2  18                   CLC                     ; flag ok
00F82D  2  60                   RTS
00F82E  2               
00F82E  2               
00F82E  2               ;***********************************************************************************;
00F82E  2               ;
00F82E  2               ; command the serial bus to UNTALK
00F82E  2               
00F82E  2               ; this routine will transmit an UNTALK command on the serial bus. All devices
00F82E  2               ; previously set to TALK will stop sending data when this command is received.
00F82E  2               
00F82E  2               LAB_EEF6:
00F82E  2  20 CD F8             JSR     LAB_EF8D        ; set serial clock low
00F831  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00F834  2  09 80                ORA     #$80            ; set serial ATN low
00F836  2  8D 1F FE             STA     via1ora         ; set VIA 1 DRA, no handshake
00F839  2               
00F839  2  A9 5F                LDA     #$5F            ; set the UNTALK command
00F83B  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_3FA9
00F83C  2               
00F83C  2               
00F83C  2               ;***********************************************************************************;
00F83C  2               ;
00F83C  2               ; command the serial bus to UNLISTEN
00F83C  2               
00F83C  2               ; this routine commands all devices on the serial bus to stop receiving data from
00F83C  2               ; the computer. Calling this routine results in an UNLISTEN command being transmitted
00F83C  2               ; on the serial bus. Only devices previously commanded to listen will be affected.
00F83C  2               
00F83C  2               ; This routine is normally used after the computer is finished sending data to
00F83C  2               ; external devices. Sending the UNLISTEN will command the listening devices to get
00F83C  2               ; off the serial bus so it can be used for other purposes.
00F83C  2               
00F83C  2               LAB_EF04:
00F83C  2  A9 3F                LDA     #$3F            ; set the UNLISTEN command
00F83E  2  20 36 F7             JSR     LAB_EE1C        ; send control character
00F841  2               
00F841  2               ; ATN high, delay, clock high then data high
00F841  2               
00F841  2               LAB_EF09:
00F841  2  20 F2 F7             JSR     LAB_EEC5        ; set serial ATN high
00F844  2               
00F844  2               ; 1ms delay, clock high then data high
00F844  2               
00F844  2               LAB_EF0C:
00F844  2  8A                   TXA                     ; save device number
00F845  2  A2 0B                LDX     #$0B            ; short delay
00F847  2               LAB_EF0F:
00F847  2  CA                   DEX                     ; decrement count
00F848  2  D0 FD                BNE     LAB_EF0F        ; loop if not all done
00F84A  2               
00F84A  2  AA                   TAX                     ; restore device number
00F84B  2  20 C4 F8             JSR     LAB_EF84        ; set serial clock high
00F84E  2  4C 12 F7             JMP     LAB_E4A0        ; set serial data out high and return
00F851  2               
00F851  2               
00F851  2               ;***********************************************************************************;
00F851  2               ;
00F851  2               ; input a byte from the serial bus
00F851  2               
00F851  2               ; this routine reads a byte of data from the serial bus using full handshaking. the
00F851  2               ; data is returned in the accumulator. before using this routine the TALK routine,
00F851  2               ; LAB_FFB4, must have been called first to command the device on the serial bus to
00F851  2               ; send data on the bus. if the input device needs a secondary command it must be sent
00F851  2               ; by using the TKSA routine, LAB_FF96, before calling this routine.
00F851  2               
00F851  2               ; errors are returned in the status word which can be read by calling the READST
00F851  2               ; routine, LAB_FFB7.
00F851  2               
00F851  2               LAB_EF19:
00F851  2  78                   SEI                     ; disable interrupts
00F852  2  A9 00                LDA     #$00            ; clear A
00F854  2  8D 15 03             STA     IECBTC          ; clear serial bus bit count
00F857  2  20 C4 F8             JSR     LAB_EF84        ; set serial clock high
00F85A  2               LAB_EF21:
00F85A  2  20 24 F7             JSR     LAB_E4B2        ; get serial clock status
00F85D  2  90 FB                BCC     LAB_EF21        ; loop while clock low
00F85F  2               
00F85F  2  20 12 F7             JSR     LAB_E4A0        ; set serial data out high
00F862  2               LAB_EF29:
00F862  2  A9 10                LDA     #$10            ; set timeout count high byte (MHZ DEPENDENT)
00F864  2  8D 29 FE             STA     via2t2ch        ; set VIA 2 T2C_h
00F867  2               LAB_EF2E:
00F867  2  AD 2D FE             LDA     via2ifr         ; get VIA 2 IFR
00F86A  2  29 20                AND     #$20            ; mask T2 interrupt
00F86C  2  D0 07                BNE     LAB_EF3C        ; branch if T2 interrupt
00F86E  2               
00F86E  2  20 24 F7             JSR     LAB_E4B2        ; get serial clock status
00F871  2  B0 F4                BCS     LAB_EF2E        ; loop if clock high
00F873  2               
00F873  2  90 1A                BCC     LAB_EF54        ; else go se 8 bits to do, branch always
00F875  2               
00F875  2               ; T2 timed out
00F875  2               LAB_EF3C:
00F875  2  AD 15 03             LDA     IECBTC          ; get serial bus bit count
00F878  2  F0 05                BEQ     LAB_EF45        ; if not already EOI then go flag EOI
00F87A  2               
00F87A  2  A9 02                LDA     #$02            ; error $02, read timeour
00F87C  2  4C E5 F7             JMP     LAB_EEB9        ; set serial status and exit
00F87F  2               
00F87F  2               LAB_EF45:
00F87F  2  20 1B F7             JSR     LAB_E4A9        ; set serial data out low
00F882  2  20 44 F8             JSR     LAB_EF0C        ; 1ms delay, clock high then data high
00F885  2  A9 40                LDA     #$40            ; set EOI
00F887  2  20 E3 F8             JSR     LAB_FE6A        ; OR into serial status byte
00F88A  2  EE 15 03             INC     IECBTC          ; increment serial bus bit count, do error on next timeout
00F88D  2  D0 D3                BNE     LAB_EF29        ; go try again
00F88F  2               
00F88F  2               LAB_EF54:
00F88F  2  A9 08                LDA     #$08            ; 8 bits to do
00F891  2  8D 15 03             STA     IECBTC          ; set serial bus bit count
00F894  2               LAB_EF58:
00F894  2               
00F894  2               ; STICKS HERE IF NO DATA TO READ
00F894  2               
00F894  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00F897  2  CD 1F FE             CMP     via1ora         ; compare with self
00F89A  2  D0 F8                BNE     LAB_EF58        ; loop if changing
00F89C  2               ; OR HERE?
00F89C  2  4A                   LSR                     ; serial clock into carry
00F89D  2  90 F5                BCC     LAB_EF58        ; loop while serial clock low
00F89F  2               
00F89F  2  4A                   LSR                     ; serial data into carry
00F8A0  2  6E 16 03             ROR     IECCYC          ; shift data bit into receive byte
00F8A3  2               LAB_EF66:
00F8A3  2               
00F8A3  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00F8A6  2  CD 1F FE             CMP     via1ora         ; compare with self
00F8A9  2  D0 F8                BNE     LAB_EF66        ; loop if changing
00F8AB  2               
00F8AB  2  4A                   LSR                     ; serial clock into carry
00F8AC  2  B0 F5                BCS     LAB_EF66        ; loop while serial clock high
00F8AE  2               
00F8AE  2  CE 15 03             DEC     IECBTC          ; decrement serial bus bit count
00F8B1  2  D0 E1                BNE     LAB_EF58        ; loop if not all done
00F8B3  2               
00F8B3  2  20 1B F7             JSR     LAB_E4A9        ; set serial data out low
00F8B6  2  AD 17 03             LDA     IECSTW          ; get serial status byte
00F8B9  2  F0 03                BEQ     LAB_EF7F        ; branch if no error
00F8BB  2               
00F8BB  2  20 44 F8             JSR     LAB_EF0C        ; 1ms delay, clock high then data high
00F8BE  2               LAB_EF7F:
00F8BE  2  AD 16 03             LDA     IECCYC          ; get receive byte
00F8C1  2  58                   CLI                     ; enable interrupts
00F8C2  2  18                   CLC
00F8C3  2  60                   RTS
00F8C4  2               
00F8C4  2               
00F8C4  2               ;***********************************************************************************;
00F8C4  2               ;
00F8C4  2               ; set serial clock high
00F8C4  2               
00F8C4  2               LAB_EF84:
00F8C4  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00F8C7  2  29 FD                AND     #$FD            ; set CA2 low, serial clock out high
00F8C9  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00F8CC  2  60                   RTS
00F8CD  2               
00F8CD  2               
00F8CD  2               ;***********************************************************************************;
00F8CD  2               ;
00F8CD  2               ; set serial clock low
00F8CD  2               
00F8CD  2               LAB_EF8D:
00F8CD  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00F8D0  2  09 02                ORA     #$02            ; set CA2 high, serial clock out low
00F8D2  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00F8D5  2  60                   RTS
00F8D6  2               
00F8D6  2               
00F8D6  2               ;***********************************************************************************;
00F8D6  2               ;
00F8D6  2               ; 1ms delay
00F8D6  2               
00F8D6  2               LAB_EF96:
00F8D6  2  A9 40                LDA     #$40            ; set for 1024 cycles (MHZ)
00F8D8  2  8D 29 FE             STA     via2t2ch        ; set VIA 2 T2C_h
00F8DB  2               LAB_EF9B:
00F8DB  2  AD 2D FE             LDA     via2ifr         ; get VIA 2 IFR
00F8DE  2  29 20                AND     #$20            ; mask T2 interrupt
00F8E0  2  F0 F9                BEQ     LAB_EF9B        ; loop until T2 interrupt
00F8E2  2               
00F8E2  2  60                   RTS
00F8E3  2               
00F8E3  2               ; OR into serial status byte
00F8E3  2               
00F8E3  2               LAB_FE6A:
00F8E3  2  0D 17 03             ORA     IECSTW          ; OR with serial status byte
00F8E6  2  8D 17 03             STA     IECSTW          ; save serial status byte
00F8E9  2  60                   RTS
00F8EA  2               
00F8EA  2               
00F8EA  2               ;***********************************************************************************;
00F8EA  2               ;
00F8EA  2               ; load RAM from a device
00F8EA  2               
00F8EA  2               ; this routine will load data bytes from any input device directly into the memory
00F8EA  2               ; of the computer.
00F8EA  2               ; If the input device was OPENed with a secondary address of 0 the header information from
00F8EA  2               ; device will be ignored. In this case Location LOADBUF must contain the starting address for the
00F8EA  2               ; load. LOADBANK must also be specified with the appropriate bank number.  If the device was addressed with a secondary address of 1 or 2 the data will
00F8EA  2               ; load into memory starting at the location specified by the header. This routine
00F8EA  2               ; returns the address of the highest RAM location which was loaded.
00F8EA  2               
00F8EA  2               ; Before this routine can be called,
00F8EA  2               ;		the SETLFS
00F8EA  2               ;		LAB_FFBA(set logical, first and second addresses)
00F8EA  2               ;		SETNAM
00F8EA  2               ;		LAB_FFBD(clear filename)
00F8EA  2               ; 	routines must be called.
00F8EA  2               LOADTORAM:
00F8EA  2               LAB_F549:
00F8EA  2  A9 00                LDA     #$00            ; clear A
00F8EC  2  8D 17 03             STA     IECSTW          ; clear serial status byte
00F8EF  2  AC 18 03             LDY     IECFNLN         ; get file name length
00F8F2  2  D0 03                BNE     LAB_F563        ; branch if not null name
00F8F4  2  4C 00 FA             JMP     LAB_F793        ; else do missing file name error and return
00F8F7  2               LAB_F563:
00F8F7  2  20 1D FA             JSR     LAB_E4BC        ; get seconday address and print "Searching..."
00F8FA  2  A9 60                LDA     #$60            ;.
00F8FC  2  8D 19 03             STA     IECSECAD        ; save the secondary address
00F8FF  2  20 23 FA             JSR     LAB_F495        ; send secondary address and filename
00F902  2  AD 1C 03             LDA     IECDEVN         ; get device number
00F905  2  20 2E F7             JSR     LAB_EE14        ; command a serial bus device to TALK
00F908  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00F90B  2  20 FB F7             JSR     LAB_EECE        ; send secondary address after TALK
00F90E  2  20 51 F8             JSR     LAB_EF19        ; input a byte from the serial bus
00F911  2               
00F911  2  8D 1A 03             STA     IECBUFFL        ; save program start address low byte
00F914  2  AD 17 03             LDA     IECSTW          ; get serial status byte
00F917  2  4A                   LSR                     ; shift time out read ..
00F918  2  4A                   LSR                     ; .. into carry bit
00F919  2  B0 4A                BCS     LAB_F5C7        ; if timed out go do file not found error and return
00F91B  2  20 51 F8             JSR     LAB_EF19        ; input a byte from the serial bus
00F91E  2  8D 1B 03             STA     IECBUFFH        ; save program start address high byte
00F921  2  20 6C FA             JSR     LAB_E4C1        ; set LOAD address if secondary address = 0
00F924  2               LAB_F58A:
00F924  2  A9 FD                LDA     #$FD            ; mask xxxx xx0x, clear time out read bit
00F926  2  2D 17 03             AND     IECSTW          ; mask serial status byte
00F929  2  8D 17 03             STA     IECSTW          ; set serial status byte
00F92C  2  20 ED FB             JSR     LAB_FFE1        ; scan stop key, return Zb = 1 = [STOP]
00F92F  2  D0 03                BNE     LAB_F598        ; branch if not [STOP]
00F931  2  4C C2 F9             JMP     LAB_F6CB        ; else close the serial bus device and flag stop
00F934  2               
00F934  2               LAB_F598:
00F934  2  20 51 F8             JSR     LAB_EF19        ; input a byte from the serial bus
00F937  2  AA                   TAX                     ; copy byte
00F938  2  AD 17 03             LDA     IECSTW          ; get serial status byte
00F93B  2  4A                   LSR                     ; shift time out read ..
00F93C  2  4A                   LSR                     ; .. into carry bit
00F93D  2  B0 E5                BCS     LAB_F58A        ; if timed out go ??
00F93F  2               
00F93F  2  AD 24 03             LDA     LOADBANK        ; set load bank
00F942  2  8B                   PHB
00F943  2  48                   PHA
00F944  2  8A                   TXA                     ; copy received byte back
00F945  2  C2 10                INDEX16
00F947  2  AE 22 03             LDX     LOADBUFL
00F94A  2  AB                   PLB
00F94B  2  95 00                STA     0,x             ; save byte to memory
00F94D  2  AB                   PLB                     ; restore bank
00F94E  2  E2 10                INDEX8
00F950  2               
00F950  2               LAB_F5B5:
00F950  2  EE 22 03             INC     LOADBUFL        ; increment save pointer low byte
00F953  2  D0 03                BNE     LAB_F5BB        ; if no rollover skip the high byte increment
00F955  2               
00F955  2  EE 23 03             INC     LOADBUFH        ; else increment save pointer high byte
00F958  2               LAB_F5BB:
00F958  2  2C 17 03             BIT     IECSTW          ; test serial status byte
00F95B  2  50 C7                BVC     LAB_F58A        ; loop if not end of file
00F95D  2               
00F95D  2  20 2E F8             JSR     LAB_EEF6        ; command the serial bus to UNTALK
00F960  2  20 D1 F9             JSR     LAB_F6DA        ; close serial bus device
00F963  2  90 03                BCC     LAB_F641        ; if ?? go flag ok and exit
00F965  2               
00F965  2               LAB_F5C7:
00F965  2  4C F4 F9             JMP     LAB_F787        ; do file not found error and return
00F968  2               
00F968  2               LAB_F641:
00F968  2  18                   CLC                     ; flag ok
00F969  2  AE 1A 03             LDX     IECBUFFL        ; get the LOAD end pointer low byte
00F96C  2  AC 1B 03             LDY     IECBUFFH        ; get the LOAD end pointer high byte
00F96F  2               LAB_F646:
00F96F  2  60                   RTS
00F970  2               
00F970  2               ;***********************************************************************************;
00F970  2               ;
00F970  2               ; save RAM to a device
00F970  2               ; this routine saves a section of memory.
00F970  2               ; Start Address in IECSTRT
00F970  2               ; End Address in LOADBUF
00F970  2               ; LOADBANK must also be specified with the appropriate bank number.
00F970  2               
00F970  2               ; Before this routine can be called,
00F970  2               ;		the SETLFS
00F970  2               ;		LAB_FFBA(set logical, first and second addresses)
00F970  2               ;		SETNAM
00F970  2               ;		LAB_FFBD(clear filename)
00F970  2               ; 	routines must be called.
00F970  2               ;***********************************************************************************;
00F970  2               ;
00F970  2               ; save RAM to device, A = index to start address, XY = end address low/high
00F970  2               
00F970  2               IECSAVERAM:
00F970  2               ;***********************************************************************************;
00F970  2               ;
00F970  2               ; save
00F970  2               
00F970  2               LAB_F685:
00F970  2  A9 00                LDA     #$00            ; clear A
00F972  2  8D 17 03             STA     IECSTW          ; clear serial status byte
00F975  2  A9 61                LDA     #$61            ; set secondary address to $01
00F977  2               ; when a secondary address is to be sent to a device on
00F977  2               ; the serial bus the address must first be ORed with $60
00F977  2  8D 19 03             STA     IECSECAD        ; save secondary address
00F97A  2  AC 18 03             LDY     IECFNLN         ; get file name length
00F97D  2  D0 03                BNE     LAB_F69D        ; branch if filename not null
00F97F  2  4C 00 FA             JMP     LAB_F793        ; else do missing file name error and return
00F982  2               
00F982  2               LAB_F69D:
00F982  2  20 23 FA             JSR     LAB_F495        ; send secondary address and filename
00F985  2  20 7E FA             JSR     LAB_F728        ; print saving [file name]
00F988  2  AD 1C 03             LDA     IECDEVN         ; get device number
00F98B  2  20 31 F7             JSR     LAB_EE17        ; command devices on the serial bus to LISTEN
00F98E  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00F991  2  20 EC F7             JSR     LAB_EEC0        ; send secondary address after LISTEN
00F994  2  A0 00                LDY     #$00            ; clear index
00F996  2  20 8C FA             JSR     LAB_FBD2        ; copy I/O start address to buffer address
00F999  2  AD 1A 03             LDA     IECBUFFL        ; get buffer address low byte
00F99C  2  20 19 F8             JSR     LAB_EEE4        ; output a byte to the serial bus
00F99F  2  AD 1B 03             LDA     IECBUFFH        ; get buffer address high byte
00F9A2  2  20 19 F8             JSR     LAB_EEE4        ; output a byte to the serial bus
00F9A5  2               LAB_F6BC:
00F9A5  2               
00F9A5  2  20 99 FA             JSR     LAB_FD11        ; check read/write pointer, return Cb = 1 if pointer >= end
00F9A8  2  B0 24                BCS     LAB_F6D7        ; go do UNLISTEN if at end
00F9AA  2               
00F9AA  2  AD 24 03             LDA     LOADBANK        ; set load bank
00F9AD  2  8B                   PHB
00F9AE  2  48                   PHA
00F9AF  2  C2 10                INDEX16
00F9B1  2  AE 1A 03             LDX     IECBUFFL
00F9B4  2  AB                   PLB
00F9B5  2  B5 00                LDA     0,x             ; load byte from memory
00F9B7  2  AB                   PLB                     ; restore bank
00F9B8  2  E2 10                INDEX8
00F9BA  2               
00F9BA  2  20 19 F8             JSR     LAB_EEE4        ; output a byte to the serial bus
00F9BD  2  20 ED FB             JSR     LAB_FFE1        ; scan stop key
00F9C0  2  D0 07                BNE     LAB_F6D2        ; if stop not pressed go increment pointer and loop for next
00F9C2  2               
00F9C2  2               ; else ..
00F9C2  2               
00F9C2  2               ; close the serial bus device and flag stop
00F9C2  2               
00F9C2  2               LAB_F6CB:
00F9C2  2  20 D1 F9             JSR     LAB_F6DA        ; close serial bus device
00F9C5  2  A9 00                LDA     #$00            ;.
00F9C7  2  38                   SEC                     ; flag stop
00F9C8  2  60                   RTS
00F9C9  2               
00F9C9  2               LAB_F6D2:
00F9C9  2  20 A7 FA             JSR     LAB_FD1B        ; increment read/write pointer
00F9CC  2  D0 D7                BNE     LAB_F6BC        ; loop, branch always
00F9CE  2               
00F9CE  2               ;***********************************************************************************;
00F9CE  2               ;
00F9CE  2               ; ??
00F9CE  2               
00F9CE  2               LAB_F6D7:
00F9CE  2  20 3C F8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00F9D1  2               
00F9D1  2               ; close the serial bus device
00F9D1  2               
00F9D1  2               LAB_F6DA:
00F9D1  2  2C 19 03             BIT     IECSECAD        ; test the secondary address
00F9D4  2  30 13                BMI     LAB_F6EF        ; if already closed just exit
00F9D6  2               
00F9D6  2  AD 1C 03             LDA     IECDEVN         ; get the device number
00F9D9  2  20 31 F7             JSR     LAB_EE17        ; command devices on the serial bus to LISTEN
00F9DC  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00F9DF  2  29 EF                AND     #$EF            ; mask the channel number
00F9E1  2  09 E0                ORA     #$E0            ; OR with the CLOSE command
00F9E3  2  20 EC F7             JSR     LAB_EEC0        ; send secondary address after LISTEN
00F9E6  2  20 3C F8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00F9E9  2               LAB_F6EF:
00F9E9  2  18                   CLC                     ; flag ok
00F9EA  2  60                   RTS
00F9EB  2               
00F9EB  2               ;***********************************************************************************;
00F9EB  2               ;
00F9EB  2               ; file error messages
00F9EB  2               LAB_F77E:
00F9EB  2  A9 01                LDA     #$01            ; too many files
00F9ED  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_02A9
00F9EE  2               LAB_F781:
00F9EE  2  A9 02                LDA     #$02            ; file already open
00F9F0  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_03A9
00F9F1  2               LAB_F784:
00F9F1  2  A9 03                LDA     #$03            ; file not open
00F9F3  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_04A9
00F9F4  2               LAB_F787:
00F9F4  2  A9 04                LDA     #$04            ; file not found
00F9F6  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_05A9
00F9F7  2               LAB_F78A:
00F9F7  2  A9 05                LDA     #$05            ; device not present
00F9F9  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_06A9
00F9FA  2               LAB_F78D:
00F9FA  2  A9 06                LDA     #$06            ; not input file
00F9FC  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_07A9
00F9FD  2               LAB_F790:
00F9FD  2  A9 07                LDA     #$07            ; not output file
00F9FF  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_08A9
00FA00  2               LAB_F793:
00FA00  2  A9 08                LDA     #$08            ; missing file name
00FA02  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_09A9
00FA03  2               LAB_F796:
00FA03  2  A9 09                LDA     #$09            ; illegal device number
00FA05  2               
00FA05  2  48                   PHA                     ; save error #
00FA06  2  20 B0 FA             JSR     LAB_FFCC        ; close input and output channels
00FA09  2  A0 00                LDY     #LAB_F174-LAB_F174
00FA0B  2               ; index to "I/O ERROR #"
00FA0B  2  2C 1F 03             BIT     IECMSGM         ; test message mode flag
00FA0E  2  50 0A                BVC     LAB_F7AC        ; exit if kernal messages off
00FA10  2               
00FA10  2  20 0A FB             JSR     LAB_F1E6        ; display kernel I/O message
00FA13  2  68                   PLA                     ; restore error #
00FA14  2  48                   PHA                     ; copy error #
00FA15  2  09 30                ORA     #'0'            ; convert to ASCII
00FA17  2  20 18 F2             JSR     OUTCH           ; output character to channel
00FA1A  2               LAB_F7AC:
00FA1A  2  68                   PLA                     ; pull error number
00FA1B  2  38                   SEC                     ; flag error
00FA1C  2  60                   RTS
00FA1D  2               
00FA1D  2               
00FA1D  2               ;***********************************************************************************;
00FA1D  2               ;
00FA1D  2               ; get seconday address and print "Searching..."
00FA1D  2               
00FA1D  2               LAB_E4BC:
00FA1D  2  AE 19 03             LDX     IECSECAD        ; get secondary address
00FA20  2  4C 19 FB             JMP     LAB_F647        ; print "Searching..." and return
00FA23  2               
00FA23  2               
00FA23  2               
00FA23  2               ;***********************************************************************************;
00FA23  2               ;
00FA23  2               ; send secondary address and filename
00FA23  2               
00FA23  2               LAB_F495:
00FA23  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00FA26  2  30 42                BMI     LAB_F4C5        ; ok exit if -ve
00FA28  2               
00FA28  2  AC 18 03             LDY     IECFNLN         ; get file name length
00FA2B  2  F0 3D                BEQ     LAB_F4C5        ; ok exit if null
00FA2D  2               
00FA2D  2  AD 1C 03             LDA     IECDEVN         ; get device number
00FA30  2  20 31 F7             JSR     LAB_EE17        ; command devices on the serial bus to LISTEN
00FA33  2               
00FA33  2  AD 19 03             LDA     IECSECAD        ; get the secondary address
00FA36  2  09 F0                ORA     #$F0            ; OR with the OPEN command
00FA38  2  20 EC F7             JSR     LAB_EEC0        ; send secondary address after LISTEN
00FA3B  2  AD 17 03             LDA     IECSTW          ; get serial status byte
00FA3E  2  10 05                BPL     LAB_F4B2        ; branch if device present
00FA40  2  68                   PLA                     ; else dump calling address low byte
00FA41  2  68                   PLA                     ; dump calling address high byte
00FA42  2  4C F7 F9             JMP     LAB_F78A        ; do device not present error and return
00FA45  2               LAB_F4B2:
00FA45  2  AD 18 03             LDA     IECFNLN         ; get file name length
00FA48  2  F0 1D                BEQ     LAB_F4C2        ; branch if null name
00FA4A  2  A8                   TAY
00FA4B  2  DA                   PHX
00FA4C  2  C2 10                INDEX16
00FA4E  2  AE 20 03             LDX     IECFNPL
00FA51  2  DA                   PHX
00FA52  2               LAB_F4B8:
00FA52  2  C2 10                INDEX16
00FA54  2  FA                   PLX
00FA55  2  B5 00                LDA     0,X             ; get file name byte
00FA57  2  E8                   INX
00FA58  2  DA                   PHX
00FA59  2  E2 10                INDEX8
00FA5B  2  20 19 F8             JSR     LAB_EEE4        ; output a byte to the serial bus
00FA5E  2  88                   DEY
00FA5F  2  D0 F1                BNE     LAB_F4B8        ; loop if not all done
00FA61  2  C2 10                INDEX16
00FA63  2  FA                   PLX
00FA64  2  E2 10                INDEX8
00FA66  2  FA                   PLX
00FA67  2               LAB_F4C2:
00FA67  2  20 3C F8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00FA6A  2               LAB_F4C5:
00FA6A  2  18                   CLC                     ; flag ok
00FA6B  2  60                   RTS
00FA6C  2               
00FA6C  2               ;***********************************************************************************;
00FA6C  2               ;
00FA6C  2               ; set LOAD address if secondary address = 0
00FA6C  2               
00FA6C  2               LAB_E4C1:
00FA6C  2  8A                   TXA                     ; copy secondary address
00FA6D  2  D0 0C                BNE     LAB_E4CC        ; load location not set in LOAD call, so
00FA6F  2               ; continue with load
00FA6F  2  AD 1B 03             LDA     IECBUFFH        ; get load address high byte
00FA72  2  8D 23 03             STA     LOADBUFH        ; save program start address high byte
00FA75  2  AD 1A 03             LDA     IECBUFFL        ; get load address low byte
00FA78  2  8D 22 03             STA     LOADBUFL        ; save program start address low byte
00FA7B  2               
00FA7B  2               LAB_E4CC:
00FA7B  2  4C 4F FB             JMP     LAB_F66A        ; display "LOADING" or "VERIFYING" and return
00FA7E  2               
00FA7E  2               
00FA7E  2               ;***********************************************************************************;
00FA7E  2               ;
00FA7E  2               ; print saving [file name]
00FA7E  2               
00FA7E  2               LAB_F728:
00FA7E  2  AD 1F 03             LDA     IECMSGM         ; get message mode flag
00FA81  2  10 08                BPL     LAB_F727        ; exit if control messages off
00FA83  2               
00FA83  2  A0 2A                LDY     #LAB_F1C5-LAB_F174
00FA85  2               ; index to "SAVING "
00FA85  2  20 0A FB             JSR     LAB_F1E6        ; display kernel I/O message
00FA88  2  4C 2D FB             JMP     LAB_F659        ; print file name and return
00FA8B  2               LAB_F727:
00FA8B  2  60                   RTS
00FA8C  2               
00FA8C  2               ;***********************************************************************************;
00FA8C  2               ;
00FA8C  2               ; copy I/O start address to buffer address
00FA8C  2               
00FA8C  2               LAB_FBD2:
00FA8C  2  AD 1E 03             LDA     IECSTRTH        ; get I/O start address high byte
00FA8F  2  8D 1B 03             STA     IECBUFFH        ; set buffer address high byte
00FA92  2  AD 1D 03             LDA     IECSTRTL        ; get I/O start address low byte
00FA95  2  8D 1A 03             STA     IECBUFFL        ; set buffer address low byte
00FA98  2  60                   RTS
00FA99  2               
00FA99  2               
00FA99  2               
00FA99  2               ;***********************************************************************************;
00FA99  2               ;
00FA99  2               ; check read/write pointer
00FA99  2               ; return Cb = 1 if pointer >= end
00FA99  2               
00FA99  2               LAB_FD11:
00FA99  2  38                   SEC                     ; set carry for subtract
00FA9A  2  AD 1A 03             LDA     IECBUFFL        ; get buffer address low byte
00FA9D  2  ED 22 03             SBC     LOADBUFL        ; subtract buffer end low byte
00FAA0  2  AD 1B 03             LDA     IECBUFFH        ; get buffer address high byte
00FAA3  2  ED 23 03             SBC     LOADBUFH        ; subtract buffer end high byte
00FAA6  2  60                   RTS
00FAA7  2               
00FAA7  2               ;***********************************************************************************;
00FAA7  2               ;
00FAA7  2               ; increment read/write pointer
00FAA7  2               
00FAA7  2               LAB_FD1B:
00FAA7  2  EE 1A 03             INC     IECBUFFL        ; increment buffer address low byte
00FAAA  2  D0 03                BNE     LAB_FD21        ; if no overflow skip the high byte increment
00FAAC  2               
00FAAC  2  EE 1B 03             INC     IECBUFFH        ; increment buffer address high byte
00FAAF  2               LAB_FD21:
00FAAF  2  60                   RTS
00FAB0  2               
00FAB0  2               ;***********************************************************************************;
00FAB0  2               ;
00FAB0  2               ; close input and output channels
00FAB0  2               
00FAB0  2               ; this routine is called to clear all open channels and restore the I/O channels to
00FAB0  2               ; their original default values. It is usually called after opening other I/O
00FAB0  2               ; channels and using them for input/output operations. The default input device is
00FAB0  2               ; 0, the keyboard. The default output device is 3, the screen.
00FAB0  2               
00FAB0  2               ; If one of the channels to be closed is to the serial port, an UNTALK signal is sent
00FAB0  2               ; first to clear the input channel or an UNLISTEN is sent to clear the output channel.
00FAB0  2               ; By not calling this routine and leaving listener(s) active on the serial bus,
00FAB0  2               ; several devices can receive the same data from the VIC at the same time. One way to
00FAB0  2               ; take advantage of this would be to command the printer to TALK and the disk to
00FAB0  2               ; LISTEN. This would allow direct printing of a disk file.
00FAB0  2               
00FAB0  2               LAB_FFCC:
00FAB0  2  20 3C F8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00FAB3  2               LAB_F3FC:
00FAB3  2  20 2E F8             JSR     LAB_EEF6        ; command the serial bus to UNTALK
00FAB6  2               LAB_F403:
00FAB6  2  60                   RTS
00FAB7  2               
00FAB7  2               ;***********************************************************************************;
00FAB7  2               ;
00FAB7  2               ; kernel I/O messages
00FAB7  2               
00FAB7  2               LAB_F174:
00FAB7  2  0A 0D 49 2F          .BYTE   $0A,$0D,"I/O ERROR #",0
00FABB  2  4F 20 45 52  
00FABF  2  52 4F 52 20  
00FAC5  2               LAB_F180:
00FAC5  2  0A 0D 53 45          .BYTE   $0A,$0D,"SEARCHING ",0
00FAC9  2  41 52 43 48  
00FACD  2  49 4E 47 20  
00FAD2  2               LAB_F18B:
00FAD2  2  46 4F 52 20          .BYTE   "FOR ",0
00FAD6  2  00           
00FAD7  2               LAB_F1BD:
00FAD7  2  0A 0D 4C 4F          .BYTE   $0A,$0D,"LOADING",0
00FADB  2  41 44 49 4E  
00FADF  2  47 00        
00FAE1  2               LAB_F1C5:
00FAE1  2  0A 0D 53 41          .BYTE   $0A,$0D,"SAVING ",0
00FAE5  2  56 49 4E 47  
00FAE9  2  20 00        
00FAEB  2               LAB_F1CD:
00FAEB  2  0A 0D 56 45          .BYTE   $0A,$0D,"VERIFYING",0
00FAEF  2  52 49 46 59  
00FAF3  2  49 4E 47 00  
00FAF7  2               LAB_F1D7:
00FAF7  2  0A 0D 46 4F          .BYTE   $0A,$0D,"FOUND ",0
00FAFB  2  55 4E 44 20  
00FAFF  2  00           
00FB00  2               LAB_F1DE:
00FB00  2  0A 0D 4F 4B          .BYTE   $0A,$0D,"OK",0
00FB04  2  00           
00FB05  2               
00FB05  2               
00FB05  2               ;***********************************************************************************;
00FB05  2               ;
00FB05  2               ; display control I/O message if in direct mode
00FB05  2               
00FB05  2               LAB_F1E2:
00FB05  2  2C 1F 03             BIT     IECMSGM         ; test message mode flag
00FB08  2  10 0D                BPL     LAB_F1F3        ; exit if control messages off
00FB0A  2               
00FB0A  2               ; display kernel I/O message
00FB0A  2               
00FB0A  2               LAB_F1E6:
00FB0A  2  B9 B7 FA             LDA     LAB_F174,Y      ; get byte from message table
00FB0D  2  F0 08                BEQ     LAB_F1F3        ; loop if not end of message
00FB0F  2  08                   PHP                     ; save status
00FB10  2  20 18 F2             JSR     OUTCH           ; output character to channel
00FB13  2  C8                   INY                     ; increment index
00FB14  2  28                   PLP                     ; restore status
00FB15  2  80 F3                BRA     LAB_F1E6        ; loop if not end of message
00FB17  2               
00FB17  2               LAB_F1F3:
00FB17  2  18                   CLC                     ;.
00FB18  2  60                   RTS
00FB19  2               
00FB19  2               ;***********************************************************************************;
00FB19  2               ;
00FB19  2               ; print "searching"
00FB19  2               
00FB19  2               LAB_F647:
00FB19  2  AD 1F 03             LDA     IECMSGM         ; get message mode flag
00FB1C  2  10 30                BPL     LAB_F669        ; exit if control messages off
00FB1E  2               
00FB1E  2  A0 0E                LDY     #LAB_F180-LAB_F174
00FB20  2               ; index to "SEARCHING "
00FB20  2  20 0A FB             JSR     LAB_F1E6        ; display kernel I/O message
00FB23  2  AD 18 03             LDA     IECFNLN         ; get file name length
00FB26  2  F0 26                BEQ     LAB_F669        ; exit if null name
00FB28  2               
00FB28  2  A0 1B                LDY     #LAB_F18B-LAB_F174
00FB2A  2               ; else index to "FOR "
00FB2A  2  20 0A FB             JSR     LAB_F1E6        ; display kernel I/O message
00FB2D  2               
00FB2D  2               ; print file name
00FB2D  2               
00FB2D  2               LAB_F659:
00FB2D  2  AC 18 03             LDY     IECFNLN         ; get file name length
00FB30  2  F0 1C                BEQ     LAB_F669        ; exit if null file name
00FB32  2               
00FB32  2  DA                   PHX
00FB33  2  C2 10                INDEX16
00FB35  2  AE 20 03             LDX     IECFNPL
00FB38  2  DA                   PHX
00FB39  2               LAB_F65F:
00FB39  2  C2 10                INDEX16
00FB3B  2  FA                   PLX
00FB3C  2  B5 00                LDA     0,X             ; get file name byte
00FB3E  2  E8                   INX
00FB3F  2  DA                   PHX
00FB40  2  E2 10                INDEX8
00FB42  2  20 18 F2             JSR     OUTCH           ; output character to channel
00FB45  2  88                   DEY
00FB46  2  D0 F1                BNE     LAB_F65F        ; loop if more to do
00FB48  2  C2 10                INDEX16
00FB4A  2  FA                   PLX
00FB4B  2  E2 10                INDEX8
00FB4D  2  FA                   PLX
00FB4E  2               LAB_F669:
00FB4E  2  60                   RTS
00FB4F  2               
00FB4F  2               ; display "LOADING" or "VERIFYING"
00FB4F  2               
00FB4F  2               LAB_F66A:
00FB4F  2  A0 20                LDY     #LAB_F1BD-LAB_F174
00FB51  2               ; point to "LOADING"
00FB51  2               LAB_F672:
00FB51  2  4C 05 FB             JMP     LAB_F1E2        ; display kernel I/O message if in direct mode and return
00FB54  2               
00FB54  2               LAB_FE49:
00FB54  2  8D 18 03             STA     IECFNLN         ; set file name length
00FB57  2  8E 20 03             STX     IECFNPL         ; set file name pointer low byte
00FB5A  2  8C 21 03             STY     IECFNPH         ; set file name pointer high byte
00FB5D  2  60                   RTS
00FB5E  2               
00FB5E  2               LAB_FE50:
00FB5E  2  8D 26 03             STA     IECLFN          ; SET LOGICAL FILE NUMBER
00FB61  2  8E 1C 03             STX     IECDEVN         ; set device number
00FB64  2  8C 19 03             STY     IECSECAD        ; set secondary address or command
00FB67  2  60                   RTS
00FB68  2               
00FB68  2               
00FB68  2               
00FB68  2               LAB_F160:
00FB68  2  48                   PHA                     ; save A
00FB69  2  AD 1E FE             LDA     via1ier         ; get VIA 1 IER
00FB6C  2  F0 0C                BEQ     LAB_F172        ; branch if no interrupts enabled. this branch will
00FB6E  2               ; never be taken as b7 of IER always reads as 1
00FB6E  2               ; according to the 6522 data sheet
00FB6E  2               LAB_F166:
00FB6E  2  AD 1E FE             LDA     via1ier         ; get VIA 1 IER
00FB71  2  29 60                AND     #$60            ; mask 0xx0 0000, T1 and T2 interrupts
00FB73  2  D0 F9                BNE     LAB_F166        ; loop if T1 or T2 active
00FB75  2               
00FB75  2  A9 10                LDA     #$10            ; disable CB1 interrupt
00FB77  2  8D 1E FE             STA     via1ier         ; set VIA 1 IER
00FB7A  2               LAB_F172:
00FB7A  2  68                   PLA                     ; restore A
00FB7B  2  60                   RTS
00FB7C  2               
00FB7C  2               
00FB7C  2               ;***********************************************************************************;
00FB7C  2               ;
00FB7C  2               ; initialize I/O registers
00FB7C  2               
00FB7C  2               INITIEC:
00FB7C  2  A9 7F                LDA     #$7F            ; disable all interrupts
00FB7E  2  8D 1E FE             STA     via1ier         ; on VIA 1 IER ..
00FB81  2  8D 2E FE             STA     via2ier         ; .. and VIA 2 IER
00FB84  2               
00FB84  2  A9 40                LDA     #$40            ; set T1 free run, T2 clock �2,
00FB86  2               ; SR disabled, latches disabled
00FB86  2  8D 2B FE             STA     via2acr         ; set VIA 2 ACR
00FB89  2               
00FB89  2  A9 40                LDA     #$40            ; set T1 free run, T2 clock �2,
00FB8B  2               ; SR disabled, latches disabled
00FB8B  2  8D 1B FE             STA     via1acr         ; set VIA 1 ACR
00FB8E  2               
00FB8E  2  A9 FE                LDA     #$FE            ; CB2 high, RS232 Tx
00FB90  2               ; CB1 +ve edge,
00FB90  2               ; CA2 high, tape motor off
00FB90  2               ; CA1 -ve edge
00FB90  2  8D 1C FE             STA     via1pcr         ; set VIA 1 PCR
00FB93  2               
00FB93  2  A9 DE                LDA     #$DE            ; CB2 low, serial data out high
00FB95  2               ; CB1 +ve edge,
00FB95  2               ; CA2 high, serial clock out low
00FB95  2               ; CA1 -ve edge
00FB95  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00FB98  2               
00FB98  2  A2 00                LDX     #$00            ; all inputs, RS232 interface or parallel user port
00FB9A  2  8E 12 FE             STX     via1ddrb        ; set VIA 1 DDRB
00FB9D  2               
00FB9D  2  A2 FF                LDX     #$FF            ; all outputs, keyboard column
00FB9F  2  8E 22 FE             STX     via2ddrb        ; set VIA 2 DDRB
00FBA2  2               
00FBA2  2  A2 00                LDX     #$00            ; all inputs, keyboard row
00FBA4  2  8E 23 FE             STX     via2ddra        ; set VIA 2 DDRA
00FBA7  2               
00FBA7  2  A2 C0                LDX     #$C0            ; OIII IIII, ATN out, light pen, joystick, serial data
00FBA9  2               ; in, serial clk in
00FBA9  2  8E 13 FE             STX     via1ddra        ; set VIA 1 DDRA
00FBAC  2               
00FBAC  2  A2 00                LDX     #$00            ; ATN out low, set ATN high
00FBAE  2  8E 1F FE             STX     via1ora         ; set VIA 1 DRA, no handshake
00FBB1  2               
00FBB1  2  A2 40                LDX     #$40            ; assert CS on DS1302
00FBB3  2  8E 1F FE             STX     via1ora         ; set VIA 1 DRA, no handshake
00FBB6  2               
00FBB6  2  20 C4 F8             JSR     LAB_EF84        ; set serial clock high
00FBB9  2  20 CD F8             JSR     LAB_EF8D        ; set serial clock low
00FBBC  2               
00FBBC  2               
00FBBC  2               ;***********************************************************************************;
00FBBC  2               ;
00FBBC  2               ; set 60Hz and enable timer
00FBBC  2  A9 C0                LDA     #$C0            ; enable T1 interrupt
00FBBE  2  8D 2E FE             STA     via2ier         ; set VIA 2 IER
00FBC1  2               ;	LDA	#$26			; set timer constant low byte [PAL]
00FBC1  2               ;	LDA	#$89			; set timer constant low byte [NTSC]
00FBC1  2  A9 FF                LDA     #$FF            ; set timer constant low byte [4MHz]
00FBC3  2  8D 24 FE             STA     via2t1cl        ; set VIA 2 T1C_l
00FBC6  2               ;	LDA	#$48			; set timer constant high byte [PAL]
00FBC6  2               ;	LDA	#$42			; set timer constant high byte [NTSC]
00FBC6  2  A9 FF                LDA     #$FF            ; set timer constant high byte [4MHz]
00FBC8  2  8D 25 FE             STA     via2t1ch        ; set VIA 2 T1C_h
00FBCB  2               
00FBCB  2  A9 00                LDA     #$00
00FBCD  2  8D 14 03             STA     IECBCI
00FBD0  2  8D 25 03             STA     IECOPENF
00FBD3  2  60                   RTS
00FBD4  2               
00FBD4  2               
00FBD4  2               IEC_DELAY:
00FBD4  2  48                   PHA
00FBD5  2  68                   PLA
00FBD6  2  48                   PHA
00FBD7  2  68                   PLA
00FBD8  2  48                   PHA
00FBD9  2  68                   PLA
00FBDA  2  48                   PHA
00FBDB  2  68                   PLA
00FBDC  2               
00FBDC  2  48                   PHA
00FBDD  2  68                   PLA
00FBDE  2  48                   PHA
00FBDF  2  68                   PLA
00FBE0  2  48                   PHA
00FBE1  2  68                   PLA
00FBE2  2  48                   PHA
00FBE3  2  68                   PLA
00FBE4  2  48                   PHA
00FBE5  2  68                   PLA
00FBE6  2  48                   PHA
00FBE7  2  68                   PLA
00FBE8  2  48                   PHA
00FBE9  2  68                   PLA
00FBEA  2  48                   PHA
00FBEB  2  68                   PLA
00FBEC  2  60                   RTS
00FBED  2               
00FBED  2               LAB_FFE1:
00FBED  2  20 74 FF             JSR     INPVEC
00FBF0  2  C9 03                CMP     #$03
00FBF2  2  60                   RTS
00FBF3  2               
00FBF3  2               
00FBF3  2               ;***********************************************************************************;
00FBF3  2               ;
00FBF3  2               ; close a specified logical file
00FBF3  2               
00FBF3  2               ; this routine is used to close a logical file after all I/O operations have been
00FBF3  2               ; completed on that file. This routine is called after the accumulator is loaded
00FBF3  2               ; with the logical file number to be closed, the same number used when the file was
00FBF3  2               ; opened using the OPEN routine.
00FBF3  2               
00FBF3  2               LAB_F34A:
00FBF3  2  20 C0 FC             JSR     LAB_F3D4        ; find file A
00FBF6  2  F0 02                BEQ     LAB_F351        ; if the file is found go close it
00FBF8  2               
00FBF8  2  18                   CLC                     ; else thr file was closed so just flag ok
00FBF9  2  60                   RTS
00FBFA  2               
00FBFA  2               ; found the file so close it
00FBFA  2               LAB_F351:
00FBFA  2  20 CC FC             JSR     LAB_F3DF        ; set file details from table,X
00FBFD  2  8A                   TXA                     ; copy file index to A
00FBFE  2  48                   PHA                     ; save file index
00FBFF  2  AD 1C 03             LDA     IECDEVN         ; get device number
00FC02  2               ; do serial bus device file close
00FC02  2               
00FC02  2               LAB_F3AE:
00FC02  2  20 D1 F9             JSR     LAB_F6DA        ; close serial bus device
00FC05  2               LAB_F3B1:
00FC05  2  68                   PLA                     ; restore file index
00FC06  2               ;
00FC06  2               ; close file index X
00FC06  2               
00FC06  2               LAB_F3B2:
00FC06  2  AA                   TAX                     ; copy index to file to close
00FC07  2  CE 25 03             DEC     IECOPENF        ; decrement open file count
00FC0A  2  EC 25 03             CPX     IECOPENF        ; compare index with open file count
00FC0D  2  F0 15                BEQ     LAB_F3CD        ; exit if equal, last entry was closing file
00FC0F  2               
00FC0F  2               ; else entry was not last in list so copy last table entry
00FC0F  2               ; file details over the details of the closing one
00FC0F  2  AC 25 03             LDY     IECOPENF        ; get open file count as index
00FC12  2  B9 B0 03             LDA     PTRLFT,Y        ; get last+1 logical file number from logical file table
00FC15  2  9D B0 03             STA     PTRLFT,X        ; save logical file number over closed file
00FC18  2  B9 BA 03             LDA     PTRDNT,Y        ; get last+1 device number from device number table
00FC1B  2  9D BA 03             STA     PTRDNT,X        ; save device number over closed file
00FC1E  2  B9 C4 03             LDA     PTRSAT,Y        ; get last+1 secondary address from secondary address table
00FC21  2  9D C4 03             STA     PTRSAT,X        ; save secondary address over closed file
00FC24  2               LAB_F3CD:
00FC24  2  18                   CLC                     ;.
00FC25  2               LAB_F3CE:
00FC25  2  60                   RTS
00FC26  2               
00FC26  2               ;***********************************************************************************;
00FC26  2               ;
00FC26  2               ; open a logical file
00FC26  2               
00FC26  2               ; this routine is used to open a logical file. Once the logical file is set up it
00FC26  2               ; can be used for input/output operations. Most of the I/O KERNAL routines call on
00FC26  2               ; this routine to create the logical files to operate on. No arguments need to be
00FC26  2               ; set up to use this routine, but both the SETLFS, LAB_FFBA, and SETNAM, LAB_FFBD,
00FC26  2               ; KERNAL routines must be called before using this routine.
00FC26  2               
00FC26  2               LAB_F40A:
00FC26  2  AE 26 03             LDX     IECLFN          ; get logical file number
00FC29  2  D0 03                BNE     LAB_F411        ; branch if there is a file
00FC2B  2               
00FC2B  2  4C FA F9             JMP     LAB_F78D        ; else do not input file error and return
00FC2E  2               
00FC2E  2               LAB_F411:
00FC2E  2  20 BA FC             JSR     LAB_F3CF        ; find file
00FC31  2  D0 03                BNE     LAB_F419        ; branch if file not found
00FC33  2               
00FC33  2  4C EE F9             JMP     LAB_F781        ; else do file already open error and return
00FC36  2               
00FC36  2               LAB_F419:
00FC36  2  AE 25 03             LDX     IECOPENF        ; get open file count
00FC39  2  E0 0A                CPX     #$0A            ; compare with max
00FC3B  2  90 03                BCC     LAB_F422        ; branch if less
00FC3D  2               
00FC3D  2  4C EB F9             JMP     LAB_F77E        ; else do too many files error and return
00FC40  2               
00FC40  2               LAB_F422:
00FC40  2  EE 25 03             INC     IECOPENF        ; increment open file count
00FC43  2  AD 26 03             LDA     IECLFN          ; get logical file number
00FC46  2  9D B0 03             STA     PTRLFT,X        ; save to logical file table
00FC49  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00FC4C  2  09 60                ORA     #$60            ; OR with the OPEN CHANNEL command
00FC4E  2  8D 19 03             STA     IECSECAD        ; set secondary address
00FC51  2  9D C4 03             STA     PTRSAT,X        ; save to secondary address table
00FC54  2  AD 1C 03             LDA     IECDEVN         ; get device number
00FC57  2  9D BA 03             STA     PTRDNT,X        ; save to device number table
00FC5A  2               ; serial bus device
00FC5A  2  20 23 FA             JSR     LAB_F495        ; send secondary address and filename
00FC5D  2  18                   CLC                     ; flag ok
00FC5E  2               LAB_F494:
00FC5E  2  60                   RTS
00FC5F  2               
00FC5F  2               ;***********************************************************************************;
00FC5F  2               ;
00FC5F  2               ; open a channel for input
00FC5F  2               
00FC5F  2               ; any logical file that has already been opened by the OPEN routine, LAB_FFC0, can be
00FC5F  2               ; defined as an input channel by this routine. the device on the channel must be an
00FC5F  2               ; input device or an error will occur and the routine will abort.
00FC5F  2               
00FC5F  2               ; if you are getting data from anywhere other than the keyboard, this routine must be
00FC5F  2               ; called before using either the CHRIN routine, LAB_FFCF, or the GETIN routine,
00FC5F  2               ; LAB_FFE4. if you are getting data from the keyboard and no other input channels are
00FC5F  2               ; open then the calls to this routine and to the OPEN routine, LAB_FFC0, are not needed.
00FC5F  2               
00FC5F  2               ; when used with a device on the serial bus this routine will automatically send the
00FC5F  2               ; listen address specified by the OPEN routine, LAB_FFC0, and any secondary address.
00FC5F  2               
00FC5F  2               ; possible errors are:
00FC5F  2               ;
00FC5F  2               ;	3 : file not open
00FC5F  2               ;	5 : device not present
00FC5F  2               ;	6 : file is not an input file
00FC5F  2               
00FC5F  2               LAB_F2C7:
00FC5F  2  20 BA FC             JSR     LAB_F3CF        ; find file
00FC62  2  F0 03                BEQ     LAB_F2CF        ; branch if file opened
00FC64  2  4C F1 F9             JMP     LAB_F784        ; do file not open error and return
00FC67  2               
00FC67  2               LAB_F2CF:
00FC67  2  20 CC FC             JSR     LAB_F3DF        ; set file details from table,X
00FC6A  2  AD 1C 03             LDA     IECDEVN         ; get device number
00FC6D  2               ; device was serial bus device
00FC6D  2               LAB_F2F0:
00FC6D  2  AA                   TAX                     ; copy device number to X
00FC6E  2  20 2E F7             JSR     LAB_EE14        ; command a serial bus device to TALK
00FC71  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00FC74  2  10 06                BPL     LAB_F2FE        ;.
00FC76  2               
00FC76  2  20 08 F8             JSR     LAB_EED3        ; wait for bus end after send
00FC79  2  4C 7F FC             JMP     LAB_F301        ;.
00FC7C  2               
00FC7C  2               LAB_F2FE:
00FC7C  2  20 FB F7             JSR     LAB_EECE        ; send secondary address after TALK
00FC7F  2               LAB_F301:
00FC7F  2  8A                   TXA                     ; copy device back to A
00FC80  2  2C 17 03             BIT     IECSTW          ; test serial status byte
00FC83  2  10 03                BPL     LAB_F2EC        ; if device present save device number and exit
00FC85  2               
00FC85  2  4C F7 F9             JMP     LAB_F78A        ; do device not present error and return
00FC88  2               
00FC88  2               LAB_F2EC:
00FC88  2  8D 27 03             STA     IECIDN          ; save input device number
00FC8B  2  18                   CLC                     ; flag ok
00FC8C  2  60                   RTS
00FC8D  2               
00FC8D  2               ;***********************************************************************************;
00FC8D  2               ;
00FC8D  2               ; open a channel for output
00FC8D  2               
00FC8D  2               ; any logical file that has already been opened by the OPEN routine, LAB_FFC0, can be
00FC8D  2               ; defined as an output channel by this routine the device on the channel must be an
00FC8D  2               ; output device or an error will occur and the routine will abort.
00FC8D  2               
00FC8D  2               ; if you are sending data to anywhere other than the screen this routine must be
00FC8D  2               ; called before using the CHROUT routine, LAB_FFD2. if you are sending data to the
00FC8D  2               ; screen and no other output channels are open then the calls to this routine and to
00FC8D  2               ; the OPEN routine, LAB_FFC0, are not needed.
00FC8D  2               
00FC8D  2               ; when used with a device on the serial bus this routine will automatically send the
00FC8D  2               ; listen address specified by the OPEN routine, LAB_FFC0, and any secondary address.
00FC8D  2               
00FC8D  2               ; possible errors are:
00FC8D  2               ;
00FC8D  2               ;	3 : file not open
00FC8D  2               ;	5 : device not present
00FC8D  2               ;	7 : file is not an output file
00FC8D  2               
00FC8D  2               LAB_F309:
00FC8D  2  20 BA FC             JSR     LAB_F3CF        ; find file
00FC90  2  F0 03                BEQ     LAB_F311        ; branch if file found
00FC92  2               
00FC92  2  4C F1 F9             JMP     LAB_F784        ; do file not open error and return
00FC95  2               
00FC95  2               LAB_F311:
00FC95  2  20 CC FC             JSR     LAB_F3DF        ; set file details from table,X
00FC98  2  AD 1C 03             LDA     IECDEVN         ; get device number
00FC9B  2  AA                   TAX                     ; copy device number
00FC9C  2  20 31 F7             JSR     LAB_EE17        ; command devices on the serial bus to LISTEN
00FC9F  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00FCA2  2  10 05                BPL     LAB_F33F        ; branch if address to send
00FCA4  2               
00FCA4  2  20 F2 F7             JSR     LAB_EEC5        ; else set serial ATN high
00FCA7  2  D0 03                BNE     LAB_F342        ; branch always
00FCA9  2               LAB_F33F:
00FCA9  2  20 EC F7             JSR     LAB_EEC0        ; send secondary address after LISTEN
00FCAC  2               LAB_F342:
00FCAC  2  8A                   TXA                     ; copy device number back to A
00FCAD  2  2C 17 03             BIT     IECSTW          ; test serial status byte
00FCB0  2  10 03                BPL     LAB_F32E        ; if device present save output device number and exit
00FCB2  2  4C F7 F9             JMP     LAB_F78A        ; else do device not present error and return
00FCB5  2               
00FCB5  2               LAB_F32E:
00FCB5  2  8D 28 03             STA     IECODN          ; save output device number
00FCB8  2  18                   CLC                     ; flag ok
00FCB9  2  60                   RTS
00FCBA  2               
00FCBA  2               ;***********************************************************************************;
00FCBA  2               ;
00FCBA  2               ; find file
00FCBA  2               
00FCBA  2               LAB_F3CF:
00FCBA  2  A9 00                LDA     #$00            ; clear A
00FCBC  2  8D 17 03             STA     IECSTW          ; clear serial status byte
00FCBF  2  8A                   TXA                     ; copy logical file number to A
00FCC0  2               
00FCC0  2               ; find file A
00FCC0  2               
00FCC0  2               LAB_F3D4:
00FCC0  2  AE 25 03             LDX     IECOPENF        ; get open file count
00FCC3  2               LAB_F3D6:
00FCC3  2  CA                   DEX                     ; decrememnt count to give index
00FCC4  2  30 18                BMI     LAB_F3EE        ; exit if no files
00FCC6  2               
00FCC6  2  DD B0 03             CMP     PTRLFT,X        ; compare logical file number with table logical file number
00FCC9  2  D0 F8                BNE     LAB_F3D6        ; loop if no match
00FCCB  2               
00FCCB  2  60                   RTS
00FCCC  2               
00FCCC  2               
00FCCC  2               ;***********************************************************************************;
00FCCC  2               ;
00FCCC  2               ; set file details from table,X
00FCCC  2               
00FCCC  2               LAB_F3DF:
00FCCC  2  BD B0 03             LDA     PTRLFT,X        ; get logical file from logical file table
00FCCF  2  8D 26 03             STA     IECLFN          ; set logical file
00FCD2  2  BD BA 03             LDA     PTRDNT,X        ; get device number from device number table
00FCD5  2  8D 1C 03             STA     IECDEVN         ; set device number
00FCD8  2  BD C4 03             LDA     PTRSAT,X        ; get secondary address from secondary address table
00FCDB  2  8D 19 03             STA     IECSECAD        ; set secondary address
00FCDE  2               LAB_F3EE:
00FCDE  2  60                   RTS
00FCDF  2               
00FCDF  2               ;***********************************************************************************;
00FCDF  2               ;
00FCDF  2               ; close input and output channels
00FCDF  2               
00FCDF  2               ; this routine is called to clear all open channels and restore the I/O channels to
00FCDF  2               ; their original default values. It is usually called after opening other I/O
00FCDF  2               ; channels and using them for input/output operations. The default input device is
00FCDF  2               ; 0, the keyboard. The default output device is 3, the screen.
00FCDF  2               
00FCDF  2               ; If one of the channels to be closed is to the serial port, an UNTALK signal is sent
00FCDF  2               ; first to clear the input channel or an UNLISTEN is sent to clear the output channel.
00FCDF  2               ; By not calling this routine and leaving listener(s) active on the serial bus,
00FCDF  2               ; several devices can receive the same data from the VIC at the same time. One way to
00FCDF  2               ; take advantage of this would be to command the printer to TALK and the disk to
00FCDF  2               ; LISTEN. This would allow direct printing of a disk file.
00FCDF  2               
00FCDF  2               LAB_F3F3:
00FCDF  2  20 3C F8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00FCE2  2  20 2E F8             JSR     LAB_EEF6        ; command the serial bus to UNTALK
00FCE5  2  A9 00                LDA     #$00            ; set for keyboard
00FCE7  2  8D 28 03             STA     IECODN          ; set output device number to NULL
00FCEA  2  8D 27 03             STA     IECIDN          ; set input device number to NULL
00FCED  2  60                   RTS
00FCEE  2               
00FCEE  1               
00FCEE  1               
00FCEE  1               
00FCEE  1               ;______________________________________________________________
00FCEE  1               ;        INCLUDE 'RTC.ASM'
00FCEE  1               ;______________________________________________________________
00FCEE  1               
00FCEE  1               
00FCEE  1  00 00 00             .BYTE   00,00,00
00FCF1  1               
00FCF1  1                       .SEGMENT "NJUMP"
00FCF1  1               ; BIOS JUMP TABLE (NATIVE)
00FCF1  1                       .ORG    $FD00
00FD00  1               LPRINTVEC:
00FD00  1  20 18 F2             JSR     OUTCH
00FD03  1  6B                   RTL
00FD04  1               LINPVEC:
00FD04  1  20 42 F2             JSR     INCH
00FD07  1  6B                   RTL
00FD08  1               LINPWVEC:
00FD08  1  20 36 F2             JSR     INCHW
00FD0B  1  6B                   RTL
00FD0C  1               LSetXYVEC:
00FD0C  1  20 ED F3             JSR     SetXY
00FD0F  1  6B                   RTL
00FD10  1               LCPYVVEC:
00FD10  1  20 56 F2             JSR     DONOOP
00FD13  1  6B                   RTL
00FD14  1               LSrlUpVEC:
00FD14  1  20 FE F3             JSR     ScrollUp
00FD17  1  6B                   RTL
00FD18  1               LSetColorVEC:
00FD18  1  20 E4 F3             JSR     SetColor
00FD1B  1  6B                   RTL
00FD1C  1               LCURSORVEC:
00FD1C  1  20 DF F2             JSR     CURSOR
00FD1F  1  6B                   RTL
00FD20  1               LUNCURSORVEC:
00FD20  1  20 1F F3             JSR     UNCURSOR
00FD23  1  6B                   RTL
00FD24  1               LWRITERTC:
00FD24  1  20 56 F2             JSR     DONOOP
00FD27  1  6B                   RTL
00FD28  1               LREADRTC:
00FD28  1  20 56 F2             JSR     DONOOP
00FD2B  1  6B                   RTL
00FD2C  1               LIECIN:
00FD2C  1  20 51 F8             JSR     LAB_EF19        ;. Read byte from serial bus. (Must call TALK and TALKSA beforehands.)
00FD2F  1  6B                   RTL
00FD30  1               LIECOUT:
00FD30  1  20 19 F8             JSR     LAB_EEE4        ;. Write byte to serial bus. (Must call LISTEN and LSTNSA beforehands.)
00FD33  1  6B                   RTL
00FD34  1               LUNTALK:
00FD34  1  20 2E F8             JSR     LAB_EEF6        ;. Send UNTALK command to serial bus.
00FD37  1  6B                   RTL
00FD38  1               LUNLSTN:
00FD38  1  20 3C F8             JSR     LAB_EF04        ;. Send UNLISTEN command to serial bus.
00FD3B  1  6B                   RTL
00FD3C  1               LLISTEN:
00FD3C  1  20 31 F7             JSR     LAB_EE17        ;. Send LISTEN command to serial bus.
00FD3F  1  6B                   RTL
00FD40  1               LTALK:
00FD40  1  20 2E F7             JSR     LAB_EE14        ;. Send TALK command to serial bus.
00FD43  1  6B                   RTL
00FD44  1               LSETLFS:
00FD44  1  20 5E FB             JSR     LAB_FE50        ;. Set file parameters.
00FD47  1  6B                   RTL
00FD48  1               LSETNAM:
00FD48  1  20 54 FB             JSR     LAB_FE49        ;. Set file name parameters.
00FD4B  1  6B                   RTL
00FD4C  1               LLOAD:
00FD4C  1  20 EA F8             JSR     LOADTORAM       ;. Load or verify file. (Must call SETLFS and SETNAM beforehands.)
00FD4F  1  6B                   RTL
00FD50  1               LSAVE:
00FD50  1  20 70 F9             JSR     IECSAVERAM      ;. Save file. (Must call SETLFS and SETNAM beforehands.)
00FD53  1  6B                   RTL
00FD54  1               LIECINIT:
00FD54  1  20 7C FB             JSR     INITIEC         ; INIT IEC
00FD57  1  6B                   RTL
00FD58  1               LIECCLCH:
00FD58  1  20 DF FC             JSR     LAB_F3F3        ; close input and output channels
00FD5B  1  6B                   RTL
00FD5C  1               LIECOUTC:
00FD5C  1  20 8D FC             JSR     LAB_F309        ; open a channel for output
00FD5F  1  6B                   RTL
00FD60  1               LIECINPC:
00FD60  1  20 5F FC             JSR     LAB_F2C7        ; open a channel for input
00FD63  1  6B                   RTL
00FD64  1               LIECOPNLF:
00FD64  1  20 26 FC             JSR     LAB_F40A        ; open a logical file
00FD67  1  6B                   RTL
00FD68  1               LIECCLSLF:
00FD68  1  20 F3 FB             JSR     LAB_F34A        ; close a specified logical file
00FD6B  1  6B                   RTL
00FD6C  1               LClearScrVec:
00FD6C  1  20 47 F4             JSR     ClearScreen     ; clear the 9918 Screen
00FD6F  1  6B                   RTL
00FD70  1               LLOADFONTVec:
00FD70  1  20 56 F2             JSR     DONOOP          ; LOAD THE FONT
00FD73  1  6B                   RTL
00FD74  1               
00FD74  1                       .SEGMENT "EJUMP"
00FD74  1               ; BIOS JUMP TABLE (Emulation)
00FD74  1                       .ORG    $FF71
00FF71  1               PRINTVEC:
00FF71  1  4C 18 F2             JMP     OUTCH
00FF74  1               INPVEC:
00FF74  1  4C 42 F2             JMP     INCH
00FF77  1               INPWVEC:
00FF77  1  4C 36 F2             JMP     INCHW
00FF7A  1               SetXYVEC:
00FF7A  1  4C ED F3             JMP     SetXY
00FF7D  1               CPYVVEC:
00FF7D  1  4C 56 F2             JMP     DONOOP
00FF80  1               SrlUpVEC:
00FF80  1  4C FE F3             JMP     ScrollUp
00FF83  1               SetColorVEC:
00FF83  1  4C E4 F3             JMP     SetColor
00FF86  1               CURSORVEC:
00FF86  1  4C DF F2             JMP     CURSOR
00FF89  1               UNCURSORVEC:
00FF89  1  4C 1F F3             JMP     UNCURSOR
00FF8C  1               WRITERTC:
00FF8C  1  4C 56 F2             JMP     DONOOP
00FF8F  1               READRTC:
00FF8F  1  4C 56 F2             JMP     DONOOP
00FF92  1               IECIN:
00FF92  1  4C 51 F8             JMP     LAB_EF19        ; Read byte from serial bus. (Must call TALK and TALKSA beforehands.)
00FF95  1               IECOUT:
00FF95  1  4C 19 F8             JMP     LAB_EEE4        ; Write byte to serial bus. (Must call LISTEN and LSTNSA beforehands.)
00FF98  1               UNTALK:
00FF98  1  4C 2E F8             JMP     LAB_EEF6        ; Send UNTALK command to serial bus.
00FF9B  1               UNLSTN:
00FF9B  1  4C 3C F8             JMP     LAB_EF04        ; Send UNLISTEN command to serial bus.
00FF9E  1               LISTEN:
00FF9E  1  4C 31 F7             JMP     LAB_EE17        ; Send LISTEN command to serial bus.
00FFA1  1               TALK:
00FFA1  1  4C 2E F7             JMP     LAB_EE14        ; Send TALK command to serial bus.
00FFA4  1               SETLFS:
00FFA4  1  4C 5E FB             JMP     LAB_FE50        ; Set file parameters.
00FFA7  1               SETNAM:
00FFA7  1  4C 54 FB             JMP     LAB_FE49        ; Set file name parameters.
00FFAA  1               LOAD:
00FFAA  1  4C EA F8             JMP     LOADTORAM       ; Load or verify file. (Must call SETLFS and SETNAM beforehands.)
00FFAD  1               SAVE:
00FFAD  1  4C 70 F9             JMP     IECSAVERAM      ; Save file. (Must call SETLFS and SETNAM beforehands.)
00FFB0  1               IECINIT:
00FFB0  1  4C 7C FB             JMP     INITIEC         ; INIT IEC
00FFB3  1               IECCLCH:
00FFB3  1  4C DF FC             JMP     LAB_F3F3        ; close input and output channels
00FFB6  1               IECOUTC:
00FFB6  1  4C 8D FC             JMP     LAB_F309        ; open a channel for output
00FFB9  1               IECINPC:
00FFB9  1  4C 5F FC             JMP     LAB_F2C7        ; open a channel for input
00FFBC  1               IECOPNLF:
00FFBC  1  4C 26 FC             JMP     LAB_F40A        ; open a logical file
00FFBF  1               IECCLSLF:
00FFBF  1  4C F3 FB             JMP     LAB_F34A        ; close a specified logical file
00FFC2  1               ClearScrVec:
00FFC2  1  4C 47 F4             JMP     ClearScreen     ; clear the 9918 Screen
00FFC5  1               LOADFONTVec:
00FFC5  1  4C 56 F2             JMP     DONOOP          ; LOAD THE FONT
00FFC8  1               
00FFC8  1                       .SEGMENT "VECTORS"
00FFC8  1               ; 65c816 Native Vectors
00FFC8  1                       .ORG    $FFE4
00FFE4  1               COPVECTOR:
00FFE4  1  2F E0                .WORD   RCOPVECTOR
00FFE6  1               BRKVECTOR:
00FFE6  1  32 E0                .WORD   RBRKVECTOR
00FFE8  1               ABTVECTOR:
00FFE8  1  35 E0                .WORD   RABTVECTOR
00FFEA  1               NMIVECTOR:
00FFEA  1  38 E0                .WORD   RNMIVECTOR
00FFEC  1               resv1:
00FFEC  1  00 00                .WORD   $0000           ;
00FFEE  1               IRQVECTOR:
00FFEE  1  3B E0                .WORD   RIRQVECTOR      ; ROM VECTOR FOR IRQ
00FFF0  1               
00FFF0  1  00 00                .WORD   $0000           ;
00FFF2  1  00 00                .WORD   $0000           ;
00FFF4  1               
00FFF4  1               ; 6502 Emulation Vectors
00FFF4  1                       .ORG    $FFF4
00FFF4  1               ECOPVECTOR:
00FFF4  1  3E E0                .WORD   RECOPVECTOR
00FFF6  1               resv2:
00FFF6  1  00 00                .WORD   $0000
00FFF8  1               EABTVECTOR:
00FFF8  1  41 E0                .WORD   REABTVECTOR
00FFFA  1               ENMIVECTOR:
00FFFA  1  44 E0                .WORD   RENMIVECTOR
00FFFC  1               RSTVECTOR:
00FFFC  1  00 E0                .WORD   COLD_START      ;
00FFFE  1               EINTVECTOR:
00FFFE  1  47 E0                .WORD   REINTVECTOR     ; ROM VECTOR FOR IRQ
010000  1               
010000  1                       .END

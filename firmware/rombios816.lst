ca65 V2.18 - Ubuntu 2.19-1
Main file   : rombios816.asm
Current file: rombios816.asm

000000r 1               .P816
000000r 1               ;__ROMBIOS816_______________________________________________________________________________________
000000r 1               ;
000000r 1               ;	ROM BIOS FOR THE RBC 65c816 SBC - NATIVE MODE
000000r 1               ;
000000r 1               ;	WRITTEN BY: DAN WERNER -- 10/7/2017
000000r 1               ;   Modified 8/10/2024 for WE816-MARK2
000000r 1               ;
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ;
000000r 1               ; DATA CONSTANTS
000000r 1               ;__________________________________________________________________________________________________
000000r 1               
000000r 1                       .SEGMENT "ROM"
000000r 1               
000000r 1               ;__________________________________________________________________________________________________
000000r 1               ; $8000-$8007 UART 16C550
000000r 1               ;__________________________________________________________________________________________________
000000r 1               UART0           = $FE00         ;   DATA IN/OUT
000000r 1               UART1           = $FE01         ;   CHECK RX
000000r 1               UART2           = $FE02         ;   INTERRUPTS
000000r 1               UART3           = $FE03         ;   LINE CONTROL
000000r 1               UART4           = $FE04         ;   MODEM CONTROL
000000r 1               UART5           = $FE05         ;   LINE STATUS
000000r 1               UART6           = $FE06         ;   MODEM STATUS
000000r 1               
000000r 1               
000000r 1               
000000r 1               via1regb        = $FE10         ; Register
000000r 1               via1rega        = $FE11         ; Register
000000r 1               via1ddrb        = $FE12         ; Register
000000r 1               via1ddra        = $FE13         ; Register
000000r 1               via1t1cl        = $FE14         ; Register
000000r 1               via1t1ch        = $FE15         ; Register
000000r 1               via1t1ll        = $FE16         ; Register
000000r 1               via1t1lh        = $FE17         ; Register
000000r 1               via1t2cl        = $FE18         ; Register
000000r 1               via1t2ch        = $FE19         ; Register
000000r 1               via1sr          = $FE1A         ; Register
000000r 1               via1acr         = $FE1B         ; Register
000000r 1               via1pcr         = $FE1C         ; Register
000000r 1               via1ifr         = $FE1D         ; Register
000000r 1               via1ier         = $FE1E         ; Register
000000r 1               via1ora         = $FE1F         ; Register
000000r 1               
000000r 1               via2regb        = $FE20         ; Register
000000r 1               via2rega        = $FE21         ; Register
000000r 1               via2ddrb        = $FE22         ; Register
000000r 1               via2ddra        = $FE23         ; Register
000000r 1               via2t1cl        = $FE24         ; Register
000000r 1               via2t1ch        = $FE25         ; Register
000000r 1               via2t1ll        = $FE26         ; Register
000000r 1               via2t1lh        = $FE27         ; Register
000000r 1               via2t2cl        = $FE28         ; Register
000000r 1               via2t2ch        = $FE29         ; Register
000000r 1               via2sr          = $FE2A         ; Register
000000r 1               via2acr         = $FE2B         ; Register
000000r 1               via2pcr         = $FE2C         ; Register
000000r 1               via2ifr         = $FE2D         ; Register
000000r 1               via2ier         = $FE2E         ; Register
000000r 1               via2ora         = $FE2F         ; Register
000000r 1               
000000r 1               
000000r 1               STACK           = $BFFF         ;   POINTER TO TOP OF STACK
000000r 1               
000000r 1               ;
000000r 1               KEYBUFF         = $0200         ; 256 BYTE KEYBOARD BUFFER
000000r 1               ; NATIVE VECTORS
000000r 1               ICOPVECTOR      = $0300         ;COP handler indirect vector...
000000r 1               IBRKVECTOR      = $0302         ;BRK handler indirect vector...
000000r 1               IABTVECTOR      = $0304         ;ABT handler indirect vector...
000000r 1               INMIVECTOR      = $0306         ;NMI handler indirect vector...
000000r 1               IIRQVECTOR      = $0308         ;IRQ handler indirect vector...
000000r 1               ; 6502 Emulation Vectors
000000r 1               IECOPVECTOR     = $030A         ;ECOP handler indirect vector...
000000r 1               IEABTVECTOR     = $030C         ;EABT handler indirect vector...
000000r 1               IENMIVECTOR     = $030E         ;ENMI handler indirect vector...
000000r 1               IEINTVECTOR     = $0310         ;EINT handler indirect vector...
000000r 1               
000000r 1               ;;; These are as yet unused
000000r 1               ;------------------------------------------------------------------------------
000000r 1               IECDCF          = $0312         ; Serial output: deferred char flag
000000r 1               IECDC           = $0313         ; Serial deferred character
000000r 1               IECBCI          = $0314         ; Serial bit count/EOI flag
000000r 1               IECBTC          = $0315         ; Countdown, bit count
000000r 1               IECCYC          = $0316         ; Cycle count
000000r 1               IECSTW          = $0317         ; Status word
000000r 1               IECFNLN         = $0318         ; File Name Length
000000r 1               IECSECAD        = $0319         ; IEC Secondary Address
000000r 1               IECBUFFL        = $031A         ; low byte IEC buffer Pointer
000000r 1               IECBUFFH        = $031B         ; High byte IEC buffer Pointer
000000r 1               IECDEVN         = $031C         ; IEC Device Number
000000r 1               IECSTRTL        = $031D         ; low byte IEC Start Address Pointer
000000r 1               IECSTRTH        = $031E         ; High byte IEC Start Address Pointer
000000r 1               IECMSGM         = $031F         ; message mode flag,
000000r 1               ; $C0 = both control and kernal messages,
000000r 1               ; $80 = control messages only,
000000r 1               ; $40 = kernal messages only,
000000r 1               ; $00 = neither control or kernal messages
000000r 1               IECFNPL         = $0320         ; File Name Pointer Low,
000000r 1               IECFNPH         = $0321         ; File Name Pointer High,
000000r 1               LOADBUFL        = $0322         ; low byte IEC buffer Pointer
000000r 1               LOADBUFH        = $0323         ; High byte IEC buffer Pointer
000000r 1               LOADBANK        = $0324         ; BANK buffer Pointer
000000r 1               IECOPENF        = $0325         ; OPEN FILE COUNT
000000r 1               IECLFN          = $0326         ; IEC LOGICAL FILE NUMBER
000000r 1               IECIDN          = $0327         ; input device number
000000r 1               IECODN          = $0328         ; output device number
000000r 1               ;------------------------------------------------------------------------------
000000r 1               
000000r 1               ; VIDEO/KEYBOARD PARAMETER AREA
000000r 1               
000000r 1               CSRX            = $0330         ; CURRENT X POSITION
000000r 1               CSRY            = $0331         ; CURRENT Y POSITION
000000r 1               LEDS            = $0332
000000r 1               KeyLock         = $0333
000000r 1               ScannedKey      = $0334
000000r 1               ScrollCount     = $0335         ;
000000r 1               TEMP            = $0336         ; TEMP AREA
000000r 1               
000000r 1               ConsoleDevice   = $0341         ; Current Console Device
000000r 1                                               ; $00 Serial, $01 On-Board 9918/KB
000000r 1               CSRCHAR         = $0342         ; Character under the Cursor
000000r 1               VIDEOWIDTH      = $0343         ; SCREEN WIDTH -- 32 or 40 (80 in the future)
000000r 1               DEFAULT_COLOR   = $0344         ; DEFAULT COLOR FOR PRINTING
000000r 1               
000000r 1               ; Tables
000000r 1               PTRLFT          = $03B0         ; .. to $03B9 logical file table
000000r 1               PTRDNT          = $03BA         ; .. to $03C3 device number table
000000r 1               PTRSAT          = $03C4         ; .. to $03CD secondary address table
000000r 1               LINEFLGS        = $03D0         ; 24 BYTES OF LINE POINTERS (3D0 - 3E9 , one extra for scrolling)
000000r 1               
000000r 1               
000000r 1               TRUE            = 1
000000r 1               FALSE           = 0
000000r 1               
000000r 1               KBD_DELAY       = 64            ; keyboard delay in MS.   Set higher if keys bounce, set lower if keyboard feels slow
000000r 1               
000000r 1                       .INCLUDE "macros.asm"
000000r 2               ;___________________________________________________________________________________________________
000000r 2               ;
000000r 2               ;	USEFUL 65186 MACROS
000000r 2               ;__________________________________________________________________________________________________
000000r 2               
000000r 2               .macro       STORECONTEXT             ; Store Complete Context at the beginning of a Sub
000000r 2                       PHX
000000r 2                       phy
000000r 2                       pha
000000r 2                       php
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       RESTORECONTEXT                 ; Restore Complete Context at the end of a Sub
000000r 2                       plp
000000r 2                       pla
000000r 2                       ply
000000r 2                       plx
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       INDEX16                         ; Set 16bit Index Registers
000000r 2               		REP #$10 		; 16 bit Index registers
000000r 2               		.I16
000000r 2               .endmacro
000000r 2               .macro       INDEX8                          ; Set 8bit Index Registers
000000r 2               		SEP #$10 		; 8 bit Index registers
000000r 2               		.I8
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       ACCUMULATOR16                  ; Set 16bit Index Registers
000000r 2               		REP #$20 		; 16 bit Index registers
000000r 2               		.A16
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       ACCUMULATOR8                   ; Set 8bit Index Registers
000000r 2               		SEP #$20 		; 8 bit Index registers
000000r 2               		.A8
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       ACCUMULATORINDEX16             ; Set 16bit Index Registers
000000r 2               		REP #$30 		; 16 bit Index registers
000000r 2               		.A16
000000r 2                               .I16
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       ACCUMULATORINDEX8              ; Set 8bit Index Registers
000000r 2               		SEP #$30 		; 8 bit Index registers
000000r 2               		.A8
000000r 2                               .I8
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       LBEQ PARM1
000000r 2                    bne *+5
000000r 2                    jmp PARM1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       LBNE PARM1
000000r 2                    beq *+5
000000r 2                    jmp PARM1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       LBCC PARM1
000000r 2                    bcc *+4
000000r 2                    bra *+5
000000r 2                    jmp PARM1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       LBCS PARM1
000000r 2                    bcs *+4
000000r 2                    bra *+5
000000r 2                    jmp PARM1
000000r 2               .endmacro
000000r 2               
000000r 2               .macro       SETBANK PARM1
000000r 2                   PHX
000000r 2               	LDX #PARM1
000000r 2               	PHX
000000r 2               	PLB
000000r 2                   PLX
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               ; CHOOSE ONE CONSOLE IO DEVICE
000000r 1               
000000r 1                       .ORG    $C000
00C000  1               
00C000  1               ;__COLD_START___________________________________________________
00C000  1               ;
00C000  1               ; PERFORM SYSTEM COLD INIT
00C000  1               ;
00C000  1               ;_______________________________________________________________
00C000  1               COLD_START:
00C000  1  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
00C001  1               
00C001  1  18                   CLC                     ;
00C002  1  FB                   XCE                     ; SET NATIVE MODE
00C003  1  C2 30                ACCUMULATORINDEX16
00C005  1  A9 FF BF             LDA     #STACK          ; get the stack address
00C008  1  1B                   TCS                     ; and set the stack to it
00C009  1               
00C009  1  A9 FF D1             LDA     #INTRETURN      ;
00C00C  1  8D 00 03             STA     ICOPVECTOR
00C00F  1  8D 02 03             STA     IBRKVECTOR
00C012  1  8D 04 03             STA     IABTVECTOR
00C015  1  8D 06 03             STA     INMIVECTOR
00C018  1  8D 08 03             STA     IIRQVECTOR
00C01B  1  8D 0A 03             STA     IECOPVECTOR
00C01E  1  8D 0C 03             STA     IEABTVECTOR
00C021  1  8D 0E 03             STA     IENMIVECTOR
00C024  1  8D 10 03             STA     IEINTVECTOR
00C027  1               
00C027  1  E2 30                ACCUMULATORINDEX8
00C029  1  20 01 D2             JSR     CONSOLE_INIT    ; Init UART
00C02C  1  20 24 DC             JSR     INITIEC         ; Init IEC port
00C02F  1               ;       JSR     BATEST         ; Perform Basic Assurance Test
00C02F  1               
00C02F  1  5C 00 10 FF          JML     $FF1000         ; START BASIC
00C033  1               ;        JMP     mon
00C033  1               
00C033  1               
00C033  1               RCOPVECTOR:
00C033  1  6C 00 03             JMP     (ICOPVECTOR)
00C036  1               RBRKVECTOR:
00C036  1  6C 02 03             JMP     (IBRKVECTOR)
00C039  1               RABTVECTOR:
00C039  1  6C 04 03             JMP     (IABTVECTOR)
00C03C  1               RNMIVECTOR:
00C03C  1  6C 06 03             JMP     (INMIVECTOR)
00C03F  1               RIRQVECTOR:
00C03F  1  6C 08 03             JMP     (IIRQVECTOR)
00C042  1               RECOPVECTOR:
00C042  1  6C 0A 03             JMP     (IECOPVECTOR)
00C045  1               REABTVECTOR:
00C045  1  6C 0C 03             JMP     (IEABTVECTOR)
00C048  1               RENMIVECTOR:
00C048  1  6C 0E 03             JMP     (IENMIVECTOR)
00C04B  1               REINTVECTOR:
00C04B  1  6C 10 03             JMP     (IEINTVECTOR)
00C04E  1               
00C04E  1                       .INCLUDE "supermon816.asm"
00C04E  2               ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*      SUPERMON 816 MACHINE LANGUAGE MONITOR FOR THE W65C816S MICROPROCESSOR      *
00C04E  2               ;* ------------------------------------------------------------------------------- *
00C04E  2               ;*      Copyright ©1991-2014 by BCS Technology Limited.  All rights reserved.      *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* Permission is hereby granted to use, copy, modify and distribute this software, *
00C04E  2               ;* provided this copyright notice remains in the source code and  proper  attribu- *
00C04E  2               ;* tion is given.  Redistribution, regardless of form, must be at no charge to the *
00C04E  2               ;* end  user.  This code or any part thereof, including any derivation, MAY NOT be *
00C04E  2               ;* incorporated into any package intended for sale,  unless written permission has *
00C04E  2               ;* been given by the copyright holder.                                             *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* THERE IS NO WARRANTY OF ANY KIND WITH THIS SOFTWARE.  The user assumes all risk *
00C04E  2               ;* in connection with the incorporation of this software into any system.          *
00C04E  2               ;* ------------------------------------------------------------------------------- *
00C04E  2               ;* Supermon 816 is a salute to Jim Butterfield, who passed away on June 29, 2007.  *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* Jim, who was the unofficial  spokesman for  Commodore  International during the *
00C04E  2               ;* heyday of the company's 8 bit supremacy, scratch-developed the Supermon machine *
00C04E  2               ;* language monitor for the PET & CBM computers.   When the best-selling Commodore *
00C04E  2               ;* 64 was introduced, Jim adapted his software to the new machine & gave the adap- *
00C04E  2               ;* tation the name Supermon 64.   Commodore  subsequently  integrated a customized *
00C04E  2               ;* version of Supermon 64 into the C-128 to act as the resident M/L monitor.       *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* Although Supermon 816 is not an adaptation of Supermon 64,  it was  decided  to *
00C04E  2               ;* keep the Supermon name alive, since Supermon 816's general operation & user in- *
00C04E  2               ;* terface is similar to that of Supermon 64.   Supermon 816 is 100 percent native *
00C04E  2               ;* mode 65C816 code & was developed from a blank canvas.                           *
00C04E  2               ;* ------------------------------------------------------------------------------- *
00C04E  2               ;* Supermon 816 is a full featured monitor and supports the following operations:  *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     A - Assemble code                                                           *
00C04E  2               ;*     C - Compare memory regions                                                  *
00C04E  2               ;*     D - Disassemble code                                                        *
00C04E  2               ;*     F - Fill memory region (cannot span banks)                                  *
00C04E  2               ;*     G - Execute code (stops at BRK)                                             *
00C04E  2               ;*     H - Search (hunt) memory region                                             *
00C04E  2               ;*     J - Execute code as a subroutine (stops at BRK or RTS)                      *
00C04E  2               ;*     M - Dump & display memory range                                             *
00C04E  2               ;*     R - Dump & display 65C816 registers                                         *
00C04E  2               ;*     T - Copy (transfer) memory region                                           *
00C04E  2               ;*     X - Exit Supermon 816 & return to operating environment                     *
00C04E  2               ;*     > - Modify up to 32 bytes of memory                                         *
00C04E  2               ;*     ; - Modify 65C816 registers                                                 *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* Supermon 816 accepts binary (%), octal (%), decimal (+) and hexadecimal ($) as  *
00C04E  2               ;* input for numeric parameters.  Additionally, the H and > operations accept an   *
00C04E  2               ;* ASCII string in place of numeric values by preceding the string with ', e.g.:   *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     h 042000 042FFF 'BCS Technology Limited                                     *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* If no radix symbol is entered hex is assumed.                                   *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* Numeric conversion is also available.  For example, typing:                     *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     +1234567 <CR>                                                               *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* will display:                                                                   *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*         $12D687                                                                 *
00C04E  2               ;*         +1234567                                                                *
00C04E  2               ;*         %04553207                                                               *
00C04E  2               ;*         %100101101011010000111                                                  *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* In the above example, <CR> means the console keyboard's return or enter key.    *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* All numeric values are internally processed as 32 bit unsigned integers.  Addr- *
00C04E  2               ;* esses may be entered as 8, 16 or 24 bit values.  During instruction assembly,   *
00C04E  2               ;* immediate mode operands may be forced to 16 bits by preceding the operand with  *
00C04E  2               ;* an exclamation point if the instruction can accept a 16 bit operand, e.g.:      *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     a 1f2000 lda !#4                                                            *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* The above will assemble as:                                                     *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     A 1F2000  A9 04 00     LDA #$0004                                           *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* Entering:                                                                       *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     a 1f2000 ldx !#+157                                                         *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* will assemble as:                                                               *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     A 1F2000  A2 9D 00     LDX #$009D                                           *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* Absent the ! in the operand field, the above would have been assembled as:      *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     A 1F2000  A2 9D        LDX #$9D                                             *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* If an immediate mode operand is greater than $FF assembly of a 16 bit operand   *
00C04E  2               ;* is implied.                                                                     *
00C04E  2               ;* ------------------------------------------------------------------------------- *
00C04E  2               ;* A Note on the PEA & PEI Instructions                                            *
00C04E  2               ;* ------------------------------------                                            *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* The Eyes and Lichty programming manual uses the following syntax for the PEA    *
00C04E  2               ;* and PEI instructions:                                                           *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     PEA <operand>                                                               *
00C04E  2               ;*     PEI (<operand>)                                                             *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* The WDC data sheet that was published at the time of the 65C816's release in    *
00C04E  2               ;* 1984 does not indicate a recommended or preferred syntax for any of the above   *
00C04E  2               ;* instructions.  PEA pushes its operand to the stack and hence operates like any  *
00C04E  2               ;* other immediate mode instruction, in that the operand is the data (however, PEA *
00C04E  2               ;* doesn't affect the status register).  Similarly, PEI pushes the 16 bit value    *
00C04E  2               ;* stored at <operand> and <operand>+1, and hence operates like any other direct   *
00C04E  2               ;* (zero) page instruction, again without affecting the status register.           *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* BCS Technology Limited is of the opinion that the developer of the ORCA/M as-   *
00C04E  2               ;* sembler, which is the assembler referred to in the Eyes and Lichty manual, mis- *
00C04E  2               ;* understood how PEA and PEI behave during runtime, and hence chose an incorrect  *
00C04E  2               ;* syntax for these two instructions.  This error was subsequently carried forward *
00C04E  2               ;* by Eyes and Lichty.                                                             *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* Supermon 816's assembler uses the following syntax for PEA and PEI:             *
00C04E  2               ;*                                                                                 *
00C04E  2               ;*     PEA #<operand>                                                              *
00C04E  2               ;*     PEI <operand>                                                               *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* The operand for PEA is treated as a 16 bit value, even if entered as an 8 bit   *
00C04E  2               ;* value.  The operand for PEI must be 8 bits.                                     *
00C04E  2               ;*                                                                                 *
00C04E  2               ;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
00C04E  2               ;
00C04E  2               ;	* * * * * * * * * * * *
00C04E  2               ;	* VERSION INFORMATION *
00C04E  2               ;	* * * * * * * * * * * *
00C04E  2               ;
00C04E  2                       .MACRO  SOFTVERS        ;software version - change with each revision...
00C04E  2                       .BYTE   "1"             ;major
00C04E  2                       .BYTE   "."
00C04E  2                       .BYTE   "0"             ;minor
00C04E  2                       .BYTE   "."
00C04E  2                       .BYTE   "2"             ;revision
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2               ;REVISION TABLE
00C04E  2               ;
00C04E  2               ;Ver  Rev Date    Description
00C04E  2               ;-------------------------------------------------------------------------------
00C04E  2               ;1.0  2013/11/01  A) Original derived from the POC V1.1 single-board computer
00C04E  2               ;                    firmware.
00C04E  2               ;     2013/11/04  A) Fixed a problem where the B-accumulator wasn't always being
00C04E  2               ;                    be copied to shadow storage after return from execution of
00C04E  2               ;                    a J command.
00C04E  2               ;     2017/10/07  A) Converted to use WDC's 65816 assembler (D.WERNER)
00C04E  2               ;		  B) Adapt for the RBC 65c816 SBC
00C04E  2               ;		  C) Disable X command
00C04E  2               ;-------------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	        COMMENT ABBREVIATIONS
00C04E  2               ;	----------------------------------------------------
00C04E  2               ;	  BCD   binary-coded decimal
00C04E  2               ;	   DP   direct page or page zero
00C04E  2               ;	  EOF   end-of-field
00C04E  2               ;	  EOI   end-of-input
00C04E  2               ;	  LSB   least significant byte/bit
00C04E  2               ;	  LSD   least significant digit
00C04E  2               ;	  LSN   least significant nybble
00C04E  2               ;	  LSW   least significant word
00C04E  2               ;	  MPU   microprocessor
00C04E  2               ;	  MSB   most significant byte/bit
00C04E  2               ;	  MSD   most significant digit
00C04E  2               ;	  MSN   most significant nybble
00C04E  2               ;	  MSW   most-significant word
00C04E  2               ;	  RAM   random access memory
00C04E  2               ;	   WS   whitespace, i.e., blanks & horizontal tabs
00C04E  2               ;	----------------------------------------------------
00C04E  2               ;	A word is defined as 16 bits.
00C04E  2               ;
00C04E  2               ;	   MPU REGISTER SYMBOLS
00C04E  2               ;	--------------------------
00C04E  2               ;	   .A   accumulator LSB
00C04E  2               ;	   .B   accumulator MSB
00C04E  2               ;	   .C   16 bit accumulator
00C04E  2               ;	   .X   X-index
00C04E  2               ;	   .Y   Y-index
00C04E  2               ;	   DB   data bank
00C04E  2               ;	   DP   direct page
00C04E  2               ;	   PB   program bank
00C04E  2               ;	   PC   program counter
00C04E  2               ;	   SP   stack pointer
00C04E  2               ;	   SR   MPU status
00C04E  2               ;	----------------------------
00C04E  2               ;
00C04E  2               ;	  MPU STATUS REGISTER SYMBOLS
00C04E  2               ;	-------------------------------
00C04E  2               ;	    C   carry
00C04E  2               ;	    D   decimal mode
00C04E  2               ;	    I   maskable interrupts
00C04E  2               ;	    m   accumulator/memory size
00C04E  2               ;	    N   result negative
00C04E  2               ;	    V   sign overflow
00C04E  2               ;	    x   index registers size
00C04E  2               ;	    Z   result zero
00C04E  2               ;	-------------------------------
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;SYSTEM INTERFACE DEFINITIONS
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------
00C04E  2               ;	This section defines the interface between Supermon 816 & the host
00C04E  2               ;	system.   Change these definitions to suit your system, but do not
00C04E  2               ;	change any label names.  All definitions must have valid values in
00C04E  2               ;	order to assemble Supermon 816.
00C04E  2               ;	------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;	--------------------------------------------------------
00C04E  2               ;.org  $008000              ;assembly address...
00C04E  2               ;
00C04E  2               ;	Set _ORIGIN_ to Supermon 816's desired assembly address.
00C04E  2               ;	--------------------------------------------------------
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;vecexit  = $002000              ;exit to environment address...
00C04E  2               ;
00C04E  2               ;	Set VECEXIT to where Supermon 816 should go when it exits.  Supermon 816
00C04E  2               ;	will do a JML (long jump) to this address, which means VECEXIT must be a
00C04E  2               ;	24 bit address.
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;getcha                  ;get keystroke from console...
00C04E  2               ;
00C04E  2               ;	GETCHA refers to an operating system API call that returns a keystroke
00C04E  2               ;	in the 8 bit accumulator.  Supermon 816  assumes that GETCHA is a non-
00C04E  2               ;	blocking subroutine & returns with carry clear to indicate that a key-
00C04E  2               ;	stroke is in .A, or with carry set to indicate that no keystroke was
00C04E  2               ;	available.  GETCHA will be called with a JSR instruction.
00C04E  2               ;
00C04E  2               ;	Supermon 816 expects .X & .Y to be preserved upon return from GETCHA.
00C04E  2               ;	You may have to modify Supermon 816 at all calls to GETCHA if your "get
00C04E  2               ;	keystroke" routine works differently than described.
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               getcha          = $FF74
00C04E  2               ;------------------------------------------------------------------------
00C04E  2               ;putcha   print character on console...
00C04E  2               ;
00C04E  2               ;	PUTCHA refers to an operating system API call that prints a character to
00C04E  2               ;	the console screen.  The character to be printed will be in .A, which
00C04E  2               ;	will be set to 8-bit width.  Supermon 816 assumes that PUTCHA will block
00C04E  2               ;	until the character can be processed.  PUTCHA will be called with a JSR
00C04E  2               ;	instructions.
00C04E  2               ;
00C04E  2               ;	Supermon 816 expects .X & .Y to be preserved upon return from PUTCHA.
00C04E  2               ;	You may have to modify Supermon 816 at all calls to PUTCHA if your "put
00C04E  2               ;	character" routine works differently than described.
00C04E  2               ;
00C04E  2               putcha          = $FF71
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               vecbrki         = IBRKVECTOR         ;BRK handler indirect vector...
00C04E  2               ;
00C04E  2               ;	Supermon 816 will modify this vector so that execution of a BRK instruc-
00C04E  2               ;	tion is intercepted & the registers  are  captured.   Your BRK front end
00C04E  2               ;	should jump through this vector after pushing the registers as follows:
00C04E  2               ;
00C04E  2               ;	         phb                   ;save DB
00C04E  2               ;	         phd                   ;save DP
00C04E  2               ;	         rep #%00110000        ;16 bit registers
00C04E  2               ;	         pha
00C04E  2               ;	         phx
00C04E  2               ;	         phy
00C04E  2               ;	         jmp (vecbrki)         ;indirect vector
00C04E  2               ;
00C04E  2               ;	When a G or J command is issued, the above sequence will be reversed be-
00C04E  2               ;	fore a jump is made to the code to be executed.  Upon exit from Supermon
00C04E  2               ;	816, the original address at VECBRKI will be restored.
00C04E  2               ;
00C04E  2               ;	If your BRK front end doesn't conform to the above you will have to mod-
00C04E  2               ;	ify Supermon 816 to accommodate the differences.  The most likely needed
00C04E  2               ;	changes will be in the order in which registers are pushed to the stack.
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               hwstack         = $7FFF         ;top of hardware stack...
00C04E  2               ;
00C04E  2               ;	Supermon 816 initializes the stack pointer to this address when the cold
00C04E  2               ;	start at MONCOLD is called to enter the monitor.  The stack pointer will
00C04E  2               ;	be undisturbed when entry into Supermon 816 is through JMONBRK (see jump
00C04E  2               ;	table definitions).
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               zeropage        = $10           ;Supermon 816's direct page...
00C04E  2               ;
00C04E  2               ;	Supermon 816 uses direct page starting at this address.  Be sure that no
00C04E  2               ;	conflict occurs with other software.
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               stopkey         = $03           ;display abort key...
00C04E  2               ;
00C04E  2               ;	Supermon 816 will poll for a "stop key" during display operations, such
00C04E  2               ;	as code disassembly & memory dumps, so as to abort further processing &
00C04E  2               ;	return to the command prompt.  STOPKEY must be defined with the ASCII
00C04E  2               ;	value that the "stop key" will emit when typed.  The polling is via a
00C04E  2               ;	call to GETCHA (described above).  The default STOPKEY definition of $03
00C04E  2               ;	is for ASCII <ETX> or [Ctrl-C].
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ibuffer         = $000200       ;input buffer &...
00C04E  2               auxbuf          = ibuffer+s_ibuf+s_byte;auxiliary buffer...
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;	Supermon 816 will use the above definitions for input buffers.  These
00C04E  2               ;	buffers may be located anywhere in RAM that is convenient.  The buffers
00C04E  2               ;	are stateless, which means that unless Supermon 816 has control of your
00C04E  2               ;	system, they may be overwritten without consequence.
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;W65C816S INSTRUCTION SYNTHESIS MACROS -- !!!!! DO NOT EDIT !!!!!
00C04E  2               ;
00C04E  2               
00C04E  2               
00C04E  2                       .MACRO  _ASM24_ _ad
00C04E  2                       .BYTE   <_ad,>_ad,_ad>>16
00C04E  2                       .ENDMACRO
00C04E  2               
00C04E  2               ;brl      .macro _ad
00C04E  2               ;_ba      =*+3
00C04E  2               ;         .BYTE $82
00C04E  2               ;         .WORD _ad-_ba
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;jml      .macro _ad
00C04E  2               ;         .BYTE $5c
00C04E  2               ;         _asm24_ _ad
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;mvn      .macro _s,_d
00C04E  2               ;         .BYTE $54,_d,_s
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;mvp      .macro _s,_d
00C04E  2               ;         .BYTE $44,_d,_s
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;pea      .macro _op
00C04E  2               ;         .BYTE $f4
00C04E  2               ;         .WORD _op
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;phb      .macro
00C04E  2               ;         .BYTE $8b
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;phk      .macro
00C04E  2               ;         .BYTE $4b
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;plb      .macro
00C04E  2               ;         .BYTE $ab
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;rep      .macro _op
00C04E  2               ;         .BYTE $c2,_op
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;sep      .macro _op
00C04E  2               ;         .BYTE $e2,_op
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;tcd      .macro
00C04E  2               ;         .BYTE $5b
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;tcs      .macro
00C04E  2               ;         .BYTE $1b
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;tdc      .macro
00C04E  2               ;         .BYTE $7b
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;tsc      .macro
00C04E  2               ;         .BYTE $3b
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;txy      .macro
00C04E  2               ;         .BYTE $9b
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;tyx      .macro
00C04E  2               ;         .BYTE $bb
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2               ;wai      .macro
00C04E  2               ;         .BYTE $cb
00C04E  2               ;        .ENDMACRO
00C04E  2               ;
00C04E  2               ;xba      .macro
00C04E  2               ;         .BYTE $eb
00C04E  2               ;         .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ADCW _OP
00C04E  2                       ADC     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ANDW _OP
00C04E  2                       AND     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  BITW _OP
00C04E  2                       BIT     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  CMPW _OP
00C04E  2                       CMP     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  CPXW        _OP
00C04E  2                       CPX     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  CPYW        _OP
00C04E  2                       CPY     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  EORW        _OP
00C04E  2                       EOR     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LDAW        _OP
00C04E  2                       LDA     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LDXW        _OP
00C04E  2                       LDX     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LDYW        _OP
00C04E  2                       LDY     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ORAW        _OP
00C04E  2                       ORA     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SBCW        _OP
00C04E  2                       SBC     #<_OP
00C04E  2                       .BYTE   >_OP
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LDALX _AD
00C04E  2                       .BYTE   $BF
00C04E  2                       _ASM24_ _AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ADCIL        _AD
00C04E  2                       .BYTE   $67,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ADCILY        _AD
00C04E  2                       .BYTE   $77,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ANDIL        _AD
00C04E  2                       .BYTE   $27,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ANDILY        _AD
00C04E  2                       .BYTE   $37,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  CMPIL        _AD
00C04E  2                       .BYTE   $C7,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  CMPILY        _AD
00C04E  2                       .BYTE   $D7,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  EORIL        _AD
00C04E  2                       .BYTE   $47,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  EORILY        _AD
00C04E  2                       .BYTE   $57,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LDAIL        _AD
00C04E  2                       .BYTE   $A7,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LDAILY        _AD
00C04E  2                       .BYTE   $B7,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ORAIL        _AD
00C04E  2                       .BYTE   $07,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ORAILY        _AD
00C04E  2                       .BYTE   $17,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SBCIL        _AD
00C04E  2                       .BYTE   $E7,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SBCILY        _AD
00C04E  2                       .BYTE   $F7,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  STAIL        _AD
00C04E  2                       .BYTE   $87,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  STAILY        _AD
00C04E  2                       .BYTE   $97,_AD
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ADCS        _OF
00C04E  2                       .BYTE   $63,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ADCSI        _OF
00C04E  2                       .BYTE   $73,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ANDS        _OF
00C04E  2                       .BYTE   $23,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ANDSI        _OF
00C04E  2                       .BYTE   $33,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  CMPS        _OF
00C04E  2                       .BYTE   $C3,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  CMPSI        _OF
00C04E  2                       .BYTE   $D3,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  EORS        _OF
00C04E  2                       .BYTE   $43,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  EORSI        _OF
00C04E  2                       .BYTE   $53,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LDAS        _OF
00C04E  2                       .BYTE   $A3,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LDASI        _OF
00C04E  2                       .BYTE   $B3,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ORAS        _OF
00C04E  2                       .BYTE   $03,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  ORASI        _OF
00C04E  2                       .BYTE   $13,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SBCS        _OF
00C04E  2                       .BYTE   $E3,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SBCSI        _OF
00C04E  2                       .BYTE   $F3,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  STAS        _OF
00C04E  2                       .BYTE   $83,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  STASI        _OF
00C04E  2                       .BYTE   $93,_OF
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SLONGA
00C04E  2                       .BYTE   $C2,$20
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LONGR
00C04E  2                       .BYTE   $C2,$30
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  LONGX
00C04E  2                       .BYTE   $C2,$10
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SHORTA
00C04E  2                       .BYTE   $E2,$20
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SHORTI
00C04E  2                       .BYTE   $E2,$10
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SHORTR
00C04E  2                       .BYTE   $E2,$30
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2                       .MACRO  SHORTX
00C04E  2                       .BYTE   $E2,$10
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;CONSOLE DISPLAY CONTROL MACROS
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;	The following macros execute terminal  control procedures  that  perform
00C04E  2               ;	such tasks as clearing the screen,  switching  between  normal & reverse
00C04E  2               ;	video, etc.  These macros are for WYSE 60 & compatible displays, such as
00C04E  2               ;	the WYSE 150, WYSE 160, WYSE 325 & WYSE GPT.   Only the functions needed
00C04E  2               ;	by Supermon 816 are included.
00C04E  2               ;
00C04E  2               ;	If your console is not WYSE 60 compatible, you will need to  edit  these
00C04E  2               ;	macros as required to control your particular console or terminal.  Note
00C04E  2               ;	that in some cases one macro may call another.  Exercise caution in your
00C04E  2               ;	edits to avoid introducing display bugs.
00C04E  2               ;
00C04E  2               ;	If your console display cannot execute one of these procedures,  such as
00C04E  2               ;	'CL' (clear to end of line), you will have to develop an alternative.
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	cursor control...
00C04E  2               ;
00C04E  2                       .MACRO  CRR             ;carriage return
00C04E  2                       .BYTE   a_cr
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2               
00C04E  2                       .MACRO  LF              ;carriage return/line feed
00C04E  2                       CRR
00C04E  2                       .BYTE   a_lf
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2               ;	miscellaneous control...
00C04E  2               ;
00C04E  2                       .MACRO  RB              ;ring "bell"
00C04E  2                       .BYTE   a_bel
00C04E  2                       .ENDMACRO
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;ASCII CONTROL DEFINITIONS (menmonic order)
00C04E  2               ;
00C04E  2               a_bel           = $07           ;<BEL> alert/ring bell
00C04E  2               a_bs            = $08           ;<BS>  backspace
00C04E  2               a_cr            = $0d           ;<CR>  carriage return
00C04E  2               a_del           = $7f           ;<DEL> delete
00C04E  2               a_esc           = $1b           ;<ESC> escape
00C04E  2               a_ht            = $09           ;<HT>  horizontal tabulation
00C04E  2               a_lf            = $0a           ;<LF>  linefeed
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	miscellaneous (description order)...
00C04E  2               ;
00C04E  2               a_blank         = ' '           ;blank (whitespace)
00C04E  2               a_asclch        = 'z'           ;end of lowercase ASCII
00C04E  2               a_lctouc        = $5f           ;LC to UC conversion mask
00C04E  2               a_asclcl        = 'a'           ;start of lowercase ASCII
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;GLOBAL ATOMIC CONSTANTS
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	data type sizes...
00C04E  2               ;
00C04E  2               s_byte          = 1             ;byte
00C04E  2               s_word          = 2             ;word (16 bits)
00C04E  2               s_xword         = 3             ;extended word (24 bits)
00C04E  2               s_dword         = 4             ;double word (32 bits)
00C04E  2               s_rampag        = $0100         ;65xx RAM page
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	data type sizes in bits...
00C04E  2               ;
00C04E  2               s_bibyte        = 8             ;byte
00C04E  2               s_bnybbl        = 4             ;nybble
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	miscellaneous...
00C04E  2               ;
00C04E  2               bitabs          = $2c           ;absolute BIT opcode
00C04E  2               bitzp           = $24           ;zero page BIT opcode
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;W65C816S NATIVE MODE STATUS REGISTER DEFINITIONS
00C04E  2               ;
00C04E  2               s_mpudbx        = s_byte        ;data bank size
00C04E  2               s_mpudpx        = s_word        ;direct page size
00C04E  2               s_mpupbx        = s_byte        ;program bank size
00C04E  2               s_mpupcx        = s_word        ;program counter size
00C04E  2               s_mpuspx        = s_word        ;stack pointer size
00C04E  2               s_mpusrx        = s_byte        ;status size
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	status register flags...
00C04E  2               ;
00C04E  2               sr_car          = %00000001     ;C
00C04E  2               sr_zer          = sr_car<<1     ;Z
00C04E  2               sr_irq          = sr_zer<<1     ;I
00C04E  2               sr_bdm          = sr_irq<<1     ;D
00C04E  2               sr_ixw          = sr_bdm<<1     ;x
00C04E  2               sr_amw          = sr_ixw<<1     ;m
00C04E  2               sr_ovl          = sr_amw<<1     ;V
00C04E  2               sr_neg          = sr_ovl<<1     ;N
00C04E  2               ;
00C04E  2               ;	NVmxDIZC
00C04E  2               ;	xxxxxxxx
00C04E  2               ;	||||||||
00C04E  2               ;	|||||||+---> 1 = carry set/generated
00C04E  2               ;	||||||+----> 1 = result = zero
00C04E  2               ;	|||||+-----> 1 = IRQs ignored
00C04E  2               ;	||||+------> 0 = binary arithmetic mode
00C04E  2               ;	||||         1 = decimal arithmetic mode
00C04E  2               ;	|||+-------> 0 = 16 bit index
00C04E  2               ;	|||          1 = 8 bit index
00C04E  2               ;	||+--------> 0 = 16 bit .A & memory
00C04E  2               ;	||           1 = 8 bit .A & memory
00C04E  2               ;	|+---------> 1 = sign overflow
00C04E  2               ;	+----------> 1 = result = negative
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;"SIZE-OF" CONSTANTS
00C04E  2               ;
00C04E  2               s_addr          = s_xword       ;24 bit address
00C04E  2               s_auxbuf        = 32            ;auxiliary buffer
00C04E  2               s_ibuf          = 69            ;input buffer
00C04E  2               s_mnemon        = 3             ;MPU ASCII mnemonic
00C04E  2               s_mnepck        = 2             ;MPU encoded mnemonic
00C04E  2               s_mvinst        = 3             ;MVN/MVP instruction
00C04E  2               s_opcode        = s_byte        ;MPU opcode
00C04E  2               s_oper          = s_xword       ;operand
00C04E  2               s_pfac          = s_dword       ;primary math accumulator
00C04E  2               s_sfac          = s_dword+s_word;secondary math accumulators
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;"NUMBER-OF" CONSTANTS
00C04E  2               ;
00C04E  2               n_dbytes        = 21            ;default disassembly bytes
00C04E  2               n_dump          = 8             ;bytes per memory dump line
00C04E  2               n_mbytes        = s_rampag-1    ;default memory dump bytes
00C04E  2               n_hccols        = 10            ;compare/hunt display columns
00C04E  2               n_opcols        = 3*s_oper      ;disassembly operand columns
00C04E  2               n_opslsr        = 4             ;LSRs to extract instruction size
00C04E  2               n_shfenc        = 5             ;shifts to encode/decode mnemonic
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;NUMERIC CONVERSION CONSTANTS
00C04E  2               ;
00C04E  2               a_hexdec        = 'A'-'9'-2     ;hex to decimal difference
00C04E  2               c_bin           = '%'           ;binary prefix
00C04E  2               c_dec           = '+'           ;decimal prefix
00C04E  2               c_hex           = '$'           ;hexadecimal prefix
00C04E  2               c_oct           = '@'           ;octal prefix
00C04E  2               k_hex           = 'f'           ;hex ASCII conversion
00C04E  2               m_bits          = s_pfac*s_bibyte;operand bit size
00C04E  2               m_cbits         = s_sfac*s_bibyte;workspace bit size
00C04E  2               bcdumask        = %00001111     ;isolate BCD units mask
00C04E  2               btoamask        = %00110000     ;binary to ASCII mask
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;ASSEMBLER/DISASSEMBLER CONSTANTS
00C04E  2               ;
00C04E  2               a_mnecvt        = '?'           ;encoded mnemonic conversion base
00C04E  2               aimmaska        = %00011111     ;.A immediate opcode test #1
00C04E  2               aimmaskb        = %00001001     ;.A immediate opcode test #2
00C04E  2               asmprfx         = 'A'           ;assemble code prefix
00C04E  2               ascprmct        = 9             ;assembler prompt "size-of"
00C04E  2               disprfx         = '.'           ;disassemble code prefix
00C04E  2               flimmask        = %11000000     ;force long immediate flag
00C04E  2               opc_cpxi        = $e0           ;CPX # opcode
00C04E  2               opc_cpyi        = $c0           ;CPY # opcode
00C04E  2               opc_ldxi        = $a2           ;LDX # opcode
00C04E  2               opc_ldyi        = $a0           ;LDY # opcode
00C04E  2               opc_mvn         = $54           ;MVN opcode
00C04E  2               opc_mvp         = $44           ;MVP opcode
00C04E  2               opc_rep         = $c2           ;REP opcode
00C04E  2               opc_sep         = $e2           ;SEP opcode
00C04E  2               pfmxmask        = sr_amw|sr_ixw ;MPU m & x flag bits mask
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	assembler prompt buffer offsets...
00C04E  2               ;
00C04E  2               apadrbkh        = s_word        ;instruction address bank MSN
00C04E  2               apadrbkl        = apadrbkh+s_byte;instruction address bank LSN
00C04E  2               apadrmbh        = apadrbkl+s_byte;instruction address MSB MSN
00C04E  2               apadrmbl        = apadrmbh+s_byte;instruction address MSB LSN
00C04E  2               apadrlbh        = apadrmbl+s_byte;instruction address LSB MSN
00C04E  2               apadrlbl        = apadrlbh+s_byte;instruction address LSB LSN
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	addressing mode preamble symbols...
00C04E  2               ;
00C04E  2               amp_flim        = '!'           ;force long immediate
00C04E  2               amp_imm         = '#'           ;immediate
00C04E  2               amp_ind         = '('           ;indirect
00C04E  2               amp_indl        = '['           ;indirect long
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	addressing mode symbolic translation indices...
00C04E  2               ;
00C04E  2               am_nam          = %0000         ;no symbol
00C04E  2               am_imm          = %0001         ;#
00C04E  2               am_adrx         = %0010         ;<addr>,X
00C04E  2               am_adry         = %0011         ;<addr>,Y
00C04E  2               am_ind          = %0100         ;(<addr>)
00C04E  2               am_indl         = %0101         ;[<dp>]
00C04E  2               am_indly        = %0110         ;[<dp>],Y
00C04E  2               am_indx         = %0111         ;(<addr>,X)
00C04E  2               am_indy         = %1000         ;(<dp>),Y
00C04E  2               am_stk          = %1001         ;<offset>,S
00C04E  2               am_stky         = %1010         ;(<offset>,S),Y
00C04E  2               am_move         = %1011         ;<sbnk>,<dbnk>
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	operand size translation indices...
00C04E  2               ;
00C04E  2               ops0            = %0000<<4      ;no operand
00C04E  2               ops1            = %0001<<4      ;8 bit operand
00C04E  2               ops2            = %0010<<4      ;16 bit operand
00C04E  2               ops3            = %0011<<4      ;24 bit operand
00C04E  2               bop1            = %0101<<4      ;8 bit relative branch
00C04E  2               bop2            = %0110<<4      ;16 bit relative branch
00C04E  2               vops            = %1001<<4      ;8 or 16 bit operand
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	operand size & addressing mode extraction masks...
00C04E  2               ;
00C04E  2               amodmask        = %00001111     ;addressing mode index
00C04E  2               opsmask         = %00110000     ;operand size
00C04E  2               vopsmask        = %11000000     ;BOPx & VOPS flag bits
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	instruction mnemonic encoding...
00C04E  2               ;
00C04E  2               mne_adc         = $2144         ;ADC
00C04E  2               mne_and         = $2bc4         ;AND
00C04E  2               mne_asl         = $6d04         ;ASL
00C04E  2               mne_bcc         = $2106         ;BCC
00C04E  2               mne_bcs         = $a106         ;BCS
00C04E  2               mne_beq         = $9186         ;BEQ
00C04E  2               mne_bit         = $aa86         ;BIT
00C04E  2               mne_bmi         = $5386         ;BMI
00C04E  2               mne_bne         = $33c6         ;BNE
00C04E  2               mne_bpl         = $6c46         ;BPL
00C04E  2               mne_bra         = $14c6         ;BRA
00C04E  2               mne_brk         = $64c6         ;BRK
00C04E  2               mne_brl         = $6cc6         ;BRL
00C04E  2               mne_bvc         = $25c6         ;BVC
00C04E  2               mne_bvs         = $a5c6         ;BVS
00C04E  2               mne_clc         = $2348         ;CLC
00C04E  2               mne_cld         = $2b48         ;CLD
00C04E  2               mne_cli         = $5348         ;CLI
00C04E  2               mne_clv         = $bb48         ;CLV
00C04E  2               mne_cmp         = $8b88         ;CMP
00C04E  2               mne_cop         = $8c08         ;COP
00C04E  2               mne_cpx         = $cc48         ;CPX
00C04E  2               mne_cpy         = $d448         ;CPY
00C04E  2               mne_dec         = $218a         ;DEC
00C04E  2               mne_dex         = $c98a         ;DEX
00C04E  2               mne_dey         = $d18a         ;DEY
00C04E  2               mne_eor         = $9c0c         ;EOR
00C04E  2               mne_inc         = $23d4         ;INC
00C04E  2               mne_inx         = $cbd4         ;INX
00C04E  2               mne_iny         = $d3d4         ;INY
00C04E  2               mne_jml         = $6b96         ;JML
00C04E  2               mne_jmp         = $8b96         ;JMP
00C04E  2               mne_jsl         = $6d16         ;JSL
00C04E  2               mne_jsr         = $9d16         ;JSR
00C04E  2               mne_lda         = $115a         ;LDA
00C04E  2               mne_ldx         = $c95a         ;LDX
00C04E  2               mne_ldy         = $d15a         ;LDY
00C04E  2               mne_lsr         = $9d1a         ;LSR
00C04E  2               mne_mvn         = $7ddc         ;MVN
00C04E  2               mne_mvp         = $8ddc         ;MVP
00C04E  2               mne_nop         = $8c1e         ;NOP
00C04E  2               mne_ora         = $14e0         ;ORA
00C04E  2               mne_pea         = $11a2         ;PEA
00C04E  2               mne_pei         = $51a2         ;PEI
00C04E  2               mne_per         = $99a2         ;PER
00C04E  2               mne_pha         = $1262         ;PHA
00C04E  2               mne_phb         = $1a62         ;PHB
00C04E  2               mne_phd         = $2a62         ;PHD
00C04E  2               mne_phk         = $6262         ;PHK
00C04E  2               mne_php         = $8a62         ;PHP
00C04E  2               mne_phx         = $ca62         ;PHX
00C04E  2               mne_phy         = $d262         ;PHY
00C04E  2               mne_pla         = $1362         ;PLA
00C04E  2               mne_plb         = $1b62         ;PLB
00C04E  2               mne_pld         = $2b62         ;PLD
00C04E  2               mne_plp         = $8b62         ;PLP
00C04E  2               mne_plx         = $cb62         ;PLX
00C04E  2               mne_ply         = $d362         ;PLY
00C04E  2               mne_rep         = $89a6         ;REP
00C04E  2               mne_rol         = $6c26         ;ROL
00C04E  2               mne_ror         = $9c26         ;ROR
00C04E  2               mne_rti         = $5566         ;RTI
00C04E  2               mne_rtl         = $6d66         ;RTL
00C04E  2               mne_rts         = $a566         ;RTS
00C04E  2               mne_sbc         = $20e8         ;SBC
00C04E  2               mne_sec         = $21a8         ;SEC
00C04E  2               mne_sed         = $29a8         ;SED
00C04E  2               mne_sei         = $51a8         ;SEI
00C04E  2               mne_sep         = $89a8         ;SEP
00C04E  2               mne_sta         = $1568         ;STA
00C04E  2               mne_stp         = $8d68         ;STP
00C04E  2               mne_stx         = $cd68         ;STX
00C04E  2               mne_sty         = $d568         ;STY
00C04E  2               mne_stz         = $dd68         ;STZ
00C04E  2               mne_tax         = $c8aa         ;TAX
00C04E  2               mne_tay         = $d0aa         ;TAY
00C04E  2               mne_tcd         = $292a         ;TCD
00C04E  2               mne_tcs         = $a12a         ;TCS
00C04E  2               mne_tdc         = $216a         ;TDC
00C04E  2               mne_trb         = $1cea         ;TRB
00C04E  2               mne_tsb         = $1d2a         ;TSB
00C04E  2               mne_tsc         = $252a         ;TSC
00C04E  2               mne_tsx         = $cd2a         ;TSX
00C04E  2               mne_txa         = $166a         ;TXA
00C04E  2               mne_txs         = $a66a         ;TXS
00C04E  2               mne_txy         = $d66a         ;TXY
00C04E  2               mne_tya         = $16aa         ;TYA
00C04E  2               mne_tyx         = $ceaa         ;TYX
00C04E  2               mne_wai         = $50b0         ;WAI
00C04E  2               mne_wdm         = $7170         ;WDM
00C04E  2               mne_xba         = $10f2         ;XBA
00C04E  2               mne_xce         = $3132         ;XCE
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	encoded instruction mnemonic indices...
00C04E  2               ;
00C04E  2               mne_adcx        = 16            ;ADC
00C04E  2               mne_andx        = 29            ;AND
00C04E  2               mne_aslx        = 44            ;ASL
00C04E  2               mne_bccx        = 15            ;BCC
00C04E  2               mne_bcsx        = 65            ;BCS
00C04E  2               mne_beqx        = 59            ;BEQ
00C04E  2               mne_bitx        = 70            ;BIT
00C04E  2               mne_bmix        = 36            ;BMI
00C04E  2               mne_bnex        = 31            ;BNE
00C04E  2               mne_bplx        = 42            ;BPL
00C04E  2               mne_brax        = 5             ;BRA
00C04E  2               mne_brkx        = 39            ;BRK
00C04E  2               mne_brlx        = 43            ;BRL
00C04E  2               mne_bvcx        = 23            ;BVC
00C04E  2               mne_bvsx        = 68            ;BVS
00C04E  2               mne_clcx        = 20            ;CLC
00C04E  2               mne_cldx        = 27            ;CLD
00C04E  2               mne_clix        = 35            ;CLI
00C04E  2               mne_clvx        = 71            ;CLV
00C04E  2               mne_cmpx        = 53            ;CMP
00C04E  2               mne_copx        = 55            ;COP
00C04E  2               mne_cpxx        = 78            ;CPX
00C04E  2               mne_cpyx        = 88            ;CPY
00C04E  2               mne_decx        = 18            ;DEC
00C04E  2               mne_dexx        = 74            ;DEX
00C04E  2               mne_deyx        = 84            ;DEY
00C04E  2               mne_eorx        = 61            ;EOR
00C04E  2               mne_incx        = 21            ;INC
00C04E  2               mne_inxx        = 77            ;INX
00C04E  2               mne_inyx        = 87            ;INY
00C04E  2               mne_jmlx        = 40            ;JML
00C04E  2               mne_jmpx        = 54            ;JMP
00C04E  2               mne_jslx        = 45            ;JSL
00C04E  2               mne_jsrx        = 63            ;JSR
00C04E  2               mne_ldax        = 1             ;LDA
00C04E  2               mne_ldxx        = 73            ;LDX
00C04E  2               mne_ldyx        = 83            ;LDY
00C04E  2               mne_lsrx        = 64            ;LSR
00C04E  2               mne_mvnx        = 48            ;MVN
00C04E  2               mne_mvpx        = 58            ;MVP
00C04E  2               mne_nopx        = 56            ;NOP
00C04E  2               mne_orax        = 6             ;ORA
00C04E  2               mne_peax        = 2             ;PEA
00C04E  2               mne_peix        = 33            ;PEI
00C04E  2               mne_perx        = 60            ;PER
00C04E  2               mne_phax        = 3             ;PHA
00C04E  2               mne_phbx        = 10            ;PHB
00C04E  2               mne_phdx        = 26            ;PHD
00C04E  2               mne_phkx        = 38            ;PHK
00C04E  2               mne_phpx        = 51            ;PHP
00C04E  2               mne_phxx        = 75            ;PHX
00C04E  2               mne_phyx        = 85            ;PHY
00C04E  2               mne_plax        = 4             ;PLA
00C04E  2               mne_plbx        = 11            ;PLB
00C04E  2               mne_pldx        = 28            ;PLD
00C04E  2               mne_plpx        = 52            ;PLP
00C04E  2               mne_plxx        = 76            ;PLX
00C04E  2               mne_plyx        = 86            ;PLY
00C04E  2               mne_repx        = 49            ;REP
00C04E  2               mne_rolx        = 41            ;ROL
00C04E  2               mne_rorx        = 62            ;ROR
00C04E  2               mne_rtix        = 37            ;RTI
00C04E  2               mne_rtlx        = 46            ;RTL
00C04E  2               mne_rtsx        = 67            ;RTS
00C04E  2               mne_sbcx        = 14            ;SBC
00C04E  2               mne_secx        = 19            ;SEC
00C04E  2               mne_sedx        = 25            ;SED
00C04E  2               mne_seix        = 34            ;SEI
00C04E  2               mne_sepx        = 50            ;SEP
00C04E  2               mne_stax        = 7             ;STA
00C04E  2               mne_stpx        = 57            ;STP
00C04E  2               mne_stxx        = 80            ;STX
00C04E  2               mne_styx        = 89            ;STY
00C04E  2               mne_stzx        = 91            ;STZ
00C04E  2               mne_taxx        = 72            ;TAX
00C04E  2               mne_tayx        = 82            ;TAY
00C04E  2               mne_tcdx        = 24            ;TCD
00C04E  2               mne_tcsx        = 66            ;TCS
00C04E  2               mne_tdcx        = 17            ;TDC
00C04E  2               mne_trbx        = 12            ;TRB
00C04E  2               mne_tsbx        = 13            ;TSB
00C04E  2               mne_tscx        = 22            ;TSC
00C04E  2               mne_tsxx        = 79            ;TSX
00C04E  2               mne_txax        = 8             ;TXA
00C04E  2               mne_txsx        = 69            ;TXS
00C04E  2               mne_txyx        = 90            ;TXY
00C04E  2               mne_tyax        = 9             ;TYA
00C04E  2               mne_tyxx        = 81            ;TYX
00C04E  2               mne_waix        = 32            ;WAI
00C04E  2               mne_wdmx        = 47            ;WDM
00C04E  2               mne_xbax        = 0             ;XBA
00C04E  2               mne_xcex        = 30            ;XCE
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;MISCELLANEOUS CONSTANTS
00C04E  2               ;
00C04E  2               halftab         = 4             ;1/2 tabulation spacing
00C04E  2               memprfx         = '>'           ;memory dump prefix
00C04E  2               memsepch        = ':'           ;memory dump separator
00C04E  2               memsubch        = '.'           ;memory dump non-print char
00C04E  2               srinit          = %00110000     ;SR initialization value
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;DIRECT PAGE STORAGE
00C04E  2               ;
00C04E  2               reg_pbx         = zeropage      ;PB
00C04E  2               reg_pcx         = reg_pbx+s_mpupbx;PC
00C04E  2               reg_srx         = reg_pcx+s_mpupcx;SR
00C04E  2               reg_ax          = reg_srx+s_mpusrx;.C
00C04E  2               reg_xx          = reg_ax+s_word ;.X
00C04E  2               reg_yx          = reg_xx+s_word ;.Y
00C04E  2               reg_spx         = reg_yx+s_word ;SP
00C04E  2               reg_dpx         = reg_spx+s_mpuspx;DP
00C04E  2               reg_dbx         = reg_dpx+s_mpudpx;DB
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	general workspace...
00C04E  2               ;
00C04E  2               addra           = reg_dbx+s_mpudbx;address #1
00C04E  2               addrb           = addra+s_addr  ;address #2
00C04E  2               faca            = addrb+s_addr  ;primary accumulator
00C04E  2               facax           = faca+s_pfac   ;extended primary accumulator
00C04E  2               facb            = facax+s_pfac  ;secondary accumulator
00C04E  2               facc            = facb+s_sfac   ;tertiary accumulator
00C04E  2               operand         = facc+s_sfac   ;instruction operand
00C04E  2               auxbufix        = operand+s_oper;auxiliary buffer index
00C04E  2               ibufidx         = auxbufix+s_byte;input buffer index
00C04E  2               bitsdig         = ibufidx+s_byte;bits per numeral
00C04E  2               numeral         = bitsdig+s_byte;numeral buffer
00C04E  2               radix           = numeral+s_byte;radix index
00C04E  2               admodidx        = radix+s_byte  ;addressing mode index
00C04E  2               charcnt         = admodidx+s_byte;character counter
00C04E  2               instsize        = charcnt+s_word;instruction size
00C04E  2               mnepck          = instsize+s_word;encoded mnemonic
00C04E  2               opcode          = mnepck+s_mnepck;current opcode
00C04E  2               status          = opcode+s_byte ;I/O status flag
00C04E  2               xrtemp          = status+s_byte ;temp .X storage
00C04E  2               eopsize         = xrtemp+s_byte ;entered operand size
00C04E  2               flimflag        = eopsize+s_byte;forced long immediate...
00C04E  2               vecbrkia        = flimflag+s_byte;system indirect BRK vector
00C04E  2               ;
00C04E  2               ;	xx000000
00C04E  2               ;	||
00C04E  2               ;	|+---------> 0: .X/.Y =  8 bits
00C04E  2               ;	|            1: .X/.Y =  18 bits
00C04E  2               ;	+----------> 0: .A =  8 bits
00C04E  2               ;	             1: .A =  16 bits
00C04E  2               ;
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;	During assembly, FLIMFLAG indicates the operand size used with an immed-
00C04E  2               ;	iate mode instruction, thus causing the following disassembly to display
00C04E  2               ;	the assembled  operand size.   During disassembly,  FLIMFLAG will mirror
00C04E  2               ;	the effect of the most recent REP or SEP instruction.
00C04E  2               ;	------------------------------------------------------------------------
00C04E  2               ;
00C04E  2               iopsize         = flimflag+s_byte;operand size
00C04E  2               range           = iopsize+s_byte;allowable radix range
00C04E  2               vopsflag        = range+s_byte  ;VOPS & ROPS mode bits
00C04E  2               ;
00C04E  2               ;
00C04E  2               ;	copy/fill workspace (overlaps some of the above)...
00C04E  2               ;
00C04E  2               mcftwork        = faca          ;start of copy/fill code
00C04E  2               mcftopc         = mcftwork+s_byte;instruction opcode
00C04E  2               mcftbnk         = mcftopc+s_byte;banks
00C04E  2               ;
00C04E  2               ;================================================================================
00C04E  2               ;
00C04E  2               ;SUPERMON 816 JUMP TABLE
00C04E  2               ;
00C04E  2               ;
00C04E  2               JMON:
00C04E  2  80 02                BRA     mon             ;cold start entry
00C050  2               JMONBRK:
00C050  2  80 4C                BRA     monbrk          ;software interrupt intercept
00C052  2               ;
00C052  2               ;
00C052  2               ;================================================================================
00C052  2               ;
00C052  2               ;mon: SUPERMON 816 COLD START
00C052  2               ;
00C052  2               mon:
00C052  2  C2 10                INDEX16
00C054  2  E2 20                ACCUMULATOR8
00C056  2  A0 00 00             LDY     #$0000          ; LOAD $00 INTO Y
00C059  2               OUTSTRLP:
00C059  2  B9 EB D0             LDA     ALIVEM,Y        ; LOAD NEXT CHAR FROM STRING INTO ACC
00C05C  2  C9 00                CMP     #$00            ; IS NULL?
00C05E  2  F0 07                BEQ     ENDOUTSTR       ; YES, END PRINT OUT
00C060  2  20 71 FF             JSR     putcha          ; PRINT CHAR IN ACC
00C063  2  C8                   INY                     ; Y=Y+1 (BUMP INDEX)
00C064  2  4C 59 C0             JMP     OUTSTRLP        ; DO NEXT CHAR
00C067  2               ENDOUTSTR:
00C067  2  E2 10                INDEX8
00C069  2               
00C069  2               
00C069  2  C2 20                SLONGA
00C06B  2  AD 02 03             LDA     vecbrki         ;BRK vector
00C06E  2               ;        CMPW    monbrk          ;pointing at monitor?
00C06E  2               ;        BNE     moncontinue
00C06E  2               ;        JMP     monreg          ;yes, ignore cold start
00C06E  2               ;
00C06E  2               moncontinue:
00C06E  2  85 4D                STA     vecbrkia        ;save vector for exit
00C070  2  A9 9E C0             LDAW    monbrk          ;Supermon 816 intercepts...
00C073  2  8D 02 03             STA     vecbrki         ;BRK handler
00C076  2  E2 30                SHORTR                  ;8 bit registers
00C078  2  A2 3F                LDX     #vopsflag-reg_pbx
00C07A  2               ;
00C07A  2               _0000010:
00C07A  2  74 10                STZ     reg_pbx,x       ;clear DP storage
00C07C  2  CA                   DEX
00C07D  2  10 FB                BPL     _0000010
00C07F  2               ;
00C07F  2               ;
00C07F  2               ;	initialize register shadows...
00C07F  2               ;
00C07F  2  A9 30                LDA     #srinit
00C081  2  85 13                STA     reg_srx         ;status register
00C083  2  C2 20                SLONGA                  ;16 bit .A
00C085  2  A9 FF 7F             LDAW    hwstack         ;top of hardware stack
00C088  2  1B                   TCS                     ;set SP
00C089  2  7B                   TDC                     ;get & save...
00C08A  2  85 1C                STA     reg_dpx         ;DP register
00C08C  2  A9 00 00             LDAW    0
00C08F  2  E2 20                SHORTA
00C091  2  4B                   PHK
00C092  2  68                   PLA                     ;capture PB &...
00C093  2  85 10                STA     reg_pbx         ;set
00C095  2  8B                   PHB
00C096  2  68                   PLA                     ;capture DB &...
00C097  2  85 1E                STA     reg_dbx         ;set
00C099  2               ;
00C099  2               ;
00C099  2               ;	print startup banner...
00C099  2               ;
00C099  2  F4 61 D0             PEA     mm_entry        ;"...ready..."
00C09C  2  80 36                BRA     moncom
00C09E  2               ;
00C09E  2               ;================================================================================
00C09E  2               ;
00C09E  2               ;monbrk: SOFTWARE INTERRUPT INTERCEPT
00C09E  2               ;
00C09E  2               ;	------------------------------------------------------------------------
00C09E  2               ;	This is the entry point taken when a BRK instruction is executed.  It is
00C09E  2               ;	assumed that the BRK  handler has pushed the registers to the stack that
00C09E  2               ;	are not automatically pushed by the MPU in response to BRK.
00C09E  2               ;	------------------------------------------------------------------------
00C09E  2               ;
00C09E  2               monbrk:
00C09E  2  D8                   CLD                     ; VERIFY DECIMAL MODE IS OFF
00C09F  2  18                   CLC                     ;
00C0A0  2  FB                   XCE                     ; SET NATIVE MODE
00C0A1  2  8B                   PHB                     ;save DB
00C0A2  2  0B                   PHD                     ;save DP
00C0A3  2  C2 20                SLONGA                  ;16 bit .A
00C0A5  2  48                   PHA
00C0A6  2  A9 00 00             LDAW    $0000           ;set DPR
00C0A9  2  5B                   TCD                     ;
00C0AA  2  68                   PLA
00C0AB  2  C2 30                LONGR                   ;store 16 bit registers
00C0AD  2  85 14                STA     <reg_ax         ;.A
00C0AF  2  86 16                STX     <reg_xx         ;.X
00C0B1  2  84 18                STY     <reg_yx         ;.Y
00C0B3  2  68                   PLA                     ;get DP &...
00C0B4  2  85 1C                STA     <reg_dpx        ;store
00C0B6  2  E2 10                SHORTX
00C0B8  2  FA                   PLX                     ;get DB &...
00C0B9  2  86 1E                STX     <reg_dbx        ;store
00C0BB  2  FA                   PLX                     ;get SR &...
00C0BC  2  86 13                STX     <reg_srx        ;store
00C0BE  2  68                   PLA                     ;get PC &...
00C0BF  2  85 11                STA     <reg_pcx        ;store
00C0C1  2  FA                   PLX                     ;get PB &...
00C0C2  2  86 10                STX     <reg_pbx        ;store
00C0C4  2  C2 20                SLONGA
00C0C6  2  A9 FF 7F             LDAW    hwstack         ;top of hardware stack
00C0C9  2  1B                   TCS                     ;set SPR
00C0CA  2               ;        CLI                     ;reenable IRQs
00C0CA  2  78                   SEI                     ;Disable Interrupts
00C0CB  2  E2 20                SHORTA
00C0CD  2  A9 00                LDA     #$00            ;set DBR
00C0CF  2  48                   PHA
00C0D0  2  AB                   PLB
00C0D1  2  F4 57 D0             PEA     mm_brk          ;"*BRK"
00C0D4  2               ;
00C0D4  2               ;================================================================================
00C0D4  2               ;
00C0D4  2               ;moncom: COMMON ENTRY POINT
00C0D4  2               ;
00C0D4  2               ;	--------------------------------------
00C0D4  2               ;	DO NOT directly call this entry point!
00C0D4  2               ;	--------------------------------------
00C0D4  2               ;
00C0D4  2               moncom:
00C0D4  2  20 E0 C7             JSR     sprint          ;print heading
00C0D7  2  C2 20                SLONGA
00C0D9  2  3B                   TSC                     ;get SP &...
00C0DA  2  85 1A                STA     <reg_spx        ;store
00C0DC  2  C2 FF                REP     #%11111111      ;clear SR &...
00C0DE  2  E2 30                SEP     #srinit         ;set default state
00C0E0  2  38                   SEC                     ;see next
00C0E1  2               ;
00C0E1  2               ;================================================================================
00C0E1  2               ;
00C0E1  2               ;monreg: DISPLAY MPU REGISTERS
00C0E1  2               ;
00C0E1  2               ;	---------
00C0E1  2               ;	syntax: R
00C0E1  2               ;	---------
00C0E1  2               ;
00C0E1  2               monreg:
00C0E1  2  B0 03                BCS     _0010010        ;okay to proceed
00C0E3  2               ;
00C0E3  2  4C 7E C1             JMP     monerr          ;error if called with a parm
00C0E6  2               ;
00C0E6  2               _0010010:
00C0E6  2  F4 84 D0             PEA     mm_regs
00C0E9  2  20 E0 C7             JSR     sprint          ;display heading
00C0EC  2               ;
00C0EC  2               ;
00C0EC  2               ;	display program bank & counter...
00C0EC  2               ;
00C0EC  2  E2 20                SHORTA
00C0EE  2  A5 10                LDA     <reg_pbx        ;PB
00C0F0  2  20 B6 C7             JSR     dpyhex          ;display as hex ASCII
00C0F3  2  20 DB C7             JSR     printspc        ;inter-field space
00C0F6  2               
00C0F6  2  C2 20                SLONGA
00C0F8  2  A5 11                LDA     <reg_pcx
00C0FA  2  E2 20                SHORTA
00C0FC  2  20 A6 C7             JSR     dpyhexw         ;display PC
00C0FF  2  A2 02                LDX     #2
00C101  2  20 C0 C7             JSR     multspc         ;inter-field spacing
00C104  2               ;
00C104  2               ;
00C104  2               ;	display SR in bitwise fashion...
00C104  2               ;
00C104  2  A6 13                LDX     <reg_srx        ;SR
00C106  2  A0 08                LDY     #s_bibyte       ;bits in a byte
00C108  2               ;
00C108  2               _0010020:
00C108  2  8A                   TXA                     ;remaining SR bits
00C109  2  0A                   ASL                     ;grab one of them
00C10A  2  AA                   TAX                     ;save remainder
00C10B  2  A9 30                LDA     #'0'            ;a clear bit but...
00C10D  2  69 00                ADC     #0              ;adjust if set &...
00C10F  2  20 71 FF             JSR     putcha          ;print
00C112  2  88                   DEY                     ;bit processed
00C113  2  D0 F3                BNE     _0010020        ;do another
00C115  2               ;
00C115  2               ;
00C115  2               ;	display .C, .X, .Y, SP & DP...
00C115  2               ;
00C115  2               _0010030:
00C115  2  20 DB C7             JSR     printspc        ;spacing
00C118  2  C2 20                SLONGA
00C11A  2  B9 14 00             LDA     reg_ax,y        ;get register value
00C11D  2  E2 20                SHORTA
00C11F  2  20 A6 C7             JSR     dpyhexw         ;convert & display
00C122  2               
00C122  2               ;         .rept s_word
00C122  2  C8                   INY
00C123  2  C8                   INY
00C124  2               ;         .endr
00C124  2               
00C124  2  C0 08                CPY     #reg_dbx-reg_ax-2
00C126  2  90 ED                BCC     _0010030        ;next
00C128  2               
00C128  2  F4 AD D0             PEA     mm_regs1
00C12B  2  20 E0 C7             JSR     sprint          ;display heading
00C12E  2  C2 20                SLONGA
00C130  2  A5 1C                LDA     <reg_dpx        ;get register value
00C132  2  E2 20                SHORTA
00C134  2  20 A6 C7             JSR     dpyhexw         ;convert & display
00C137  2               ;
00C137  2               ;
00C137  2               ;	display DB...
00C137  2               ;
00C137  2  20 DB C7             JSR     printspc        ;more spacing
00C13A  2  A5 1E                LDA     <reg_dbx        ;get DB &...
00C13C  2  20 B6 C7             JSR     dpyhex          ;display it
00C13F  2               ;
00C13F  2               ;================================================================================
00C13F  2               ;
00C13F  2               ;monce: COMMAND EXECUTIVE
00C13F  2               ;
00C13F  2               monce:
00C13F  2  E2 20                SHORTA
00C141  2  A9 00                LDA     #0              ;default buffer index
00C143  2               ;
00C143  2               moncea:
00C143  2  E2 30                SHORTR                  ;alternate entry point
00C145  2  85 3D                STA     ibufidx         ;(re)set buffer index
00C147  2  F4 80 D0             PEA     mm_prmpt
00C14A  2  20 E0 C7             JSR     sprint          ;display input prompt
00C14D  2  20 ED CB             JSR     input           ;await some input
00C150  2               ;
00C150  2               _0020010:
00C150  2  20 43 CC             JSR     getcharc        ;read from buffer
00C153  2  F0 EA                BEQ     monce           ;terminator, just loop
00C155  2               ;
00C155  2  C9 20                CMP     #a_blank
00C157  2  F0 F7                BEQ     _0020010        ;strip leading blanks
00C159  2               ;
00C159  2  A2 0C                LDX     #n_mpctab-1     ;number of primary commands
00C15B  2               ;
00C15B  2               _0020020:
00C15B  2  DD FB CC             CMP     mpctab,x        ;search primary command list
00C15E  2  D0 0E                BNE     _0020030
00C160  2               ;
00C160  2  8A                   TXA                     ;get index
00C161  2  0A                   ASL                     ;double for offset
00C162  2  AA                   TAX
00C163  2  C2 20                SLONGA
00C165  2  BD 08 CD             LDA     mpcextab,x      ;command address -1
00C168  2  48                   PHA                     ;prime the stack
00C169  2  E2 20                SHORTA
00C16B  2  4C 8F CA             JMP     getparm         ;evaluate parm & execute command
00C16E  2               ;
00C16E  2               _0020030:
00C16E  2  CA                   DEX
00C16F  2  10 EA                BPL     _0020020        ;continue searching primary commands
00C171  2               ;
00C171  2  A2 03                LDX     #n_radix-1      ;number of radices
00C173  2               ;
00C173  2               _0020040:
00C173  2  DD 36 CD             CMP     radxtab,x       ;search conversion command list
00C176  2  D0 03                BNE     _0020050
00C178  2               ;
00C178  2  4C C6 C5             JMP     monenv          ;convert & display parameter
00C17B  2               ;
00C17B  2               _0020050:
00C17B  2  CA                   DEX
00C17C  2  10 F5                BPL     _0020040
00C17E  2               ;
00C17E  2               ;================================================================================
00C17E  2               ;
00C17E  2               ;monerr: COMMON ERROR HANDLER
00C17E  2               ;
00C17E  2               monerr:
00C17E  2  E2 30                SHORTR                  ;8 bit registers
00C180  2               ;
00C180  2               monerraa:
00C180  2  20 8D C7             JSR     dpyerr          ;indicate an error &...
00C183  2  80 BA                BRA     monce           ;return to input loop
00C185  2               
00C185  2               ;
00C185  2               ;================================================================================
00C185  2               ;
00C185  2               ;monasc: ASSEMBLE CODE
00C185  2               ;
00C185  2               ;	-----------------------------------------------------------------------
00C185  2               ;	syntax: A <addr> <mnemonic> [<argument>]
00C185  2               ;
00C185  2               ;	After a line of code has been successfully assembled it will be disass-
00C185  2               ;	embled & displayed,  & the monitor will prompt with the next address to
00C185  2               ;	which code may be assembled.
00C185  2               ;	-----------------------------------------------------------------------
00C185  2               ;
00C185  2               monasc:
00C185  2  90 03                BCC     _0030020        ;assembly address entered
00C187  2               ;
00C187  2               _0030010:
00C187  2  4C 7E C1             JMP     monerr          ;terminate w/error
00C18A  2               ;
00C18A  2               ;
00C18A  2               ;	evaluate assembly address...
00C18A  2               ;
00C18A  2               _0030020:
00C18A  2  20 7F CA             JSR     facasize        ;check address...
00C18D  2  C9 04                CMP     #s_dword        ;range
00C18F  2  B0 F6                BCS     _0030010        ;out of range - error
00C191  2               ;
00C191  2  20 61 CA             JSR     facaddra        ;store assembly address
00C194  2               ;
00C194  2               ;
00C194  2               ;	initialize workspace...
00C194  2               ;
00C194  2  A2 1F                LDX     #s_auxbuf-s_byte
00C196  2               ;
00C196  2               _0030030:
00C196  2  9E 46 02             STZ     auxbuf,x        ;clear addressing mode buffer
00C199  2  CA                   DEX
00C19A  2  D0 FA                BNE     _0030030
00C19C  2               ;
00C19C  2  A9 20                LDA     #a_blank
00C19E  2  8D 46 02             STA     auxbuf          ;preamble placeholder
00C1A1  2  20 E5 C9             JSR     clroper         ;clear operand
00C1A4  2  64 3C                STZ     auxbufix        ;reset addressing mode index
00C1A6  2  64 4C                STZ     flimflag        ;clear forced long immediate
00C1A8  2  64 46                STZ     mnepck          ;clear encoded...
00C1AA  2  64 47                STZ     mnepck+s_byte   ;mnemonic workspace
00C1AC  2  64 4F                STZ     vopsflag        ;clear 8/16 or relative flag
00C1AE  2               ;
00C1AE  2               ;
00C1AE  2               ;	encode mnemonic...
00C1AE  2               ;
00C1AE  2  A0 03                LDY     #s_mnemon       ;expected mnemonic size
00C1B0  2               ;
00C1B0  2               _0030040:
00C1B0  2  20 DE CB             JSR     getcharw        ;get from buffer wo/whitespace
00C1B3  2  D0 0A                BNE     _0030060        ;gotten
00C1B5  2               ;
00C1B5  2  C0 03                CPY     #s_mnemon       ;any input at all?
00C1B7  2  90 03                BCC     _0030050        ;yes
00C1B9  2               ;
00C1B9  2  4C 3F C1             JMP     monce           ;no, abort further assembly
00C1BC  2               ;
00C1BC  2               _0030050:
00C1BC  2  4C 5C C3             JMP     monasc10        ;incomplete mnemonic - error
00C1BF  2               ;
00C1BF  2               _0030060:
00C1BF  2  38                   SEC
00C1C0  2  E9 3F                SBC     #a_mnecvt       ;ASCII to binary factor
00C1C2  2  A2 05                LDX     #n_shfenc       ;shifts required to encode
00C1C4  2               ;
00C1C4  2               _0030070:
00C1C4  2  4A                   LSR                     ;shift out a bit...
00C1C5  2  66 47                ROR     mnepck+s_byte   ;into...
00C1C7  2  66 46                ROR     mnepck          ;encoded mnemonic
00C1C9  2  CA                   DEX
00C1CA  2  D0 F8                BNE     _0030070        ;next bit
00C1CC  2               ;
00C1CC  2  88                   DEY
00C1CD  2  D0 E1                BNE     _0030040        ;get next char
00C1CF  2               ;
00C1CF  2               ;
00C1CF  2               ;	test for copy instruction...
00C1CF  2               ;	------------------------------------------------------------------------
00C1CF  2               ;	The MVN & MVP instructions accept two operands & hence have an irregular
00C1CF  2               ;	syntax.  Therefore, special handling is necessary to assemble either of
00C1CF  2               ;	these instructions.
00C1CF  2               ;
00C1CF  2               ;	The official WDC syntax has the programmer entering a pair of 24 bit ad-
00C1CF  2               ;	dresses as operands, with the assembler isolating bits 16-23 to	use as
00C1CF  2               ;	operands.  This formality has been dispensed with in this monitor & the
00C1CF  2               ;	operands are expected to be 8 bit bank values.
00C1CF  2               ;	------------------------------------------------------------------------
00C1CF  2               ;
00C1CF  2  C2 20                SLONGA                  ;16 bit load
00C1D1  2  A5 46                LDA     mnepck          ;packed menmonic
00C1D3  2  A2 54                LDX     #opc_mvn        ;MVN opcode
00C1D5  2  C9 DC 7D             CMPW    mne_mvn         ;is it MVN?
00C1D8  2  F0 07                BEQ     monasc01        ;yes
00C1DA  2               ;
00C1DA  2  A2 44                LDX     #opc_mvp        ;MVP opcode
00C1DC  2  C9 DC 8D             CMPW    mne_mvp         ;is it MVP?
00C1DF  2  D0 30                BNE     monasc02        ;no
00C1E1  2               ;
00C1E1  2               ;
00C1E1  2               ;	assemble copy instruction...
00C1E1  2               ;
00C1E1  2               monasc01:
00C1E1  2  86 48                STX     opcode          ;store relevant opcode
00C1E3  2  E2 20                SHORTA
00C1E5  2  20 ED CA             JSR     instdata        ;get instruction data
00C1E8  2  86 4B                STX     eopsize         ;effective operand size
00C1EA  2  E8                   INX
00C1EB  2  86 44                STX     instsize        ;instruction size
00C1ED  2  A2 01                LDX     #s_oper-s_word  ;operand index
00C1EF  2  86 4A                STX     xrtemp          ;set it
00C1F1  2               ;
00C1F1  2               _0040010:
00C1F1  2  20 F9 C7             JSR     ascbin          ;evaluate bank number
00C1F4  2  B0 50                BCS     monasc04        ;conversion error
00C1F6  2               ;
00C1F6  2  F0 4E                BEQ     monasc04        ;nothing returned - error
00C1F8  2               ;
00C1F8  2  20 7F CA             JSR     facasize        ;bank must be...
00C1FB  2  C9 02                CMP     #s_word         ;8 bits
00C1FD  2  B0 47                BCS     monasc04        ;it isn't - error
00C1FF  2               ;
00C1FF  2  A5 25                LDA     faca            ;bank
00C201  2  A6 4A                LDX     xrtemp          ;operand index
00C203  2  95 39                STA     operand,x       ;store
00C205  2  C6 4A                DEC     xrtemp          ;index=index-1
00C207  2  10 E8                BPL     _0040010        ;get destination bank
00C209  2               ;
00C209  2  20 7E CB             JSR     getcharr        ;should be no more input
00C20C  2  D0 38                BNE     monasc04        ;there is - error
00C20E  2               ;
00C20E  2  4C 0C C3             JMP     monasc08        ;finish MVN/MVP assembly
00C211  2               ;
00C211  2               ;
00C211  2               ;	continue with normal assembly...
00C211  2               ;
00C211  2               monasc02:
00C211  2  E2 20                SHORTA                  ;back to 8 bits
00C213  2               ;
00C213  2               monasc03:
00C213  2  20 DE CB             JSR     getcharw        ;get next char
00C216  2  F0 3D                BEQ     monasc06        ;EOI, no argument
00C218  2               ;
00C218  2  C9 21                CMP     #amp_flim
00C21A  2  D0 0A                BNE     _0050010        ;no forced long immediate
00C21C  2               ;
00C21C  2  A5 4C                LDA     flimflag        ;FLIM already set?
00C21E  2  D0 26                BNE     monasc04        ;yes - error
00C220  2               ;
00C220  2  A9 C0                LDA     #flimmask
00C222  2  85 4C                STA     flimflag        ;set flag &...
00C224  2  80 ED                BRA     monasc03        ;get next char
00C226  2               ;
00C226  2               _0050010:
00C226  2  C9 23                CMP     #amp_imm        ;immediate mode?
00C228  2  F0 08                BEQ     _0050020        ;yes
00C22A  2               ;
00C22A  2  C9 28                CMP     #amp_ind        ;indirect mode?
00C22C  2  F0 04                BEQ     _0050020        ;yes
00C22E  2               ;
00C22E  2  C9 5B                CMP     #amp_indl       ;indirect long mode?
00C230  2  D0 07                BNE     _0050030        ;no
00C232  2               ;
00C232  2               _0050020:
00C232  2  8D 46 02             STA     auxbuf          ;set addressing mode preamble
00C235  2  E6 3C                INC     auxbufix        ;bump aux buffer index &...
00C237  2  80 02                BRA     _0050040        ;evaluate operand
00C239  2               ;
00C239  2               _0050030:
00C239  2  C6 3D                DEC     ibufidx         ;position back to char
00C23B  2               ;
00C23B  2               _0050040:
00C23B  2  20 F9 C7             JSR     ascbin          ;evaluate operand
00C23E  2  D0 09                BNE     monasc05        ;evaluated
00C240  2               ;
00C240  2  B0 04                BCS     monasc04        ;conversion error
00C242  2               ;
00C242  2  A5 3C                LDA     auxbufix        ;no operand...any preamble?
00C244  2  F0 0F                BEQ     monasc06        ;no, syntax is okay so far
00C246  2               ;
00C246  2               monasc04:
00C246  2  4C 5C C3             JMP     monasc10        ;abort w/error
00C249  2               ;
00C249  2               monasc05:
00C249  2  20 7F CA             JSR     facasize        ;size operand
00C24C  2  C9 04                CMP     #s_dword        ;max is 24 bits
00C24E  2  B0 F6                BCS     monasc04        ;too big
00C250  2               ;
00C250  2  85 4B                STA     eopsize         ;save operand size
00C252  2  20 75 CA             JSR     facaoper        ;store operand
00C255  2               ;
00C255  2               monasc06:
00C255  2  C6 3D                DEC     ibufidx         ;back to last char
00C257  2  A6 3C                LDX     auxbufix        ;mode buffer index
00C259  2  D0 01                BNE     _0060010        ;preamble in buffer
00C25B  2               ;
00C25B  2  E8                   INX                     ;step past preamble position
00C25C  2               ;
00C25C  2               _0060010:
00C25C  2  20 43 CC             JSR     getcharc        ;get a char w/forced UC
00C25F  2  F0 0A                BEQ     _0060030        ;EOI
00C261  2               ;
00C261  2  E0 20                CPX     #s_auxbuf       ;mode buffer full?
00C263  2  B0 E1                BCS     monasc04        ;yes, too much input
00C265  2               ;
00C265  2               _0060020:
00C265  2  9D 46 02             STA     auxbuf,x        ;store for comparison
00C268  2  E8                   INX
00C269  2  D0 F1                BNE     _0060010
00C26B  2               ;
00C26B  2               ;
00C26B  2               ;	evaluate mnemonic...
00C26B  2               ;
00C26B  2               _0060030:
00C26B  2  A2 5B                LDX     #n_mnemon-1     ;starting mnemonic index
00C26D  2               ;
00C26D  2               monasc07:
00C26D  2  8A                   TXA                     ;convert index...
00C26E  2  0A                   ASL                     ;to offset
00C26F  2  A8                   TAY                     ;now mnemonic table index
00C270  2  C2 20                SLONGA                  ;16 bit compare
00C272  2  B9 43 CD             LDA     mnetab,y        ;get mnemonic from table
00C275  2  C5 46                CMP     mnepck          ;compare to entered mnemonic
00C277  2  E2 20                SHORTA                  ;back to 8 bits
00C279  2  F0 05                BEQ     _0070020        ;match
00C27B  2               ;
00C27B  2               _0070010:
00C27B  2  CA                   DEX                     ;try next mnemonic
00C27C  2  30 C8                BMI     monasc04        ;unknown mnemonic - error
00C27E  2               ;
00C27E  2  80 ED                BRA     monasc07        ;keep going
00C280  2               ;
00C280  2               _0070020:
00C280  2  86 46                STX     mnepck          ;save mnemonic index
00C282  2  8A                   TXA
00C283  2  A2 00                LDX     #0              ;trial opcode
00C285  2               ;
00C285  2               _0070030:
00C285  2  DD FB CD             CMP     mnetabix,x      ;search index table...
00C288  2  F0 05                BEQ     _0070050        ;for a match
00C28A  2               ;
00C28A  2               _0070040:
00C28A  2  E8                   INX                     ;keep going until we...
00C28B  2  D0 F8                BNE     _0070030        ;search entire table
00C28D  2               ;
00C28D  2  80 B7                BRA     monasc04        ;this shouldn't happen!
00C28F  2               ;
00C28F  2               ;	---------------------------------------------------------------------
00C28F  2               ;	If the mnemonic index table search fails then there is a coding error
00C28F  2               ;	somewhere, as every entry in the mnemonic table is supposed to have a
00C28F  2               ;	matching cardinal index.
00C28F  2               ;	---------------------------------------------------------------------
00C28F  2               ;
00C28F  2               ;
00C28F  2               ;	evaluate addressing mode...
00C28F  2               ;
00C28F  2               _0070050:
00C28F  2  86 48                STX     opcode          ;save trial opcode
00C291  2  20 ED CA             JSR     instdata        ;get related instruction data
00C294  2  85 4F                STA     vopsflag        ;save 8/16 or relative flag
00C296  2  86 4D                STX     iopsize         ;operand size
00C298  2  E8                   INX
00C299  2  86 44                STX     instsize        ;instruction size
00C29B  2  A6 48                LDX     opcode          ;recover trial opcode
00C29D  2  98                   TYA                     ;addressing mode
00C29E  2  0A                   ASL                     ;create table index
00C29F  2  A8                   TAY
00C2A0  2  C2 20                SLONGA
00C2A2  2  B9 FF CF             LDA     ms_lutab,y      ;mode lookup table
00C2A5  2  85 22                STA     addrb           ;set pointer
00C2A7  2  E2 20                SHORTA
00C2A9  2  A0 00                LDY     #0
00C2AB  2               ;
00C2AB  2               _0070060:
00C2AB  2  B1 22                LDA     (addrb),y       ;table addressing mode
00C2AD  2  D9 46 02             CMP     auxbuf,y        ;entered addressing mode
00C2B0  2  F0 04                BEQ     _0070080        ;okay so far
00C2B2  2               ;
00C2B2  2               _0070070:
00C2B2  2  A5 46                LDA     mnepck          ;reload mnemonic index
00C2B4  2  80 D4                BRA     _0070040        ;wrong opcode for addresing mode
00C2B6  2               ;
00C2B6  2               _0070080:
00C2B6  2  09 00                ORA     #0              ;last char the terminator?
00C2B8  2  F0 03                BEQ     _0070090        ;yes, evaluate operand
00C2BA  2               ;
00C2BA  2  C8                   INY
00C2BB  2  80 EE                BRA     _0070060        ;keep testing
00C2BD  2               ;
00C2BD  2               ;
00C2BD  2               ;	evaluate operand...
00C2BD  2               ;
00C2BD  2               _0070090:
00C2BD  2  A5 4B                LDA     eopsize         ;entered operand size
00C2BF  2  D0 06                BNE     _0070100        ;non-zero
00C2C1  2               ;
00C2C1  2  05 4D                ORA     iopsize         ;instruction operand size
00C2C3  2  D0 ED                BNE     _0070070        ;wrong opcode - keep trying
00C2C5  2               ;
00C2C5  2  80 45                BRA     monasc08        ;assemble instruction
00C2C7  2               ;
00C2C7  2               _0070100:
00C2C7  2  24 4F                BIT     vopsflag        ;is this a branch?
00C2C9  2  70 3A                BVS     _0070160        ;yes, evaluate
00C2CB  2               ;
00C2CB  2  A5 4D                LDA     iopsize         ;instruction operand size
00C2CD  2  24 4F                BIT     vopsflag        ;variable size operand allowed?
00C2CF  2  30 15                BMI     _0070130        ;yes
00C2D1  2               ;
00C2D1  2  24 4C                BIT     flimflag        ;was forced immediate set?
00C2D3  2  10 03                BPL     _0070110        ;no
00C2D5  2               ;
00C2D5  2  4C 5C C3             JMP     monasc10        ;yes - error
00C2D8  2               ;
00C2D8  2               _0070110:
00C2D8  2  C5 4B                CMP     eopsize         ;entered operand size
00C2DA  2  90 D6                BCC     _0070070        ;operand too big
00C2DC  2               ;
00C2DC  2  85 4B                STA     eopsize         ;new operand size
00C2DE  2  80 2C                BRA     monasc08        ;assemble, otherwise...
00C2E0  2               ;
00C2E0  2               _0070120:
00C2E0  2  C5 4B                CMP     eopsize         ;exact size match required
00C2E2  2  D0 CE                BNE     _0070070        ;mismatch - wrong opcode
00C2E4  2               ;
00C2E4  2  80 26                BRA     monasc08        ;assemble
00C2E6  2               ;
00C2E6  2               ;
00C2E6  2               ;	process variable size immediate mode operand...
00C2E6  2               ;
00C2E6  2               _0070130:
00C2E6  2  A6 4B                LDX     eopsize         ;entered operand size
00C2E8  2  E0 03                CPX     #s_xword        ;check size
00C2EA  2  B0 70                BCS     monasc10        ;too big - error
00C2EC  2               ;
00C2EC  2  24 4C                BIT     flimflag        ;forced long immediate?
00C2EE  2  10 06                BPL     _0070140        ;no
00C2F0  2               ;
00C2F0  2  A2 02                LDX     #s_word         ;promote operand size to...
00C2F2  2  86 4B                STX     eopsize         ;16 bits
00C2F4  2  80 08                BRA     _0070150
00C2F6  2               ;
00C2F6  2               _0070140:
00C2F6  2  E0 02                CPX     #s_word         ;16 bits?
00C2F8  2  D0 04                BNE     _0070150        ;no
00C2FA  2               ;
00C2FA  2  A0 C0                LDY     #flimmask       ;yes so force long...
00C2FC  2  84 4C                STY     flimflag        ;immediate disassembly
00C2FE  2               ;
00C2FE  2               _0070150:
00C2FE  2  1A                   INA                     ;new instruction operand size
00C2FF  2  C5 4B                CMP     eopsize         ;compare against operand size
00C301  2  90 AF                BCC     _0070070        ;mismatch - can't assemble
00C303  2               ;
00C303  2  80 07                BRA     monasc08        ;okay, assemble
00C305  2               ;
00C305  2               ;
00C305  2               ;	process relative branch...
00C305  2               ;
00C305  2               _0070160:
00C305  2  20 39 CB             JSR     targoff         ;compute branch offset
00C308  2  B0 52                BCS     monasc10        ;branch out of range
00C30A  2               ;
00C30A  2  85 4B                STA     eopsize         ;effective operand size
00C30C  2               ;
00C30C  2               ;
00C30C  2               ;	assemble instruction...
00C30C  2               ;
00C30C  2               monasc08:
00C30C  2  A5 48                LDA     opcode          ;opcode
00C30E  2  87 1F                STAIL   addra           ;store at assembly address
00C310  2  A6 4B                LDX     eopsize         ;any operand to process?
00C312  2  F0 09                BEQ     _0080020        ;no
00C314  2               ;
00C314  2  9B                   TXY                     ;also storage offset
00C315  2               ;
00C315  2               _0080010:
00C315  2  CA                   DEX
00C316  2  B5 39                LDA     operand,x       ;get operand byte &...
00C318  2  97 1F                STAILY  addra           ;poke into memory
00C31A  2  88                   DEY
00C31B  2  D0 F8                BNE     _0080010        ;next
00C31D  2               ;
00C31D  2               _0080020:
00C31D  2  A9 0D                LDA     #a_cr
00C31F  2  20 71 FF             JSR     putcha          ;return to left margin
00C322  2  A9 41                LDA     #asmprfx        ;assembly prefix
00C324  2  20 49 C6             JSR     dpycodaa        ;disassemble & display
00C327  2               ;
00C327  2               ;
00C327  2               ;	prompt for next instruction...
00C327  2               ;
00C327  2               monasc09:
00C327  2  A9 20                LDA     #a_blank
00C329  2  A2 08                LDX     #ascprmct-1
00C32B  2               ;
00C32B  2               _0090010:
00C32B  2  9D 00 02             STA     ibuffer,x       ;prepare buffer for...
00C32E  2  CA                   DEX                     ;next instruction
00C32F  2  10 FA                BPL     _0090010
00C331  2               ;
00C331  2  A9 41                LDA     #asmprfx        ;assemble code...
00C333  2  8D 00 02             STA     ibuffer         ;prompt prefix
00C336  2  A5 21                LDA     addra+s_word    ;next instruction address bank
00C338  2  20 51 C9             JSR     binhex          ;convert to ASCII
00C33B  2  8D 02 02             STA     ibuffer+apadrbkh;store MSN in buffer
00C33E  2  8E 03 02             STX     ibuffer+apadrbkl;store LSN in buffer
00C341  2  A5 20                LDA     addra+s_byte    ;next instruction address MSB
00C343  2  20 51 C9             JSR     binhex
00C346  2  8D 04 02             STA     ibuffer+apadrmbh
00C349  2  8E 05 02             STX     ibuffer+apadrmbl
00C34C  2  A5 1F                LDA     addra           ;next instruction address LSB
00C34E  2  20 51 C9             JSR     binhex
00C351  2  8D 06 02             STA     ibuffer+apadrlbh
00C354  2  8E 07 02             STX     ibuffer+apadrlbl
00C357  2  A9 09                LDA     #ascprmct       ;effective input count
00C359  2  4C 43 C1             JMP     moncea          ;reenter input loop
00C35C  2               ;
00C35C  2               ;
00C35C  2               ;	process assembly error...
00C35C  2               ;
00C35C  2               monasc10:
00C35C  2  20 8D C7             JSR     dpyerr          ;indicate error &...
00C35F  2  80 C6                BRA     monasc09        ;prompt w/same assembly address
00C361  2               ;
00C361  2               ;================================================================================
00C361  2               ;
00C361  2               ;mondsc: DISASSEMBLE CODE
00C361  2               ;
00C361  2               ;	-----------------------------
00C361  2               ;	syntax: D [<addr1> [<addr2>]]
00C361  2               ;	-----------------------------
00C361  2               ;
00C361  2               mondsc:
00C361  2  B0 11                BCS     _0100010        ;no parameters
00C363  2               ;
00C363  2  64 4C                STZ     flimflag        ;reset to 8 bit mode
00C365  2  20 7F CA             JSR     facasize        ;check starting...
00C368  2  C9 04                CMP     #s_dword        ;address
00C36A  2  B0 46                BCS     _0100050        ;out of range - error
00C36C  2               ;
00C36C  2  20 61 CA             JSR     facaddra        ;copy starting address
00C36F  2  20 8F CA             JSR     getparm         ;get ending address
00C372  2  90 17                BCC     _0100020        ;gotten
00C374  2               ;
00C374  2               _0100010:
00C374  2  20 64 C9             JSR     clrfaca         ;clear accumulator
00C377  2  C2 20                SLONGA
00C379  2  18                   CLC
00C37A  2  A5 1F                LDA     addra           ;starting address
00C37C  2  69 15 00             ADCW    n_dbytes        ;default bytes
00C37F  2  85 25                STA     faca            ;effective ending address
00C381  2  E2 20                SHORTA
00C383  2  A5 21                LDA     addra+s_word    ;starting bank
00C385  2  69 00                ADC     #0
00C387  2  85 27                STA     faca+s_word     ;effective ending bank
00C389  2  B0 27                BCS     _0100050        ;end address > $FFFFFF
00C38B  2               ;
00C38B  2               _0100020:
00C38B  2  20 7F CA             JSR     facasize        ;check ending...
00C38E  2  C9 04                CMP     #s_dword        ;address
00C390  2  B0 20                BCS     _0100050        ;out of range - error
00C392  2               ;
00C392  2  20 6B CA             JSR     facaddrb        ;set ending address
00C395  2  20 8F CA             JSR     getparm         ;check for excess input
00C398  2  90 18                BCC     _0100050        ;present - error
00C39A  2               ;
00C39A  2  20 D0 C9             JSR     calccnt         ;calculate bytes
00C39D  2  90 13                BCC     _0100050        ;end < start
00C39F  2               ;
00C39F  2               _0100030:
00C39F  2  20 53 CC             JSR     teststop        ;test for display stop
00C3A2  2  B0 0B                BCS     _0100040        ;stopped
00C3A4  2               ;
00C3A4  2  20 CB C7             JSR     newline         ;next line
00C3A7  2  20 47 C6             JSR     dpycod          ;disassemble & display
00C3AA  2  20 17 CA             JSR     decdcnt         ;decrement byte count
00C3AD  2  90 F0                BCC     _0100030        ;not done
00C3AF  2               ;
00C3AF  2               _0100040:
00C3AF  2  4C 3F C1             JMP     monce           ;back to main loop
00C3B2  2               ;
00C3B2  2               _0100050:
00C3B2  2  4C 7E C1             JMP     monerr          ;address range error
00C3B5  2               ;
00C3B5  2               ;================================================================================
00C3B5  2               ;
00C3B5  2               ;monjmp: EXECUTE CODE
00C3B5  2               ;
00C3B5  2               ;	-------------------------------------------------------------
00C3B5  2               ;	syntax: G [<dp>]
00C3B5  2               ;
00C3B5  2               ;	If no address is specified, the current values in the PB & PC
00C3B5  2               ;	shadow registers are used.
00C3B5  2               ;	-------------------------------------------------------------
00C3B5  2               ;
00C3B5  2               monjmp:
00C3B5  2  20 22 CB             JSR     setxaddr        ;set execution address
00C3B8  2  B0 29                BCS     monjmpab        ;out of range - error
00C3BA  2               ;
00C3BA  2  20 8F CA             JSR     getparm         ;check for excess input
00C3BD  2  90 24                BCC     monjmpab        ;too much input - error
00C3BF  2               ;
00C3BF  2  C2 20                SLONGA                  ;16 bit .A
00C3C1  2  A5 1A                LDA     reg_spx
00C3C3  2  1B                   TCS                     ;restore SP
00C3C4  2               ;
00C3C4  2               monjmpaa:
00C3C4  2  E2 20                SHORTA
00C3C6  2  A5 10                LDA     reg_pbx
00C3C8  2  48                   PHA                     ;restore PB
00C3C9  2  C2 20                SLONGA
00C3CB  2  A5 11                LDA     reg_pcx
00C3CD  2  48                   PHA                     ;restore PC
00C3CE  2  E2 20                SHORTA
00C3D0  2  A5 13                LDA     reg_srx
00C3D2  2  48                   PHA                     ;restore SR
00C3D3  2  A5 1E                LDA     reg_dbx
00C3D5  2  48                   PHA
00C3D6  2  AB                   PLB                     ;restore DB
00C3D7  2  C2 30                LONGR
00C3D9  2  A5 1C                LDA     reg_dpx
00C3DB  2  5B                   TCD                     ;restore DP
00C3DC  2  A5 14                LDA     reg_ax          ;restore .C
00C3DE  2  A6 16                LDX     reg_xx          ;restore .X
00C3E0  2  A4 18                LDY     reg_yx          ;restore .Y
00C3E2  2  40                   RTI                     ;execute code
00C3E3  2               ;
00C3E3  2               monjmpab:
00C3E3  2  4C 7E C1             JMP     monerr          ;error
00C3E6  2               ;
00C3E6  2               ;================================================================================
00C3E6  2               ;
00C3E6  2               ;monjsr: EXECUTE CODE AS SUBROUTINE
00C3E6  2               ;
00C3E6  2               ;	------------------------------------------------------------
00C3E6  2               ;	syntax: J [<dp>]
00C3E6  2               ;
00C3E6  2               ;	If no address is specified the current values in the PB & PC
00C3E6  2               ;	shadow registers are used.   An RTS at the end of the called
00C3E6  2               ;	subroutine will return control to the monitor  provided  the
00C3E6  2               ;	stack remains in balance.
00C3E6  2               ;	------------------------------------------------------------
00C3E6  2               ;
00C3E6  2               monjsr:
00C3E6  2  20 22 CB             JSR     setxaddr        ;set execution address
00C3E9  2  B0 F8                BCS     monjmpab        ;out of range - error
00C3EB  2               ;
00C3EB  2  20 8F CA             JSR     getparm         ;check for excess input
00C3EE  2  90 F3                BCC     monjmpab        ;too much input - error
00C3F0  2               ;
00C3F0  2  C2 20                SLONGA
00C3F2  2  A5 1A                LDA     reg_spx
00C3F4  2  1B                   TCS                     ;restore SP &...
00C3F5  2  20 C4 C3             JSR     monjmpaa        ;call subroutine
00C3F8  2  08                   PHP                     ;push SR
00C3F9  2  C2 30                LONGR
00C3FB  2  85 14                STA     reg_ax          ;save...
00C3FD  2  86 16                STX     reg_xx          ;register...
00C3FF  2  84 18                STY     reg_yx          ;returns
00C401  2  E2 10                SHORTX                  ;8 bit .X & .Y
00C403  2  FA                   PLX                     ;get & save...
00C404  2  86 13                STX     reg_srx         ;return SR
00C406  2  3B                   TSC                     ;get & save...
00C407  2  85 1A                STA     reg_spx         ;return SP
00C409  2  7B                   TDC                     ;get & save...
00C40A  2  85 1C                STA     reg_dpx         ;DP pointer
00C40C  2  E2 20                SHORTA                  ;8 bit .A
00C40E  2  4B                   PHK                     ;get &...
00C40F  2  68                   PLA                     ;save...
00C410  2  85 10                STA     reg_pbx         ;return PB
00C412  2  8B                   PHB                     ;get &...
00C413  2  68                   PLA                     ;save...
00C414  2  85 1E                STA     reg_dbx         ;return DB
00C416  2  F4 B9 D0             PEA     mm_rts          ;"*RET"
00C419  2  4C D4 C0             JMP     moncom          ;return to monitor
00C41C  2               ;
00C41C  2               ;================================================================================
00C41C  2               ;
00C41C  2               ;monchm: CHANGE and/or DUMP MEMORY
00C41C  2               ;
00C41C  2               ;	--------------------------------------------
00C41C  2               ;	syntax: > [<addr> <operand> [<operand>]...]
00C41C  2               ;
00C41C  2               ;	> <addr> without operands will dump 16 bytes
00C41C  2               ;	of memory, starting at <addr>.
00C41C  2               ;	--------------------------------------------
00C41C  2               ;
00C41C  2               monchm:
00C41C  2  B0 23                BCS     _0110030        ;no address given - quit
00C41E  2               ;
00C41E  2  20 7F CA             JSR     facasize        ;size address
00C421  2  C9 04                CMP     #s_dword
00C423  2  B0 1F                BCS     _0110040        ;address out of range - error
00C425  2               ;
00C425  2  20 61 CA             JSR     facaddra        ;set starting address
00C428  2  20 92 CB             JSR     getpat          ;evaluate change pattern
00C42B  2  90 04                BCC     _0110010        ;entered
00C42D  2               ;
00C42D  2  10 0C                BPL     _0110020        ;not entered
00C42F  2               ;
00C42F  2  80 13                BRA     _0110040        ;evaluation error
00C431  2               ;
00C431  2               _0110010:
00C431  2  88                   DEY                     ;next byte
00C432  2  30 07                BMI     _0110020        ;done
00C434  2               ;
00C434  2  B9 46 02             LDA     auxbuf,y        ;write pattern...
00C437  2  97 1F                STAILY  addra           ;to memory
00C439  2  80 F6                BRA     _0110010        ;next
00C43B  2               ;
00C43B  2               _0110020:
00C43B  2  20 CB C7             JSR     newline         ;next line
00C43E  2  20 59 C7             JSR     dpymem          ;regurgitate changes
00C441  2               ;
00C441  2               _0110030:
00C441  2  4C 3F C1             JMP     monce           ;back to command loop
00C444  2               ;
00C444  2               _0110040:
00C444  2  4C 7E C1             JMP     monerr          ;goto error handler
00C447  2               ;
00C447  2               ;================================================================================
00C447  2               ;
00C447  2               ;moncmp: COMPARE MEMORY
00C447  2               ;
00C447  2               ;	-----------------------------
00C447  2               ;	syntax: C <start> <end> <ref>
00C447  2               ;	-----------------------------
00C447  2               ;
00C447  2               moncmp:
00C447  2  B0 26                BCS     _0120030        ;start not given - quit
00C449  2               ;
00C449  2  20 3B CA             JSR     enddest         ;get end & reference addresses
00C44C  2  B0 24                BCS     _0120040        ;range or other error
00C44E  2               ;
00C44E  2  64 4A                STZ     xrtemp          ;column counter
00C450  2               ;
00C450  2               _0120010:
00C450  2  20 53 CC             JSR     teststop        ;check for stop
00C453  2  B0 1A                BCS     _0120030        ;abort
00C455  2               ;
00C455  2  A7 1F                LDAIL   addra           ;get from reference location
00C457  2  C7 39                CMPIL   operand         ;test against compare location
00C459  2  F0 03                BEQ     _0120020        ;match, don't display address
00C45B  2               ;
00C45B  2  20 2F C6             JSR     dpycaddr        ;display current location
00C45E  2               ;
00C45E  2               _0120020:
00C45E  2  20 B7 CA             JSR     nxtaddra        ;next reference location
00C461  2  B0 0C                BCS     _0120030        ;done
00C463  2               ;
00C463  2  C2 20                SLONGA
00C465  2  E6 39                INC     operand         ;bump bits 0-15
00C467  2  E2 20                SHORTA
00C469  2  D0 E5                BNE     _0120010
00C46B  2               ;
00C46B  2  E6 3B                INC     operand+s_word  ;bump bits 16-23
00C46D  2  80 E1                BRA     _0120010
00C46F  2               ;
00C46F  2               _0120030:
00C46F  2  4C 3F C1             JMP     monce           ;return to command exec
00C472  2               ;
00C472  2               _0120040:
00C472  2  4C 7E C1             JMP     monerr          ;goto error handler
00C475  2               ;
00C475  2               ;================================================================================
00C475  2               ;
00C475  2               ;moncpy: COPY (transfer) MEMORY
00C475  2               ;
00C475  2               ;	--------------------------------
00C475  2               ;	syntax: T <start> <end> <target>
00C475  2               ;	--------------------------------
00C475  2               ;
00C475  2               moncpy:
00C475  2  B0 49                BCS     _0130040        ;start not given - quit
00C477  2               ;
00C477  2  20 3B CA             JSR     enddest         ;get end & target addresses
00C47A  2  B0 47                BCS     _0130050        ;range or other error
00C47C  2               ;
00C47C  2  C2 20                SLONGA
00C47E  2  38                   SEC
00C47F  2  A5 22                LDA     addrb           ;ending address
00C481  2  E5 1F                SBC     addra           ;starting address
00C483  2  90 3E                BCC     _0130050        ;start > end - error
00C485  2               ;
00C485  2  85 2D                STA     facb            ;bytes to copy
00C487  2  E2 20                SHORTA
00C489  2  C2 10                LONGX
00C48B  2  A5 3B                LDA     operand+s_word  ;target bank
00C48D  2  A4 39                LDY     operand         ;target address
00C48F  2  C5 21                CMP     addra+s_word    ;source bank
00C491  2  C2 20                SLONGA
00C493  2  D0 1C                BNE     _0130020        ;can use forward copy
00C495  2               ;
00C495  2  C4 1F                CPY     addra           ;source address
00C497  2  90 18                BCC     _0130020        ;can use forward copy
00C499  2               ;
00C499  2  D0 02                BNE     _0130010        ;must use reverse copy
00C49B  2               ;
00C49B  2  80 26                BRA     _0130050        ;copy in place - error
00C49D  2               ;
00C49D  2               _0130010:
00C49D  2  A5 2D                LDA     facb            ;get bytes to copy
00C49F  2  48                   PHA                     ;protect
00C4A0  2  20 3B CC             JSR     lodbnk          ;load banks
00C4A3  2  20 F8 C9             JSR     cprvsup         ;do reverse copy setup
00C4A6  2  68                   PLA                     ;get bytes to copy
00C4A7  2  AA                   TAX                     ;save a copy
00C4A8  2  18                   CLC
00C4A9  2  65 39                ADC     operand         ;change target to...
00C4AB  2  A8                   TAY                     ;target end
00C4AC  2  8A                   TXA                     ;recover bytes to copy
00C4AD  2  A6 22                LDX     addrb           ;source end
00C4AF  2  80 0C                BRA     _0130030
00C4B1  2               ;
00C4B1  2               _0130020:
00C4B1  2  A5 2D                LDA     facb            ;get bytes to copy
00C4B3  2  48                   PHA                     ;protect
00C4B4  2  20 3B CC             JSR     lodbnk          ;load banks
00C4B7  2  20 F1 C9             JSR     cpfwsup         ;do forward copy setup
00C4BA  2  68                   PLA                     ;get bytes to copy
00C4BB  2  A6 1F                LDX     addra           ;source start
00C4BD  2               ;
00C4BD  2               _0130030:
00C4BD  2  4C 25 00             JMP     mcftwork        ;copy memory
00C4C0  2               ;
00C4C0  2               _0130040:
00C4C0  2  4C 3F C1             JMP     monce           ;back to executive
00C4C3  2               ;
00C4C3  2               _0130050:
00C4C3  2  4C 7E C1             JMP     monerr          ;error
00C4C6  2               ;
00C4C6  2               ;================================================================================
00C4C6  2               ;
00C4C6  2               ;mondmp: DISPLAY MEMORY RANGE
00C4C6  2               ;
00C4C6  2               ;	-----------------------------
00C4C6  2               ;	syntax: M [<addr1> [<addr2>]]
00C4C6  2               ;	-----------------------------
00C4C6  2               ;
00C4C6  2               mondmp:
00C4C6  2  B0 0F                BCS     _0140010        ;no parameters
00C4C8  2               ;
00C4C8  2  20 7F CA             JSR     facasize        ;check address...
00C4CB  2  C9 04                CMP     #s_dword        ;range
00C4CD  2  B0 46                BCS     _0140050        ;address out of range
00C4CF  2               ;
00C4CF  2  20 61 CA             JSR     facaddra        ;copy starting address
00C4D2  2  20 8F CA             JSR     getparm         ;get ending address
00C4D5  2  90 17                BCC     _0140020        ;gotten
00C4D7  2               ;
00C4D7  2               _0140010:
00C4D7  2  20 64 C9             JSR     clrfaca         ;clear accumulator
00C4DA  2  C2 20                SLONGA
00C4DC  2  18                   CLC
00C4DD  2  A5 1F                LDA     addra           ;starting address
00C4DF  2  69 FF 00             ADCW    n_mbytes        ;default bytes
00C4E2  2  85 25                STA     faca            ;effective ending address
00C4E4  2  E2 20                SHORTA
00C4E6  2  A5 21                LDA     addra+s_word    ;starting bank
00C4E8  2  69 00                ADC     #0
00C4EA  2  85 27                STA     faca+s_word     ;effective ending bank
00C4EC  2  B0 27                BCS     _0140050        ;end address > $FFFFFF
00C4EE  2               ;
00C4EE  2               _0140020:
00C4EE  2  20 7F CA             JSR     facasize        ;check ending address...
00C4F1  2  C9 04                CMP     #s_dword        ;range
00C4F3  2  B0 20                BCS     _0140050        ;out of range - error
00C4F5  2               ;
00C4F5  2  20 6B CA             JSR     facaddrb        ;copy ending address
00C4F8  2  20 8F CA             JSR     getparm         ;check for excess input
00C4FB  2  90 18                BCC     _0140050        ;error
00C4FD  2               ;
00C4FD  2  20 D0 C9             JSR     calccnt         ;calculate bytes to dump
00C500  2  90 13                BCC     _0140050        ;end < start
00C502  2               ;
00C502  2               _0140030:
00C502  2  20 53 CC             JSR     teststop        ;test for display stop
00C505  2  B0 0B                BCS     _0140040        ;stopped
00C507  2               ;
00C507  2  20 CB C7             JSR     newline         ;next line
00C50A  2  20 59 C7             JSR     dpymem          ;display
00C50D  2  20 17 CA             JSR     decdcnt         ;decrement byte count
00C510  2  90 F0                BCC     _0140030        ;not done
00C512  2               ;
00C512  2               _0140040:
00C512  2  4C 3F C1             JMP     monce           ;back to main loop
00C515  2               ;
00C515  2               _0140050:
00C515  2  4C 7E C1             JMP     monerr          ;address range error
00C518  2               ;
00C518  2               ;================================================================================
00C518  2               ;
00C518  2               ;monfil: FILL MEMORY
00C518  2               ;
00C518  2               ;	-----------------------------------------
00C518  2               ;	syntax: F <start> <end> <fill>
00C518  2               ;
00C518  2               ;	<start> & <end> must be in the same bank.
00C518  2               ;	-----------------------------------------
00C518  2               ;
00C518  2               monfil:
00C518  2  B0 5E                BCS     _0150010        ;start not given - quit
00C51A  2               ;
00C51A  2  20 7F CA             JSR     facasize        ;check size
00C51D  2  C9 04                CMP     #s_dword
00C51F  2  B0 5A                BCS     _0150020        ;out of range - error...
00C521  2               ;
00C521  2  20 61 CA             JSR     facaddra        ;store start
00C524  2  20 8F CA             JSR     getparm         ;evaluate end
00C527  2  B0 52                BCS     _0150020        ;not entered - error
00C529  2               ;
00C529  2  20 7F CA             JSR     facasize        ;check size
00C52C  2  C9 04                CMP     #s_dword
00C52E  2  B0 4B                BCS     _0150020        ;out of range - error
00C530  2               ;
00C530  2  A5 27                LDA     faca+s_word     ;end bank
00C532  2  C5 21                CMP     addra+s_word    ;start bank
00C534  2  D0 45                BNE     _0150020        ;not same - error
00C536  2               ;
00C536  2  20 6B CA             JSR     facaddrb        ;store <end>
00C539  2  C2 20                SLONGA
00C53B  2  38                   SEC
00C53C  2  A5 22                LDA     addrb           ;ending address
00C53E  2  E5 1F                SBC     addra           ;starting address
00C540  2  90 39                BCC     _0150020        ;start > end - error
00C542  2               ;
00C542  2  85 2D                STA     facb            ;bytes to copy
00C544  2  E2 20                SHORTA
00C546  2  20 8F CA             JSR     getparm         ;evaluate <fill>
00C549  2  B0 30                BCS     _0150020        ;not entered - error
00C54B  2               ;
00C54B  2  20 7F CA             JSR     facasize        ;<fill> should be...
00C54E  2  C9 02                CMP     #s_word         ;8 bits
00C550  2  B0 29                BCS     _0150020        ;it isn't - error
00C552  2               ;
00C552  2  20 75 CA             JSR     facaoper        ;store <fill>
00C555  2  20 8F CA             JSR     getparm         ;should be no more parameters
00C558  2  90 21                BCC     _0150020        ;there are - error
00C55A  2               ;
00C55A  2  A5 39                LDA     operand         ;<fill>
00C55C  2  87 1F                STAIL   addra           ;fill 1st location
00C55E  2  C2 30                LONGR                   ;16 bit operations
00C560  2  A5 2D                LDA     facb            ;get byte count
00C562  2  F0 14                BEQ     _0150010        ;only 1 location - finished
00C564  2               ;
00C564  2  3A                   DEA                     ;zero align &...
00C565  2  48                   PHA                     ;protect
00C566  2  E2 20                SHORTA
00C568  2  A5 21                LDA     addra+s_word    ;start bank
00C56A  2  EB                   XBA
00C56B  2  A5 24                LDA     addrb+s_word    ;end bank
00C56D  2  20 F1 C9             JSR     cpfwsup         ;do forward copy setup
00C570  2  68                   PLA                     ;recover fill count
00C571  2  A6 1F                LDX     addra           ;fill-from starting location
00C573  2  9B                   TXY
00C574  2  C8                   INY                     ;fill-to starting location
00C575  2  4C 25 00             JMP     mcftwork        ;fill memory
00C578  2               ;
00C578  2               _0150010:
00C578  2  4C 3F C1             JMP     monce           ;goto command executive
00C57B  2               ;
00C57B  2               _0150020:
00C57B  2  4C 7E C1             JMP     monerr          ;goto error handler
00C57E  2               ;
00C57E  2               ;================================================================================
00C57E  2               ;
00C57E  2               ;monhnt: SEARCH (hunt) MEMORY
00C57E  2               ;
00C57E  2               ;	-----------------------------------
00C57E  2               ;	syntax: H <addr1> <addr2> <pattern>
00C57E  2               ;	-----------------------------------
00C57E  2               ;
00C57E  2               monhnt:
00C57E  2  B0 40                BCS     _0160050        ;no start address
00C580  2               ;
00C580  2  20 7F CA             JSR     facasize        ;size starting address
00C583  2  C9 04                CMP     #s_dword
00C585  2  B0 3C                BCS     _0160060        ;address out of range - error
00C587  2               ;
00C587  2  20 61 CA             JSR     facaddra        ;store starting address
00C58A  2  20 8F CA             JSR     getparm         ;evaluate ending address
00C58D  2  B0 34                BCS     _0160060        ;no address - error
00C58F  2               ;
00C58F  2  20 7F CA             JSR     facasize        ;size ending address
00C592  2  C9 04                CMP     #s_dword
00C594  2  B0 2D                BCS     _0160060        ;address out of range - error
00C596  2               ;
00C596  2  20 6B CA             JSR     facaddrb        ;store ending address
00C599  2  20 D0 C9             JSR     calccnt         ;calculate byte range
00C59C  2  90 25                BCC     _0160060        ;end < start
00C59E  2               ;
00C59E  2  20 92 CB             JSR     getpat          ;evaluate search pattern
00C5A1  2  B0 20                BCS     _0160060        ;error
00C5A3  2               ;
00C5A3  2  64 4A                STZ     xrtemp          ;clear column counter
00C5A5  2               ;
00C5A5  2               _0160010:
00C5A5  2  20 53 CC             JSR     teststop        ;check for stop
00C5A8  2  B0 16                BCS     _0160050        ;abort
00C5AA  2               ;
00C5AA  2  A4 3C                LDY     auxbufix        ;pattern index
00C5AC  2               ;
00C5AC  2               _0160020:
00C5AC  2  88                   DEY
00C5AD  2  30 09                BMI     _0160030        ;pattern match
00C5AF  2               ;
00C5AF  2  B7 1F                LDAILY  addra           ;get from memory
00C5B1  2  D9 46 02             CMP     auxbuf,y        ;test against pattern
00C5B4  2  D0 05                BNE     _0160040        ;mismatch, next location
00C5B6  2               ;
00C5B6  2  F0 F4                BEQ     _0160020        ;match, keep testing
00C5B8  2               ;
00C5B8  2               _0160030:
00C5B8  2  20 2F C6             JSR     dpycaddr        ;display current location
00C5BB  2               ;
00C5BB  2               _0160040:
00C5BB  2  20 B7 CA             JSR     nxtaddra        ;next location
00C5BE  2  90 E5                BCC     _0160010        ;not done
00C5C0  2               ;
00C5C0  2               _0160050:
00C5C0  2  4C 3F C1             JMP     monce           ;back to executive
00C5C3  2               ;
00C5C3  2               _0160060:
00C5C3  2  4C 7E C1             JMP     monerr          ;goto error handler
00C5C6  2               ;
00C5C6  2               ;================================================================================
00C5C6  2               ;
00C5C6  2               ;monenv: CONVERT NUMERIC VALUE
00C5C6  2               ;
00C5C6  2               ;	----------------------
00C5C6  2               ;	syntax: <radix><value>
00C5C6  2               ;	----------------------
00C5C6  2               ;
00C5C6  2               monenv:
00C5C6  2  20 8D CA             JSR     getparmr        ;reread & evaluate parameter
00C5C9  2  B0 26                BCS     _0170020        ;none entered
00C5CB  2               ;
00C5CB  2  A2 00                LDX     #0              ;radix index
00C5CD  2  A0 04                LDY     #n_radix        ;number of radices
00C5CF  2               ;
00C5CF  2               _0170010:
00C5CF  2  5A                   PHY                     ;save counter
00C5D0  2  DA                   PHX                     ;save radix index
00C5D1  2  20 CB C7             JSR     newline         ;next line &...
00C5D4  2  20 53 C7             JSR     clearlin        ;clear it
00C5D7  2  A9 20                LDA     #a_blank
00C5D9  2  A2 04                LDX     #halftab
00C5DB  2  20 C0 C7             JSR     multspc         ;indent 1/2 tab
00C5DE  2  FA                   PLX                     ;get radix index but...
00C5DF  2  DA                   PHX                     ;put it back
00C5E0  2  BD 36 CD             LDA     radxtab,x       ;get radix
00C5E3  2  20 BD C8             JSR     binasc          ;convert to ASCII
00C5E6  2  5A                   PHY                     ;string address MSB
00C5E7  2  DA                   PHX                     ;string address LSB
00C5E8  2  20 E0 C7             JSR     sprint          ;print
00C5EB  2  FA                   PLX                     ;get index again
00C5EC  2  7A                   PLY                     ;get counter
00C5ED  2  E8                   INX
00C5EE  2  88                   DEY                     ;all radices handled?
00C5EF  2  D0 DE                BNE     _0170010        ;no
00C5F1  2               
00C5F1  2               _0170020:
00C5F1  2  4C 3F C1             JMP     monce           ;back to command exec
00C5F4  2               ;
00C5F4  2               ;================================================================================
00C5F4  2               ;
00C5F4  2               ;monchr: CHANGE REGISTERS
00C5F4  2               ;
00C5F4  2               ;	------------------------------------------------------
00C5F4  2               ;	syntax: ; [PB [PC [.S [.C [.X [.Y [SP [DP [DB]]]]]]]]]
00C5F4  2               ;
00C5F4  2               ;	; with no parameters is the same as the R command.
00C5F4  2               ;	------------------------------------------------------
00C5F4  2               ;
00C5F4  2               monchr:
00C5F4  2  B0 33                BCS     _0570040        ;dump registers & quit
00C5F6  2               ;
00C5F6  2  A0 00                LDY     #0              ;register counter
00C5F8  2  84 33                STY     facc            ;initialize register index
00C5FA  2               ;
00C5FA  2               _0570010:
00C5FA  2  20 7F CA             JSR     facasize        ;get parameter size
00C5FD  2  D9 3A CD             CMP     rcvltab,y       ;check against size table
00C600  2  B0 2A                BCS     _0570050        ;out of range
00C602  2               ;
00C602  2  B9 3A CD             LDA     rcvltab,y       ;determine number of bytes...
00C605  2  C9 03                CMP     #s_word+1       ;to store
00C607  2  66 34                ROR     facc+s_byte     ;condition flag
00C609  2  10 02                BPL     _0570020        ;8 bit register size
00C60B  2               ;
00C60B  2  C2 20                SLONGA                  ;16 bit register size
00C60D  2               ;
00C60D  2               _0570020:
00C60D  2  A6 33                LDX     facc            ;get register index
00C60F  2  A5 25                LDA     faca            ;get parm
00C611  2  95 10                STA     reg_pbx,x       ;put in shadow storage
00C613  2  E2 20                SHORTA
00C615  2  06 34                ASL     facc+s_byte     ;mode flag to carry
00C617  2  8A                   TXA                     ;register index
00C618  2  69 01                ADC     #s_byte         ;at least 1 byte stored
00C61A  2  85 33                STA     facc            ;save new index
00C61C  2  20 8F CA             JSR     getparm         ;get a parameter
00C61F  2  B0 08                BCS     _0570040        ;EOI
00C621  2               ;
00C621  2  C8                   INY                     ;bump register count
00C622  2  C0 09                CPY     #n_regchv       ;all registers processed?
00C624  2  D0 D4                BNE     _0570010        ;no, keep going
00C626  2               ;
00C626  2               _0570030:
00C626  2  20 D7 C7             JSR     alert           ;excessive input
00C629  2               ;
00C629  2               _0570040:
00C629  2  4C E1 C0             JMP     monreg          ;display changes
00C62C  2               ;
00C62C  2               _0570050:
00C62C  2  4C 7E C1             JMP     monerr          ;goto error handler
00C62F  2               ;
00C62F  2               ;================================================================================
00C62F  2               ;
00C62F  2               ;monxit: EXIT TO OPERATING ENVIRONMENT
00C62F  2               ;
00C62F  2               ;	---------
00C62F  2               ;	syntax: X
00C62F  2               ;	---------
00C62F  2               ;
00C62F  2               ;monxit   bcc _0180020          ;no parameters allowed
00C62F  2               ;
00C62F  2               ;         slonga
00C62F  2               ;        lda vecbrki           ;BRK indirect vector
00C62F  2               ;         cmpw monbrk           ;we intercept it?
00C62F  2               ;         bne _0180010          ;no, don't change it
00C62F  2               ;
00C62F  2               ;         lda vecbrkia          ;old vector
00C62F  2               ;         sta vecbrki           ;restore it
00C62F  2               ;         stz vecbrkia          ;invalidate old vector
00C62F  2               ;
00C62F  2               ;_0180010 shortr
00C62F  2               ;         jml vecexit           ;long jump to exit
00C62F  2               ;
00C62F  2               ;_0180020 jmp monerr            ;goto error handler
00C62F  2               ;
00C62F  2               ; * * * * * * * * * * * * * * * * * * * * * * * *
00C62F  2               ; * * * * * * * * * * * * * * * * * * * * * * * *
00C62F  2               ; * *                                         * *
00C62F  2               ; * * S T A R T   o f   S U B R O U T I N E S * *
00C62F  2               ; * *                                         * *
00C62F  2               ; * * * * * * * * * * * * * * * * * * * * * * * *
00C62F  2               ; * * * * * * * * * * * * * * * * * * * * * * * *
00C62F  2               ;
00C62F  2               ;dpycaddr: DISPLAY CURRENT ADDRESS IN COLUMNS
00C62F  2               ;
00C62F  2               dpycaddr:
00C62F  2  A6 4A                LDX     xrtemp          ;column count
00C631  2  D0 05                BNE     _0190010        ;not at right side
00C633  2               ;
00C633  2  20 CB C7             JSR     newline         ;next row
00C636  2  A2 0A                LDX     #n_hccols       ;max columns
00C638  2               ;
00C638  2               _0190010:
00C638  2  E0 0A                CPX     #n_hccols       ;max columns
00C63A  2  F0 05                BEQ     _0190020        ;at left margin
00C63C  2               ;
00C63C  2  A9 09                LDA     #a_ht
00C63E  2  20 71 FF             JSR     putcha          ;tab a column
00C641  2               ;
00C641  2               _0190020:
00C641  2  CA                   DEX                     ;one less column
00C642  2  86 4A                STX     xrtemp          ;save column counter
00C644  2  4C 99 C7             JMP     prntladr        ;print reference address
00C647  2               ;
00C647  2               ;================================================================================
00C647  2               ;
00C647  2               ;dpycod: DISASSEMBLE & DISPLAY CODE
00C647  2               ;
00C647  2               ;	------------------------------------------------------------------------
00C647  2               ;	This function disassembles & displays the machine code at  the  location
00C647  2               ;	pointed to by ADDRA.  Upon return, ADDRA will point to the opcode of the
00C647  2               ;	next instruction.   The entry point at DPYCODAA  should be called with a
00C647  2               ;	disassembly prefix character loaded in .A.   If entered  at  DPYCOD, the
00C647  2               ;	default character will be display at the beginning of each  disassembled
00C647  2               ;	instruction.
00C647  2               ;
00C647  2               ;	The disassembly of immediate mode instructions that can take an 8 or  16
00C647  2               ;	bit operand is affected by the bit pattern that is  stored  in  FLIMFLAG
00C647  2               ;	upon entry to this function:
00C647  2               ;
00C647  2               ;	    FLIMFLAG: xx000000
00C647  2               ;	              ||
00C647  2               ;	              |+---------> 0:  8 bit .X or .Y operand
00C647  2               ;	              |            1: 16 bit .X or .Y operand
00C647  2               ;	              +----------> 0:  8 bit .A or BIT # operand
00C647  2               ;	                           1: 16 bit .A or BIT # operand
00C647  2               ;
00C647  2               ;	FLIMFLAG is conditioned according to the operand of  the  most  recently
00C647  2               ;	disassembled REP or SEP instruction.   Hence repetitive  calls  to  this
00C647  2               ;	subroutine will usually result in the correct disassembly of 16 bit imm-
00C647  2               ;	ediate mode instructions.
00C647  2               ;	------------------------------------------------------------------------
00C647  2               ;
00C647  2               dpycod:
00C647  2  A9 2E                LDA     #disprfx        ;default prefix
00C649  2               ;
00C649  2               ;
00C649  2               ;	alternate prefix display entry point...
00C649  2               ;
00C649  2               dpycodaa:
00C649  2  20 71 FF             JSR     putcha          ;print prefix
00C64C  2  20 DB C7             JSR     printspc        ;space
00C64F  2  20 99 C7             JSR     prntladr        ;print long address
00C652  2  20 DB C7             JSR     printspc        ;space to opcode field
00C655  2  20 CC CA             JSR     getbyte         ;get opcode
00C658  2  85 48                STA     opcode          ;save &...
00C65A  2  20 D0 C7             JSR     printbyt        ;display as hex
00C65D  2               ;
00C65D  2               ;
00C65D  2               ;	decode menmonic & addressing info...
00C65D  2               ;
00C65D  2  A6 48                LDX     opcode          ;current mnemonic
00C65F  2  BD FB CD             LDA     mnetabix,x      ;get mnemonic index
00C662  2  0A                   ASL                     ;double for...
00C663  2  A8                   TAY                     ;mnemonic table offset
00C664  2  C2 20                SLONGA                  ;16 bit load
00C666  2  B9 43 CD             LDA     mnetab,y        ;copy encoded mnemonic to...
00C669  2  85 46                STA     mnepck          ;working storage
00C66B  2  E2 20                SHORTA                  ;back to 8 bits
00C66D  2  20 ED CA             JSR     instdata        ;extract mode & size data
00C670  2  85 4F                STA     vopsflag        ;save mode flags
00C672  2  84 41                STY     admodidx        ;save mode index
00C674  2  0A                   ASL                     ;variable immediate instruction?
00C675  2  90 1F                BCC     dpycod01        ;no, effective operand size in .X
00C677  2               ;
00C677  2               ;
00C677  2               ;	determine immediate mode operand size...
00C677  2               ;
00C677  2  A5 48                LDA     opcode          ;current opcode
00C679  2  24 4C                BIT     flimflag        ;operand display mode
00C67B  2  10 08                BPL     _0200010        ;8 bit .A & BIT immediate mode
00C67D  2               ;
00C67D  2  29 1F                AND     #aimmaska       ;determine if...
00C67F  2  C9 09                CMP     #aimmaskb       ;.A or BIT immediate
00C681  2  F0 10                BEQ     _0200030        ;display 16 bit operand
00C683  2               ;
00C683  2  A5 48                LDA     opcode          ;not .A or BIT immediate
00C685  2               ;
00C685  2               _0200010:
00C685  2  50 0F                BVC     dpycod01        ;8 bit .X/.Y immediate mode
00C687  2               ;
00C687  2  A0 03                LDY     #n_vopidx-1     ;opcodes to test
00C689  2               ;
00C689  2               _0200020:
00C689  2  D9 FB CF             CMP     vopidx,y        ;looking for LDX #, CPY #, etc.
00C68C  2  F0 07                BEQ     _0200040        ;disassemble a 16 bit operand
00C68E  2               ;
00C68E  2  88                   DEY
00C68F  2  10 F8                BPL     _0200020        ;keep trying
00C691  2               ;
00C691  2  80 03                BRA     dpycod01        ;not .X or .Y immediate
00C693  2               ;
00C693  2               _0200030:
00C693  2  A5 48                LDA     opcode          ;reload
00C695  2               ;
00C695  2               _0200040:
00C695  2  E8                   INX                     ;16 bit operand
00C696  2               ;
00C696  2               ;
00C696  2               ;	get & display operand bytes...
00C696  2               ;
00C696  2               dpycod01:
00C696  2  86 4D                STX     iopsize         ;operand size...
00C698  2  E8                   INX                     ;plus opcode becomes...
00C699  2  86 44                STX     instsize        ;instruction size
00C69B  2  86 42                STX     charcnt         ;total bytes to process
00C69D  2  A9 0B                LDA     #n_opcols+2     ;total operand columns plus WS
00C69F  2  85 4A                STA     xrtemp          ;initialize counter
00C6A1  2  20 E5 C9             JSR     clroper         ;clear operand
00C6A4  2  A4 4D                LDY     iopsize         ;operand size
00C6A6  2  F0 16                BEQ     _0210020        ;no operand
00C6A8  2               ;
00C6A8  2  A2 00                LDX     #0              ;operand index
00C6AA  2               ;
00C6AA  2               _0210010:
00C6AA  2  20 CC CA             JSR     getbyte         ;get operand byte
00C6AD  2  95 39                STA     operand,x       ;save
00C6AF  2  DA                   PHX                     ;protect operand index
00C6B0  2  20 D0 C7             JSR     printbyt        ;print operand byte
00C6B3  2  C6 4A                DEC     xrtemp          ;3 columns used, 2 for...
00C6B5  2  C6 4A                DEC     xrtemp          ;operand nybbles &...
00C6B7  2  C6 4A                DEC     xrtemp          ;1 for whitespace
00C6B9  2  FA                   PLX                     ;get operand index
00C6BA  2  E8                   INX                     ;bump it
00C6BB  2  88                   DEY
00C6BC  2  D0 EC                BNE     _0210010        ;next
00C6BE  2               ;
00C6BE  2               _0210020:
00C6BE  2  A6 4A                LDX     xrtemp          ;operand columns remaining
00C6C0  2  20 C0 C7             JSR     multspc         ;space to mnemonic field
00C6C3  2               ;
00C6C3  2               ;
00C6C3  2               ;	display mnemonic...
00C6C3  2               ;
00C6C3  2  A0 03                LDY     #s_mnemon       ;size of ASCII mnemonic
00C6C5  2               ;
00C6C5  2               _0210030:
00C6C5  2  A9 00                LDA     #0              ;initialize char
00C6C7  2  A2 05                LDX     #n_shfenc       ;shifts to execute
00C6C9  2               ;
00C6C9  2               _0210040:
00C6C9  2  06 46                ASL     mnepck          ;shift encoded mnemonic
00C6CB  2  26 47                ROL     mnepck+s_byte
00C6CD  2  2A                   ROL
00C6CE  2  CA                   DEX
00C6CF  2  D0 F8                BNE     _0210040
00C6D1  2               ;
00C6D1  2  69 3F                ADC     #a_mnecvt       ;convert to ASCII &...
00C6D3  2  48                   PHA                     ;stash
00C6D4  2  88                   DEY
00C6D5  2  D0 EE                BNE     _0210030        ;continue with mnemonic
00C6D7  2               ;
00C6D7  2  A0 03                LDY     #s_mnemon
00C6D9  2               ;
00C6D9  2               _0210050:
00C6D9  2  68                   PLA                     ;get mnenmonic byte
00C6DA  2  20 71 FF             JSR     putcha          ;print it
00C6DD  2  88                   DEY
00C6DE  2  D0 F9                BNE     _0210050
00C6E0  2               ;
00C6E0  2               ;
00C6E0  2               ;	display operand...
00C6E0  2               ;
00C6E0  2  A5 4D                LDA     iopsize         ;operand size
00C6E2  2  F0 6F                BEQ     clearlin        ;zero, disassembly finished
00C6E4  2               ;
00C6E4  2  20 DB C7             JSR     printspc        ;space to operand field
00C6E7  2  24 4F                BIT     vopsflag        ;check mode flags
00C6E9  2  50 08                BVC     dpycod02        ;not a branch
00C6EB  2               ;
00C6EB  2  20 03 CB             JSR     offtarg         ;compute branch target
00C6EE  2  A6 44                LDX     instsize        ;effective instruction size
00C6F0  2  CA                   DEX
00C6F1  2  86 4D                STX     iopsize         ;effective operand size
00C6F3  2               ;
00C6F3  2               dpycod02:
00C6F3  2  64 4F                STZ     vopsflag        ;clear
00C6F5  2  A5 41                LDA     admodidx        ;instruction addressing mode
00C6F7  2  C9 0B                CMP     #am_move        ;block move instruction?
00C6F9  2  D0 02                BNE     _0220010        ;no
00C6FB  2               ;
00C6FB  2  66 4F                ROR     vopsflag        ;yes
00C6FD  2               ;
00C6FD  2               _0220010:
00C6FD  2  0A                   ASL                     ;convert addressing mode to...
00C6FE  2  AA                   TAX                     ;symbology table index
00C6FF  2  C2 20                SLONGA                  ;do a 16 bit load
00C701  2  BD FF CF             LDA     ms_lutab,x      ;addressing symbol pointer
00C704  2  48                   PHA
00C705  2  E2 20                SHORTA                  ;back to 8 bit loads
00C707  2  A0 00                LDY     #0
00C709  2  B3 01                LDASI   1               ;get 1st char
00C70B  2  C9 20                CMP     #a_blank
00C70D  2  F0 03                BEQ     _0220020        ;no addresing mode preamble
00C70F  2               ;
00C70F  2  20 71 FF             JSR     putcha          ;print preamble
00C712  2               ;
00C712  2               _0220020:
00C712  2  A9 24                LDA     #c_hex
00C714  2  20 71 FF             JSR     putcha          ;operand displayed as hex
00C717  2  A4 4D                LDY     iopsize         ;operand size = index
00C719  2               ;
00C719  2               _0220030:
00C719  2  88                   DEY
00C71A  2  30 16                BMI     _0220040        ;done with operand
00C71C  2               ;
00C71C  2  B9 39 00             LDA     operand,y       ;get operand byte
00C71F  2  20 B6 C7             JSR     dpyhex          ;print operand byte
00C722  2  24 4F                BIT     vopsflag        ;block move?
00C724  2  10 F3                BPL     _0220030        ;no
00C726  2               ;
00C726  2  64 4F                STZ     vopsflag        ;reset
00C728  2  5A                   PHY                     ;protect operand index
00C729  2  F4 38 D0             PEA     ms_move
00C72C  2  20 E0 C7             JSR     sprint          ;display MVN/MVP operand separator
00C72F  2  7A                   PLY                     ;recover operand index again
00C730  2  80 E7                BRA     _0220030        ;continue
00C732  2               ;
00C732  2               _0220040:
00C732  2  FA                   PLX                     ;symbology LSB
00C733  2  7A                   PLY                     ;symbology MSB
00C734  2  E8                   INX                     ;move past preamble
00C735  2  D0 01                BNE     _0220050
00C737  2               ;
00C737  2  C8                   INY
00C738  2               ;
00C738  2               _0220050:
00C738  2  5A                   PHY
00C739  2  DA                   PHX
00C73A  2  20 E0 C7             JSR     sprint          ;print postamble, if any
00C73D  2               ;
00C73D  2               ;
00C73D  2               ;	condition immediate mode display format...
00C73D  2               ;
00C73D  2               dpycod03:
00C73D  2  A5 39                LDA     operand         ;operand LSB
00C73F  2  29 30                AND     #pfmxmask       ;isolate M & X bits
00C741  2  0A                   ASL                     ;shift to match...
00C742  2  0A                   ASL                     ;FLIMFLAG alignment
00C743  2  A6 48                LDX     opcode          ;current instruction
00C745  2  E0 C2                CPX     #opc_rep        ;was it REP?
00C747  2  D0 04                BNE     _0230010        ;no
00C749  2               ;
00C749  2  04 4C                TSB     flimflag        ;set flag bits as required
00C74B  2  80 06                BRA     clearlin
00C74D  2               ;
00C74D  2               _0230010:
00C74D  2  E0 E2                CPX     #opc_sep        ;was it SEP?
00C74F  2  D0 02                BNE     clearlin        ;no, just exit
00C751  2               ;
00C751  2  14 4C                TRB     flimflag        ;clear flag bits as required
00C753  2               ;
00C753  2               ;================================================================================
00C753  2               ;
00C753  2               ;clearlin: CLEAR DISPLAY LINE
00C753  2               ;
00C753  2               clearlin:
00C753  2  60                   RTS
00C754  2               ;
00C754  2               ;================================================================================
00C754  2               ;
00C754  2               ;dpyibuf: DISPLAY MONITOR INPUT BUFFER CONTENTS
00C754  2               ;
00C754  2               dpyibuf:
00C754  2  F4 00 02             PEA     ibuffer
00C757  2  80 37                BRA     dpyerraa
00C759  2               ;
00C759  2               ;================================================================================
00C759  2               ;
00C759  2               ;dpymem: DISPLAY MEMORY
00C759  2               ;
00C759  2               ;	------------------------------------------------------------
00C759  2               ;	This function displays 16 bytes of memory as hex values & as
00C759  2               ;	ASCII equivalents.  The starting address for the display is
00C759  2               ;	in ADDRA & is expected to be a 24 bit address.  Upon return,
00C759  2               ;	ADDRA will point to the start of the next 16 bytes.
00C759  2               ;	------------------------------------------------------------
00C759  2               ;
00C759  2               dpymem:
00C759  2  E2 30                SHORTR
00C75B  2  64 42                STZ     charcnt         ;reset
00C75D  2               ;         lda #memprfx
00C75D  2               ;         jsr putcha            ;display prefix
00C75D  2  20 99 C7             JSR     prntladr        ;print 24 bit address
00C760  2  A2 00                LDX     #0              ;string buffer index
00C762  2  A0 08                LDY     #n_dump         ;bytes per line
00C764  2               ;
00C764  2               _0240010:
00C764  2  20 CC CA             JSR     getbyte         ;get from RAM, also...
00C767  2  48                   PHA                     ;save for decoding
00C768  2  DA                   PHX                     ;save string index
00C769  2  20 D0 C7             JSR     printbyt        ;display as hex ASCII
00C76C  2  E6 42                INC     charcnt         ;bytes displayed +1
00C76E  2  FA                   PLX                     ;recover string index &...
00C76F  2  68                   PLA                     ;byte
00C770  2  C9 20                CMP     #a_blank        ;printable?
00C772  2  90 04                BCC     _0240020        ;no
00C774  2               ;
00C774  2  C9 7F                CMP     #a_del
00C776  2  90 02                BCC     _0240030        ;is printable
00C778  2               ;
00C778  2               _0240020:
00C778  2  A9 2E                LDA     #memsubch       ;substitute character
00C77A  2               ;
00C77A  2               _0240030:
00C77A  2  9D 00 02             STA     ibuffer,x       ;save char
00C77D  2  E8                   INX                     ;bump index
00C77E  2  88                   DEY                     ;byte count -= 1
00C77F  2  D0 E3                BNE     _0240010        ;not done
00C781  2               ;
00C781  2  9E 00 02             STZ     ibuffer,x       ;terminate ASCII string
00C784  2  A9 3A                LDA     #memsepch
00C786  2  20 71 FF             JSR     putcha          ;separate ASCII from bytes
00C789  2  20 54 C7             JSR     dpyibuf         ;display ASCII equivalents
00C78C  2  60                   RTS
00C78D  2               ;
00C78D  2               ;================================================================================
00C78D  2               ;
00C78D  2               ;dpyerr: DISPLAY ERROR SIGNAL
00C78D  2               ;
00C78D  2               dpyerr:
00C78D  2  F4 79 D0             PEA     mm_err          ;"*ERR"
00C790  2               ;
00C790  2               dpyerraa:
00C790  2  20 E0 C7             JSR     sprint
00C793  2  60                   RTS
00C794  2               ;
00C794  2               ;================================================================================
00C794  2               ;
00C794  2               ;gendbs: GENERATE DESTRUCTIVE BACKSPACE
00C794  2               ;
00C794  2               gendbs:
00C794  2  F4 49 D0             PEA     dc_bs           ;destructive backspace
00C797  2  80 F7                BRA     dpyerraa
00C799  2               ;
00C799  2               ;================================================================================
00C799  2               ;
00C799  2               ;prntladr: PRINT 24 BIT CURRENT ADDRESS
00C799  2               ;
00C799  2               prntladr:
00C799  2  08                   PHP                     ;protect register sizes
00C79A  2  E2 20                SHORTA
00C79C  2  A5 21                LDA     addra+s_word    ;get bank byte &...
00C79E  2  20 B6 C7             JSR     dpyhex          ;display it
00C7A1  2  C2 20                SLONGA
00C7A3  2  A5 1F                LDA     addra           ;get 16 bit address
00C7A5  2  28                   PLP                     ;restore register sizes
00C7A6  2               ;
00C7A6  2               ;================================================================================
00C7A6  2               ;
00C7A6  2               ;dpyhexw: DISPLAY BINARY WORD AS HEX ASCII
00C7A6  2               ;
00C7A6  2               ;	------------------------------------
00C7A6  2               ;	Preparatory Ops: .C: word to display
00C7A6  2               ;
00C7A6  2               ;	Returned Values: .C: used
00C7A6  2               ;	                 .X: used
00C7A6  2               ;	                 .Y: entry value
00C7A6  2               ;	------------------------------------
00C7A6  2               ;
00C7A6  2               dpyhexw:
00C7A6  2  08                   PHP                     ;save register sizes
00C7A7  2  C2 20                SLONGA
00C7A9  2  48                   PHA                     ;protect value
00C7AA  2  E2 20                SHORTA
00C7AC  2  EB                   XBA                     ;get MSB &...
00C7AD  2  20 B6 C7             JSR     dpyhex          ;display
00C7B0  2  C2 20                SLONGA
00C7B2  2  68                   PLA                     ;recover value
00C7B3  2  E2 20                SHORTA                  ;only LSB visible
00C7B5  2  28                   PLP                     ;reset register sizes
00C7B6  2               ;
00C7B6  2               ;================================================================================
00C7B6  2               ;
00C7B6  2               ;dpyhex: DISPLAY BINARY BYTE AS HEX ASCII
00C7B6  2               ;
00C7B6  2               ;	------------------------------------
00C7B6  2               ;	Preparatory Ops: .A: byte to display
00C7B6  2               ;
00C7B6  2               ;	Returned Values: .A: used
00C7B6  2               ;	                 .X: used
00C7B6  2               ;	                 .Y: entry value
00C7B6  2               ;	------------------------------------
00C7B6  2               ;
00C7B6  2               dpyhex:
00C7B6  2  20 51 C9             JSR     binhex          ;convert to hex ASCII
00C7B9  2  20 71 FF             JSR     putcha          ;print MSN
00C7BC  2  8A                   TXA
00C7BD  2  4C 71 FF             JMP     putcha          ;print LSN
00C7C0  2               ;
00C7C0  2               ;================================================================================
00C7C0  2               ;
00C7C0  2               ;multspc: PRINT MULTIPLE BLANKS
00C7C0  2               ;
00C7C0  2               ;	------------------------------------------------
00C7C0  2               ;	Preparatory Ops : .X: number of blanks to print
00C7C0  2               ;
00C7C0  2               ;	Register Returns: none
00C7C0  2               ;
00C7C0  2               ;	Calling Example : ldx #3
00C7C0  2               ;	                  jsr multspc    ;print 3 spaces
00C7C0  2               ;
00C7C0  2               ;	Notes: This sub will print 1 blank if .X=0.
00C7C0  2               ;	------------------------------------------------
00C7C0  2               ;
00C7C0  2               
00C7C0  2               multspc:
00C7C0  2  8A                   TXA
00C7C1  2  D0 01                BNE     _0250010        ;blank count specified
00C7C3  2               ;
00C7C3  2  E8                   INX                     ;default to 1 blank
00C7C4  2               ;
00C7C4  2               _0250010:
00C7C4  2  20 DB C7             JSR     printspc
00C7C7  2  CA                   DEX
00C7C8  2  D0 FA                BNE     _0250010
00C7CA  2               ;
00C7CA  2  60                   RTS
00C7CB  2               
00C7CB  2               ;
00C7CB  2               ;================================================================================
00C7CB  2               ;
00C7CB  2               ;newline: PRINT NEWLINE (CRLF)
00C7CB  2               ;
00C7CB  2               newline:
00C7CB  2  F4 46 D0             PEA     dc_lf
00C7CE  2  80 C0                BRA     dpyerraa
00C7D0  2               ;
00C7D0  2               ;================================================================================
00C7D0  2               ;
00C7D0  2               ;printbyt: PRINT A BYTE WITH LEADING SPACE
00C7D0  2               ;
00C7D0  2               printbyt:
00C7D0  2  48                   PHA                     ;protect byte
00C7D1  2  20 DB C7             JSR     printspc        ;print leading space
00C7D4  2  68                   PLA                     ;restore &...
00C7D5  2  80 DF                BRA     dpyhex          ;print byte
00C7D7  2               ;
00C7D7  2               ;================================================================================
00C7D7  2               ;
00C7D7  2               ;alert: ALERT USER w/TERMINAL BELL
00C7D7  2               ;
00C7D7  2               alert:
00C7D7  2  A9 07                LDA     #a_bel
00C7D9  2  80 02                BRA     printcmn
00C7DB  2               ;
00C7DB  2               ;================================================================================
00C7DB  2               ;
00C7DB  2               ;printspc: PRINT A SPACE
00C7DB  2               ;
00C7DB  2               printspc:
00C7DB  2  A9 20                LDA     #a_blank
00C7DD  2               ;
00C7DD  2               printcmn:
00C7DD  2  4C 71 FF             JMP     putcha
00C7E0  2               ;
00C7E0  2               ;================================================================================
00C7E0  2               ;
00C7E0  2               ;sprint: PRINT NULL-TERMINATED CHARACTER STRING
00C7E0  2               ;
00C7E0  2               ;	---------------------------------------------------------
00C7E0  2               ;	Preparatory Ops : SP+1: string address LSB
00C7E0  2               ;	                  SP+2: string address MSB
00C7E0  2               ;
00C7E0  2               ;	Register Returns: .A: used
00C7E0  2               ;	                  .B: entry value
00C7E0  2               ;	                  .X: used
00C7E0  2               ;	                  .Y: used
00C7E0  2               ;
00C7E0  2               ;	MPU Flags: NVmxDIZC
00C7E0  2               ;	           ||||||||
00C7E0  2               ;	           |||||||+---> 0: okay
00C7E0  2               ;	           |||||||      1: string too long (1)
00C7E0  2               ;	           ||||+++----> not defined
00C7E0  2               ;	           |||+-------> 1
00C7E0  2               ;	           ||+--------> 1
00C7E0  2               ;	           ++---------> not defined
00C7E0  2               ;
00C7E0  2               ;	Example: PER STRING
00C7E0  2               ;	         JSR SPRINT
00C7E0  2               ;	         BCS TOOLONG
00C7E0  2               ;
00C7E0  2               ;	Notes: 1) Maximum permissible string length including the
00C7E0  2               ;	          terminator is 32,767 bytes.
00C7E0  2               ;	       2) All registers are forced to 8 bits.
00C7E0  2               ;	       3) DO NOT JUMP OR BRANCH INTO THIS FUNCTION!
00C7E0  2               ;	---------------------------------------------------------
00C7E0  2               ;
00C7E0  2               sprint:
00C7E0  2  E2 20                SHORTA                  ;8 bit accumulator
00C7E2  2  C2 10                LONGX                   ;16 bit index
00C7E4  2               ;
00C7E4  2               ;---------------------------------------------------------
00C7E4  2               _retaddr        = 1             ;return address
00C7E4  2               _src            = _retaddr+s_word;string address stack offset
00C7E4  2               ;---------------------------------------------------------
00C7E4  2               ;
00C7E4  2  A0 00 00             LDYW    0
00C7E7  2  18                   CLC                     ;no initial error
00C7E8  2               ;
00C7E8  2               _0260010:
00C7E8  2  B3 03                LDASI   _src            ;get a byte
00C7EA  2  F0 07                BEQ     _0260020        ;done
00C7EC  2               ;
00C7EC  2  20 71 FF             JSR     putcha          ;write to console port
00C7EF  2  C8                   INY
00C7F0  2  10 F6                BPL     _0260010        ;next
00C7F2  2               ;
00C7F2  2  38                   SEC                     ;string too long
00C7F3  2               ;
00C7F3  2               _0260020:
00C7F3  2  FA                   PLX                     ;pull RTS address
00C7F4  2  7A                   PLY                     ;clear string pointer
00C7F5  2  DA                   PHX                     ;replace RTS
00C7F6  2  E2 10                SHORTX
00C7F8  2  60                   RTS
00C7F9  2               ;
00C7F9  2               ;================================================================================
00C7F9  2               ;
00C7F9  2               ;ascbin: CONVERT NULL-TERMINATED ASCII NUMBER STRING TO BINARY
00C7F9  2               ;
00C7F9  2               ;	---------------------------------------------------
00C7F9  2               ;	Preparatory Ops: ASCII number string in IBUFFER
00C7F9  2               ;
00C7F9  2               ;	Returned Values: FACA: converted parameter
00C7F9  2               ;	                   .A: used
00C7F9  2               ;	                   .X: used
00C7F9  2               ;	                   .Y: used
00C7F9  2               ;	                   .C: 1 = conversion error
00C7F9  2               ;	                   .Z: 1 = nothing to convert
00C7F9  2               ;
00C7F9  2               ;	Notes: 1) Conversion stops when a non-numeric char-
00C7F9  2               ;	          acter is encountered.
00C7F9  2               ;	       2) Radix symbols are as follows:
00C7F9  2               ;
00C7F9  2               ;	          % binary
00C7F9  2               ;	          % octal
00C7F9  2               ;	          + decimal
00C7F9  2               ;	          $ hexadecimal
00C7F9  2               ;
00C7F9  2               ;	          Hex is the default if no radix is speci-
00C7F9  2               ;	          fied in the 1st character of the string.
00C7F9  2               ;	---------------------------------------------------
00C7F9  2               ;
00C7F9  2               ascbin:
00C7F9  2  E2 30                SHORTR
00C7FB  2  20 64 C9             JSR     clrfaca         ;clear accumulator
00C7FE  2  64 42                STZ     charcnt         ;zero char count
00C800  2  64 40                STZ     radix           ;initialize
00C802  2               ;
00C802  2               ;
00C802  2               ;	process radix if present...
00C802  2               ;
00C802  2  20 DE CB             JSR     getcharw        ;get next non-WS char
00C805  2  D0 02                BNE     _0270010        ;got something
00C807  2               ;
00C807  2  18                   CLC                     ;no more input
00C808  2  60                   RTS
00C809  2               ;
00C809  2               _0270010:
00C809  2  A2 03                LDX     #n_radix-1      ;number of radices
00C80B  2               ;
00C80B  2               _0270020:
00C80B  2  DD 36 CD             CMP     radxtab,x       ;recognized radix?
00C80E  2  F0 06                BEQ     _0270030        ;yes
00C810  2               ;
00C810  2  CA                   DEX
00C811  2  10 F8                BPL     _0270020        ;try next
00C813  2               ;
00C813  2  C6 3D                DEC     ibufidx         ;reposition to previous char
00C815  2  E8                   INX                     ;not recognized, assume hex
00C816  2               ;
00C816  2               _0270030:
00C816  2  C9 2B                CMP     #c_dec          ;decimal radix?
00C818  2  D0 02                BNE     _0270040        ;not decimal
00C81A  2               ;
00C81A  2  66 40                ROR     radix           ;flag decimal conversion
00C81C  2               ;
00C81C  2               _0270040:
00C81C  2  BD 22 CD             LDA     basetab,x       ;number bases table
00C81F  2  85 4E                STA     range           ;set valid numeral range
00C821  2  BD 26 CD             LDA     bitsdtab,x      ;get bits per digit
00C824  2  85 3E                STA     bitsdig         ;store
00C826  2               ;
00C826  2               ;
00C826  2               ;	process numerals...
00C826  2               ;
00C826  2               ascbin01:
00C826  2  20 80 CB             JSR     getchar         ;get next char
00C829  2  D0 03                BNE     _TMP0001        ;not EOI
00C82B  2  4C 9E C8             JMP     ascbin03        ;EOI
00C82E  2               ;
00C82E  2               _TMP0001:
00C82E  2  C9 20                CMP     #' '
00C830  2  F0 6C                BEQ     ascbin03        ;blank - EOF
00C832  2               ;
00C832  2  C9 2C                CMP     #','
00C834  2  F0 68                BEQ     ascbin03        ;comma - EOF
00C836  2               ;
00C836  2  C9 09                CMP     #a_ht
00C838  2  F0 64                BEQ     ascbin03        ;tab - EOF
00C83A  2               ;
00C83A  2  20 BE C9             JSR     nybtobin        ;change to binary
00C83D  2  B0 60                BCS     ascbin04        ;not a recognized numeral
00C83F  2               ;
00C83F  2  C5 4E                CMP     range           ;check range
00C841  2  B0 5C                BCS     ascbin04        ;not valid for base
00C843  2               ;
00C843  2  85 3F                STA     numeral         ;save processed numeral
00C845  2  E6 42                INC     charcnt         ;bump numeral count
00C847  2  24 40                BIT     radix           ;working in base 10?
00C849  2  10 15                BPL     _1570030        ;no
00C84B  2               ;
00C84B  2               ;
00C84B  2               ;	compute N*2 for decimal conversion...
00C84B  2               ;
00C84B  2  A2 00                LDX     #0              ;accumulator index
00C84D  2  A0 02                LDY     #s_pfac/2       ;iterations
00C84F  2  C2 20                SLONGA
00C851  2  18                   CLC
00C852  2               ;
00C852  2               _1570020:
00C852  2  B5 25                LDA     faca,x          ;N
00C854  2  2A                   ROL                     ;N=N*2
00C855  2  95 2D                STA     facb,x
00C857  2  E8                   INX
00C858  2  E8                   INX
00C859  2  88                   DEY
00C85A  2  D0 F6                BNE     _1570020
00C85C  2               ;
00C85C  2  B0 41                BCS     ascbin04        ;overflow - error
00C85E  2               ;
00C85E  2  E2 20                SHORTA
00C860  2               ;
00C860  2               ;
00C860  2               ;	compute N*base for binary, octal or hex...
00C860  2               ;	or N*8 for decimal...
00C860  2               ;
00C860  2               _1570030:
00C860  2  A6 3E                LDX     bitsdig         ;bits per digit
00C862  2  C2 20                SLONGA                  ;16 bit shifts
00C864  2               ;
00C864  2               _1570040:
00C864  2  06 25                ASL     faca
00C866  2  26 27                ROL     faca+s_word
00C868  2  B0 35                BCS     ascbin04        ;overflow - error
00C86A  2               ;
00C86A  2  CA                   DEX
00C86B  2  D0 F7                BNE     _1570040        ;next shift
00C86D  2               ;
00C86D  2  E2 20                SHORTA                  ;back to 8 bits
00C86F  2  24 40                BIT     radix           ;check base
00C871  2  10 13                BPL     ascbin02        ;not decimal
00C873  2               ;
00C873  2               ;
00C873  2               ;	compute N*10 for decimal (N*8 + N*2)...
00C873  2               ;
00C873  2  A0 04                LDY     #s_pfac
00C875  2  C2 20                SLONGA
00C877  2               ;
00C877  2               _1570050:
00C877  2  B5 25                LDA     faca,x          ;N*8
00C879  2  75 2D                ADC     facb,x          ;N*2
00C87B  2  95 25                STA     faca,x          ;now N*10
00C87D  2  E8                   INX
00C87E  2  E8                   INX
00C87F  2  88                   DEY
00C880  2  D0 F5                BNE     _1570050
00C882  2               ;
00C882  2  B0 1B                BCS     ascbin04        ;overflow - error
00C884  2               ;
00C884  2  E2 20                SHORTA
00C886  2               ;
00C886  2               ;
00C886  2               ;	add current numeral to partial result...
00C886  2               ;
00C886  2               ascbin02:
00C886  2  A5 25                LDA     faca            ;N
00C888  2  65 3F                ADC     numeral         ;N=N+D
00C88A  2  85 25                STA     faca
00C88C  2  A2 01                LDX     #1
00C88E  2  A0 03                LDY     #s_pfac-1
00C890  2               ;
00C890  2               _0280010:
00C890  2  B5 25                LDA     faca,x
00C892  2  69 00                ADC     #0              ;account for carry
00C894  2  95 25                STA     faca,x
00C896  2  E8                   INX
00C897  2  88                   DEY
00C898  2  D0 F6                BNE     _0280010
00C89A  2               ;
00C89A  2  90 08                BCC     _0280020        ;next if no overflow
00C89C  2               ;
00C89C  2  B0 01                BCS     ascbin04        ;overflow - error
00C89E  2               ;
00C89E  2               ;
00C89E  2               ;	finish up...
00C89E  2               ;
00C89E  2               ascbin03:
00C89E  2  18                   CLC                     ;no error
00C89F  2               ;
00C89F  2               ascbin04:
00C89F  2  E2 20                SHORTA                  ;reset if necessary
00C8A1  2  A5 42                LDA     charcnt         ;load char count
00C8A3  2  60                   RTS                     ;done
00C8A4  2               _0280020:
00C8A4  2  4C 26 C8             JMP     ascbin01        ;next if no overflow
00C8A7  2               ;
00C8A7  2               ;================================================================================
00C8A7  2               ;
00C8A7  2               ;bcdasc: CONVERT BCD DIGIT TO ASCII
00C8A7  2               ;
00C8A7  2               ;	---------------------------------------
00C8A7  2               ;	Preparatory Ops: .A: BCD digit, $00-$99
00C8A7  2               ;
00C8A7  2               ;	Returned Values: .A: ASCII MSD
00C8A7  2               ;	                 .X: ASCII LSD
00C8A7  2               ;	                 .Y: entry value
00C8A7  2               ;	---------------------------------------
00C8A7  2               ;
00C8A7  2               bcdasc:
00C8A7  2  20 B3 C8             JSR     bintonyb        ;extract nybbles
00C8AA  2  48                   PHA                     ;save tens
00C8AB  2  8A                   TXA
00C8AC  2  09 30                ORA     #btoamask       ;change units to ASCII
00C8AE  2  AA                   TAX                     ;store
00C8AF  2  68                   PLA                     ;get tens
00C8B0  2  09 30                ORA     #btoamask       ;change to ASCII
00C8B2  2  60                   RTS
00C8B3  2               ;
00C8B3  2               ;================================================================================
00C8B3  2               ;
00C8B3  2               ;bintonyb: EXTRACT BINARY NYBBLES
00C8B3  2               ;
00C8B3  2               ;	---------------------------------
00C8B3  2               ;	Preparatory Ops: .A: binary value
00C8B3  2               ;
00C8B3  2               ;	Returned Values: .A: MSN
00C8B3  2               ;	                 .X: LSN
00C8B3  2               ;	                 .Y: entry value
00C8B3  2               ;	---------------------------------
00C8B3  2               ;
00C8B3  2               bintonyb:
00C8B3  2  48                   PHA                     ;save
00C8B4  2  29 0F                AND     #bcdumask       ;extract LSN
00C8B6  2  AA                   TAX                     ;save it
00C8B7  2  68                   PLA
00C8B8  2               ;         .rept s_bnybbl        ;extract MSN
00C8B8  2  4A                   LSR
00C8B9  2  4A                   LSR
00C8BA  2  4A                   LSR
00C8BB  2  4A                   LSR
00C8BC  2               ;         .endr
00C8BC  2  60                   RTS
00C8BD  2               ;
00C8BD  2               ;================================================================================
00C8BD  2               ;
00C8BD  2               ;binasc: CONVERT 32-BIT BINARY TO NULL-TERMINATED ASCII NUMBER STRING
00C8BD  2               ;
00C8BD  2               ;	------------------------------------------------------
00C8BD  2               ;	Preparatory Ops: FACA: 32-bit operand
00C8BD  2               ;	                   .A: radix character, w/bit 7 set to
00C8BD  2               ;	                       suppress radix symbol in the
00C8BD  2               ;	                       conversion string
00C8BD  2               ;
00C8BD  2               ;	Returned Values: ibuffer: conversion string
00C8BD  2               ;	                      .A: string length
00C8BD  2               ;	                      .X: string address LSB
00C8BD  2               ;	                      .Y: string address MSB
00C8BD  2               ;
00C8BD  2               ;	Execution Notes: ibufidx & instsize are overwritten.
00C8BD  2               ;	------------------------------------------------------
00C8BD  2               ;
00C8BD  2               binasc:
00C8BD  2  64 3D                STZ     ibufidx         ;initialize string index
00C8BF  2  64 44                STZ     instsize        ;clear format flag
00C8C1  2               ;
00C8C1  2               ;
00C8C1  2               ;	evaluate radix...
00C8C1  2               ;
00C8C1  2  0A                   ASL                     ;extract format flag &...
00C8C2  2  66 44                ROR     instsize        ;save it
00C8C4  2  4A                   LSR                     ;extract radix character
00C8C5  2  A2 03                LDX     #n_radix-1      ;total radices
00C8C7  2               ;
00C8C7  2               _0290010:
00C8C7  2  DD 36 CD             CMP     radxtab,x       ;recognized radix?
00C8CA  2  F0 04                BEQ     _0290020        ;yes
00C8CC  2               ;
00C8CC  2  CA                   DEX
00C8CD  2  10 F8                BPL     _0290010        ;try next
00C8CF  2               ;
00C8CF  2  E8                   INX                     ;assume hex
00C8D0  2               ;
00C8D0  2               _0290020:
00C8D0  2  86 40                STX     radix           ;save radix index for later
00C8D2  2  24 44                BIT     instsize
00C8D4  2  30 08                BMI     _0290030        ;no radix symbol wanted
00C8D6  2               ;
00C8D6  2  BD 36 CD             LDA     radxtab,x       ;radix table
00C8D9  2  8D 00 02             STA     ibuffer         ;prepend to string
00C8DC  2  E6 3D                INC     ibufidx         ;bump string index
00C8DE  2               ;
00C8DE  2               _0290030:
00C8DE  2  C9 2B                CMP     #c_dec          ;converting to decimal?
00C8E0  2  D0 07                BNE     _0290040        ;no
00C8E2  2               ;
00C8E2  2  20 76 C9             JSR     facabcd         ;convert operand to BCD
00C8E5  2  A9 00                LDA     #0
00C8E7  2  80 17                BRA     _0290070        ;skip binary stuff
00C8E9  2               ;
00C8E9  2               ;
00C8E9  2               ;	prepare for binary, octal or hex conversion...
00C8E9  2               ;
00C8E9  2               _0290040:
00C8E9  2  A2 00                LDX     #0              ;operand index
00C8EB  2  A0 05                LDY     #s_sfac-1       ;workspace index
00C8ED  2               ;
00C8ED  2               _0290050:
00C8ED  2  B5 25                LDA     faca,x          ;copy operand to...
00C8EF  2  99 2D 00             STA     facb,y          ;workspace in...
00C8F2  2  88                   DEY                     ;big-endian order
00C8F3  2  E8                   INX
00C8F4  2  E0 04                CPX     #s_pfac
00C8F6  2  D0 F5                BNE     _0290050
00C8F8  2               ;
00C8F8  2  A9 00                LDA     #0
00C8FA  2  BB                   TYX
00C8FB  2               ;
00C8FB  2               _0290060:
00C8FB  2  95 2D                STA     facb,x          ;pad workspace
00C8FD  2  CA                   DEX
00C8FE  2  10 FB                BPL     _0290060
00C900  2               ;
00C900  2               ;
00C900  2               ;	set up conversion parameters...
00C900  2               ;
00C900  2               _0290070:
00C900  2  85 33                STA     facc            ;initialize byte counter
00C902  2  A4 40                LDY     radix           ;radix index
00C904  2  B9 32 CD             LDA     numstab,y       ;numerals in string
00C907  2  85 34                STA     facc+s_byte     ;set remaining numeral count
00C909  2  B9 2A CD             LDA     bitsntab,y      ;bits per numeral
00C90C  2  85 35                STA     facc+s_word     ;set
00C90E  2  B9 2E CD             LDA     lzsttab,y       ;leading zero threshold
00C911  2  85 36                STA     facc+s_xword    ;set
00C913  2               ;
00C913  2               ;
00C913  2               ;	generate conversion string...
00C913  2               ;
00C913  2               _0290080:
00C913  2  A9 00                LDA     #0
00C915  2  A4 35                LDY     facc+s_word     ;bits per numeral
00C917  2               ;
00C917  2               _0290090:
00C917  2  A2 05                LDX     #s_sfac-1       ;workspace size
00C919  2  18                   CLC                     ;avoid starting carry
00C91A  2               ;
00C91A  2               _0290100:
00C91A  2  36 2D                ROL     facb,x          ;shift out a bit...
00C91C  2  CA                   DEX                     ;from the operand or...
00C91D  2  10 FB                BPL     _0290100        ;BCD conversion result
00C91F  2               ;
00C91F  2  2A                   ROL                     ;bit to .A
00C920  2  88                   DEY
00C921  2  D0 F4                BNE     _0290090        ;more bits to grab
00C923  2               ;
00C923  2  A8                   TAY                     ;if numeral isn't zero...
00C924  2  D0 0A                BNE     _0290110        ;skip leading zero tests
00C926  2               ;
00C926  2  A6 34                LDX     facc+s_byte     ;remaining numerals
00C928  2  E4 36                CPX     facc+s_xword    ;leading zero threshold
00C92A  2  90 04                BCC     _0290110        ;below it, must convert
00C92C  2               ;
00C92C  2  A6 33                LDX     facc            ;processed byte count
00C92E  2  F0 11                BEQ     _0290130        ;discard leading zero
00C930  2               ;
00C930  2               _0290110:
00C930  2  C9 0A                CMP     #10             ;check range
00C932  2  90 02                BCC     _0290120        ;is 0-9
00C934  2               ;
00C934  2  69 06                ADC     #a_hexdec       ;apply hex adjust
00C936  2               ;
00C936  2               _0290120:
00C936  2  69 30                ADC     #'0'            ;change to ASCII
00C938  2  A4 3D                LDY     ibufidx         ;string index
00C93A  2  99 00 02             STA     ibuffer,y       ;save numeral in buffer
00C93D  2  E6 3D                INC     ibufidx         ;next buffer position
00C93F  2  E6 33                INC     facc            ;bytes=bytes+1
00C941  2               ;
00C941  2               _0290130:
00C941  2  C6 34                DEC     facc+s_byte     ;numerals=numerals-1
00C943  2  D0 CE                BNE     _0290080        ;not done
00C945  2               ;
00C945  2               ;
00C945  2               ;	terminate string & exit...
00C945  2               ;
00C945  2  A6 3D                LDX     ibufidx         ;printable string length
00C947  2  9E 00 02             STZ     ibuffer,x       ;terminate string
00C94A  2  8A                   TXA
00C94B  2  A2 00                LDX     #<ibuffer       ;converted string
00C94D  2  A0 02                LDY     #>ibuffer
00C94F  2  18                   CLC                     ;all okay
00C950  2  60                   RTS
00C951  2               ;
00C951  2               ;================================================================================
00C951  2               ;
00C951  2               ;binhex: CONVERT BINARY BYTE TO HEX ASCII CHARS
00C951  2               ;
00C951  2               ;	--------------------------------------------
00C951  2               ;	Preparatory Ops: .A: byte to convert
00C951  2               ;
00C951  2               ;	Returned Values: .A: MSN ASCII char
00C951  2               ;	                 .X: LSN ASCII char
00C951  2               ;	                 .Y: entry value
00C951  2               ;	--------------------------------------------
00C951  2               ;
00C951  2               binhex:
00C951  2  20 B3 C8             JSR     bintonyb        ;generate binary values
00C954  2  48                   PHA                     ;save MSN
00C955  2  8A                   TXA
00C956  2  20 5B C9             JSR     _0300010        ;generate ASCII LSN
00C959  2  AA                   TAX                     ;save
00C95A  2  68                   PLA                     ;get input
00C95B  2               ;
00C95B  2               ;
00C95B  2               ;	convert nybble to hex ASCII equivalent...
00C95B  2               ;
00C95B  2               _0300010:
00C95B  2  C9 0A                CMP     #10
00C95D  2  90 02                BCC     _0300020        ;in decimal range
00C95F  2               ;
00C95F  2  69 66                ADC     #k_hex          ;hex compensate
00C961  2               ;
00C961  2               _0300020:
00C961  2  49 30                EOR     #'0'            ;finalize nybble
00C963  2  60                   RTS                     ;done
00C964  2               ;
00C964  2               ;================================================================================
00C964  2               ;
00C964  2               ;clrfaca: CLEAR FLOATING ACCUMULATOR A
00C964  2               ;
00C964  2               clrfaca:
00C964  2  08                   PHP
00C965  2  C2 20                SLONGA
00C967  2  64 25                STZ     faca
00C969  2  64 27                STZ     faca+s_word
00C96B  2  28                   PLP
00C96C  2  60                   RTS
00C96D  2               ;
00C96D  2               ;================================================================================
00C96D  2               ;
00C96D  2               ;clrfacb: CLEAR FLOATING ACCUMULATOR B
00C96D  2               ;
00C96D  2               clrfacb:
00C96D  2  08                   PHP
00C96E  2  C2 20                SLONGA
00C970  2  64 2D                STZ     facb
00C972  2  64 2F                STZ     facb+s_word
00C974  2  28                   PLP
00C975  2  60                   RTS
00C976  2               ;
00C976  2               ;================================================================================
00C976  2               ;
00C976  2               ;facabcd: CONVERT FACA INTO BCD
00C976  2               ;
00C976  2               facabcd:
00C976  2  A2 03                LDX     #s_pfac-1       ;primary accumulator size -1
00C978  2               ;
00C978  2               _1300010:
00C978  2  B5 25                LDA     faca,x          ;value to be converted
00C97A  2  48                   PHA                     ;preserve
00C97B  2  CA                   DEX
00C97C  2  10 FA                BPL     _1300010        ;next
00C97E  2               ;
00C97E  2  A2 05                LDX     #s_sfac-1       ;workspace size
00C980  2               ;
00C980  2               _1300020:
00C980  2  74 2D                STZ     facb,x          ;clear final result
00C982  2  74 33                STZ     facc,x          ;clear scratchpad
00C984  2  CA                   DEX
00C985  2  10 F9                BPL     _1300020
00C987  2               ;
00C987  2  E6 38                INC     facc+s_sfac-s_byte
00C989  2  F8                   SED                     ;select decimal mode
00C98A  2  A0 1F                LDY     #m_bits-1       ;bits to convert -1
00C98C  2               ;
00C98C  2               _1300030:
00C98C  2  A2 03                LDX     #s_pfac-1       ;operand size
00C98E  2  18                   CLC                     ;no carry at start
00C98F  2               ;
00C98F  2               _1300040:
00C98F  2  76 25                ROR     faca,x          ;grab LS bit in operand
00C991  2  CA                   DEX
00C992  2  10 FB                BPL     _1300040
00C994  2               ;
00C994  2  90 0D                BCC     _1300060        ;LS bit clear
00C996  2               ;
00C996  2  18                   CLC
00C997  2  A2 05                LDX     #s_sfac-1
00C999  2               ;
00C999  2               _1300050:
00C999  2  B5 2D                LDA     facb,x          ;partial result
00C99B  2  75 33                ADC     facc,x          ;scratchpad
00C99D  2  95 2D                STA     facb,x          ;new partial result
00C99F  2  CA                   DEX
00C9A0  2  10 F7                BPL     _1300050
00C9A2  2               ;
00C9A2  2  18                   CLC
00C9A3  2               ;
00C9A3  2               _1300060:
00C9A3  2  A2 05                LDX     #s_sfac-1
00C9A5  2               ;
00C9A5  2               _1300070:
00C9A5  2  B5 33                LDA     facc,x          ;scratchpad
00C9A7  2  75 33                ADC     facc,x          ;double &...
00C9A9  2  95 33                STA     facc,x          ;save
00C9AB  2  CA                   DEX
00C9AC  2  10 F7                BPL     _1300070
00C9AE  2               ;
00C9AE  2  88                   DEY
00C9AF  2  10 DB                BPL     _1300030        ;next operand bit
00C9B1  2               ;
00C9B1  2  D8                   CLD
00C9B2  2  A2 00                LDX     #0
00C9B4  2  A0 04                LDY     #s_pfac
00C9B6  2               ;
00C9B6  2               _1300080:
00C9B6  2  68                   PLA                     ;operand
00C9B7  2  95 25                STA     faca,x          ;restore
00C9B9  2  E8                   INX
00C9BA  2  88                   DEY
00C9BB  2  D0 F9                BNE     _1300080        ;next
00C9BD  2               ;
00C9BD  2  60                   RTS
00C9BE  2               ;
00C9BE  2               ;================================================================================
00C9BE  2               ;
00C9BE  2               ;nybtobin: CONVERT ASCII NYBBLE TO BINARY
00C9BE  2               ;
00C9BE  2               nybtobin:
00C9BE  2  20 46 CC             JSR     toupper         ;convert case if necessary
00C9C1  2  38                   SEC
00C9C2  2  E9 30                SBC     #'0'            ;change to binary
00C9C4  2  90 08                BCC     _0310020        ;not a numeral - error
00C9C6  2               ;
00C9C6  2  C9 0A                CMP     #10
00C9C8  2  90 03                BCC     _0310010        ;numeral is 0-9
00C9CA  2               ;
00C9CA  2  E9 07                SBC     #a_hexdec+1     ;10-15 --> A-F
00C9CC  2  18                   CLC                     ;no conversion error
00C9CD  2               ;
00C9CD  2               _0310010:
00C9CD  2  60                   RTS
00C9CE  2               ;
00C9CE  2               _0310020:
00C9CE  2  38                   SEC                     ;conversion error
00C9CF  2  60                   RTS
00C9D0  2               ;
00C9D0  2               ;================================================================================
00C9D0  2               ;
00C9D0  2               ;calccnt: COMPUTE BYTE COUNT FROM ADDRESS RANGE
00C9D0  2               ;
00C9D0  2               calccnt:
00C9D0  2  20 6D C9             JSR     clrfacb         ;clear accumulator
00C9D3  2  C2 20                SLONGA
00C9D5  2  38                   SEC
00C9D6  2  A5 22                LDA     addrb           ;ending address
00C9D8  2  E5 1F                SBC     addra           ;starting address
00C9DA  2  85 2D                STA     facb            ;byte count
00C9DC  2  E2 20                SHORTA
00C9DE  2  A5 24                LDA     addrb+s_word    ;handle banks
00C9E0  2  E5 21                SBC     addra+s_word
00C9E2  2  85 2F                STA     facb+s_word
00C9E4  2  60                   RTS
00C9E5  2               ;
00C9E5  2               ;================================================================================
00C9E5  2               ;
00C9E5  2               ;clroper: CLEAR OPERAND
00C9E5  2               ;
00C9E5  2               clroper:
00C9E5  2  DA                   PHX
00C9E6  2  A2 02                LDX     #s_oper-1
00C9E8  2               ;
00C9E8  2               _0320010:
00C9E8  2  74 39                STZ     operand,x
00C9EA  2  CA                   DEX
00C9EB  2  10 FB                BPL     _0320010
00C9ED  2               ;
00C9ED  2  64 4B                STZ     eopsize
00C9EF  2  FA                   PLX
00C9F0  2  60                   RTS
00C9F1  2               ;
00C9F1  2               ;================================================================================
00C9F1  2               ;
00C9F1  2               ;cpfwsup: FOWARD COPY MEMORY SETUP
00C9F1  2               ;
00C9F1  2               cpfwsup:
00C9F1  2  C2 30                LONGR
00C9F3  2  A2 54 00             LDXW    opc_mvn         ;"move next" opcode
00C9F6  2  80 05                BRA     cpsup
00C9F8  2               ;
00C9F8  2               ;================================================================================
00C9F8  2               ;
00C9F8  2               ;cprvsup: REVERSE COPY MEMORY SETUP
00C9F8  2               ;
00C9F8  2               cprvsup:
00C9F8  2  C2 30                LONGR
00C9FA  2  A2 44 00             LDXW    opc_mvp         ;"move previous" opcode
00C9FD  2               ;
00C9FD  2               ;================================================================================
00C9FD  2               ;
00C9FD  2               ;cpsup: COPY MEMORY SETUP
00C9FD  2               ;
00C9FD  2               cpsup:
00C9FD  2  48                   PHA                     ;save banks
00C9FE  2  8A                   TXA                     ;protect...
00C9FF  2  EB                   XBA                     ;opcode
00CA00  2  E2 20                SHORTA
00CA02  2  A2 08 00             LDXW    copylen
00CA05  2               ;
00CA05  2               _1320010:
00CA05  2  BF F2 CC 00          LDALX   cpcode          ;transfer copy code to...
00CA09  2  95 25                STA     mcftwork,x      ;to workspace
00CA0B  2  CA                   DEX
00CA0C  2  10 F7                BPL     _1320010
00CA0E  2               ;
00CA0E  2  EB                   XBA                     ;recover opcode &...
00CA0F  2  85 26                STA     mcftopc         ;set it
00CA11  2  C2 20                SLONGA
00CA13  2  68                   PLA                     ;get banks &...
00CA14  2  85 27                STA     mcftbnk         ;set them
00CA16  2  60                   RTS
00CA17  2               ;
00CA17  2               ;================================================================================
00CA17  2               ;
00CA17  2               ;decdcnt: DECREMENT DUMP COUNT
00CA17  2               ;
00CA17  2               ;	-------------------------------------------
00CA17  2               ;	Preparatory Ops: bytes to process in FACB
00CA17  2               ;	                 bytes processed in CHARCNT
00CA17  2               ;
00CA17  2               ;	Returned Values: .A: used
00CA17  2               ;	                 .X: entry value
00CA17  2               ;	                 .Y: entry value
00CA17  2               ;	                 .C: 1 = count = zero
00CA17  2               ;	-------------------------------------------
00CA17  2               ;
00CA17  2               decdcnt:
00CA17  2  E2 20                SHORTA
00CA19  2  A9 00                LDA     #0
00CA1B  2  EB                   XBA                     ;clear .B
00CA1C  2  A5 2F                LDA     facb+s_word     ;count MSW
00CA1E  2  C2 20                SLONGA
00CA20  2  38                   SEC
00CA21  2  05 2D                ORA     facb            ;count LSW
00CA23  2  F0 13                BEQ     _0330020        ;zero, just exit
00CA25  2               ;
00CA25  2  A5 2D                LDA     facb
00CA27  2  E5 42                SBC     charcnt         ;bytes processed
00CA29  2  85 2D                STA     facb
00CA2B  2  E2 20                SHORTA
00CA2D  2  A5 2F                LDA     facb+s_word
00CA2F  2  E9 00                SBC     #0              ;handle borrow
00CA31  2  90 04                BCC     _0330010        ;underflow
00CA33  2               ;
00CA33  2  85 2F                STA     facb+s_word
00CA35  2  18                   CLC                     ;count > 0
00CA36  2  60                   RTS
00CA37  2               ;
00CA37  2               _0330010:
00CA37  2  38                   SEC
00CA38  2               ;
00CA38  2               _0330020:
00CA38  2  E2 20                SHORTA
00CA3A  2  60                   RTS
00CA3B  2               ;
00CA3B  2               ;================================================================================
00CA3B  2               ;
00CA3B  2               ;enddest: GET 2ND & 3RD ADDRESSES FOR COMPARE & TRANSFER
00CA3B  2               ;
00CA3B  2               enddest:
00CA3B  2  20 7F CA             JSR     facasize        ;check start...
00CA3E  2  C9 04                CMP     #s_dword        ;for range
00CA40  2  B0 1E                BCS     _0340010        ;out of range - error
00CA42  2               ;
00CA42  2  20 61 CA             JSR     facaddra        ;store start
00CA45  2  20 8F CA             JSR     getparm         ;get end
00CA48  2  B0 16                BCS     _0340010        ;not entered - error
00CA4A  2               ;
00CA4A  2  20 7F CA             JSR     facasize        ;check end...
00CA4D  2  C9 04                CMP     #s_dword        ;for range
00CA4F  2  B0 0F                BCS     _0340010        ;out of range - error
00CA51  2               ;
00CA51  2  20 6B CA             JSR     facaddrb        ;store end
00CA54  2  20 8F CA             JSR     getparm         ;get destination
00CA57  2  B0 07                BCS     _0340010        ;not entered - error
00CA59  2               ;
00CA59  2  20 7F CA             JSR     facasize        ;check destination...
00CA5C  2  C9 04                CMP     #s_dword        ;for range
00CA5E  2  90 15                BCC     facaoper        ;store dest address
00CA60  2               ;
00CA60  2               _0340010:
00CA60  2  60                   RTS                     ;exit w/error
00CA61  2               ;
00CA61  2               ;================================================================================
00CA61  2               ;
00CA61  2               ;facaddra: COPY FACA TO ADDRA
00CA61  2               ;
00CA61  2               facaddra:
00CA61  2  A2 02                LDX     #s_xword-1
00CA63  2               ;
00CA63  2               _0350010:
00CA63  2  B5 25                LDA     faca,x
00CA65  2  95 1F                STA     addra,x
00CA67  2  CA                   DEX
00CA68  2  10 F9                BPL     _0350010
00CA6A  2               ;
00CA6A  2  60                   RTS
00CA6B  2               ;
00CA6B  2               ;================================================================================
00CA6B  2               ;
00CA6B  2               ;facaddrb: COPY FACA TO ADDRB
00CA6B  2               ;
00CA6B  2               facaddrb:
00CA6B  2  A2 02                LDX     #s_xword-1
00CA6D  2               ;
00CA6D  2               _1350010:
00CA6D  2  B5 25                LDA     faca,x
00CA6F  2  95 22                STA     addrb,x
00CA71  2  CA                   DEX
00CA72  2  10 F9                BPL     _1350010
00CA74  2               ;
00CA74  2  60                   RTS
00CA75  2               ;
00CA75  2               ;================================================================================
00CA75  2               ;
00CA75  2               ;facaoper: COPY FACA TO OPERAND
00CA75  2               ;
00CA75  2               facaoper:
00CA75  2  A2 02                LDX     #s_oper-1
00CA77  2               ;
00CA77  2               _0360010:
00CA77  2  B5 25                LDA     faca,x
00CA79  2  95 39                STA     operand,x
00CA7B  2  CA                   DEX
00CA7C  2  10 F9                BPL     _0360010
00CA7E  2               ;
00CA7E  2  60                   RTS
00CA7F  2               ;
00CA7F  2               ;================================================================================
00CA7F  2               ;
00CA7F  2               ;facasize: REPORT OPERAND SIZE IN FACA
00CA7F  2               ;
00CA7F  2               ;	------------------------------------------
00CA7F  2               ;	Preparatory Ops: operand in FACA
00CA7F  2               ;
00CA7F  2               ;	Returned Values: .A: s_byte  (1)
00CA7F  2               ;	                     s_word  (2)
00CA7F  2               ;	                     s_xword (3)
00CA7F  2               ;	                     s_dword (4)
00CA7F  2               ;
00CA7F  2               ;	Notes: 1) This function will always report
00CA7F  2               ;	          a non-zero result.
00CA7F  2               ;	------------------------------------------
00CA7F  2               ;
00CA7F  2               facasize:
00CA7F  2  E2 30                SHORTR
00CA81  2  A2 03                LDX     #s_dword-1
00CA83  2               ;
00CA83  2               _0370010:
00CA83  2  B5 25                LDA     faca,x          ;get byte
00CA85  2  D0 03                BNE     _0370020        ;done
00CA87  2               ;
00CA87  2  CA                   DEX
00CA88  2  D0 F9                BNE     _0370010        ;next byte
00CA8A  2               ;
00CA8A  2               _0370020:
00CA8A  2  E8                   INX                     ;count=index+1
00CA8B  2  8A                   TXA
00CA8C  2  60                   RTS
00CA8D  2               ;
00CA8D  2               ;================================================================================
00CA8D  2               ;
00CA8D  2               ;getparm: GET A PARAMETER
00CA8D  2               ;
00CA8D  2               ;	-------------------------------------------------
00CA8D  2               ;	Preparatory Ops: null-terminated input in IBUFFER
00CA8D  2               ;
00CA8D  2               ;	Returned Values: .A: chars in converted parameter
00CA8D  2               ;	                 .X: used
00CA8D  2               ;	                 .Y: entry value
00CA8D  2               ;	                 .C: 1 = no parameter entered
00CA8D  2               ;	-------------------------------------------------
00CA8D  2               ;
00CA8D  2               getparmr:
00CA8D  2  C6 3D                DEC     ibufidx         ;reread previous char
00CA8F  2               ;
00CA8F  2               getparm:
00CA8F  2  5A                   PHY                     ;preserve
00CA90  2  20 F9 C7             JSR     ascbin          ;convert parameter to binary
00CA93  2  B0 1C                BCS     _0380040        ;conversion error
00CA95  2               ;
00CA95  2  20 7E CB             JSR     getcharr        ;reread last char
00CA98  2  D0 08                BNE     _0380010        ;not end-of-input
00CA9A  2               ;
00CA9A  2  C6 3D                DEC     ibufidx         ;reindex to terminator
00CA9C  2  A5 42                LDA     charcnt         ;get chars processed so far
00CA9E  2  F0 0C                BEQ     _0380030        ;none
00CAA0  2               ;
00CAA0  2  D0 08                BNE     _0380020        ;some
00CAA2  2               ;
00CAA2  2               _0380010:
00CAA2  2  C9 20                CMP     #a_blank        ;recognized delimiter
00CAA4  2  F0 04                BEQ     _0380020        ;end of parameter
00CAA6  2               ;
00CAA6  2  C9 2C                CMP     #','            ;recognized delimiter
00CAA8  2  D0 07                BNE     _0380040        ;unknown delimter
00CAAA  2               ;
00CAAA  2               _0380020:
00CAAA  2  18                   CLC
00CAAB  2  24                   .BYTE   bitzp           ;skip SEC below
00CAAC  2               ;
00CAAC  2               _0380030:
00CAAC  2  38                   SEC
00CAAD  2  7A                   PLY                     ;restore
00CAAE  2  A5 42                LDA     charcnt         ;get count
00CAB0  2  60                   RTS                     ;done
00CAB1  2               ;
00CAB1  2               _0380040:                       ;.rept 3               ;clean up stack
00CAB1  2  68                   PLA
00CAB2  2  68                   PLA
00CAB3  2  68                   PLA
00CAB4  2               ;.endr
00CAB4  2  4C 7E C1             JMP     monerr          ;abort w/error
00CAB7  2               ;
00CAB7  2               ;================================================================================
00CAB7  2               ;
00CAB7  2               ;nxtaddra: TEST & INCREMENT WORKING ADDRESS 'A'
00CAB7  2               ;
00CAB7  2               ;	--------------------------------------------------
00CAB7  2               ;	Calling syntax: JSR NXTADDRA
00CAB7  2               ;
00CAB7  2               ;	Exit registers: .A: used
00CAB7  2               ;	                .B: used
00CAB7  2               ;	                .X: entry value
00CAB7  2               ;	                .Y: entry value
00CAB7  2               ;	                DB: entry value
00CAB7  2               ;	                DP: entry value
00CAB7  2               ;	                PB: entry value
00CAB7  2               ;	                SR: NVmxDIZC
00CAB7  2               ;	                    ||||||||
00CAB7  2               ;	                    |||||||+---> 0: ADDRA < ADDRB
00CAB7  2               ;	                    |||||||      1: ADDRA >= ADDRB
00CAB7  2               ;	                    ||||||+----> undefined
00CAB7  2               ;	                    |||+++-----> entry value
00CAB7  2               ;	                    ||+--------> 1
00CAB7  2               ;	                    ++---------> undefined
00CAB7  2               ;	--------------------------------------------------
00CAB7  2               ;
00CAB7  2               nxtaddra:
00CAB7  2  E2 20                SHORTA
00CAB9  2  A5 21                LDA     addra+s_word    ;bits 16-23
00CABB  2  C5 24                CMP     addrb+s_word
00CABD  2  90 0F                BCC     incaddra        ;increment
00CABF  2               ;
00CABF  2  D0 0A                BNE     _0390010        ;don't increment
00CAC1  2               ;
00CAC1  2  C2 20                SLONGA
00CAC3  2  A5 1F                LDA     addra           ;bits 0-15
00CAC5  2  C5 22                CMP     addrb           ;condition flags
00CAC7  2  E2 20                SHORTA
00CAC9  2  90 03                BCC     incaddra        ;increment
00CACB  2               ;
00CACB  2               _0390010:
00CACB  2  60                   RTS
00CACC  2               ;
00CACC  2               ;================================================================================
00CACC  2               ;
00CACC  2               ;getbyte: GET A BYTE FROM MEMORY
00CACC  2               ;
00CACC  2               getbyte:
00CACC  2  A7 1F                LDAIL   addra           ;get a byte
00CACE  2               ;
00CACE  2               ;================================================================================
00CACE  2               ;
00CACE  2               ;incaddra: INCREMENT WORKING ADDRESS 'A'
00CACE  2               ;
00CACE  2               ;	--------------------------------------------------
00CACE  2               ;	Calling syntax: JSR INCADDRA
00CACE  2               ;
00CACE  2               ;	Exit registers: .A: entry value
00CACE  2               ;	                .B: entry value
00CACE  2               ;	                .X: entry value
00CACE  2               ;	                .Y: entry value
00CACE  2               ;	                DB: entry value
00CACE  2               ;	                DP: entry value
00CACE  2               ;	                PB: entry value
00CACE  2               ;	                SR: NVmxDIZC
00CACE  2               ;	                    ||||||||
00CACE  2               ;	                    ++++++++---> entry value
00CACE  2               ;	--------------------------------------------------
00CACE  2               ;
00CACE  2               incaddra:
00CACE  2  08                   PHP
00CACF  2  C2 20                SLONGA
00CAD1  2  E6 1F                INC     addra           ;bump bits 0-15
00CAD3  2  D0 04                BNE     _0400010
00CAD5  2               ;
00CAD5  2  E2 20                SHORTA
00CAD7  2  E6 21                INC     addra+s_word    ;bump bits 16-23
00CAD9  2               ;
00CAD9  2               _0400010:
00CAD9  2  28                   PLP
00CADA  2  60                   RTS
00CADB  2               ;
00CADB  2               ;================================================================================
00CADB  2               ;
00CADB  2               ;incoper: INCREMENT OPERAND ADDRESS
00CADB  2               ;
00CADB  2               incoper:
00CADB  2  18                   CLC
00CADC  2  08                   PHP
00CADD  2  C2 30                LONGR
00CADF  2  48                   PHA
00CAE0  2  E6 39                INC     operand         ;handle base address
00CAE2  2  D0 06                BNE     _0410010
00CAE4  2               ;
00CAE4  2  E2 20                SHORTA
00CAE6  2  E6 3B                INC     operand+s_word  ;handle bank
00CAE8  2  C2 20                SLONGA
00CAEA  2               ;
00CAEA  2               _0410010:
00CAEA  2  68                   PLA
00CAEB  2  28                   PLP
00CAEC  2  60                   RTS
00CAED  2               ;
00CAED  2               ;================================================================================
00CAED  2               ;
00CAED  2               ;instdata: GET INSTRUCTION SIZE & ADDRESSING MODE DATA
00CAED  2               ;
00CAED  2               ;	----------------------------------
00CAED  2               ;	Preparatory Ops: .X: 65C816 opcode
00CAED  2               ;
00CAED  2               ;	Returned Values: .A: mode flags
00CAED  2               ;	                 .X: operand size
00CAED  2               ;	                 .Y: mode index
00CAED  2               ;	----------------------------------
00CAED  2               ;
00CAED  2               instdata:
00CAED  2  E2 30                SHORTR
00CAEF  2  BD FB CE             LDA     mnetabam,x      ;addressing mode data
00CAF2  2  48                   PHA                     ;save mode flag bits
00CAF3  2  48                   PHA                     ;save size data
00CAF4  2  29 0F                AND     #amodmask       ;extract mode index &...
00CAF6  2  A8                   TAY                     ;save
00CAF7  2  68                   PLA                     ;recover data
00CAF8  2  29 30                AND     #opsmask        ;mask mode fields &...
00CAFA  2               ;         .rept n_opslsr        ;extract operand size
00CAFA  2  4A                   LSR
00CAFB  2  4A                   LSR
00CAFC  2  4A                   LSR
00CAFD  2  4A                   LSR
00CAFE  2               ;         .endr
00CAFE  2  AA                   TAX                     ;operand size
00CAFF  2  68                   PLA                     ;recover mode flags
00CB00  2  29 C0                AND     #vopsmask       ;discard mode & size fields
00CB02  2  60                   RTS
00CB03  2               ;
00CB03  2               ;================================================================================
00CB03  2               ;
00CB03  2               ;offtarg: CONVERT BRANCH OFFSET TO TARGET ADDRESS
00CB03  2               ;
00CB03  2               ;	-----------------------------------------------
00CB03  2               ;	Preparatory Ops:    ADDRA: base address
00CB03  2               ;	                 INSTSIZE: instruction size
00CB03  2               ;	                  OPERAND: offset
00CB03  2               ;
00CB03  2               ;	Returned Values:  OPERAND: target address (L/H)
00CB03  2               ;	                       .A: used
00CB03  2               ;	                       .X: entry value
00CB03  2               ;                              .Y: entry value
00CB03  2               ;	-----------------------------------------------
00CB03  2               ;
00CB03  2               offtarg:
00CB03  2  C2 20                SLONGA
00CB05  2  A5 1F                LDA     addra           ;base address
00CB07  2  E2 20                SHORTA
00CB09  2  46 44                LSR     instsize        ;bit 0 will be set if...
00CB0B  2  B0 07                BCS     _0420010        ;a long branch
00CB0D  2               ;
00CB0D  2  24 39                BIT     operand         ;short forward or backward?
00CB0F  2  10 03                BPL     _0420010        ;forward
00CB11  2               ;
00CB11  2  EB                   XBA                     ;expose address MSB
00CB12  2  3A                   DEA                     ;back a page
00CB13  2  EB                   XBA                     ;expose address LSB
00CB14  2               ;
00CB14  2               _0420010:
00CB14  2  C2 20                SLONGA
00CB16  2  18                   CLC
00CB17  2  65 39                ADC     operand         ;calculate target address
00CB19  2  85 39                STA     operand         ;new operand
00CB1B  2  E2 20                SHORTA
00CB1D  2  A9 03                LDA     #s_xword
00CB1F  2  85 44                STA     instsize        ;effective instruction size
00CB21  2  60                   RTS
00CB22  2               ;
00CB22  2               ;================================================================================
00CB22  2               ;
00CB22  2               ;setxaddr: SET EXECUTION ADDRESS
00CB22  2               ;
00CB22  2               setxaddr:
00CB22  2  B0 13                BCS     _0430010        ;no address given
00CB24  2               ;
00CB24  2  20 7F CA             JSR     facasize        ;check address...
00CB27  2  C9 04                CMP     #s_dword        ;range
00CB29  2  B0 0D                BCS     _0430020        ;out of range
00CB2B  2               ;
00CB2B  2  C2 20                SLONGA
00CB2D  2  A5 25                LDA     faca            ;execution address
00CB2F  2  85 11                STA     reg_pcx         ;set new PC value
00CB31  2  E2 20                SHORTA
00CB33  2  A5 27                LDA     faca+s_word
00CB35  2  85 10                STA     reg_pbx         ;set new PB value
00CB37  2               ;
00CB37  2               _0430010:
00CB37  2  18                   CLC                     ;no error
00CB38  2               ;
00CB38  2               _0430020:
00CB38  2  60                   RTS
00CB39  2               ;
00CB39  2               ;================================================================================
00CB39  2               ;
00CB39  2               ;targoff: CONVERT BRANCH TARGET ADDRESS TO BRANCH OFFSET
00CB39  2               ;
00CB39  2               ;	-------------------------------------------------
00CB39  2               ;	Preparatory Ops:   ADDRA: instruction address
00CB39  2               ;	                 OPERAND: target address
00CB39  2               ;
00CB39  2               ;	Returned Values: OPERAND: computed offset
00CB39  2               ;	                      .A: effective operand size
00CB39  2               ;	                      .X: entry value
00CB39  2               ;                             .Y: entry value
00CB39  2               ;	                      .C: 1 = branch out of range
00CB39  2               ;
00CB39  2               ;	Execution notes: ADDRB is set to the branch base
00CB39  2               ;	                 address.
00CB39  2               ;	-------------------------------------------------
00CB39  2               ;
00CB39  2               targoff:
00CB39  2  64 45                STZ     instsize+s_byte ;always zero
00CB3B  2  A5 44                LDA     instsize        ;instruction size will tell...
00CB3D  2  4A                   LSR                     ;if long or short branch
00CB3E  2               ;
00CB3E  2               ;-------------------------------------------------
00CB3E  2               _btype          = facc+5        ;branch type flag
00CB3E  2               ;-------------------------------------------------
00CB3E  2               ;
00CB3E  2  66 38                ROR     _btype          ;set branch type...
00CB40  2               ;
00CB40  2               ;	x0000000
00CB40  2               ;	|
00CB40  2               ;	+----------> 0: short
00CB40  2               ;	             1: long
00CB40  2               ;
00CB40  2  C2 20                SLONGA
00CB42  2  18                   CLC
00CB43  2  A5 1F                LDA     addra           ;instruction address
00CB45  2  65 44                ADC     instsize        ;instruction size
00CB47  2  85 22                STA     addrb           ;base address
00CB49  2  38                   SEC
00CB4A  2  A5 39                LDA     operand         ;target address
00CB4C  2  E5 22                SBC     addrb           ;base address
00CB4E  2  85 39                STA     operand         ;offset
00CB50  2  E2 20                SHORTA
00CB52  2  90 15                BCC     _0440040        ;backward branch
00CB54  2               ;
00CB54  2  24 38                BIT     _btype          ;check branch range
00CB56  2  30 0A                BMI     _0440020        ;long
00CB58  2               ;
00CB58  2               ;
00CB58  2               ;	process short forward branch...
00CB58  2               ;
00CB58  2  EB                   XBA                     ;offset MSB should be zero
00CB59  2  D0 21                BNE     _0440060        ;it isn't - out of range
00CB5B  2               ;
00CB5B  2  EB                   XBA                     ;offset LSB should be $00-$7F
00CB5C  2  30 1E                BMI     _0440060        ;it isn't - out of range
00CB5E  2               ;
00CB5E  2               _0440010:
00CB5E  2  A9 01                LDA     #s_byte         ;final instruction size
00CB60  2  18                   CLC                     ;branch in range
00CB61  2  60                   RTS
00CB62  2               ;
00CB62  2               ;
00CB62  2               ;	process long forward branch...
00CB62  2               ;
00CB62  2               _0440020:
00CB62  2  EB                   XBA                     ;offset MSB should be positive
00CB63  2  30 17                BMI     _0440060        ;it isn't - branch out of range
00CB65  2               ;
00CB65  2               _0440030:
00CB65  2  A9 02                LDA     #s_word
00CB67  2  18                   CLC
00CB68  2  60                   RTS
00CB69  2               ;
00CB69  2               ;
00CB69  2               ;	process backward branch...
00CB69  2               ;
00CB69  2               _0440040:
00CB69  2  24 38                BIT     _btype          ;long or short?
00CB6B  2  30 0C                BMI     _0440050        ;long
00CB6D  2               ;
00CB6D  2               ;
00CB6D  2               ;	process short backward branch...
00CB6D  2               ;
00CB6D  2  EB                   XBA                     ;offset MSB should be negative
00CB6E  2  10 0C                BPL     _0440060        ;it isn't - out of range
00CB70  2               ;
00CB70  2  49 FF                EOR     #%11111111      ;complement offset MSB 2s
00CB72  2  D0 08                BNE     _0440060        ;out of range
00CB74  2               ;
00CB74  2  EB                   XBA                     ;offset LSB should be $80-$FF
00CB75  2  30 E7                BMI     _0440010        ;it is - branch in range
00CB77  2               ;
00CB77  2  80 03                BRA     _0440060        ;branch out of range
00CB79  2               ;
00CB79  2               ;
00CB79  2               ;	process long backward branch...
00CB79  2               ;
00CB79  2               _0440050:
00CB79  2  EB                   XBA                     ;offset MSB should be negative
00CB7A  2  30 E9                BMI     _0440030        ;it is - branch in range
00CB7C  2               ;
00CB7C  2               _0440060:
00CB7C  2  38                   SEC                     ;range error
00CB7D  2  60                   RTS
00CB7E  2               ;
00CB7E  2               ;================================================================================
00CB7E  2               ;
00CB7E  2               ;getcharr: GET PREVIOUS INPUT BUFFER CHARACTER
00CB7E  2               ;
00CB7E  2               getcharr:
00CB7E  2  C6 3D                DEC     ibufidx         ;move back a char
00CB80  2               ;
00CB80  2               ;================================================================================
00CB80  2               ;
00CB80  2               ;getchar: GET A CHARACTER FROM INPUT BUFFER
00CB80  2               ;
00CB80  2               ;	----------------------------------------------
00CB80  2               ;	Preparatory Ops : none
00CB80  2               ;
00CB80  2               ;	Register Returns: .A: character or <NUL>
00CB80  2               ;	                  .B: entry value
00CB80  2               ;	                  .X: entry value
00CB80  2               ;	                  .Y: entry value
00CB80  2               ;
00CB80  2               ;	MPU Flags: NVmxDIZC
00CB80  2               ;	           ||||||||
00CB80  2               ;	           |||||||+---> entry value
00CB80  2               ;	           ||||||+----> 1: <NUL> gotten
00CB80  2               ;	           |||||+-----> entry value
00CB80  2               ;	           ||||+------> entry value
00CB80  2               ;	           |||+-------> entry value
00CB80  2               ;	           ||+--------> entry value
00CB80  2               ;	           |+---------> not defined
00CB80  2               ;	           +----------> not defined
00CB80  2               ;	----------------------------------------------
00CB80  2               ;
00CB80  2               getchar:
00CB80  2  DA                   PHX
00CB81  2  5A                   PHY
00CB82  2  08                   PHP                     ;save register sizes
00CB83  2  E2 30                SHORTR                  ;force 8 bits
00CB85  2  A6 3D                LDX     ibufidx         ;buffer index
00CB87  2  BD 00 02             LDA     ibuffer,x       ;get char
00CB8A  2  E6 3D                INC     ibufidx         ;bump index
00CB8C  2  28                   PLP                     ;restore register widths
00CB8D  2  7A                   PLY
00CB8E  2  FA                   PLX
00CB8F  2  EB                   XBA                     ;condition...
00CB90  2  EB                   XBA                     ;.Z
00CB91  2  60                   RTS
00CB92  2               ;
00CB92  2               ;================================================================================
00CB92  2               ;
00CB92  2               ;getpat: GET PATTERN FOR MEMORY CHANGE or SEARCH
00CB92  2               ;
00CB92  2               ;	-----------------------------------------------------
00CB92  2               ;	Preparatory Ops: Null-terminated pattern in IBUFFER.
00CB92  2               ;
00CB92  2               ;	Returned Values: .A: used
00CB92  2               ;	                 .X: used
00CB92  2               ;	                 .Y: pattern length if entered
00CB92  2               ;	                 .C: 0 = pattern valid
00CB92  2               ;	                     1 = exception:
00CB92  2               ;	                 .N  0 = no pattern entered
00CB92  2               ;	                     1 = evaluation error
00CB92  2               ;
00CB92  2               ;	Notes: 1) If pattern is preceded by "'" the following
00CB92  2               ;	          characters are interpreted as ASCII.
00CB92  2               ;	       2) A maximum of 32 bytes or characters is
00CB92  2               ;	          accepted.  Excess input will be discarded.
00CB92  2               ;	-----------------------------------------------------
00CB92  2               ;
00CB92  2               getpat:
00CB92  2  64 49                STZ     status          ;clear pattern type indicator
00CB94  2  A0 00                LDY     #0              ;pattern index
00CB96  2  20 7E CB             JSR     getcharr        ;get last char
00CB99  2  F0 3C                BEQ     _0450070        ;EOS
00CB9B  2               ;
00CB9B  2  A6 3D                LDX     ibufidx         ;current buffer index
00CB9D  2  20 DE CB             JSR     getcharw        ;get next
00CBA0  2  F0 35                BEQ     _0450070        ;EOS
00CBA2  2               ;
00CBA2  2  C9 27                CMP     #$27            ; single quote
00CBA4  2  D0 04                BNE     _0450010        ;not ASCII input
00CBA6  2               ;
00CBA6  2  66 49                ROR     status          ;condition flag
00CBA8  2  80 12                BRA     _0450030        ;balance of input is ASCII
00CBAA  2               ;
00CBAA  2               _0450010:
00CBAA  2  86 3D                STX     ibufidx         ;restore buffer index
00CBAC  2               ;
00CBAC  2               _0450020:
00CBAC  2  20 8F CA             JSR     getparm         ;evaluate numeric pattern
00CBAF  2  B0 21                BCS     _0450060        ;done w/pattern
00CBB1  2               ;
00CBB1  2  20 7F CA             JSR     facasize        ;size
00CBB4  2  C9 02                CMP     #s_word
00CBB6  2  B0 1F                BCS     _0450070        ;not a byte - error
00CBB8  2               ;
00CBB8  2  A5 25                LDA     faca            ;get byte &...
00CBBA  2  80 05                BRA     _0450040        ;store
00CBBC  2               ;
00CBBC  2               _0450030:
00CBBC  2  20 80 CB             JSR     getchar         ;get ASCII char
00CBBF  2  F0 11                BEQ     _0450060        ;done w/pattern
00CBC1  2               ;
00CBC1  2               _0450040:
00CBC1  2  C0 20                CPY     #s_auxbuf       ;pattern buffer full?
00CBC3  2  F0 0A                BEQ     _0450050        ;yes
00CBC5  2               ;
00CBC5  2  99 46 02             STA     auxbuf,y        ;store pattern
00CBC8  2  C8                   INY
00CBC9  2  24 49                BIT     status
00CBCB  2  10 DF                BPL     _0450020        ;get next numeric value
00CBCD  2               ;
00CBCD  2  80 ED                BRA     _0450030        ;get next ASCII char
00CBCF  2               ;
00CBCF  2               _0450050:
00CBCF  2  20 D7 C7             JSR     alert           ;excess input
00CBD2  2               ;
00CBD2  2               _0450060:
00CBD2  2  84 3C                STY     auxbufix        ;save pattern size
00CBD4  2  98                   TYA                     ;condition .Z
00CBD5  2  18                   CLC                     ;pattern valid
00CBD6  2  60                   RTS
00CBD7  2               ;
00CBD7  2               ;
00CBD7  2               ;	no pattern entered...
00CBD7  2               ;
00CBD7  2               _0450070:
00CBD7  2  C2 80                REP     #%10000000
00CBD9  2  38                   SEC
00CBDA  2  60                   RTS
00CBDB  2               ;
00CBDB  2               ;
00CBDB  2               ;	evaluation error...
00CBDB  2               ;
00CBDB  2               _0450080:
00CBDB  2  E2 81                SEP     #%10000001
00CBDD  2  60                   RTS
00CBDE  2               ;
00CBDE  2               ;================================================================================
00CBDE  2               ;
00CBDE  2               ;getcharw: GET FROM INPUT BUFFER, DISCARDING WHITESPACE
00CBDE  2               ;
00CBDE  2               ;	--------------------------------------------------
00CBDE  2               ;	Preparatory Ops: Null-terminated input in IBUFFER.
00CBDE  2               ;
00CBDE  2               ;	Returned Values: .A: char or null
00CBDE  2               ;	                 .X: entry value
00CBDE  2               ;	                 .Y: entry value
00CBDE  2               ;	                 .Z: 1 = null terminator detected
00CBDE  2               ;
00CBDE  2               ;	Notes: Whitespace is defined as a blank ($20) or a
00CBDE  2               ;	       horizontal tab ($09).
00CBDE  2               ;	--------------------------------------------------
00CBDE  2               ;
00CBDE  2               getcharw:
00CBDE  2  20 80 CB             JSR     getchar         ;get from buffer
00CBE1  2  F0 08                BEQ     _0460010        ;EOI
00CBE3  2               ;
00CBE3  2  C9 20                CMP     #a_blank
00CBE5  2  F0 F7                BEQ     getcharw        ;discard whitespace
00CBE7  2               ;
00CBE7  2  C9 09                CMP     #a_ht           ;also whitespace
00CBE9  2  F0 F3                BEQ     getcharw
00CBEB  2               ;
00CBEB  2               _0460010:
00CBEB  2  18                   CLC
00CBEC  2  60                   RTS
00CBED  2               ;
00CBED  2               ;================================================================================
00CBED  2               ;
00CBED  2               ;input: INTERACTIVE INPUT FROM CONSOLE CHANNEL
00CBED  2               ;
00CBED  2               ;	-----------------------------------------------------------
00CBED  2               ;	Preparatory Ops: Zero IBUFIDX or load IBUFFER with default
00CBED  2               ;	                 input & set IBUFIDX to the number of chars
00CBED  2               ;	                 loaded into the buffer.
00CBED  2               ;
00CBED  2               ;	Returned Values: .A: used
00CBED  2               ;	                 .X: characters entered
00CBED  2               ;	                 .Y: used
00CBED  2               ;
00CBED  2               ;	Example: STZ IBUFIDX
00CBED  2               ;	         JSR INPUT
00CBED  2               ;
00CBED  2               ;	Notes: Input is collected in IBUFFER & is null-terminated.
00CBED  2               ;	       IBUFIDX is reset to zero upon exit.
00CBED  2               ;	-----------------------------------------------------------
00CBED  2               ;
00CBED  2               input:
00CBED  2  A6 3D                LDX     ibufidx
00CBEF  2  9E 00 02             STZ     ibuffer,x       ;be sure buffer is terminated
00CBF2  2  20 54 C7             JSR     dpyibuf         ;print default input if any
00CBF5  2               
00CBF5  2  A6 3D                LDX     ibufidx         ;starting buffer index
00CBF7  2               ;
00CBF7  2               ;
00CBF7  2               ;	main input loop...
00CBF7  2               ;
00CBF7  2               _0470010:
00CBF7  2  20 06 D3             JSR     CURSOR
00CBFA  2               _047001A:
00CBFA  2  20 74 FF             JSR     getcha          ;poll for input
00CBFD  2  90 02                BCC     _0470020        ;got something
00CBFF  2               ;
00CBFF  2               ;         wai                   ;wait 'til any IRQ &...
00CBFF  2  80 F9                BRA     _047001A        ;try again
00CC01  2               ;
00CC01  2               _0470020:
00CC01  2  C9 7F                CMP     #a_del          ;above ASCII range?
00CC03  2  B0 F5                BCS     _047001A        ;yes, ignore
00CC05  2               
00CC05  2  20 46 D3             JSR     UNCURSOR
00CC08  2               ;
00CC08  2  C9 09                CMP     #a_ht           ;horizontal tab?
00CC0A  2  D0 02                BNE     _0470030        ;no
00CC0C  2               ;
00CC0C  2  A9 20                LDA     #a_blank        ;replace <HT> w/blank
00CC0E  2               ;
00CC0E  2               _0470030:
00CC0E  2  C9 20                CMP     #a_blank        ;control char?
00CC10  2  90 10                BCC     _0470050        ;yes
00CC12  2               ;
00CC12  2               ;
00CC12  2               ;	process QWERTY character...
00CC12  2               ;
00CC12  2  E0 45                CPX     #s_ibuf         ;room in buffer?
00CC14  2  B0 05                BCS     _0470040        ;no
00CC16  2               ;
00CC16  2  9D 00 02             STA     ibuffer,x       ;store char
00CC19  2  E8                   INX                     ;bump index
00CC1A  2  2C                   .BYTE   bitabs          ;echo char
00CC1B  2               ;
00CC1B  2               _0470040:
00CC1B  2  A9 07                LDA     #a_bel          ;alert user
00CC1D  2  20 71 FF             JSR     putcha
00CC20  2  80 D5                BRA     _0470010        ;get some more
00CC22  2               ;
00CC22  2               ;
00CC22  2               ;	process carriage return...
00CC22  2               ;
00CC22  2               _0470050:
00CC22  2  C9 0D                CMP     #a_cr           ;carriage return?
00CC24  2  D0 06                BNE     _0470060        ;no
00CC26  2               ;
00CC26  2               ;         phx                   ;protect input count
00CC26  2               ;         pea dc_co
00CC26  2               ;         jsr sprint            ;cursor off
00CC26  2               ;         plx                   ;recover input count
00CC26  2  9E 00 02             STZ     ibuffer,x       ;terminate input &...
00CC29  2  64 3D                STZ     ibufidx         ;reset buffer index
00CC2B  2  60                   RTS                     ;done
00CC2C  2               ;
00CC2C  2               ;
00CC2C  2               ;	process backspace...
00CC2C  2               ;
00CC2C  2               _0470060:
00CC2C  2  C9 08                CMP     #a_bs           ;backspace?
00CC2E  2  D0 C7                BNE     _0470010        ;no
00CC30  2               ;
00CC30  2  8A                   TXA
00CC31  2  F0 C4                BEQ     _0470010        ;no input, ignore <BS>
00CC33  2               ;
00CC33  2  CA                   DEX                     ;1 less char
00CC34  2  DA                   PHX                     ;preserve count
00CC35  2  20 94 C7             JSR     gendbs          ;destructive backspace
00CC38  2  FA                   PLX                     ;restore count
00CC39  2  80 BC                BRA     _0470010        ;get more input
00CC3B  2               ;
00CC3B  2               ;================================================================================
00CC3B  2               ;
00CC3B  2               ;lodbnk: LOAD SOURCE & DESTINATION BANKS
00CC3B  2               ;
00CC3B  2               lodbnk:
00CC3B  2  E2 20                SHORTA
00CC3D  2  A5 3B                LDA     operand+s_word  ;destination bank
00CC3F  2  EB                   XBA                     ;make it MSB
00CC40  2  A5 21                LDA     addra+s_word    ;source bank is LSB
00CC42  2  60                   RTS
00CC43  2               ;
00CC43  2               ;================================================================================
00CC43  2               ;
00CC43  2               ;getcharc: GET A CHARACTER FROM INPUT BUFFER & CONVERT CASE
00CC43  2               ;
00CC43  2               ;	--------------------------------------------------
00CC43  2               ;	Preparatory Ops: Null-terminated input in IBUFFER.
00CC43  2               ;
00CC43  2               ;	Returned Values: .A: char or null
00CC43  2               ;	                 .X: entry value
00CC43  2               ;	                 .Y: entry value
00CC43  2               ;	                 .Z: 1 = null terminator detected
00CC43  2               ;	--------------------------------------------------
00CC43  2               ;
00CC43  2               getcharc:
00CC43  2  20 80 CB             JSR     getchar         ;get from buffer
00CC46  2               ;
00CC46  2               ;================================================================================
00CC46  2               ;
00CC46  2               ;toupper: FORCE CHARACTER TO UPPER CASE
00CC46  2               ;
00CC46  2               ;	------------------------------------------------
00CC46  2               ;	Preparatory Ops : .A: 8 bit character to convert
00CC46  2               ;
00CC46  2               ;	Register Returns: .A: converted character
00CC46  2               ;	                  .B: entry value
00CC46  2               ;	                  .X: entry value
00CC46  2               ;	                  .Y: entry value
00CC46  2               ;
00CC46  2               ;	MPU Flags: no change
00CC46  2               ;
00CC46  2               ;	Notes: 1) This subroutine has no effect on char-
00CC46  2               ;	          acters that are not alpha.
00CC46  2               ;	------------------------------------------------
00CC46  2               ;
00CC46  2               toupper:
00CC46  2  08                   PHP                     ;protect flags
00CC47  2  C9 61                CMP     #a_asclcl       ;check char range
00CC49  2  90 06                BCC     _0480010        ;not LC alpha
00CC4B  2               ;
00CC4B  2  C9 7B                CMP     #a_asclch+s_byte
00CC4D  2  B0 02                BCS     _0480010        ;not LC alpha
00CC4F  2               ;
00CC4F  2  29 5F                AND     #a_lctouc       ;force to UC
00CC51  2               ;
00CC51  2               _0480010:
00CC51  2  28                   PLP                     ;restore flags
00CC52  2               ;
00CC52  2               touppera:
00CC52  2  60                   RTS
00CC53  2               ;
00CC53  2               ;================================================================================
00CC53  2               ;
00CC53  2               ;teststop: TEST FOR STOP KEY
00CC53  2               ;
00CC53  2               ;	----------------------------------------------
00CC53  2               ;	Preparatory Ops: none
00CC53  2               ;
00CC53  2               ;	Returned Values: .A: detected keypress, if any
00CC53  2               ;	                 .X: entry value
00CC53  2               ;	                 .Y: entry value
00CC53  2               ;
00CC53  2               ;	MPU Flags: NVmxDIZC
00CC53  2               ;	           ||||||||
00CC53  2               ;	           |||||||+---> 0: normal key detected
00CC53  2               ;	           |||||||      1: <STOP> detected
00CC53  2               ;	           +++++++----> not defined
00CC53  2               ;
00CC53  2               ;	Example: jsr teststop
00CC53  2               ;	         bcs stopped
00CC53  2               ;
00CC53  2               ;	Notes: The symbol STOPKEY defines the ASCII
00CC53  2               ;	       value of the "stop key."
00CC53  2               ;	----------------------------------------------
00CC53  2               ;
00CC53  2               teststop:
00CC53  2  20 74 FF             JSR     getcha          ;poll console
00CC56  2  B0 04                BCS     _0490010        ;no input
00CC58  2               ;
00CC58  2  C9 03                CMP     #stopkey        ;stop key pressed?
00CC5A  2  F0 01                BEQ     _0490020        ;yes
00CC5C  2               ;
00CC5C  2               _0490010:
00CC5C  2  18                   CLC
00CC5D  2               ;
00CC5D  2               _0490020:
00CC5D  2  60                   RTS
00CC5E  2               
00CC5E  2               
00CC5E  2               ;__LOAD_________________________________________________________
00CC5E  2               ; LOAD A MOTOROLA FORMATTED HEX FILE (S28)
00CC5E  2               ;
00CC5E  2               ;_______________________________________________________________
00CC5E  2               LOADS19:
00CC5E  2  08                   PHP
00CC5F  2  E2 30                SHORTR
00CC61  2  F4 C3 D0             PEA     mm_S19_prmpt
00CC64  2  20 E0 C7             JSR     sprint          ;display input prompt
00CC67  2               
00CC67  2               
00CC67  2               LOADS19_1:
00CC67  2  20 E5 CC             JSR     getc            ;
00CC6A  2  C9 53                CMP     #'S'            ;
00CC6C  2  D0 F9                BNE     LOADS19_1       ; FIRST CHAR NOT (S)
00CC6E  2  20 E5 CC             JSR     getc            ; READ CHAR
00CC71  2  C9 38                CMP     #'8'            ;
00CC73  2  F0 44                BEQ     LOAD21          ;
00CC75  2  C9 32                CMP     #'2'            ;
00CC77  2  D0 EE                BNE     LOADS19_1       ; SECOND CHAR NOT (2)
00CC79  2  A9 00                LDA     #$00            ;
00CC7B  2  85 25                STA     faca            ; ZERO CHECKSUM
00CC7D  2               
00CC7D  2  20 BD CC             JSR     GETBYTE         ; READ BYTE
00CC80  2  E9 02                SBC     #$02            ;
00CC82  2  85 2D                STA     facb            ; BYTE COUNT
00CC84  2               ; BUILD ADDRESS
00CC84  2  20 BD CC             JSR     GETBYTE         ; READ 2 FRAMES
00CC87  2  85 21                STA     addra+2         ;
00CC89  2  20 BD CC             JSR     GETBYTE         ; READ 2 FRAMES
00CC8C  2  85 20                STA     addra+1         ;
00CC8E  2  20 BD CC             JSR     GETBYTE         ;
00CC91  2  85 1F                STA     addra           ;
00CC93  2               
00CC93  2  A0 00                LDY     #$00            ;
00CC95  2               LOAD11:
00CC95  2  20 BD CC             JSR     GETBYTE         ;
00CC98  2  C6 2D                DEC     facb            ;
00CC9A  2  F0 14                BEQ     LOAD15          ; ZERO BYTE COUNT
00CC9C  2  97 1F                STA     [addra],Y       ; STORE DATA
00CC9E  2  C2 20                SLONGA
00CCA0  2  E6 1F                INC     addra           ;
00CCA2  2  C9 00 00             CMPW    $0000
00CCA5  2  D0 04                BNE     LOAD11A
00CCA7  2  E2 20                SHORTA
00CCA9  2  E6 21                INC     addra+2         ;
00CCAB  2               LOAD11A:
00CCAB  2  E2 20                SHORTA
00CCAD  2  4C 95 CC             JMP     LOAD11          ;
00CCB0  2               
00CCB0  2               LOAD15:
00CCB0  2  E6 25                INC     faca            ;
00CCB2  2  F0 B3                BEQ     LOADS19_1       ;
00CCB4  2               LOAD19:
00CCB4  2  A9 3F                LDA     #'?'            ;
00CCB6  2  20 71 FF             JSR     putcha          ;
00CCB9  2               LOAD21:
00CCB9  2  28                   PLP
00CCBA  2  4C 3F C1             JMP     monce           ;back to executive
00CCBD  2               GETBYTE:
00CCBD  2  20 D5 CC             JSR     INHEX           ; GET HEX CHAR
00CCC0  2  0A                   ASL     A               ;
00CCC1  2  0A                   ASL     A               ;
00CCC2  2  0A                   ASL     A               ;
00CCC3  2  0A                   ASL     A               ;
00CCC4  2  85 3F                STA     numeral         ;
00CCC6  2  20 D5 CC             JSR     INHEX           ;
00CCC9  2  29 0F                AND     #$0F            ; MASK TO 4 BITS
00CCCB  2  05 3F                ORA     numeral         ;
00CCCD  2  48                   PHA                     ;
00CCCE  2  18                   CLC                     ;
00CCCF  2  65 25                ADC     faca            ;
00CCD1  2  85 25                STA     faca            ;
00CCD3  2  68                   PLA                     ;
00CCD4  2  60                   RTS                     ;
00CCD5  2               ; INPUT HEX CHAR
00CCD5  2               INHEX:
00CCD5  2  20 E5 CC             JSR     getc            ;
00CCD8  2  C9 3A                CMP     #$3A            ; LESS THAN 9?
00CCDA  2  B0 02                BCS     INHEX_BIG       ; NO, SKIP NEXT
00CCDC  2  E9 2F                SBC     #$2F            ; CONVERT 0-9
00CCDE  2               INHEX_BIG:
00CCDE  2  C9 41                CMP     #$41            ; A OR MORE?
00CCE0  2  90 02                BCC     INHEX_SMALL     ; NO, SKIP NEXT
00CCE2  2  E9 37                SBC     #$37            ; CONVERT A-F
00CCE4  2               INHEX_SMALL:
00CCE4  2  60                   RTS                     ;
00CCE5  2               getc:
00CCE5  2  20 74 FF             JSR     getcha          ;poll for input
00CCE8  2  90 02                BCC     getcd           ;got something
00CCEA  2  80 F9                BRA     getc            ;try again
00CCEC  2               getcd:
00CCEC  2  48                   PHA                     ;
00CCED  2  20 71 FF             JSR     putcha          ;
00CCF0  2  68                   PLA                     ;
00CCF1  2  60                   RTS
00CCF2  2               
00CCF2  2               
00CCF2  2               
00CCF2  2               ;
00CCF2  2               ;cpcode: COPY MEMORY CODE
00CCF2  2               ;
00CCF2  2               ;	-------------------------------------------
00CCF2  2               ;	This code is transfered to workspace when a
00CCF2  2               ;	copy or fill operation is to be performed.
00CCF2  2               ;	-------------------------------------------
00CCF2  2               ;
00CCF2  2               cpcode:
00CCF2  2  8B                   PHB                     ;must preserve data bank
00CCF3  2               ;.rept s_mvinst
00CCF3  2  EA                   NOP                     ;placeholder
00CCF4  2  EA                   NOP                     ;placeholder
00CCF5  2  EA                   NOP                     ;placeholder
00CCF6  2               ;.endr
00CCF6  2  AB                   PLB                     ;restore data bank
00CCF7  2  5C 3F C1 00          JML     monce           ;return to command executive
00CCFB  2               cpcodeee:                       ;placeholder - do not delete
00CCFB  2               copylen         = cpcodeee-cpcode-1
00CCFB  2               ;
00CCFB  2               ;================================================================================
00CCFB  2               ;
00CCFB  2               ;COMMAND PROCESSING DATA TABLES
00CCFB  2               ;
00CCFB  2               ;
00CCFB  2               ;	monitor commands...
00CCFB  2               ;
00CCFB  2               mpctab:
00CCFB  2  41                   .BYTE   "A"             ;assemble code
00CCFC  2  43                   .BYTE   "C"             ;compare memory ranges
00CCFD  2  44                   .BYTE   "D"             ;disassemble code
00CCFE  2  46                   .BYTE   "F"             ;fill memory
00CCFF  2  47                   .BYTE   "G"             ;execute code
00CD00  2  48                   .BYTE   "H"             ;search memory
00CD01  2  4A                   .BYTE   "J"             ;execute code as subroutine
00CD02  2  4C                   .BYTE   "L"             ;load S19 file
00CD03  2  4D                   .BYTE   "M"             ;dump memory range
00CD04  2  52                   .BYTE   "R"             ;dump registers
00CD05  2  54                   .BYTE   "T"             ;copy memory range
00CD06  2               ;         .BYTE "X"             ;exit from monitor
00CD06  2  3E                   .BYTE   ">"             ;change memory
00CD07  2  3B                   .BYTE   ";"             ;change registers
00CD08  2               n_mpctab        = *-mpctab      ;entries in above table
00CD08  2               ;
00CD08  2               ;
00CD08  2               ;	monitor command jump table...
00CD08  2               ;
00CD08  2               mpcextab:
00CD08  2  84 C1                .WORD   monasc-s_byte   ; A  assemble code
00CD0A  2  46 C4                .WORD   moncmp-s_byte   ; C  compare memory ranges
00CD0C  2  60 C3                .WORD   mondsc-s_byte   ; D  disassemble code
00CD0E  2  17 C5                .WORD   monfil-s_byte   ; F  fill memory
00CD10  2  B4 C3                .WORD   monjmp-s_byte   ; G  execute code
00CD12  2  7D C5                .WORD   monhnt-s_byte   ; H  search memory
00CD14  2  E5 C3                .WORD   monjsr-s_byte   ; J  execute code as subroutine
00CD16  2  5D CC                .WORD   LOADS19-s_byte  ; L  Load S19 File
00CD18  2  C5 C4                .WORD   mondmp-s_byte   ; M  dump memory range
00CD1A  2  E0 C0                .WORD   monreg-s_byte   ; R  dump registers
00CD1C  2  74 C4                .WORD   moncpy-s_byte   ; T  copy memory range
00CD1E  2               ;         .WORD monxit-s_byte   ; X  exit from monitor
00CD1E  2  1B C4                .WORD   monchm-s_byte   ; >  change memory
00CD20  2  F3 C5                .WORD   monchr-s_byte   ; ;  change registers
00CD22  2               ;
00CD22  2               ;
00CD22  2               ;	number conversion...
00CD22  2               ;
00CD22  2               basetab:
00CD22  2  10 0A 08 02          .BYTE   16,10,8,2       ;supported number bases
00CD26  2               bitsdtab:
00CD26  2  04 03 03 01          .BYTE   4,3,3,1         ;bits per binary digit
00CD2A  2               bitsntab:
00CD2A  2  04 04 03 01          .BYTE   4,4,3,1         ;bits per ASCII character
00CD2E  2               lzsttab:
00CD2E  2  03 02 09 02          .BYTE   3,2,9,2         ;leading zero suppression thresholds
00CD32  2               numstab:
00CD32  2  0C 0C 10 30          .BYTE   12,12,16,48     ;bin to ASCII conversion numerals
00CD36  2               radxtab:
00CD36  2  24                   .BYTE   c_hex           ;hexadecimal radix
00CD37  2  2B                   .BYTE   c_dec           ;decimal radix
00CD38  2  40                   .BYTE   c_oct           ;octal radix
00CD39  2  25                   .BYTE   c_bin           ;binary radix
00CD3A  2               n_radix         = *-radxtab     ;number of recognized radices
00CD3A  2               ;
00CD3A  2               ;
00CD3A  2               ;	shadow MPU register sizes...
00CD3A  2               ;
00CD3A  2               rcvltab:
00CD3A  2  02                   .BYTE   s_mpupbx+s_byte ; PB
00CD3B  2  03                   .BYTE   s_mpupcx+s_byte ; PC
00CD3C  2  02                   .BYTE   s_mpusrx+s_byte ; SR
00CD3D  2  03                   .BYTE   s_word+s_byte   ; .C
00CD3E  2  03                   .BYTE   s_word+s_byte   ; .X
00CD3F  2  03                   .BYTE   s_word+s_byte   ; .Y
00CD40  2  03                   .BYTE   s_mpuspx+s_byte ; SP
00CD41  2  03                   .BYTE   s_mpudpx+s_byte ; DP
00CD42  2  02                   .BYTE   s_mpudbx+s_byte ; DB
00CD43  2               n_regchv        = *-rcvltab     ;total shadow registers
00CD43  2               ;
00CD43  2               ;================================================================================
00CD43  2               ;
00CD43  2               ;ASSEMBLER/DISASSEMBLER DATA TABLES
00CD43  2               ;
00CD43  2               ;
00CD43  2               ;	numerically sorted & encoded W65C816S mnemonics...
00CD43  2               ;
00CD43  2               mnetab:
00CD43  2  F2 10                .WORD   mne_xba         ;  0 - XBA
00CD45  2  5A 11                .WORD   mne_lda         ;  1 - LDA
00CD47  2  A2 11                .WORD   mne_pea         ;  2 - PEA
00CD49  2  62 12                .WORD   mne_pha         ;  3 - PHA
00CD4B  2  62 13                .WORD   mne_pla         ;  4 - PLA
00CD4D  2  C6 14                .WORD   mne_bra         ;  5 - BRA
00CD4F  2  E0 14                .WORD   mne_ora         ;  6 - ORA
00CD51  2  68 15                .WORD   mne_sta         ;  7 - STA
00CD53  2  6A 16                .WORD   mne_txa         ;  8 - TXA
00CD55  2  AA 16                .WORD   mne_tya         ;  9 - TYA
00CD57  2  62 1A                .WORD   mne_phb         ; 10 - PHB
00CD59  2  62 1B                .WORD   mne_plb         ; 11 - PLB
00CD5B  2  EA 1C                .WORD   mne_trb         ; 12 - TRB
00CD5D  2  2A 1D                .WORD   mne_tsb         ; 13 - TSB
00CD5F  2  E8 20                .WORD   mne_sbc         ; 14 - SBC
00CD61  2  06 21                .WORD   mne_bcc         ; 15 - BCC
00CD63  2  44 21                .WORD   mne_adc         ; 16 - ADC
00CD65  2  6A 21                .WORD   mne_tdc         ; 17 - TDC
00CD67  2  8A 21                .WORD   mne_dec         ; 18 - DEC
00CD69  2  A8 21                .WORD   mne_sec         ; 19 - SEC
00CD6B  2  48 23                .WORD   mne_clc         ; 20 - CLC
00CD6D  2  D4 23                .WORD   mne_inc         ; 21 - INC
00CD6F  2  2A 25                .WORD   mne_tsc         ; 22 - TSC
00CD71  2  C6 25                .WORD   mne_bvc         ; 23 - BVC
00CD73  2  2A 29                .WORD   mne_tcd         ; 24 - TCD
00CD75  2  A8 29                .WORD   mne_sed         ; 25 - SED
00CD77  2  62 2A                .WORD   mne_phd         ; 26 - PHD
00CD79  2  48 2B                .WORD   mne_cld         ; 27 - CLD
00CD7B  2  62 2B                .WORD   mne_pld         ; 28 - PLD
00CD7D  2  C4 2B                .WORD   mne_and         ; 29 - AND
00CD7F  2  32 31                .WORD   mne_xce         ; 30 - XCE
00CD81  2  C6 33                .WORD   mne_bne         ; 31 - BNE
00CD83  2  B0 50                .WORD   mne_wai         ; 32 - WAI
00CD85  2  A2 51                .WORD   mne_pei         ; 33 - PEI
00CD87  2  A8 51                .WORD   mne_sei         ; 34 - SEI
00CD89  2  48 53                .WORD   mne_cli         ; 35 - CLI
00CD8B  2  86 53                .WORD   mne_bmi         ; 36 - BMI
00CD8D  2  66 55                .WORD   mne_rti         ; 37 - RTI
00CD8F  2  62 62                .WORD   mne_phk         ; 38 - PHK
00CD91  2  C6 64                .WORD   mne_brk         ; 39 - BRK
00CD93  2  96 6B                .WORD   mne_jml         ; 40 - JML
00CD95  2  26 6C                .WORD   mne_rol         ; 41 - ROL
00CD97  2  46 6C                .WORD   mne_bpl         ; 42 - BPL
00CD99  2  C6 6C                .WORD   mne_brl         ; 43 - BRL
00CD9B  2  04 6D                .WORD   mne_asl         ; 44 - ASL
00CD9D  2  16 6D                .WORD   mne_jsl         ; 45 - JSL
00CD9F  2  66 6D                .WORD   mne_rtl         ; 46 - RTL
00CDA1  2  70 71                .WORD   mne_wdm         ; 47 - WDM
00CDA3  2  DC 7D                .WORD   mne_mvn         ; 48 - MVN
00CDA5  2  A6 89                .WORD   mne_rep         ; 49 - REP
00CDA7  2  A8 89                .WORD   mne_sep         ; 50 - SEP
00CDA9  2  62 8A                .WORD   mne_php         ; 51 - PHP
00CDAB  2  62 8B                .WORD   mne_plp         ; 52 - PLP
00CDAD  2  88 8B                .WORD   mne_cmp         ; 53 - CMP
00CDAF  2  96 8B                .WORD   mne_jmp         ; 54 - JMP
00CDB1  2  08 8C                .WORD   mne_cop         ; 55 - COP
00CDB3  2  1E 8C                .WORD   mne_nop         ; 56 - NOP
00CDB5  2  68 8D                .WORD   mne_stp         ; 57 - STP
00CDB7  2  DC 8D                .WORD   mne_mvp         ; 58 - MVP
00CDB9  2  86 91                .WORD   mne_beq         ; 59 - BEQ
00CDBB  2  A2 99                .WORD   mne_per         ; 60 - PER
00CDBD  2  0C 9C                .WORD   mne_eor         ; 61 - EOR
00CDBF  2  26 9C                .WORD   mne_ror         ; 62 - ROR
00CDC1  2  16 9D                .WORD   mne_jsr         ; 63 - JSR
00CDC3  2  1A 9D                .WORD   mne_lsr         ; 64 - LSR
00CDC5  2  06 A1                .WORD   mne_bcs         ; 65 - BCS
00CDC7  2  2A A1                .WORD   mne_tcs         ; 66 - TCS
00CDC9  2  66 A5                .WORD   mne_rts         ; 67 - RTS
00CDCB  2  C6 A5                .WORD   mne_bvs         ; 68 - BVS
00CDCD  2  6A A6                .WORD   mne_txs         ; 69 - TXS
00CDCF  2  86 AA                .WORD   mne_bit         ; 70 - BIT
00CDD1  2  48 BB                .WORD   mne_clv         ; 71 - CLV
00CDD3  2  AA C8                .WORD   mne_tax         ; 72 - TAX
00CDD5  2  5A C9                .WORD   mne_ldx         ; 73 - LDX
00CDD7  2  8A C9                .WORD   mne_dex         ; 74 - DEX
00CDD9  2  62 CA                .WORD   mne_phx         ; 75 - PHX
00CDDB  2  62 CB                .WORD   mne_plx         ; 76 - PLX
00CDDD  2  D4 CB                .WORD   mne_inx         ; 77 - INX
00CDDF  2  48 CC                .WORD   mne_cpx         ; 78 - CPX
00CDE1  2  2A CD                .WORD   mne_tsx         ; 79 - TSX
00CDE3  2  68 CD                .WORD   mne_stx         ; 80 - STX
00CDE5  2  AA CE                .WORD   mne_tyx         ; 81 - TYX
00CDE7  2  AA D0                .WORD   mne_tay         ; 82 - TAY
00CDE9  2  5A D1                .WORD   mne_ldy         ; 83 - LDY
00CDEB  2  8A D1                .WORD   mne_dey         ; 84 - DEY
00CDED  2  62 D2                .WORD   mne_phy         ; 85 - PHY
00CDEF  2  62 D3                .WORD   mne_ply         ; 86 - PLY
00CDF1  2  D4 D3                .WORD   mne_iny         ; 87 - INY
00CDF3  2  48 D4                .WORD   mne_cpy         ; 88 - CPY
00CDF5  2  68 D5                .WORD   mne_sty         ; 89 - STY
00CDF7  2  6A D6                .WORD   mne_txy         ; 90 - TXY
00CDF9  2  68 DD                .WORD   mne_stz         ; 91 - STZ
00CDFB  2               ;
00CDFB  2               s_mnetab        = *-mnetab      ;mnemonic table size
00CDFB  2               n_mnemon        = s_mnetab/s_word;total mnemonics
00CDFB  2               ;
00CDFB  2               ;
00CDFB  2               ;	mnemonic lookup indices in opcode order...
00CDFB  2               ;
00CDFB  2               mnetabix:
00CDFB  2  27                   .BYTE   mne_brkx        ; $00  BRK
00CDFC  2  06                   .BYTE   mne_orax        ; $01  ORA (dp,X)
00CDFD  2  37                   .BYTE   mne_copx        ; $02  COP
00CDFE  2  06                   .BYTE   mne_orax        ; $03  ORA <offset>,S
00CDFF  2  0D                   .BYTE   mne_tsbx        ; $04  TSB dp
00CE00  2  06                   .BYTE   mne_orax        ; $05  ORA dp
00CE01  2  2C                   .BYTE   mne_aslx        ; $06  ASL dp
00CE02  2  06                   .BYTE   mne_orax        ; $07  ORA [dp]
00CE03  2  33                   .BYTE   mne_phpx        ; $08  PHP
00CE04  2  06                   .BYTE   mne_orax        ; $09  ORA #
00CE05  2  2C                   .BYTE   mne_aslx        ; $0A  ASL A
00CE06  2  1A                   .BYTE   mne_phdx        ; $0B  PHD
00CE07  2  0D                   .BYTE   mne_tsbx        ; $0C  TSB abs
00CE08  2  06                   .BYTE   mne_orax        ; $0D  ORA abs
00CE09  2  2C                   .BYTE   mne_aslx        ; $0E  ASL abs
00CE0A  2  06                   .BYTE   mne_orax        ; $0F  ORA absl
00CE0B  2               ;
00CE0B  2  2A                   .BYTE   mne_bplx        ; $10  BPL abs
00CE0C  2  06                   .BYTE   mne_orax        ; $11  ORA (<dp>),Y
00CE0D  2  06                   .BYTE   mne_orax        ; $12  ORA (dp)
00CE0E  2  06                   .BYTE   mne_orax        ; $13  ORA (<offset>,S),Y
00CE0F  2  0C                   .BYTE   mne_trbx        ; $14  TRB dp
00CE10  2  06                   .BYTE   mne_orax        ; $15  ORA dp,X
00CE11  2  2C                   .BYTE   mne_aslx        ; $16  ASL dp,X
00CE12  2  06                   .BYTE   mne_orax        ; $17  ORA [dp],Y
00CE13  2  14                   .BYTE   mne_clcx        ; $18  CLC
00CE14  2  06                   .BYTE   mne_orax        ; $19  ORA abs
00CE15  2  15                   .BYTE   mne_incx        ; $1A  INC A
00CE16  2  42                   .BYTE   mne_tcsx        ; $1B  TCS
00CE17  2  0C                   .BYTE   mne_trbx        ; $1C  TRB abs
00CE18  2  06                   .BYTE   mne_orax        ; $1D  ORA abs,X
00CE19  2  2C                   .BYTE   mne_aslx        ; $1E  ASL abs,X
00CE1A  2  06                   .BYTE   mne_orax        ; $1F  ORA absl,X
00CE1B  2               ;
00CE1B  2  3F                   .BYTE   mne_jsrx        ; $20  JSR abs
00CE1C  2  1D                   .BYTE   mne_andx        ; $21  AND (dp,X)
00CE1D  2  2D                   .BYTE   mne_jslx        ; $22  JSL absl
00CE1E  2  1D                   .BYTE   mne_andx        ; $23  AND <offset>,S
00CE1F  2  46                   .BYTE   mne_bitx        ; $24  BIT dp
00CE20  2  1D                   .BYTE   mne_andx        ; $25  AND dp
00CE21  2  29                   .BYTE   mne_rolx        ; $26  ROL dp
00CE22  2  1D                   .BYTE   mne_andx        ; $27  AND [dp]
00CE23  2  34                   .BYTE   mne_plpx        ; $28  PLP
00CE24  2  1D                   .BYTE   mne_andx        ; $29  AND #
00CE25  2  29                   .BYTE   mne_rolx        ; $2A  ROL A
00CE26  2  1C                   .BYTE   mne_pldx        ; $2B  PLD
00CE27  2  46                   .BYTE   mne_bitx        ; $2C  BIT abs
00CE28  2  1D                   .BYTE   mne_andx        ; $2D  AND abs
00CE29  2  29                   .BYTE   mne_rolx        ; $2E  ROL abs
00CE2A  2  1D                   .BYTE   mne_andx        ; $2F  AND absl
00CE2B  2               ;
00CE2B  2  24                   .BYTE   mne_bmix        ; $30  BMI abs
00CE2C  2  1D                   .BYTE   mne_andx        ; $31  AND (<dp>),Y
00CE2D  2  1D                   .BYTE   mne_andx        ; $32  AND (dp)
00CE2E  2  1D                   .BYTE   mne_andx        ; $33  AND (<offset>,S),Y
00CE2F  2  46                   .BYTE   mne_bitx        ; $34  BIT dp,X
00CE30  2  1D                   .BYTE   mne_andx        ; $35  AND dp,X
00CE31  2  29                   .BYTE   mne_rolx        ; $36  ROL dp,X
00CE32  2  1D                   .BYTE   mne_andx        ; $37  AND [dp],Y
00CE33  2  13                   .BYTE   mne_secx        ; $38  SEC
00CE34  2  1D                   .BYTE   mne_andx        ; $39  AND abs,Y
00CE35  2  12                   .BYTE   mne_decx        ; $3A  DEC A
00CE36  2  16                   .BYTE   mne_tscx        ; $3B  TSC
00CE37  2  46                   .BYTE   mne_bitx        ; $3C  BIT abs,X
00CE38  2  1D                   .BYTE   mne_andx        ; $3D  AND abs,X
00CE39  2  29                   .BYTE   mne_rolx        ; $3E  ROL abs,X
00CE3A  2  1D                   .BYTE   mne_andx        ; $3F  AND absl,X
00CE3B  2               ;
00CE3B  2  25                   .BYTE   mne_rtix        ; $40  RTI
00CE3C  2  3D                   .BYTE   mne_eorx        ; $41  EOR (dp,X)
00CE3D  2  2F                   .BYTE   mne_wdmx        ; $42  WDM
00CE3E  2  3D                   .BYTE   mne_eorx        ; $43  EOR <offset>,S
00CE3F  2  3A                   .BYTE   mne_mvpx        ; $44  MVP sb,db
00CE40  2  3D                   .BYTE   mne_eorx        ; $45  EOR dp
00CE41  2  40                   .BYTE   mne_lsrx        ; $46  LSR dp
00CE42  2  3D                   .BYTE   mne_eorx        ; $47  EOR [dp]
00CE43  2  03                   .BYTE   mne_phax        ; $48  PHA
00CE44  2  3D                   .BYTE   mne_eorx        ; $49  EOR #
00CE45  2  40                   .BYTE   mne_lsrx        ; $4A  LSR A
00CE46  2  26                   .BYTE   mne_phkx        ; $4B  PHK
00CE47  2  36                   .BYTE   mne_jmpx        ; $4C  JMP abs
00CE48  2  3D                   .BYTE   mne_eorx        ; $4D  EOR abs
00CE49  2  40                   .BYTE   mne_lsrx        ; $4E  LSR abs
00CE4A  2  3D                   .BYTE   mne_eorx        ; $4F  EOR absl
00CE4B  2               ;
00CE4B  2  17                   .BYTE   mne_bvcx        ; $50  BVC abs
00CE4C  2  3D                   .BYTE   mne_eorx        ; $51  EOR (<dp>),Y
00CE4D  2  3D                   .BYTE   mne_eorx        ; $52  EOR (dp)
00CE4E  2  3D                   .BYTE   mne_eorx        ; $53  EOR (<offset>,S),Y
00CE4F  2  30                   .BYTE   mne_mvnx        ; $54  MVN sb,db
00CE50  2  3D                   .BYTE   mne_eorx        ; $55  EOR dp,X
00CE51  2  40                   .BYTE   mne_lsrx        ; $56  LSR dp,X
00CE52  2  3D                   .BYTE   mne_eorx        ; $57  EOR [dp],Y
00CE53  2  23                   .BYTE   mne_clix        ; $58  CLI
00CE54  2  3D                   .BYTE   mne_eorx        ; $59  EOR abs,Y
00CE55  2  55                   .BYTE   mne_phyx        ; $5A  PHY
00CE56  2  18                   .BYTE   mne_tcdx        ; $5B  TCD
00CE57  2  28                   .BYTE   mne_jmlx        ; $5C  JML absl
00CE58  2  3D                   .BYTE   mne_eorx        ; $5D  EOR abs,X
00CE59  2  40                   .BYTE   mne_lsrx        ; $5E  LSR abs,X
00CE5A  2  3D                   .BYTE   mne_eorx        ; $5F  EOR absl,X
00CE5B  2               ;
00CE5B  2  43                   .BYTE   mne_rtsx        ; $60  RTS
00CE5C  2  10                   .BYTE   mne_adcx        ; $61  ADC (dp,X)
00CE5D  2  3C                   .BYTE   mne_perx        ; $62  PER
00CE5E  2  10                   .BYTE   mne_adcx        ; $63  ADC <offset>,S
00CE5F  2  5B                   .BYTE   mne_stzx        ; $64  STZ dp
00CE60  2  10                   .BYTE   mne_adcx        ; $65  ADC dp
00CE61  2  3E                   .BYTE   mne_rorx        ; $66  ROR dp
00CE62  2  10                   .BYTE   mne_adcx        ; $67  ADC [dp]
00CE63  2  04                   .BYTE   mne_plax        ; $68  PLA
00CE64  2  10                   .BYTE   mne_adcx        ; $69  ADC #
00CE65  2  3E                   .BYTE   mne_rorx        ; $6A  ROR A
00CE66  2  2E                   .BYTE   mne_rtlx        ; $6B  RTL
00CE67  2  36                   .BYTE   mne_jmpx        ; $6C  JMP (abs)
00CE68  2  10                   .BYTE   mne_adcx        ; $6D  ADC abs
00CE69  2  3E                   .BYTE   mne_rorx        ; $6E  ROR abs
00CE6A  2  10                   .BYTE   mne_adcx        ; $6F  ADC absl
00CE6B  2               ;
00CE6B  2  44                   .BYTE   mne_bvsx        ; $70  BVS abs
00CE6C  2  10                   .BYTE   mne_adcx        ; $71  ADC (<dp>),Y
00CE6D  2  10                   .BYTE   mne_adcx        ; $72  ADC (dp)
00CE6E  2  10                   .BYTE   mne_adcx        ; $73  ADC (<offset>,S),Y
00CE6F  2  5B                   .BYTE   mne_stzx        ; $74  STZ dp,X
00CE70  2  10                   .BYTE   mne_adcx        ; $75  ADC dp,X
00CE71  2  3E                   .BYTE   mne_rorx        ; $76  ROR dp,X
00CE72  2  10                   .BYTE   mne_adcx        ; $77  ADC [dp],Y
00CE73  2  22                   .BYTE   mne_seix        ; $78  SEI
00CE74  2  10                   .BYTE   mne_adcx        ; $79  ADC abs,Y
00CE75  2  56                   .BYTE   mne_plyx        ; $7A  PLY
00CE76  2  11                   .BYTE   mne_tdcx        ; $7B  TDC
00CE77  2  36                   .BYTE   mne_jmpx        ; $7C  JMP (abs,X)
00CE78  2  10                   .BYTE   mne_adcx        ; $7D  ADC abs,X
00CE79  2  3E                   .BYTE   mne_rorx        ; $7E  ROR abs,X
00CE7A  2  10                   .BYTE   mne_adcx        ; $7F  ADC absl,X
00CE7B  2               ;
00CE7B  2  05                   .BYTE   mne_brax        ; $80  BRA abs
00CE7C  2  07                   .BYTE   mne_stax        ; $81  STA (dp,X)
00CE7D  2  2B                   .BYTE   mne_brlx        ; $82  BRL abs
00CE7E  2  07                   .BYTE   mne_stax        ; $83  STA <offset>,S
00CE7F  2  59                   .BYTE   mne_styx        ; $84  STY dp
00CE80  2  07                   .BYTE   mne_stax        ; $85  STA dp
00CE81  2  50                   .BYTE   mne_stxx        ; $86  STX dp
00CE82  2  07                   .BYTE   mne_stax        ; $87  STA [dp]
00CE83  2  54                   .BYTE   mne_deyx        ; $88  DEY
00CE84  2  46                   .BYTE   mne_bitx        ; $89  BIT #
00CE85  2  08                   .BYTE   mne_txax        ; $8A  TXA
00CE86  2  0A                   .BYTE   mne_phbx        ; $8B  PHB
00CE87  2  59                   .BYTE   mne_styx        ; $8C  STY abs
00CE88  2  07                   .BYTE   mne_stax        ; $8D  STA abs
00CE89  2  50                   .BYTE   mne_stxx        ; $8E  STX abs
00CE8A  2  07                   .BYTE   mne_stax        ; $8F  STA absl
00CE8B  2               ;
00CE8B  2  0F                   .BYTE   mne_bccx        ; $90  BCC abs
00CE8C  2  07                   .BYTE   mne_stax        ; $91  STA (<dp>),Y
00CE8D  2  07                   .BYTE   mne_stax        ; $92  STA (dp)
00CE8E  2  07                   .BYTE   mne_stax        ; $93  STA (<offset>,S),Y
00CE8F  2  59                   .BYTE   mne_styx        ; $94  STY dp,X
00CE90  2  07                   .BYTE   mne_stax        ; $95  STA dp,X
00CE91  2  50                   .BYTE   mne_stxx        ; $96  STX dp,Y
00CE92  2  07                   .BYTE   mne_stax        ; $97  STA [dp],Y
00CE93  2  09                   .BYTE   mne_tyax        ; $98  TYA
00CE94  2  07                   .BYTE   mne_stax        ; $99  STA abs,Y
00CE95  2  45                   .BYTE   mne_txsx        ; $9A  TXS
00CE96  2  5A                   .BYTE   mne_txyx        ; $9B  TXY
00CE97  2  5B                   .BYTE   mne_stzx        ; $9C  STZ abs
00CE98  2  07                   .BYTE   mne_stax        ; $9D  STA abs,X
00CE99  2  5B                   .BYTE   mne_stzx        ; $9E  STZ abs,X
00CE9A  2  07                   .BYTE   mne_stax        ; $9F  STA absl,X
00CE9B  2               ;
00CE9B  2  53                   .BYTE   mne_ldyx        ; $A0  LDY #
00CE9C  2  01                   .BYTE   mne_ldax        ; $A1  LDA (dp,X)
00CE9D  2  49                   .BYTE   mne_ldxx        ; $A2  LDX #
00CE9E  2  01                   .BYTE   mne_ldax        ; $A3  LDA <offset>,S
00CE9F  2  53                   .BYTE   mne_ldyx        ; $A4  LDY dp
00CEA0  2  01                   .BYTE   mne_ldax        ; $A5  LDA dp
00CEA1  2  49                   .BYTE   mne_ldxx        ; $A6  LDX dp
00CEA2  2  01                   .BYTE   mne_ldax        ; $A7  LDA [dp]
00CEA3  2  52                   .BYTE   mne_tayx        ; $A8  TAY
00CEA4  2  01                   .BYTE   mne_ldax        ; $A9  LDA #
00CEA5  2  48                   .BYTE   mne_taxx        ; $AA  TAX
00CEA6  2  0B                   .BYTE   mne_plbx        ; $AB  PLB
00CEA7  2  53                   .BYTE   mne_ldyx        ; $AC  LDY abs
00CEA8  2  01                   .BYTE   mne_ldax        ; $AD  LDA abs
00CEA9  2  49                   .BYTE   mne_ldxx        ; $AE  LDX abs
00CEAA  2  01                   .BYTE   mne_ldax        ; $AF  LDA absl
00CEAB  2               ;
00CEAB  2  41                   .BYTE   mne_bcsx        ; $B0  BCS abs
00CEAC  2  01                   .BYTE   mne_ldax        ; $B1  LDA (<dp>),Y
00CEAD  2  01                   .BYTE   mne_ldax        ; $B2  LDA (dp)
00CEAE  2  01                   .BYTE   mne_ldax        ; $B3  LDA (<offset>,S),Y
00CEAF  2  53                   .BYTE   mne_ldyx        ; $B4  LDY dp,X
00CEB0  2  01                   .BYTE   mne_ldax        ; $B5  LDA dp,X
00CEB1  2  49                   .BYTE   mne_ldxx        ; $B6  LDX dp,Y
00CEB2  2  01                   .BYTE   mne_ldax        ; $B7  LDA [dp],Y
00CEB3  2  47                   .BYTE   mne_clvx        ; $B8  CLV
00CEB4  2  01                   .BYTE   mne_ldax        ; $B9  LDA abs,Y
00CEB5  2  4F                   .BYTE   mne_tsxx        ; $BA  TSX
00CEB6  2  51                   .BYTE   mne_tyxx        ; $BB  TYX
00CEB7  2  53                   .BYTE   mne_ldyx        ; $BC  LDY abs,X
00CEB8  2  01                   .BYTE   mne_ldax        ; $BD  LDA abs,X
00CEB9  2  49                   .BYTE   mne_ldxx        ; $BE  LDX abs,Y
00CEBA  2  01                   .BYTE   mne_ldax        ; $BF  LDA absl,X
00CEBB  2               ;
00CEBB  2  58                   .BYTE   mne_cpyx        ; $C0  CPY #
00CEBC  2  35                   .BYTE   mne_cmpx        ; $C1  CMP (dp,X)
00CEBD  2  31                   .BYTE   mne_repx        ; $C2  REP #
00CEBE  2  35                   .BYTE   mne_cmpx        ; $C3  CMP <offset>,S
00CEBF  2  58                   .BYTE   mne_cpyx        ; $C4  CPY dp
00CEC0  2  35                   .BYTE   mne_cmpx        ; $C5  CMP dp
00CEC1  2  12                   .BYTE   mne_decx        ; $C6  DEC dp
00CEC2  2  35                   .BYTE   mne_cmpx        ; $C7  CMP [dp]
00CEC3  2  57                   .BYTE   mne_inyx        ; $C8  INY
00CEC4  2  35                   .BYTE   mne_cmpx        ; $C9  CMP #
00CEC5  2  4A                   .BYTE   mne_dexx        ; $CA  DEX
00CEC6  2  20                   .BYTE   mne_waix        ; $CB  WAI
00CEC7  2  58                   .BYTE   mne_cpyx        ; $CC  CPY abs
00CEC8  2  35                   .BYTE   mne_cmpx        ; $CD  CMP abs
00CEC9  2  12                   .BYTE   mne_decx        ; $CE  DEC abs
00CECA  2  35                   .BYTE   mne_cmpx        ; $CF  CMP absl
00CECB  2               ;
00CECB  2  1F                   .BYTE   mne_bnex        ; $D0  BNE abs
00CECC  2  35                   .BYTE   mne_cmpx        ; $D1  CMP (<dp>),Y
00CECD  2  35                   .BYTE   mne_cmpx        ; $D2  CMP (dp)
00CECE  2  35                   .BYTE   mne_cmpx        ; $D3  CMP (<offset>,S),Y
00CECF  2  21                   .BYTE   mne_peix        ; $D4  PEI dp
00CED0  2  35                   .BYTE   mne_cmpx        ; $D5  CMP dp,X
00CED1  2  12                   .BYTE   mne_decx        ; $D6  DEC dp,X
00CED2  2  35                   .BYTE   mne_cmpx        ; $D7  CMP [dp],Y
00CED3  2  1B                   .BYTE   mne_cldx        ; $D8  CLD
00CED4  2  35                   .BYTE   mne_cmpx        ; $D9  CMP abs,Y
00CED5  2  4B                   .BYTE   mne_phxx        ; $DA  PHX
00CED6  2  39                   .BYTE   mne_stpx        ; $DB  STP
00CED7  2  36                   .BYTE   mne_jmpx        ; $DC  JMP [abs]
00CED8  2  35                   .BYTE   mne_cmpx        ; $DD  CMP abs,X
00CED9  2  12                   .BYTE   mne_decx        ; $DE  DEC abs,X
00CEDA  2  35                   .BYTE   mne_cmpx        ; $DF  CMP absl,X
00CEDB  2               ;
00CEDB  2  4E                   .BYTE   mne_cpxx        ; $E0  CPX #
00CEDC  2  0E                   .BYTE   mne_sbcx        ; $E1  SBC (dp,X)
00CEDD  2  32                   .BYTE   mne_sepx        ; $E2  SEP #
00CEDE  2  0E                   .BYTE   mne_sbcx        ; $E3  SBC <offset>,S
00CEDF  2  4E                   .BYTE   mne_cpxx        ; $E4  CPX dp
00CEE0  2  0E                   .BYTE   mne_sbcx        ; $E5  SBC dp
00CEE1  2  15                   .BYTE   mne_incx        ; $E6  INC dp
00CEE2  2  0E                   .BYTE   mne_sbcx        ; $E7  SBC [dp]
00CEE3  2  4D                   .BYTE   mne_inxx        ; $E8  INX
00CEE4  2  0E                   .BYTE   mne_sbcx        ; $E9  SBC #
00CEE5  2  38                   .BYTE   mne_nopx        ; $EA  NOP
00CEE6  2  00                   .BYTE   mne_xbax        ; $EB  XBA
00CEE7  2  4E                   .BYTE   mne_cpxx        ; $EC  CPX abs
00CEE8  2  0E                   .BYTE   mne_sbcx        ; $ED  SBC abs
00CEE9  2  15                   .BYTE   mne_incx        ; $EE  INC abs
00CEEA  2  0E                   .BYTE   mne_sbcx        ; $EF  SBC absl
00CEEB  2               ;
00CEEB  2  3B                   .BYTE   mne_beqx        ; $F0  BEQ abs
00CEEC  2  0E                   .BYTE   mne_sbcx        ; $F1  SBC (<dp>),Y
00CEED  2  0E                   .BYTE   mne_sbcx        ; $F2  SBC (dp)
00CEEE  2  0E                   .BYTE   mne_sbcx        ; $F3  SBC (<offset>,S),Y
00CEEF  2  02                   .BYTE   mne_peax        ; $F4  PEA #
00CEF0  2  0E                   .BYTE   mne_sbcx        ; $F5  SBC dp,X
00CEF1  2  15                   .BYTE   mne_incx        ; $F6  INC dp,X
00CEF2  2  0E                   .BYTE   mne_sbcx        ; $F7  SBC [dp],Y
00CEF3  2  19                   .BYTE   mne_sedx        ; $F8  SED
00CEF4  2  0E                   .BYTE   mne_sbcx        ; $F9  SBC abs,Y
00CEF5  2  4C                   .BYTE   mne_plxx        ; $FA  PLX
00CEF6  2  1E                   .BYTE   mne_xcex        ; $FB  XCE
00CEF7  2  3F                   .BYTE   mne_jsrx        ; $FC  JSR (abs,X)
00CEF8  2  0E                   .BYTE   mne_sbcx        ; $FD  SBC abs,X
00CEF9  2  15                   .BYTE   mne_incx        ; $FE  INC abs,X
00CEFA  2  0E                   .BYTE   mne_sbcx        ; $FF  SBC absl,X
00CEFB  2               ;
00CEFB  2               ;
00CEFB  2               ;	instruction addressing modes & sizes in opcode order...
00CEFB  2               ;
00CEFB  2               ;	    xxxxxxxx
00CEFB  2               ;	    ||||||||
00CEFB  2               ;	    ||||++++---> Addressing Mode
00CEFB  2               ;	    ||||         ----------------------------------
00CEFB  2               ;	    ||||          0000  dp, abs, absl, implied or A
00CEFB  2               ;	    ||||          0001  #
00CEFB  2               ;	    ||||          0010  dp,X, abs,X or absl,X
00CEFB  2               ;	    ||||          0011  dp,Y or abs,Y
00CEFB  2               ;	    ||||          0100  (dp) or (abs)
00CEFB  2               ;	    ||||          0101  [dp] or [abs]
00CEFB  2               ;	    ||||          0110  [dp],Y
00CEFB  2               ;	    ||||          0111  (dp,X) or (abs,X)
00CEFB  2               ;	    ||||          1000  (<dp>),Y
00CEFB  2               ;	    ||||          1001  <offset>,S
00CEFB  2               ;	    ||||          1010  (<offset>,S),Y
00CEFB  2               ;	    ||||          1011  sbnk,dbnk (MVN or MVP)
00CEFB  2               ;	    ||||          ---------------------------------
00CEFB  2               ;	    ||||           #    = immediate
00CEFB  2               ;	    ||||           A    = accumulator
00CEFB  2               ;	    ||||           abs  = absolute
00CEFB  2               ;	    ||||           absl = absolute long
00CEFB  2               ;	    ||||           dbnk = destination bank
00CEFB  2               ;	    ||||           dp   = direct (zero) page
00CEFB  2               ;	    ||||           S    = stack relative
00CEFB  2               ;	    ||||           sbnk = source bank
00CEFB  2               ;	    ||||         ----------------------------------
00CEFB  2               ;	    ||||
00CEFB  2               ;	    ||++-------> binary-encoded operand size
00CEFB  2               ;	    |+---------> 1: relative branch instruction
00CEFB  2               ;	    +----------> 1: variable operand size...
00CEFB  2               ;
00CEFB  2               ;	    -------------------------------------------------------------
00CEFB  2               ;	    Variable operand size refers to an immediate mode instruction
00CEFB  2               ;	    that can accept either an 8 or 16 bit operand.  During instr-
00CEFB  2               ;	    uction assembly, an 8 bit operand can be forced to 16 bits by
00CEFB  2               ;	    preceding the operand field with !,  e.g.,  LDA !#$01,  which
00CEFB  2               ;	    will assemble as $A9 $01 $00.
00CEFB  2               ;	    -------------------------------------------------------------
00CEFB  2               ;
00CEFB  2               mnetabam:
00CEFB  2  00                   .BYTE   ops0|am_nam     ; $00  BRK
00CEFC  2  17                   .BYTE   ops1|am_indx    ; $01  ORA (dp,X)
00CEFD  2  10                   .BYTE   ops1|am_nam     ; $02  COP
00CEFE  2  19                   .BYTE   ops1|am_stk     ; $03  ORA <offset>,S
00CEFF  2  10                   .BYTE   ops1|am_nam     ; $04  TSB dp
00CF00  2  10                   .BYTE   ops1|am_nam     ; $05  ORA dp
00CF01  2  10                   .BYTE   ops1|am_nam     ; $06  ASL dp
00CF02  2  15                   .BYTE   ops1|am_indl    ; $07  ORA [dp]
00CF03  2  00                   .BYTE   ops0|am_nam     ; $08  PHP
00CF04  2  91                   .BYTE   vops|am_imm     ; $09  ORA #
00CF05  2  00                   .BYTE   ops0|am_nam     ; $0A  ASL A
00CF06  2  00                   .BYTE   ops0|am_nam     ; $0B  PHD
00CF07  2  20                   .BYTE   ops2|am_nam     ; $0C  TSB abs
00CF08  2  20                   .BYTE   ops2|am_nam     ; $0D  ORA abs
00CF09  2  20                   .BYTE   ops2|am_nam     ; $0E  ASL abs
00CF0A  2  30                   .BYTE   ops3|am_nam     ; $0F  ORA absl
00CF0B  2               ;
00CF0B  2  50                   .BYTE   bop1|am_nam     ; $10  BPL abs
00CF0C  2  18                   .BYTE   ops1|am_indy    ; $11  ORA (<dp>),Y
00CF0D  2  14                   .BYTE   ops1|am_ind     ; $12  ORA (dp)
00CF0E  2  1A                   .BYTE   ops1|am_stky    ; $13  ORA (<offset>,S),Y
00CF0F  2  10                   .BYTE   ops1|am_nam     ; $14  TRB dp
00CF10  2  12                   .BYTE   ops1|am_adrx    ; $15  ORA dp,X
00CF11  2  12                   .BYTE   ops1|am_adrx    ; $16  ASL dp,X
00CF12  2  16                   .BYTE   ops1|am_indly   ; $17  ORA [dp],Y
00CF13  2  00                   .BYTE   ops0|am_nam     ; $18  CLC
00CF14  2  20                   .BYTE   ops2|am_nam     ; $19  ORA abs
00CF15  2  00                   .BYTE   ops0|am_nam     ; $1A  INC A
00CF16  2  00                   .BYTE   ops0|am_nam     ; $1B  TCS
00CF17  2  20                   .BYTE   ops2|am_nam     ; $1C  TRB abs
00CF18  2  22                   .BYTE   ops2|am_adrx    ; $1D  ORA abs,X
00CF19  2  22                   .BYTE   ops2|am_adrx    ; $1E  ASL abs,X
00CF1A  2  32                   .BYTE   ops3|am_adrx    ; $1F  ORA absl,X
00CF1B  2               ;
00CF1B  2  20                   .BYTE   ops2|am_nam     ; $20  JSR abs
00CF1C  2  17                   .BYTE   ops1|am_indx    ; $21  AND (dp,X)
00CF1D  2  30                   .BYTE   ops3|am_nam     ; $22  JSL absl
00CF1E  2  19                   .BYTE   ops1|am_stk     ; $23  AND <offset>,S
00CF1F  2  10                   .BYTE   ops1|am_nam     ; $24  BIT dp
00CF20  2  10                   .BYTE   ops1|am_nam     ; $25  AND dp
00CF21  2  10                   .BYTE   ops1|am_nam     ; $26  ROL dp
00CF22  2  15                   .BYTE   ops1|am_indl    ; $27  AND [dp]
00CF23  2  00                   .BYTE   ops0|am_nam     ; $28  PLP
00CF24  2  91                   .BYTE   vops|am_imm     ; $29  AND #
00CF25  2  00                   .BYTE   ops0|am_nam     ; $2A  ROL A
00CF26  2  00                   .BYTE   ops0|am_nam     ; $2B  PLD
00CF27  2  20                   .BYTE   ops2|am_nam     ; $2C  BIT abs
00CF28  2  20                   .BYTE   ops2|am_nam     ; $2D  AND abs
00CF29  2  20                   .BYTE   ops2|am_nam     ; $2E  ROL abs
00CF2A  2  30                   .BYTE   ops3|am_nam     ; $2F  AND absl
00CF2B  2               ;
00CF2B  2  50                   .BYTE   bop1|am_nam     ; $30  BMI abs
00CF2C  2  18                   .BYTE   ops1|am_indy    ; $31  AND (<dp>),Y
00CF2D  2  14                   .BYTE   ops1|am_ind     ; $32  AND (dp)
00CF2E  2  1A                   .BYTE   ops1|am_stky    ; $33  AND (<offset>,S),Y
00CF2F  2  12                   .BYTE   ops1|am_adrx    ; $34  BIT dp,X
00CF30  2  12                   .BYTE   ops1|am_adrx    ; $35  AND dp,X
00CF31  2  12                   .BYTE   ops1|am_adrx    ; $36  ROL dp,X
00CF32  2  16                   .BYTE   ops1|am_indly   ; $37  AND [dp],Y
00CF33  2  00                   .BYTE   ops0|am_nam     ; $38  SEC
00CF34  2  23                   .BYTE   ops2|am_adry    ; $39  AND abs,Y
00CF35  2  00                   .BYTE   ops0|am_nam     ; $3A  DEC A
00CF36  2  00                   .BYTE   ops0|am_nam     ; $3B  TSC
00CF37  2  22                   .BYTE   ops2|am_adrx    ; $3C  BIT abs,X
00CF38  2  22                   .BYTE   ops2|am_adrx    ; $3D  AND abs,X
00CF39  2  22                   .BYTE   ops2|am_adrx    ; $3E  ROL abs,X
00CF3A  2  32                   .BYTE   ops3|am_adrx    ; $3F  AND absl,X
00CF3B  2               ;
00CF3B  2  00                   .BYTE   ops0|am_nam     ; $40  RTI
00CF3C  2  17                   .BYTE   ops1|am_indx    ; $41  EOR (dp,X)
00CF3D  2  00                   .BYTE   ops0|am_nam     ; $42  WDM
00CF3E  2  19                   .BYTE   ops1|am_stk     ; $43  EOR <offset>,S
00CF3F  2  2B                   .BYTE   ops2|am_move    ; $44  MVP sb,db
00CF40  2  10                   .BYTE   ops1|am_nam     ; $45  EOR dp
00CF41  2  10                   .BYTE   ops1|am_nam     ; $46  LSR dp
00CF42  2  15                   .BYTE   ops1|am_indl    ; $47  EOR [dp]
00CF43  2  00                   .BYTE   ops0|am_nam     ; $48  PHA
00CF44  2  91                   .BYTE   vops|am_imm     ; $49  EOR #
00CF45  2  00                   .BYTE   ops0|am_nam     ; $4A  LSR A
00CF46  2  00                   .BYTE   ops0|am_nam     ; $4B  PHK
00CF47  2  20                   .BYTE   ops2|am_nam     ; $4C  JMP abs
00CF48  2  20                   .BYTE   ops2|am_nam     ; $4D  EOR abs
00CF49  2  20                   .BYTE   ops2|am_nam     ; $4E  LSR abs
00CF4A  2  30                   .BYTE   ops3|am_nam     ; $4F  EOR absl
00CF4B  2               ;
00CF4B  2  50                   .BYTE   bop1|am_nam     ; $50  BVC abs
00CF4C  2  18                   .BYTE   ops1|am_indy    ; $51  EOR (<dp>),Y
00CF4D  2  14                   .BYTE   ops1|am_ind     ; $52  EOR (dp)
00CF4E  2  1A                   .BYTE   ops1|am_stky    ; $53  EOR (<offset>,S),Y
00CF4F  2  2B                   .BYTE   ops2|am_move    ; $54  MVN sb,db
00CF50  2  12                   .BYTE   ops1|am_adrx    ; $55  EOR dp,X
00CF51  2  12                   .BYTE   ops1|am_adrx    ; $56  LSR dp,X
00CF52  2  16                   .BYTE   ops1|am_indly   ; $57  EOR [dp],Y
00CF53  2  00                   .BYTE   ops0|am_nam     ; $58  CLI
00CF54  2  23                   .BYTE   ops2|am_adry    ; $59  EOR abs,Y
00CF55  2  00                   .BYTE   ops0|am_nam     ; $5A  PHY
00CF56  2  00                   .BYTE   ops0|am_nam     ; $5B  TCD
00CF57  2  30                   .BYTE   ops3|am_nam     ; $5C  JML absl
00CF58  2  22                   .BYTE   ops2|am_adrx    ; $5D  EOR abs,X
00CF59  2  22                   .BYTE   ops2|am_adrx    ; $5E  LSR abs,X
00CF5A  2  32                   .BYTE   ops3|am_adrx    ; $5F  EOR absl,X
00CF5B  2               ;
00CF5B  2  00                   .BYTE   ops0|am_nam     ; $60  RTS
00CF5C  2  17                   .BYTE   ops1|am_indx    ; $61  ADC (dp,X)
00CF5D  2  60                   .BYTE   bop2|am_nam     ; $62  PER
00CF5E  2  19                   .BYTE   ops1|am_stk     ; $63  ADC <offset>,S
00CF5F  2  10                   .BYTE   ops1|am_nam     ; $64  STZ dp
00CF60  2  10                   .BYTE   ops1|am_nam     ; $65  ADC dp
00CF61  2  10                   .BYTE   ops1|am_nam     ; $66  ROR dp
00CF62  2  15                   .BYTE   ops1|am_indl    ; $67  ADC [dp]
00CF63  2  00                   .BYTE   ops0|am_nam     ; $68  PLA
00CF64  2  91                   .BYTE   vops|am_imm     ; $69  ADC #
00CF65  2  00                   .BYTE   ops0|am_nam     ; $6A  ROR A
00CF66  2  00                   .BYTE   ops0|am_nam     ; $6B  RTL
00CF67  2  24                   .BYTE   ops2|am_ind     ; $6C  JMP (abs)
00CF68  2  20                   .BYTE   ops2|am_nam     ; $6D  ADC abs
00CF69  2  20                   .BYTE   ops2|am_nam     ; $6E  ROR abs
00CF6A  2  30                   .BYTE   ops3|am_nam     ; $6F  ADC absl
00CF6B  2               ;
00CF6B  2  50                   .BYTE   bop1|am_nam     ; $70  BVS abs
00CF6C  2  18                   .BYTE   ops1|am_indy    ; $71  ADC (<dp>),Y
00CF6D  2  14                   .BYTE   ops1|am_ind     ; $72  ADC (dp)
00CF6E  2  1A                   .BYTE   ops1|am_stky    ; $73  ADC (<offset>,S),Y
00CF6F  2  12                   .BYTE   ops1|am_adrx    ; $74  STZ dp,X
00CF70  2  12                   .BYTE   ops1|am_adrx    ; $75  ADC dp,X
00CF71  2  12                   .BYTE   ops1|am_adrx    ; $76  ROR dp,X
00CF72  2  16                   .BYTE   ops1|am_indly   ; $77  ADC [dp],Y
00CF73  2  00                   .BYTE   ops0|am_nam     ; $78  SEI
00CF74  2  23                   .BYTE   ops2|am_adry    ; $79  ADC abs,Y
00CF75  2  00                   .BYTE   ops0|am_nam     ; $7A  PLY
00CF76  2  00                   .BYTE   ops0|am_nam     ; $7B  TDC
00CF77  2  27                   .BYTE   ops2|am_indx    ; $7C  JMP (abs,X)
00CF78  2  22                   .BYTE   ops2|am_adrx    ; $7D  ADC abs,X
00CF79  2  22                   .BYTE   ops2|am_adrx    ; $7E  ROR abs,X
00CF7A  2  32                   .BYTE   ops3|am_adrx    ; $7F  ADC absl,X
00CF7B  2               ;
00CF7B  2  50                   .BYTE   bop1|am_nam     ; $80  BRA abs
00CF7C  2  17                   .BYTE   ops1|am_indx    ; $81  STA (dp,X)
00CF7D  2  60                   .BYTE   bop2|am_nam     ; $82  BRL abs
00CF7E  2  19                   .BYTE   ops1|am_stk     ; $83  STA <offset>,S
00CF7F  2  10                   .BYTE   ops1|am_nam     ; $84  STY dp
00CF80  2  10                   .BYTE   ops1|am_nam     ; $85  STA dp
00CF81  2  10                   .BYTE   ops1|am_nam     ; $86  STX dp
00CF82  2  15                   .BYTE   ops1|am_indl    ; $87  STA [dp]
00CF83  2  00                   .BYTE   ops0|am_nam     ; $88  DEY
00CF84  2  91                   .BYTE   vops|am_imm     ; $89  BIT #
00CF85  2  00                   .BYTE   ops0|am_nam     ; $8A  TXA
00CF86  2  00                   .BYTE   ops0|am_nam     ; $8B  PHB
00CF87  2  20                   .BYTE   ops2|am_nam     ; $8C  STY abs
00CF88  2  20                   .BYTE   ops2|am_nam     ; $8D  STA abs
00CF89  2  20                   .BYTE   ops2|am_nam     ; $8E  STX abs
00CF8A  2  30                   .BYTE   ops3|am_nam     ; $8F  STA absl
00CF8B  2               ;
00CF8B  2  50                   .BYTE   bop1|am_nam     ; $90  BCC abs
00CF8C  2  18                   .BYTE   ops1|am_indy    ; $91  STA (<dp>),Y
00CF8D  2  14                   .BYTE   ops1|am_ind     ; $92  STA (dp)
00CF8E  2  1A                   .BYTE   ops1|am_stky    ; $93  STA (<offset>,S),Y
00CF8F  2  12                   .BYTE   ops1|am_adrx    ; $94  STY dp,X
00CF90  2  12                   .BYTE   ops1|am_adrx    ; $95  STA dp,X
00CF91  2  13                   .BYTE   ops1|am_adry    ; $96  STX dp,Y
00CF92  2  16                   .BYTE   ops1|am_indly   ; $97  STA [dp],Y
00CF93  2  00                   .BYTE   ops0|am_nam     ; $98  TYA
00CF94  2  23                   .BYTE   ops2|am_adry    ; $99  STA abs,Y
00CF95  2  00                   .BYTE   ops0|am_nam     ; $9A  TXS
00CF96  2  00                   .BYTE   ops0|am_nam     ; $9B  TXY
00CF97  2  20                   .BYTE   ops2|am_nam     ; $9C  STZ abs
00CF98  2  22                   .BYTE   ops2|am_adrx    ; $9D  STA abs,X
00CF99  2  22                   .BYTE   ops2|am_adrx    ; $9E  STZ abs,X
00CF9A  2  32                   .BYTE   ops3|am_adrx    ; $9F  STA absl,X
00CF9B  2               ;
00CF9B  2  91                   .BYTE   vops|am_imm     ; $A0  LDY #
00CF9C  2  17                   .BYTE   ops1|am_indx    ; $A1  LDA (dp,X)
00CF9D  2  91                   .BYTE   vops|am_imm     ; $A2  LDX #
00CF9E  2  19                   .BYTE   ops1|am_stk     ; $A3  LDA <offset>,S
00CF9F  2  10                   .BYTE   ops1|am_nam     ; $A4  LDY dp
00CFA0  2  10                   .BYTE   ops1|am_nam     ; $A5  LDA dp
00CFA1  2  10                   .BYTE   ops1|am_nam     ; $A6  LDX dp
00CFA2  2  15                   .BYTE   ops1|am_indl    ; $A7  LDA [dp]
00CFA3  2  00                   .BYTE   ops0|am_nam     ; $A8  TAY
00CFA4  2  91                   .BYTE   vops|am_imm     ; $A9  LDA #
00CFA5  2  00                   .BYTE   ops0|am_nam     ; $AA  TAX
00CFA6  2  00                   .BYTE   ops0|am_nam     ; $AB  PLB
00CFA7  2  20                   .BYTE   ops2|am_nam     ; $AC  LDY abs
00CFA8  2  20                   .BYTE   ops2|am_nam     ; $AD  LDA abs
00CFA9  2  20                   .BYTE   ops2|am_nam     ; $AE  LDX abs
00CFAA  2  30                   .BYTE   ops3|am_nam     ; $AF  LDA absl
00CFAB  2               ;
00CFAB  2  50                   .BYTE   bop1|am_nam     ; $B0  BCS abs
00CFAC  2  18                   .BYTE   ops1|am_indy    ; $B1  LDA (<dp>),Y
00CFAD  2  14                   .BYTE   ops1|am_ind     ; $B2  LDA (dp)
00CFAE  2  1A                   .BYTE   ops1|am_stky    ; $B3  LDA (<offset>,S),Y
00CFAF  2  12                   .BYTE   ops1|am_adrx    ; $B4  LDY dp,X
00CFB0  2  12                   .BYTE   ops1|am_adrx    ; $B5  LDA dp,X
00CFB1  2  13                   .BYTE   ops1|am_adry    ; $B6  LDX dp,Y
00CFB2  2  16                   .BYTE   ops1|am_indly   ; $B7  LDA [dp],Y
00CFB3  2  00                   .BYTE   ops0|am_nam     ; $B8  CLV
00CFB4  2  23                   .BYTE   ops2|am_adry    ; $B9  LDA abs,Y
00CFB5  2  00                   .BYTE   ops0|am_nam     ; $BA  TSX
00CFB6  2  00                   .BYTE   ops0|am_nam     ; $BB  TYX
00CFB7  2  22                   .BYTE   ops2|am_adrx    ; $BC  LDY abs,X
00CFB8  2  22                   .BYTE   ops2|am_adrx    ; $BD  LDA abs,X
00CFB9  2  23                   .BYTE   ops2|am_adry    ; $BE  LDX abs,Y
00CFBA  2  32                   .BYTE   ops3|am_adrx    ; $BF  LDA absl,X
00CFBB  2               ;
00CFBB  2  91                   .BYTE   vops|am_imm     ; $C0  CPY #
00CFBC  2  17                   .BYTE   ops1|am_indx    ; $C1  CMP (dp,X)
00CFBD  2  11                   .BYTE   ops1|am_imm     ; $C2  REP #
00CFBE  2  19                   .BYTE   ops1|am_stk     ; $C3  CMP <offset>,S
00CFBF  2  10                   .BYTE   ops1|am_nam     ; $C4  CPY dp
00CFC0  2  10                   .BYTE   ops1|am_nam     ; $C5  CMP dp
00CFC1  2  10                   .BYTE   ops1|am_nam     ; $C6  DEC dp
00CFC2  2  15                   .BYTE   ops1|am_indl    ; $C7  CMP [dp]
00CFC3  2  00                   .BYTE   ops0|am_nam     ; $C8  INY
00CFC4  2  91                   .BYTE   vops|am_imm     ; $C9  CMP #
00CFC5  2  00                   .BYTE   ops0|am_nam     ; $CA  DEX
00CFC6  2  00                   .BYTE   ops0|am_nam     ; $CB  WAI
00CFC7  2  20                   .BYTE   ops2|am_nam     ; $CC  CPY abs
00CFC8  2  20                   .BYTE   ops2|am_nam     ; $CD  CMP abs
00CFC9  2  20                   .BYTE   ops2|am_nam     ; $CE  DEC abs
00CFCA  2  30                   .BYTE   ops3|am_nam     ; $CF  CMP absl
00CFCB  2               ;
00CFCB  2  50                   .BYTE   bop1|am_nam     ; $D0  BNE abs
00CFCC  2  18                   .BYTE   ops1|am_indy    ; $D1  CMP (<dp>),Y
00CFCD  2  14                   .BYTE   ops1|am_ind     ; $D2  CMP (dp)
00CFCE  2  1A                   .BYTE   ops1|am_stky    ; $D3  CMP (<offset>,S),Y
00CFCF  2  10                   .BYTE   ops1|am_nam     ; $D4  PEI dp
00CFD0  2  12                   .BYTE   ops1|am_adrx    ; $D5  CMP dp,X
00CFD1  2  12                   .BYTE   ops1|am_adrx    ; $D6  DEC dp,X
00CFD2  2  16                   .BYTE   ops1|am_indly   ; $D7  CMP [dp],Y
00CFD3  2  00                   .BYTE   ops0|am_nam     ; $D8  CLD
00CFD4  2  23                   .BYTE   ops2|am_adry    ; $D9  CMP abs,Y
00CFD5  2  00                   .BYTE   ops0|am_nam     ; $DA  PHX
00CFD6  2  00                   .BYTE   ops0|am_nam     ; $DB  STP
00CFD7  2  25                   .BYTE   ops2|am_indl    ; $DC  JMP [abs]
00CFD8  2  22                   .BYTE   ops2|am_adrx    ; $DD  CMP abs,X
00CFD9  2  22                   .BYTE   ops2|am_adrx    ; $DE  DEC abs,X
00CFDA  2  32                   .BYTE   ops3|am_adrx    ; $DF  CMP absl,X
00CFDB  2               ;
00CFDB  2  91                   .BYTE   vops|am_imm     ; $E0  CPX #
00CFDC  2  17                   .BYTE   ops1|am_indx    ; $E1  SBC (dp,X)
00CFDD  2  11                   .BYTE   ops1|am_imm     ; $E2  SEP #
00CFDE  2  19                   .BYTE   ops1|am_stk     ; $E3  SBC <offset>,S
00CFDF  2  10                   .BYTE   ops1|am_nam     ; $E4  CPX dp
00CFE0  2  10                   .BYTE   ops1|am_nam     ; $E5  SBC dp
00CFE1  2  10                   .BYTE   ops1|am_nam     ; $E6  INC dp
00CFE2  2  15                   .BYTE   ops1|am_indl    ; $E7  SBC [dp]
00CFE3  2  00                   .BYTE   ops0|am_nam     ; $E8  INX
00CFE4  2  91                   .BYTE   vops|am_imm     ; $E9  SBC #
00CFE5  2  00                   .BYTE   ops0|am_nam     ; $EA  NOP
00CFE6  2  00                   .BYTE   ops0|am_nam     ; $EB  XBA
00CFE7  2  20                   .BYTE   ops2|am_nam     ; $EC  CPX abs
00CFE8  2  20                   .BYTE   ops2|am_nam     ; $ED  SBC abs
00CFE9  2  20                   .BYTE   ops2|am_nam     ; $EE  INC abs
00CFEA  2  30                   .BYTE   ops3|am_nam     ; $EF  SBC absl
00CFEB  2               ;
00CFEB  2  50                   .BYTE   bop1|am_nam     ; $F0  BEQ abs
00CFEC  2  18                   .BYTE   ops1|am_indy    ; $F1  SBC (<dp>),Y
00CFED  2  14                   .BYTE   ops1|am_ind     ; $F2  SBC (dp)
00CFEE  2  1A                   .BYTE   ops1|am_stky    ; $F3  SBC (<offset>,S),Y
00CFEF  2  21                   .BYTE   ops2|am_imm     ; $F4  PEA #
00CFF0  2  12                   .BYTE   ops1|am_adrx    ; $F5  SBC dp,X
00CFF1  2  12                   .BYTE   ops1|am_adrx    ; $F6  INC dp,X
00CFF2  2  16                   .BYTE   ops1|am_indly   ; $F7  SBC [dp],Y
00CFF3  2  00                   .BYTE   ops0|am_nam     ; $F8  SED
00CFF4  2  23                   .BYTE   ops2|am_adry    ; $F9  SBC abs,Y
00CFF5  2  00                   .BYTE   ops0|am_nam     ; $FA  PLX
00CFF6  2  00                   .BYTE   ops0|am_nam     ; $FB  XCE
00CFF7  2  27                   .BYTE   ops2|am_indx    ; $FC  JSR (abs,X)
00CFF8  2  22                   .BYTE   ops2|am_adrx    ; $FD  SBC abs,X
00CFF9  2  22                   .BYTE   ops2|am_adrx    ; $FE  INC abs,X
00CFFA  2  32                   .BYTE   ops3|am_adrx    ; $FF  SBC absl,X
00CFFB  2               ;
00CFFB  2               ;
00CFFB  2               ;	.X & .Y immediate mode opcodes...
00CFFB  2               ;
00CFFB  2               vopidx:
00CFFB  2  E0                   .BYTE   opc_cpxi        ;CPX #
00CFFC  2  C0                   .BYTE   opc_cpyi        ;CPY #
00CFFD  2  A2                   .BYTE   opc_ldxi        ;LDX #
00CFFE  2  A0                   .BYTE   opc_ldyi        ;LDY #
00CFFF  2               n_vopidx        = *-vopidx      ;number of opcodes
00CFFF  2               ;
00CFFF  2               ;
00CFFF  2               ;	addressing mode symbology lookup...
00CFFF  2               ;
00CFFF  2               ms_lutab:
00CFFF  2  17 D0                .WORD   ms_nam          ;no symbol
00D001  2  21 D0                .WORD   ms_imm          ;#
00D003  2  19 D0                .WORD   ms_addrx        ;<addr>,X
00D005  2  1D D0                .WORD   ms_addry        ;<addr>,Y
00D007  2  23 D0                .WORD   ms_ind          ;(<addr>)
00D009  2  26 D0                .WORD   ms_indl         ;[<dp>]
00D00B  2  29 D0                .WORD   ms_indly        ;[<dp>],Y
00D00D  2  2E D0                .WORD   ms_indx         ;(<addr>,X)
00D00F  2  33 D0                .WORD   ms_indy         ;(<dp>),Y
00D011  2  3B D0                .WORD   ms_stk          ;<offset>,S
00D013  2  3F D0                .WORD   ms_stky         ;(<offset>,S),Y
00D015  2  17 D0                .WORD   ms_nam          ;<sbnk>,<dbnk>
00D017  2               ;
00D017  2               ;
00D017  2               ;	addressing mode symbology strings...
00D017  2               ;
00D017  2               ms_nam:
00D017  2  20 00                .BYTE   " ",0           ;no symbol
00D019  2               ms_addrx:
00D019  2  20 2C 58 00          .BYTE   " ,X",0         ;<addr>,X
00D01D  2               ms_addry:
00D01D  2  20 2C 59 00          .BYTE   " ,Y",0         ;<addr>,Y
00D021  2               ms_imm:
00D021  2  23 00                .BYTE   "#",0           ;#
00D023  2               ms_ind:
00D023  2  28 29 00             .BYTE   "()",0          ;(<addr>)
00D026  2               ms_indl:
00D026  2  5B 5D 00             .BYTE   "[]",0          ;[<dp>]
00D029  2               ms_indly:
00D029  2  5B 5D 2C 59          .BYTE   "[],Y",0        ;[<dp>],Y
00D02D  2  00           
00D02E  2               ms_indx:
00D02E  2  28 2C 58 29          .BYTE   "(,X)",0        ;(<addr>,X)
00D032  2  00           
00D033  2               ms_indy:
00D033  2  28 29 2C 59          .BYTE   "(),Y",0        ;(<dp>),Y
00D037  2  00           
00D038  2               ms_move:
00D038  2  2C 24 00             .BYTE   ",$",0          ;<sbnk>,<dbnk>
00D03B  2               ms_stk:
00D03B  2  20 2C 53 00          .BYTE   " ,S",0         ;<offset>,S
00D03F  2               ms_stky:
00D03F  2  28 2C 53 29          .BYTE   "(,S),Y",0      ;(<offset>,S),Y
00D043  2  2C 59 00     
00D046  2               ;
00D046  2               ;================================================================================
00D046  2               ;
00D046  2               ;CONSOLE DISPLAY CONTROL STRINGS
00D046  2               ;
00D046  2               dc_lf:
00D046  2  0D 0A                LF                      ;newline
00D048  2  00                   .BYTE   0
00D049  2               ;
00D049  2               dc_bs:  ;destructive backspace
00D049  2  08                   .BYTE   a_bs
00D04A  2  20                   .BYTE   $20
00D04B  2  08                   .BYTE   a_bs
00D04C  2  00                   .BYTE   0
00D04D  2               ;
00D04D  2               dc_cl_DUMB:                     ;clear to end of line
00D04D  2  0D 0A                .BYTE   $0d,$0a
00D04F  2  00                   .BYTE   0
00D050  2               dc_cl_ANSI:                     ;clear to end of line
00D050  2  1B 5B 4B             .BYTE   a_esc,"[K"
00D053  2  00                   .BYTE   0
00D054  2               dc_cl_WYSE:                     ;clear to end of line
00D054  2  1B 54                .BYTE   a_esc,"T"
00D056  2  00                   .BYTE   0
00D057  2               
00D057  2               ;
00D057  2               ;
00D057  2               
00D057  2               ;
00D057  2               ;================================================================================
00D057  2               ;
00D057  2               ;TEXT STRINGS
00D057  2               ;
00D057  2               mm_brk:
00D057  2  07                   RB
00D058  2  0D 0A                LF
00D05A  2  2A 42 52 4B          .BYTE   "*BRK"
00D05E  2  0D 0A                LF
00D060  2  00                   .BYTE   0
00D061  2               ;
00D061  2               mm_entry:
00D061  2  0D 0A                LF
00D063  2  53 75 70 65          .BYTE   "Supermon 816 "
00D067  2  72 6D 6F 6E  
00D06B  2  20 38 31 36  
00D070  2  31 2E 30 2E          SOFTVERS
00D074  2  32           
00D075  2  20                   .BYTE   " "
00D076  2  0D 0A                LF
00D078  2  00                   .BYTE   0
00D079  2               ;
00D079  2               mm_err:
00D079  2  20 2A 45 52          .BYTE   " *ERR ",0
00D07D  2  52 20 00     
00D080  2               ;
00D080  2               mm_prmpt:
00D080  2  0D 0A                LF
00D082  2  2E 00                .BYTE   ".",0
00D084  2               ;
00D084  2               mm_regs:
00D084  2  0D 0A                LF
00D086  2  50 42 20 20          .BYTE   "PB  PC   NVmxDIZC  .C   .X   .Y   SP"
00D08A  2  50 43 20 20  
00D08E  2  20 4E 56 6D  
00D0AA  2  0D 0A                LF
00D0AC  2  00                   .BYTE   0
00D0AD  2               mm_regs1:
00D0AD  2  0D 0A                LF
00D0AF  2  20 44 50 20          .BYTE   " DP  DB"
00D0B3  2  20 44 42     
00D0B6  2  0D 0A                LF
00D0B8  2  00                   .BYTE   0
00D0B9  2               
00D0B9  2               ;
00D0B9  2               mm_rts:
00D0B9  2  07                   RB
00D0BA  2  0D 0A                LF
00D0BC  2  2A 52 54 53          .BYTE   "*RTS"
00D0C0  2  0D 0A                LF
00D0C2  2  00                   .BYTE   0
00D0C3  2               
00D0C3  2               
00D0C3  2               mm_S19_prmpt:
00D0C3  2  0D 0A                LF
00D0C5  2  42 65 67 69          .BYTE   "Begin sending S28 encoded file. . ."
00D0C9  2  6E 20 73 65  
00D0CD  2  6E 64 69 6E  
00D0E8  2  0D 0A                LF
00D0EA  2  00                   .BYTE   0
00D0EB  2               
00D0EB  2               ;
00D0EB  2               ALIVEM:
00D0EB  2  0D 0A                .BYTE   $0D,$0A
00D0ED  2  0D 0A                .BYTE   $0D,$0A
00D0EF  2  20 20 20 5F          .BYTE   "   __ _____  ___  __   __",$0D,$0A
00D0F3  2  5F 20 5F 5F  
00D0F7  2  5F 5F 5F 20  
00D10A  2  20 20 2F 20          .BYTE   "  / /| ____|/ _ \/_ | / /",$0D,$0A
00D10E  2  2F 7C 20 5F  
00D112  2  5F 5F 5F 7C  
00D125  2  20 2F 20 2F          .BYTE   " / /_| |__ | (_) || |/ /_",$0D,$0A
00D129  2  5F 7C 20 7C  
00D12D  2  5F 5F 20 7C  
00D140  2  7C 20 20 5F          .BYTE   "|  _ \___ \ > _ < | |  _ \",$0D,$0A
00D144  2  20 5C 5F 5F  
00D148  2  5F 20 5C 20  
00D15C  2  7C 20 28 5F          .BYTE   "| (_) |__) | (_) || | (_) |",$0D,$0A
00D160  2  29 20 7C 5F  
00D164  2  5F 29 20 7C  
00D179  2  20 5C 5F 5F          .BYTE   " \___/____/ \___/ |_|\___/ ",$0D,$0A
00D17D  2  5F 2F 5F 5F  
00D181  2  5F 5F 2F 20  
00D196  2  0D 0A                .BYTE   $0D,$0A
00D198  2  36 35 63 38          .BYTE   "65c816 BIOS (NATIVE MODE)",$0D,$0A
00D19C  2  31 36 20 42  
00D1A0  2  49 4F 53 20  
00D1B3  2  57 45 38 31          .BYTE   "WE816-MARK2 8/10/2024 - D.WERNER",$0D,$0A
00D1B7  2  36 2D 4D 41  
00D1BB  2  52 4B 32 20  
00D1D5  2  2D 2D 2D 2D          .BYTE   "-------------------------------------",$0D,$0A
00D1D9  2  2D 2D 2D 2D  
00D1DD  2  2D 2D 2D 2D  
00D1FC  2  0D 0A 00             .BYTE   $0D,$0A,0
00D1FF  2               ;
00D1FF  2               
00D1FF  2               
00D1FF  2               _txtend_        = *             ;end of program text
00D1FF  2               ;
00D1FF  2               ;================================================================================
00D1FF  2               
00D1FF  1               
00D1FF  1               ;__INTRETURN____________________________________________________
00D1FF  1               ;
00D1FF  1               ; Handle Interrupts
00D1FF  1               ;
00D1FF  1               ;_______________________________________________________________
00D1FF  1               ;
00D1FF  1               INTRETURN:
00D1FF  1  40                   RTI                     ;
00D200  1               
00D200  1               ;__BATEST_______________________________________________________
00D200  1               ;
00D200  1               ; Perform Basic Hardware Assurance Test
00D200  1               ;
00D200  1               ;_______________________________________________________________
00D200  1               ;
00D200  1               BATEST:
00D200  1  60                   RTS
00D201  1               
00D201  1               
00D201  1               
00D201  1               ;__CONSOLE_INIT_________________________________________________
00D201  1               ;
00D201  1               ; Initialize Attached Console Devices
00D201  1               ;
00D201  1               ;_______________________________________________________________
00D201  1               ;
00D201  1               CONSOLE_INIT:
00D201  1  08                   PHP
00D202  1  E2 30                ACCUMULATORINDEX8
00D204  1               
00D204  1  20 7E D2             JSR     SERIAL_CONSOLE_INIT
00D207  1  20 DC D2             JSR     SETUPVIDEO
00D20A  1  A9 0F                LDA     #$0F
00D20C  1  20 22 D4             JSR     SetColor
00D20F  1  20 C3 D4             JSR     ClearScreen
00D212  1  A9 01                LDA     #$01
00D214  1  8D 41 03             STA     ConsoleDevice
00D217  1  20 0A D5             JSR     INITKEYBOARD
00D21A  1               
00D21A  1  28                   PLP
00D21B  1  60                   RTS
00D21C  1               
00D21C  1               
00D21C  1               ;__OUTCH_______________________________________________________
00D21C  1               ;
00D21C  1               ; OUTPUT CHAR IN LOW BYTE OF ACC TO CONSOLE
00D21C  1               ;
00D21C  1               ; Current Console Device stored in ConsoleDevice
00D21C  1               ;
00D21C  1               ; 0=Serial
00D21C  1               ; 1=On Board 9918/KB
00D21C  1               ;______________________________________________________________
00D21C  1               OUTCH:
00D21C  1  DA                   PHX
00D21D  1  5A                   PHY
00D21E  1  08                   PHP
00D21F  1  E2 30                ACCUMULATORINDEX8
00D221  1  AA                   TAX
00D222  1  AF 41 03 00          LDA     F:ConsoleDevice
00D226  1  C9 01                CMP     #$01
00D228  1  D0 08                BNE     OUTCH2
00D22A  1  8A                   TXA
00D22B  1  20 48 D3             JSR     OutVideoCh
00D22E  1  28                   PLP
00D22F  1  7A                   PLY
00D230  1  FA                   PLX
00D231  1  60                   RTS
00D232  1               
00D232  1               ; Default (serial)
00D232  1               OUTCH2:
00D232  1  8A                   TXA
00D233  1  20 9F D2             JSR     SERIAL_OUTCH
00D236  1  28                   PLP
00D237  1  7A                   PLY
00D238  1  FA                   PLX
00D239  1  60                   RTS
00D23A  1               
00D23A  1               
00D23A  1               ;__INCHW_______________________________________________________
00D23A  1               ;
00D23A  1               ; INPUT CHAR FROM CONSOLE TO ACC  (WAIT FOR CHAR)
00D23A  1               ;
00D23A  1               ;______________________________________________________________
00D23A  1               INCHW:
00D23A  1  DA                   PHX
00D23B  1  5A                   PHY
00D23C  1  08                   PHP
00D23D  1  E2 30                ACCUMULATORINDEX8
00D23F  1               
00D23F  1  AF 41 03 00          LDA     F:ConsoleDevice
00D243  1  C9 01                CMP     #$01
00D245  1  D0 07                BNE     INCHW2
00D247  1  20 2C D5             JSR     GetKey
00D24A  1  28                   PLP
00D24B  1  7A                   PLY
00D24C  1  FA                   PLX
00D24D  1  60                   RTS
00D24E  1               
00D24E  1               ; Default (serial)
00D24E  1               INCHW2:
00D24E  1  20 B4 D2             JSR     SERIAL_INCHW
00D251  1  28                   PLP
00D252  1  7A                   PLY
00D253  1  FA                   PLX
00D254  1  60                   RTS
00D255  1               
00D255  1               
00D255  1               ;__INCH________________________________________________________
00D255  1               ;
00D255  1               ; INPUT CHAR FROM CONSOLE TO ACC
00D255  1               ;
00D255  1               ;______________________________________________________________
00D255  1               INCH:
00D255  1  DA                   PHX
00D256  1  5A                   PHY
00D257  1  08                   PHP
00D258  1  E2 30                ACCUMULATORINDEX8
00D25A  1               
00D25A  1  AF 41 03 00          LDA     F:ConsoleDevice
00D25E  1  C9 01                CMP     #$01
00D260  1  D0 0C                BNE     INCH2
00D262  1               
00D262  1  20 65 D5             JSR     ScanKeyboard
00D265  1  C9 FF                CMP     #$FF
00D267  1  F0 0F                BEQ     INCH2S
00D269  1  20 2C D5             JSR     GetKey
00D26C  1  80 05                BRA     INCH2C
00D26E  1               
00D26E  1               ; Default (serial)
00D26E  1               INCH2:
00D26E  1  20 C7 D2             JSR     SERIAL_INCH
00D271  1  B0 05                BCS     INCH2S
00D273  1               
00D273  1               
00D273  1               INCH2C:
00D273  1  28                   PLP
00D274  1  7A                   PLY
00D275  1  FA                   PLX
00D276  1  18                   CLC
00D277  1  60                   RTS
00D278  1               INCH2S:
00D278  1  28                   PLP
00D279  1  7A                   PLY
00D27A  1  FA                   PLX
00D27B  1  38                   SEC
00D27C  1  60                   RTS
00D27D  1               
00D27D  1               DONOOP:
00D27D  1               nothere:
00D27D  1  60                   RTS
00D27E  1               
00D27E  1               
00D27E  1               ;__Device_Driver_Code___________________________________________
00D27E  1               ;
00D27E  1                       .INCLUDE "conserial.asm"
00D27E  2               ;__CONSERIAL_______________________________________________________________________________________
00D27E  2               ;
00D27E  2               ;	SERIAL CONSOLE DRIVER FOR THE RBC 65c816 SBC
00D27E  2               ;
00D27E  2               ;	WRITTEN BY: DAN WERNER -- 2/25/2018
00D27E  2               ;
00D27E  2               ;__________________________________________________________________________________________________
00D27E  2               
00D27E  2               
00D27E  2               ;
00D27E  2               ;__SERIAL_CONSOLE_INIT___________________________________________
00D27E  2               ;
00D27E  2               ;	INITIALIZE UART
00D27E  2               ;	PARAMS:	SER_BAUD NEEDS TO BE SET TO BAUD RATE
00D27E  2               ;	1200:	96	 = 1,843,200 / ( 16 X 1200 )
00D27E  2               ;	2400:	48	 = 1,843,200 / ( 16 X 2400 )
00D27E  2               ;	4800:	24	 = 1,843,200 / ( 16 X 4800 )
00D27E  2               ;	9600:	12	 = 1,843,200 / ( 16 X 9600 )
00D27E  2               ;	19K2:	06	 = 1,843,200 / ( 16 X 19,200 )
00D27E  2               ;	38K4:	03
00D27E  2               ;	57K6:	02
00D27E  2               ;	115K2:	01
00D27E  2               ;
00D27E  2               ;_______________________________________________________________
00D27E  2               ;
00D27E  2               SERIAL_CONSOLE_INIT:
00D27E  2  08                   PHP
00D27F  2  E2 30                ACCUMULATORINDEX8
00D281  2               
00D281  2               ;        LDX     #63             ;
00D281  2               ;        JSR     RTC_READ        ; get magic number
00D281  2               ;        CMP     #166            ; is valid?
00D281  2               ;        BEQ     UART_INIT1
00D281  2  A9 80                LDA     #$80            ;
00D283  2  8F 03 FE 00          STA     F:UART3         ; SET DLAB FLAG
00D287  2  A9 0C                LDA     #12             ; SET TO 12 = 9600 BAUD
00D289  2               ;        BRA     UART_INIT2
00D289  2               ;UART_INIT1:
00D289  2               ;        LDA     #$80            ;
00D289  2               ;        STA     F:UART3           ; SET DLAB FLAG
00D289  2               ;        LDX     #41             ;
00D289  2               ;        JSR     RTC_READ        ; get baud rate
00D289  2               UART_INIT2:
00D289  2  8F 00 FE 00          STA     F:UART0         ; save baud rate
00D28D  2  A9 00                LDA     #00             ;
00D28F  2  8F 01 FE 00          STA     F:UART1         ;
00D293  2  A9 03                LDA     #03             ;
00D295  2  8F 03 FE 00          STA     F:UART3         ; SET 8 BIT DATA, 1 STOPBIT
00D299  2  8F 04 FE 00          STA     F:UART4         ;
00D29D  2  28                   PLP
00D29E  2  60                   RTS
00D29F  2               
00D29F  2               ;__OUTCH_______________________________________________________
00D29F  2               ;
00D29F  2               ; OUTPUT CHAR IN LOW BYTE OF ACC TO UART
00D29F  2               ;
00D29F  2               ;______________________________________________________________
00D29F  2               SERIAL_OUTCH:
00D29F  2  08                   PHP
00D2A0  2  E2 30                ACCUMULATORINDEX8
00D2A2  2  48                   PHA                     ; STORE ACC
00D2A3  2               TX_BUSYLP:
00D2A3  2  AF 05 FE 00          LDA     F:UART5         ; READ LINE STATUS REGISTER
00D2A7  2  29 20                AND     #$20            ; TEST IF UART IS READY TO SEND (BIT 5)
00D2A9  2  C9 00                CMP     #$00
00D2AB  2  F0 F6                BEQ     TX_BUSYLP       ; IF NOT REPEAT
00D2AD  2  68                   PLA                     ; RESTORE ACC
00D2AE  2  8F 00 FE 00          STA     F:UART0         ; THEN WRITE THE CHAR TO UART
00D2B2  2               
00D2B2  2  28                   PLP                     ; RESTORE CPU CONTEXT
00D2B3  2  60                   RTS                     ; DONE
00D2B4  2               
00D2B4  2               
00D2B4  2               ;__INCHW_______________________________________________________
00D2B4  2               ;
00D2B4  2               ; INPUT CHAR FROM UART TO ACC  (WAIT FOR CHAR)
00D2B4  2               ;
00D2B4  2               ;______________________________________________________________
00D2B4  2               SERIAL_INCHW:
00D2B4  2  08                   PHP
00D2B5  2  E2 30                ACCUMULATORINDEX8
00D2B7  2               SERIAL_INCHW1:
00D2B7  2  AF 05 FE 00          LDA     F:UART5         ; READ LINE STATUS REGISTER
00D2BB  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
00D2BD  2  C9 00                CMP     #$00
00D2BF  2  F0 F6                BEQ     SERIAL_INCHW1   ; LOOP UNTIL DATA IS READY
00D2C1  2  AF 00 FE 00          LDA     F:UART0         ; THEN READ THE CHAR FROM THE UART
00D2C5  2               
00D2C5  2  28                   PLP                     ; RESTORE CPU CONTEXT
00D2C6  2  60                   RTS
00D2C7  2               
00D2C7  2               
00D2C7  2               ;__INCH_______________________________________________________
00D2C7  2               ;
00D2C7  2               ; INPUT CHAR FROM UART TO ACC (DO NOT WAIT FOR CHAR)
00D2C7  2               ; CArry set if invalid character
00D2C7  2               ;______________________________________________________________
00D2C7  2               SERIAL_INCH:
00D2C7  2  08                   PHP
00D2C8  2  E2 30                ACCUMULATORINDEX8
00D2CA  2  AF 05 FE 00          LDA     F:UART5         ; READ LINE STATUS REGISTER
00D2CE  2  29 01                AND     #$01            ; TEST IF DATA IN RECEIVE BUFFER
00D2D0  2  F0 07                BEQ     SERIAL_INCH1    ; NO CHAR FOUND
00D2D2  2  AF 00 FE 00          LDA     F:UART0         ; THEN READ THE CHAR FROM THE UART
00D2D6  2  28                   PLP                     ; RESTORE CPU CONTEXT
00D2D7  2  18                   CLC
00D2D8  2  60                   RTS
00D2D9  2               SERIAL_INCH1:
00D2D9  2  28                   PLP                     ; RESTORE CPU CONTEXT
00D2DA  2  38                   SEC
00D2DB  2  60                   RTS
00D2DC  2               
00D2DC  1                       .INCLUDE "conlocal.asm"
00D2DC  2               ;__CONLOCAL_______________________________________________________________________________________
00D2DC  2               ;
00D2DC  2               ;	LOCAL CONSOLE DRIVER FOR THE WE816-MARK2
00D2DC  2               ;
00D2DC  2               ;	WRITTEN BY: DAN WERNER -- 8/18/2024
00D2DC  2               ;
00D2DC  2               ;_________________________________________________________________________________________________
00D2DC  2               
00D2DC  2               ;       SETUPVIDEO
00D2DC  2               ;       OutVideoCh
00D2DC  2               ;       SetXYVEC:
00D2DC  2               ;       CPYVVEC:
00D2DC  2               ;        SrlUpVEC:
00D2DC  2               ;       SetColorVEC:
00D2DC  2               ;       ClearScrVec:
00D2DC  2               ;
00D2DC  2               ;       INITKEYBOARD
00D2DC  2               ;       GetKey
00D2DC  2               ;
00D2DC  2               ;;;
00D2DC  2               ;;;
00D2DC  2               ;;; 	VRAM Memory Map
00D2DC  2               ;;;	$1000-$177F	40/80 Text Page 1
00D2DC  2               ;;;	$1800-$1F7F	40/80 Color Page 1
00D2DC  2               ;;;	$2000-$277F	40/80 Text Page 2
00D2DC  2               ;;;	$2800-$2F7F	40/80 Color Page 2
00D2DC  2               ;;;	$2000-$5FFF	HIRES PAGE 1
00D2DC  2               ;;;	$6000-$8FFF	HIRES PAGE 2
00D2DC  2               ;;;	$2000-$BFFF	DOUBLE HIRES
00D2DC  2               ; IO PORTS
00D2DC  2               ; Address|Description                                   |Value          |Value
00D2DC  2               ;--------|----------------------------------------------|---------------|--------
00D2DC  2               ;$fe30   | Scan Line Emulation                          | on            | off
00D2DC  2               ;$fe31   | Display Page                                 | page 0        | page 1
00D2DC  2               ;$fe32   | character generator write offset             | write offset  |
00D2DC  2               ;$fe33   | character generator write                    | Value         |
00D2DC  2               ;$fe34   | device command                               | Command       |
00D2DC  2               ;$fe35   | Text Mode                                    | on            | off
00D2DC  2               ;$fe36   | Lores Mode                                   | on            | off
00D2DC  2               ;$fe37   | Double Lores Mode (must be in lores first)   | on            | off
00D2DC  2               ;$fe38   | Hires Mode                                   | on            | off
00D2DC  2               ;$fe39   | Double Hires Mode (must be in hires first)   | on            | off
00D2DC  2               ;$fe3A   | 80 Col Mode (must be in text mode)           | on            | off
00D2DC  2               ;$fe3b   | Mixed Mode   (must be in lores/hires first)  | on            | off
00D2DC  2               ;$fe3c   | Quad Hires  (must be in hires first)         | on            | off
00D2DC  2               ;$fe3d   | Mono Hires  (must be in hires first)         | on            | off
00D2DC  2               
00D2DC  2               VDP_PAGE        = $fe31
00D2DC  2               VDP_TEXT_MODE   = $fe35
00D2DC  2               VDP_80COL_MODE  = $fe3A
00D2DC  2               
00D2DC  2               
00D2DC  2               
00D2DC  2               
00D2DC  2               ;__SETUPVIDEO____________________________________________________________________________
00D2DC  2               ;   Setup Video registers
00D2DC  2               ;________________________________________________________________________________________
00D2DC  2               SETUPVIDEO:
00D2DC  2  5A                   PHY
00D2DD  2  48                   PHA
00D2DE  2  08                   PHP
00D2DF  2  E2 30                ACCUMULATORINDEX8
00D2E1  2               
00D2E1  2               ;	Setup Width Parm
00D2E1  2  A9 28                LDA     #40
00D2E3  2  8F 43 03 00          STA     F:VIDEOWIDTH
00D2E7  2               
00D2E7  2  A9 01                LDA     #1
00D2E9  2  8F 31 FE 00          STA     F:VDP_PAGE
00D2ED  2               
00D2ED  2  A9 01                LDA     #1
00D2EF  2  8F 35 FE 00          STA     F:VDP_TEXT_MODE
00D2F3  2               
00D2F3  2  A9 02                LDA     #2
00D2F5  2  8F 3A FE 00          STA     F:VDP_80COL_MODE
00D2F9  2               
00D2F9  2  A9 0F                LDA     #$0F
00D2FB  2  8F 44 03 00          STA     F:DEFAULT_COLOR
00D2FF  2               
00D2FF  2  20 C3 D4             JSR     ClearScreen
00D302  2               
00D302  2  28                   PLP
00D303  2  68                   PLA
00D304  2  7A                   PLY
00D305  2  60                   RTS
00D306  2               
00D306  2               
00D306  2               ;__Cursor________________________________________________________________________________
00D306  2               ;   Draw A cursor
00D306  2               ;
00D306  2               ;________________________________________________________________________________________
00D306  2               CURSOR:
00D306  2  DA                   PHX
00D307  2  5A                   PHY
00D308  2  48                   PHA
00D309  2  08                   PHP
00D30A  2  E2 20                ACCUMULATOR8
00D30C  2  C2 10                INDEX16
00D30E  2  20 CF D3             JSR     GetVideoAddressOffset
00D311  2  BF 00 18 00          LDA     F:$1800,x
00D315  2  C9 00                CMP     #$00
00D317  2  D0 04                BNE     :+
00D319  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00D31D  2               :
00D31D  2  0A                   ASL     a
00D31E  2  0A                   ASL     a
00D31F  2  0A                   ASL     a
00D320  2  0A                   ASL     a
00D321  2  29 F0                AND     #$F0
00D323  2  8F 42 03 00          STA     F:CSRCHAR
00D327  2  BF 00 18 00          LDA     F:$1800,x
00D32B  2  4A                   LSR     a
00D32C  2  4A                   LSR     a
00D32D  2  4A                   LSR     a
00D32E  2  4A                   LSR     a
00D32F  2  29 0F                AND     #$0f
00D331  2  0F 42 03 00          ORA     F:CSRCHAR
00D335  2  9F 00 18 00          STA     F:$1800,x
00D339  2  BF 00 10 00          LDA     F:$1000,x
00D33D  2  8F 42 03 00          STA     F:CSRCHAR
00D341  2  28                   PLP
00D342  2  68                   PLA
00D343  2  7A                   PLY
00D344  2  FA                   PLX
00D345  2  60                   RTS
00D346  2               
00D346  2               ;__UnCursor______________________________________________________________________________
00D346  2               ;   Remove the cursor
00D346  2               ;
00D346  2               ;________________________________________________________________________________________
00D346  2               UNCURSOR:
00D346  2  80 BE                BRA     CURSOR
00D348  2               
00D348  2               
00D348  2               
00D348  2               
00D348  2               ;__OutVideoCh_____________________________________________________________________________
00D348  2               ;   Output char to screen
00D348  2               ;
00D348  2               ; Char in A
00D348  2               ;________________________________________________________________________________________
00D348  2               OutVideoCh:
00D348  2  DA                   PHX
00D349  2  5A                   PHY
00D34A  2  48                   PHA
00D34B  2  08                   PHP
00D34C  2  E2 30                ACCUMULATORINDEX8
00D34E  2  48                   PHA
00D34F  2  AF 30 03 00          LDA     F:CSRX
00D353  2  AA                   TAX
00D354  2  AF 31 03 00          LDA     F:CSRY
00D358  2  A8                   TAY
00D359  2  68                   PLA
00D35A  2  C9 0A                CMP     #10
00D35C  2  F0 45                BEQ     OutVideoCh_Exit
00D35E  2  C9 0D                CMP     #13
00D360  2  F0 50                BEQ     OutVideoCh_CR
00D362  2  C9 08                CMP     #8
00D364  2  D0 03 4C BB          LBEQ    OutVideoCh_BS
00D368  2  D3           
00D369  2  20 CF D3             JSR     GetVideoAddressOffset
00D36C  2  9F 00 10 00          STA     F:$1000,X
00D370  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00D374  2  9F 00 18 00          STA     F:$1800,X
00D378  2  E2 10                INDEX8
00D37A  2  AF 30 03 00          LDA     F:CSRX
00D37E  2  AA                   TAX
00D37F  2  E8                   INX
00D380  2  8A                   TXA
00D381  2  CF 43 03 00          CMP     F:VIDEOWIDTH
00D385  2  D0 1C                BNE     OutVideoCh_Exit
00D387  2  C8                   INY
00D388  2  A2 00                LDX     #0
00D38A  2  C0 18                CPY     #24
00D38C  2  D0 15                BNE     OutVideoCh_Exit
00D38E  2               OutVideoCh_CR1:
00D38E  2  A2 00                LDX     #0
00D390  2  8A                   TXA
00D391  2  8F 30 03 00          STA     F:CSRX
00D395  2  A0 17                LDY     #23
00D397  2  98                   TYA
00D398  2  8F 31 03 00          STA     F:CSRY
00D39C  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00D3A0  2  20 3C D4             JSR     ScrollUp
00D3A3  2               
00D3A3  2               OutVideoCh_Exit:
00D3A3  2  8A                   TXA
00D3A4  2  8F 30 03 00          STA     F:CSRX
00D3A8  2  98                   TYA
00D3A9  2  8F 31 03 00          STA     F:CSRY
00D3AD  2  28                   PLP
00D3AE  2  68                   PLA
00D3AF  2  7A                   PLY
00D3B0  2  FA                   PLX
00D3B1  2  60                   RTS
00D3B2  2               OutVideoCh_CR:
00D3B2  2  C8                   INY
00D3B3  2  C0 18                CPY     #24
00D3B5  2  F0 D7                BEQ     OutVideoCh_CR1
00D3B7  2  A2 00                LDX     #0
00D3B9  2  80 E8                BRA     OutVideoCh_Exit
00D3BB  2               OutVideoCh_BS:
00D3BB  2  E0 00                CPX     #0
00D3BD  2  F0 03                BEQ     OutVideoCh_BS1
00D3BF  2  CA                   DEX
00D3C0  2  80 E1                BRA     OutVideoCh_Exit
00D3C2  2               OutVideoCh_BS1:
00D3C2  2  C0 00                CPY     #0
00D3C4  2  F0 DD                BEQ     OutVideoCh_Exit
00D3C6  2  88                   DEY
00D3C7  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00D3CB  2  3A                   DEC     A
00D3CC  2  AA                   TAX
00D3CD  2  80 D4                BRA     OutVideoCh_Exit
00D3CF  2               
00D3CF  2               GetVideoAddressOffset:
00D3CF  2  48                   PHA
00D3D0  2  AF 31 03 00          LDA     F:CSRY
00D3D4  2  C2 30                ACCUMULATORINDEX16
00D3D6  2  29 FF 00             AND     #$00FF
00D3D9  2  8F 36 03 00          STA     F:TEMP
00D3DD  2  18                   CLC
00D3DE  2  0A                   ASL     A
00D3DF  2  0A                   ASL     A
00D3E0  2  0A                   ASL     A
00D3E1  2  0A                   ASL     A
00D3E2  2  0A                   ASL     A
00D3E3  2  48                   PHA
00D3E4  2  AF 36 03 00          LDA     F:TEMP
00D3E8  2  18                   CLC
00D3E9  2  0A                   ASL     A
00D3EA  2  0A                   ASL     A
00D3EB  2  0A                   ASL     A
00D3EC  2  8F 36 03 00          STA     F:TEMP
00D3F0  2  68                   PLA
00D3F1  2  18                   CLC
00D3F2  2  6F 36 03 00          ADC     F:TEMP
00D3F6  2  8F 36 03 00          STA     F:TEMP
00D3FA  2               ; if 80 columns double it.
00D3FA  2  E2 20                ACCUMULATOR8
00D3FC  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00D400  2  C9 28                CMP     #40
00D402  2  F0 0B                BEQ     :+
00D404  2  C2 20                ACCUMULATOR16
00D406  2  AF 36 03 00          LDA     F:TEMP
00D40A  2  0A                   ASL     A
00D40B  2  8F 36 03 00          STA     F:TEMP
00D40F  2               :
00D40F  2  C2 20                ACCUMULATOR16
00D411  2  AF 30 03 00          LDA     F:CSRX
00D415  2  29 FF 00             AND     #$00FF
00D418  2  18                   CLC
00D419  2  6F 36 03 00          ADC     F:TEMP
00D41D  2  AA                   TAX
00D41E  2  E2 20                ACCUMULATOR8
00D420  2  68                   PLA
00D421  2  60                   RTS
00D422  2               
00D422  2               
00D422  2               
00D422  2               
00D422  2               ;__SetColor______________________________________________________________________________
00D422  2               ;   Setup 9918 Color
00D422  2               ;
00D422  2               ; Color in A - High 4 bits background, Low 4 bits Foreground
00D422  2               ;________________________________________________________________________________________
00D422  2               SetColor:
00D422  2  08                   PHP
00D423  2  E2 30                ACCUMULATORINDEX8
00D425  2  8F 44 03 00          STA     F:DEFAULT_COLOR
00D429  2  28                   PLP
00D42A  2  60                   RTS
00D42B  2               
00D42B  2               ;__SetXY_________________________________________________________________________________
00D42B  2               ;   Setup 9918 Cursor Position
00D42B  2               ;
00D42B  2               ; Screen Coords in X,Y
00D42B  2               ;________________________________________________________________________________________
00D42B  2               SetXY:
00D42B  2  48                   PHA
00D42C  2  08                   PHP
00D42D  2  E2 30                ACCUMULATORINDEX8
00D42F  2  98                   TYA
00D430  2  8F 31 03 00          STA     F:CSRY
00D434  2  8A                   TXA
00D435  2  8F 30 03 00          STA     F:CSRX
00D439  2  28                   PLP
00D43A  2  68                   PLA
00D43B  2  60                   RTS
00D43C  2               
00D43C  2               ;__ScrollUp______________________________________________________________________________
00D43C  2               ;   Scroll the screen up one line
00D43C  2               ;
00D43C  2               ; number of positions in line in A
00D43C  2               
00D43C  2               ;________________________________________________________________________________________
00D43C  2               ScrollUp:
00D43C  2  48                   PHA
00D43D  2  DA                   PHX
00D43E  2  5A                   PHY
00D43F  2  08                   PHP
00D440  2  8B                   PHB
00D441  2  DA A2 00 DA          SETBANK 0
00D445  2  AB FA        
00D447  2               ; if 80 columns double it.
00D447  2  E2 20                ACCUMULATOR8
00D449  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00D44D  2  C9 28                CMP     #40
00D44F  2  F0 34                BEQ     ScrollUp_40
00D451  2               
00D451  2  C2 30                ACCUMULATORINDEX16
00D453  2  A9 29 07             LDA     #$0729          ; SCROLL SCREEN MEMORY
00D456  2  A2 50 10             LDX     #$1050
00D459  2  A0 00 10             LDY     #$1000
00D45C  2  54 00 00             MVN     #$00,#$00
00D45F  2               
00D45F  2  A9 29 07             LDA     #$0729          ; SCROLL COLOR MEMORY
00D462  2  A2 50 18             LDX     #$1850
00D465  2  A0 00 18             LDY     #$1800
00D468  2  54 00 00             MVN     #$00,#$00
00D46B  2               
00D46B  2  E2 30                ACCUMULATORINDEX8
00D46D  2  A2 00                LDX     #$00            ; CLEAR BOTTOM LINE
00D46F  2               
00D46F  2               ScrollUpLoop80:
00D46F  2  A9 20                LDA     #32
00D471  2  9F 30 17 00          STA     F:$1730,X
00D475  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00D479  2  9F 30 1F 00          STA     F:$1F30,X
00D47D  2  E8                   INX
00D47E  2  E0 50                CPX     #80
00D480  2  D0 ED                BNE     ScrollUpLoop80
00D482  2  4C B6 D4             JMP     ScrollUpEnd
00D485  2               
00D485  2               ScrollUp_40:
00D485  2  C2 30                ACCUMULATORINDEX16
00D487  2               
00D487  2  A9 97 03             LDA     #$0397          ; SCROLL SCREEN MEMORY
00D48A  2  A2 28 10             LDX     #$1028
00D48D  2  A0 00 10             LDY     #$1000
00D490  2  54 00 00             MVN     #$00,#$00
00D493  2               
00D493  2  A9 97 03             LDA     #$0397          ; SCROLL COLOR MEMORY
00D496  2  A2 28 18             LDX     #$1828
00D499  2  A0 00 18             LDY     #$1800
00D49C  2  54 00 00             MVN     #$00,#$00
00D49F  2               
00D49F  2  E2 30                ACCUMULATORINDEX8
00D4A1  2  A2 00                LDX     #$00            ; CLEAR BOTTOM LINE
00D4A3  2               ScrollUpLoop40:
00D4A3  2  A9 20                LDA     #32
00D4A5  2  9F 98 13 00          STA     F:$1398,X
00D4A9  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00D4AD  2  9F 98 1B 00          STA     F:$1B98,X
00D4B1  2  E8                   INX
00D4B2  2  E0 28                CPX     #40
00D4B4  2  D0 ED                BNE     ScrollUpLoop40
00D4B6  2               ScrollUpEnd:
00D4B6  2  A2 00                LDX     #0
00D4B8  2  A0 17                LDY     #23
00D4BA  2  20 2B D4             JSR     SetXY
00D4BD  2  AB                   PLB
00D4BE  2  28                   PLP
00D4BF  2  7A                   PLY
00D4C0  2  FA                   PLX
00D4C1  2  68                   PLA
00D4C2  2  60                   RTS
00D4C3  2               
00D4C3  2               
00D4C3  2               ;__ClearScreen___________________________________________________________________________
00D4C3  2               ;  clear Screen
00D4C3  2               ;________________________________________________________________________________________
00D4C3  2               ClearScreen:
00D4C3  2  5A                   PHY
00D4C4  2  48                   PHA
00D4C5  2  08                   PHP
00D4C6  2  C2 10                INDEX16
00D4C8  2  E2 20                ACCUMULATOR8
00D4CA  2               
00D4CA  2               
00D4CA  2               ; Now let's clear
00D4CA  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00D4CE  2  C9 50                CMP     #80
00D4D0  2  F0 05                BEQ     :+
00D4D2  2  A2 C1 03             LDX     #$03C1
00D4D5  2  80 03                BRA     :++
00D4D7  2               :
00D4D7  2  A2 80 07             LDX     #$0780
00D4DA  2               :
00D4DA  2  A9 20                LDA     #32
00D4DC  2               ClearScreen1:
00D4DC  2  CA                   DEX
00D4DD  2  9F 00 10 00          STA     F:$1000,X
00D4E1  2  D0 F9                BNE     ClearScreen1
00D4E3  2               
00D4E3  2  AF 43 03 00          LDA     F:VIDEOWIDTH
00D4E7  2  C9 50                CMP     #80
00D4E9  2  F0 05                BEQ     :+
00D4EB  2  A2 C1 03             LDX     #$03C1
00D4EE  2  80 03                BRA     :++
00D4F0  2               :
00D4F0  2  A2 80 07             LDX     #$0780
00D4F3  2               :
00D4F3  2  AF 44 03 00          LDA     F:DEFAULT_COLOR
00D4F7  2               ClearScreen2:
00D4F7  2  CA                   DEX
00D4F8  2  9F 00 18 00          STA     F:$1800,X
00D4FC  2  D0 F9                BNE     ClearScreen2
00D4FE  2               
00D4FE  2               
00D4FE  2  E2 10                INDEX8
00D500  2  A2 00                LDX     #0
00D502  2  9B                   TXY
00D503  2  20 2B D4             JSR     SetXY
00D506  2  28                   PLP
00D507  2  68                   PLA
00D508  2  7A                   PLY
00D509  2  60                   RTS
00D50A  2               
00D50A  2               
00D50A  2               
00D50A  2               
00D50A  2               ;___________________________________________________________________________________________________
00D50A  2               ; Initialize Keyboard
00D50A  2               ;___________________________________________________________________________________________________
00D50A  2               
00D50A  2               INITKEYBOARD:
00D50A  2  08                   PHP
00D50B  2  E2 30                ACCUMULATORINDEX8
00D50D  2  48                   PHA
00D50E  2  A9 F0                LDA     #$F0
00D510  2  8F 32 03 00          STA     F:LEDS
00D514  2  A9 00                LDA     #00
00D516  2  8D 33 03             STA     KeyLock
00D519  2               
00D519  2  A9 20                LDA     #$20
00D51B  2  8F 32 03 00          STA     F:LEDS
00D51F  2  8F 20 FE 00          STA     F:via2regb
00D523  2  A9 48                LDA     #72
00D525  2  8F 33 03 00          STA     F:KeyLock
00D529  2               
00D529  2  68                   PLA
00D52A  2  28                   PLP
00D52B  2  60                   RTS
00D52C  2               
00D52C  2               ;___________________________________________________________________________________________________
00D52C  2               ; Get a key from Keyboard
00D52C  2               ;
00D52C  2               ; Returns Key in A
00D52C  2               ;___________________________________________________________________________________________________
00D52C  2               
00D52C  2               GetKey:
00D52C  2  08                   PHP
00D52D  2  E2 30                ACCUMULATORINDEX8
00D52F  2  DA                   PHX
00D530  2  5A                   PHY
00D531  2               
00D531  2               GetKey_Loop:
00D531  2  20 9C D7             JSR     kbdDelay
00D534  2  20 65 D5             JSR     ScanKeyboard
00D537  2  C9 FF                CMP     #$FF
00D539  2  F0 F6                BEQ     GetKey_Loop
00D53B  2  8F 37 03 00          STA     F:TEMP+1
00D53F  2  20 E7 D5             JSR     ModifierKeyCheck
00D542  2  8F 34 03 00          STA     F:ScannedKey
00D546  2               GetKey_loop1:
00D546  2  20 9C D7             JSR     kbdDelay
00D549  2  20 65 D5             JSR     ScanKeyboard
00D54C  2  CF 37 03 00          CMP     F:TEMP+1
00D550  2  F0 F4                BEQ     GetKey_loop1
00D552  2               
00D552  2  AF 34 03 00          LDA     F:ScannedKey
00D556  2  20 26 D6             JSR     DecodeKeyboard
00D559  2               
00D559  2  C9 FF                CMP     #$FF
00D55B  2  F0 D4                BEQ     GetKey_Loop
00D55D  2  C9 00                CMP     #$00
00D55F  2  F0 D0                BEQ     GetKey_Loop
00D561  2  7A                   PLY
00D562  2  FA                   PLX
00D563  2  28                   PLP
00D564  2  60                   RTS
00D565  2               
00D565  2               
00D565  2               ;___________________________________________________________________________________________________
00D565  2               ; Scan Keyboard
00D565  2               ;
00D565  2               ; Returns Scancode in A
00D565  2               ;
00D565  2               ;___________________________________________________________________________________________________
00D565  2               ScanKeyboard:
00D565  2  08                   PHP
00D566  2  E2 30                ACCUMULATORINDEX8
00D568  2  DA                   PHX
00D569  2  5A                   PHY
00D56A  2  A9 FF                LDA     #$ff            ; SET OUTPUT DIRECTION
00D56C  2  8F 22 FE 00          STA     F:via2ddrb      ; write value
00D570  2  A9 00                LDA     #$00            ; SET INPUT DIRECTION
00D572  2  8F 23 FE 00          STA     F:via2ddra      ; write value
00D576  2               
00D576  2  A0 00                LDY     #$00            ; SET ROW AND LEDS
00D578  2               outerScanLoop:
00D578  2  C0 09                CPY     #09
00D57A  2  F0 46                BEQ     KeyNotFound
00D57C  2  98                   TYA
00D57D  2  8F 36 03 00          STA     F:TEMP
00D581  2  AF 32 03 00          LDA     F:LEDS
00D585  2  0F 36 03 00          ORA     F:TEMP
00D589  2  8F 20 FE 00          STA     F:via2regb      ; write value
00D58D  2               innerScanLoop:
00D58D  2  AF 21 FE 00          LDA     F:via2rega      ; read value
00D591  2  A2 00                LDX     #$00
00D593  2  C9 FF                CMP     #$FF            ;NO KEY PRESSED
00D595  2  F0 27                BEQ     exitInnerScanLoop
00D597  2  C9 FE                CMP     #$FE            ; COL 1 key Pressed
00D599  2  F0 2D                BEQ     keyFound
00D59B  2  E8                   INX
00D59C  2  C9 FD                CMP     #$FD            ; COL 2 key Pressed
00D59E  2  F0 28                BEQ     keyFound
00D5A0  2  E8                   INX
00D5A1  2  C9 FB                CMP     #$FB            ; COL 3 key Pressed
00D5A3  2  F0 23                BEQ     keyFound
00D5A5  2  E8                   INX
00D5A6  2  C9 F7                CMP     #$F7            ; COL 4 key Pressed
00D5A8  2  F0 1E                BEQ     keyFound
00D5AA  2  E8                   INX
00D5AB  2  C9 EF                CMP     #$EF            ; COL 5 key Pressed
00D5AD  2  F0 19                BEQ     keyFound
00D5AF  2  E8                   INX
00D5B0  2  C9 DF                CMP     #$DF            ; COL 6 key Pressed
00D5B2  2  F0 14                BEQ     keyFound
00D5B4  2  E8                   INX
00D5B5  2  C9 BF                CMP     #$BF            ; COL 7 key Pressed
00D5B7  2  F0 0F                BEQ     keyFound
00D5B9  2  E8                   INX
00D5BA  2  C9 7F                CMP     #$7F            ; COL 8 key Pressed
00D5BC  2  F0 0A                BEQ     keyFound
00D5BE  2               exitInnerScanLoop:
00D5BE  2  C8                   INY
00D5BF  2  4C 78 D5             JMP     outerScanLoop
00D5C2  2               KeyNotFound:
00D5C2  2  A9 FF                LDA     #$FF
00D5C4  2  7A                   PLY
00D5C5  2  FA                   PLX
00D5C6  2  28                   PLP
00D5C7  2  60                   RTS
00D5C8  2               keyFound:
00D5C8  2  8A                   TXA
00D5C9  2  8F 36 03 00          STA     F:TEMP
00D5CD  2  98                   TYA
00D5CE  2  18                   CLC
00D5CF  2  0A                   ASL
00D5D0  2  0A                   ASL
00D5D1  2  0A                   ASL
00D5D2  2  18                   CLC
00D5D3  2  6F 36 03 00          ADC     F:TEMP
00D5D7  2  C9 30                CMP     #48
00D5D9  2  F0 E7                BEQ     KeyNotFound
00D5DB  2  C9 31                CMP     #49
00D5DD  2  F0 E3                BEQ     KeyNotFound
00D5DF  2  C9 32                CMP     #50
00D5E1  2  F0 DF                BEQ     KeyNotFound
00D5E3  2  7A                   PLY
00D5E4  2  FA                   PLX
00D5E5  2  28                   PLP
00D5E6  2  60                   RTS
00D5E7  2               
00D5E7  2               ;___________________________________________________________________________________________________
00D5E7  2               ; Check for Modifier keys (Shift, Control, Graph/Alt)
00D5E7  2               ; Requires Scancode in A
00D5E7  2               ; Returns modified Scancode in A
00D5E7  2               ;
00D5E7  2               ;___________________________________________________________________________________________________
00D5E7  2               ModifierKeyCheck:
00D5E7  2  08                   PHP
00D5E8  2  E2 30                ACCUMULATORINDEX8
00D5EA  2  48                   PHA
00D5EB  2               ; Check for Modifiers
00D5EB  2  AF 32 03 00          LDA     F:LEDS
00D5EF  2  09 06                ORA     #06
00D5F1  2  8F 20 FE 00          STA     F:via2regb      ; write value
00D5F5  2  AF 21 FE 00          LDA     F:via2rega      ; read value
00D5F9  2  C9 FF                CMP     #$FF            ;NO KEY PRESSED
00D5FB  2  F0 26                BEQ     exit_Scan
00D5FD  2  C9 FE                CMP     #$FE            ; COL 1 key Pressed
00D5FF  2  D0 06                BNE     check_Ctrl
00D601  2  68                   PLA
00D602  2  18                   CLC
00D603  2  69 48                ADC     #72
00D605  2  28                   PLP
00D606  2  60                   RTS
00D607  2               check_Ctrl:
00D607  2  C9 FD                CMP     #$FD            ; COL 2 key Pressed
00D609  2  D0 0A                BNE     check_Graph
00D60B  2  68                   PLA
00D60C  2  C9 30                CMP     #48
00D60E  2  B0 03                BCS     skip_Ctrl
00D610  2  18                   CLC
00D611  2  69 90                ADC     #144
00D613  2               skip_Ctrl:
00D613  2  28                   PLP
00D614  2  60                   RTS
00D615  2               check_Graph:
00D615  2  C9 FB                CMP     #$FB            ; COL 3 key Pressed
00D617  2  D0 0A                BNE     exit_Scan
00D619  2               check_Graph1:
00D619  2  68                   PLA
00D61A  2  C9 30                CMP     #48
00D61C  2  B0 F5                BCS     skip_Ctrl
00D61E  2  18                   CLC
00D61F  2  69 C0                ADC     #192
00D621  2  28                   PLP
00D622  2  60                   RTS
00D623  2               exit_Scan:
00D623  2  68                   PLA
00D624  2  28                   PLP
00D625  2  60                   RTS
00D626  2               
00D626  2               
00D626  2               ;___________________________________________________________________________________________________
00D626  2               ; Decode Keyboard
00D626  2               ;
00D626  2               ; Scancode in A
00D626  2               ; Returns Decoded Ascii in A
00D626  2               ;
00D626  2               ;___________________________________________________________________________________________________
00D626  2               DecodeKeyboard:
00D626  2  08                   PHP
00D627  2  E2 30                ACCUMULATORINDEX8
00D629  2  DA                   PHX
00D62A  2  C9 33                CMP     #51             ; is CapsLock
00D62C  2  F0 19                BEQ     is_CapsLock
00D62E  2  C9 34                CMP     #52             ; is graphLock?
00D630  2  F0 55                BEQ     is_GraphLock
00D632  2  C9 30                CMP     #48
00D634  2  B0 09                BCS     skip_Lock
00D636  2  C9 16                CMP     #22
00D638  2  90 05                BCC     skip_Lock
00D63A  2  18                   CLC
00D63B  2  6F 33 03 00          ADC     F:KeyLock
00D63F  2               skip_Lock:
00D63F  2  AA                   TAX
00D640  2  BF AC D6 00          LDA     F:DecodeTable,X
00D644  2  FA                   PLX
00D645  2  28                   PLP
00D646  2  60                   RTS
00D647  2               is_CapsLock:
00D647  2               ; check for toggle and set LEDs
00D647  2  AF 32 03 00          LDA     F:LEDS
00D64B  2  29 10                AND     #$10
00D64D  2  C9 00                CMP     #$00
00D64F  2  F0 1B                BEQ     Cap_off
00D651  2               CapsLockOn:
00D651  2  AF 32 03 00          LDA     F:LEDS
00D655  2  29 C0                AND     #$C0
00D657  2  09 20                ORA     #$20
00D659  2  8F 32 03 00          STA     F:LEDS
00D65D  2  8F 20 FE 00          STA     F:via2regb      ; write value
00D661  2  A9 48                LDA     #72
00D663  2  8F 33 03 00          STA     F:KeyLock
00D667  2  A9 FF                LDA     #$FF
00D669  2  FA                   PLX
00D66A  2  28                   PLP
00D66B  2  60                   RTS
00D66C  2               Cap_off:
00D66C  2  AF 32 03 00          LDA     F:LEDS
00D670  2  29 C0                AND     #$C0
00D672  2  09 30                ORA     #$30
00D674  2  8F 32 03 00          STA     F:LEDS
00D678  2  8F 20 FE 00          STA     F:via2regb      ; write value
00D67C  2  A9 00                LDA     #0
00D67E  2  8F 33 03 00          STA     F:KeyLock
00D682  2  A9 FF                LDA     #$FF
00D684  2  FA                   PLX
00D685  2  28                   PLP
00D686  2  60                   RTS
00D687  2               is_GraphLock:
00D687  2               ; check for toggle and set LEDs
00D687  2  AF 32 03 00          LDA     F:LEDS
00D68B  2  29 20                AND     #$20
00D68D  2  C9 00                CMP     #$00
00D68F  2  F0 DB                BEQ     Cap_off
00D691  2  AF 32 03 00          LDA     F:LEDS
00D695  2  29 C0                AND     #$C0
00D697  2  09 10                ORA     #$10
00D699  2  8F 32 03 00          STA     F:LEDS
00D69D  2  8F 20 FE 00          STA     F:via2regb      ; write value
00D6A1  2  A9 C0                LDA     #192
00D6A3  2  8F 33 03 00          STA     F:KeyLock
00D6A7  2  A9 FF                LDA     #$FF
00D6A9  2  FA                   PLX
00D6AA  2  28                   PLP
00D6AB  2  60                   RTS
00D6AC  2               
00D6AC  2               DecodeTable:
00D6AC  2  30 31 32 33          .BYTE   '0','1','2','3','4','5','6','7'; 0
00D6B0  2  34 35 36 37  
00D6B4  2  38 39 2D 3D          .BYTE   '8','9','-','=','\','[',']',';'; 8
00D6B8  2  5C 5B 5D 3B  
00D6BC  2  27 7E 2C 2E          .BYTE   39,'~',',','.','/',00,'a','b'; 16
00D6C0  2  2F 00 61 62  
00D6C4  2  63 64 65 66          .BYTE   'c','d','e','f','g','h','i','j'; 24
00D6C8  2  67 68 69 6A  
00D6CC  2  6B 6C 6D 6E          .BYTE   'k','l','m','n','o','p','q','r'; 32
00D6D0  2  6F 70 71 72  
00D6D4  2  73 74 75 76          .BYTE   's','t','u','v','w','x','y','z'; 40
00D6D8  2  77 78 79 7A  
00D6DC  2  FF FF FF FF          .BYTE   $FF,$FF,$FF,$FF,$FF,11,12,14; 48
00D6E0  2  FF 0B 0C 0E  
00D6E4  2  0F 10 1B 09          .BYTE   15,16,27,09,03,08,17,13; 56
00D6E8  2  03 08 11 0D  
00D6EC  2  20 1C 1D 1E          .BYTE   32,28,29,30,31,01,02,04; 64
00D6F0  2  1F 01 02 04  
00D6F4  2               
00D6F4  2  29 21 40 23          .BYTE   ')','!','@','#','$','%','^','&'; 72  ; Shift
00D6F8  2  24 25 5E 26  
00D6FC  2  2A 28 5F 2B          .BYTE   '*','(','_','+','|','{','}',':'; 80
00D700  2  7C 7B 7D 3A  
00D704  2  22 7E 3C 3E          .BYTE   34,'~','<','>','?',00,'A','B'; 88
00D708  2  3F 00 41 42  
00D70C  2  43 44 45 46          .BYTE   'C','D','E','F','G','H','I','J'; 96
00D710  2  47 48 49 4A  
00D714  2  4B 4C 4D 4E          .BYTE   'K','L','M','N','O','P','Q','R'; 104
00D718  2  4F 50 51 52  
00D71C  2  53 54 55 56          .BYTE   'S','T','U','V','W','X','Y','Z'; 112
00D720  2  57 58 59 5A  
00D724  2  FF FF FF FF          .BYTE   $FF,$FF,$FF,$FF,$FF,18,19,20; 120
00D728  2  FF 12 13 14  
00D72C  2  15 16 1B 09          .BYTE   21,22,27,09,03,08,23,13; 128
00D730  2  03 08 17 0D  
00D734  2  20 1C 1D 1E          .BYTE   32,28,29,30,31,01,02,04; 136
00D738  2  1F 01 02 04  
00D73C  2               
00D73C  2  30 31 32 33          .BYTE   '0','1','2','3','4','5','6','7'; 144 ; Control
00D740  2  34 35 36 37  
00D744  2  38 39 EA E1          .BYTE   '8','9',234,225,224,248,249,000; 152
00D748  2  E0 F8 F9 00  
00D74C  2  FA FB FE B0          .BYTE   250,251,254,176,177,00,01,02; 160
00D750  2  B1 00 01 02  
00D754  2  03 04 05 06          .BYTE   03,04,05,06,07,08,09,10; 168
00D758  2  07 08 09 0A  
00D75C  2  0B 0C 0D 0E          .BYTE   11,12,13,14,15,16,17,18; 176
00D760  2  0F 10 11 12  
00D764  2  13 14 15 16          .BYTE   19,20,21,22,23,24,25,26; 184
00D768  2  17 18 19 1A  
00D76C  2               
00D76C  2  00 B2 B3 B4          .BYTE   000,178,179,180,181,182,183,184; 192 ; Graph
00D770  2  B5 B6 B7 B8  
00D774  2  B9 BA BB BC          .BYTE   185,186,187,188,189,190,191,192; 200
00D778  2  BD BE BF C0  
00D77C  2  C1 C2 C3 C4          .BYTE   193,194,195,196,197,198,199,200; 208
00D780  2  C5 C6 C7 C8  
00D784  2  C9 CA CB CC          .BYTE   201,202,203,204,205,206,207,208; 216
00D788  2  CD CE CF D0  
00D78C  2  D1 D2 D3 D4          .BYTE   209,210,211,212,213,214,215,216; 224
00D790  2  D5 D6 D7 D8  
00D794  2  D9 DA DB DC          .BYTE   217,218,219,220,221,222,223,167; 232
00D798  2  DD DE DF A7  
00D79C  2               
00D79C  2               
00D79C  2               
00D79C  2               
00D79C  2               ;***********************************************************************************;
00D79C  2               ;
00D79C  2               ;  delay
00D79C  2               kbdDelay:
00D79C  2  08                   PHP
00D79D  2  E2 30                ACCUMULATORINDEX8
00D79F  2  48                   PHA
00D7A0  2  DA                   PHX
00D7A1  2  A2 40                LDX     #KBD_DELAY
00D7A3  2  A9 40                LDA     #$40            ; set for 1024 cycles (MHZ)
00D7A5  2  8F 29 FE 00          STA     F:via2t2ch      ; set VIA 2 T2C_h
00D7A9  2               kbdDelay_a:
00D7A9  2  AF 2D FE 00          LDA     F:via2ifr       ; get VIA 2 IFR
00D7AD  2  29 20                AND     #$20            ; mask T2 interrupt
00D7AF  2  F0 F8                BEQ     kbdDelay_a      ; loop until T2 interrupt
00D7B1  2  CA                   DEX
00D7B2  2  D0 F5                BNE     kbdDelay_a
00D7B4  2  FA                   PLX
00D7B5  2  68                   PLA
00D7B6  2  28                   PLP
00D7B7  2  60                   RTS
00D7B8  2               ;________________________________________________________________________________________
00D7B8  2               
00D7B8  1                       .INCLUDE "iec.asm"
00D7B8  2                       .A8
00D7B8  2                       .I8
00D7B8  2               
00D7B8  2               ;__IEC_____________________________________________________________________________________________
00D7B8  2               ;
00D7B8  2               ;	IEC SERIAL DRIVER
00D7B8  2               ;   ORIGINALLY FROM COMMODORE 64 KERNAL
00D7B8  2               ;	CONVERTED FOR 65816 BY: DAN WERNER -- 4/6/2021
00D7B8  2               ;
00D7B8  2               ;__________________________________________________________________________________________________
00D7B8  2               
00D7B8  2               ;***********************************************************************************;
00D7B8  2               ;
00D7B8  2               ; set serial data out high
00D7B8  2               
00D7B8  2               LAB_E4A0:
00D7B8  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00D7BB  2  29 DF                AND     #$DF            ; set CB2 low, serial data out high
00D7BD  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00D7C0  2  60                   RTS
00D7C1  2               
00D7C1  2               
00D7C1  2               ;***********************************************************************************;
00D7C1  2               ;
00D7C1  2               ; set serial data out low
00D7C1  2               
00D7C1  2               LAB_E4A9:
00D7C1  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00D7C4  2  09 20                ORA     #$20            ; set CB2 high, serial data out low
00D7C6  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00D7C9  2  60                   RTS
00D7CA  2               
00D7CA  2               
00D7CA  2               ;***********************************************************************************;
00D7CA  2               ;
00D7CA  2               ; get serial clock status
00D7CA  2               
00D7CA  2               LAB_E4B2:
00D7CA  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00D7CD  2  CD 1F FE             CMP     via1ora         ; compare with self
00D7D0  2  D0 F8                BNE     LAB_E4B2        ; loop if changing
00D7D2  2               
00D7D2  2  4A                   LSR                     ; shift serial clock to Cb
00D7D3  2  60                   RTS
00D7D4  2               
00D7D4  2               
00D7D4  2               ;***********************************************************************************;
00D7D4  2               ;
00D7D4  2               ; command a serial bus device to TALK
00D7D4  2               
00D7D4  2               ; to use this routine the accumulator must first be loaded with a device number
00D7D4  2               ; between 4 and 30. When called this routine converts this device number to a talk
00D7D4  2               ; address. Then this data is transmitted as a command on the Serial bus.
00D7D4  2               
00D7D4  2               LAB_EE14:
00D7D4  2  09 40                ORA     #$40            ; OR with the TALK command
00D7D6  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_2009
00D7D7  2               
00D7D7  2               
00D7D7  2               ;***********************************************************************************;
00D7D7  2               ;
00D7D7  2               ; command devices on the serial bus to LISTEN
00D7D7  2               
00D7D7  2               ; this routine will command a device on the serial bus to receive data. The
00D7D7  2               ; accumulator must be loaded with a device number between 4 and 31 before calling
00D7D7  2               ; this routine. LISTEN convert this to a listen address then transmit this data as
00D7D7  2               ; a command on the serial bus. The specified device will then go into listen mode
00D7D7  2               ; and be ready to accept information.
00D7D7  2               
00D7D7  2               LAB_EE17:
00D7D7  2  09 20                ORA     #$20            ; OR with the LISTEN command
00D7D9  2  20 10 DC             JSR     LAB_F160        ; check RS232 bus idle, setup timers
00D7DC  2               
00D7DC  2               ;***********************************************************************************;
00D7DC  2               ;
00D7DC  2               ; send control character
00D7DC  2               
00D7DC  2               LAB_EE1C:
00D7DC  2  48                   PHA                     ; save device address
00D7DD  2  2C 12 03             BIT     IECDCF          ; test deferred character flag
00D7E0  2  10 0D                BPL     LAB_EE2B        ; branch if no defered character
00D7E2  2               
00D7E2  2  38                   SEC                     ; flag EOI
00D7E3  2  6E 14 03             ROR     IECBCI          ; rotate into EOI flag byte
00D7E6  2  20 0E D8             JSR     LAB_EE49        ; Tx byte on serial bus
00D7E9  2               
00D7E9  2  4E 12 03             LSR     IECDCF          ; clear deferred character flag
00D7EC  2  4E 14 03             LSR     IECBCI          ; clear EOI flag
00D7EF  2               LAB_EE2B:
00D7EF  2               
00D7EF  2  68                   PLA                     ; restore device address
00D7F0  2  8D 13 03             STA     IECDC           ; save as serial defered character
00D7F3  2  20 B8 D7             JSR     LAB_E4A0        ; set serial data out high
00D7F6  2  C9 3F                CMP     #$3F            ; compare read byte with $3F
00D7F8  2  D0 03                BNE     LAB_EE38        ; branch if not $3F, this branch will always be taken as
00D7FA  2               ; after VIA 2's PCR is read it is ANDed with $DF, so the
00D7FA  2               ; result can never be $3F
00D7FA  2               
00D7FA  2  20 6A D9             JSR     LAB_EF84        ; set serial clock high
00D7FD  2               
00D7FD  2               LAB_EE38:
00D7FD  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00D800  2  09 80                ORA     #$80            ; set serial ATN low
00D802  2  8D 1F FE             STA     via1ora         ; set VIA 1 DRA, no handshake
00D805  2               
00D805  2               
00D805  2               ;***********************************************************************************;
00D805  2               ;
00D805  2               ; if the code drops through to here the serial clock is low and the serial data has been
00D805  2               ; released so the following code will have no effect apart from delaying the first byte
00D805  2               ; by 1ms
00D805  2               
00D805  2               ;## set clk/data, wait and Tx byte on serial bus
00D805  2               LAB_EE40:
00D805  2  20 73 D9             JSR     LAB_EF8D        ; set serial clock low
00D808  2  20 B8 D7             JSR     LAB_E4A0        ; set serial data out high
00D80B  2  20 7C D9             JSR     LAB_EF96        ; 1ms delay
00D80E  2               
00D80E  2               ;***********************************************************************************;
00D80E  2               ;
00D80E  2               ; Tx byte on serial bus
00D80E  2               
00D80E  2               LAB_EE49:
00D80E  2  78                   SEI                     ; disable interrupts
00D80F  2  20 B8 D7             JSR     LAB_E4A0        ; set serial data out high
00D812  2  20 CA D7             JSR     LAB_E4B2        ; get serial clock status
00D815  2  4A                   LSR                     ; shift serial data to Cb
00D816  2  B0 6E                BCS     LAB_EEB4        ; if data high do device not present
00D818  2  20 6A D9             JSR     LAB_EF84        ; set serial clock high
00D81B  2  2C 14 03             BIT     IECBCI          ; test EOI flag
00D81E  2  10 0C                BPL     LAB_EE66        ; branch if not EOI
00D820  2               ; I think this is the EOI sequence so the serial clock has been released and the serial
00D820  2               ; data is being held low by the peripherals. first up wait for the serial data to rise
00D820  2               
00D820  2               LAB_EE5A:
00D820  2  20 CA D7             JSR     LAB_E4B2        ; get serial clock status
00D823  2  4A                   LSR                     ; shift serial data to Cb
00D824  2  90 FA                BCC     LAB_EE5A        ; loop if data low
00D826  2               
00D826  2               ; now the data is high, EOI is signalled by waiting for at least 200us without pulling
00D826  2               ; the serial clock line low again. the listener should respond by pulling the serial
00D826  2               ; data line low
00D826  2               
00D826  2               LAB_EE60:
00D826  2  20 CA D7             JSR     LAB_E4B2        ; get serial clock status
00D829  2  4A                   LSR                     ; shift serial data to Cb
00D82A  2  B0 FA                BCS     LAB_EE60        ; loop if data high
00D82C  2               
00D82C  2               ; the serial data has gone low ending the EOI sequence, now just wait for the serial
00D82C  2               ; data line to go high again or, if this isn't an EOI sequence, just wait for the serial
00D82C  2               ; data to go high the first time
00D82C  2               
00D82C  2               LAB_EE66:
00D82C  2  20 CA D7             JSR     LAB_E4B2        ; get serial clock status
00D82F  2  4A                   LSR                     ; shift serial data to Cb
00D830  2  90 FA                BCC     LAB_EE66        ; loop if data low
00D832  2               
00D832  2               ; serial data is high now pull the clock low, preferably within 60us
00D832  2               
00D832  2  20 73 D9             JSR     LAB_EF8D        ; set serial clock low
00D835  2               
00D835  2               ; now the Vic has to send the eight bits, LSB first. first it sets the serial data line
00D835  2               ; to reflect the bit in the byte, then it sets the serial clock to high. The serial
00D835  2               ; clock is left high for 26 cycles, 23us on a PAL Vic, before it is again pulled low
00D835  2               ; and the serial data is allowed high again
00D835  2               
00D835  2  A9 08                LDA     #$08            ; eight bits to do
00D837  2  8D 15 03             STA     IECBTC          ; set serial bus bit count
00D83A  2               LAB_EE73:
00D83A  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00D83D  2  CD 1F FE             CMP     via1ora         ; compare with self
00D840  2  D0 F8                BNE     LAB_EE73        ; loop if changing
00D842  2               
00D842  2  4A                   LSR                     ; serial clock to carry
00D843  2  4A                   LSR                     ; serial data to carry
00D844  2  90 43                BCC     LAB_EEB7        ; if data low do timeout on serial bus
00D846  2  20 7C DC             JSR     IEC_DELAY
00D849  2  6E 13 03             ROR     IECDC           ; rotate transmit byte
00D84C  2  B0 05                BCS     LAB_EE88        ; branch if bit = 1
00D84E  2               
00D84E  2  20 C1 D7             JSR     LAB_E4A9        ; else set serial data out low
00D851  2  D0 03                BNE     LAB_EE8B        ; branch always
00D853  2               
00D853  2               LAB_EE88:
00D853  2  20 B8 D7             JSR     LAB_E4A0        ; set serial data out high
00D856  2               LAB_EE8B:
00D856  2  20 7C DC             JSR     IEC_DELAY
00D859  2  20 6A D9             JSR     LAB_EF84        ; set serial clock high
00D85C  2  EA                   NOP                     ; waste ..
00D85D  2  EA                   NOP                     ; .. a ..
00D85E  2  EA                   NOP                     ; .. cycle ..
00D85F  2  EA                   NOP                     ; .. or two
00D860  2  20 7C DC             JSR     IEC_DELAY
00D863  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00D866  2  29 DF                AND     #$DF            ; set CB2 low, serial data out high
00D868  2  09 02                ORA     #$02            ; set CA2 high, serial clock out low
00D86A  2  8D 2C FE             STA     via2pcr         ; save VIA 2 PCR
00D86D  2  CE 15 03             DEC     IECBTC          ; decrement serial bus bit count
00D870  2  D0 C8                BNE     LAB_EE73        ; loop if not all done
00D872  2               
00D872  2               ; now all eight bits have been sent it's up to the peripheral to signal the byte was
00D872  2               ; received by pulling the serial data low. this should be done within one milisecond
00D872  2               
00D872  2  A9 40                LDA     #$40            ; wait for up to about 1ms (MHZ)
00D874  2  8D 29 FE             STA     via2t2ch        ; set VIA 2 T2C_h
00D877  2               LAB_EEA5:
00D877  2  AD 2D FE             LDA     via2ifr         ; get VIA 2 IFR
00D87A  2  29 20                AND     #$20            ; mask T2 interrupt
00D87C  2  D0 0B                BNE     LAB_EEB7        ; if T2 interrupt do timeout on serial bus
00D87E  2               
00D87E  2  20 CA D7             JSR     LAB_E4B2        ; get serial clock status
00D881  2  4A                   LSR                     ; shift serial data to Cb
00D882  2  B0 F3                BCS     LAB_EEA5        ; if data high go wait some more
00D884  2               
00D884  2  58                   CLI                     ; enable interrupts
00D885  2  60                   RTS
00D886  2               
00D886  2               
00D886  2               ;***********************************************************************************;
00D886  2               ;
00D886  2               ; device not present
00D886  2               
00D886  2               LAB_EEB4:
00D886  2  A9 80                LDA     #$80            ; error $80, device not present
00D888  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_03A9
00D889  2               
00D889  2               
00D889  2               ;***********************************************************************************;
00D889  2               ;
00D889  2               ; timeout on serial bus
00D889  2               
00D889  2               LAB_EEB7:
00D889  2  A9 03                LDA     #$03            ; error $03, write timeout
00D88B  2               LAB_EEB9:
00D88B  2  20 89 D9             JSR     LAB_FE6A        ; OR into serial status byte
00D88E  2  58                   CLI                     ; enable interrupts
00D88F  2  18                   CLC                     ; clear for branch
00D890  2  90 55                BCC     LAB_EF09        ; ATN high, delay, clock high then data high, branch always
00D892  2               
00D892  2               
00D892  2               ;***********************************************************************************;
00D892  2               ;
00D892  2               ; send secondary address after LISTEN
00D892  2               
00D892  2               ; this routine is used to send a secondary address to an I/O device after a call to
00D892  2               ; the LISTEN routine is made and the device commanded to LISTEN. The routine cannot
00D892  2               ; be used to send a secondary address after a call to the TALK routine.
00D892  2               
00D892  2               ; A secondary address is usually used to give set-up information to a device before
00D892  2               ; I/O operations begin.
00D892  2               
00D892  2               ; When a secondary address is to be sent to a device on the serial bus the address
00D892  2               ; must first be ORed with $60.
00D892  2               
00D892  2               LAB_EEC0:
00D892  2  8D 13 03             STA     IECDC           ; save defered byte
00D895  2  20 05 D8             JSR     LAB_EE40        ; set clk/data, wait and Tx byte on serial bus
00D898  2               ; set serial ATN high
00D898  2               
00D898  2               LAB_EEC5:
00D898  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00D89B  2  29 7F                AND     #$7F            ; set serial ATN high
00D89D  2  8D 1F FE             STA     via1ora         ; set VIA 1 DRA, no handshake
00D8A0  2  60                   RTS
00D8A1  2               
00D8A1  2               
00D8A1  2               ;***********************************************************************************;
00D8A1  2               ;
00D8A1  2               ; send secondary address after TALK
00D8A1  2               
00D8A1  2               ; this routine transmits a secondary address on the serial bus for a TALK device.
00D8A1  2               ; This routine must be called with a number between 4 and 31 in the accumulator.
00D8A1  2               ; The routine will send this number as a secondary address command over the serial
00D8A1  2               ; bus. This routine can only be called after a call to the TALK routine. It will
00D8A1  2               ; not work after a LISTEN.
00D8A1  2               
00D8A1  2               LAB_EECE:
00D8A1  2  8D 13 03             STA     IECDC           ; save the secondary address byte to transmit
00D8A4  2  20 05 D8             JSR     LAB_EE40        ; set clk/data, wait and Tx byte on serial bus
00D8A7  2               
00D8A7  2  2C 17 03             BIT     IECSTW          ; test serial status byte
00D8AA  2  10 02                BPL     LAB_EED3        ; if device present
00D8AC  2  38                   SEC
00D8AD  2  60                   RTS
00D8AE  2               
00D8AE  2               ;***********************************************************************************;
00D8AE  2               ;
00D8AE  2               ; wait for bus end after send
00D8AE  2               
00D8AE  2               LAB_EED3:
00D8AE  2  78                   SEI                     ; disable interrupts
00D8AF  2  20 C1 D7             JSR     LAB_E4A9        ; set serial data out low
00D8B2  2  20 98 D8             JSR     LAB_EEC5        ; set serial ATN high
00D8B5  2  20 6A D9             JSR     LAB_EF84        ; set serial clock high
00D8B8  2               LAB_EEDD:
00D8B8  2  20 CA D7             JSR     LAB_E4B2        ; get serial clock status
00D8BB  2  B0 FB                BCS     LAB_EEDD        ; branch if clock high
00D8BD  2               
00D8BD  2  58                   CLI                     ; enable interrupts
00D8BE  2  60                   RTS
00D8BF  2               
00D8BF  2               
00D8BF  2               ;***********************************************************************************;
00D8BF  2               ;
00D8BF  2               ; output a byte to the serial bus
00D8BF  2               
00D8BF  2               ; this routine is used to send information to devices on the serial bus. A call to
00D8BF  2               ; this routine will put a data byte onto the serial bus using full handshaking.
00D8BF  2               ; Before this routine is called the LISTEN routine, LAB_FFB1, must be used to
00D8BF  2               ; command a device on the serial bus to get ready to receive data.
00D8BF  2               
00D8BF  2               ; the accumulator is loaded with a byte to output as data on the serial bus. A
00D8BF  2               ; device must be listening or the status word will return a timeout. This routine
00D8BF  2               ; always buffers one character. So when a call to the UNLISTEN routine, LAB_FFAE,
00D8BF  2               ; is made to end the data transmission, the buffered character is sent with EOI
00D8BF  2               ; set. Then the UNLISTEN command is sent to the device.
00D8BF  2               
00D8BF  2               LAB_EEE4:
00D8BF  2  2C 12 03             BIT     IECDCF          ; test deferred character flag
00D8C2  2  30 06                BMI     LAB_EEED        ; branch if defered character
00D8C4  2               
00D8C4  2  38                   SEC                     ; set carry
00D8C5  2  6E 12 03             ROR     IECDCF          ; shift into deferred character flag
00D8C8  2  D0 05                BNE     LAB_EEF2        ; save byte and exit, branch always
00D8CA  2               
00D8CA  2               LAB_EEED:
00D8CA  2  48                   PHA                     ; save byte
00D8CB  2  20 0E D8             JSR     LAB_EE49        ; Tx byte on serial bus
00D8CE  2  68                   PLA                     ; restore byte
00D8CF  2               LAB_EEF2:
00D8CF  2  8D 13 03             STA     IECDC           ; save defered byte
00D8D2  2  18                   CLC                     ; flag ok
00D8D3  2  60                   RTS
00D8D4  2               
00D8D4  2               
00D8D4  2               ;***********************************************************************************;
00D8D4  2               ;
00D8D4  2               ; command the serial bus to UNTALK
00D8D4  2               
00D8D4  2               ; this routine will transmit an UNTALK command on the serial bus. All devices
00D8D4  2               ; previously set to TALK will stop sending data when this command is received.
00D8D4  2               
00D8D4  2               LAB_EEF6:
00D8D4  2  20 73 D9             JSR     LAB_EF8D        ; set serial clock low
00D8D7  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00D8DA  2  09 80                ORA     #$80            ; set serial ATN low
00D8DC  2  8D 1F FE             STA     via1ora         ; set VIA 1 DRA, no handshake
00D8DF  2               
00D8DF  2  A9 5F                LDA     #$5F            ; set the UNTALK command
00D8E1  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_3FA9
00D8E2  2               
00D8E2  2               
00D8E2  2               ;***********************************************************************************;
00D8E2  2               ;
00D8E2  2               ; command the serial bus to UNLISTEN
00D8E2  2               
00D8E2  2               ; this routine commands all devices on the serial bus to stop receiving data from
00D8E2  2               ; the computer. Calling this routine results in an UNLISTEN command being transmitted
00D8E2  2               ; on the serial bus. Only devices previously commanded to listen will be affected.
00D8E2  2               
00D8E2  2               ; This routine is normally used after the computer is finished sending data to
00D8E2  2               ; external devices. Sending the UNLISTEN will command the listening devices to get
00D8E2  2               ; off the serial bus so it can be used for other purposes.
00D8E2  2               
00D8E2  2               LAB_EF04:
00D8E2  2  A9 3F                LDA     #$3F            ; set the UNLISTEN command
00D8E4  2  20 DC D7             JSR     LAB_EE1C        ; send control character
00D8E7  2               
00D8E7  2               ; ATN high, delay, clock high then data high
00D8E7  2               
00D8E7  2               LAB_EF09:
00D8E7  2  20 98 D8             JSR     LAB_EEC5        ; set serial ATN high
00D8EA  2               
00D8EA  2               ; 1ms delay, clock high then data high
00D8EA  2               
00D8EA  2               LAB_EF0C:
00D8EA  2  8A                   TXA                     ; save device number
00D8EB  2  A2 0B                LDX     #$0B            ; short delay
00D8ED  2               LAB_EF0F:
00D8ED  2  CA                   DEX                     ; decrement count
00D8EE  2  D0 FD                BNE     LAB_EF0F        ; loop if not all done
00D8F0  2               
00D8F0  2  AA                   TAX                     ; restore device number
00D8F1  2  20 6A D9             JSR     LAB_EF84        ; set serial clock high
00D8F4  2  4C B8 D7             JMP     LAB_E4A0        ; set serial data out high and return
00D8F7  2               
00D8F7  2               
00D8F7  2               ;***********************************************************************************;
00D8F7  2               ;
00D8F7  2               ; input a byte from the serial bus
00D8F7  2               
00D8F7  2               ; this routine reads a byte of data from the serial bus using full handshaking. the
00D8F7  2               ; data is returned in the accumulator. before using this routine the TALK routine,
00D8F7  2               ; LAB_FFB4, must have been called first to command the device on the serial bus to
00D8F7  2               ; send data on the bus. if the input device needs a secondary command it must be sent
00D8F7  2               ; by using the TKSA routine, LAB_FF96, before calling this routine.
00D8F7  2               
00D8F7  2               ; errors are returned in the status word which can be read by calling the READST
00D8F7  2               ; routine, LAB_FFB7.
00D8F7  2               
00D8F7  2               LAB_EF19:
00D8F7  2  78                   SEI                     ; disable interrupts
00D8F8  2  A9 00                LDA     #$00            ; clear A
00D8FA  2  8D 15 03             STA     IECBTC          ; clear serial bus bit count
00D8FD  2  20 6A D9             JSR     LAB_EF84        ; set serial clock high
00D900  2               LAB_EF21:
00D900  2  20 CA D7             JSR     LAB_E4B2        ; get serial clock status
00D903  2  90 FB                BCC     LAB_EF21        ; loop while clock low
00D905  2               
00D905  2  20 B8 D7             JSR     LAB_E4A0        ; set serial data out high
00D908  2               LAB_EF29:
00D908  2  A9 10                LDA     #$10            ; set timeout count high byte (MHZ DEPENDENT)
00D90A  2  8D 29 FE             STA     via2t2ch        ; set VIA 2 T2C_h
00D90D  2               LAB_EF2E:
00D90D  2  AD 2D FE             LDA     via2ifr         ; get VIA 2 IFR
00D910  2  29 20                AND     #$20            ; mask T2 interrupt
00D912  2  D0 07                BNE     LAB_EF3C        ; branch if T2 interrupt
00D914  2               
00D914  2  20 CA D7             JSR     LAB_E4B2        ; get serial clock status
00D917  2  B0 F4                BCS     LAB_EF2E        ; loop if clock high
00D919  2               
00D919  2  90 1A                BCC     LAB_EF54        ; else go se 8 bits to do, branch always
00D91B  2               
00D91B  2               ; T2 timed out
00D91B  2               LAB_EF3C:
00D91B  2  AD 15 03             LDA     IECBTC          ; get serial bus bit count
00D91E  2  F0 05                BEQ     LAB_EF45        ; if not already EOI then go flag EOI
00D920  2               
00D920  2  A9 02                LDA     #$02            ; error $02, read timeour
00D922  2  4C 8B D8             JMP     LAB_EEB9        ; set serial status and exit
00D925  2               
00D925  2               LAB_EF45:
00D925  2  20 C1 D7             JSR     LAB_E4A9        ; set serial data out low
00D928  2  20 EA D8             JSR     LAB_EF0C        ; 1ms delay, clock high then data high
00D92B  2  A9 40                LDA     #$40            ; set EOI
00D92D  2  20 89 D9             JSR     LAB_FE6A        ; OR into serial status byte
00D930  2  EE 15 03             INC     IECBTC          ; increment serial bus bit count, do error on next timeout
00D933  2  D0 D3                BNE     LAB_EF29        ; go try again
00D935  2               
00D935  2               LAB_EF54:
00D935  2  A9 08                LDA     #$08            ; 8 bits to do
00D937  2  8D 15 03             STA     IECBTC          ; set serial bus bit count
00D93A  2               LAB_EF58:
00D93A  2               
00D93A  2               ; STICKS HERE IF NO DATA TO READ
00D93A  2               
00D93A  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00D93D  2  CD 1F FE             CMP     via1ora         ; compare with self
00D940  2  D0 F8                BNE     LAB_EF58        ; loop if changing
00D942  2               ; OR HERE?
00D942  2  4A                   LSR                     ; serial clock into carry
00D943  2  90 F5                BCC     LAB_EF58        ; loop while serial clock low
00D945  2               
00D945  2  4A                   LSR                     ; serial data into carry
00D946  2  6E 16 03             ROR     IECCYC          ; shift data bit into receive byte
00D949  2               LAB_EF66:
00D949  2               
00D949  2  AD 1F FE             LDA     via1ora         ; get VIA 1 DRA, no handshake
00D94C  2  CD 1F FE             CMP     via1ora         ; compare with self
00D94F  2  D0 F8                BNE     LAB_EF66        ; loop if changing
00D951  2               
00D951  2  4A                   LSR                     ; serial clock into carry
00D952  2  B0 F5                BCS     LAB_EF66        ; loop while serial clock high
00D954  2               
00D954  2  CE 15 03             DEC     IECBTC          ; decrement serial bus bit count
00D957  2  D0 E1                BNE     LAB_EF58        ; loop if not all done
00D959  2               
00D959  2  20 C1 D7             JSR     LAB_E4A9        ; set serial data out low
00D95C  2  AD 17 03             LDA     IECSTW          ; get serial status byte
00D95F  2  F0 03                BEQ     LAB_EF7F        ; branch if no error
00D961  2               
00D961  2  20 EA D8             JSR     LAB_EF0C        ; 1ms delay, clock high then data high
00D964  2               LAB_EF7F:
00D964  2  AD 16 03             LDA     IECCYC          ; get receive byte
00D967  2  58                   CLI                     ; enable interrupts
00D968  2  18                   CLC
00D969  2  60                   RTS
00D96A  2               
00D96A  2               
00D96A  2               ;***********************************************************************************;
00D96A  2               ;
00D96A  2               ; set serial clock high
00D96A  2               
00D96A  2               LAB_EF84:
00D96A  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00D96D  2  29 FD                AND     #$FD            ; set CA2 low, serial clock out high
00D96F  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00D972  2  60                   RTS
00D973  2               
00D973  2               
00D973  2               ;***********************************************************************************;
00D973  2               ;
00D973  2               ; set serial clock low
00D973  2               
00D973  2               LAB_EF8D:
00D973  2  AD 2C FE             LDA     via2pcr         ; get VIA 2 PCR
00D976  2  09 02                ORA     #$02            ; set CA2 high, serial clock out low
00D978  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00D97B  2  60                   RTS
00D97C  2               
00D97C  2               
00D97C  2               ;***********************************************************************************;
00D97C  2               ;
00D97C  2               ; 1ms delay
00D97C  2               
00D97C  2               LAB_EF96:
00D97C  2  A9 40                LDA     #$40            ; set for 1024 cycles (MHZ)
00D97E  2  8D 29 FE             STA     via2t2ch        ; set VIA 2 T2C_h
00D981  2               LAB_EF9B:
00D981  2  AD 2D FE             LDA     via2ifr         ; get VIA 2 IFR
00D984  2  29 20                AND     #$20            ; mask T2 interrupt
00D986  2  F0 F9                BEQ     LAB_EF9B        ; loop until T2 interrupt
00D988  2               
00D988  2  60                   RTS
00D989  2               
00D989  2               ; OR into serial status byte
00D989  2               
00D989  2               LAB_FE6A:
00D989  2  0D 17 03             ORA     IECSTW          ; OR with serial status byte
00D98C  2  8D 17 03             STA     IECSTW          ; save serial status byte
00D98F  2  60                   RTS
00D990  2               
00D990  2               
00D990  2               ;***********************************************************************************;
00D990  2               ;
00D990  2               ; load RAM from a device
00D990  2               
00D990  2               ; this routine will load data bytes from any input device directly into the memory
00D990  2               ; of the computer.
00D990  2               ; If the input device was OPENed with a secondary address of 0 the header information from
00D990  2               ; device will be ignored. In this case Location LOADBUF must contain the starting address for the
00D990  2               ; load. LOADBANK must also be specified with the appropriate bank number.  If the device was addressed with a secondary address of 1 or 2 the data will
00D990  2               ; load into memory starting at the location specified by the header. This routine
00D990  2               ; returns the address of the highest RAM location which was loaded.
00D990  2               
00D990  2               ; Before this routine can be called,
00D990  2               ;		the SETLFS
00D990  2               ;		LAB_FFBA(set logical, first and second addresses)
00D990  2               ;		SETNAM
00D990  2               ;		LAB_FFBD(clear filename)
00D990  2               ; 	routines must be called.
00D990  2               LOADTORAM:
00D990  2               LAB_F549:
00D990  2  A9 00                LDA     #$00            ; clear A
00D992  2  8D 17 03             STA     IECSTW          ; clear serial status byte
00D995  2  AC 18 03             LDY     IECFNLN         ; get file name length
00D998  2  D0 03                BNE     LAB_F563        ; branch if not null name
00D99A  2  4C A8 DA             JMP     LAB_F793        ; else do missing file name error and return
00D99D  2               LAB_F563:
00D99D  2  20 C5 DA             JSR     LAB_E4BC        ; get seconday address and print "Searching..."
00D9A0  2  A9 60                LDA     #$60            ;.
00D9A2  2  8D 19 03             STA     IECSECAD        ; save the secondary address
00D9A5  2  20 CB DA             JSR     LAB_F495        ; send secondary address and filename
00D9A8  2  AD 1C 03             LDA     IECDEVN         ; get device number
00D9AB  2  20 D4 D7             JSR     LAB_EE14        ; command a serial bus device to TALK
00D9AE  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00D9B1  2  20 A1 D8             JSR     LAB_EECE        ; send secondary address after TALK
00D9B4  2  20 F7 D8             JSR     LAB_EF19        ; input a byte from the serial bus
00D9B7  2               
00D9B7  2  8D 1A 03             STA     IECBUFFL        ; save program start address low byte
00D9BA  2  AD 17 03             LDA     IECSTW          ; get serial status byte
00D9BD  2  4A                   LSR                     ; shift time out read ..
00D9BE  2  4A                   LSR                     ; .. into carry bit
00D9BF  2  B0 4B                BCS     LAB_F5C7        ; if timed out go do file not found error and return
00D9C1  2  20 F7 D8             JSR     LAB_EF19        ; input a byte from the serial bus
00D9C4  2  8D 1B 03             STA     IECBUFFH        ; save program start address high byte
00D9C7  2  20 14 DB             JSR     LAB_E4C1        ; set LOAD address if secondary address = 0
00D9CA  2               LAB_F58A:
00D9CA  2  A9 FD                LDA     #$FD            ; mask xxxx xx0x, clear time out read bit
00D9CC  2  2D 17 03             AND     IECSTW          ; mask serial status byte
00D9CF  2  8D 17 03             STA     IECSTW          ; set serial status byte
00D9D2  2  20 95 DC             JSR     LAB_FFE1        ; scan stop key, return Zb = 1 = [STOP]
00D9D5  2  D0 03                BNE     LAB_F598        ; branch if not [STOP]
00D9D7  2  4C 6A DA             JMP     LAB_F6CB        ; else close the serial bus device and flag stop
00D9DA  2               
00D9DA  2               LAB_F598:
00D9DA  2  20 F7 D8             JSR     LAB_EF19        ; input a byte from the serial bus
00D9DD  2  AA                   TAX                     ; copy byte
00D9DE  2  AD 17 03             LDA     IECSTW          ; get serial status byte
00D9E1  2  4A                   LSR                     ; shift time out read ..
00D9E2  2  4A                   LSR                     ; .. into carry bit
00D9E3  2  B0 E5                BCS     LAB_F58A        ; if timed out go ??
00D9E5  2               
00D9E5  2  AD 24 03             LDA     LOADBANK        ; set load bank
00D9E8  2  8B                   PHB
00D9E9  2  48                   PHA
00D9EA  2  8A                   TXA                     ; copy received byte back
00D9EB  2  C2 10                INDEX16
00D9ED  2  AE 22 03             LDX     LOADBUFL
00D9F0  2  AB                   PLB
00D9F1  2  9D 00 00             STA     A:0,x           ; save byte to memory
00D9F4  2  AB                   PLB                     ; restore bank
00D9F5  2  E2 10                INDEX8
00D9F7  2               
00D9F7  2               LAB_F5B5:
00D9F7  2  EE 22 03             INC     LOADBUFL        ; increment save pointer low byte
00D9FA  2  D0 03                BNE     LAB_F5BB        ; if no rollover skip the high byte increment
00D9FC  2               
00D9FC  2  EE 23 03             INC     LOADBUFH        ; else increment save pointer high byte
00D9FF  2               LAB_F5BB:
00D9FF  2  2C 17 03             BIT     IECSTW          ; test serial status byte
00DA02  2  50 C6                BVC     LAB_F58A        ; loop if not end of file
00DA04  2               
00DA04  2  20 D4 D8             JSR     LAB_EEF6        ; command the serial bus to UNTALK
00DA07  2  20 79 DA             JSR     LAB_F6DA        ; close serial bus device
00DA0A  2  90 03                BCC     LAB_F641        ; if ?? go flag ok and exit
00DA0C  2               
00DA0C  2               LAB_F5C7:
00DA0C  2  4C 9C DA             JMP     LAB_F787        ; do file not found error and return
00DA0F  2               
00DA0F  2               LAB_F641:
00DA0F  2  18                   CLC                     ; flag ok
00DA10  2  AE 1A 03             LDX     IECBUFFL        ; get the LOAD end pointer low byte
00DA13  2  AC 1B 03             LDY     IECBUFFH        ; get the LOAD end pointer high byte
00DA16  2               LAB_F646:
00DA16  2  60                   RTS
00DA17  2               
00DA17  2               ;***********************************************************************************;
00DA17  2               ;
00DA17  2               ; save RAM to a device
00DA17  2               ; this routine saves a section of memory.
00DA17  2               ; Start Address in IECSTRT
00DA17  2               ; End Address in LOADBUF
00DA17  2               ; LOADBANK must also be specified with the appropriate bank number.
00DA17  2               
00DA17  2               ; Before this routine can be called,
00DA17  2               ;		the SETLFS
00DA17  2               ;		LAB_FFBA(set logical, first and second addresses)
00DA17  2               ;		SETNAM
00DA17  2               ;		LAB_FFBD(clear filename)
00DA17  2               ; 	routines must be called.
00DA17  2               ;***********************************************************************************;
00DA17  2               ;
00DA17  2               ; save RAM to device, A = index to start address, XY = end address low/high
00DA17  2               
00DA17  2               IECSAVERAM:
00DA17  2               ;***********************************************************************************;
00DA17  2               ;
00DA17  2               ; save
00DA17  2               
00DA17  2               LAB_F685:
00DA17  2  A9 00                LDA     #$00            ; clear A
00DA19  2  8D 17 03             STA     IECSTW          ; clear serial status byte
00DA1C  2  A9 61                LDA     #$61            ; set secondary address to $01
00DA1E  2               ; when a secondary address is to be sent to a device on
00DA1E  2               ; the serial bus the address must first be ORed with $60
00DA1E  2  8D 19 03             STA     IECSECAD        ; save secondary address
00DA21  2  AC 18 03             LDY     IECFNLN         ; get file name length
00DA24  2  D0 03                BNE     LAB_F69D        ; branch if filename not null
00DA26  2  4C A8 DA             JMP     LAB_F793        ; else do missing file name error and return
00DA29  2               
00DA29  2               LAB_F69D:
00DA29  2  20 CB DA             JSR     LAB_F495        ; send secondary address and filename
00DA2C  2  20 26 DB             JSR     LAB_F728        ; print saving [file name]
00DA2F  2  AD 1C 03             LDA     IECDEVN         ; get device number
00DA32  2  20 D7 D7             JSR     LAB_EE17        ; command devices on the serial bus to LISTEN
00DA35  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00DA38  2  20 92 D8             JSR     LAB_EEC0        ; send secondary address after LISTEN
00DA3B  2  A0 00                LDY     #$00            ; clear index
00DA3D  2  20 34 DB             JSR     LAB_FBD2        ; copy I/O start address to buffer address
00DA40  2  AD 1A 03             LDA     IECBUFFL        ; get buffer address low byte
00DA43  2  20 BF D8             JSR     LAB_EEE4        ; output a byte to the serial bus
00DA46  2  AD 1B 03             LDA     IECBUFFH        ; get buffer address high byte
00DA49  2  20 BF D8             JSR     LAB_EEE4        ; output a byte to the serial bus
00DA4C  2               LAB_F6BC:
00DA4C  2               
00DA4C  2  20 41 DB             JSR     LAB_FD11        ; check read/write pointer, return Cb = 1 if pointer >= end
00DA4F  2  B0 25                BCS     LAB_F6D7        ; go do UNLISTEN if at end
00DA51  2               
00DA51  2  AD 24 03             LDA     LOADBANK        ; set load bank
00DA54  2  8B                   PHB
00DA55  2  48                   PHA
00DA56  2  C2 10                INDEX16
00DA58  2  AE 1A 03             LDX     IECBUFFL
00DA5B  2  AB                   PLB
00DA5C  2  BD 00 00             LDA     A:0,x           ; load byte from memory
00DA5F  2  AB                   PLB                     ; restore bank
00DA60  2  E2 10                INDEX8
00DA62  2               
00DA62  2  20 BF D8             JSR     LAB_EEE4        ; output a byte to the serial bus
00DA65  2  20 95 DC             JSR     LAB_FFE1        ; scan stop key
00DA68  2  D0 07                BNE     LAB_F6D2        ; if stop not pressed go increment pointer and loop for next
00DA6A  2               
00DA6A  2               ; else ..
00DA6A  2               
00DA6A  2               ; close the serial bus device and flag stop
00DA6A  2               
00DA6A  2               LAB_F6CB:
00DA6A  2  20 79 DA             JSR     LAB_F6DA        ; close serial bus device
00DA6D  2  A9 00                LDA     #$00            ;.
00DA6F  2  38                   SEC                     ; flag stop
00DA70  2  60                   RTS
00DA71  2               
00DA71  2               LAB_F6D2:
00DA71  2  20 4F DB             JSR     LAB_FD1B        ; increment read/write pointer
00DA74  2  D0 D6                BNE     LAB_F6BC        ; loop, branch always
00DA76  2               
00DA76  2               ;***********************************************************************************;
00DA76  2               ;
00DA76  2               ; ??
00DA76  2               
00DA76  2               LAB_F6D7:
00DA76  2  20 E2 D8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00DA79  2               
00DA79  2               ; close the serial bus device
00DA79  2               
00DA79  2               LAB_F6DA:
00DA79  2  2C 19 03             BIT     IECSECAD        ; test the secondary address
00DA7C  2  30 13                BMI     LAB_F6EF        ; if already closed just exit
00DA7E  2               
00DA7E  2  AD 1C 03             LDA     IECDEVN         ; get the device number
00DA81  2  20 D7 D7             JSR     LAB_EE17        ; command devices on the serial bus to LISTEN
00DA84  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00DA87  2  29 EF                AND     #$EF            ; mask the channel number
00DA89  2  09 E0                ORA     #$E0            ; OR with the CLOSE command
00DA8B  2  20 92 D8             JSR     LAB_EEC0        ; send secondary address after LISTEN
00DA8E  2  20 E2 D8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00DA91  2               LAB_F6EF:
00DA91  2  18                   CLC                     ; flag ok
00DA92  2  60                   RTS
00DA93  2               
00DA93  2               ;***********************************************************************************;
00DA93  2               ;
00DA93  2               ; file error messages
00DA93  2               LAB_F77E:
00DA93  2  A9 01                LDA     #$01            ; too many files
00DA95  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_02A9
00DA96  2               LAB_F781:
00DA96  2  A9 02                LDA     #$02            ; file already open
00DA98  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_03A9
00DA99  2               LAB_F784:
00DA99  2  A9 03                LDA     #$03            ; file not open
00DA9B  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_04A9
00DA9C  2               LAB_F787:
00DA9C  2  A9 04                LDA     #$04            ; file not found
00DA9E  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_05A9
00DA9F  2               LAB_F78A:
00DA9F  2  A9 05                LDA     #$05            ; device not present
00DAA1  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_06A9
00DAA2  2               LAB_F78D:
00DAA2  2  A9 06                LDA     #$06            ; not input file
00DAA4  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_07A9
00DAA5  2               LAB_F790:
00DAA5  2  A9 07                LDA     #$07            ; not output file
00DAA7  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_08A9
00DAA8  2               LAB_F793:
00DAA8  2  A9 08                LDA     #$08            ; missing file name
00DAAA  2  2C                   .BYTE   $2C             ; makes next line BIT LAB_09A9
00DAAB  2               LAB_F796:
00DAAB  2  A9 09                LDA     #$09            ; illegal device number
00DAAD  2               
00DAAD  2  48                   PHA                     ; save error #
00DAAE  2  20 58 DB             JSR     LAB_FFCC        ; close input and output channels
00DAB1  2  A0 00                LDY     #LAB_F174-LAB_F174
00DAB3  2               ; index to "I/O ERROR #"
00DAB3  2  2C 1F 03             BIT     IECMSGM         ; test message mode flag
00DAB6  2  50 0A                BVC     LAB_F7AC        ; exit if kernal messages off
00DAB8  2               
00DAB8  2  20 B2 DB             JSR     LAB_F1E6        ; display kernel I/O message
00DABB  2  68                   PLA                     ; restore error #
00DABC  2  48                   PHA                     ; copy error #
00DABD  2  09 30                ORA     #'0'            ; convert to ASCII
00DABF  2  20 1C D2             JSR     OUTCH           ; output character to channel
00DAC2  2               LAB_F7AC:
00DAC2  2  68                   PLA                     ; pull error number
00DAC3  2  38                   SEC                     ; flag error
00DAC4  2  60                   RTS
00DAC5  2               
00DAC5  2               
00DAC5  2               ;***********************************************************************************;
00DAC5  2               ;
00DAC5  2               ; get seconday address and print "Searching..."
00DAC5  2               
00DAC5  2               LAB_E4BC:
00DAC5  2  AE 19 03             LDX     IECSECAD        ; get secondary address
00DAC8  2  4C C1 DB             JMP     LAB_F647        ; print "Searching..." and return
00DACB  2               
00DACB  2               
00DACB  2               
00DACB  2               ;***********************************************************************************;
00DACB  2               ;
00DACB  2               ; send secondary address and filename
00DACB  2               
00DACB  2               LAB_F495:
00DACB  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00DACE  2  30 42                BMI     LAB_F4C5        ; ok exit if -ve
00DAD0  2               
00DAD0  2  AC 18 03             LDY     IECFNLN         ; get file name length
00DAD3  2  F0 3D                BEQ     LAB_F4C5        ; ok exit if null
00DAD5  2               
00DAD5  2  AD 1C 03             LDA     IECDEVN         ; get device number
00DAD8  2  20 D7 D7             JSR     LAB_EE17        ; command devices on the serial bus to LISTEN
00DADB  2               
00DADB  2  AD 19 03             LDA     IECSECAD        ; get the secondary address
00DADE  2  09 F0                ORA     #$F0            ; OR with the OPEN command
00DAE0  2  20 92 D8             JSR     LAB_EEC0        ; send secondary address after LISTEN
00DAE3  2  AD 17 03             LDA     IECSTW          ; get serial status byte
00DAE6  2  10 05                BPL     LAB_F4B2        ; branch if device present
00DAE8  2  68                   PLA                     ; else dump calling address low byte
00DAE9  2  68                   PLA                     ; dump calling address high byte
00DAEA  2  4C 9F DA             JMP     LAB_F78A        ; do device not present error and return
00DAED  2               LAB_F4B2:
00DAED  2  AD 18 03             LDA     IECFNLN         ; get file name length
00DAF0  2  F0 1D                BEQ     LAB_F4C2        ; branch if null name
00DAF2  2  A8                   TAY
00DAF3  2  DA                   PHX
00DAF4  2  C2 10                INDEX16
00DAF6  2  AE 20 03             LDX     IECFNPL
00DAF9  2  DA                   PHX
00DAFA  2               LAB_F4B8:
00DAFA  2  C2 10                INDEX16
00DAFC  2  FA                   PLX
00DAFD  2  B5 00                LDA     0,X             ; get file name byte
00DAFF  2  E8                   INX
00DB00  2  DA                   PHX
00DB01  2  E2 10                INDEX8
00DB03  2  20 BF D8             JSR     LAB_EEE4        ; output a byte to the serial bus
00DB06  2  88                   DEY
00DB07  2  D0 F1                BNE     LAB_F4B8        ; loop if not all done
00DB09  2  C2 10                INDEX16
00DB0B  2  FA                   PLX
00DB0C  2  E2 10                INDEX8
00DB0E  2  FA                   PLX
00DB0F  2               LAB_F4C2:
00DB0F  2  20 E2 D8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00DB12  2               LAB_F4C5:
00DB12  2  18                   CLC                     ; flag ok
00DB13  2  60                   RTS
00DB14  2               
00DB14  2               ;***********************************************************************************;
00DB14  2               ;
00DB14  2               ; set LOAD address if secondary address = 0
00DB14  2               
00DB14  2               LAB_E4C1:
00DB14  2  8A                   TXA                     ; copy secondary address
00DB15  2  D0 0C                BNE     LAB_E4CC        ; load location not set in LOAD call, so
00DB17  2               ; continue with load
00DB17  2  AD 1B 03             LDA     IECBUFFH        ; get load address high byte
00DB1A  2  8D 23 03             STA     LOADBUFH        ; save program start address high byte
00DB1D  2  AD 1A 03             LDA     IECBUFFL        ; get load address low byte
00DB20  2  8D 22 03             STA     LOADBUFL        ; save program start address low byte
00DB23  2               
00DB23  2               LAB_E4CC:
00DB23  2  4C F7 DB             JMP     LAB_F66A        ; display "LOADING" or "VERIFYING" and return
00DB26  2               
00DB26  2               
00DB26  2               ;***********************************************************************************;
00DB26  2               ;
00DB26  2               ; print saving [file name]
00DB26  2               
00DB26  2               LAB_F728:
00DB26  2  AD 1F 03             LDA     IECMSGM         ; get message mode flag
00DB29  2  10 08                BPL     LAB_F727        ; exit if control messages off
00DB2B  2               
00DB2B  2  A0 2A                LDY     #LAB_F1C5-LAB_F174
00DB2D  2               ; index to "SAVING "
00DB2D  2  20 B2 DB             JSR     LAB_F1E6        ; display kernel I/O message
00DB30  2  4C D5 DB             JMP     LAB_F659        ; print file name and return
00DB33  2               LAB_F727:
00DB33  2  60                   RTS
00DB34  2               
00DB34  2               ;***********************************************************************************;
00DB34  2               ;
00DB34  2               ; copy I/O start address to buffer address
00DB34  2               
00DB34  2               LAB_FBD2:
00DB34  2  AD 1E 03             LDA     IECSTRTH        ; get I/O start address high byte
00DB37  2  8D 1B 03             STA     IECBUFFH        ; set buffer address high byte
00DB3A  2  AD 1D 03             LDA     IECSTRTL        ; get I/O start address low byte
00DB3D  2  8D 1A 03             STA     IECBUFFL        ; set buffer address low byte
00DB40  2  60                   RTS
00DB41  2               
00DB41  2               
00DB41  2               
00DB41  2               ;***********************************************************************************;
00DB41  2               ;
00DB41  2               ; check read/write pointer
00DB41  2               ; return Cb = 1 if pointer >= end
00DB41  2               
00DB41  2               LAB_FD11:
00DB41  2  38                   SEC                     ; set carry for subtract
00DB42  2  AD 1A 03             LDA     IECBUFFL        ; get buffer address low byte
00DB45  2  ED 22 03             SBC     LOADBUFL        ; subtract buffer end low byte
00DB48  2  AD 1B 03             LDA     IECBUFFH        ; get buffer address high byte
00DB4B  2  ED 23 03             SBC     LOADBUFH        ; subtract buffer end high byte
00DB4E  2  60                   RTS
00DB4F  2               
00DB4F  2               ;***********************************************************************************;
00DB4F  2               ;
00DB4F  2               ; increment read/write pointer
00DB4F  2               
00DB4F  2               LAB_FD1B:
00DB4F  2  EE 1A 03             INC     IECBUFFL        ; increment buffer address low byte
00DB52  2  D0 03                BNE     LAB_FD21        ; if no overflow skip the high byte increment
00DB54  2               
00DB54  2  EE 1B 03             INC     IECBUFFH        ; increment buffer address high byte
00DB57  2               LAB_FD21:
00DB57  2  60                   RTS
00DB58  2               
00DB58  2               ;***********************************************************************************;
00DB58  2               ;
00DB58  2               ; close input and output channels
00DB58  2               
00DB58  2               ; this routine is called to clear all open channels and restore the I/O channels to
00DB58  2               ; their original default values. It is usually called after opening other I/O
00DB58  2               ; channels and using them for input/output operations. The default input device is
00DB58  2               ; 0, the keyboard. The default output device is 3, the screen.
00DB58  2               
00DB58  2               ; If one of the channels to be closed is to the serial port, an UNTALK signal is sent
00DB58  2               ; first to clear the input channel or an UNLISTEN is sent to clear the output channel.
00DB58  2               ; By not calling this routine and leaving listener(s) active on the serial bus,
00DB58  2               ; several devices can receive the same data from the VIC at the same time. One way to
00DB58  2               ; take advantage of this would be to command the printer to TALK and the disk to
00DB58  2               ; LISTEN. This would allow direct printing of a disk file.
00DB58  2               
00DB58  2               LAB_FFCC:
00DB58  2  20 E2 D8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00DB5B  2               LAB_F3FC:
00DB5B  2  20 D4 D8             JSR     LAB_EEF6        ; command the serial bus to UNTALK
00DB5E  2               LAB_F403:
00DB5E  2  60                   RTS
00DB5F  2               
00DB5F  2               ;***********************************************************************************;
00DB5F  2               ;
00DB5F  2               ; kernel I/O messages
00DB5F  2               
00DB5F  2               LAB_F174:
00DB5F  2  0A 0D 49 2F          .BYTE   $0A,$0D,"I/O ERROR #",0
00DB63  2  4F 20 45 52  
00DB67  2  52 4F 52 20  
00DB6D  2               LAB_F180:
00DB6D  2  0A 0D 53 45          .BYTE   $0A,$0D,"SEARCHING ",0
00DB71  2  41 52 43 48  
00DB75  2  49 4E 47 20  
00DB7A  2               LAB_F18B:
00DB7A  2  46 4F 52 20          .BYTE   "FOR ",0
00DB7E  2  00           
00DB7F  2               LAB_F1BD:
00DB7F  2  0A 0D 4C 4F          .BYTE   $0A,$0D,"LOADING",0
00DB83  2  41 44 49 4E  
00DB87  2  47 00        
00DB89  2               LAB_F1C5:
00DB89  2  0A 0D 53 41          .BYTE   $0A,$0D,"SAVING ",0
00DB8D  2  56 49 4E 47  
00DB91  2  20 00        
00DB93  2               LAB_F1CD:
00DB93  2  0A 0D 56 45          .BYTE   $0A,$0D,"VERIFYING",0
00DB97  2  52 49 46 59  
00DB9B  2  49 4E 47 00  
00DB9F  2               LAB_F1D7:
00DB9F  2  0A 0D 46 4F          .BYTE   $0A,$0D,"FOUND ",0
00DBA3  2  55 4E 44 20  
00DBA7  2  00           
00DBA8  2               LAB_F1DE:
00DBA8  2  0A 0D 4F 4B          .BYTE   $0A,$0D,"OK",0
00DBAC  2  00           
00DBAD  2               
00DBAD  2               
00DBAD  2               ;***********************************************************************************;
00DBAD  2               ;
00DBAD  2               ; display control I/O message if in direct mode
00DBAD  2               
00DBAD  2               LAB_F1E2:
00DBAD  2  2C 1F 03             BIT     IECMSGM         ; test message mode flag
00DBB0  2  10 0D                BPL     LAB_F1F3        ; exit if control messages off
00DBB2  2               
00DBB2  2               ; display kernel I/O message
00DBB2  2               
00DBB2  2               LAB_F1E6:
00DBB2  2  B9 5F DB             LDA     LAB_F174,Y      ; get byte from message table
00DBB5  2  F0 08                BEQ     LAB_F1F3        ; loop if not end of message
00DBB7  2  08                   PHP                     ; save status
00DBB8  2  20 1C D2             JSR     OUTCH           ; output character to channel
00DBBB  2  C8                   INY                     ; increment index
00DBBC  2  28                   PLP                     ; restore status
00DBBD  2  80 F3                BRA     LAB_F1E6        ; loop if not end of message
00DBBF  2               
00DBBF  2               LAB_F1F3:
00DBBF  2  18                   CLC                     ;.
00DBC0  2  60                   RTS
00DBC1  2               
00DBC1  2               ;***********************************************************************************;
00DBC1  2               ;
00DBC1  2               ; print "searching"
00DBC1  2               
00DBC1  2               LAB_F647:
00DBC1  2  AD 1F 03             LDA     IECMSGM         ; get message mode flag
00DBC4  2  10 30                BPL     LAB_F669        ; exit if control messages off
00DBC6  2               
00DBC6  2  A0 0E                LDY     #LAB_F180-LAB_F174
00DBC8  2               ; index to "SEARCHING "
00DBC8  2  20 B2 DB             JSR     LAB_F1E6        ; display kernel I/O message
00DBCB  2  AD 18 03             LDA     IECFNLN         ; get file name length
00DBCE  2  F0 26                BEQ     LAB_F669        ; exit if null name
00DBD0  2               
00DBD0  2  A0 1B                LDY     #LAB_F18B-LAB_F174
00DBD2  2               ; else index to "FOR "
00DBD2  2  20 B2 DB             JSR     LAB_F1E6        ; display kernel I/O message
00DBD5  2               
00DBD5  2               ; print file name
00DBD5  2               
00DBD5  2               LAB_F659:
00DBD5  2  AC 18 03             LDY     IECFNLN         ; get file name length
00DBD8  2  F0 1C                BEQ     LAB_F669        ; exit if null file name
00DBDA  2               
00DBDA  2  DA                   PHX
00DBDB  2  C2 10                INDEX16
00DBDD  2  AE 20 03             LDX     IECFNPL
00DBE0  2  DA                   PHX
00DBE1  2               LAB_F65F:
00DBE1  2  C2 10                INDEX16
00DBE3  2  FA                   PLX
00DBE4  2  B5 00                LDA     0,X             ; get file name byte
00DBE6  2  E8                   INX
00DBE7  2  DA                   PHX
00DBE8  2  E2 10                INDEX8
00DBEA  2  20 1C D2             JSR     OUTCH           ; output character to channel
00DBED  2  88                   DEY
00DBEE  2  D0 F1                BNE     LAB_F65F        ; loop if more to do
00DBF0  2  C2 10                INDEX16
00DBF2  2  FA                   PLX
00DBF3  2  E2 10                INDEX8
00DBF5  2  FA                   PLX
00DBF6  2               LAB_F669:
00DBF6  2  60                   RTS
00DBF7  2               
00DBF7  2               ; display "LOADING" or "VERIFYING"
00DBF7  2               
00DBF7  2               LAB_F66A:
00DBF7  2  A0 20                LDY     #LAB_F1BD-LAB_F174
00DBF9  2               ; point to "LOADING"
00DBF9  2               LAB_F672:
00DBF9  2  4C AD DB             JMP     LAB_F1E2        ; display kernel I/O message if in direct mode and return
00DBFC  2               
00DBFC  2               LAB_FE49:
00DBFC  2  8D 18 03             STA     IECFNLN         ; set file name length
00DBFF  2  8E 20 03             STX     IECFNPL         ; set file name pointer low byte
00DC02  2  8C 21 03             STY     IECFNPH         ; set file name pointer high byte
00DC05  2  60                   RTS
00DC06  2               
00DC06  2               LAB_FE50:
00DC06  2  8D 26 03             STA     IECLFN          ; SET LOGICAL FILE NUMBER
00DC09  2  8E 1C 03             STX     IECDEVN         ; set device number
00DC0C  2  8C 19 03             STY     IECSECAD        ; set secondary address or command
00DC0F  2  60                   RTS
00DC10  2               
00DC10  2               
00DC10  2               
00DC10  2               LAB_F160:
00DC10  2  48                   PHA                     ; save A
00DC11  2  AD 1E FE             LDA     via1ier         ; get VIA 1 IER
00DC14  2  F0 0C                BEQ     LAB_F172        ; branch if no interrupts enabled. this branch will
00DC16  2               ; never be taken as b7 of IER always reads as 1
00DC16  2               ; according to the 6522 data sheet
00DC16  2               LAB_F166:
00DC16  2  AD 1E FE             LDA     via1ier         ; get VIA 1 IER
00DC19  2  29 60                AND     #$60            ; mask 0xx0 0000, T1 and T2 interrupts
00DC1B  2  D0 F9                BNE     LAB_F166        ; loop if T1 or T2 active
00DC1D  2               
00DC1D  2  A9 10                LDA     #$10            ; disable CB1 interrupt
00DC1F  2  8D 1E FE             STA     via1ier         ; set VIA 1 IER
00DC22  2               LAB_F172:
00DC22  2  68                   PLA                     ; restore A
00DC23  2  60                   RTS
00DC24  2               
00DC24  2               
00DC24  2               ;***********************************************************************************;
00DC24  2               ;
00DC24  2               ; initialize I/O registers
00DC24  2               
00DC24  2               INITIEC:
00DC24  2  A9 7F                LDA     #$7F            ; disable all interrupts
00DC26  2  8D 1E FE             STA     via1ier         ; on VIA 1 IER ..
00DC29  2  8D 2E FE             STA     via2ier         ; .. and VIA 2 IER
00DC2C  2               
00DC2C  2  A9 40                LDA     #$40            ; set T1 free run, T2 clock �2,
00DC2E  2               ; SR disabled, latches disabled
00DC2E  2  8D 2B FE             STA     via2acr         ; set VIA 2 ACR
00DC31  2               
00DC31  2  A9 40                LDA     #$40            ; set T1 free run, T2 clock �2,
00DC33  2               ; SR disabled, latches disabled
00DC33  2  8D 1B FE             STA     via1acr         ; set VIA 1 ACR
00DC36  2               
00DC36  2  A9 FE                LDA     #$FE            ; CB2 high, RS232 Tx
00DC38  2               ; CB1 +ve edge,
00DC38  2               ; CA2 high, tape motor off
00DC38  2               ; CA1 -ve edge
00DC38  2  8D 1C FE             STA     via1pcr         ; set VIA 1 PCR
00DC3B  2               
00DC3B  2  A9 DE                LDA     #$DE            ; CB2 low, serial data out high
00DC3D  2               ; CB1 +ve edge,
00DC3D  2               ; CA2 high, serial clock out low
00DC3D  2               ; CA1 -ve edge
00DC3D  2  8D 2C FE             STA     via2pcr         ; set VIA 2 PCR
00DC40  2               
00DC40  2  A2 00                LDX     #$00            ; all inputs, RS232 interface or parallel user port
00DC42  2  8E 12 FE             STX     via1ddrb        ; set VIA 1 DDRB
00DC45  2               
00DC45  2  A2 FF                LDX     #$FF            ; all outputs, keyboard column
00DC47  2  8E 22 FE             STX     via2ddrb        ; set VIA 2 DDRB
00DC4A  2               
00DC4A  2  A2 00                LDX     #$00            ; all inputs, keyboard row
00DC4C  2  8E 23 FE             STX     via2ddra        ; set VIA 2 DDRA
00DC4F  2               
00DC4F  2  A2 C0                LDX     #$C0            ; OIII IIII, ATN out, light pen, joystick, serial data
00DC51  2               ; in, serial clk in
00DC51  2  8E 13 FE             STX     via1ddra        ; set VIA 1 DDRA
00DC54  2               
00DC54  2  A2 00                LDX     #$00            ; ATN out low, set ATN high
00DC56  2  8E 1F FE             STX     via1ora         ; set VIA 1 DRA, no handshake
00DC59  2               
00DC59  2  A2 40                LDX     #$40            ; assert CS on DS1302
00DC5B  2  8E 1F FE             STX     via1ora         ; set VIA 1 DRA, no handshake
00DC5E  2               
00DC5E  2  20 6A D9             JSR     LAB_EF84        ; set serial clock high
00DC61  2  20 73 D9             JSR     LAB_EF8D        ; set serial clock low
00DC64  2               
00DC64  2               
00DC64  2               ;***********************************************************************************;
00DC64  2               ;
00DC64  2               ; set 60Hz and enable timer
00DC64  2  A9 C0                LDA     #$C0            ; enable T1 interrupt
00DC66  2  8D 2E FE             STA     via2ier         ; set VIA 2 IER
00DC69  2               ;	LDA	#$26			; set timer constant low byte [PAL]
00DC69  2               ;	LDA	#$89			; set timer constant low byte [NTSC]
00DC69  2               ;        LDA     #$FF            ; set timer constant low byte [4MHz]
00DC69  2  A9 F5                LDA     #$F5            ; set timer constant low byte [1.8432MHz]
00DC6B  2  8D 24 FE             STA     via2t1cl        ; set VIA 2 T1C_l
00DC6E  2               ;	LDA	#$48			; set timer constant high byte [PAL]
00DC6E  2               ;	LDA	#$42			; set timer constant high byte [NTSC]
00DC6E  2               ;        LDA     #$FF            ; set timer constant high byte [4MHz]
00DC6E  2  A9 75                LDA     #$75            ; set timer constant high byte [1.8432MHz]
00DC70  2  8D 25 FE             STA     via2t1ch        ; set VIA 2 T1C_h
00DC73  2               
00DC73  2  A9 00                LDA     #$00
00DC75  2  8D 14 03             STA     IECBCI
00DC78  2  8D 25 03             STA     IECOPENF
00DC7B  2  60                   RTS
00DC7C  2               
00DC7C  2               
00DC7C  2               IEC_DELAY:
00DC7C  2  48                   PHA
00DC7D  2  68                   PLA
00DC7E  2  48                   PHA
00DC7F  2  68                   PLA
00DC80  2  48                   PHA
00DC81  2  68                   PLA
00DC82  2  48                   PHA
00DC83  2  68                   PLA
00DC84  2               
00DC84  2  48                   PHA
00DC85  2  68                   PLA
00DC86  2  48                   PHA
00DC87  2  68                   PLA
00DC88  2  48                   PHA
00DC89  2  68                   PLA
00DC8A  2  48                   PHA
00DC8B  2  68                   PLA
00DC8C  2  48                   PHA
00DC8D  2  68                   PLA
00DC8E  2  48                   PHA
00DC8F  2  68                   PLA
00DC90  2  48                   PHA
00DC91  2  68                   PLA
00DC92  2  48                   PHA
00DC93  2  68                   PLA
00DC94  2  60                   RTS
00DC95  2               
00DC95  2               LAB_FFE1:
00DC95  2  20 74 FF             JSR     INPVEC
00DC98  2  C9 03                CMP     #$03
00DC9A  2  60                   RTS
00DC9B  2               
00DC9B  2               
00DC9B  2               ;***********************************************************************************;
00DC9B  2               ;
00DC9B  2               ; close a specified logical file
00DC9B  2               
00DC9B  2               ; this routine is used to close a logical file after all I/O operations have been
00DC9B  2               ; completed on that file. This routine is called after the accumulator is loaded
00DC9B  2               ; with the logical file number to be closed, the same number used when the file was
00DC9B  2               ; opened using the OPEN routine.
00DC9B  2               
00DC9B  2               LAB_F34A:
00DC9B  2  20 68 DD             JSR     LAB_F3D4        ; find file A
00DC9E  2  F0 02                BEQ     LAB_F351        ; if the file is found go close it
00DCA0  2               
00DCA0  2  18                   CLC                     ; else thr file was closed so just flag ok
00DCA1  2  60                   RTS
00DCA2  2               
00DCA2  2               ; found the file so close it
00DCA2  2               LAB_F351:
00DCA2  2  20 74 DD             JSR     LAB_F3DF        ; set file details from table,X
00DCA5  2  8A                   TXA                     ; copy file index to A
00DCA6  2  48                   PHA                     ; save file index
00DCA7  2  AD 1C 03             LDA     IECDEVN         ; get device number
00DCAA  2               ; do serial bus device file close
00DCAA  2               
00DCAA  2               LAB_F3AE:
00DCAA  2  20 79 DA             JSR     LAB_F6DA        ; close serial bus device
00DCAD  2               LAB_F3B1:
00DCAD  2  68                   PLA                     ; restore file index
00DCAE  2               ;
00DCAE  2               ; close file index X
00DCAE  2               
00DCAE  2               LAB_F3B2:
00DCAE  2  AA                   TAX                     ; copy index to file to close
00DCAF  2  CE 25 03             DEC     IECOPENF        ; decrement open file count
00DCB2  2  EC 25 03             CPX     IECOPENF        ; compare index with open file count
00DCB5  2  F0 15                BEQ     LAB_F3CD        ; exit if equal, last entry was closing file
00DCB7  2               
00DCB7  2               ; else entry was not last in list so copy last table entry
00DCB7  2               ; file details over the details of the closing one
00DCB7  2  AC 25 03             LDY     IECOPENF        ; get open file count as index
00DCBA  2  B9 B0 03             LDA     PTRLFT,Y        ; get last+1 logical file number from logical file table
00DCBD  2  9D B0 03             STA     PTRLFT,X        ; save logical file number over closed file
00DCC0  2  B9 BA 03             LDA     PTRDNT,Y        ; get last+1 device number from device number table
00DCC3  2  9D BA 03             STA     PTRDNT,X        ; save device number over closed file
00DCC6  2  B9 C4 03             LDA     PTRSAT,Y        ; get last+1 secondary address from secondary address table
00DCC9  2  9D C4 03             STA     PTRSAT,X        ; save secondary address over closed file
00DCCC  2               LAB_F3CD:
00DCCC  2  18                   CLC                     ;.
00DCCD  2               LAB_F3CE:
00DCCD  2  60                   RTS
00DCCE  2               
00DCCE  2               ;***********************************************************************************;
00DCCE  2               ;
00DCCE  2               ; open a logical file
00DCCE  2               
00DCCE  2               ; this routine is used to open a logical file. Once the logical file is set up it
00DCCE  2               ; can be used for input/output operations. Most of the I/O KERNAL routines call on
00DCCE  2               ; this routine to create the logical files to operate on. No arguments need to be
00DCCE  2               ; set up to use this routine, but both the SETLFS, LAB_FFBA, and SETNAM, LAB_FFBD,
00DCCE  2               ; KERNAL routines must be called before using this routine.
00DCCE  2               
00DCCE  2               LAB_F40A:
00DCCE  2  AE 26 03             LDX     IECLFN          ; get logical file number
00DCD1  2  D0 03                BNE     LAB_F411        ; branch if there is a file
00DCD3  2               
00DCD3  2  4C A2 DA             JMP     LAB_F78D        ; else do not input file error and return
00DCD6  2               
00DCD6  2               LAB_F411:
00DCD6  2  20 62 DD             JSR     LAB_F3CF        ; find file
00DCD9  2  D0 03                BNE     LAB_F419        ; branch if file not found
00DCDB  2               
00DCDB  2  4C 96 DA             JMP     LAB_F781        ; else do file already open error and return
00DCDE  2               
00DCDE  2               LAB_F419:
00DCDE  2  AE 25 03             LDX     IECOPENF        ; get open file count
00DCE1  2  E0 0A                CPX     #$0A            ; compare with max
00DCE3  2  90 03                BCC     LAB_F422        ; branch if less
00DCE5  2               
00DCE5  2  4C 93 DA             JMP     LAB_F77E        ; else do too many files error and return
00DCE8  2               
00DCE8  2               LAB_F422:
00DCE8  2  EE 25 03             INC     IECOPENF        ; increment open file count
00DCEB  2  AD 26 03             LDA     IECLFN          ; get logical file number
00DCEE  2  9D B0 03             STA     PTRLFT,X        ; save to logical file table
00DCF1  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00DCF4  2  09 60                ORA     #$60            ; OR with the OPEN CHANNEL command
00DCF6  2  8D 19 03             STA     IECSECAD        ; set secondary address
00DCF9  2  9D C4 03             STA     PTRSAT,X        ; save to secondary address table
00DCFC  2  AD 1C 03             LDA     IECDEVN         ; get device number
00DCFF  2  9D BA 03             STA     PTRDNT,X        ; save to device number table
00DD02  2               ; serial bus device
00DD02  2  20 CB DA             JSR     LAB_F495        ; send secondary address and filename
00DD05  2  18                   CLC                     ; flag ok
00DD06  2               LAB_F494:
00DD06  2  60                   RTS
00DD07  2               
00DD07  2               ;***********************************************************************************;
00DD07  2               ;
00DD07  2               ; open a channel for input
00DD07  2               
00DD07  2               ; any logical file that has already been opened by the OPEN routine, LAB_FFC0, can be
00DD07  2               ; defined as an input channel by this routine. the device on the channel must be an
00DD07  2               ; input device or an error will occur and the routine will abort.
00DD07  2               
00DD07  2               ; if you are getting data from anywhere other than the keyboard, this routine must be
00DD07  2               ; called before using either the CHRIN routine, LAB_FFCF, or the GETIN routine,
00DD07  2               ; LAB_FFE4. if you are getting data from the keyboard and no other input channels are
00DD07  2               ; open then the calls to this routine and to the OPEN routine, LAB_FFC0, are not needed.
00DD07  2               
00DD07  2               ; when used with a device on the serial bus this routine will automatically send the
00DD07  2               ; listen address specified by the OPEN routine, LAB_FFC0, and any secondary address.
00DD07  2               
00DD07  2               ; possible errors are:
00DD07  2               ;
00DD07  2               ;	3 : file not open
00DD07  2               ;	5 : device not present
00DD07  2               ;	6 : file is not an input file
00DD07  2               
00DD07  2               LAB_F2C7:
00DD07  2  20 62 DD             JSR     LAB_F3CF        ; find file
00DD0A  2  F0 03                BEQ     LAB_F2CF        ; branch if file opened
00DD0C  2  4C 99 DA             JMP     LAB_F784        ; do file not open error and return
00DD0F  2               
00DD0F  2               LAB_F2CF:
00DD0F  2  20 74 DD             JSR     LAB_F3DF        ; set file details from table,X
00DD12  2  AD 1C 03             LDA     IECDEVN         ; get device number
00DD15  2               ; device was serial bus device
00DD15  2               LAB_F2F0:
00DD15  2  AA                   TAX                     ; copy device number to X
00DD16  2  20 D4 D7             JSR     LAB_EE14        ; command a serial bus device to TALK
00DD19  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00DD1C  2  10 06                BPL     LAB_F2FE        ;.
00DD1E  2               
00DD1E  2  20 AE D8             JSR     LAB_EED3        ; wait for bus end after send
00DD21  2  4C 27 DD             JMP     LAB_F301        ;.
00DD24  2               
00DD24  2               LAB_F2FE:
00DD24  2  20 A1 D8             JSR     LAB_EECE        ; send secondary address after TALK
00DD27  2               LAB_F301:
00DD27  2  8A                   TXA                     ; copy device back to A
00DD28  2  2C 17 03             BIT     IECSTW          ; test serial status byte
00DD2B  2  10 03                BPL     LAB_F2EC        ; if device present save device number and exit
00DD2D  2               
00DD2D  2  4C 9F DA             JMP     LAB_F78A        ; do device not present error and return
00DD30  2               
00DD30  2               LAB_F2EC:
00DD30  2  8D 27 03             STA     IECIDN          ; save input device number
00DD33  2  18                   CLC                     ; flag ok
00DD34  2  60                   RTS
00DD35  2               
00DD35  2               ;***********************************************************************************;
00DD35  2               ;
00DD35  2               ; open a channel for output
00DD35  2               
00DD35  2               ; any logical file that has already been opened by the OPEN routine, LAB_FFC0, can be
00DD35  2               ; defined as an output channel by this routine the device on the channel must be an
00DD35  2               ; output device or an error will occur and the routine will abort.
00DD35  2               
00DD35  2               ; if you are sending data to anywhere other than the screen this routine must be
00DD35  2               ; called before using the CHROUT routine, LAB_FFD2. if you are sending data to the
00DD35  2               ; screen and no other output channels are open then the calls to this routine and to
00DD35  2               ; the OPEN routine, LAB_FFC0, are not needed.
00DD35  2               
00DD35  2               ; when used with a device on the serial bus this routine will automatically send the
00DD35  2               ; listen address specified by the OPEN routine, LAB_FFC0, and any secondary address.
00DD35  2               
00DD35  2               ; possible errors are:
00DD35  2               ;
00DD35  2               ;	3 : file not open
00DD35  2               ;	5 : device not present
00DD35  2               ;	7 : file is not an output file
00DD35  2               
00DD35  2               LAB_F309:
00DD35  2  20 62 DD             JSR     LAB_F3CF        ; find file
00DD38  2  F0 03                BEQ     LAB_F311        ; branch if file found
00DD3A  2               
00DD3A  2  4C 99 DA             JMP     LAB_F784        ; do file not open error and return
00DD3D  2               
00DD3D  2               LAB_F311:
00DD3D  2  20 74 DD             JSR     LAB_F3DF        ; set file details from table,X
00DD40  2  AD 1C 03             LDA     IECDEVN         ; get device number
00DD43  2  AA                   TAX                     ; copy device number
00DD44  2  20 D7 D7             JSR     LAB_EE17        ; command devices on the serial bus to LISTEN
00DD47  2  AD 19 03             LDA     IECSECAD        ; get secondary address
00DD4A  2  10 05                BPL     LAB_F33F        ; branch if address to send
00DD4C  2               
00DD4C  2  20 98 D8             JSR     LAB_EEC5        ; else set serial ATN high
00DD4F  2  D0 03                BNE     LAB_F342        ; branch always
00DD51  2               LAB_F33F:
00DD51  2  20 92 D8             JSR     LAB_EEC0        ; send secondary address after LISTEN
00DD54  2               LAB_F342:
00DD54  2  8A                   TXA                     ; copy device number back to A
00DD55  2  2C 17 03             BIT     IECSTW          ; test serial status byte
00DD58  2  10 03                BPL     LAB_F32E        ; if device present save output device number and exit
00DD5A  2  4C 9F DA             JMP     LAB_F78A        ; else do device not present error and return
00DD5D  2               
00DD5D  2               LAB_F32E:
00DD5D  2  8D 28 03             STA     IECODN          ; save output device number
00DD60  2  18                   CLC                     ; flag ok
00DD61  2  60                   RTS
00DD62  2               
00DD62  2               ;***********************************************************************************;
00DD62  2               ;
00DD62  2               ; find file
00DD62  2               
00DD62  2               LAB_F3CF:
00DD62  2  A9 00                LDA     #$00            ; clear A
00DD64  2  8D 17 03             STA     IECSTW          ; clear serial status byte
00DD67  2  8A                   TXA                     ; copy logical file number to A
00DD68  2               
00DD68  2               ; find file A
00DD68  2               
00DD68  2               LAB_F3D4:
00DD68  2  AE 25 03             LDX     IECOPENF        ; get open file count
00DD6B  2               LAB_F3D6:
00DD6B  2  CA                   DEX                     ; decrememnt count to give index
00DD6C  2  30 18                BMI     LAB_F3EE        ; exit if no files
00DD6E  2               
00DD6E  2  DD B0 03             CMP     PTRLFT,X        ; compare logical file number with table logical file number
00DD71  2  D0 F8                BNE     LAB_F3D6        ; loop if no match
00DD73  2               
00DD73  2  60                   RTS
00DD74  2               
00DD74  2               
00DD74  2               ;***********************************************************************************;
00DD74  2               ;
00DD74  2               ; set file details from table,X
00DD74  2               
00DD74  2               LAB_F3DF:
00DD74  2  BD B0 03             LDA     PTRLFT,X        ; get logical file from logical file table
00DD77  2  8D 26 03             STA     IECLFN          ; set logical file
00DD7A  2  BD BA 03             LDA     PTRDNT,X        ; get device number from device number table
00DD7D  2  8D 1C 03             STA     IECDEVN         ; set device number
00DD80  2  BD C4 03             LDA     PTRSAT,X        ; get secondary address from secondary address table
00DD83  2  8D 19 03             STA     IECSECAD        ; set secondary address
00DD86  2               LAB_F3EE:
00DD86  2  60                   RTS
00DD87  2               
00DD87  2               ;***********************************************************************************;
00DD87  2               ;
00DD87  2               ; close input and output channels
00DD87  2               
00DD87  2               ; this routine is called to clear all open channels and restore the I/O channels to
00DD87  2               ; their original default values. It is usually called after opening other I/O
00DD87  2               ; channels and using them for input/output operations. The default input device is
00DD87  2               ; 0, the keyboard. The default output device is 3, the screen.
00DD87  2               
00DD87  2               ; If one of the channels to be closed is to the serial port, an UNTALK signal is sent
00DD87  2               ; first to clear the input channel or an UNLISTEN is sent to clear the output channel.
00DD87  2               ; By not calling this routine and leaving listener(s) active on the serial bus,
00DD87  2               ; several devices can receive the same data from the VIC at the same time. One way to
00DD87  2               ; take advantage of this would be to command the printer to TALK and the disk to
00DD87  2               ; LISTEN. This would allow direct printing of a disk file.
00DD87  2               
00DD87  2               LAB_F3F3:
00DD87  2  20 E2 D8             JSR     LAB_EF04        ; command the serial bus to UNLISTEN
00DD8A  2  20 D4 D8             JSR     LAB_EEF6        ; command the serial bus to UNTALK
00DD8D  2  A9 00                LDA     #$00            ; set for keyboard
00DD8F  2  8D 28 03             STA     IECODN          ; set output device number to NULL
00DD92  2  8D 27 03             STA     IECIDN          ; set input device number to NULL
00DD95  2  60                   RTS
00DD96  2               
00DD96  1               ;______________________________________________________________
00DD96  1               
00DD96  1               
00DD96  1  00 00 00             .BYTE   00,00,00
00DD99  1               
00DD99  1                       .SEGMENT "NJUMP"
00DD99  1               ; BIOS JUMP TABLE (NATIVE)
00DD99  1                       .ORG    $FD00
00FD00  1               LPRINTVEC:
00FD00  1  20 1C D2             JSR     OUTCH
00FD03  1  6B                   RTL
00FD04  1               LINPVEC:
00FD04  1  20 55 D2             JSR     INCH
00FD07  1  6B                   RTL
00FD08  1               LINPWVEC:
00FD08  1  20 3A D2             JSR     INCHW
00FD0B  1  6B                   RTL
00FD0C  1               LSetXYVEC:
00FD0C  1  20 2B D4             JSR     SetXY
00FD0F  1  6B                   RTL
00FD10  1               LCPYVVEC:
00FD10  1  20 7D D2             JSR     DONOOP
00FD13  1  6B                   RTL
00FD14  1               LSrlUpVEC:
00FD14  1  20 3C D4             JSR     ScrollUp
00FD17  1  6B                   RTL
00FD18  1               LSetColorVEC:
00FD18  1  20 22 D4             JSR     SetColor
00FD1B  1  6B                   RTL
00FD1C  1               LCURSORVEC:
00FD1C  1  20 06 D3             JSR     CURSOR
00FD1F  1  6B                   RTL
00FD20  1               LUNCURSORVEC:
00FD20  1  20 46 D3             JSR     UNCURSOR
00FD23  1  6B                   RTL
00FD24  1               LWRITERTC:
00FD24  1  20 7D D2             JSR     DONOOP
00FD27  1  6B                   RTL
00FD28  1               LREADRTC:
00FD28  1  20 7D D2             JSR     DONOOP
00FD2B  1  6B                   RTL
00FD2C  1               LIECIN:
00FD2C  1  20 F7 D8             JSR     LAB_EF19        ;. Read byte from serial bus. (Must call TALK and TALKSA beforehands.)
00FD2F  1  6B                   RTL
00FD30  1               LIECOUT:
00FD30  1  20 BF D8             JSR     LAB_EEE4        ;. Write byte to serial bus. (Must call LISTEN and LSTNSA beforehands.)
00FD33  1  6B                   RTL
00FD34  1               LUNTALK:
00FD34  1  20 D4 D8             JSR     LAB_EEF6        ;. Send UNTALK command to serial bus.
00FD37  1  6B                   RTL
00FD38  1               LUNLSTN:
00FD38  1  20 E2 D8             JSR     LAB_EF04        ;. Send UNLISTEN command to serial bus.
00FD3B  1  6B                   RTL
00FD3C  1               LLISTEN:
00FD3C  1  20 D7 D7             JSR     LAB_EE17        ;. Send LISTEN command to serial bus.
00FD3F  1  6B                   RTL
00FD40  1               LTALK:
00FD40  1  20 D4 D7             JSR     LAB_EE14        ;. Send TALK command to serial bus.
00FD43  1  6B                   RTL
00FD44  1               LSETLFS:
00FD44  1  20 06 DC             JSR     LAB_FE50        ;. Set file parameters.
00FD47  1  6B                   RTL
00FD48  1               LSETNAM:
00FD48  1  20 FC DB             JSR     LAB_FE49        ;. Set file name parameters.
00FD4B  1  6B                   RTL
00FD4C  1               LLOAD:
00FD4C  1  20 90 D9             JSR     LOADTORAM       ;. Load or verify file. (Must call SETLFS and SETNAM beforehands.)
00FD4F  1  6B                   RTL
00FD50  1               LSAVE:
00FD50  1  20 17 DA             JSR     IECSAVERAM      ;. Save file. (Must call SETLFS and SETNAM beforehands.)
00FD53  1  6B                   RTL
00FD54  1               LIECINIT:
00FD54  1  20 24 DC             JSR     INITIEC         ; INIT IEC
00FD57  1  6B                   RTL
00FD58  1               LIECCLCH:
00FD58  1  20 87 DD             JSR     LAB_F3F3        ; close input and output channels
00FD5B  1  6B                   RTL
00FD5C  1               LIECOUTC:
00FD5C  1  20 35 DD             JSR     LAB_F309        ; open a channel for output
00FD5F  1  6B                   RTL
00FD60  1               LIECINPC:
00FD60  1  20 07 DD             JSR     LAB_F2C7        ; open a channel for input
00FD63  1  6B                   RTL
00FD64  1               LIECOPNLF:
00FD64  1  20 CE DC             JSR     LAB_F40A        ; open a logical file
00FD67  1  6B                   RTL
00FD68  1               LIECCLSLF:
00FD68  1  20 9B DC             JSR     LAB_F34A        ; close a specified logical file
00FD6B  1  6B                   RTL
00FD6C  1               LClearScrVec:
00FD6C  1  20 C3 D4             JSR     ClearScreen     ; clear the 9918 Screen
00FD6F  1  6B                   RTL
00FD70  1               LLOADFONTVec:
00FD70  1  20 7D D2             JSR     DONOOP
00FD73  1  6B                   RTL
00FD74  1               
00FD74  1                       .SEGMENT "EJUMP"
00FD74  1               ; BIOS JUMP TABLE (Emulation)
00FD74  1                       .ORG    $FF71
00FF71  1               PRINTVEC:
00FF71  1  4C 1C D2             JMP     OUTCH
00FF74  1               INPVEC:
00FF74  1  4C 55 D2             JMP     INCH
00FF77  1               INPWVEC:
00FF77  1  4C 3A D2             JMP     INCHW
00FF7A  1               SetXYVEC:
00FF7A  1  4C 2B D4             JMP     SetXY
00FF7D  1               CPYVVEC:
00FF7D  1  4C 7D D2             JMP     DONOOP
00FF80  1               SrlUpVEC:
00FF80  1  4C 3C D4             JMP     ScrollUp
00FF83  1               SetColorVEC:
00FF83  1  4C 22 D4             JMP     SetColor
00FF86  1               CURSORVEC:
00FF86  1  4C 06 D3             JMP     CURSOR
00FF89  1               UNCURSORVEC:
00FF89  1  4C 46 D3             JMP     UNCURSOR
00FF8C  1               WRITERTC:
00FF8C  1  4C 7D D2             JMP     DONOOP
00FF8F  1               READRTC:
00FF8F  1  4C 7D D2             JMP     DONOOP
00FF92  1               IECIN:
00FF92  1  4C F7 D8             JMP     LAB_EF19        ; Read byte from serial bus. (Must call TALK and TALKSA beforehands.)
00FF95  1               IECOUT:
00FF95  1  4C BF D8             JMP     LAB_EEE4        ; Write byte to serial bus. (Must call LISTEN and LSTNSA beforehands.)
00FF98  1               UNTALK:
00FF98  1  4C D4 D8             JMP     LAB_EEF6        ; Send UNTALK command to serial bus.
00FF9B  1               UNLSTN:
00FF9B  1  4C E2 D8             JMP     LAB_EF04        ; Send UNLISTEN command to serial bus.
00FF9E  1               LISTEN:
00FF9E  1  4C D7 D7             JMP     LAB_EE17        ; Send LISTEN command to serial bus.
00FFA1  1               TALK:
00FFA1  1  4C D4 D7             JMP     LAB_EE14        ; Send TALK command to serial bus.
00FFA4  1               SETLFS:
00FFA4  1  4C 06 DC             JMP     LAB_FE50        ; Set file parameters.
00FFA7  1               SETNAM:
00FFA7  1  4C FC DB             JMP     LAB_FE49        ; Set file name parameters.
00FFAA  1               LOAD:
00FFAA  1  4C 90 D9             JMP     LOADTORAM       ; Load or verify file. (Must call SETLFS and SETNAM beforehands.)
00FFAD  1               SAVE:
00FFAD  1  4C 17 DA             JMP     IECSAVERAM      ; Save file. (Must call SETLFS and SETNAM beforehands.)
00FFB0  1               IECINIT:
00FFB0  1  4C 24 DC             JMP     INITIEC         ; INIT IEC
00FFB3  1               IECCLCH:
00FFB3  1  4C 87 DD             JMP     LAB_F3F3        ; close input and output channels
00FFB6  1               IECOUTC:
00FFB6  1  4C 35 DD             JMP     LAB_F309        ; open a channel for output
00FFB9  1               IECINPC:
00FFB9  1  4C 07 DD             JMP     LAB_F2C7        ; open a channel for input
00FFBC  1               IECOPNLF:
00FFBC  1  4C CE DC             JMP     LAB_F40A        ; open a logical file
00FFBF  1               IECCLSLF:
00FFBF  1  4C 9B DC             JMP     LAB_F34A        ; close a specified logical file
00FFC2  1               ClearScrVec:
00FFC2  1  4C C3 D4             JMP     ClearScreen     ; clear the 9918 Screen
00FFC5  1               LOADFONTVec:
00FFC5  1  4C 7D D2             JMP     DONOOP
00FFC8  1               
00FFC8  1                       .SEGMENT "VECTORS"
00FFC8  1               ; 65c816 Native Vectors
00FFC8  1                       .ORG    $FFE4
00FFE4  1               COPVECTOR:
00FFE4  1  33 C0                .WORD   RCOPVECTOR
00FFE6  1               BRKVECTOR:
00FFE6  1  36 C0                .WORD   RBRKVECTOR
00FFE8  1               ABTVECTOR:
00FFE8  1  39 C0                .WORD   RABTVECTOR
00FFEA  1               NMIVECTOR:
00FFEA  1  3C C0                .WORD   RNMIVECTOR
00FFEC  1               resv1:
00FFEC  1  00 00                .WORD   $0000           ;
00FFEE  1               IRQVECTOR:
00FFEE  1  3F C0                .WORD   RIRQVECTOR      ; ROM VECTOR FOR IRQ
00FFF0  1               
00FFF0  1  00 00                .WORD   $0000           ;
00FFF2  1  00 00                .WORD   $0000           ;
00FFF4  1               
00FFF4  1               ; 6502 Emulation Vectors
00FFF4  1                       .ORG    $FFF4
00FFF4  1               ECOPVECTOR:
00FFF4  1  42 C0                .WORD   RECOPVECTOR
00FFF6  1               resv2:
00FFF6  1  00 00                .WORD   $0000
00FFF8  1               EABTVECTOR:
00FFF8  1  45 C0                .WORD   REABTVECTOR
00FFFA  1               ENMIVECTOR:
00FFFA  1  48 C0                .WORD   RENMIVECTOR
00FFFC  1               RSTVECTOR:
00FFFC  1  00 C0                .WORD   COLD_START      ;
00FFFE  1               EINTVECTOR:
00FFFE  1  4B C0                .WORD   REINTVECTOR     ; ROM VECTOR FOR IRQ
010000  1               
010000  1                       .END
